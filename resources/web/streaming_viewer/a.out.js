

// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};



// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)

  if (!Module.expectedDataFileDownloads) {
    Module.expectedDataFileDownloads = 0;
  }
  Module.expectedDataFileDownloads++;
  (function() {
   var loadPackage = function(metadata) {
  
      var PACKAGE_PATH;
      if (typeof window === 'object') {
        PACKAGE_PATH = window['encodeURIComponent'](window.location.pathname.toString().substring(0, window.location.pathname.toString().lastIndexOf('/')) + '/');
      } else if (typeof location !== 'undefined') {
        // worker
        PACKAGE_PATH = encodeURIComponent(location.pathname.toString().substring(0, location.pathname.toString().lastIndexOf('/')) + '/');
      } else {
        throw 'using preloaded data can only be done on a web page or in a web worker';
      }
      var PACKAGE_NAME = '../../resources/web/streaming_viewer/a.out.data';
      var REMOTE_PACKAGE_BASE = 'a.out.data';
      if (typeof Module['locateFilePackage'] === 'function' && !Module['locateFile']) {
        Module['locateFile'] = Module['locateFilePackage'];
        err('warning: you defined Module.locateFilePackage, that has been renamed to Module.locateFile (using your locateFilePackage for now)');
      }
      var REMOTE_PACKAGE_NAME = Module['locateFile'] ? Module['locateFile'](REMOTE_PACKAGE_BASE, '') : REMOTE_PACKAGE_BASE;
    
      var REMOTE_PACKAGE_SIZE = metadata['remote_package_size'];
      var PACKAGE_UUID = metadata['package_uuid'];
    
      function fetchRemotePackage(packageName, packageSize, callback, errback) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', packageName, true);
        xhr.responseType = 'arraybuffer';
        xhr.onprogress = function(event) {
          var url = packageName;
          var size = packageSize;
          if (event.total) size = event.total;
          if (event.loaded) {
            if (!xhr.addedTotal) {
              xhr.addedTotal = true;
              if (!Module.dataFileDownloads) Module.dataFileDownloads = {};
              Module.dataFileDownloads[url] = {
                loaded: event.loaded,
                total: size
              };
            } else {
              Module.dataFileDownloads[url].loaded = event.loaded;
            }
            var total = 0;
            var loaded = 0;
            var num = 0;
            for (var download in Module.dataFileDownloads) {
            var data = Module.dataFileDownloads[download];
              total += data.total;
              loaded += data.loaded;
              num++;
            }
            total = Math.ceil(total * Module.expectedDataFileDownloads/num);
            if (Module['setStatus']) Module['setStatus']('Downloading data... (' + loaded + '/' + total + ')');
          } else if (!Module.dataFileDownloads) {
            if (Module['setStatus']) Module['setStatus']('Downloading data...');
          }
        };
        xhr.onerror = function(event) {
          throw new Error("NetworkError for: " + packageName);
        }
        xhr.onload = function(event) {
          if (xhr.status == 200 || xhr.status == 304 || xhr.status == 206 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            var packageData = xhr.response;
            callback(packageData);
          } else {
            throw new Error(xhr.statusText + " : " + xhr.responseURL);
          }
        };
        xhr.send(null);
      };

      function handleError(error) {
        console.error('package error:', error);
      };
    
        var fetchedCallback = null;
        var fetched = Module['getPreloadedPackage'] ? Module['getPreloadedPackage'](REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE) : null;

        if (!fetched) fetchRemotePackage(REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE, function(data) {
          if (fetchedCallback) {
            fetchedCallback(data);
            fetchedCallback = null;
          } else {
            fetched = data;
          }
        }, handleError);
      
    function runWithFS() {
  
      function assert(check, msg) {
        if (!check) throw msg + new Error().stack;
      }
  Module['FS_createPath']('/', 'resources', true, true);
Module['FS_createPath']('/resources', 'wren', true, true);
Module['FS_createPath']('/resources/wren', 'shaders', true, true);

      /** @constructor */
      function DataRequest(start, end, audio) {
        this.start = start;
        this.end = end;
        this.audio = audio;
      }
      DataRequest.prototype = {
        requests: {},
        open: function(mode, name) {
          this.name = name;
          this.requests[name] = this;
          Module['addRunDependency']('fp ' + this.name);
        },
        send: function() {},
        onload: function() {
          var byteArray = this.byteArray.subarray(this.start, this.end);
          this.finish(byteArray);
        },
        finish: function(byteArray) {
          var that = this;
  
          Module['FS_createDataFile'](this.name, null, byteArray, true, true, true); // canOwn this data in the filesystem, it is a slide into the heap that will never change
          Module['removeRunDependency']('fp ' + that.name);
  
          this.requests[this.name] = null;
        }
      };
  
          var files = metadata['files'];
          for (var i = 0; i < files.length; ++i) {
            new DataRequest(files[i]['start'], files[i]['end'], files[i]['audio']).open('GET', files[i]['filename']);
          }
  
    
      function processPackageData(arrayBuffer) {
        assert(arrayBuffer, 'Loading data file failed.');
        assert(arrayBuffer instanceof ArrayBuffer, 'bad input to processPackageData');
        var byteArray = new Uint8Array(arrayBuffer);
        var curr;
        
          // Reuse the bytearray from the XHR as the source for file reads.
          DataRequest.prototype.byteArray = byteArray;
    
            var files = metadata['files'];
            for (var i = 0; i < files.length; ++i) {
              DataRequest.prototype.requests[files[i].filename].onload();
            }
                Module['removeRunDependency']('datafile_../../resources/web/streaming_viewer/a.out.data');

      };
      Module['addRunDependency']('datafile_../../resources/web/streaming_viewer/a.out.data');
    
      if (!Module.preloadResults) Module.preloadResults = {};
    
        Module.preloadResults[PACKAGE_NAME] = {fromCache: false};
        if (fetched) {
          processPackageData(fetched);
          fetched = null;
        } else {
          fetchedCallback = processPackageData;
        }
      
    }
    if (Module['calledRun']) {
      runWithFS();
    } else {
      if (!Module['preRun']) Module['preRun'] = [];
      Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
    }
  
   }
   loadPackage({"files": [{"filename": "/resources/wren/shaders/smaa_blending_weights.vert", "start": 0, "end": 944, "audio": 0}, {"filename": "/resources/wren/shaders/phong_stencil_diffuse_specular.vert", "start": 944, "end": 1979, "audio": 0}, {"filename": "/resources/wren/shaders/pbr.frag", "start": 1979, "end": 17930, "audio": 0}, {"filename": "/resources/wren/shaders/gtao_temporal_denoise.frag", "start": 17930, "end": 20551, "audio": 0}, {"filename": "/resources/wren/shaders/depth_only.vert", "start": 20551, "end": 21072, "audio": 0}, {"filename": "/resources/wren/shaders/lens_flare.vert", "start": 21072, "end": 21295, "audio": 0}, {"filename": "/resources/wren/shaders/default.frag", "start": 21295, "end": 22615, "audio": 0}, {"filename": "/resources/wren/shaders/light_representation.frag", "start": 22615, "end": 22815, "audio": 0}, {"filename": "/resources/wren/shaders/gaussian_blur_13_tap.frag", "start": 22815, "end": 26054, "audio": 0}, {"filename": "/resources/wren/shaders/merge_spherical.frag", "start": 26054, "end": 29812, "audio": 0}, {"filename": "/resources/wren/shaders/phong.vert", "start": 29812, "end": 30720, "audio": 0}, {"filename": "/resources/wren/shaders/handles.frag", "start": 30720, "end": 32314, "audio": 0}, {"filename": "/resources/wren/shaders/smaa_final_blend.vert", "start": 32314, "end": 32954, "audio": 0}, {"filename": "/resources/wren/shaders/line_set.frag", "start": 32954, "end": 33461, "audio": 0}, {"filename": "/resources/wren/shaders/bake_diffuse_cubemap.frag", "start": 33461, "end": 34808, "audio": 0}, {"filename": "/resources/wren/shaders/gtao_combine.frag", "start": 34808, "end": 35833, "audio": 0}, {"filename": "/resources/wren/shaders/overlay.vert", "start": 35833, "end": 38630, "audio": 0}, {"filename": "/resources/wren/shaders/point_set.frag", "start": 38630, "end": 39495, "audio": 0}, {"filename": "/resources/wren/shaders/simple.frag", "start": 39495, "end": 40276, "audio": 0}, {"filename": "/resources/wren/shaders/smaa_edge_detect.frag", "start": 40276, "end": 42047, "audio": 0}, {"filename": "/resources/wren/shaders/gaussian_blur_5_tap.frag", "start": 42047, "end": 44693, "audio": 0}, {"filename": "/resources/wren/shaders/motion_blur.frag", "start": 44693, "end": 45230, "audio": 0}, {"filename": "/resources/wren/shaders/point_set.vert", "start": 45230, "end": 45803, "audio": 0}, {"filename": "/resources/wren/shaders/depth_of_field.frag", "start": 45803, "end": 49263, "audio": 0}, {"filename": "/resources/wren/shaders/shadow_volume.vert", "start": 49263, "end": 51569, "audio": 0}, {"filename": "/resources/wren/shaders/noise_mask.frag", "start": 51569, "end": 52112, "audio": 0}, {"filename": "/resources/wren/shaders/lens_distortion.frag", "start": 52112, "end": 53115, "audio": 0}, {"filename": "/resources/wren/shaders/simple.vert", "start": 53115, "end": 53716, "audio": 0}, {"filename": "/resources/wren/shaders/pass_through.vert", "start": 53716, "end": 53925, "audio": 0}, {"filename": "/resources/wren/shaders/lens_flare.frag", "start": 53925, "end": 55748, "audio": 0}, {"filename": "/resources/wren/shaders/handles.vert", "start": 55748, "end": 57251, "audio": 0}, {"filename": "/resources/wren/shaders/hdr_resolve.frag", "start": 57251, "end": 57660, "audio": 0}, {"filename": "/resources/wren/shaders/pbr.vert", "start": 57660, "end": 58661, "audio": 0}, {"filename": "/resources/wren/shaders/bake_cubemap.vert", "start": 58661, "end": 58882, "audio": 0}, {"filename": "/resources/wren/shaders/bright_pass.frag", "start": 58882, "end": 60191, "audio": 0}, {"filename": "/resources/wren/shaders/fog.frag", "start": 60191, "end": 61223, "audio": 0}, {"filename": "/resources/wren/shaders/bounding_volume.frag", "start": 61223, "end": 61314, "audio": 0}, {"filename": "/resources/wren/shaders/color_noise.frag", "start": 61314, "end": 62647, "audio": 0}, {"filename": "/resources/wren/shaders/bake_specular_cubemap.frag", "start": 62647, "end": 66258, "audio": 0}, {"filename": "/resources/wren/shaders/bake_brdf.frag", "start": 66258, "end": 69292, "audio": 0}, {"filename": "/resources/wren/shaders/picking.vert", "start": 69292, "end": 69654, "audio": 0}, {"filename": "/resources/wren/shaders/blend_lens_flare.frag", "start": 69654, "end": 69967, "audio": 0}, {"filename": "/resources/wren/shaders/line_set.vert", "start": 69967, "end": 70486, "audio": 0}, {"filename": "/resources/wren/shaders/overlay.frag", "start": 70486, "end": 74105, "audio": 0}, {"filename": "/resources/wren/shaders/coordinate_system.vert", "start": 74105, "end": 74991, "audio": 0}, {"filename": "/resources/wren/shaders/depth_only.frag", "start": 74991, "end": 75096, "audio": 0}, {"filename": "/resources/wren/shaders/range_noise.vert", "start": 75096, "end": 75904, "audio": 0}, {"filename": "/resources/wren/shaders/encode_depth.frag", "start": 75904, "end": 76253, "audio": 0}, {"filename": "/resources/wren/shaders/depth_resolution.frag", "start": 76253, "end": 76590, "audio": 0}, {"filename": "/resources/wren/shaders/gtao_spatial_denoise.frag", "start": 76590, "end": 80264, "audio": 0}, {"filename": "/resources/wren/shaders/bake_brdf.vert", "start": 80264, "end": 80447, "audio": 0}, {"filename": "/resources/wren/shaders/bounding_volume.vert", "start": 80447, "end": 80817, "audio": 0}, {"filename": "/resources/wren/shaders/pbr_stencil_diffuse_specular.frag", "start": 80817, "end": 93710, "audio": 0}, {"filename": "/resources/wren/shaders/pass_through.frag", "start": 93710, "end": 93974, "audio": 0}, {"filename": "/resources/wren/shaders/fog.vert", "start": 93974, "end": 94622, "audio": 0}, {"filename": "/resources/wren/shaders/light_representation.vert", "start": 94622, "end": 95665, "audio": 0}, {"filename": "/resources/wren/shaders/pbr_stencil_diffuse_specular.vert", "start": 95665, "end": 96800, "audio": 0}, {"filename": "/resources/wren/shaders/pbr_stencil_ambient_emissive.vert", "start": 96800, "end": 97927, "audio": 0}, {"filename": "/resources/wren/shaders/picking.frag", "start": 97927, "end": 98324, "audio": 0}, {"filename": "/resources/wren/shaders/encode_depth.vert", "start": 98324, "end": 98764, "audio": 0}, {"filename": "/resources/wren/shaders/color_noise.vert", "start": 98764, "end": 99792, "audio": 0}, {"filename": "/resources/wren/shaders/smaa_final_blend.frag", "start": 99792, "end": 101632, "audio": 0}, {"filename": "/resources/wren/shaders/range_noise.frag", "start": 101632, "end": 102821, "audio": 0}, {"filename": "/resources/wren/shaders/default.vert", "start": 102821, "end": 103649, "audio": 0}, {"filename": "/resources/wren/shaders/skybox.vert", "start": 103649, "end": 104023, "audio": 0}, {"filename": "/resources/wren/shaders/coordinate_system.frag", "start": 104023, "end": 104595, "audio": 0}, {"filename": "/resources/wren/shaders/phong.frag", "start": 104595, "end": 112825, "audio": 0}, {"filename": "/resources/wren/shaders/skybox.frag", "start": 112825, "end": 113265, "audio": 0}, {"filename": "/resources/wren/shaders/pbr_stencil_ambient_emissive.frag", "start": 113265, "end": 120110, "audio": 0}, {"filename": "/resources/wren/shaders/blend_bloom.frag", "start": 120110, "end": 120824, "audio": 0}, {"filename": "/resources/wren/shaders/phong_stencil_ambient_emissive.frag", "start": 120824, "end": 123448, "audio": 0}, {"filename": "/resources/wren/shaders/gaussian_blur.frag", "start": 123448, "end": 125121, "audio": 0}, {"filename": "/resources/wren/shaders/gtao.frag", "start": 125121, "end": 131521, "audio": 0}, {"filename": "/resources/wren/shaders/hdr_clear.frag", "start": 131521, "end": 131938, "audio": 0}, {"filename": "/resources/wren/shaders/phong_stencil_ambient_emissive.vert", "start": 131938, "end": 132905, "audio": 0}, {"filename": "/resources/wren/shaders/smaa_edge_detect.vert", "start": 132905, "end": 133556, "audio": 0}, {"filename": "/resources/wren/shaders/phong_stencil_diffuse_specular.frag", "start": 133556, "end": 140603, "audio": 0}, {"filename": "/resources/wren/shaders/gaussian_blur_9_tap.frag", "start": 140603, "end": 143406, "audio": 0}, {"filename": "/resources/wren/shaders/smaa_blending_weights.frag", "start": 143406, "end": 159727, "audio": 0}, {"filename": "/resources/wren/shaders/shadow_volume.frag", "start": 159727, "end": 159922, "audio": 0}], "remote_package_size": 159922, "package_uuid": "62b95fcf-3e2e-4b41-a030-c9313e10b5e2"});
  
  })();
  

    // All the pre-js content up to here must remain later on, we need to run
    // it.
    var necessaryPreJSTasks = Module['preRun'].slice();
  
    if (!Module['preRun']) throw 'Module.preRun should exist because file support used it; did a pre-js delete it?';
    necessaryPreJSTasks.forEach(function(task) {
      if (Module['preRun'].indexOf(task) < 0) throw 'All preRun tasks that exist before user pre-js code should remain after; did you replace Module or modify Module.preRun?';
    });
  

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

var arguments_ = [];
var thisProgram = './this.program';
var quit_ = function(status, toThrow) {
  throw toThrow;
};

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;
ENVIRONMENT_IS_WEB = typeof window === 'object';
ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
// N.b. Electron.js environment is simultaneously a NODE-environment, but
// also a web environment.
ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof process.versions === 'object' && typeof process.versions.node === 'string';
ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (Module['ENVIRONMENT']) {
  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)');
}



// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  }
  return scriptDirectory + path;
}

// Hooks that are implemented differently in different runtime environments.
var read_,
    readAsync,
    readBinary,
    setWindowTitle;

var nodeFS;
var nodePath;

if (ENVIRONMENT_IS_NODE) {
  if (ENVIRONMENT_IS_WORKER) {
    scriptDirectory = require('path').dirname(scriptDirectory) + '/';
  } else {
    scriptDirectory = __dirname + '/';
  }




read_ = function shell_read(filename, binary) {
  var ret = tryParseAsDataURI(filename);
  if (ret) {
    return binary ? ret : ret.toString();
  }
  if (!nodeFS) nodeFS = require('fs');
  if (!nodePath) nodePath = require('path');
  filename = nodePath['normalize'](filename);
  return nodeFS['readFileSync'](filename, binary ? null : 'utf8');
};

readBinary = function readBinary(filename) {
  var ret = read_(filename, true);
  if (!ret.buffer) {
    ret = new Uint8Array(ret);
  }
  assert(ret.buffer);
  return ret;
};



  if (process['argv'].length > 1) {
    thisProgram = process['argv'][1].replace(/\\/g, '/');
  }

  arguments_ = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  process['on']('unhandledRejection', abort);

  quit_ = function(status) {
    process['exit'](status);
  };

  Module['inspect'] = function () { return '[Emscripten Module object]'; };



} else
if (ENVIRONMENT_IS_SHELL) {


  if (typeof read != 'undefined') {
    read_ = function shell_read(f) {
      var data = tryParseAsDataURI(f);
      if (data) {
        return intArrayToString(data);
      }
      return read(f);
    };
  }

  readBinary = function readBinary(f) {
    var data;
    data = tryParseAsDataURI(f);
    if (data) {
      return data;
    }
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    arguments_ = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    arguments_ = arguments;
  }

  if (typeof quit === 'function') {
    quit_ = function(status) {
      quit(status);
    };
  }

  if (typeof print !== 'undefined') {
    // Prefer to use print/printErr where they exist, as they usually work better.
    if (typeof console === 'undefined') console = /** @type{!Console} */({});
    console.log = /** @type{!function(this:Console, ...*): undefined} */ (print);
    console.warn = console.error = /** @type{!function(this:Console, ...*): undefined} */ (typeof printErr !== 'undefined' ? printErr : print);
  }


} else

// Note that this includes Node.js workers when relevant (pthreads is enabled).
// Node.js workers are detected as a combination of ENVIRONMENT_IS_WORKER and
// ENVIRONMENT_IS_NODE.
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }


  // Differentiate the Web Worker from the Node Worker case, as reading must
  // be done differently.
  {




  read_ = function shell_read(url) {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  };

  if (ENVIRONMENT_IS_WORKER) {
    readBinary = function readBinary(url) {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(/** @type{!ArrayBuffer} */(xhr.response));
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  readAsync = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };




  }

  setWindowTitle = function(title) { document.title = title };
} else
{
  throw new Error('environment detection error');
}


// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
var out = Module['print'] || console.log.bind(console);
var err = Module['printErr'] || console.warn.bind(console);

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = null;

// Emit code to handle expected values on the Module object. This applies Module.x
// to the proper local x. This has two benefits: first, we only emit it if it is
// expected to arrive, and second, by using a local everywhere else that can be
// minified.
if (Module['arguments']) arguments_ = Module['arguments'];if (!Object.getOwnPropertyDescriptor(Module, 'arguments')) Object.defineProperty(Module, 'arguments', { configurable: true, get: function() { abort('Module.arguments has been replaced with plain arguments_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });
if (Module['thisProgram']) thisProgram = Module['thisProgram'];if (!Object.getOwnPropertyDescriptor(Module, 'thisProgram')) Object.defineProperty(Module, 'thisProgram', { configurable: true, get: function() { abort('Module.thisProgram has been replaced with plain thisProgram (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });
if (Module['quit']) quit_ = Module['quit'];if (!Object.getOwnPropertyDescriptor(Module, 'quit')) Object.defineProperty(Module, 'quit', { configurable: true, get: function() { abort('Module.quit has been replaced with plain quit_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
// Assertions on removed incoming Module JS APIs.
assert(typeof Module['memoryInitializerPrefixURL'] === 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['pthreadMainPrefixURL'] === 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['cdInitializerPrefixURL'] === 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['filePackagePrefixURL'] === 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['read'] === 'undefined', 'Module.read option was removed (modify read_ in JS)');
assert(typeof Module['readAsync'] === 'undefined', 'Module.readAsync option was removed (modify readAsync in JS)');
assert(typeof Module['readBinary'] === 'undefined', 'Module.readBinary option was removed (modify readBinary in JS)');
assert(typeof Module['setWindowTitle'] === 'undefined', 'Module.setWindowTitle option was removed (modify setWindowTitle in JS)');
assert(typeof Module['TOTAL_MEMORY'] === 'undefined', 'Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY');
if (!Object.getOwnPropertyDescriptor(Module, 'read')) Object.defineProperty(Module, 'read', { configurable: true, get: function() { abort('Module.read has been replaced with plain read_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });
if (!Object.getOwnPropertyDescriptor(Module, 'readAsync')) Object.defineProperty(Module, 'readAsync', { configurable: true, get: function() { abort('Module.readAsync has been replaced with plain readAsync (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });
if (!Object.getOwnPropertyDescriptor(Module, 'readBinary')) Object.defineProperty(Module, 'readBinary', { configurable: true, get: function() { abort('Module.readBinary has been replaced with plain readBinary (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });
if (!Object.getOwnPropertyDescriptor(Module, 'setWindowTitle')) Object.defineProperty(Module, 'setWindowTitle', { configurable: true, get: function() { abort('Module.setWindowTitle has been replaced with plain setWindowTitle (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });
var IDBFS = 'IDBFS is no longer included by default; build with -lidbfs.js';
var PROXYFS = 'PROXYFS is no longer included by default; build with -lproxyfs.js';
var WORKERFS = 'WORKERFS is no longer included by default; build with -lworkerfs.js';
var NODEFS = 'NODEFS is no longer included by default; build with -lnodefs.js';






// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  return Math.ceil(size / factor) * factor;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = Number(type.substr(1));
        assert(bits % 8 === 0, 'getNativeTypeSize invalid bits ' + bits + ', type ' + type);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}





// Wraps a JS function as a wasm function with a given signature.
function convertJsFunctionToWasm(func, sig) {
  return func;
}

var freeTableIndexes = [];

// Weak map of functions in the table to their indexes, created on first use.
var functionsInTableMap;

// Add a wasm function to the table.
function addFunctionWasm(func, sig) {
  var table = wasmTable;

  // Check if the function is already in the table, to ensure each function
  // gets a unique index. First, create the map if this is the first use.
  if (!functionsInTableMap) {
    functionsInTableMap = new WeakMap();
    for (var i = 0; i < table.length; i++) {
      var item = table.get(i);
      // Ignore null values.
      if (item) {
        functionsInTableMap.set(item, i);
      }
    }
  }
  if (functionsInTableMap.has(func)) {
    return functionsInTableMap.get(func);
  }

  // It's not in the table, add it now.


  var ret;
  // Reuse a free index if there is one, otherwise grow.
  if (freeTableIndexes.length) {
    ret = freeTableIndexes.pop();
  } else {
    ret = table.length;
    // Grow the table
    try {
      table.grow(1);
    } catch (err) {
      if (!(err instanceof RangeError)) {
        throw err;
      }
      throw 'Unable to grow wasm table. Set ALLOW_TABLE_GROWTH.';
    }
  }

  // Set the new value.
  try {
    // Attempting to call this with JS function will cause of table.set() to fail
    table.set(ret, func);
  } catch (err) {
    if (!(err instanceof TypeError)) {
      throw err;
    }
    assert(typeof sig !== 'undefined', 'Missing signature argument to addFunction');
    var wrapped = convertJsFunctionToWasm(func, sig);
    table.set(ret, wrapped);
  }

  functionsInTableMap.set(func, ret);

  return ret;
}

function removeFunctionWasm(index) {
  functionsInTableMap.delete(wasmTable.get(index));
  freeTableIndexes.push(index);
}

// 'sig' parameter is required for the llvm backend but only when func is not
// already a WebAssembly function.
function addFunction(func, sig) {
  assert(typeof func !== 'undefined');

  return addFunctionWasm(func, sig);
}

function removeFunction(index) {
  removeFunctionWasm(index);
}









function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

var tempRet0 = 0;

var setTempRet0 = function(value) {
  tempRet0 = value;
};

var getTempRet0 = function() {
  return tempRet0;
};

function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 1024;





// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html


var wasmBinary;if (Module['wasmBinary']) wasmBinary = Module['wasmBinary'];if (!Object.getOwnPropertyDescriptor(Module, 'wasmBinary')) Object.defineProperty(Module, 'wasmBinary', { configurable: true, get: function() { abort('Module.wasmBinary has been replaced with plain wasmBinary (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });
var noExitRuntime;if (Module['noExitRuntime']) noExitRuntime = Module['noExitRuntime'];if (!Object.getOwnPropertyDescriptor(Module, 'noExitRuntime')) Object.defineProperty(Module, 'noExitRuntime', { configurable: true, get: function() { abort('Module.noExitRuntime has been replaced with plain noExitRuntime (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });




// wasm2js.js - enough of a polyfill for the WebAssembly object so that we can load
// wasm2js code that way.

// Emit "var WebAssembly" if definitely using wasm2js. Otherwise, in MAYBE_WASM2JS
// mode, we can't use a "var" since it would prevent normal wasm from working.
/** @suppress{const} */
var
WebAssembly = {
  // Note that we do not use closure quoting (this['buffer'], etc.) on these
  // functions, as they are just meant for internal use. In other words, this is
  // not a fully general polyfill.
  Memory: function(opts) {
    this.buffer = new ArrayBuffer(opts['initial'] * 65536);
    this.grow = function(amount) {
      var oldBuffer = this.buffer;
      var ret = __growWasmMemory(amount);
      assert(this.buffer !== oldBuffer); // the call should have updated us
      return ret;
    };
  },

  // Table is not a normal constructor and instead returns the array object.
  // That lets us use the length property automatically, which is simpler and
  // smaller (but instanceof will not report that an instance of Table is an
  // instance of this function).
  Table: /** @constructor */ function(opts) {
    var ret = new Array(opts['initial']);
    ret.grow = function(by) {
      abort('Unable to grow wasm table. Build with ALLOW_TABLE_GROWTH.')
    };
    ret.set = function(i, func) {
      ret[i] = func;
    };
    ret.get = function(i) {
      return ret[i];
    };
    return ret;
  },

  Module: function(binary) {
    // TODO: use the binary and info somehow - right now the wasm2js output is embedded in
    // the main JS
  },

  Instance: function(module, info) {
    // TODO: use the module and info somehow - right now the wasm2js output is embedded in
    // the main JS
    // This will be replaced by the actual wasm2js code.
    this.exports = (
function instantiate(asmLibraryArg, wasmMemory, wasmTable) {


  var scratchBuffer = new ArrayBuffer(16);
  var i32ScratchView = new Int32Array(scratchBuffer);
  var f32ScratchView = new Float32Array(scratchBuffer);
  var f64ScratchView = new Float64Array(scratchBuffer);
  
  function wasm2js_scratch_load_i32(index) {
    return i32ScratchView[index];
  }
      
  function wasm2js_scratch_store_i32(index, value) {
    i32ScratchView[index] = value;
  }
      
  function wasm2js_scratch_load_f64() {
    return f64ScratchView[0];
  }
      
  function wasm2js_scratch_store_f64(value) {
    f64ScratchView[0] = value;
  }
      
  function wasm2js_scratch_load_f32() {
    return f32ScratchView[2];
  }
      
  function wasm2js_scratch_store_f32(value) {
    f32ScratchView[2] = value;
  }
      
function asmFunc(global, env, buffer) {
 var memory = env.memory;
 var FUNCTION_TABLE = wasmTable;
 var HEAP8 = new global.Int8Array(buffer);
 var HEAP16 = new global.Int16Array(buffer);
 var HEAP32 = new global.Int32Array(buffer);
 var HEAPU8 = new global.Uint8Array(buffer);
 var HEAPU16 = new global.Uint16Array(buffer);
 var HEAPU32 = new global.Uint32Array(buffer);
 var HEAPF32 = new global.Float32Array(buffer);
 var HEAPF64 = new global.Float64Array(buffer);
 var Math_imul = global.Math.imul;
 var Math_fround = global.Math.fround;
 var Math_abs = global.Math.abs;
 var Math_clz32 = global.Math.clz32;
 var Math_min = global.Math.min;
 var Math_max = global.Math.max;
 var Math_floor = global.Math.floor;
 var Math_ceil = global.Math.ceil;
 var Math_sqrt = global.Math.sqrt;
 var abort = env.abort;
 var nan = global.NaN;
 var infinity = global.Infinity;
 var fimport$0 = env.glTexImage2D;
 var fimport$1 = env.__cxa_allocate_exception;
 var fimport$2 = env.__cxa_throw;
 var fimport$3 = env.__cxa_atexit;
 var fimport$4 = env.glUniform2f;
 var fimport$5 = env.glViewport;
 var fimport$6 = env.glUniform1i;
 var fimport$7 = env.glGetFloatv;
 var fimport$8 = env.glClearColor;
 var fimport$9 = env.glClear;
 var fimport$10 = env.glDeleteBuffers;
 var fimport$11 = env.glGenBuffers;
 var fimport$12 = env.glBufferData;
 var fimport$13 = env.glMapBufferRange;
 var fimport$14 = env.glUnmapBuffer;
 var fimport$15 = env.glDrawElements;
 var fimport$16 = env.glFlush;
 var fimport$17 = env.glGenVertexArrays;
 var fimport$18 = env.glBindBuffer;
 var fimport$19 = env.glVertexAttribPointer;
 var fimport$20 = env.glEnableVertexAttribArray;
 var fimport$21 = env.glDeleteVertexArrays;
 var fimport$22 = env.glReadBuffer;
 var fimport$23 = env.glReadPixels;
 var fimport$24 = env.glDrawBuffers;
 var fimport$25 = env.glBindFramebuffer;
 var fimport$26 = env.glBlitFramebuffer;
 var fimport$27 = env.glGenFramebuffers;
 var fimport$28 = env.glGenRenderbuffers;
 var fimport$29 = env.glRenderbufferStorage;
 var fimport$30 = env.glFramebufferRenderbuffer;
 var fimport$31 = env.glFramebufferTexture2D;
 var fimport$32 = env.glDeleteRenderbuffers;
 var fimport$33 = env.glDeleteFramebuffers;
 var fimport$34 = env.glGenerateMipmap;
 var fimport$35 = env.glTexParameteri;
 var fimport$36 = env.glTexParameterf;
 var fimport$37 = env.glCreateShader;
 var fimport$38 = env.glShaderSource;
 var fimport$39 = env.glCompileShader;
 var fimport$40 = env.glGetShaderiv;
 var fimport$41 = env.glGetShaderInfoLog;
 var fimport$42 = env.glDeleteShader;
 var fimport$43 = env.glCreateProgram;
 var fimport$44 = env.glAttachShader;
 var fimport$45 = env.glLinkProgram;
 var fimport$46 = env.glGetProgramiv;
 var fimport$47 = env.glGetProgramInfoLog;
 var fimport$48 = env.glDeleteProgram;
 var fimport$49 = env.glGetUniformLocation;
 var fimport$50 = env.glGetUniformBlockIndex;
 var fimport$51 = env.glUniformBlockBinding;
 var fimport$52 = env.glUniform1f;
 var fimport$53 = env.glUniformMatrix4fv;
 var fimport$54 = env.glGenTextures;
 var fimport$55 = env.glDeleteTextures;
 var fimport$56 = env.glGetIntegerv;
 var fimport$57 = env.glGetString;
 var fimport$58 = env.glEnable;
 var fimport$59 = env.glGetError;
 var fimport$60 = env.glDisable;
 var fimport$61 = env.glDepthFunc;
 var fimport$62 = env.glDepthMask;
 var fimport$63 = env.glStencilFunc;
 var fimport$64 = env.glStencilOp;
 var fimport$65 = env.glColorMask;
 var fimport$66 = env.glCullFace;
 var fimport$67 = env.glFrontFace;
 var fimport$68 = env.glBlendFunc;
 var fimport$69 = env.glBlendEquation;
 var fimport$70 = env.glPolygonOffset;
 var fimport$71 = env.glStencilOpSeparate;
 var fimport$72 = env.glStencilMask;
 var fimport$73 = env.glActiveTexture;
 var fimport$74 = env.glTexParameterfv;
 var fimport$75 = env.glUseProgram;
 var fimport$76 = env.glBindVertexArray;
 var fimport$77 = env.glBindTexture;
 var fimport$78 = env.glBindRenderbuffer;
 var fimport$79 = env.glBindBufferBase;
 var fimport$80 = env.glUniform2fv;
 var fimport$81 = env.glUniform3fv;
 var fimport$82 = env.glUniform4fv;
 var fimport$83 = env.emscripten_webgl_init_context_attributes;
 var fimport$84 = env.emscripten_webgl_create_context;
 var fimport$85 = env.emscripten_set_canvas_element_size;
 var fimport$86 = env.emscripten_webgl_make_context_current;
 var fimport$87 = env.__sys_open;
 var fimport$88 = env.__sys_fcntl64;
 var fimport$89 = env.__sys_ioctl;
 var fimport$90 = env.fd_read;
 var fimport$91 = env.fd_close;
 var fimport$92 = env.fd_write;
 var fimport$93 = env.abort;
 var fimport$94 = env.environ_sizes_get;
 var fimport$95 = env.environ_get;
 var fimport$96 = env.__map_file;
 var fimport$97 = env.__sys_munmap;
 var fimport$98 = env.strftime_l;
 var fimport$99 = env.emscripten_resize_heap;
 var fimport$100 = env.emscripten_memcpy_big;
 var fimport$101 = env.setTempRet0;
 var fimport$102 = env.fd_seek;
 var global$0 = 5580064;
 var global$1 = 0;
 var global$2 = 21780;
 var global$3 = 334832;
 var global$4 = 1;
 var global$5 = 21208;
 var global$6 = 21672;
 var global$7 = 21712;
 var global$8 = 21168;
 var global$9 = 2;
 var global$10 = 21340;
 var global$11 = 1;
 var global$12 = 21260;
 var global$13 = 66936;
 var global$14 = 21220;
 var global$15 = 1;
 var global$16 = 68008;
 var global$17 = 2776;
 var global$18 = 2780;
 var global$19 = 2784;
 var global$20 = 2788;
 var global$21 = 2792;
 var global$22 = 334824;
 var global$23 = 21728;
 var global$24 = 333896;
 var global$25 = 66496;
 var global$26 = 66508;
 var global$27 = 22772;
 var global$28 = 66724;
 var global$29 = 65844;
 var global$30 = 68064;
 var global$31 = 66520;
 var global$32 = 337180;
 var __wasm_intrinsics_temp_i64 = 0;
 var __wasm_intrinsics_temp_i64$hi = 0;
 var i64toi32_i32$HIGH_BITS = 0;
 // EMSCRIPTEN_START_FUNCS
;
 function $0() {
  $965();
  $952();
  $1();
  $20();
  $41();
  $45();
  $51();
  $70();
  $131();
  $136();
  $154();
  $159();
  $161();
  $163();
  $164();
  $172();
  $182();
  $185();
  $235();
  $239();
  $240();
  $251();
  $280();
  $281();
  $284();
  $302();
  $323();
  $340();
  $373();
  $446();
  $451();
  $452();
  $462();
  $485();
  $492();
  $510();
  $511();
  $521();
  $524();
  $525();
  $526();
  $546();
  $547();
  $551();
  $554();
  $562();
  $567();
  $578();
  $953();
 }
 
 function $1() {
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $0_1 = 0;
  $0_1 = global$1 + 24288 | 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  i64toi32_i32$1 = i64toi32_i32$1 + 12 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 32 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 44 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 40 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 52 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 60 | 0) >> 2] = 1065353216;
 }
 
 function $2($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $2_1 = 0, $4_1 = 0, $1_1 = 0, $7_1 = 0, $3_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $723($0_1 | 0) | 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 52 | 0) >> 2] = 0;
  HEAP32[($0_1 + 56 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 40 | 0) >> 2] = 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 32 | 0) >> 2] = 0;
  HEAP32[($0_1 + 36 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[$0_1 >> 2] = global$2 + 8 | 0;
  i64toi32_i32$1 = $0_1 + 60 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 68 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 76 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 84 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 91 | 0;
  i64toi32_i32$0 = 0;
  $7_1 = 0;
  HEAP8[i64toi32_i32$1 >> 0] = $7_1;
  HEAP8[(i64toi32_i32$1 + 1 | 0) >> 0] = $7_1 >>> 8 | 0;
  HEAP8[(i64toi32_i32$1 + 2 | 0) >> 0] = $7_1 >>> 16 | 0;
  HEAP8[(i64toi32_i32$1 + 3 | 0) >> 0] = $7_1 >>> 24 | 0;
  HEAP8[(i64toi32_i32$1 + 4 | 0) >> 0] = i64toi32_i32$0;
  HEAP8[(i64toi32_i32$1 + 5 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
  HEAP8[(i64toi32_i32$1 + 6 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
  HEAP8[(i64toi32_i32$1 + 7 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
  $2_1 = global$3;
  $3_1 = $0_1 + 4 | 0;
  $4_1 = $1618($1_1 + 8 | 0 | 0, $3_1 | 0) | 0;
  $2_1 = $1621($4_1 | 0, $2_1 | 0) | 0;
  $1018($4_1 | 0) | 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $2_1 = global$3;
   $4_1 = $1618($1_1 | 0, $3_1 | 0) | 0;
   HEAP32[($0_1 + 68 | 0) >> 2] = $1023($4_1 | 0, $2_1 | 0) | 0;
   $1018($4_1 | 0) | 0;
   $2_1 = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
   HEAP8[($0_1 + 98 | 0) >> 0] = FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($2_1) | 0;
  }
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1, 0, 4096) | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $3($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = fimport$1(8 | 0) | 0;
  $6($1_1 | 0, $0_1 | 0) | 0;
  $0_1 = global$4;
  fimport$2($1_1 | 0, global$5 | 0, $0_1 | 0);
  abort();
 }
 
 function $4($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  HEAP32[$0_1 >> 2] = global$2 + 8 | 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 64 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   $10($0_1 | 0) | 0;
   $615($1_1 | 0) | 0;
   HEAP32[($0_1 + 64 | 0) >> 2] = 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1, 0, 0) | 0;
  }
  label$2 : {
   if (!(HEAPU8[($0_1 + 96 | 0) >> 0] | 0)) {
    break label$2
   }
   $1_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$2
   }
   $2033($1_1 | 0);
  }
  label$3 : {
   if (!(HEAPU8[($0_1 + 97 | 0) >> 0] | 0)) {
    break label$3
   }
   $1_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$3
   }
   $2033($1_1 | 0);
  }
  $721($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $5($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$6;
  HEAP32[($0_1 + 108 | 0) >> 2] = $1_1 + 32 | 0;
  HEAP32[$0_1 >> 2] = $1_1 + 12 | 0;
  $4($0_1 + 8 | 0 | 0) | 0;
  $764($0_1 | 0, global$7 + 4 | 0 | 0) | 0;
  $715($0_1 + 108 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $6($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2037($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = global$8 + 8 | 0;
  return $0_1 | 0;
 }
 
 function $7($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$6;
  $0_1 = $0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0;
  HEAP32[($0_1 + 108 | 0) >> 2] = $1_1 + 32 | 0;
  HEAP32[$0_1 >> 2] = $1_1 + 12 | 0;
  $4($0_1 + 8 | 0 | 0) | 0;
  $764($0_1 | 0, global$7 + 4 | 0 | 0) | 0;
  $715($0_1 + 108 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $8($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$6;
  HEAP32[($0_1 + 108 | 0) >> 2] = $1_1 + 32 | 0;
  HEAP32[$0_1 >> 2] = $1_1 + 12 | 0;
  $4($0_1 + 8 | 0 | 0) | 0;
  $764($0_1 | 0, global$7 + 4 | 0 | 0) | 0;
  $715($0_1 + 108 | 0 | 0) | 0;
  $2032($0_1 | 0);
 }
 
 function $9($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$6;
  $0_1 = $0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0;
  HEAP32[($0_1 + 108 | 0) >> 2] = $1_1 + 32 | 0;
  HEAP32[$0_1 >> 2] = $1_1 + 12 | 0;
  $4($0_1 + 8 | 0 | 0) | 0;
  $764($0_1 | 0, global$7 + 4 | 0 | 0) | 0;
  $715($0_1 + 108 | 0 | 0) | 0;
  $2032($0_1 | 0);
 }
 
 function $10($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$1 = 0, $3_1 = 0, i64toi32_i32$4 = 0, $6$hi = 0, $2_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $1_1 = 0, $6_1 = 0, $5_1 = 0, $54_1 = 0, $78_1 = 0, $109$hi = 0, $140$hi = 0, $152_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = 0;
  label$1 : {
   label$2 : {
    if (!(HEAP32[($0_1 + 64 | 0) >> 2] | 0)) {
     break label$2
    }
    $3_1 = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
    if (!$3_1) {
     break label$1
    }
    label$3 : {
     label$4 : {
      label$5 : {
       $4_1 = HEAP32[($0_1 + 92 | 0) >> 2] | 0;
       if (!($4_1 & 16 | 0)) {
        break label$5
       }
       label$6 : {
        if ((HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) == (HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0)) {
         break label$6
        }
        $2_1 = -1;
        if ((FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0 | 0]($0_1, -1) | 0 | 0) == (-1 | 0)) {
         break label$2
        }
       }
       $5_1 = $0_1 + 72 | 0;
       label$7 : while (1) {
        $4_1 = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
        $3_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
        $3_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($4_1, $5_1, $3_1, $3_1 + (HEAP32[($0_1 + 52 | 0) >> 2] | 0) | 0, $1_1 + 12 | 0) | 0;
        $2_1 = -1;
        $4_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
        $54_1 = $4_1;
        $4_1 = (HEAP32[($1_1 + 12 | 0) >> 2] | 0) - $4_1 | 0;
        if (($2178($54_1 | 0, 1 | 0, $4_1 | 0, HEAP32[($0_1 + 64 | 0) >> 2] | 0 | 0) | 0 | 0) != ($4_1 | 0)) {
         break label$2
        }
        if (($3_1 | 0) == (1 | 0)) {
         continue label$7
        }
        break label$7;
       };
       if (($3_1 | 0) == (2 | 0)) {
        break label$2
       }
       if (!($616(HEAP32[($0_1 + 64 | 0) >> 2] | 0 | 0) | 0)) {
        break label$4
       }
       break label$2;
      }
      if (!($4_1 & 8 | 0)) {
       break label$4
      }
      i64toi32_i32$2 = $0_1;
      i64toi32_i32$0 = HEAP32[($0_1 + 80 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($0_1 + 84 | 0) >> 2] | 0;
      $78_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $1_1;
      HEAP32[i64toi32_i32$0 >> 2] = $78_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      label$8 : {
       label$9 : {
        if (!(HEAPU8[($0_1 + 98 | 0) >> 0] | 0)) {
         break label$9
        }
        i64toi32_i32$0 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) - (HEAP32[($0_1 + 12 | 0) >> 2] | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
        $6_1 = i64toi32_i32$0;
        $6$hi = i64toi32_i32$1;
        $4_1 = 0;
        break label$8;
       }
       $4_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($3_1) | 0;
       $3_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
       i64toi32_i32$0 = (HEAP32[($0_1 + 40 | 0) >> 2] | 0) - $3_1 | 0;
       i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
       $6_1 = i64toi32_i32$0;
       $6$hi = i64toi32_i32$1;
       label$10 : {
        if (($4_1 | 0) < (1 | 0)) {
         break label$10
        }
        i64toi32_i32$0 = Math_imul((HEAP32[($0_1 + 16 | 0) >> 2] | 0) - (HEAP32[($0_1 + 12 | 0) >> 2] | 0) | 0, $4_1);
        i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
        $109$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $6$hi;
        i64toi32_i32$1 = $109$hi;
        i64toi32_i32$2 = i64toi32_i32$0;
        i64toi32_i32$0 = $6$hi;
        i64toi32_i32$3 = $6_1;
        i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
        i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
        }
        $6_1 = i64toi32_i32$4;
        $6$hi = i64toi32_i32$5;
        $4_1 = 0;
        break label$8;
       }
       label$11 : {
        $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
        if (($4_1 | 0) != (HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0)) {
         break label$11
        }
        $4_1 = 0;
        break label$8;
       }
       $2_1 = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
       $4_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($2_1, $1_1, HEAP32[($0_1 + 32 | 0) >> 2] | 0, $3_1, $4_1 - (HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0) | 0;
       i64toi32_i32$2 = ((HEAP32[($0_1 + 36 | 0) >> 2] | 0) - $4_1 | 0) - (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
       i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
       $140$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $6$hi;
       i64toi32_i32$5 = $140$hi;
       i64toi32_i32$1 = i64toi32_i32$2;
       i64toi32_i32$2 = $6$hi;
       i64toi32_i32$3 = $6_1;
       i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$5 + $6$hi | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $6_1 = i64toi32_i32$0;
       $6$hi = i64toi32_i32$4;
       $4_1 = 1;
      }
      i64toi32_i32$4 = $6$hi;
      i64toi32_i32$4 = 0;
      i64toi32_i32$5 = 0;
      i64toi32_i32$1 = $6$hi;
      i64toi32_i32$3 = $6_1;
      i64toi32_i32$2 = i64toi32_i32$5 - i64toi32_i32$3 | 0;
      i64toi32_i32$0 = (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$1 | 0;
      i64toi32_i32$0 = i64toi32_i32$4 - i64toi32_i32$0 | 0;
      if ($619(HEAP32[($0_1 + 64 | 0) >> 2] | 0 | 0, i64toi32_i32$2 | 0, i64toi32_i32$0 | 0, 1 | 0) | 0) {
       break label$3
      }
      label$12 : {
       if (!$4_1) {
        break label$12
       }
       i64toi32_i32$4 = $1_1;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$4 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
       $152_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $0_1;
       HEAP32[($0_1 + 72 | 0) >> 2] = $152_1;
       HEAP32[($0_1 + 76 | 0) >> 2] = i64toi32_i32$5;
      }
      HEAP32[($0_1 + 92 | 0) >> 2] = 0;
      HEAP32[($0_1 + 16 | 0) >> 2] = 0;
      i64toi32_i32$0 = $0_1;
      i64toi32_i32$5 = 0;
      HEAP32[($0_1 + 8 | 0) >> 2] = 0;
      HEAP32[($0_1 + 12 | 0) >> 2] = i64toi32_i32$5;
      $4_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
      HEAP32[($0_1 + 40 | 0) >> 2] = $4_1;
      HEAP32[($0_1 + 36 | 0) >> 2] = $4_1;
     }
     $2_1 = 0;
     break label$2;
    }
    $2_1 = -1;
   }
   global$0 = $1_1 + 16 | 0;
   return $2_1 | 0;
  }
  $15();
  abort();
 }
 
 function $11($0_1) {
  $0_1 = $0_1 | 0;
  $2032($4($0_1 | 0) | 0 | 0);
 }
 
 function $12($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $2_1 = 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1) | 0;
  $1_1 = $1023($1_1 | 0, global$3 | 0) | 0;
  HEAP32[($0_1 + 68 | 0) >> 2] = $1_1;
  $2_1 = HEAPU8[($0_1 + 98 | 0) >> 0] | 0;
  $1_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($1_1) | 0;
  HEAP8[($0_1 + 98 | 0) >> 0] = $1_1;
  label$1 : {
   if (($2_1 | 0) == ($1_1 | 0)) {
    break label$1
   }
   i64toi32_i32$1 = $0_1;
   i64toi32_i32$0 = 0;
   HEAP32[($0_1 + 8 | 0) >> 2] = 0;
   HEAP32[($0_1 + 12 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $0_1 + 24 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $0_1 + 16 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $2_1 = HEAPU8[($0_1 + 96 | 0) >> 0] | 0;
   label$2 : {
    if (!$1_1) {
     break label$2
    }
    label$3 : {
     if (!($2_1 & 255 | 0)) {
      break label$3
     }
     $1_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
     if (!$1_1) {
      break label$3
     }
     $2033($1_1 | 0);
    }
    HEAP8[($0_1 + 96 | 0) >> 0] = HEAPU8[($0_1 + 97 | 0) >> 0] | 0;
    HEAP32[($0_1 + 52 | 0) >> 2] = HEAP32[($0_1 + 60 | 0) >> 2] | 0;
    $1_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$0 = 0;
    HEAP32[($0_1 + 56 | 0) >> 2] = 0;
    HEAP32[($0_1 + 60 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($0_1 + 32 | 0) >> 2] = $1_1;
    HEAP8[($0_1 + 97 | 0) >> 0] = 0;
    return;
   }
   label$4 : {
    if ($2_1 & 255 | 0) {
     break label$4
    }
    $1_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
    if (($1_1 | 0) == ($0_1 + 44 | 0 | 0)) {
     break label$4
    }
    HEAP8[($0_1 + 97 | 0) >> 0] = 0;
    HEAP32[($0_1 + 56 | 0) >> 2] = $1_1;
    $1_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
    HEAP32[($0_1 + 60 | 0) >> 2] = $1_1;
    $1_1 = $2031($1_1 | 0) | 0;
    HEAP8[($0_1 + 96 | 0) >> 0] = 1;
    HEAP32[($0_1 + 32 | 0) >> 2] = $1_1;
    return;
   }
   $1_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   HEAP32[($0_1 + 60 | 0) >> 2] = $1_1;
   $1_1 = $2031($1_1 | 0) | 0;
   HEAP8[($0_1 + 97 | 0) >> 0] = 1;
   HEAP32[($0_1 + 56 | 0) >> 2] = $1_1;
  }
 }
 
 function $13($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $4_1 = 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 16 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  label$1 : {
   if (!(HEAPU8[($0_1 + 96 | 0) >> 0] | 0)) {
    break label$1
   }
   $3_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
   if (!$3_1) {
    break label$1
   }
   $2033($3_1 | 0);
  }
  label$2 : {
   if (!(HEAPU8[($0_1 + 97 | 0) >> 0] | 0)) {
    break label$2
   }
   $3_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
   if (!$3_1) {
    break label$2
   }
   $2033($3_1 | 0);
  }
  HEAP32[($0_1 + 52 | 0) >> 2] = $2_1;
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      if ($2_1 >>> 0 < 9 >>> 0) {
       break label$6
      }
      $3_1 = HEAPU8[($0_1 + 98 | 0) >> 0] | 0;
      label$7 : {
       if (!$1_1) {
        break label$7
       }
       if (!($3_1 & 255 | 0)) {
        break label$7
       }
       HEAP8[($0_1 + 96 | 0) >> 0] = 0;
       HEAP32[($0_1 + 32 | 0) >> 2] = $1_1;
       break label$4;
      }
      $4_1 = $2031($2_1 | 0) | 0;
      HEAP8[($0_1 + 96 | 0) >> 0] = 1;
      HEAP32[($0_1 + 32 | 0) >> 2] = $4_1;
      break label$5;
     }
     HEAP8[($0_1 + 96 | 0) >> 0] = 0;
     HEAP32[($0_1 + 52 | 0) >> 2] = 8;
     HEAP32[($0_1 + 32 | 0) >> 2] = $0_1 + 44 | 0;
     $3_1 = HEAPU8[($0_1 + 98 | 0) >> 0] | 0;
    }
    if ($3_1 & 255 | 0) {
     break label$4
    }
    $3_1 = ($2_1 | 0) > (8 | 0) ? $2_1 : 8;
    HEAP32[($0_1 + 60 | 0) >> 2] = $3_1;
    $2_1 = 0;
    if ($1_1) {
     break label$3
    }
    $2_1 = 1;
    $1_1 = $2031($3_1 | 0) | 0;
    break label$3;
   }
   $1_1 = 0;
   HEAP32[($0_1 + 60 | 0) >> 2] = 0;
   $2_1 = 0;
  }
  HEAP8[($0_1 + 97 | 0) >> 0] = $2_1;
  HEAP32[($0_1 + 56 | 0) >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $14($0_1, $1_1, $2_1, $2$hi, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $5_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $7_1 = 0, $7$hi = 0, i64toi32_i32$4 = 0, $6_1 = 0, $6$hi = 0, $32_1 = 0, $34$hi = 0, $18_1 = 0;
  label$1 : {
   $5_1 = HEAP32[($1_1 + 68 | 0) >> 2] | 0;
   if (!$5_1) {
    break label$1
   }
   $5_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$5_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($5_1) | 0;
   i64toi32_i32$0 = -1;
   $6_1 = -1;
   $6$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   $7_1 = 0;
   $7$hi = i64toi32_i32$0;
   label$2 : {
    if (!(HEAP32[($1_1 + 64 | 0) >> 2] | 0)) {
     break label$2
    }
    label$3 : {
     i64toi32_i32$0 = $2$hi;
     if (!($2_1 | i64toi32_i32$0 | 0)) {
      break label$3
     }
     if (($5_1 | 0) < (1 | 0)) {
      break label$2
     }
    }
    if (FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($1_1) | 0) {
     break label$2
    }
    if ($3_1 >>> 0 > 2 >>> 0) {
     break label$2
    }
    i64toi32_i32$0 = 0;
    $7_1 = 0;
    $7$hi = i64toi32_i32$0;
    $32_1 = HEAP32[($1_1 + 64 | 0) >> 2] | 0;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = $5_1 >> 31 | 0;
    $34$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = $34$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$1 = __wasm_i64_mul($5_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, $2$hi | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    i64toi32_i32$4 = ($5_1 | 0) > (0 | 0);
    $18_1 = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = i64toi32_i32$4 ? $18_1 : 0;
    i64toi32_i32$2 = i64toi32_i32$4 ? i64toi32_i32$0 : i64toi32_i32$1;
    if ($619($32_1 | 0, i64toi32_i32$3 | 0, i64toi32_i32$2 | 0, $3_1 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$2 = $613(HEAP32[($1_1 + 64 | 0) >> 2] | 0 | 0) | 0;
    i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
    $6_1 = i64toi32_i32$2;
    $6$hi = i64toi32_i32$3;
    i64toi32_i32$4 = $1_1;
    i64toi32_i32$3 = HEAP32[($1_1 + 72 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($1_1 + 76 | 0) >> 2] | 0;
    $7_1 = i64toi32_i32$3;
    $7$hi = i64toi32_i32$2;
   }
   i64toi32_i32$2 = $6$hi;
   i64toi32_i32$3 = $0_1;
   HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] = $6_1;
   HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] = i64toi32_i32$2;
   i64toi32_i32$2 = $7$hi;
   HEAP32[i64toi32_i32$3 >> 2] = $7_1;
   HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$2;
   return;
  }
  $15();
  abort();
 }
 
 function $15() {
  var $0_1 = 0;
  $0_1 = fimport$1(4 | 0) | 0;
  $2129($0_1 | 0) | 0;
  fimport$2($0_1 | 0, global$10 | 0, global$9 | 0);
  abort();
 }
 
 function $16($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $25_1 = 0, $30_1 = 0, $33_1 = 0;
  label$1 : {
   label$2 : {
    if (!(HEAP32[($1_1 + 64 | 0) >> 2] | 0)) {
     break label$2
    }
    if (!(FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($1_1) | 0)) {
     break label$1
    }
   }
   i64toi32_i32$1 = $0_1;
   i64toi32_i32$0 = -1;
   HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = -1;
   HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   return;
  }
  label$3 : {
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
   if (!($619(HEAP32[($1_1 + 64 | 0) >> 2] | 0 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, 0 | 0) | 0)) {
    break label$3
   }
   i64toi32_i32$0 = $0_1;
   i64toi32_i32$1 = -1;
   HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = -1;
   HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   HEAP32[i64toi32_i32$0 >> 2] = 0;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   return;
  }
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $25_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $1_1;
  HEAP32[(i64toi32_i32$1 + 72 | 0) >> 2] = $25_1;
  HEAP32[(i64toi32_i32$1 + 76 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $30_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1 + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $30_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $33_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $33_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function $17($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $4_1 = 0, $3_1 = 0, $5_1 = 0, $1_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $146_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (HEAP32[($0_1 + 64 | 0) >> 2] | 0) {
      break label$3
     }
     $2_1 = -1;
     break label$2;
    }
    label$4 : {
     label$5 : {
      $3_1 = (HEAP32[($0_1 + 92 | 0) >> 2] | 0) & 8 | 0;
      if (!$3_1) {
       break label$5
      }
      $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
      break label$4;
     }
     HEAP32[($0_1 + 28 | 0) >> 2] = 0;
     i64toi32_i32$1 = $0_1;
     i64toi32_i32$0 = 0;
     HEAP32[($0_1 + 20 | 0) >> 2] = 0;
     HEAP32[($0_1 + 24 | 0) >> 2] = i64toi32_i32$0;
     $2_1 = HEAPU8[($0_1 + 98 | 0) >> 0] | 0;
     $4_1 = HEAP32[($0_1 + ($2_1 ? 52 : 60) | 0) >> 2] | 0;
     $2_1 = HEAP32[($0_1 + ($2_1 ? 32 : 56) | 0) >> 2] | 0;
     HEAP32[($0_1 + 92 | 0) >> 2] = 8;
     HEAP32[($0_1 + 8 | 0) >> 2] = $2_1;
     $2_1 = $2_1 + $4_1 | 0;
     HEAP32[($0_1 + 16 | 0) >> 2] = $2_1;
     HEAP32[($0_1 + 12 | 0) >> 2] = $2_1;
    }
    label$6 : {
     if ($2_1) {
      break label$6
     }
     $2_1 = $1_1 + 16 | 0;
     HEAP32[($0_1 + 16 | 0) >> 2] = $2_1;
     HEAP32[($0_1 + 12 | 0) >> 2] = $2_1;
     HEAP32[($0_1 + 8 | 0) >> 2] = $1_1 + 15 | 0;
    }
    label$7 : {
     label$8 : {
      if ($3_1) {
       break label$8
      }
      $4_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
      $3_1 = 0;
      break label$7;
     }
     $4_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
     $3_1 = ($4_1 - (HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0 | 0) / (2 | 0) | 0;
     $3_1 = $3_1 >>> 0 < 4 >>> 0 ? $3_1 : 4;
    }
    label$9 : {
     label$10 : {
      if (($2_1 | 0) != ($4_1 | 0)) {
       break label$10
      }
      $2175(HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0, $2_1 - $3_1 | 0 | 0, $3_1 | 0) | 0;
      label$11 : {
       if (!(HEAPU8[($0_1 + 98 | 0) >> 0] | 0)) {
        break label$11
       }
       label$12 : {
        $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
        $4_1 = $626($2_1 + $3_1 | 0 | 0, 1 | 0, ((HEAP32[($0_1 + 16 | 0) >> 2] | 0) - $3_1 | 0) - $2_1 | 0 | 0, HEAP32[($0_1 + 64 | 0) >> 2] | 0 | 0) | 0;
        if ($4_1) {
         break label$12
        }
        $2_1 = -1;
        break label$9;
       }
       $2_1 = (HEAP32[($0_1 + 8 | 0) >> 2] | 0) + $3_1 | 0;
       HEAP32[($0_1 + 12 | 0) >> 2] = $2_1;
       HEAP32[($0_1 + 16 | 0) >> 2] = $2_1 + $4_1 | 0;
       $2_1 = HEAPU8[$2_1 >> 0] | 0;
       break label$9;
      }
      label$13 : {
       $4_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
       $2_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
       if (($4_1 | 0) == ($2_1 | 0)) {
        break label$13
       }
       $2175(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0, $2_1 | 0, $4_1 - $2_1 | 0 | 0) | 0;
       $2_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
       $4_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
      }
      $5_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
      $2_1 = $5_1 + ($4_1 - $2_1 | 0) | 0;
      HEAP32[($0_1 + 36 | 0) >> 2] = $2_1;
      label$14 : {
       label$15 : {
        if (($5_1 | 0) != ($0_1 + 44 | 0 | 0)) {
         break label$15
        }
        $4_1 = 8;
        break label$14;
       }
       $4_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
      }
      $4_1 = $5_1 + $4_1 | 0;
      HEAP32[($0_1 + 40 | 0) >> 2] = $4_1;
      i64toi32_i32$0 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($0_1 + 76 | 0) >> 2] | 0;
      $146_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $0_1;
      HEAP32[($0_1 + 80 | 0) >> 2] = $146_1;
      HEAP32[($0_1 + 84 | 0) >> 2] = i64toi32_i32$1;
      label$16 : {
       $4_1 = $4_1 - $2_1 | 0;
       $5_1 = (HEAP32[($0_1 + 60 | 0) >> 2] | 0) - $3_1 | 0;
       $4_1 = $626($2_1 | 0, 1 | 0, ($4_1 >>> 0 < $5_1 >>> 0 ? $4_1 : $5_1) | 0, HEAP32[($0_1 + 64 | 0) >> 2] | 0 | 0) | 0;
       if ($4_1) {
        break label$16
       }
       $2_1 = -1;
       break label$9;
      }
      $2_1 = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
      if (!$2_1) {
       break label$1
      }
      $4_1 = (HEAP32[($0_1 + 36 | 0) >> 2] | 0) + $4_1 | 0;
      HEAP32[($0_1 + 40 | 0) >> 2] = $4_1;
      label$17 : {
       $5_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
       if ((FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($2_1, $0_1 + 72 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0, $4_1, $0_1 + 36 | 0, $5_1 + $3_1 | 0, $5_1 + (HEAP32[($0_1 + 60 | 0) >> 2] | 0) | 0, $1_1 + 8 | 0) | 0 | 0) != (3 | 0)) {
        break label$17
       }
       HEAP32[($0_1 + 16 | 0) >> 2] = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
       $2_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
       HEAP32[($0_1 + 12 | 0) >> 2] = $2_1;
       HEAP32[($0_1 + 8 | 0) >> 2] = $2_1;
       $2_1 = HEAPU8[$2_1 >> 0] | 0;
       break label$9;
      }
      label$18 : {
       $4_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
       $2_1 = (HEAP32[($0_1 + 8 | 0) >> 2] | 0) + $3_1 | 0;
       if (($4_1 | 0) != ($2_1 | 0)) {
        break label$18
       }
       $2_1 = -1;
       break label$9;
      }
      HEAP32[($0_1 + 16 | 0) >> 2] = $4_1;
      HEAP32[($0_1 + 12 | 0) >> 2] = $2_1;
      $2_1 = HEAPU8[$2_1 >> 0] | 0;
      break label$9;
     }
     $2_1 = HEAPU8[$2_1 >> 0] | 0;
    }
    if ((HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) != ($1_1 + 15 | 0 | 0)) {
     break label$2
    }
    HEAP32[($0_1 + 16 | 0) >> 2] = 0;
    i64toi32_i32$0 = $0_1;
    i64toi32_i32$1 = 0;
    HEAP32[($0_1 + 8 | 0) >> 2] = 0;
    HEAP32[($0_1 + 12 | 0) >> 2] = i64toi32_i32$1;
   }
   global$0 = $1_1 + 16 | 0;
   return $2_1 | 0;
  }
  $15();
  abort();
 }
 
 function $18($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = -1;
  label$1 : {
   if (!(HEAP32[($0_1 + 64 | 0) >> 2] | 0)) {
    break label$1
   }
   $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) >>> 0 >= $3_1 >>> 0) {
    break label$1
   }
   label$2 : {
    if (($1_1 | 0) != (-1 | 0)) {
     break label$2
    }
    HEAP32[($0_1 + 12 | 0) >> 2] = $3_1 + -1 | 0;
    return 0 | 0;
   }
   label$3 : {
    if ((HEAPU8[($0_1 + 88 | 0) >> 0] | 0) & 16 | 0) {
     break label$3
    }
    $2_1 = -1;
    if ((HEAPU8[($3_1 + -1 | 0) >> 0] | 0 | 0) != ($1_1 & 255 | 0 | 0)) {
     break label$1
    }
   }
   $2_1 = $3_1 + -1 | 0;
   HEAP32[($0_1 + 12 | 0) >> 2] = $2_1;
   HEAP8[$2_1 >> 0] = $1_1;
   $2_1 = $1_1;
  }
  return $2_1 | 0;
 }
 
 function $19($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $6_1 = 0, $2_1 = 0, $3_1 = 0, $7_1 = 0, $4_1 = 0, $8_1 = 0, i64toi32_i32$0 = 0, $9_1 = 0, $153_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if (!(HEAP32[($0_1 + 64 | 0) >> 2] | 0)) {
     break label$2
    }
    label$3 : {
     label$4 : {
      if (!((HEAPU8[($0_1 + 92 | 0) >> 0] | 0) & 16 | 0)) {
       break label$4
      }
      $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
      $4_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
      break label$3;
     }
     $3_1 = 0;
     HEAP32[($0_1 + 16 | 0) >> 2] = 0;
     i64toi32_i32$0 = 0;
     HEAP32[($0_1 + 8 | 0) >> 2] = 0;
     HEAP32[($0_1 + 12 | 0) >> 2] = i64toi32_i32$0;
     label$5 : {
      label$6 : {
       $5_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
       if ($5_1 >>> 0 < 9 >>> 0) {
        break label$6
       }
       label$7 : {
        if (!(HEAPU8[($0_1 + 98 | 0) >> 0] | 0)) {
         break label$7
        }
        $3_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
        HEAP32[($0_1 + 24 | 0) >> 2] = $3_1;
        HEAP32[($0_1 + 20 | 0) >> 2] = $3_1;
        $4_1 = ($5_1 + $3_1 | 0) + -1 | 0;
        HEAP32[($0_1 + 28 | 0) >> 2] = $4_1;
        break label$5;
       }
       $3_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
       HEAP32[($0_1 + 24 | 0) >> 2] = $3_1;
       HEAP32[($0_1 + 20 | 0) >> 2] = $3_1;
       $4_1 = ($3_1 + (HEAP32[($0_1 + 60 | 0) >> 2] | 0) | 0) + -1 | 0;
       HEAP32[($0_1 + 28 | 0) >> 2] = $4_1;
       break label$5;
      }
      HEAP32[($0_1 + 28 | 0) >> 2] = 0;
      i64toi32_i32$0 = 0;
      HEAP32[($0_1 + 20 | 0) >> 2] = 0;
      HEAP32[($0_1 + 24 | 0) >> 2] = i64toi32_i32$0;
      $4_1 = 0;
     }
     HEAP32[($0_1 + 92 | 0) >> 2] = 16;
    }
    $5_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    label$8 : {
     label$9 : {
      if (($1_1 | 0) != (-1 | 0)) {
       break label$9
      }
      $6_1 = $3_1;
      break label$8;
     }
     label$10 : {
      if ($5_1) {
       break label$10
      }
      HEAP32[($0_1 + 28 | 0) >> 2] = $2_1 + 16 | 0;
      HEAP32[($0_1 + 20 | 0) >> 2] = $2_1 + 15 | 0;
      HEAP32[($0_1 + 24 | 0) >> 2] = $2_1 + 15 | 0;
      $5_1 = $2_1 + 15 | 0;
     }
     HEAP8[$5_1 >> 0] = $1_1;
     $5_1 = (HEAP32[($0_1 + 24 | 0) >> 2] | 0) + 1 | 0;
     HEAP32[($0_1 + 24 | 0) >> 2] = $5_1;
     $6_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
    }
    label$11 : {
     if (($5_1 | 0) == ($6_1 | 0)) {
      break label$11
     }
     label$12 : {
      label$13 : {
       if (!(HEAPU8[($0_1 + 98 | 0) >> 0] | 0)) {
        break label$13
       }
       $7_1 = -1;
       $5_1 = $5_1 - $6_1 | 0;
       if (($2178($6_1 | 0, 1 | 0, $5_1 | 0, HEAP32[($0_1 + 64 | 0) >> 2] | 0 | 0) | 0 | 0) != ($5_1 | 0)) {
        break label$1
       }
       break label$12;
      }
      $7_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
      HEAP32[($2_1 + 8 | 0) >> 2] = $7_1;
      label$14 : {
       $8_1 = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
       if (!$8_1) {
        break label$14
       }
       $9_1 = $0_1 + 72 | 0;
       label$15 : while (1) {
        $5_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$8_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($8_1, $9_1, $6_1, $5_1, $2_1 + 4 | 0, $7_1, $7_1 + (HEAP32[($0_1 + 52 | 0) >> 2] | 0) | 0, $2_1 + 8 | 0) | 0;
        $6_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
        if ((HEAP32[($2_1 + 4 | 0) >> 2] | 0 | 0) == ($6_1 | 0)) {
         break label$2
        }
        label$16 : {
         if (($5_1 | 0) != (3 | 0)) {
          break label$16
         }
         $5_1 = (HEAP32[($0_1 + 24 | 0) >> 2] | 0) - $6_1 | 0;
         if (($2178($6_1 | 0, 1 | 0, $5_1 | 0, HEAP32[($0_1 + 64 | 0) >> 2] | 0 | 0) | 0 | 0) != ($5_1 | 0)) {
          break label$2
         }
         break label$12;
        }
        if ($5_1 >>> 0 > 1 >>> 0) {
         break label$2
        }
        $6_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
        $153_1 = $6_1;
        $6_1 = (HEAP32[($2_1 + 8 | 0) >> 2] | 0) - $6_1 | 0;
        if (($2178($153_1 | 0, 1 | 0, $6_1 | 0, HEAP32[($0_1 + 64 | 0) >> 2] | 0 | 0) | 0 | 0) != ($6_1 | 0)) {
         break label$2
        }
        if (($5_1 | 0) != (1 | 0)) {
         break label$12
        }
        $6_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
        HEAP32[($0_1 + 20 | 0) >> 2] = $6_1;
        $5_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
        HEAP32[($0_1 + 28 | 0) >> 2] = $5_1;
        $8_1 = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
        if (!$8_1) {
         break label$14
        }
        $7_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
        continue label$15;
       };
      }
      $15();
      abort();
     }
     HEAP32[($0_1 + 28 | 0) >> 2] = $4_1;
     HEAP32[($0_1 + 20 | 0) >> 2] = $3_1;
     HEAP32[($0_1 + 24 | 0) >> 2] = $3_1;
    }
    $7_1 = ($1_1 | 0) == (-1 | 0) ? 0 : $1_1;
    break label$1;
   }
   $7_1 = -1;
  }
  global$0 = $2_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $20() {
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $0_1 = 0;
  $0_1 = global$1 + 24352 | 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  i64toi32_i32$1 = i64toi32_i32$1 + 12 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 32 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 44 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 40 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 52 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 60 | 0) >> 2] = 1065353216;
 }
 
 function $21($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  label$1 : {
   $1_1 = HEAP32[((global$1 + 24480 | 0) + 8 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   label$2 : while (1) {
    $2_1 = HEAP32[$1_1 >> 2] | 0;
    $2032($1_1 | 0);
    $1_1 = $2_1;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
  }
  $2_1 = global$1 + 24480 | 0;
  $1_1 = HEAP32[$2_1 >> 2] | 0;
  HEAP32[$2_1 >> 2] = 0;
  label$3 : {
   if (!$1_1) {
    break label$3
   }
   $2032($1_1 | 0);
  }
 }
 
 function $22($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0, $2_1 = 0, $6_1 = 0, $3_1 = 0;
  $2_1 = $575($0_1 + 12 | 0 | 0, $1_1 | 0) | 0;
  $3_1 = 0;
  label$1 : {
   $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!$4_1) {
    break label$1
   }
   label$2 : {
    label$3 : {
     $5_1 = __wasm_popcnt_i32($4_1 | 0) | 0;
     if ($5_1 >>> 0 > 1 >>> 0) {
      break label$3
     }
     $6_1 = ($4_1 + -1 | 0) & $2_1 | 0;
     break label$2;
    }
    $6_1 = $2_1;
    if ($2_1 >>> 0 < $4_1 >>> 0) {
     break label$2
    }
    $6_1 = ($2_1 >>> 0) % ($4_1 >>> 0) | 0;
   }
   $0_1 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + ($6_1 << 2 | 0) | 0) >> 2] | 0;
   if (!$0_1) {
    break label$1
   }
   $0_1 = HEAP32[$0_1 >> 2] | 0;
   if (!$0_1) {
    break label$1
   }
   label$4 : {
    label$5 : {
     if ($5_1 >>> 0 > 1 >>> 0) {
      break label$5
     }
     $4_1 = $4_1 + -1 | 0;
     label$6 : while (1) {
      label$7 : {
       label$8 : {
        $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        if (($5_1 | 0) == ($2_1 | 0)) {
         break label$8
        }
        if (($5_1 & $4_1 | 0 | 0) != ($6_1 | 0)) {
         break label$1
        }
        break label$7;
       }
       if ($571($0_1 + 8 | 0 | 0, $1_1 | 0) | 0) {
        break label$4
       }
      }
      $0_1 = HEAP32[$0_1 >> 2] | 0;
      if ($0_1) {
       continue label$6
      }
      break label$1;
     };
    }
    label$9 : while (1) {
     label$10 : {
      label$11 : {
       $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
       if (($5_1 | 0) == ($2_1 | 0)) {
        break label$11
       }
       label$12 : {
        if ($5_1 >>> 0 < $4_1 >>> 0) {
         break label$12
        }
        $5_1 = ($5_1 >>> 0) % ($4_1 >>> 0) | 0;
       }
       if (($5_1 | 0) != ($6_1 | 0)) {
        break label$1
       }
       break label$10;
      }
      if ($571($0_1 + 8 | 0 | 0, $1_1 | 0) | 0) {
       break label$4
      }
     }
     $0_1 = HEAP32[$0_1 >> 2] | 0;
     if ($0_1) {
      continue label$9
     }
     break label$1;
    };
   }
   $3_1 = $0_1;
  }
  return $3_1 | 0;
 }
 
 function $23($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $1_1 = 0, $2_1 = 0, $4_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $26_1 = 0, $5_1 = 0;
  $1_1 = global$0 - 32 | 0;
  global$0 = $1_1;
  label$1 : {
   $2_1 = HEAPU8[($0_1 + 83 | 0) >> 0] | 0;
   $3_1 = ($2_1 << 24 | 0) >> 24 | 0;
   if (($3_1 | 0) > (-1 | 0)) {
    break label$1
   }
   $2_1 = HEAP32[($0_1 + 76 | 0) >> 2] | 0;
  }
  $4_1 = $0_1 + 72 | 0;
  label$2 : {
   if ($2_1) {
    break label$2
   }
   $3_1 = global$1;
   $2_1 = $3_1 + 24500 | 0;
   $26_1 = $2_1;
   $2_1 = HEAP32[$2_1 >> 2] | 0;
   HEAP32[$26_1 >> 2] = $2_1 + 1 | 0;
   $2087($1_1 | 0, $2_1 | 0);
   $2_1 = $2074($1_1 | 0, 0 | 0, $3_1 + 1119 | 0 | 0) | 0;
   $5_1 = HEAP32[$2_1 >> 2] | 0;
   HEAP32[($1_1 + 24 | 0) >> 2] = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
   $9_1 = $2_1 + 7 | 0;
   $10_1 = HEAPU8[$9_1 >> 0] | 0 | ((HEAPU8[($9_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($9_1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($9_1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP8[($1_1 + 27 | 0) >> 0] = $10_1;
   HEAP8[($1_1 + 28 | 0) >> 0] = $10_1 >>> 8 | 0;
   HEAP8[($1_1 + 29 | 0) >> 0] = $10_1 >>> 16 | 0;
   HEAP8[($1_1 + 30 | 0) >> 0] = $10_1 >>> 24 | 0;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = 0;
   HEAP32[$2_1 >> 2] = 0;
   HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $3_1 = HEAPU8[($2_1 + 11 | 0) >> 0] | 0;
   HEAP32[($2_1 + 8 | 0) >> 2] = 0;
   label$3 : {
    if ((HEAP8[($4_1 + 11 | 0) >> 0] | 0 | 0) > (-1 | 0)) {
     break label$3
    }
    $2032(HEAP32[$4_1 >> 2] | 0 | 0);
   }
   HEAP32[($0_1 + 72 | 0) >> 2] = $5_1;
   HEAP32[($0_1 + 76 | 0) >> 2] = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
   $11_1 = $0_1 + 79 | 0;
   $12_1 = HEAPU8[($1_1 + 27 | 0) >> 0] | 0 | ((HEAPU8[($1_1 + 28 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($1_1 + 29 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($1_1 + 30 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP8[$11_1 >> 0] = $12_1;
   HEAP8[($11_1 + 1 | 0) >> 0] = $12_1 >>> 8 | 0;
   HEAP8[($11_1 + 2 | 0) >> 0] = $12_1 >>> 16 | 0;
   HEAP8[($11_1 + 3 | 0) >> 0] = $12_1 >>> 24 | 0;
   HEAP8[($0_1 + 83 | 0) >> 0] = $3_1;
   if ((HEAP8[($1_1 + 11 | 0) >> 0] | 0 | 0) > (-1 | 0)) {
    break label$2
   }
   $2032(HEAP32[$1_1 >> 2] | 0 | 0);
   $3_1 = HEAPU8[($4_1 + 11 | 0) >> 0] | 0;
  }
  label$4 : {
   label$5 : {
    if ((($3_1 << 24 | 0) >> 24 | 0 | 0) > (-1 | 0)) {
     break label$5
    }
    $3_1 = HEAP32[($0_1 + 76 | 0) >> 2] | 0;
    $4_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
    break label$4;
   }
   $3_1 = $3_1 & 255 | 0;
  }
  i64toi32_i32$0 = $568($4_1 | 0, $3_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  HEAP32[($0_1 + 88 | 0) >> 2] = HEAP32[($570($1_1 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0) | 0) >> 2] | 0;
  label$6 : {
   label$7 : {
    label$8 : {
     $4_1 = $0_1 + 88 | 0;
     $3_1 = $22(global$1 + 24480 | 0 | 0, $4_1 | 0) | 0;
     if (!$3_1) {
      break label$8
     }
     HEAP32[($0_1 + 92 | 0) >> 2] = $3_1 + 12 | 0;
     HEAP32[($3_1 + 12 | 0) >> 2] = (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 1 | 0;
     $287($0_1 | 0, 0 | 0);
     break label$7;
    }
    $3_1 = global$1 + 24480 | 0;
    $24($1_1 + 24 | 0 | 0, $3_1 | 0, $4_1 | 0, $4_1 | 0, $574($1_1 | 0, $0_1 | 0) | 0 | 0);
    $3_1 = $22($3_1 | 0, $4_1 | 0) | 0;
    if (!$3_1) {
     break label$6
    }
    HEAP32[($0_1 + 92 | 0) >> 2] = $3_1 + 12 | 0;
    $290($0_1 | 0);
   }
   global$0 = $1_1 + 32 | 0;
   return;
  }
  $25(global$1 + 1216 | 0 | 0);
  abort();
 }
 
 function $24($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $6_1 = 0, $9_1 = 0, $5_1 = 0, $7_1 = 0, $8_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $11_1 = Math_fround(0), i64toi32_i32$0 = 0, $12_1 = Math_fround(0), $10_1 = 0, $103_1 = 0, $108_1 = 0;
  $5_1 = $575($1_1 + 12 | 0 | 0, $2_1 | 0) | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $6_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     if ($6_1) {
      break label$3
     }
     break label$2;
    }
    label$4 : {
     label$5 : {
      $7_1 = __wasm_popcnt_i32($6_1 | 0) | 0;
      if ($7_1 >>> 0 < 2 >>> 0) {
       break label$5
      }
      $8_1 = $5_1;
      label$6 : {
       if ($5_1 >>> 0 < $6_1 >>> 0) {
        break label$6
       }
       $8_1 = ($5_1 >>> 0) % ($6_1 >>> 0) | 0;
      }
      $9_1 = HEAP32[((HEAP32[$1_1 >> 2] | 0) + ($8_1 << 2 | 0) | 0) >> 2] | 0;
      if (!$9_1) {
       break label$2
      }
      if ($7_1 >>> 0 <= 1 >>> 0) {
       break label$4
      }
      label$7 : while (1) {
       $9_1 = HEAP32[$9_1 >> 2] | 0;
       if (!$9_1) {
        break label$2
       }
       label$8 : {
        $7_1 = HEAP32[($9_1 + 4 | 0) >> 2] | 0;
        if (($7_1 | 0) == ($5_1 | 0)) {
         break label$8
        }
        label$9 : {
         if ($7_1 >>> 0 < $6_1 >>> 0) {
          break label$9
         }
         $7_1 = ($7_1 >>> 0) % ($6_1 >>> 0) | 0;
        }
        if (($7_1 | 0) != ($8_1 | 0)) {
         break label$2
        }
       }
       if (!($571($9_1 + 8 | 0 | 0, $2_1 | 0) | 0)) {
        continue label$7
       }
       break label$7;
      };
      $6_1 = 0;
      break label$1;
     }
     $8_1 = ($6_1 + -1 | 0) & $5_1 | 0;
     $9_1 = HEAP32[((HEAP32[$1_1 >> 2] | 0) + ($8_1 << 2 | 0) | 0) >> 2] | 0;
     if (!$9_1) {
      break label$2
     }
    }
    $10_1 = $6_1 + -1 | 0;
    label$10 : while (1) {
     $9_1 = HEAP32[$9_1 >> 2] | 0;
     if (!$9_1) {
      break label$2
     }
     label$11 : {
      $7_1 = HEAP32[($9_1 + 4 | 0) >> 2] | 0;
      if (($7_1 | 0) == ($5_1 | 0)) {
       break label$11
      }
      if (($7_1 & $10_1 | 0 | 0) != ($8_1 | 0)) {
       break label$2
      }
     }
     if (!($571($9_1 + 8 | 0 | 0, $2_1 | 0) | 0)) {
      continue label$10
     }
     break label$10;
    };
    $6_1 = 0;
    break label$1;
   }
   $9_1 = $2030(32 | 0) | 0;
   HEAP32[($9_1 + 8 | 0) >> 2] = HEAP32[$3_1 >> 2] | 0;
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $103_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $9_1;
   HEAP32[($9_1 + 12 | 0) >> 2] = $103_1;
   HEAP32[($9_1 + 16 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $108_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $9_1 + 20 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $108_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($9_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
   HEAP32[($9_1 + 4 | 0) >> 2] = $5_1;
   HEAP32[$9_1 >> 2] = 0;
   $11_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
   $12_1 = Math_fround(((HEAP32[($1_1 + 12 | 0) >> 2] | 0) + 1 | 0) >>> 0);
   label$12 : {
    label$13 : {
     if (!$6_1) {
      break label$13
     }
     if (Math_fround($11_1 * Math_fround($6_1 >>> 0)) < $12_1 ^ 1 | 0) {
      break label$12
     }
    }
    $6_1 = $6_1 << 1 | 0 | ($6_1 >>> 0 < 3 >>> 0 | ($6_1 & ($6_1 + -1 | 0) | 0 | 0) != (0 | 0) | 0) | 0;
    label$14 : {
     label$15 : {
      $11_1 = Math_fround(Math_ceil(Math_fround($12_1 / $11_1)));
      if (!($11_1 < Math_fround(4294967296.0) & $11_1 >= Math_fround(0.0) | 0)) {
       break label$15
      }
      $2_1 = ~~$11_1 >>> 0;
      break label$14;
     }
     $2_1 = 0;
    }
    $38($1_1 | 0, ($6_1 >>> 0 < $2_1 >>> 0 ? $2_1 : $6_1) | 0);
    label$16 : {
     $6_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     if ($6_1 & ($6_1 + -1 | 0) | 0) {
      break label$16
     }
     $8_1 = ($6_1 + -1 | 0) & $5_1 | 0;
     break label$12;
    }
    label$17 : {
     if ($5_1 >>> 0 >= $6_1 >>> 0) {
      break label$17
     }
     $8_1 = $5_1;
     break label$12;
    }
    $8_1 = ($5_1 >>> 0) % ($6_1 >>> 0) | 0;
   }
   label$18 : {
    label$19 : {
     label$20 : {
      $2_1 = (HEAP32[$1_1 >> 2] | 0) + ($8_1 << 2 | 0) | 0;
      $5_1 = HEAP32[$2_1 >> 2] | 0;
      if ($5_1) {
       break label$20
      }
      HEAP32[$9_1 >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
      HEAP32[($1_1 + 8 | 0) >> 2] = $9_1;
      HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
      $5_1 = HEAP32[$9_1 >> 2] | 0;
      if (!$5_1) {
       break label$18
      }
      $5_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
      label$21 : {
       label$22 : {
        $2_1 = $6_1 + -1 | 0;
        if ($6_1 & $2_1 | 0) {
         break label$22
        }
        $5_1 = $5_1 & $2_1 | 0;
        break label$21;
       }
       if ($5_1 >>> 0 < $6_1 >>> 0) {
        break label$21
       }
       $5_1 = ($5_1 >>> 0) % ($6_1 >>> 0) | 0;
      }
      $5_1 = (HEAP32[$1_1 >> 2] | 0) + ($5_1 << 2 | 0) | 0;
      break label$19;
     }
     HEAP32[$9_1 >> 2] = HEAP32[$5_1 >> 2] | 0;
    }
    HEAP32[$5_1 >> 2] = $9_1;
   }
   $6_1 = 1;
   HEAP32[($1_1 + 12 | 0) >> 2] = (HEAP32[($1_1 + 12 | 0) >> 2] | 0) + 1 | 0;
  }
  HEAP8[($0_1 + 4 | 0) >> 0] = $6_1;
  HEAP32[$0_1 >> 2] = $9_1;
 }
 
 function $25($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = fimport$1(8 | 0) | 0;
  $40($1_1 | 0, $0_1 | 0) | 0;
  $0_1 = global$11;
  fimport$2($1_1 | 0, global$12 | 0, $0_1 | 0);
  abort();
 }
 
 function $26($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = $286() | 0;
  HEAP32[((HEAP32[($0_1 + 92 | 0) >> 2] | 0) + 4 | 0) >> 2] = $1_1;
  label$1 : {
   if ((HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
    break label$1
   }
   $287($0_1 | 0, 0 | 0);
  }
  $1_1 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0;
  FUNCTION_TABLE[$1_1 | 0]($0_1, global$13);
  label$2 : {
   label$3 : {
    $1_1 = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
    if ($1_1) {
     break label$3
    }
    $1_1 = $285($0_1 + 4 | 0 | 0, HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0;
    fimport$0(3553 | 0, 0 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0, 0 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $1_1 | 0);
    if (!$1_1) {
     break label$2
    }
    $2033($1_1 | 0);
    break label$2;
   }
   fimport$0(3553 | 0, 0 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0, 0 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $1_1 | 0);
  }
  HEAP32[($0_1 + 68 | 0) >> 2] = 0;
 }
 
 function $27($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $3_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 92 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   $3_1 = (HEAP32[$2_1 >> 2] | 0) + -1 | 0;
   HEAP32[$2_1 >> 2] = $3_1;
   label$2 : {
    label$3 : {
     if ($3_1) {
      break label$3
     }
     $2_1 = global$1;
     $293($0_1 | 0);
     $2_1 = $22($2_1 + 24480 | 0 | 0, $0_1 + 88 | 0 | 0) | 0;
     if (!$2_1) {
      break label$2
     }
     $28($1_1 | 0, global$1 + 24480 | 0 | 0, $2_1 | 0);
     $2_1 = HEAP32[$1_1 >> 2] | 0;
     HEAP32[$1_1 >> 2] = 0;
     if (!$2_1) {
      break label$2
     }
     $2032($2_1 | 0);
     break label$2;
    }
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1);
   }
   HEAP32[($0_1 + 88 | 0) >> 2] = HEAP32[($569($1_1 | 0) | 0) >> 2] | 0;
   HEAP32[($0_1 + 92 | 0) >> 2] = 0;
  }
  global$0 = $1_1 + 16 | 0;
 }
 
 function $28($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $7_1 = 0, $4_1 = 0, $6_1 = 0, $3_1 = 0, $5_1 = 0, $8_1 = 0, $9_1 = 0;
  $3_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    $4_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    $5_1 = __wasm_popcnt_i32($4_1 | 0) | 0;
    if ($5_1 >>> 0 > 1 >>> 0) {
     break label$2
    }
    $3_1 = ($4_1 + -1 | 0) & $3_1 | 0;
    break label$1;
   }
   if ($3_1 >>> 0 < $4_1 >>> 0) {
    break label$1
   }
   $3_1 = ($3_1 >>> 0) % ($4_1 >>> 0) | 0;
  }
  $6_1 = (HEAP32[$1_1 >> 2] | 0) + ($3_1 << 2 | 0) | 0;
  $7_1 = HEAP32[$6_1 >> 2] | 0;
  label$3 : while (1) {
   $8_1 = $7_1;
   $7_1 = HEAP32[$7_1 >> 2] | 0;
   if (($7_1 | 0) != ($2_1 | 0)) {
    continue label$3
   }
   break label$3;
  };
  label$4 : {
   label$5 : {
    $9_1 = $1_1 + 8 | 0;
    if (($8_1 | 0) == ($9_1 | 0)) {
     break label$5
    }
    $7_1 = HEAP32[($8_1 + 4 | 0) >> 2] | 0;
    label$6 : {
     label$7 : {
      if ($5_1 >>> 0 > 1 >>> 0) {
       break label$7
      }
      $7_1 = $7_1 & ($4_1 + -1 | 0) | 0;
      break label$6;
     }
     if ($7_1 >>> 0 < $4_1 >>> 0) {
      break label$6
     }
     $7_1 = ($7_1 >>> 0) % ($4_1 >>> 0) | 0;
    }
    if (($7_1 | 0) == ($3_1 | 0)) {
     break label$4
    }
   }
   label$8 : {
    $7_1 = HEAP32[$2_1 >> 2] | 0;
    if (!$7_1) {
     break label$8
    }
    $7_1 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
    label$9 : {
     label$10 : {
      if ($5_1 >>> 0 > 1 >>> 0) {
       break label$10
      }
      $7_1 = $7_1 & ($4_1 + -1 | 0) | 0;
      break label$9;
     }
     if ($7_1 >>> 0 < $4_1 >>> 0) {
      break label$9
     }
     $7_1 = ($7_1 >>> 0) % ($4_1 >>> 0) | 0;
    }
    if (($7_1 | 0) == ($3_1 | 0)) {
     break label$4
    }
   }
   HEAP32[$6_1 >> 2] = 0;
  }
  label$11 : {
   $7_1 = HEAP32[$2_1 >> 2] | 0;
   if (!$7_1) {
    break label$11
   }
   $6_1 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
   label$12 : {
    label$13 : {
     if ($5_1 >>> 0 > 1 >>> 0) {
      break label$13
     }
     $6_1 = $6_1 & ($4_1 + -1 | 0) | 0;
     break label$12;
    }
    if ($6_1 >>> 0 < $4_1 >>> 0) {
     break label$12
    }
    $6_1 = ($6_1 >>> 0) % ($4_1 >>> 0) | 0;
   }
   if (($6_1 | 0) == ($3_1 | 0)) {
    break label$11
   }
   HEAP32[((HEAP32[$1_1 >> 2] | 0) + ($6_1 << 2 | 0) | 0) >> 2] = $8_1;
   $7_1 = HEAP32[$2_1 >> 2] | 0;
  }
  HEAP32[$8_1 >> 2] = $7_1;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[($1_1 + 12 | 0) >> 2] = (HEAP32[($1_1 + 12 | 0) >> 2] | 0) + -1 | 0;
  HEAP8[($0_1 + 8 | 0) >> 0] = 1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $9_1;
  HEAP32[$0_1 >> 2] = $2_1;
 }
 
 function $29() {
  var $0_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  $0_1 = $2030(96 | 0) | 0;
  $294($0_1 | 0) | 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 68 | 0) >> 2] = 0;
  HEAP32[($0_1 + 72 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[$0_1 >> 2] = (global$1 + 21856 | 0) + 8 | 0;
  i64toi32_i32$1 = $0_1 + 76 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 84 | 0) >> 0] = 0;
  $569($0_1 + 88 | 0 | 0) | 0;
  HEAP32[($0_1 + 92 | 0) >> 2] = 0;
  return $0_1 | 0;
 }
 
 function $30($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 68 | 0) >> 2] = $1_1;
 }
 
 function $31($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    label$3 : {
     $3_1 = $2181($1_1 | 0) | 0;
     $3_1 = $3_1 >>> 0 < 4096 >>> 0 ? $3_1 : 4096;
     if ($3_1 >>> 0 < 11 >>> 0) {
      break label$3
     }
     $4_1 = ($3_1 + 16 | 0) & 16368 | 0;
     $5_1 = $2030($4_1 | 0) | 0;
     HEAP32[($2_1 + 8 | 0) >> 2] = $4_1 | -2147483648 | 0;
     HEAP32[$2_1 >> 2] = $5_1;
     HEAP32[($2_1 + 4 | 0) >> 2] = $3_1;
     $4_1 = $2_1;
     break label$2;
    }
    HEAP8[($2_1 + 11 | 0) >> 0] = $3_1;
    $4_1 = $2_1;
    $5_1 = $2_1;
    if (!$3_1) {
     break label$1
    }
   }
   $2173($5_1 | 0, $1_1 | 0, $3_1 | 0) | 0;
  }
  HEAP8[($5_1 + $3_1 | 0) >> 0] = 0;
  $2059($0_1 + 72 | 0 | 0, $2_1 | 0) | 0;
  label$4 : {
   if ((HEAP8[($4_1 + 11 | 0) >> 0] | 0 | 0) > (-1 | 0)) {
    break label$4
   }
   $2032(HEAP32[$2_1 >> 2] | 0 | 0);
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 function $32($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = (global$1 + 21856 | 0) + 8 | 0;
  label$1 : {
   if ((HEAP8[($0_1 + 83 | 0) >> 0] | 0 | 0) > (-1 | 0)) {
    break label$1
   }
   $2032(HEAP32[($0_1 + 72 | 0) >> 2] | 0 | 0);
  }
  $295($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $33($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = (global$1 + 21856 | 0) + 8 | 0;
  label$1 : {
   if ((HEAP8[($0_1 + 83 | 0) >> 0] | 0 | 0) > (-1 | 0)) {
    break label$1
   }
   $2032(HEAP32[($0_1 + 72 | 0) >> 2] | 0 | 0);
  }
  $295($0_1 | 0) | 0;
  $2032($0_1 | 0);
 }
 
 function $34($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $35($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   $0_1 = HEAP32[($0_1 + 92 | 0) >> 2] | 0;
   if ($0_1) {
    break label$1
   }
   return 0 | 0;
  }
  return HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $36($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $37($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[((HEAP32[($0_1 + 92 | 0) >> 2] | 0) + 4 | 0) >> 2] = $1_1;
 }
 
 function $38($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $5_1 = Math_fround(0), $3_1 = 0;
  $2_1 = 2;
  label$1 : {
   if (($1_1 | 0) == (1 | 0)) {
    break label$1
   }
   label$2 : {
    if ($1_1 & ($1_1 + -1 | 0) | 0) {
     break label$2
    }
    $2_1 = $1_1;
    break label$1;
   }
   $2_1 = $700($1_1 | 0) | 0;
  }
  label$3 : {
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if ($2_1 >>> 0 <= $1_1 >>> 0) {
    break label$3
   }
   $39($0_1 | 0, $2_1 | 0);
   return;
  }
  label$4 : {
   if ($2_1 >>> 0 >= $1_1 >>> 0) {
    break label$4
   }
   $3_1 = $1_1 >>> 0 < 3 >>> 0;
   label$5 : {
    label$6 : {
     $5_1 = Math_fround(Math_ceil(Math_fround(Math_fround((HEAP32[($0_1 + 12 | 0) >> 2] | 0) >>> 0) / Math_fround(HEAPF32[($0_1 + 16 | 0) >> 2]))));
     if (!($5_1 < Math_fround(4294967296.0) & $5_1 >= Math_fround(0.0) | 0)) {
      break label$6
     }
     $4_1 = ~~$5_1 >>> 0;
     break label$5;
    }
    $4_1 = 0;
   }
   label$7 : {
    label$8 : {
     if ($3_1) {
      break label$8
     }
     if ((__wasm_popcnt_i32($1_1 | 0) | 0) >>> 0 > 1 >>> 0) {
      break label$8
     }
     $4_1 = $4_1 >>> 0 < 2 >>> 0 ? $4_1 : 1 << (32 - Math_clz32($4_1 + -1 | 0) | 0) | 0;
     break label$7;
    }
    $4_1 = $700($4_1 | 0) | 0;
   }
   $2_1 = $2_1 >>> 0 < $4_1 >>> 0 ? $4_1 : $2_1;
   if ($2_1 >>> 0 >= $1_1 >>> 0) {
    break label$4
   }
   $39($0_1 | 0, $2_1 | 0);
  }
 }
 
 function $39($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $5_1 = 0, $2_1 = 0, $8_1 = 0, $4_1 = 0, $7_1 = 0, $6_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!$1_1) {
      break label$3
     }
     label$4 : {
      if ($1_1 >>> 0 >= 1073741824 >>> 0) {
       break label$4
      }
      $2_1 = $2030($1_1 << 2 | 0 | 0) | 0;
      $3_1 = HEAP32[$0_1 >> 2] | 0;
      HEAP32[$0_1 >> 2] = $2_1;
      label$5 : {
       if (!$3_1) {
        break label$5
       }
       $2032($3_1 | 0);
      }
      HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
      $2_1 = $1_1 >>> 0 > 1 >>> 0 ? $1_1 : 1;
      $3_1 = 0;
      label$6 : while (1) {
       HEAP32[((HEAP32[$0_1 >> 2] | 0) + ($3_1 << 2 | 0) | 0) >> 2] = 0;
       $3_1 = $3_1 + 1 | 0;
       if (($3_1 | 0) != ($2_1 | 0)) {
        continue label$6
       }
       break label$6;
      };
      $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
      if (!$2_1) {
       break label$1
      }
      $3_1 = $0_1 + 8 | 0;
      $4_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
      label$7 : {
       label$8 : {
        $5_1 = __wasm_popcnt_i32($1_1 | 0) | 0;
        if ($5_1 >>> 0 > 1 >>> 0) {
         break label$8
        }
        $4_1 = $4_1 & ($1_1 + -1 | 0) | 0;
        break label$7;
       }
       if ($4_1 >>> 0 < $1_1 >>> 0) {
        break label$7
       }
       $4_1 = ($4_1 >>> 0) % ($1_1 >>> 0) | 0;
      }
      HEAP32[((HEAP32[$0_1 >> 2] | 0) + ($4_1 << 2 | 0) | 0) >> 2] = $3_1;
      $3_1 = HEAP32[$2_1 >> 2] | 0;
      if (!$3_1) {
       break label$1
      }
      if ($5_1 >>> 0 > 1 >>> 0) {
       break label$2
      }
      $6_1 = $1_1 + -1 | 0;
      label$9 : while (1) {
       label$10 : {
        label$11 : {
         $5_1 = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) & $6_1 | 0;
         if (($5_1 | 0) != ($4_1 | 0)) {
          break label$11
         }
         $2_1 = $3_1;
         break label$10;
        }
        label$12 : {
         label$13 : {
          label$14 : {
           $7_1 = $5_1 << 2 | 0;
           $8_1 = (HEAP32[$0_1 >> 2] | 0) + $7_1 | 0;
           if (!(HEAP32[$8_1 >> 2] | 0)) {
            break label$14
           }
           $5_1 = $3_1;
           $8_1 = HEAP32[$3_1 >> 2] | 0;
           if (!$8_1) {
            break label$12
           }
           $5_1 = $3_1;
           $1_1 = $3_1 + 8 | 0;
           if ($571($1_1 | 0, $8_1 + 8 | 0 | 0) | 0) {
            break label$13
           }
           break label$12;
          }
          HEAP32[$8_1 >> 2] = $2_1;
          $2_1 = $3_1;
          $4_1 = $5_1;
          break label$10;
         }
         label$15 : while (1) {
          $5_1 = HEAP32[$5_1 >> 2] | 0;
          $8_1 = HEAP32[$5_1 >> 2] | 0;
          if (!$8_1) {
           break label$12
          }
          if ($571($1_1 | 0, $8_1 + 8 | 0 | 0) | 0) {
           continue label$15
          }
          break label$15;
         };
        }
        HEAP32[$2_1 >> 2] = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = HEAP32[(HEAP32[((HEAP32[$0_1 >> 2] | 0) + $7_1 | 0) >> 2] | 0) >> 2] | 0;
        HEAP32[(HEAP32[((HEAP32[$0_1 >> 2] | 0) + $7_1 | 0) >> 2] | 0) >> 2] = $3_1;
       }
       $3_1 = HEAP32[$2_1 >> 2] | 0;
       if ($3_1) {
        continue label$9
       }
       break label$1;
      };
     }
     $3(global$1 + 1148 | 0 | 0);
     abort();
    }
    $3_1 = HEAP32[$0_1 >> 2] | 0;
    HEAP32[$0_1 >> 2] = 0;
    label$16 : {
     if (!$3_1) {
      break label$16
     }
     $2032($3_1 | 0);
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = 0;
    break label$1;
   }
   label$17 : while (1) {
    label$18 : {
     $5_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
     if ($5_1 >>> 0 < $1_1 >>> 0) {
      break label$18
     }
     $5_1 = ($5_1 >>> 0) % ($1_1 >>> 0) | 0;
    }
    label$19 : {
     label$20 : {
      if (($5_1 | 0) != ($4_1 | 0)) {
       break label$20
      }
      $2_1 = $3_1;
      break label$19;
     }
     label$21 : {
      label$22 : {
       label$23 : {
        $6_1 = $5_1 << 2 | 0;
        $8_1 = (HEAP32[$0_1 >> 2] | 0) + $6_1 | 0;
        if (!(HEAP32[$8_1 >> 2] | 0)) {
         break label$23
        }
        $5_1 = $3_1;
        $8_1 = HEAP32[$3_1 >> 2] | 0;
        if (!$8_1) {
         break label$21
        }
        $5_1 = $3_1;
        $7_1 = $3_1 + 8 | 0;
        if ($571($7_1 | 0, $8_1 + 8 | 0 | 0) | 0) {
         break label$22
        }
        break label$21;
       }
       HEAP32[$8_1 >> 2] = $2_1;
       $2_1 = $3_1;
       $4_1 = $5_1;
       break label$19;
      }
      label$24 : while (1) {
       $5_1 = HEAP32[$5_1 >> 2] | 0;
       $8_1 = HEAP32[$5_1 >> 2] | 0;
       if (!$8_1) {
        break label$21
       }
       if ($571($7_1 | 0, $8_1 + 8 | 0 | 0) | 0) {
        continue label$24
       }
       break label$24;
      };
     }
     HEAP32[$2_1 >> 2] = HEAP32[$5_1 >> 2] | 0;
     HEAP32[$5_1 >> 2] = HEAP32[(HEAP32[((HEAP32[$0_1 >> 2] | 0) + $6_1 | 0) >> 2] | 0) >> 2] | 0;
     HEAP32[(HEAP32[((HEAP32[$0_1 >> 2] | 0) + $6_1 | 0) >> 2] | 0) >> 2] = $3_1;
    }
    $3_1 = HEAP32[$2_1 >> 2] | 0;
    if ($3_1) {
     continue label$17
    }
    break label$17;
   };
  }
 }
 
 function $40($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2037($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = global$14 + 8 | 0;
  return $0_1 | 0;
 }
 
 function $41() {
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $1_1 = 0, $0_1 = 0, $2_1 = 0;
  $0_1 = global$1;
  $1_1 = $0_1 + 24416 | 0;
  i64toi32_i32$1 = $1_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  $2_1 = $0_1 + 24480 | 0;
  i64toi32_i32$1 = $2_1;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $1_1 + 12 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($1_1 + 20 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $1_1 + 32 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1_1 + 44 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($1_1 + 40 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $1_1 + 52 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($1_1 + 60 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $2_1 + 8 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  fimport$3(global$15 + 24 | 0 | 0, 0 | 0, $0_1 + 1024 | 0 | 0) | 0;
 }
 
 function $42($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  HEAP32[($0_1 + 56 | 0) >> 2] = $1_1;
  $2_1 = 257;
  HEAP8[($0_1 + 5 | 0) >> 0] = $2_1;
  HEAP8[($0_1 + 6 | 0) >> 0] = $2_1 >>> 8 | 0;
 }
 
 function $43($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $44($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $45() {
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $0_1 = 0;
  $0_1 = global$1 + 24504 | 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  i64toi32_i32$1 = i64toi32_i32$1 + 12 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 32 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 44 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 40 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 52 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 60 | 0) >> 2] = 1065353216;
 }
 
 function $46($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $1_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $5_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $402(HEAPU8[($0_1 + 37 | 0) >> 0] | 0 | 0);
  label$1 : {
   $2_1 = HEAP32[($0_1 + 108 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   label$2 : while (1) {
    $3_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
    $4_1 = HEAP32[(($47((HEAP32[($0_1 + 20 | 0) >> 2] | 0) + 68 | 0 | 0, $2_1 + 8 | 0 | 0) | 0) + 20 | 0) >> 2] | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($4_1, $3_1);
    $2_1 = HEAP32[$2_1 >> 2] | 0;
    if ($2_1) {
     continue label$2
    }
    break label$2;
   };
  }
  $188(HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0);
  label$3 : {
   label$4 : {
    $2_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
    if (HEAP32[($2_1 + 4 | 0) >> 2] | 0) {
     break label$4
    }
    $2_1 = -1;
    break label$3;
   }
   $3_1 = HEAP32[($2_1 + 56 | 0) >> 2] | 0;
   $2_1 = HEAP32[($3_1 + 60 | 0) >> 2] | 0;
   $3_1 = HEAP32[($3_1 + 72 | 0) >> 2] | 0;
   if (($3_1 | 0) <= (-1 | 0)) {
    break label$3
   }
   $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   fimport$4($3_1 | 0, Math_fround(Math_fround(HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0)), Math_fround(Math_fround(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0)));
  }
  label$5 : {
   if ((HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$5
   }
   $5_1 = ($2_1 | 0) < (0 | 0);
   $6_1 = 0;
   label$6 : while (1) {
    $48($0_1 | 0);
    $140(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0);
    $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    fimport$5(0 | 0, 0 | 0, HEAP32[($2_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 20 | 0) >> 2] | 0 | 0);
    label$7 : {
     if ($5_1) {
      break label$7
     }
     label$8 : {
      label$9 : {
       $2_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
       if (HEAP32[($2_1 + 4 | 0) >> 2] | 0) {
        break label$9
       }
       $2_1 = -1;
       break label$8;
      }
      $2_1 = HEAP32[((HEAP32[($2_1 + 56 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0;
     }
     fimport$6($2_1 | 0, $6_1 | 0);
    }
    $2_1 = 0;
    label$10 : {
     $7_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
     $3_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
     if (($7_1 | 0) == ($3_1 | 0)) {
      break label$10
     }
     label$11 : while (1) {
      label$12 : {
       $4_1 = $2_1 << 2 | 0;
       $8_1 = HEAP32[($3_1 + $4_1 | 0) >> 2] | 0;
       if (!$8_1) {
        break label$12
       }
       $287($8_1 | 0, $2_1 | 0);
       $3_1 = HEAP32[((HEAP32[($0_1 + 40 | 0) >> 2] | 0) + $4_1 | 0) >> 2] | 0;
       FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($3_1, (HEAP32[($0_1 + 52 | 0) >> 2] | 0) + Math_imul($2_1, 36) | 0);
       label$13 : {
        label$14 : {
         $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
         if (HEAP32[($3_1 + 4 | 0) >> 2] | 0) {
          break label$14
         }
         $3_1 = -1;
         break label$13;
        }
        $3_1 = HEAP32[((HEAP32[($3_1 + 56 | 0) >> 2] | 0) + $4_1 | 0) >> 2] | 0;
       }
       fimport$6($3_1 | 0, HEAP32[((HEAP32[((HEAP32[($0_1 + 40 | 0) >> 2] | 0) + $4_1 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0);
       $3_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
       $7_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
      }
      $2_1 = $2_1 + 1 | 0;
      if ($2_1 >>> 0 < (($7_1 - $3_1 | 0) >> 2 | 0) >>> 0) {
       continue label$11
      }
      break label$11;
     };
    }
    label$15 : {
     label$16 : {
      if (!(HEAPU8[($0_1 + 36 | 0) >> 0] | 0)) {
       break label$16
      }
      fimport$7(3106 | 0, $1_1 | 0);
      fimport$8(Math_fround(Math_fround(0.0)), Math_fround(Math_fround(0.0)), Math_fround(Math_fround(0.0)), Math_fround(Math_fround(1.0)));
      fimport$9(16384 | 0);
      $2_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
      FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 64 | 0) >> 2] | 0 | 0]($2_1, 4);
      fimport$8(Math_fround(Math_fround(HEAPF32[$1_1 >> 2])), Math_fround(Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($1_1 + 12 | 0) >> 2])));
      break label$15;
     }
     $2_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 64 | 0) >> 2] | 0 | 0]($2_1, 4);
    }
    $6_1 = $6_1 + 1 | 0;
    if (($6_1 | 0) < (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0)) {
     continue label$6
    }
    break label$6;
   };
  }
  global$0 = $1_1 + 16 | 0;
 }
 
 function $47($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $7_1 = 0, $4_1 = 0, $6_1 = 0, $5_1 = 0, $9_1 = 0, $8_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $2_1 = HEAPU8[($1_1 + 11 | 0) >> 0] | 0;
  $3_1 = (($2_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0);
  $4_1 = (wasm2js_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0, wasm2js_i32$1 = $2_1, wasm2js_i32$2 = $3_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  $2_1 = $4_1;
  $5_1 = (wasm2js_i32$0 = HEAP32[$1_1 >> 2] | 0, wasm2js_i32$1 = $1_1, wasm2js_i32$2 = $3_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  $1_1 = $5_1;
  $3_1 = $2_1;
  label$1 : {
   if ($2_1 >>> 0 < 4 >>> 0) {
    break label$1
   }
   $3_1 = $4_1;
   $1_1 = $5_1;
   $2_1 = $3_1;
   label$2 : while (1) {
    $6_1 = Math_imul(HEAPU8[$1_1 >> 0] | 0 | ((HEAPU8[($1_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($1_1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($1_1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0, 1540483477);
    $2_1 = Math_imul(($6_1 >>> 24 | 0) ^ $6_1 | 0, 1540483477) ^ Math_imul($2_1, 1540483477) | 0;
    $1_1 = $1_1 + 4 | 0;
    $3_1 = $3_1 + -4 | 0;
    if ($3_1 >>> 0 > 3 >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
  label$3 : {
   switch ($3_1 + -1 | 0 | 0) {
   case 2:
    $2_1 = ((HEAPU8[($1_1 + 2 | 0) >> 0] | 0) << 16 | 0) ^ $2_1 | 0;
   case 1:
    $2_1 = ((HEAPU8[($1_1 + 1 | 0) >> 0] | 0) << 8 | 0) ^ $2_1 | 0;
   case 0:
    $2_1 = Math_imul($2_1 ^ (HEAPU8[$1_1 >> 0] | 0) | 0, 1540483477);
    break;
   default:
    break label$3;
   };
  }
  $3_1 = 0;
  label$7 : {
   $7_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!$7_1) {
    break label$7
   }
   $1_1 = Math_imul(($2_1 >>> 13 | 0) ^ $2_1 | 0, 1540483477);
   $6_1 = ($1_1 >>> 15 | 0) ^ $1_1 | 0;
   label$8 : {
    label$9 : {
     $2_1 = __wasm_popcnt_i32($7_1 | 0) | 0;
     if ($2_1 >>> 0 > 1 >>> 0) {
      break label$9
     }
     $8_1 = $6_1 & ($7_1 + -1 | 0) | 0;
     break label$8;
    }
    $8_1 = $6_1;
    if ($6_1 >>> 0 < $7_1 >>> 0) {
     break label$8
    }
    $8_1 = ($6_1 >>> 0) % ($7_1 >>> 0) | 0;
   }
   $1_1 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + ($8_1 << 2 | 0) | 0) >> 2] | 0;
   if (!$1_1) {
    break label$7
   }
   $1_1 = HEAP32[$1_1 >> 2] | 0;
   if (!$1_1) {
    break label$7
   }
   label$10 : {
    label$11 : {
     if ($2_1 >>> 0 > 1 >>> 0) {
      break label$11
     }
     $9_1 = $7_1 + -1 | 0;
     label$12 : while (1) {
      label$13 : {
       label$14 : {
        $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
        if (($2_1 | 0) == ($6_1 | 0)) {
         break label$14
        }
        if (($2_1 & $9_1 | 0 | 0) == ($8_1 | 0)) {
         break label$13
        }
        break label$10;
       }
       $3_1 = HEAPU8[($1_1 + 19 | 0) >> 0] | 0;
       $2_1 = (($3_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0);
       if (((wasm2js_i32$0 = HEAP32[($1_1 + 12 | 0) >> 2] | 0, wasm2js_i32$1 = $3_1, wasm2js_i32$2 = $2_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) | 0) != ($4_1 | 0)) {
        break label$13
       }
       $0_1 = $1_1 + 8 | 0;
       $7_1 = HEAP32[$0_1 >> 2] | 0;
       label$15 : {
        if ($2_1) {
         break label$15
        }
        label$16 : {
         if ($4_1) {
          break label$16
         }
         return $1_1 | 0;
        }
        $2_1 = $5_1;
        if ((HEAPU8[$2_1 >> 0] | 0 | 0) != ($7_1 & 255 | 0 | 0)) {
         break label$13
        }
        label$17 : while (1) {
         label$18 : {
          $3_1 = $3_1 + -1 | 0;
          if ($3_1) {
           break label$18
          }
          return $1_1 | 0;
         }
         $7_1 = HEAPU8[($2_1 + 1 | 0) >> 0] | 0;
         $2_1 = $2_1 + 1 | 0;
         $0_1 = $0_1 + 1 | 0;
         if (($7_1 | 0) == (HEAPU8[$0_1 >> 0] | 0 | 0)) {
          continue label$17
         }
         break label$13;
        };
       }
       label$19 : {
        if ($4_1) {
         break label$19
        }
        return $1_1 | 0;
       }
       if ($588(($2_1 ? $7_1 : $0_1) | 0, $5_1 | 0, $4_1 | 0) | 0) {
        break label$13
       }
       return $1_1 | 0;
      }
      $1_1 = HEAP32[$1_1 >> 2] | 0;
      if ($1_1) {
       continue label$12
      }
      break label$10;
     };
    }
    label$20 : while (1) {
     label$21 : {
      label$22 : {
       $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if (($2_1 | 0) == ($6_1 | 0)) {
        break label$22
       }
       label$23 : {
        if ($2_1 >>> 0 < $7_1 >>> 0) {
         break label$23
        }
        $2_1 = ($2_1 >>> 0) % ($7_1 >>> 0) | 0;
       }
       if (($2_1 | 0) == ($8_1 | 0)) {
        break label$21
       }
       break label$10;
      }
      $3_1 = HEAPU8[($1_1 + 19 | 0) >> 0] | 0;
      $2_1 = (($3_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0);
      if (((wasm2js_i32$0 = HEAP32[($1_1 + 12 | 0) >> 2] | 0, wasm2js_i32$1 = $3_1, wasm2js_i32$2 = $2_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) | 0) != ($4_1 | 0)) {
       break label$21
      }
      $0_1 = $1_1 + 8 | 0;
      $9_1 = HEAP32[$0_1 >> 2] | 0;
      label$24 : {
       label$25 : {
        if ($2_1) {
         break label$25
        }
        if ($4_1) {
         break label$24
        }
        return $1_1 | 0;
       }
       label$26 : {
        if ($4_1) {
         break label$26
        }
        return $1_1 | 0;
       }
       if ($588(($2_1 ? $9_1 : $0_1) | 0, $5_1 | 0, $4_1 | 0) | 0) {
        break label$21
       }
       return $1_1 | 0;
      }
      $2_1 = $5_1;
      if ((HEAPU8[$2_1 >> 0] | 0 | 0) != ($9_1 & 255 | 0 | 0)) {
       break label$21
      }
      label$27 : {
       label$28 : while (1) {
        $3_1 = $3_1 + -1 | 0;
        if (!$3_1) {
         break label$27
        }
        $9_1 = HEAPU8[($2_1 + 1 | 0) >> 0] | 0;
        $2_1 = $2_1 + 1 | 0;
        $0_1 = $0_1 + 1 | 0;
        if (($9_1 | 0) != (HEAPU8[$0_1 >> 0] | 0 | 0)) {
         break label$21
        }
        continue label$28;
       };
      }
      return $1_1 | 0;
     }
     $1_1 = HEAP32[$1_1 >> 2] | 0;
     if ($1_1) {
      continue label$20
     }
     break label$20;
    };
   }
   $3_1 = 0;
  }
  return $3_1 | 0;
 }
 
 function $48($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0, $5_1 = 0, $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 80 | 0) >> 2] | 0;
   $2_1 = HEAP32[($0_1 + 76 | 0) >> 2] | 0;
   $3_1 = ($1_1 | 0) == ($2_1 | 0);
   if ($3_1) {
    break label$1
   }
   if ($3_1) {
    break label$1
   }
   label$2 : while (1) {
    $3_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
    $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    label$3 : {
     label$4 : {
      if ((HEAP32[((HEAP32[($0_1 + 40 | 0) >> 2] | 0) + ((HEAP32[($2_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) != (HEAP32[($2_1 + 4 | 0) >> 2] | 0 | 0)) {
       break label$4
      }
      $139($4_1 | 0, $3_1 | 0, 0 | 0);
      $139(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 16 | 0) >> 2] | 0 | 0, 1 | 0);
      HEAP32[((HEAP32[($0_1 + 40 | 0) >> 2] | 0) + ((HEAP32[($2_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
      $3_1 = HEAP32[($0_1 + 88 | 0) >> 2] | 0;
      $4_1 = HEAP32[($0_1 + 92 | 0) >> 2] | 0;
      if (($3_1 | 0) == ($4_1 | 0)) {
       break label$3
      }
      $5_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
      label$5 : while (1) {
       label$6 : {
        if ((HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) != ($5_1 | 0)) {
         break label$6
        }
        if ((HEAP32[$3_1 >> 2] | 0 | 0) != ($0_1 | 0)) {
         break label$6
        }
        HEAP32[((HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
       }
       $3_1 = $3_1 + 16 | 0;
       if (($3_1 | 0) != ($4_1 | 0)) {
        continue label$5
       }
       break label$3;
      };
     }
     $139($4_1 | 0, $3_1 | 0, 1 | 0);
     $139(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 16 | 0) >> 2] | 0 | 0, 0 | 0);
     HEAP32[((HEAP32[($0_1 + 40 | 0) >> 2] | 0) + ((HEAP32[($2_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
     $3_1 = HEAP32[($0_1 + 88 | 0) >> 2] | 0;
     $4_1 = HEAP32[($0_1 + 92 | 0) >> 2] | 0;
     if (($3_1 | 0) == ($4_1 | 0)) {
      break label$3
     }
     $5_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
     label$7 : while (1) {
      label$8 : {
       if ((HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) != ($5_1 | 0)) {
        break label$8
       }
       if ((HEAP32[$3_1 >> 2] | 0 | 0) != ($0_1 | 0)) {
        break label$8
       }
       HEAP32[((HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
      }
      $3_1 = $3_1 + 16 | 0;
      if (($3_1 | 0) != ($4_1 | 0)) {
       continue label$7
      }
      break label$7;
     };
    }
    $2_1 = $2_1 + 20 | 0;
    if (($2_1 | 0) != ($1_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $49($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $5_1 = 0, $4_1 = 0, $3_1 = 0;
  label$1 : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
    break label$1
   }
   $2_1 = 0;
   label$2 : while (1) {
    $46(HEAP32[($1_1 + ($2_1 << 2 | 0) | 0) >> 2] | 0 | 0);
    $2_1 = $2_1 + 1 | 0;
    $1_1 = HEAP32[$0_1 >> 2] | 0;
    if ($2_1 >>> 0 < (((HEAP32[($0_1 + 4 | 0) >> 2] | 0) - $1_1 | 0) >> 2 | 0) >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
  $50($0_1 | 0);
  label$3 : {
   $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (($3_1 | 0) == ($1_1 | 0)) {
    break label$3
   }
   $4_1 = 0;
   label$4 : while (1) {
    label$5 : {
     $5_1 = HEAP32[($1_1 + ($4_1 << 2 | 0) | 0) >> 2] | 0;
     $2_1 = HEAP32[($5_1 + 40 | 0) >> 2] | 0;
     $5_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
     if (($2_1 | 0) == ($5_1 | 0)) {
      break label$5
     }
     label$6 : while (1) {
      label$7 : {
       $1_1 = HEAP32[$2_1 >> 2] | 0;
       if (!$1_1) {
        break label$7
       }
       FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($1_1);
      }
      $2_1 = $2_1 + 4 | 0;
      if (($2_1 | 0) != ($5_1 | 0)) {
       continue label$6
      }
      break label$6;
     };
     $1_1 = HEAP32[$0_1 >> 2] | 0;
     $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    }
    $4_1 = $4_1 + 1 | 0;
    if ($4_1 >>> 0 < (($3_1 - $1_1 | 0) >> 2 | 0) >>> 0) {
     continue label$4
    }
    break label$4;
   };
  }
 }
 
 function $50($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $1_1 = 0, $5_1 = 0, $35_1 = 0, $41_1 = 0, $47_1 = 0, $51_1 = 0;
  $1_1 = global$0 - 48 | 0;
  global$0 = $1_1;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   $140($2_1 | 0);
   $2_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   fimport$5(0 | 0, 0 | 0, HEAP32[($2_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 20 | 0) >> 2] | 0 | 0);
  }
  $188(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0);
  $396(0 | 0);
  $388(0 | 0);
  $401(2305 | 0);
  $3_1 = ($1_1 + 8 | 0) + 32 | 0;
  $2_1 = global$13;
  HEAP32[$3_1 >> 2] = HEAP32[($2_1 + 32 | 0) >> 2] | 0;
  i64toi32_i32$2 = $2_1 + 24 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $35_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($1_1 + 8 | 0) + 24 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $35_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $2_1 + 16 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $41_1 = i64toi32_i32$1;
  i64toi32_i32$1 = ($1_1 + 8 | 0) + 16 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $41_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $2_1 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $47_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($1_1 + 8 | 0) + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $47_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  HEAP16[$3_1 >> 1] = 0;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = HEAP32[$2_1 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
  $51_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $1_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $51_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  label$2 : {
   label$3 : {
    label$4 : {
     $4_1 = HEAP32[((HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -4 | 0) >> 2] | 0;
     $2_1 = HEAP32[($4_1 + 76 | 0) >> 2] | 0;
     $3_1 = HEAP32[($4_1 + 80 | 0) >> 2] | 0;
     if (($2_1 | 0) == ($3_1 | 0)) {
      break label$4
     }
     label$5 : while (1) {
      if (!(HEAP32[($2_1 + 12 | 0) >> 2] | 0)) {
       break label$4
      }
      $2_1 = $2_1 + 20 | 0;
      if (($2_1 | 0) != ($3_1 | 0)) {
       continue label$5
      }
      break label$3;
     };
    }
    if (($2_1 | 0) == ($3_1 | 0)) {
     break label$3
    }
    $2_1 = (HEAP32[((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + ((HEAP32[($2_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) == (HEAP32[($2_1 + 4 | 0) >> 2] | 0 | 0) ? $2_1 : $2_1 + 4 | 0;
    break label$2;
   }
   $2_1 = HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0;
  }
  $287(HEAP32[$2_1 >> 2] | 0 | 0, 0 | 0);
  label$6 : {
   label$7 : {
    label$8 : {
     $4_1 = HEAP32[((HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -4 | 0) >> 2] | 0;
     $2_1 = HEAP32[($4_1 + 76 | 0) >> 2] | 0;
     $3_1 = HEAP32[($4_1 + 80 | 0) >> 2] | 0;
     if (($2_1 | 0) == ($3_1 | 0)) {
      break label$8
     }
     label$9 : while (1) {
      if (!(HEAP32[($2_1 + 12 | 0) >> 2] | 0)) {
       break label$8
      }
      $2_1 = $2_1 + 20 | 0;
      if (($2_1 | 0) != ($3_1 | 0)) {
       continue label$9
      }
      break label$7;
     };
    }
    if (($2_1 | 0) == ($3_1 | 0)) {
     break label$7
    }
    $2_1 = (HEAP32[((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + ((HEAP32[($2_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) == (HEAP32[($2_1 + 4 | 0) >> 2] | 0 | 0) ? $2_1 : $2_1 + 4 | 0;
    break label$6;
   }
   $2_1 = HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0;
  }
  $2_1 = HEAP32[$2_1 >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($2_1, $1_1 + 8 | 0);
  label$10 : {
   label$11 : {
    $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    if (HEAP32[($2_1 + 4 | 0) >> 2] | 0) {
     break label$11
    }
    $5_1 = -1;
    break label$10;
   }
   $5_1 = HEAP32[(HEAP32[($2_1 + 56 | 0) >> 2] | 0) >> 2] | 0;
  }
  label$12 : {
   label$13 : {
    label$14 : {
     $4_1 = HEAP32[((HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -4 | 0) >> 2] | 0;
     $2_1 = HEAP32[($4_1 + 76 | 0) >> 2] | 0;
     $3_1 = HEAP32[($4_1 + 80 | 0) >> 2] | 0;
     if (($2_1 | 0) == ($3_1 | 0)) {
      break label$14
     }
     label$15 : while (1) {
      if (!(HEAP32[($2_1 + 12 | 0) >> 2] | 0)) {
       break label$14
      }
      $2_1 = $2_1 + 20 | 0;
      if (($2_1 | 0) != ($3_1 | 0)) {
       continue label$15
      }
      break label$13;
     };
    }
    if (($2_1 | 0) == ($3_1 | 0)) {
     break label$13
    }
    $2_1 = (HEAP32[((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + ((HEAP32[($2_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) == (HEAP32[($2_1 + 4 | 0) >> 2] | 0 | 0) ? $2_1 : $2_1 + 4 | 0;
    break label$12;
   }
   $2_1 = HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0;
  }
  fimport$6($5_1 | 0, HEAP32[((HEAP32[$2_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0);
  $2_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 64 | 0) >> 2] | 0 | 0]($2_1, 4);
  label$16 : {
   $2_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$16
   }
   if (!(HEAPU8[($2_1 + 13 | 0) >> 0] | 0)) {
    break label$16
   }
   $138($2_1 | 0);
  }
  global$0 = $1_1 + 48 | 0;
 }
 
 function $51() {
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $0_1 = 0;
  $0_1 = global$1 + 24568 | 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  i64toi32_i32$1 = i64toi32_i32$1 + 12 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 32 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 44 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 40 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 52 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 60 | 0) >> 2] = 1065353216;
 }
 
 function $52($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 4 | 0) >> 0] = 0;
  HEAP32[$0_1 >> 2] = $1_1;
  i64toi32_i32$1 = $0_1 + 16 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 24 | 0) >> 2] = 1065353216;
  return $0_1 | 0;
 }
 
 function $53($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $2_1 = 0, $7_1 = 0, $5_1 = 0, $4_1 = 0, $1_1 = 0, $8_1 = 0, $6_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   $3_1 = Math_imul($0_1, 1540483477);
   $3_1 = Math_imul(($3_1 >>> 24 | 0) ^ $3_1 | 0, 1540483477) ^ 1866966612 | 0;
   $3_1 = Math_imul(($3_1 >>> 13 | 0) ^ $3_1 | 0, 1540483477);
   $4_1 = ($3_1 >>> 15 | 0) ^ $3_1 | 0;
   label$2 : while (1) {
    label$3 : {
     $3_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
     $5_1 = HEAP32[($3_1 + 64 | 0) >> 2] | 0;
     if (!$5_1) {
      break label$3
     }
     $6_1 = $3_1 + 60 | 0;
     label$4 : {
      label$5 : {
       $7_1 = (__wasm_popcnt_i32($5_1 | 0) | 0) >>> 0 > 1 >>> 0;
       if ($7_1) {
        break label$5
       }
       $8_1 = ($5_1 + -1 | 0) & $4_1 | 0;
       break label$4;
      }
      $8_1 = $4_1;
      if ($4_1 >>> 0 < $5_1 >>> 0) {
       break label$4
      }
      $8_1 = ($4_1 >>> 0) % ($5_1 >>> 0) | 0;
     }
     $3_1 = HEAP32[((HEAP32[$6_1 >> 2] | 0) + ($8_1 << 2 | 0) | 0) >> 2] | 0;
     if (!$3_1) {
      break label$3
     }
     $3_1 = HEAP32[$3_1 >> 2] | 0;
     if (!$3_1) {
      break label$3
     }
     label$6 : {
      label$7 : {
       if ($7_1) {
        break label$7
       }
       $5_1 = $5_1 + -1 | 0;
       label$8 : while (1) {
        label$9 : {
         label$10 : {
          $7_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
          if (($7_1 | 0) == ($4_1 | 0)) {
           break label$10
          }
          if (($7_1 & $5_1 | 0 | 0) == ($8_1 | 0)) {
           break label$9
          }
          break label$3;
         }
         if ((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) == ($0_1 | 0)) {
          break label$6
         }
        }
        $3_1 = HEAP32[$3_1 >> 2] | 0;
        if ($3_1) {
         continue label$8
        }
        break label$3;
       };
      }
      label$11 : while (1) {
       label$12 : {
        label$13 : {
         $7_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
         if (($7_1 | 0) == ($4_1 | 0)) {
          break label$13
         }
         label$14 : {
          if ($7_1 >>> 0 < $5_1 >>> 0) {
           break label$14
          }
          $7_1 = ($7_1 >>> 0) % ($5_1 >>> 0) | 0;
         }
         if (($7_1 | 0) == ($8_1 | 0)) {
          break label$12
         }
         break label$3;
        }
        if ((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) == ($0_1 | 0)) {
         break label$6
        }
       }
       $3_1 = HEAP32[$3_1 >> 2] | 0;
       if ($3_1) {
        continue label$11
       }
       break label$3;
      };
     }
     $54($1_1 | 0, $6_1 | 0, $3_1 | 0);
     $3_1 = HEAP32[$1_1 >> 2] | 0;
     HEAP32[$1_1 >> 2] = 0;
     if (!$3_1) {
      break label$3
     }
     $2032($3_1 | 0);
    }
    fimport$10(2 | 0, $2_1 + 24 | 0 | 0);
    $2_1 = HEAP32[$2_1 >> 2] | 0;
    if ($2_1) {
     continue label$2
    }
    break label$2;
   };
   $2_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
  }
  label$15 : {
   if (!$2_1) {
    break label$15
   }
   label$16 : while (1) {
    $3_1 = HEAP32[$2_1 >> 2] | 0;
    $2032($2_1 | 0);
    $2_1 = $3_1;
    if ($3_1) {
     continue label$16
    }
    break label$16;
   };
  }
  $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  label$17 : {
   if (!$3_1) {
    break label$17
   }
   $2032($3_1 | 0);
  }
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $54($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $7_1 = 0, $4_1 = 0, $6_1 = 0, $3_1 = 0, $5_1 = 0, $8_1 = 0, $9_1 = 0;
  $3_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    $4_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    $5_1 = __wasm_popcnt_i32($4_1 | 0) | 0;
    if ($5_1 >>> 0 > 1 >>> 0) {
     break label$2
    }
    $3_1 = ($4_1 + -1 | 0) & $3_1 | 0;
    break label$1;
   }
   if ($3_1 >>> 0 < $4_1 >>> 0) {
    break label$1
   }
   $3_1 = ($3_1 >>> 0) % ($4_1 >>> 0) | 0;
  }
  $6_1 = (HEAP32[$1_1 >> 2] | 0) + ($3_1 << 2 | 0) | 0;
  $7_1 = HEAP32[$6_1 >> 2] | 0;
  label$3 : while (1) {
   $8_1 = $7_1;
   $7_1 = HEAP32[$7_1 >> 2] | 0;
   if (($7_1 | 0) != ($2_1 | 0)) {
    continue label$3
   }
   break label$3;
  };
  label$4 : {
   label$5 : {
    $9_1 = $1_1 + 8 | 0;
    if (($8_1 | 0) == ($9_1 | 0)) {
     break label$5
    }
    $7_1 = HEAP32[($8_1 + 4 | 0) >> 2] | 0;
    label$6 : {
     label$7 : {
      if ($5_1 >>> 0 > 1 >>> 0) {
       break label$7
      }
      $7_1 = $7_1 & ($4_1 + -1 | 0) | 0;
      break label$6;
     }
     if ($7_1 >>> 0 < $4_1 >>> 0) {
      break label$6
     }
     $7_1 = ($7_1 >>> 0) % ($4_1 >>> 0) | 0;
    }
    if (($7_1 | 0) == ($3_1 | 0)) {
     break label$4
    }
   }
   label$8 : {
    $7_1 = HEAP32[$2_1 >> 2] | 0;
    if (!$7_1) {
     break label$8
    }
    $7_1 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
    label$9 : {
     label$10 : {
      if ($5_1 >>> 0 > 1 >>> 0) {
       break label$10
      }
      $7_1 = $7_1 & ($4_1 + -1 | 0) | 0;
      break label$9;
     }
     if ($7_1 >>> 0 < $4_1 >>> 0) {
      break label$9
     }
     $7_1 = ($7_1 >>> 0) % ($4_1 >>> 0) | 0;
    }
    if (($7_1 | 0) == ($3_1 | 0)) {
     break label$4
    }
   }
   HEAP32[$6_1 >> 2] = 0;
  }
  label$11 : {
   $7_1 = HEAP32[$2_1 >> 2] | 0;
   if (!$7_1) {
    break label$11
   }
   $6_1 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
   label$12 : {
    label$13 : {
     if ($5_1 >>> 0 > 1 >>> 0) {
      break label$13
     }
     $6_1 = $6_1 & ($4_1 + -1 | 0) | 0;
     break label$12;
    }
    if ($6_1 >>> 0 < $4_1 >>> 0) {
     break label$12
    }
    $6_1 = ($6_1 >>> 0) % ($4_1 >>> 0) | 0;
   }
   if (($6_1 | 0) == ($3_1 | 0)) {
    break label$11
   }
   HEAP32[((HEAP32[$1_1 >> 2] | 0) + ($6_1 << 2 | 0) | 0) >> 2] = $8_1;
   $7_1 = HEAP32[$2_1 >> 2] | 0;
  }
  HEAP32[$8_1 >> 2] = $7_1;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[($1_1 + 12 | 0) >> 2] = (HEAP32[($1_1 + 12 | 0) >> 2] | 0) + -1 | 0;
  HEAP8[($0_1 + 8 | 0) >> 0] = 1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $9_1;
  HEAP32[$0_1 >> 2] = $2_1;
 }
 
 function $55($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0, $9_1 = Math_fround(0), $2_1 = 0, $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $7_1 = 0, $6_1 = 0, i64toi32_i32$2 = 0, $15_1 = Math_fround(0), $8_1 = 0, $16_1 = Math_fround(0), $12_1 = Math_fround(0), $14_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $13_1 = Math_fround(0), $130_1 = 0, $135_1 = 0, $140_1 = 0, $153_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  $4_1 = global$16;
  label$1 : {
   if (!$3_1) {
    break label$1
   }
   $5_1 = Math_imul($1_1, 1540483477);
   $5_1 = Math_imul(($5_1 >>> 24 | 0) ^ $5_1 | 0, 1540483477) ^ 1866966612 | 0;
   $5_1 = Math_imul(($5_1 >>> 13 | 0) ^ $5_1 | 0, 1540483477);
   $6_1 = ($5_1 >>> 15 | 0) ^ $5_1 | 0;
   label$2 : {
    label$3 : {
     $7_1 = __wasm_popcnt_i32($3_1 | 0) | 0;
     if ($7_1 >>> 0 > 1 >>> 0) {
      break label$3
     }
     $8_1 = ($3_1 + -1 | 0) & $6_1 | 0;
     break label$2;
    }
    $8_1 = $6_1;
    if ($6_1 >>> 0 < $3_1 >>> 0) {
     break label$2
    }
    $8_1 = ($6_1 >>> 0) % ($3_1 >>> 0) | 0;
   }
   $5_1 = HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + ($8_1 << 2 | 0) | 0) >> 2] | 0;
   $4_1 = global$16;
   if (!$5_1) {
    break label$1
   }
   $5_1 = HEAP32[$5_1 >> 2] | 0;
   $4_1 = global$16;
   if (!$5_1) {
    break label$1
   }
   label$4 : {
    label$5 : {
     if ($7_1 >>> 0 > 1 >>> 0) {
      break label$5
     }
     $7_1 = $3_1 + -1 | 0;
     label$6 : while (1) {
      label$7 : {
       label$8 : {
        $3_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
        if (($3_1 | 0) == ($6_1 | 0)) {
         break label$8
        }
        $4_1 = global$16;
        if (($3_1 & $7_1 | 0 | 0) == ($8_1 | 0)) {
         break label$7
        }
        break label$1;
       }
       if ((HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
        break label$4
       }
      }
      $5_1 = HEAP32[$5_1 >> 2] | 0;
      $4_1 = global$16;
      if ($5_1) {
       continue label$6
      }
      break label$1;
     };
    }
    label$9 : while (1) {
     label$10 : {
      label$11 : {
       $7_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
       if (($7_1 | 0) == ($6_1 | 0)) {
        break label$11
       }
       label$12 : {
        if ($7_1 >>> 0 < $3_1 >>> 0) {
         break label$12
        }
        $7_1 = ($7_1 >>> 0) % ($3_1 >>> 0) | 0;
       }
       $4_1 = global$16;
       if (($7_1 | 0) == ($8_1 | 0)) {
        break label$10
       }
       break label$1;
      }
      if ((HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
       break label$4
      }
     }
     $5_1 = HEAP32[$5_1 >> 2] | 0;
     $4_1 = global$16;
     if ($5_1) {
      continue label$9
     }
     break label$1;
    };
   }
   label$13 : {
    if (!(HEAPU8[($5_1 + 60 | 0) >> 0] | 0)) {
     break label$13
    }
    $4_1 = HEAP32[$0_1 >> 2] | 0;
    $4_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($4_1) | 0;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$0 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
    $130_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $5_1;
    HEAP32[($5_1 + 36 | 0) >> 2] = $130_1;
    HEAP32[($5_1 + 40 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $4_1 + 20 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $135_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $5_1 + 52 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $135_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $4_1 + 12 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $140_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $5_1 + 44 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $140_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    label$14 : {
     label$15 : {
      label$16 : {
       label$17 : {
        label$18 : {
         if (FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 48 | 0) >> 2] | 0 | 0]($1_1) | 0) {
          break label$18
         }
         HEAP32[($2_1 + 24 | 0) >> 2] = HEAP32[($1_1 + 112 | 0) >> 2] | 0;
         i64toi32_i32$2 = $1_1;
         i64toi32_i32$1 = HEAP32[($1_1 + 104 | 0) >> 2] | 0;
         i64toi32_i32$0 = HEAP32[($1_1 + 108 | 0) >> 2] | 0;
         $153_1 = i64toi32_i32$1;
         i64toi32_i32$1 = $2_1;
         HEAP32[($2_1 + 16 | 0) >> 2] = $153_1;
         HEAP32[($2_1 + 20 | 0) >> 2] = i64toi32_i32$0;
         label$19 : {
          label$20 : {
           label$21 : {
            $9_1 = Math_fround(HEAPF32[($2_1 + 16 | 0) >> 2]);
            if ($9_1 > Math_fround(0.0) ^ 1 | 0) {
             break label$21
            }
            $4_1 = $5_1 + 48 | 0;
            $9_1 = Math_fround(3402823466385288598117041.0e14);
            break label$20;
           }
           if ($9_1 < Math_fround(0.0) ^ 1 | 0) {
            break label$19
           }
           $4_1 = $5_1 + 36 | 0;
           $9_1 = Math_fround(-3402823466385288598117041.0e14);
          }
          HEAPF32[$4_1 >> 2] = $9_1;
         }
         $9_1 = Math_fround(HEAPF32[($2_1 + 20 | 0) >> 2]);
         if (!($9_1 > Math_fround(0.0))) {
          break label$17
         }
         $9_1 = Math_fround(3402823466385288598117041.0e14);
         $4_1 = 13;
         break label$16;
        }
        FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($1_1);
        $6_1 = $1_1 + 108 | 0;
        $540($2_1 + 16 | 0 | 0, $6_1 | 0, $4_1 | 0);
        FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($1_1);
        $10_1 = Math_fround(HEAPF32[($2_1 + 16 | 0) >> 2]);
        $9_1 = Math_fround($10_1 - Math_fround(HEAPF32[$6_1 >> 2]));
        $11_1 = Math_fround(HEAPF32[($2_1 + 20 | 0) >> 2]);
        $12_1 = Math_fround($11_1 - Math_fround(HEAPF32[($1_1 + 112 | 0) >> 2]));
        $13_1 = Math_fround(HEAPF32[($2_1 + 24 | 0) >> 2]);
        $14_1 = Math_fround($13_1 - Math_fround(HEAPF32[($1_1 + 116 | 0) >> 2]));
        $15_1 = Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($9_1 * $9_1) + Math_fround($12_1 * $12_1)) + Math_fround($14_1 * $14_1))));
        $16_1 = Math_fround(Math_fround(HEAPF32[($1_1 + 132 | 0) >> 2]) - $15_1);
        if ($16_1 > Math_fround(0.0) ^ 1 | 0) {
         break label$14
        }
        $15_1 = Math_fround(Math_fround(1.0) / $15_1);
        HEAPF32[($2_1 + 8 | 0) >> 2] = Math_fround($13_1 + Math_fround($16_1 * Math_fround($14_1 * $15_1)));
        HEAPF32[($2_1 + 4 | 0) >> 2] = Math_fround($11_1 + Math_fround($16_1 * Math_fround($12_1 * $15_1)));
        HEAPF32[$2_1 >> 2] = Math_fround($10_1 + Math_fround($16_1 * Math_fround($9_1 * $15_1)));
        $532($5_1 + 32 | 0 | 0, $2_1 | 0);
        break label$14;
       }
       if ($9_1 < Math_fround(0.0) ^ 1 | 0) {
        break label$15
       }
       $9_1 = Math_fround(-3402823466385288598117041.0e14);
       $4_1 = 10;
      }
      HEAPF32[($5_1 + ($4_1 << 2 | 0) | 0) >> 2] = $9_1;
     }
     label$22 : {
      label$23 : {
       $9_1 = Math_fround(HEAPF32[($2_1 + 24 | 0) >> 2]);
       if (!($9_1 > Math_fround(0.0))) {
        break label$23
       }
       $9_1 = Math_fround(3402823466385288598117041.0e14);
       $4_1 = 14;
       break label$22;
      }
      if ($9_1 < Math_fround(0.0) ^ 1 | 0) {
       break label$14
      }
      $9_1 = Math_fround(-3402823466385288598117041.0e14);
      $4_1 = 11;
     }
     HEAPF32[($5_1 + ($4_1 << 2 | 0) | 0) >> 2] = $9_1;
    }
    HEAP8[($5_1 + 60 | 0) >> 0] = 0;
   }
   $4_1 = $5_1 + 32 | 0;
  }
  global$0 = $2_1 + 32 | 0;
  return $4_1 | 0;
 }
 
 function $56($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   $0_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   if (!$0_1) {
    break label$1
   }
   label$2 : while (1) {
    HEAP8[($0_1 + 60 | 0) >> 0] = 1;
    HEAP8[($0_1 + 20 | 0) >> 0] = 1;
    $0_1 = HEAP32[$0_1 >> 2] | 0;
    if ($0_1) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $57($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $6_1 = 0, $9_1 = 0, i64toi32_i32$0 = 0, $4_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, $3_1 = 0, $11_1 = 0, $8_1 = 0, $19_1 = Math_fround(0), i64toi32_i32$3 = 0, $17_1 = Math_fround(0), $16_1 = Math_fround(0), $10_1 = 0, $20_1 = Math_fround(0), $18_1 = Math_fround(0), $21_1 = Math_fround(0), i64toi32_i32$5 = 0, $23_1 = Math_fround(0), $24_1 = Math_fround(0), $22_1 = Math_fround(0), $25_1 = Math_fround(0), $7_1 = 0, $13_1 = 0, $13$hi = 0, $14_1 = 0, $14$hi = 0, $5_1 = 0, $12_1 = 0, $70_1 = 0, $15$hi = 0, $71_1 = 0, $72_1 = 0, $73_1 = 0, $74_1 = 0, $75_1 = 0, $143_1 = 0, $153_1 = 0, $510_1 = Math_fround(0), $659_1 = Math_fround(0), $769_1 = Math_fround(0), $1072_1 = Math_fround(0), $1095_1 = 0, $1105_1 = Math_fround(0), $1152_1 = 0, $1156$hi = 0, $15_1 = 0, $1160_1 = 0, $1162_1 = 0, $1163_1 = 0, $1163$hi = 0, $1165$hi = 0, $1169_1 = 0, $1171_1 = 0, $1171$hi = 0, $1174$hi = 0, $1175_1 = 0, $1279_1 = Math_fround(0), $1408_1 = Math_fround(0), $1523_1 = 0, $1530_1 = 0, $1530$hi = 0, $1532$hi = 0, $1533_1 = 0, $1534_1 = 0, $1535_1 = 0, $1535$hi = 0, $1537$hi = 0, $1538_1 = 0, $1540_1 = 0, $1544$hi = 0, $1546_1 = 0;
  $3_1 = global$0 - 80 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 68 | 0) >> 2] = $1_1;
  $4_1 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + 88 | 0) >> 2] | 0;
  $5_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 44 | 0) >> 2] | 0 | 0]($4_1) | 0;
  $6_1 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + 88 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 72 | 0) >> 2] | 0 | 0]($6_1);
  $7_1 = $0_1 + 8 | 0;
  label$1 : {
   label$2 : {
    $8_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    if (!$8_1) {
     break label$2
    }
    $6_1 = Math_imul($1_1, 1540483477);
    $6_1 = Math_imul(($6_1 >>> 24 | 0) ^ $6_1 | 0, 1540483477) ^ 1866966612 | 0;
    $6_1 = Math_imul(($6_1 >>> 13 | 0) ^ $6_1 | 0, 1540483477);
    $6_1 = ($6_1 >>> 15 | 0) ^ $6_1 | 0;
    label$3 : {
     label$4 : {
      $9_1 = __wasm_popcnt_i32($8_1 | 0) | 0;
      if ($9_1 >>> 0 > 1 >>> 0) {
       break label$4
      }
      $10_1 = $6_1 & ($8_1 + -1 | 0) | 0;
      break label$3;
     }
     $10_1 = $6_1;
     if ($6_1 >>> 0 < $8_1 >>> 0) {
      break label$3
     }
     $10_1 = ($6_1 >>> 0) % ($8_1 >>> 0) | 0;
    }
    $11_1 = HEAP32[((HEAP32[$7_1 >> 2] | 0) + ($10_1 << 2 | 0) | 0) >> 2] | 0;
    if (!$11_1) {
     break label$2
    }
    $11_1 = HEAP32[$11_1 >> 2] | 0;
    if (!$11_1) {
     break label$2
    }
    label$5 : {
     if ($9_1 >>> 0 > 1 >>> 0) {
      break label$5
     }
     $8_1 = $8_1 + -1 | 0;
     label$6 : while (1) {
      label$7 : {
       label$8 : {
        $9_1 = HEAP32[($11_1 + 4 | 0) >> 2] | 0;
        if (($9_1 | 0) == ($6_1 | 0)) {
         break label$8
        }
        if (($9_1 & $8_1 | 0 | 0) == ($10_1 | 0)) {
         break label$7
        }
        break label$2;
       }
       if ((HEAP32[($11_1 + 8 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
        break label$1
       }
      }
      $11_1 = HEAP32[$11_1 >> 2] | 0;
      if ($11_1) {
       continue label$6
      }
      break label$2;
     };
    }
    label$9 : while (1) {
     label$10 : {
      label$11 : {
       $9_1 = HEAP32[($11_1 + 4 | 0) >> 2] | 0;
       if (($9_1 | 0) == ($6_1 | 0)) {
        break label$11
       }
       label$12 : {
        if ($9_1 >>> 0 < $8_1 >>> 0) {
         break label$12
        }
        $9_1 = ($9_1 >>> 0) % ($8_1 >>> 0) | 0;
       }
       if (($9_1 | 0) == ($10_1 | 0)) {
        break label$10
       }
       break label$2;
      }
      if ((HEAP32[($11_1 + 8 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
       break label$1
      }
     }
     $11_1 = HEAP32[$11_1 >> 2] | 0;
     if ($11_1) {
      continue label$9
     }
     break label$9;
    };
   }
   $6_1 = global$16;
   i64toi32_i32$2 = $6_1;
   i64toi32_i32$0 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
   $143_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $3_1 + 24 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $143_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[($3_1 + 32 | 0) >> 2] = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   i64toi32_i32$2 = $6_1 + 16 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $153_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $3_1 + 36 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $153_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($3_1 + 44 | 0) >> 2] = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$0 = 0;
   HEAP32[($3_1 + 12 | 0) >> 2] = 0;
   HEAP32[($3_1 + 16 | 0) >> 2] = i64toi32_i32$0;
   HEAP8[($3_1 + 8 | 0) >> 0] = 1;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$0 = 0;
   HEAP32[$3_1 >> 2] = 0;
   HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP8[($3_1 + 48 | 0) >> 0] = 1;
   HEAP32[($3_1 + 20 | 0) >> 2] = (global$1 + 21928 | 0) + 8 | 0;
   $58($3_1 + 72 | 0 | 0, $7_1 | 0, $3_1 + 68 | 0 | 0, $3_1 + 68 | 0 | 0, $3_1 | 0);
   $11_1 = 0;
   label$13 : {
    $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    if (!$1_1) {
     break label$13
    }
    $10_1 = HEAP32[($3_1 + 68 | 0) >> 2] | 0;
    $6_1 = Math_imul($10_1, 1540483477);
    $6_1 = Math_imul(($6_1 >>> 24 | 0) ^ $6_1 | 0, 1540483477) ^ 1866966612 | 0;
    $6_1 = Math_imul(($6_1 >>> 13 | 0) ^ $6_1 | 0, 1540483477);
    $9_1 = ($6_1 >>> 15 | 0) ^ $6_1 | 0;
    label$14 : {
     label$15 : {
      $12_1 = __wasm_popcnt_i32($1_1 | 0) | 0;
      if ($12_1 >>> 0 > 1 >>> 0) {
       break label$15
      }
      $8_1 = $9_1 & ($1_1 + -1 | 0) | 0;
      break label$14;
     }
     $8_1 = $9_1;
     if ($9_1 >>> 0 < $1_1 >>> 0) {
      break label$14
     }
     $8_1 = ($9_1 >>> 0) % ($1_1 >>> 0) | 0;
    }
    $11_1 = 0;
    $6_1 = HEAP32[((HEAP32[$7_1 >> 2] | 0) + ($8_1 << 2 | 0) | 0) >> 2] | 0;
    if (!$6_1) {
     break label$13
    }
    $11_1 = 0;
    $6_1 = HEAP32[$6_1 >> 2] | 0;
    if (!$6_1) {
     break label$13
    }
    label$16 : {
     label$17 : {
      label$18 : {
       if ($12_1 >>> 0 > 1 >>> 0) {
        break label$18
       }
       $1_1 = $1_1 + -1 | 0;
       label$19 : while (1) {
        label$20 : {
         label$21 : {
          $11_1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
          if (($11_1 | 0) == ($9_1 | 0)) {
           break label$21
          }
          if (($11_1 & $1_1 | 0 | 0) != ($8_1 | 0)) {
           break label$17
          }
          break label$20;
         }
         if ((HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0) == ($10_1 | 0)) {
          break label$16
         }
        }
        $6_1 = HEAP32[$6_1 >> 2] | 0;
        if ($6_1) {
         continue label$19
        }
        break label$17;
       };
      }
      label$22 : while (1) {
       label$23 : {
        label$24 : {
         $11_1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
         if (($11_1 | 0) == ($9_1 | 0)) {
          break label$24
         }
         label$25 : {
          if ($11_1 >>> 0 < $1_1 >>> 0) {
           break label$25
          }
          $11_1 = ($11_1 >>> 0) % ($1_1 >>> 0) | 0;
         }
         if (($11_1 | 0) != ($8_1 | 0)) {
          break label$17
         }
         break label$23;
        }
        if ((HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0) == ($10_1 | 0)) {
         break label$16
        }
       }
       $6_1 = HEAP32[$6_1 >> 2] | 0;
       if ($6_1) {
        continue label$22
       }
       break label$22;
      };
     }
     $11_1 = 0;
     break label$13;
    }
    $11_1 = $6_1;
   }
   $6_1 = HEAP32[($11_1 + 8 | 0) >> 2] | 0;
   HEAP32[($3_1 + 72 | 0) >> 2] = $0_1;
   $59($3_1 | 0, $6_1 + 60 | 0 | 0, $3_1 + 72 | 0 | 0, $3_1 + 72 | 0 | 0, $3_1 + 72 | 0 | 0);
   $6_1 = HEAP32[$5_1 >> 2] | 0;
   $9_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
   $1_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 48 | 0) >> 2] | 0 | 0]($4_1) | 0;
   $8_1 = HEAP32[$1_1 >> 2] | 0;
   $1_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   fimport$11(1 | 0, $11_1 + 24 | 0 | 0);
   fimport$11(1 | 0, $11_1 + 28 | 0 | 0);
   $422(HEAP32[($11_1 + 24 | 0) >> 2] | 0 | 0);
   fimport$12(34963 | 0, Math_imul(($9_1 - $6_1 | 0) >> 4 | 0, 72) | 0, 0 | 0, 35040 | 0);
   $434(HEAP32[($11_1 + 24 | 0) >> 2] | 0 | 0);
   $422(HEAP32[($11_1 + 28 | 0) >> 2] | 0 | 0);
   fimport$12(34963 | 0, Math_imul(($1_1 - $8_1 | 0 | 0) / (28 | 0) | 0, 72) | 0, 0 | 0, 35040 | 0);
   $434(HEAP32[($11_1 + 28 | 0) >> 2] | 0 | 0);
  }
  label$26 : {
   label$27 : {
    if (HEAPU8[($11_1 + 20 | 0) >> 0] | 0) {
     break label$27
    }
    if (HEAPU8[($0_1 + 4 | 0) >> 0] | 0) {
     break label$26
    }
    if (!$2_1) {
     break label$26
    }
   }
   HEAP8[($0_1 + 4 | 0) >> 0] = $2_1;
   label$28 : {
    label$29 : {
     $6_1 = HEAP32[($3_1 + 68 | 0) >> 2] | 0;
     if (FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 48 | 0) >> 2] | 0 | 0]($6_1) | 0) {
      break label$29
     }
     $6_1 = HEAP32[($3_1 + 68 | 0) >> 2] | 0;
     $60($3_1 | 0, $253(HEAP32[$0_1 >> 2] | 0 | 0) | 0 | 0);
     $16_1 = Math_fround(HEAPF32[($6_1 + 104 | 0) >> 2]);
     $17_1 = Math_fround(HEAPF32[($6_1 + 108 | 0) >> 2]);
     $18_1 = Math_fround(HEAPF32[($6_1 + 112 | 0) >> 2]);
     $19_1 = Math_fround(Math_fround(Math_fround($16_1 * Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2])) + Math_fround($17_1 * Math_fround(HEAPF32[($3_1 + 24 | 0) >> 2]))) + Math_fround(Math_fround($18_1 * Math_fround(HEAPF32[($3_1 + 40 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($3_1 + 56 | 0) >> 2]) * Math_fround(0.0))));
     $20_1 = Math_fround(Math_fround(Math_fround($16_1 * Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2])) + Math_fround($17_1 * Math_fround(HEAPF32[($3_1 + 20 | 0) >> 2]))) + Math_fround(Math_fround($18_1 * Math_fround(HEAPF32[($3_1 + 36 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($3_1 + 52 | 0) >> 2]) * Math_fround(0.0))));
     $16_1 = Math_fround(Math_fround(Math_fround($16_1 * Math_fround(HEAPF32[$3_1 >> 2])) + Math_fround($17_1 * Math_fround(HEAPF32[($3_1 + 16 | 0) >> 2]))) + Math_fround(Math_fround($18_1 * Math_fround(HEAPF32[($3_1 + 32 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($3_1 + 48 | 0) >> 2]) * Math_fround(0.0))));
     label$30 : {
      label$31 : {
       if (!$2_1) {
        break label$31
       }
       $6_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 48 | 0) >> 2] | 0 | 0]($4_1) | 0;
       $0_1 = HEAP32[$6_1 >> 2] | 0;
       $6_1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
       $422(HEAP32[($11_1 + 28 | 0) >> 2] | 0 | 0);
       $9_1 = 0;
       $6_1 = Math_imul(($6_1 - $0_1 | 0 | 0) / (28 | 0) | 0, 12);
       fimport$12(34963 | 0, $6_1 | 0, 0 | 0, 35040 | 0);
       $7_1 = fimport$13(34963 | 0, 0 | 0, $6_1 | 0, 34 | 0) | 0;
       HEAP32[($11_1 + 16 | 0) >> 2] = 0;
       label$32 : {
        $0_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 48 | 0) >> 2] | 0 | 0]($4_1) | 0;
        $6_1 = HEAP32[$0_1 >> 2] | 0;
        $10_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        if (($6_1 | 0) == ($10_1 | 0)) {
         break label$32
        }
        $9_1 = 0;
        label$33 : while (1) {
         $17_1 = Math_fround(HEAPF32[($6_1 + 20 | 0) >> 2]);
         $18_1 = Math_fround(HEAPF32[($6_1 + 16 | 0) >> 2]);
         $21_1 = Math_fround(HEAPF32[($6_1 + 12 | 0) >> 2]);
         label$34 : {
          if (!(FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 100 | 0) >> 2] | 0 | 0]($4_1) | 0)) {
           break label$34
          }
          $0_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
          $1_1 = $0_1 + Math_imul((HEAP32[($6_1 + 4 | 0) >> 2] | 0) >>> 1 | 0, 12) | 0;
          $8_1 = $0_1 + Math_imul((HEAP32[$6_1 >> 2] | 0) >>> 1 | 0, 12) | 0;
          $17_1 = Math_fround(HEAPF32[$8_1 >> 2]);
          $18_1 = Math_fround(Math_fround(HEAPF32[$1_1 >> 2]) - $17_1);
          $0_1 = $0_1 + Math_imul((HEAP32[($6_1 + 8 | 0) >> 2] | 0) >>> 1 | 0, 12) | 0;
          $21_1 = Math_fround(HEAPF32[($8_1 + 4 | 0) >> 2]);
          $22_1 = Math_fround(Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2]) - $21_1);
          $21_1 = Math_fround(Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]) - $21_1);
          $23_1 = Math_fround(Math_fround(HEAPF32[$0_1 >> 2]) - $17_1);
          $17_1 = Math_fround(Math_fround($18_1 * $22_1) - Math_fround($21_1 * $23_1));
          $24_1 = Math_fround(HEAPF32[($8_1 + 8 | 0) >> 2]);
          $25_1 = Math_fround(Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]) - $24_1);
          $510_1 = Math_fround($25_1 * $23_1);
          $23_1 = Math_fround(Math_fround(HEAPF32[($0_1 + 8 | 0) >> 2]) - $24_1);
          $18_1 = Math_fround($510_1 - Math_fround($18_1 * $23_1));
          $21_1 = Math_fround(Math_fround($21_1 * $23_1) - Math_fround($25_1 * $22_1));
         }
         $0_1 = Math_fround(Math_fround(Math_fround($16_1 * $21_1) + Math_fround($20_1 * $18_1)) + Math_fround($19_1 * $17_1)) < Math_fround(0.0);
         HEAP8[($6_1 + 24 | 0) >> 0] = $0_1;
         label$35 : {
          if ($0_1 ^ 1 | 0) {
           break label$35
          }
          $0_1 = $7_1 + ($9_1 << 2 | 0) | 0;
          HEAP32[$0_1 >> 2] = HEAP32[$6_1 >> 2] | 0;
          HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
          HEAP32[($0_1 + 8 | 0) >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
          $9_1 = $9_1 + 3 | 0;
         }
         $6_1 = $6_1 + 28 | 0;
         if (($6_1 | 0) != ($10_1 | 0)) {
          continue label$33
         }
         break label$33;
        };
       }
       fimport$14(34963 | 0) | 0;
       $434(HEAP32[($11_1 + 28 | 0) >> 2] | 0 | 0);
       HEAP32[($11_1 + 16 | 0) >> 2] = $9_1;
       break label$30;
      }
      $6_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 44 | 0) >> 2] | 0 | 0]($4_1) | 0;
      $0_1 = HEAP32[$6_1 >> 2] | 0;
      $10_1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
      if (($0_1 | 0) == ($10_1 | 0)) {
       break label$30
      }
      label$36 : while (1) {
       $6_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 52 | 0) >> 2] | 0 | 0]($4_1, HEAP32[$0_1 >> 2] | 0) | 0;
       $17_1 = Math_fround(HEAPF32[($6_1 + 12 | 0) >> 2]);
       $18_1 = Math_fround(HEAPF32[($6_1 + 20 | 0) >> 2]);
       $21_1 = Math_fround(HEAPF32[($6_1 + 16 | 0) >> 2]);
       label$37 : {
        if (!(FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 100 | 0) >> 2] | 0 | 0]($4_1) | 0)) {
         break label$37
        }
        $9_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
        $1_1 = $9_1 + Math_imul((HEAP32[($6_1 + 4 | 0) >> 2] | 0) >>> 1 | 0, 12) | 0;
        $8_1 = $9_1 + Math_imul((HEAP32[$6_1 >> 2] | 0) >>> 1 | 0, 12) | 0;
        $17_1 = Math_fround(HEAPF32[$8_1 >> 2]);
        $21_1 = Math_fround(Math_fround(HEAPF32[$1_1 >> 2]) - $17_1);
        $9_1 = $9_1 + Math_imul((HEAP32[($6_1 + 8 | 0) >> 2] | 0) >>> 1 | 0, 12) | 0;
        $18_1 = Math_fround(HEAPF32[($8_1 + 4 | 0) >> 2]);
        $22_1 = Math_fround(Math_fround(HEAPF32[($9_1 + 4 | 0) >> 2]) - $18_1);
        $23_1 = Math_fround(Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]) - $18_1);
        $17_1 = Math_fround(Math_fround(HEAPF32[$9_1 >> 2]) - $17_1);
        $18_1 = Math_fround(Math_fround($21_1 * $22_1) - Math_fround($23_1 * $17_1));
        $24_1 = Math_fround(HEAPF32[($8_1 + 8 | 0) >> 2]);
        $25_1 = Math_fround(Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]) - $24_1);
        $659_1 = Math_fround($25_1 * $17_1);
        $17_1 = Math_fround(Math_fround(HEAPF32[($9_1 + 8 | 0) >> 2]) - $24_1);
        $21_1 = Math_fround($659_1 - Math_fround($21_1 * $17_1));
        $17_1 = Math_fround(Math_fround($23_1 * $17_1) - Math_fround($25_1 * $22_1));
       }
       HEAP8[($6_1 + 24 | 0) >> 0] = Math_fround(Math_fround(Math_fround($16_1 * $17_1) + Math_fround($20_1 * $21_1)) + Math_fround($19_1 * $18_1)) < Math_fround(0.0);
       label$38 : {
        $6_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        if (($6_1 | 0) == (-1 | 0)) {
         break label$38
        }
        $6_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 52 | 0) >> 2] | 0 | 0]($4_1, $6_1) | 0;
        $17_1 = Math_fround(HEAPF32[($6_1 + 12 | 0) >> 2]);
        $18_1 = Math_fround(HEAPF32[($6_1 + 20 | 0) >> 2]);
        $21_1 = Math_fround(HEAPF32[($6_1 + 16 | 0) >> 2]);
        label$39 : {
         if (!(FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 100 | 0) >> 2] | 0 | 0]($4_1) | 0)) {
          break label$39
         }
         $9_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
         $1_1 = $9_1 + Math_imul((HEAP32[($6_1 + 4 | 0) >> 2] | 0) >>> 1 | 0, 12) | 0;
         $8_1 = $9_1 + Math_imul((HEAP32[$6_1 >> 2] | 0) >>> 1 | 0, 12) | 0;
         $17_1 = Math_fround(HEAPF32[$8_1 >> 2]);
         $21_1 = Math_fround(Math_fround(HEAPF32[$1_1 >> 2]) - $17_1);
         $9_1 = $9_1 + Math_imul((HEAP32[($6_1 + 8 | 0) >> 2] | 0) >>> 1 | 0, 12) | 0;
         $18_1 = Math_fround(HEAPF32[($8_1 + 4 | 0) >> 2]);
         $22_1 = Math_fround(Math_fround(HEAPF32[($9_1 + 4 | 0) >> 2]) - $18_1);
         $23_1 = Math_fround(Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]) - $18_1);
         $17_1 = Math_fround(Math_fround(HEAPF32[$9_1 >> 2]) - $17_1);
         $18_1 = Math_fround(Math_fround($21_1 * $22_1) - Math_fround($23_1 * $17_1));
         $24_1 = Math_fround(HEAPF32[($8_1 + 8 | 0) >> 2]);
         $25_1 = Math_fround(Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]) - $24_1);
         $769_1 = Math_fround($25_1 * $17_1);
         $17_1 = Math_fround(Math_fround(HEAPF32[($9_1 + 8 | 0) >> 2]) - $24_1);
         $21_1 = Math_fround($769_1 - Math_fround($21_1 * $17_1));
         $17_1 = Math_fround(Math_fround($23_1 * $17_1) - Math_fround($25_1 * $22_1));
        }
        HEAP8[($6_1 + 24 | 0) >> 0] = Math_fround(Math_fround(Math_fround($16_1 * $17_1) + Math_fround($20_1 * $21_1)) + Math_fround($19_1 * $18_1)) < Math_fround(0.0);
       }
       $0_1 = $0_1 + 16 | 0;
       if (($0_1 | 0) != ($10_1 | 0)) {
        continue label$36
       }
       break label$36;
      };
     }
     $6_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 44 | 0) >> 2] | 0 | 0]($4_1) | 0;
     $0_1 = HEAP32[$6_1 >> 2] | 0;
     $6_1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
     $422(HEAP32[($11_1 + 24 | 0) >> 2] | 0 | 0);
     $1_1 = 0;
     $6_1 = Math_imul(($6_1 - $0_1 | 0) >> 4 | 0, 12);
     fimport$12(34963 | 0, $6_1 | 0, 0 | 0, 35040 | 0);
     $7_1 = fimport$13(34963 | 0, 0 | 0, $6_1 | 0, 34 | 0) | 0;
     HEAP32[($11_1 + 12 | 0) >> 2] = 0;
     label$40 : {
      $0_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 44 | 0) >> 2] | 0 | 0]($4_1) | 0;
      $6_1 = HEAP32[$0_1 >> 2] | 0;
      $10_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
      if (($6_1 | 0) == ($10_1 | 0)) {
       break label$40
      }
      $1_1 = 0;
      label$41 : while (1) {
       $0_1 = HEAPU8[((FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 52 | 0) >> 2] | 0 | 0]($4_1, HEAP32[$6_1 >> 2] | 0) | 0) + 24 | 0) >> 0] | 0;
       $9_1 = 0;
       label$42 : {
        $8_1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
        if (($8_1 | 0) == (-1 | 0)) {
         break label$42
        }
        $9_1 = HEAPU8[((FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 52 | 0) >> 2] | 0 | 0]($4_1, $8_1) | 0) + 24 | 0) >> 0] | 0;
       }
       label$43 : {
        if (($9_1 | 0) == ($0_1 | 0)) {
         break label$43
        }
        $8_1 = HEAP32[($6_1 + ($0_1 ? 12 : 8) | 0) >> 2] | 0;
        $9_1 = $7_1 + ($1_1 << 2 | 0) | 0;
        $0_1 = HEAP32[($6_1 + ($0_1 ? 8 : 12) | 0) >> 2] | 0;
        HEAP32[($9_1 + 4 | 0) >> 2] = $0_1;
        HEAP32[$9_1 >> 2] = $8_1;
        HEAP32[($9_1 + 8 | 0) >> 2] = $0_1 + 1 | 0;
        $1_1 = $1_1 + 3 | 0;
       }
       $6_1 = $6_1 + 16 | 0;
       if (($6_1 | 0) != ($10_1 | 0)) {
        continue label$41
       }
       break label$41;
      };
     }
     fimport$14(34963 | 0) | 0;
     $434(HEAP32[($11_1 + 24 | 0) >> 2] | 0 | 0);
     HEAP32[($11_1 + 12 | 0) >> 2] = $1_1;
     break label$28;
    }
    $6_1 = HEAP32[($3_1 + 68 | 0) >> 2] | 0;
    $60($3_1 | 0, $253(HEAP32[$0_1 >> 2] | 0 | 0) | 0 | 0);
    FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($6_1);
    $19_1 = Math_fround(HEAPF32[($6_1 + 108 | 0) >> 2]);
    $20_1 = Math_fround(HEAPF32[($6_1 + 112 | 0) >> 2]);
    $16_1 = Math_fround(HEAPF32[($6_1 + 116 | 0) >> 2]);
    $17_1 = Math_fround(Math_fround(Math_fround($19_1 * Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2])) + Math_fround($20_1 * Math_fround(HEAPF32[($3_1 + 24 | 0) >> 2]))) + Math_fround(Math_fround($16_1 * Math_fround(HEAPF32[($3_1 + 40 | 0) >> 2])) + Math_fround(HEAPF32[($3_1 + 56 | 0) >> 2])));
    $18_1 = Math_fround(Math_fround(Math_fround($19_1 * Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2])) + Math_fround($20_1 * Math_fround(HEAPF32[($3_1 + 20 | 0) >> 2]))) + Math_fround(Math_fround($16_1 * Math_fround(HEAPF32[($3_1 + 36 | 0) >> 2])) + Math_fround(HEAPF32[($3_1 + 52 | 0) >> 2])));
    $21_1 = Math_fround(Math_fround(Math_fround($19_1 * Math_fround(HEAPF32[$3_1 >> 2])) + Math_fround($20_1 * Math_fround(HEAPF32[($3_1 + 16 | 0) >> 2]))) + Math_fround(Math_fround($16_1 * Math_fround(HEAPF32[($3_1 + 32 | 0) >> 2])) + Math_fround(HEAPF32[($3_1 + 48 | 0) >> 2])));
    label$44 : {
     label$45 : {
      if (!$2_1) {
       break label$45
      }
      $6_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 48 | 0) >> 2] | 0 | 0]($4_1) | 0;
      $0_1 = HEAP32[$6_1 >> 2] | 0;
      $6_1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
      $422(HEAP32[($11_1 + 28 | 0) >> 2] | 0 | 0);
      $9_1 = 0;
      $6_1 = Math_imul(($6_1 - $0_1 | 0 | 0) / (28 | 0) | 0, 24);
      fimport$12(34963 | 0, $6_1 | 0, 0 | 0, 35040 | 0);
      $7_1 = fimport$13(34963 | 0, 0 | 0, $6_1 | 0, 34 | 0) | 0;
      HEAP32[($11_1 + 16 | 0) >> 2] = 0;
      label$46 : {
       $0_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 48 | 0) >> 2] | 0 | 0]($4_1) | 0;
       $6_1 = HEAP32[$0_1 >> 2] | 0;
       $10_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
       if (($6_1 | 0) == ($10_1 | 0)) {
        break label$46
       }
       $9_1 = 0;
       label$47 : while (1) {
        $22_1 = Math_fround(HEAPF32[($6_1 + 20 | 0) >> 2]);
        $23_1 = Math_fround(HEAPF32[($6_1 + 16 | 0) >> 2]);
        $24_1 = Math_fround(HEAPF32[($6_1 + 12 | 0) >> 2]);
        label$48 : {
         if (!(FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 100 | 0) >> 2] | 0 | 0]($4_1) | 0)) {
          break label$48
         }
         $0_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
         $1_1 = $0_1 + Math_imul((HEAP32[($6_1 + 4 | 0) >> 2] | 0) >>> 1 | 0, 12) | 0;
         $8_1 = $0_1 + Math_imul((HEAP32[$6_1 >> 2] | 0) >>> 1 | 0, 12) | 0;
         $19_1 = Math_fround(HEAPF32[$8_1 >> 2]);
         $20_1 = Math_fround(Math_fround(HEAPF32[$1_1 >> 2]) - $19_1);
         $0_1 = $0_1 + Math_imul((HEAP32[($6_1 + 8 | 0) >> 2] | 0) >>> 1 | 0, 12) | 0;
         $16_1 = Math_fround(HEAPF32[($8_1 + 4 | 0) >> 2]);
         $24_1 = Math_fround(Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2]) - $16_1);
         $16_1 = Math_fround(Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]) - $16_1);
         $19_1 = Math_fround(Math_fround(HEAPF32[$0_1 >> 2]) - $19_1);
         $22_1 = Math_fround(Math_fround($20_1 * $24_1) - Math_fround($16_1 * $19_1));
         $23_1 = Math_fround(HEAPF32[($8_1 + 8 | 0) >> 2]);
         $25_1 = Math_fround(Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]) - $23_1);
         $1072_1 = Math_fround($25_1 * $19_1);
         $19_1 = Math_fround(Math_fround(HEAPF32[($0_1 + 8 | 0) >> 2]) - $23_1);
         $23_1 = Math_fround($1072_1 - Math_fround($20_1 * $19_1));
         $24_1 = Math_fround(Math_fround($16_1 * $19_1) - Math_fround($25_1 * $24_1));
        }
        $1095_1 = HEAP32[(FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($4_1) | 0) >> 2] | 0;
        $1_1 = HEAP32[$6_1 >> 2] | 0;
        $0_1 = $1095_1 + ($1_1 << 4 | 0) | 0;
        $19_1 = Math_fround(Math_fround(HEAPF32[($0_1 + 8 | 0) >> 2]) - $17_1);
        $1105_1 = $19_1;
        $20_1 = Math_fround(Math_fround(HEAPF32[$0_1 >> 2]) - $21_1);
        $16_1 = Math_fround(Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2]) - $18_1);
        $19_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($20_1 * $20_1) + Math_fround($16_1 * $16_1)) + Math_fround($19_1 * $19_1)))));
        $0_1 = Math_fround(Math_fround($22_1 * Math_fround($1105_1 * $19_1)) + Math_fround(Math_fround($24_1 * Math_fround($20_1 * $19_1)) + Math_fround($23_1 * Math_fround($16_1 * $19_1)))) < Math_fround(0.0);
        HEAP8[($6_1 + 24 | 0) >> 0] = $0_1;
        label$49 : {
         if ($0_1 ^ 1 | 0) {
          break label$49
         }
         i64toi32_i32$2 = $6_1;
         i64toi32_i32$0 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
         i64toi32_i32$1 = 0;
         $13_1 = i64toi32_i32$0;
         $13$hi = i64toi32_i32$1;
         $0_1 = $7_1 + ($9_1 << 3 | 0) | 0;
         $1152_1 = $0_1;
         i64toi32_i32$2 = $6_1;
         i64toi32_i32$1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
         i64toi32_i32$0 = 0;
         $14_1 = i64toi32_i32$1;
         $14$hi = i64toi32_i32$0;
         i64toi32_i32$2 = i64toi32_i32$1;
         i64toi32_i32$1 = 0;
         i64toi32_i32$3 = 32;
         i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
          i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
          $70_1 = 0;
         } else {
          i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
          $70_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
         }
         $1156$hi = i64toi32_i32$1;
         i64toi32_i32$1 = 0;
         $15_1 = $1_1;
         $15$hi = i64toi32_i32$1;
         i64toi32_i32$1 = $1156$hi;
         i64toi32_i32$0 = $70_1;
         i64toi32_i32$2 = $15$hi;
         i64toi32_i32$3 = $1_1;
         i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
         $1160_1 = i64toi32_i32$0 | $1_1 | 0;
         i64toi32_i32$0 = $1152_1;
         HEAP32[i64toi32_i32$0 >> 2] = $1160_1;
         HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
         $1162_1 = $0_1 + 8 | 0;
         i64toi32_i32$2 = $13$hi;
         $1163_1 = $13_1;
         $1163$hi = i64toi32_i32$2;
         i64toi32_i32$1 = $13_1;
         i64toi32_i32$0 = 0;
         i64toi32_i32$3 = 32;
         i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
          i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
          $71_1 = 0;
         } else {
          i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
          $71_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
         }
         $1165$hi = i64toi32_i32$0;
         i64toi32_i32$0 = $1163$hi;
         i64toi32_i32$2 = $1163_1;
         i64toi32_i32$1 = $1165$hi;
         i64toi32_i32$3 = $71_1;
         i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
         i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
         i64toi32_i32$2 = 1;
         i64toi32_i32$3 = 0;
         i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
         i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
         if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
          i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
         }
         i64toi32_i32$0 = $1162_1;
         HEAP32[i64toi32_i32$0 >> 2] = i64toi32_i32$4;
         HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$5;
         $1169_1 = $0_1 + 16 | 0;
         i64toi32_i32$5 = $14$hi;
         i64toi32_i32$1 = $14_1;
         i64toi32_i32$0 = 0;
         i64toi32_i32$3 = 1;
         i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
         i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
         if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
          i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
         }
         $1171_1 = i64toi32_i32$2;
         $1171$hi = i64toi32_i32$4;
         i64toi32_i32$4 = $15$hi;
         i64toi32_i32$5 = $15_1;
         i64toi32_i32$1 = 0;
         i64toi32_i32$3 = 32;
         i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
          i64toi32_i32$1 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
          $72_1 = 0;
         } else {
          i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$0 | 0) | 0;
          $72_1 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
         }
         i64toi32_i32$4 = $72_1;
         i64toi32_i32$5 = 1;
         i64toi32_i32$3 = 0;
         i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
         i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
         if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
          i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
         }
         $1174$hi = i64toi32_i32$2;
         i64toi32_i32$2 = $1171$hi;
         i64toi32_i32$1 = $1171_1;
         i64toi32_i32$4 = $1174$hi;
         i64toi32_i32$3 = i64toi32_i32$0;
         i64toi32_i32$4 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
         $1175_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
         i64toi32_i32$1 = $1169_1;
         HEAP32[i64toi32_i32$1 >> 2] = $1175_1;
         HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$4;
         $9_1 = $9_1 + 3 | 0;
        }
        $6_1 = $6_1 + 28 | 0;
        if (($6_1 | 0) != ($10_1 | 0)) {
         continue label$47
        }
        break label$47;
       };
      }
      fimport$14(34963 | 0) | 0;
      $434(HEAP32[($11_1 + 28 | 0) >> 2] | 0 | 0);
      HEAP32[($11_1 + 16 | 0) >> 2] = $9_1 << 1 | 0;
      break label$44;
     }
     $6_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 44 | 0) >> 2] | 0 | 0]($4_1) | 0;
     $0_1 = HEAP32[$6_1 >> 2] | 0;
     $10_1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
     if (($0_1 | 0) == ($10_1 | 0)) {
      break label$44
     }
     label$50 : while (1) {
      $6_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 52 | 0) >> 2] | 0 | 0]($4_1, HEAP32[$0_1 >> 2] | 0) | 0;
      $19_1 = Math_fround(HEAPF32[($6_1 + 12 | 0) >> 2]);
      $20_1 = Math_fround(HEAPF32[($6_1 + 20 | 0) >> 2]);
      $16_1 = Math_fround(HEAPF32[($6_1 + 16 | 0) >> 2]);
      label$51 : {
       if (!(FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 100 | 0) >> 2] | 0 | 0]($4_1) | 0)) {
        break label$51
       }
       $9_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
       $1_1 = $9_1 + Math_imul((HEAP32[($6_1 + 4 | 0) >> 2] | 0) >>> 1 | 0, 12) | 0;
       $8_1 = $9_1 + Math_imul((HEAP32[$6_1 >> 2] | 0) >>> 1 | 0, 12) | 0;
       $19_1 = Math_fround(HEAPF32[$8_1 >> 2]);
       $16_1 = Math_fround(Math_fround(HEAPF32[$1_1 >> 2]) - $19_1);
       $9_1 = $9_1 + Math_imul((HEAP32[($6_1 + 8 | 0) >> 2] | 0) >>> 1 | 0, 12) | 0;
       $20_1 = Math_fround(HEAPF32[($8_1 + 4 | 0) >> 2]);
       $22_1 = Math_fround(Math_fround(HEAPF32[($9_1 + 4 | 0) >> 2]) - $20_1);
       $23_1 = Math_fround(Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]) - $20_1);
       $19_1 = Math_fround(Math_fround(HEAPF32[$9_1 >> 2]) - $19_1);
       $20_1 = Math_fround(Math_fround($16_1 * $22_1) - Math_fround($23_1 * $19_1));
       $24_1 = Math_fround(HEAPF32[($8_1 + 8 | 0) >> 2]);
       $25_1 = Math_fround(Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]) - $24_1);
       $1279_1 = Math_fround($25_1 * $19_1);
       $19_1 = Math_fround(Math_fround(HEAPF32[($9_1 + 8 | 0) >> 2]) - $24_1);
       $16_1 = Math_fround($1279_1 - Math_fround($16_1 * $19_1));
       $19_1 = Math_fround(Math_fround($23_1 * $19_1) - Math_fround($25_1 * $22_1));
      }
      $9_1 = (HEAP32[(FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($4_1) | 0) >> 2] | 0) + ((HEAP32[$6_1 >> 2] | 0) << 4 | 0) | 0;
      HEAP8[($6_1 + 24 | 0) >> 0] = Math_fround(Math_fround(Math_fround($19_1 * Math_fround(Math_fround(HEAPF32[$9_1 >> 2]) - $21_1)) + Math_fround($16_1 * Math_fround(Math_fround(HEAPF32[($9_1 + 4 | 0) >> 2]) - $18_1))) + Math_fround($20_1 * Math_fround(Math_fround(HEAPF32[($9_1 + 8 | 0) >> 2]) - $17_1))) < Math_fround(0.0);
      label$52 : {
       $6_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
       if (($6_1 | 0) == (-1 | 0)) {
        break label$52
       }
       $6_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 52 | 0) >> 2] | 0 | 0]($4_1, $6_1) | 0;
       $19_1 = Math_fround(HEAPF32[($6_1 + 12 | 0) >> 2]);
       $20_1 = Math_fround(HEAPF32[($6_1 + 20 | 0) >> 2]);
       $16_1 = Math_fround(HEAPF32[($6_1 + 16 | 0) >> 2]);
       label$53 : {
        if (!(FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 100 | 0) >> 2] | 0 | 0]($4_1) | 0)) {
         break label$53
        }
        $9_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
        $1_1 = $9_1 + Math_imul((HEAP32[($6_1 + 4 | 0) >> 2] | 0) >>> 1 | 0, 12) | 0;
        $8_1 = $9_1 + Math_imul((HEAP32[$6_1 >> 2] | 0) >>> 1 | 0, 12) | 0;
        $19_1 = Math_fround(HEAPF32[$8_1 >> 2]);
        $16_1 = Math_fround(Math_fround(HEAPF32[$1_1 >> 2]) - $19_1);
        $9_1 = $9_1 + Math_imul((HEAP32[($6_1 + 8 | 0) >> 2] | 0) >>> 1 | 0, 12) | 0;
        $20_1 = Math_fround(HEAPF32[($8_1 + 4 | 0) >> 2]);
        $22_1 = Math_fround(Math_fround(HEAPF32[($9_1 + 4 | 0) >> 2]) - $20_1);
        $23_1 = Math_fround(Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]) - $20_1);
        $19_1 = Math_fround(Math_fround(HEAPF32[$9_1 >> 2]) - $19_1);
        $20_1 = Math_fround(Math_fround($16_1 * $22_1) - Math_fround($23_1 * $19_1));
        $24_1 = Math_fround(HEAPF32[($8_1 + 8 | 0) >> 2]);
        $25_1 = Math_fround(Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]) - $24_1);
        $1408_1 = Math_fround($25_1 * $19_1);
        $19_1 = Math_fround(Math_fround(HEAPF32[($9_1 + 8 | 0) >> 2]) - $24_1);
        $16_1 = Math_fround($1408_1 - Math_fround($16_1 * $19_1));
        $19_1 = Math_fround(Math_fround($23_1 * $19_1) - Math_fround($25_1 * $22_1));
       }
       $9_1 = (HEAP32[(FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($4_1) | 0) >> 2] | 0) + ((HEAP32[$6_1 >> 2] | 0) << 4 | 0) | 0;
       HEAP8[($6_1 + 24 | 0) >> 0] = Math_fround(Math_fround(Math_fround($19_1 * Math_fround(Math_fround(HEAPF32[$9_1 >> 2]) - $21_1)) + Math_fround($16_1 * Math_fround(Math_fround(HEAPF32[($9_1 + 4 | 0) >> 2]) - $18_1))) + Math_fround($20_1 * Math_fround(Math_fround(HEAPF32[($9_1 + 8 | 0) >> 2]) - $17_1))) < Math_fround(0.0);
      }
      $0_1 = $0_1 + 16 | 0;
      if (($0_1 | 0) != ($10_1 | 0)) {
       continue label$50
      }
      break label$50;
     };
    }
    $1_1 = 0;
    HEAP32[($11_1 + 12 | 0) >> 2] = 0;
    $422(HEAP32[($11_1 + 24 | 0) >> 2] | 0 | 0);
    $6_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 44 | 0) >> 2] | 0 | 0]($4_1) | 0;
    $6_1 = Math_imul(((HEAP32[($6_1 + 4 | 0) >> 2] | 0) - (HEAP32[$6_1 >> 2] | 0) | 0) >> 4 | 0, 24);
    fimport$12(34963 | 0, $6_1 | 0, 0 | 0, 35040 | 0);
    $7_1 = fimport$13(34963 | 0, 0 | 0, $6_1 | 0, 34 | 0) | 0;
    label$54 : {
     $0_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 44 | 0) >> 2] | 0 | 0]($4_1) | 0;
     $6_1 = HEAP32[$0_1 >> 2] | 0;
     $10_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     if (($6_1 | 0) == ($10_1 | 0)) {
      break label$54
     }
     $1_1 = 0;
     label$55 : while (1) {
      $0_1 = HEAPU8[((FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 52 | 0) >> 2] | 0 | 0]($4_1, HEAP32[$6_1 >> 2] | 0) | 0) + 24 | 0) >> 0] | 0;
      $9_1 = 0;
      label$56 : {
       $8_1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
       if (($8_1 | 0) == (-1 | 0)) {
        break label$56
       }
       $9_1 = HEAPU8[((FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 52 | 0) >> 2] | 0 | 0]($4_1, $8_1) | 0) + 24 | 0) >> 0] | 0;
      }
      label$57 : {
       if (($9_1 | 0) == ($0_1 | 0)) {
        break label$57
       }
       i64toi32_i32$2 = $6_1 + ($0_1 ? 8 : 12) | 0;
       i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = 0;
       $13_1 = i64toi32_i32$4;
       $13$hi = i64toi32_i32$1;
       $9_1 = $7_1 + ($1_1 << 3 | 0) | 0;
       $1523_1 = $9_1 + 16 | 0;
       i64toi32_i32$2 = $6_1 + ($0_1 ? 12 : 8) | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$4 = 0;
       $14_1 = i64toi32_i32$1;
       $14$hi = i64toi32_i32$4;
       i64toi32_i32$2 = i64toi32_i32$1;
       i64toi32_i32$1 = 0;
       i64toi32_i32$3 = 1;
       i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $1530_1 = i64toi32_i32$5;
       $1530$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $14$hi;
       i64toi32_i32$4 = $14_1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$3 = 32;
       i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
        $73_1 = 0;
       } else {
        i64toi32_i32$2 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$1 | 0) | 0;
        $73_1 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
       }
       $1532$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $1530$hi;
       i64toi32_i32$0 = $1530_1;
       i64toi32_i32$4 = $1532$hi;
       i64toi32_i32$3 = $73_1;
       i64toi32_i32$4 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
       $1533_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
       i64toi32_i32$0 = $1523_1;
       HEAP32[i64toi32_i32$0 >> 2] = $1533_1;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$4;
       $1534_1 = $9_1;
       i64toi32_i32$4 = $14$hi;
       $1535_1 = $14_1;
       $1535$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $13$hi;
       i64toi32_i32$2 = $13_1;
       i64toi32_i32$0 = 0;
       i64toi32_i32$3 = 32;
       i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
        $74_1 = 0;
       } else {
        i64toi32_i32$0 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
        $74_1 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
       }
       $1537$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $1535$hi;
       i64toi32_i32$4 = $1535_1;
       i64toi32_i32$2 = $1537$hi;
       i64toi32_i32$3 = $74_1;
       i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
       $1538_1 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
       i64toi32_i32$4 = $1534_1;
       HEAP32[i64toi32_i32$4 >> 2] = $1538_1;
       HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$2;
       $1540_1 = $9_1 + 8 | 0;
       i64toi32_i32$2 = $13$hi;
       i64toi32_i32$0 = $13_1;
       i64toi32_i32$4 = 0;
       i64toi32_i32$3 = 1;
       i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $13_1 = i64toi32_i32$1;
       $13$hi = i64toi32_i32$5;
       i64toi32_i32$2 = i64toi32_i32$1;
       i64toi32_i32$0 = 0;
       i64toi32_i32$3 = 32;
       i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
        $75_1 = 0;
       } else {
        i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$4 | 0) | 0;
        $75_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
       }
       $1544$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $13$hi;
       i64toi32_i32$0 = $1544$hi;
       i64toi32_i32$5 = $75_1;
       i64toi32_i32$2 = $13$hi;
       i64toi32_i32$3 = $13_1;
       i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
       $1546_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
       i64toi32_i32$5 = $1540_1;
       HEAP32[i64toi32_i32$5 >> 2] = $1546_1;
       HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$2;
       $1_1 = $1_1 + 3 | 0;
      }
      $6_1 = $6_1 + 16 | 0;
      if (($6_1 | 0) != ($10_1 | 0)) {
       continue label$55
      }
      break label$55;
     };
    }
    fimport$14(34963 | 0) | 0;
    $434(HEAP32[($11_1 + 24 | 0) >> 2] | 0 | 0);
    HEAP32[($11_1 + 12 | 0) >> 2] = $1_1 << 1 | 0;
   }
   HEAP8[($11_1 + 20 | 0) >> 0] = 0;
  }
  global$0 = $3_1 + 80 | 0;
 }
 
 function $58($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $6_1 = 0, $8_1 = 0, i64toi32_i32$1 = 0, $9_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, $11_1 = Math_fround(0), $5_1 = 0, $12_1 = Math_fround(0), $10_1 = 0, $116_1 = 0, $121_1 = 0, $139_1 = 0, $143_1 = 0;
  $5_1 = HEAP32[$2_1 >> 2] | 0;
  $2_1 = Math_imul($5_1, 1540483477);
  $2_1 = Math_imul(($2_1 >>> 24 | 0) ^ $2_1 | 0, 1540483477) ^ 1866966612 | 0;
  $2_1 = Math_imul(($2_1 >>> 13 | 0) ^ $2_1 | 0, 1540483477);
  $6_1 = ($2_1 >>> 15 | 0) ^ $2_1 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     if ($7_1) {
      break label$3
     }
     break label$2;
    }
    label$4 : {
     label$5 : {
      $8_1 = __wasm_popcnt_i32($7_1 | 0) | 0;
      if ($8_1 >>> 0 < 2 >>> 0) {
       break label$5
      }
      $9_1 = $6_1;
      label$6 : {
       if ($6_1 >>> 0 < $7_1 >>> 0) {
        break label$6
       }
       $9_1 = ($6_1 >>> 0) % ($7_1 >>> 0) | 0;
      }
      $2_1 = HEAP32[((HEAP32[$1_1 >> 2] | 0) + ($9_1 << 2 | 0) | 0) >> 2] | 0;
      if (!$2_1) {
       break label$2
      }
      if ($8_1 >>> 0 <= 1 >>> 0) {
       break label$4
      }
      label$7 : while (1) {
       $2_1 = HEAP32[$2_1 >> 2] | 0;
       if (!$2_1) {
        break label$2
       }
       label$8 : {
        $8_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
        if (($8_1 | 0) == ($6_1 | 0)) {
         break label$8
        }
        label$9 : {
         if ($8_1 >>> 0 < $7_1 >>> 0) {
          break label$9
         }
         $8_1 = ($8_1 >>> 0) % ($7_1 >>> 0) | 0;
        }
        if (($8_1 | 0) != ($9_1 | 0)) {
         break label$2
        }
       }
       if ((HEAP32[($2_1 + 8 | 0) >> 2] | 0 | 0) != ($5_1 | 0)) {
        continue label$7
       }
       break label$7;
      };
      $7_1 = 0;
      break label$1;
     }
     $9_1 = $6_1 & ($7_1 + -1 | 0) | 0;
     $2_1 = HEAP32[((HEAP32[$1_1 >> 2] | 0) + ($9_1 << 2 | 0) | 0) >> 2] | 0;
     if (!$2_1) {
      break label$2
     }
    }
    $10_1 = $7_1 + -1 | 0;
    label$10 : while (1) {
     $2_1 = HEAP32[$2_1 >> 2] | 0;
     if (!$2_1) {
      break label$2
     }
     label$11 : {
      $8_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
      if (($8_1 | 0) == ($6_1 | 0)) {
       break label$11
      }
      if (($8_1 & $10_1 | 0 | 0) != ($9_1 | 0)) {
       break label$2
      }
     }
     if ((HEAP32[($2_1 + 8 | 0) >> 2] | 0 | 0) != ($5_1 | 0)) {
      continue label$10
     }
     break label$10;
    };
    $7_1 = 0;
    break label$1;
   }
   $2_1 = $2030(64 | 0) | 0;
   HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[$3_1 >> 2] | 0;
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$0 = HEAP32[$4_1 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
   $116_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $2_1;
   HEAP32[($2_1 + 12 | 0) >> 2] = $116_1;
   HEAP32[($2_1 + 16 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $4_1 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $121_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $2_1 + 20 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $121_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($2_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
   HEAP32[($2_1 + 32 | 0) >> 2] = (global$1 + 21928 | 0) + 8 | 0;
   HEAP32[($2_1 + 44 | 0) >> 2] = HEAP32[($4_1 + 32 | 0) >> 2] | 0;
   i64toi32_i32$2 = $4_1 + 24 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $139_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $2_1;
   HEAP32[($2_1 + 36 | 0) >> 2] = $139_1;
   HEAP32[($2_1 + 40 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $4_1 + 36 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $143_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $2_1;
   HEAP32[($2_1 + 48 | 0) >> 2] = $143_1;
   HEAP32[($2_1 + 52 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($2_1 + 56 | 0) >> 2] = HEAP32[($4_1 + 44 | 0) >> 2] | 0;
   HEAP8[($2_1 + 60 | 0) >> 0] = HEAPU8[($4_1 + 48 | 0) >> 0] | 0;
   HEAP32[$2_1 >> 2] = 0;
   HEAP32[($2_1 + 4 | 0) >> 2] = $6_1;
   $11_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
   $12_1 = Math_fround(((HEAP32[($1_1 + 12 | 0) >> 2] | 0) + 1 | 0) >>> 0);
   label$12 : {
    label$13 : {
     if (!$7_1) {
      break label$13
     }
     if (Math_fround($11_1 * Math_fround($7_1 >>> 0)) < $12_1 ^ 1 | 0) {
      break label$12
     }
    }
    $7_1 = $7_1 << 1 | 0 | ($7_1 >>> 0 < 3 >>> 0 | ($7_1 & ($7_1 + -1 | 0) | 0 | 0) != (0 | 0) | 0) | 0;
    label$14 : {
     label$15 : {
      $11_1 = Math_fround(Math_ceil(Math_fround($12_1 / $11_1)));
      if (!($11_1 < Math_fround(4294967296.0) & $11_1 >= Math_fround(0.0) | 0)) {
       break label$15
      }
      $4_1 = ~~$11_1 >>> 0;
      break label$14;
     }
     $4_1 = 0;
    }
    $68($1_1 | 0, ($7_1 >>> 0 < $4_1 >>> 0 ? $4_1 : $7_1) | 0);
    label$16 : {
     $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     if ($7_1 & ($7_1 + -1 | 0) | 0) {
      break label$16
     }
     $9_1 = ($7_1 + -1 | 0) & $6_1 | 0;
     break label$12;
    }
    label$17 : {
     if ($6_1 >>> 0 >= $7_1 >>> 0) {
      break label$17
     }
     $9_1 = $6_1;
     break label$12;
    }
    $9_1 = ($6_1 >>> 0) % ($7_1 >>> 0) | 0;
   }
   label$18 : {
    label$19 : {
     label$20 : {
      $4_1 = (HEAP32[$1_1 >> 2] | 0) + ($9_1 << 2 | 0) | 0;
      $6_1 = HEAP32[$4_1 >> 2] | 0;
      if ($6_1) {
       break label$20
      }
      HEAP32[$2_1 >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
      HEAP32[($1_1 + 8 | 0) >> 2] = $2_1;
      HEAP32[$4_1 >> 2] = $1_1 + 8 | 0;
      $6_1 = HEAP32[$2_1 >> 2] | 0;
      if (!$6_1) {
       break label$18
      }
      $6_1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
      label$21 : {
       label$22 : {
        $4_1 = $7_1 + -1 | 0;
        if ($7_1 & $4_1 | 0) {
         break label$22
        }
        $6_1 = $6_1 & $4_1 | 0;
        break label$21;
       }
       if ($6_1 >>> 0 < $7_1 >>> 0) {
        break label$21
       }
       $6_1 = ($6_1 >>> 0) % ($7_1 >>> 0) | 0;
      }
      $6_1 = (HEAP32[$1_1 >> 2] | 0) + ($6_1 << 2 | 0) | 0;
      break label$19;
     }
     HEAP32[$2_1 >> 2] = HEAP32[$6_1 >> 2] | 0;
    }
    HEAP32[$6_1 >> 2] = $2_1;
   }
   $7_1 = 1;
   HEAP32[($1_1 + 12 | 0) >> 2] = (HEAP32[($1_1 + 12 | 0) >> 2] | 0) + 1 | 0;
  }
  HEAP8[($0_1 + 4 | 0) >> 0] = $7_1;
  HEAP32[$0_1 >> 2] = $2_1;
 }
 
 function $59($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $6_1 = 0, $5_1 = 0, $8_1 = 0, $9_1 = 0, $11_1 = Math_fround(0), $12_1 = Math_fround(0), $10_1 = 0;
  $5_1 = HEAP32[$2_1 >> 2] | 0;
  $2_1 = Math_imul($5_1, 1540483477);
  $2_1 = Math_imul(($2_1 >>> 24 | 0) ^ $2_1 | 0, 1540483477) ^ 1866966612 | 0;
  $2_1 = Math_imul(($2_1 >>> 13 | 0) ^ $2_1 | 0, 1540483477);
  $6_1 = ($2_1 >>> 15 | 0) ^ $2_1 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     if ($7_1) {
      break label$3
     }
     break label$2;
    }
    label$4 : {
     label$5 : {
      $8_1 = __wasm_popcnt_i32($7_1 | 0) | 0;
      if ($8_1 >>> 0 < 2 >>> 0) {
       break label$5
      }
      $9_1 = $6_1;
      label$6 : {
       if ($6_1 >>> 0 < $7_1 >>> 0) {
        break label$6
       }
       $9_1 = ($6_1 >>> 0) % ($7_1 >>> 0) | 0;
      }
      $2_1 = HEAP32[((HEAP32[$1_1 >> 2] | 0) + ($9_1 << 2 | 0) | 0) >> 2] | 0;
      if (!$2_1) {
       break label$2
      }
      if ($8_1 >>> 0 <= 1 >>> 0) {
       break label$4
      }
      label$7 : while (1) {
       $2_1 = HEAP32[$2_1 >> 2] | 0;
       if (!$2_1) {
        break label$2
       }
       label$8 : {
        $8_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
        if (($8_1 | 0) == ($6_1 | 0)) {
         break label$8
        }
        label$9 : {
         if ($8_1 >>> 0 < $7_1 >>> 0) {
          break label$9
         }
         $8_1 = ($8_1 >>> 0) % ($7_1 >>> 0) | 0;
        }
        if (($8_1 | 0) != ($9_1 | 0)) {
         break label$2
        }
       }
       if ((HEAP32[($2_1 + 8 | 0) >> 2] | 0 | 0) != ($5_1 | 0)) {
        continue label$7
       }
       break label$7;
      };
      $7_1 = 0;
      break label$1;
     }
     $9_1 = $6_1 & ($7_1 + -1 | 0) | 0;
     $2_1 = HEAP32[((HEAP32[$1_1 >> 2] | 0) + ($9_1 << 2 | 0) | 0) >> 2] | 0;
     if (!$2_1) {
      break label$2
     }
    }
    $10_1 = $7_1 + -1 | 0;
    label$10 : while (1) {
     $2_1 = HEAP32[$2_1 >> 2] | 0;
     if (!$2_1) {
      break label$2
     }
     label$11 : {
      $8_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
      if (($8_1 | 0) == ($6_1 | 0)) {
       break label$11
      }
      if (($8_1 & $10_1 | 0 | 0) != ($9_1 | 0)) {
       break label$2
      }
     }
     if ((HEAP32[($2_1 + 8 | 0) >> 2] | 0 | 0) != ($5_1 | 0)) {
      continue label$10
     }
     break label$10;
    };
    $7_1 = 0;
    break label$1;
   }
   $2_1 = $2030(16 | 0) | 0;
   HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[$3_1 >> 2] | 0;
   $5_1 = HEAP32[$4_1 >> 2] | 0;
   HEAP32[($2_1 + 4 | 0) >> 2] = $6_1;
   HEAP32[($2_1 + 12 | 0) >> 2] = $5_1;
   HEAP32[$2_1 >> 2] = 0;
   $11_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
   $12_1 = Math_fround(((HEAP32[($1_1 + 12 | 0) >> 2] | 0) + 1 | 0) >>> 0);
   label$12 : {
    label$13 : {
     if (!$7_1) {
      break label$13
     }
     if (Math_fround($11_1 * Math_fround($7_1 >>> 0)) < $12_1 ^ 1 | 0) {
      break label$12
     }
    }
    $7_1 = $7_1 << 1 | 0 | ($7_1 >>> 0 < 3 >>> 0 | ($7_1 & ($7_1 + -1 | 0) | 0 | 0) != (0 | 0) | 0) | 0;
    label$14 : {
     label$15 : {
      $11_1 = Math_fround(Math_ceil(Math_fround($12_1 / $11_1)));
      if (!($11_1 < Math_fround(4294967296.0) & $11_1 >= Math_fround(0.0) | 0)) {
       break label$15
      }
      $5_1 = ~~$11_1 >>> 0;
      break label$14;
     }
     $5_1 = 0;
    }
    $66($1_1 | 0, ($7_1 >>> 0 < $5_1 >>> 0 ? $5_1 : $7_1) | 0);
    label$16 : {
     $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     if ($7_1 & ($7_1 + -1 | 0) | 0) {
      break label$16
     }
     $9_1 = ($7_1 + -1 | 0) & $6_1 | 0;
     break label$12;
    }
    label$17 : {
     if ($6_1 >>> 0 >= $7_1 >>> 0) {
      break label$17
     }
     $9_1 = $6_1;
     break label$12;
    }
    $9_1 = ($6_1 >>> 0) % ($7_1 >>> 0) | 0;
   }
   label$18 : {
    label$19 : {
     label$20 : {
      $5_1 = (HEAP32[$1_1 >> 2] | 0) + ($9_1 << 2 | 0) | 0;
      $6_1 = HEAP32[$5_1 >> 2] | 0;
      if ($6_1) {
       break label$20
      }
      HEAP32[$2_1 >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
      HEAP32[($1_1 + 8 | 0) >> 2] = $2_1;
      HEAP32[$5_1 >> 2] = $1_1 + 8 | 0;
      $6_1 = HEAP32[$2_1 >> 2] | 0;
      if (!$6_1) {
       break label$18
      }
      $6_1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
      label$21 : {
       label$22 : {
        $5_1 = $7_1 + -1 | 0;
        if ($7_1 & $5_1 | 0) {
         break label$22
        }
        $6_1 = $6_1 & $5_1 | 0;
        break label$21;
       }
       if ($6_1 >>> 0 < $7_1 >>> 0) {
        break label$21
       }
       $6_1 = ($6_1 >>> 0) % ($7_1 >>> 0) | 0;
      }
      $6_1 = (HEAP32[$1_1 >> 2] | 0) + ($6_1 << 2 | 0) | 0;
      break label$19;
     }
     HEAP32[$2_1 >> 2] = HEAP32[$6_1 >> 2] | 0;
    }
    HEAP32[$6_1 >> 2] = $2_1;
   }
   $7_1 = 1;
   HEAP32[($1_1 + 12 | 0) >> 2] = (HEAP32[($1_1 + 12 | 0) >> 2] | 0) + 1 | 0;
  }
  HEAP8[($0_1 + 4 | 0) >> 0] = $7_1;
  HEAP32[$0_1 >> 2] = $2_1;
 }
 
 function $60($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $31_1 = Math_fround(0), $3_1 = Math_fround(0), $4_1 = Math_fround(0), $9_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $13_1 = Math_fround(0), $30_1 = Math_fround(0), $2_1 = Math_fround(0), $5_1 = Math_fround(0), $10_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $23_1 = Math_fround(0), $17_1 = Math_fround(0), $20_1 = Math_fround(0), $21_1 = Math_fround(0), $24_1 = Math_fround(0), $25_1 = Math_fround(0), $27_1 = Math_fround(0), $6_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $22_1 = Math_fround(0), $26_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = Math_fround(0), $32_1 = Math_fround(0), $33_1 = Math_fround(0), $34_1 = Math_fround(0);
  $2_1 = Math_fround(HEAPF32[($1_1 + 40 | 0) >> 2]);
  $3_1 = Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]);
  $4_1 = Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]);
  $5_1 = Math_fround(HEAPF32[($1_1 + 36 | 0) >> 2]);
  $6_1 = Math_fround(Math_fround($2_1 * $3_1) - Math_fround($4_1 * $5_1));
  $7_1 = Math_fround(HEAPF32[$1_1 >> 2]);
  $8_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
  $9_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
  $10_1 = Math_fround(HEAPF32[($1_1 + 32 | 0) >> 2]);
  $11_1 = Math_fround(Math_fround($2_1 * $9_1) - Math_fround($4_1 * $10_1));
  $12_1 = Math_fround(Math_fround($5_1 * $9_1) - Math_fround($3_1 * $10_1));
  $13_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
  $14_1 = Math_fround(HEAPF32[($1_1 + 28 | 0) >> 2]);
  $15_1 = Math_fround(HEAPF32[($1_1 + 56 | 0) >> 2]);
  $16_1 = Math_fround(HEAPF32[($1_1 + 52 | 0) >> 2]);
  $17_1 = Math_fround(Math_fround($15_1 * $5_1) - Math_fround($2_1 * $16_1));
  $18_1 = Math_fround(HEAPF32[($1_1 + 60 | 0) >> 2]);
  $19_1 = Math_fround(HEAPF32[($1_1 + 44 | 0) >> 2]);
  $20_1 = Math_fround(Math_fround($2_1 * $18_1) - Math_fround($15_1 * $19_1));
  $21_1 = Math_fround(Math_fround($18_1 * $5_1) - Math_fround($19_1 * $16_1));
  $22_1 = Math_fround(Math_fround($14_1 * $17_1) + Math_fround(Math_fround($20_1 * $3_1) - Math_fround($4_1 * $21_1)));
  $23_1 = Math_fround(HEAPF32[($1_1 + 48 | 0) >> 2]);
  $24_1 = Math_fround(Math_fround($15_1 * $10_1) - Math_fround($2_1 * $23_1));
  $25_1 = Math_fround(Math_fround($18_1 * $10_1) - Math_fround($19_1 * $23_1));
  $26_1 = Math_fround(Math_fround($14_1 * $24_1) + Math_fround(Math_fround($20_1 * $9_1) - Math_fround($4_1 * $25_1)));
  $27_1 = Math_fround(Math_fround($16_1 * $10_1) - Math_fround($5_1 * $23_1));
  $28_1 = Math_fround(Math_fround($14_1 * $27_1) + Math_fround(Math_fround($21_1 * $9_1) - Math_fround($3_1 * $25_1)));
  $29_1 = Math_fround(Math_fround($4_1 * $27_1) + Math_fround(Math_fround($17_1 * $9_1) - Math_fround($3_1 * $24_1)));
  $30_1 = Math_fround(HEAPF32[($1_1 + 12 | 0) >> 2]);
  $31_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_fround(Math_fround($7_1 * $22_1) - Math_fround($26_1 * $8_1)) + Math_fround(Math_fround($28_1 * $13_1) - Math_fround($29_1 * $30_1))));
  HEAPF32[($0_1 + 60 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($6_1 * $7_1) - Math_fround($8_1 * $11_1)) + Math_fround($12_1 * $13_1)) * $31_1);
  $32_1 = Math_fround(Math_fround($15_1 * $3_1) - Math_fround($4_1 * $16_1));
  $33_1 = Math_fround(Math_fround($15_1 * $9_1) - Math_fround($4_1 * $23_1));
  $34_1 = Math_fround(Math_fround($16_1 * $9_1) - Math_fround($3_1 * $23_1));
  HEAPF32[($0_1 + 56 | 0) >> 2] = Math_fround($31_1 * Math_fround(-Math_fround(Math_fround(Math_fround($7_1 * $32_1) - Math_fround($8_1 * $33_1)) + Math_fround($13_1 * $34_1))));
  HEAPF32[($0_1 + 52 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($17_1 * $7_1) - Math_fround($24_1 * $8_1)) + Math_fround($27_1 * $13_1)) * $31_1);
  HEAPF32[($0_1 + 48 | 0) >> 2] = Math_fround($31_1 * Math_fround(-$29_1));
  $5_1 = Math_fround(Math_fround($19_1 * $3_1) - Math_fround($14_1 * $5_1));
  $10_1 = Math_fround(Math_fround($19_1 * $9_1) - Math_fround($14_1 * $10_1));
  HEAPF32[($0_1 + 44 | 0) >> 2] = Math_fround($31_1 * Math_fround(-Math_fround(Math_fround(Math_fround($7_1 * $5_1) - Math_fround($8_1 * $10_1)) + Math_fround($12_1 * $30_1))));
  $3_1 = Math_fround(Math_fround($18_1 * $3_1) - Math_fround($14_1 * $16_1));
  $9_1 = Math_fround(Math_fround($18_1 * $9_1) - Math_fround($14_1 * $23_1));
  HEAPF32[($0_1 + 40 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($7_1 * $3_1) - Math_fround($8_1 * $9_1)) + Math_fround($34_1 * $30_1)) * $31_1);
  HEAPF32[($0_1 + 36 | 0) >> 2] = Math_fround($31_1 * Math_fround(-Math_fround(Math_fround(Math_fround($21_1 * $7_1) - Math_fround($25_1 * $8_1)) + Math_fround($27_1 * $30_1))));
  HEAPF32[($0_1 + 32 | 0) >> 2] = Math_fround($28_1 * $31_1);
  $2_1 = Math_fround(Math_fround($19_1 * $4_1) - Math_fround($2_1 * $14_1));
  HEAPF32[($0_1 + 28 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($7_1 * $2_1) - Math_fround($10_1 * $13_1)) + Math_fround($11_1 * $30_1)) * $31_1);
  $4_1 = Math_fround(Math_fround($18_1 * $4_1) - Math_fround($15_1 * $14_1));
  HEAPF32[($0_1 + 24 | 0) >> 2] = Math_fround($31_1 * Math_fround(-Math_fround(Math_fround(Math_fround($7_1 * $4_1) - Math_fround($9_1 * $13_1)) + Math_fround($33_1 * $30_1))));
  HEAPF32[($0_1 + 20 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($20_1 * $7_1) - Math_fround($25_1 * $13_1)) + Math_fround($24_1 * $30_1)) * $31_1);
  HEAPF32[($0_1 + 16 | 0) >> 2] = Math_fround($31_1 * Math_fround(-$26_1));
  HEAPF32[($0_1 + 12 | 0) >> 2] = Math_fround($31_1 * Math_fround(-Math_fround(Math_fround(Math_fround($2_1 * $8_1) - Math_fround($5_1 * $13_1)) + Math_fround($6_1 * $30_1))));
  HEAPF32[($0_1 + 8 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($4_1 * $8_1) - Math_fround($3_1 * $13_1)) + Math_fround($32_1 * $30_1)) * $31_1);
  HEAPF32[($0_1 + 4 | 0) >> 2] = Math_fround($31_1 * Math_fround(-Math_fround(Math_fround(Math_fround($20_1 * $8_1) - Math_fround($21_1 * $13_1)) + Math_fround($17_1 * $30_1))));
  HEAPF32[$0_1 >> 2] = Math_fround($22_1 * $31_1);
 }
 
 function $61($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0, $3_1 = 0, $5_1 = 0, $2_1 = 0, $7_1 = 0;
  $2_1 = 0;
  label$1 : {
   $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (!$3_1) {
    break label$1
   }
   $4_1 = Math_imul($1_1, 1540483477);
   $4_1 = Math_imul(($4_1 >>> 24 | 0) ^ $4_1 | 0, 1540483477) ^ 1866966612 | 0;
   $4_1 = Math_imul(($4_1 >>> 13 | 0) ^ $4_1 | 0, 1540483477);
   $5_1 = ($4_1 >>> 15 | 0) ^ $4_1 | 0;
   label$2 : {
    label$3 : {
     $6_1 = __wasm_popcnt_i32($3_1 | 0) | 0;
     if ($6_1 >>> 0 > 1 >>> 0) {
      break label$3
     }
     $7_1 = ($3_1 + -1 | 0) & $5_1 | 0;
     break label$2;
    }
    $7_1 = $5_1;
    if ($5_1 >>> 0 < $3_1 >>> 0) {
     break label$2
    }
    $7_1 = ($5_1 >>> 0) % ($3_1 >>> 0) | 0;
   }
   $4_1 = HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + ($7_1 << 2 | 0) | 0) >> 2] | 0;
   if (!$4_1) {
    break label$1
   }
   $4_1 = HEAP32[$4_1 >> 2] | 0;
   if (!$4_1) {
    break label$1
   }
   label$4 : {
    label$5 : {
     if ($6_1 >>> 0 > 1 >>> 0) {
      break label$5
     }
     $3_1 = $3_1 + -1 | 0;
     label$6 : while (1) {
      label$7 : {
       label$8 : {
        $6_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
        if (($5_1 | 0) == ($6_1 | 0)) {
         break label$8
        }
        if (($6_1 & $3_1 | 0 | 0) != ($7_1 | 0)) {
         break label$1
        }
        break label$7;
       }
       if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
        break label$4
       }
      }
      $4_1 = HEAP32[$4_1 >> 2] | 0;
      if ($4_1) {
       continue label$6
      }
      break label$1;
     };
    }
    label$9 : while (1) {
     label$10 : {
      label$11 : {
       $6_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
       if (($5_1 | 0) == ($6_1 | 0)) {
        break label$11
       }
       label$12 : {
        if ($6_1 >>> 0 < $3_1 >>> 0) {
         break label$12
        }
        $6_1 = ($6_1 >>> 0) % ($3_1 >>> 0) | 0;
       }
       if (($6_1 | 0) != ($7_1 | 0)) {
        break label$1
       }
       break label$10;
      }
      if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
       break label$4
      }
     }
     $4_1 = HEAP32[$4_1 >> 2] | 0;
     if ($4_1) {
      continue label$9
     }
     break label$1;
    };
   }
   $2_1 = $4_1;
  }
  $4_1 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + 88 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 72 | 0) >> 2] | 0 | 0]($4_1);
  label$13 : {
   if (!(HEAP32[($2_1 + 12 | 0) >> 2] | 0)) {
    break label$13
   }
   $422(HEAP32[($2_1 + 24 | 0) >> 2] | 0 | 0);
   fimport$15(4 | 0, HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0, 5125 | 0, 0 | 0);
   label$14 : {
    if (!($458() | 0)) {
     break label$14
    }
    fimport$16();
   }
   $434(HEAP32[($2_1 + 24 | 0) >> 2] | 0 | 0);
  }
 }
 
 function $62($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0, $3_1 = 0, $5_1 = 0, $2_1 = 0, $7_1 = 0;
  $2_1 = 0;
  label$1 : {
   $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (!$3_1) {
    break label$1
   }
   $4_1 = Math_imul($1_1, 1540483477);
   $4_1 = Math_imul(($4_1 >>> 24 | 0) ^ $4_1 | 0, 1540483477) ^ 1866966612 | 0;
   $4_1 = Math_imul(($4_1 >>> 13 | 0) ^ $4_1 | 0, 1540483477);
   $5_1 = ($4_1 >>> 15 | 0) ^ $4_1 | 0;
   label$2 : {
    label$3 : {
     $6_1 = __wasm_popcnt_i32($3_1 | 0) | 0;
     if ($6_1 >>> 0 > 1 >>> 0) {
      break label$3
     }
     $7_1 = ($3_1 + -1 | 0) & $5_1 | 0;
     break label$2;
    }
    $7_1 = $5_1;
    if ($5_1 >>> 0 < $3_1 >>> 0) {
     break label$2
    }
    $7_1 = ($5_1 >>> 0) % ($3_1 >>> 0) | 0;
   }
   $4_1 = HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + ($7_1 << 2 | 0) | 0) >> 2] | 0;
   if (!$4_1) {
    break label$1
   }
   $4_1 = HEAP32[$4_1 >> 2] | 0;
   if (!$4_1) {
    break label$1
   }
   label$4 : {
    label$5 : {
     if ($6_1 >>> 0 > 1 >>> 0) {
      break label$5
     }
     $3_1 = $3_1 + -1 | 0;
     label$6 : while (1) {
      label$7 : {
       label$8 : {
        $6_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
        if (($5_1 | 0) == ($6_1 | 0)) {
         break label$8
        }
        if (($6_1 & $3_1 | 0 | 0) != ($7_1 | 0)) {
         break label$1
        }
        break label$7;
       }
       if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
        break label$4
       }
      }
      $4_1 = HEAP32[$4_1 >> 2] | 0;
      if ($4_1) {
       continue label$6
      }
      break label$1;
     };
    }
    label$9 : while (1) {
     label$10 : {
      label$11 : {
       $6_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
       if (($5_1 | 0) == ($6_1 | 0)) {
        break label$11
       }
       label$12 : {
        if ($6_1 >>> 0 < $3_1 >>> 0) {
         break label$12
        }
        $6_1 = ($6_1 >>> 0) % ($3_1 >>> 0) | 0;
       }
       if (($6_1 | 0) != ($7_1 | 0)) {
        break label$1
       }
       break label$10;
      }
      if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
       break label$4
      }
     }
     $4_1 = HEAP32[$4_1 >> 2] | 0;
     if ($4_1) {
      continue label$9
     }
     break label$1;
    };
   }
   $2_1 = $4_1;
  }
  $4_1 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + 88 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 72 | 0) >> 2] | 0 | 0]($4_1);
  label$13 : {
   if (!(HEAP32[($2_1 + 16 | 0) >> 2] | 0)) {
    break label$13
   }
   $422(HEAP32[($2_1 + 28 | 0) >> 2] | 0 | 0);
   $405(1 | 0, Math_fround(Math_fround(.10000000149011612)), Math_fround(Math_fround(5.0)));
   fimport$15(4 | 0, HEAP32[($2_1 + 16 | 0) >> 2] | 0 | 0, 5125 | 0, 0 | 0);
   label$14 : {
    if (!($458() | 0)) {
     break label$14
    }
    fimport$16();
   }
   $405(0 | 0, Math_fround(Math_fround(.10000000149011612)), Math_fround(Math_fround(5.0)));
   $434(HEAP32[($2_1 + 28 | 0) >> 2] | 0 | 0);
  }
 }
 
 function $63($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $64($0_1) {
  $0_1 = $0_1 | 0;
  $2032($0_1 | 0);
 }
 
 function $65($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = Math_fround(0), $2_1 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $51_1 = Math_fround(0), $58_1 = Math_fround(0);
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
  $4_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
  $5_1 = Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]);
  $6_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
  $7_1 = Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]);
  $8_1 = Math_fround(HEAPF32[($1_1 + 12 | 0) >> 2]);
  HEAPF32[($2_1 + 8 | 0) >> 2] = Math_fround(Math_fround($7_1 + $8_1) * Math_fround(.5));
  HEAPF32[($2_1 + 4 | 0) >> 2] = Math_fround(Math_fround($5_1 + $4_1) * Math_fround(.5));
  HEAPF32[$2_1 >> 2] = Math_fround(Math_fround($3_1 + $6_1) * Math_fround(.5));
  $3_1 = Math_fround($3_1 - $6_1);
  $51_1 = Math_fround($3_1 * $3_1);
  $3_1 = Math_fround($5_1 - $4_1);
  $58_1 = Math_fround($51_1 + Math_fround($3_1 * $3_1));
  $3_1 = Math_fround($7_1 - $8_1);
  $534($0_1 | 0, $2_1 | 0, Math_fround(Math_fround(Math_fround(Math_sqrt(Math_fround($58_1 + Math_fround($3_1 * $3_1)))) * Math_fround(.5)))) | 0;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $66($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $5_1 = Math_fround(0), $3_1 = 0;
  $2_1 = 2;
  label$1 : {
   if (($1_1 | 0) == (1 | 0)) {
    break label$1
   }
   label$2 : {
    if ($1_1 & ($1_1 + -1 | 0) | 0) {
     break label$2
    }
    $2_1 = $1_1;
    break label$1;
   }
   $2_1 = $700($1_1 | 0) | 0;
  }
  label$3 : {
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if ($2_1 >>> 0 <= $1_1 >>> 0) {
    break label$3
   }
   $67($0_1 | 0, $2_1 | 0);
   return;
  }
  label$4 : {
   if ($2_1 >>> 0 >= $1_1 >>> 0) {
    break label$4
   }
   $3_1 = $1_1 >>> 0 < 3 >>> 0;
   label$5 : {
    label$6 : {
     $5_1 = Math_fround(Math_ceil(Math_fround(Math_fround((HEAP32[($0_1 + 12 | 0) >> 2] | 0) >>> 0) / Math_fround(HEAPF32[($0_1 + 16 | 0) >> 2]))));
     if (!($5_1 < Math_fround(4294967296.0) & $5_1 >= Math_fround(0.0) | 0)) {
      break label$6
     }
     $4_1 = ~~$5_1 >>> 0;
     break label$5;
    }
    $4_1 = 0;
   }
   label$7 : {
    label$8 : {
     if ($3_1) {
      break label$8
     }
     if ((__wasm_popcnt_i32($1_1 | 0) | 0) >>> 0 > 1 >>> 0) {
      break label$8
     }
     $4_1 = $4_1 >>> 0 < 2 >>> 0 ? $4_1 : 1 << (32 - Math_clz32($4_1 + -1 | 0) | 0) | 0;
     break label$7;
    }
    $4_1 = $700($4_1 | 0) | 0;
   }
   $2_1 = $2_1 >>> 0 < $4_1 >>> 0 ? $4_1 : $2_1;
   if ($2_1 >>> 0 >= $1_1 >>> 0) {
    break label$4
   }
   $67($0_1 | 0, $2_1 | 0);
  }
 }
 
 function $67($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $7_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $8_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!$1_1) {
      break label$3
     }
     if ($1_1 >>> 0 >= 1073741824 >>> 0) {
      break label$1
     }
     $2_1 = $2030($1_1 << 2 | 0 | 0) | 0;
     $3_1 = HEAP32[$0_1 >> 2] | 0;
     HEAP32[$0_1 >> 2] = $2_1;
     label$4 : {
      if (!$3_1) {
       break label$4
      }
      $2032($3_1 | 0);
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
     $2_1 = $1_1 >>> 0 > 1 >>> 0 ? $1_1 : 1;
     $3_1 = 0;
     label$5 : while (1) {
      HEAP32[((HEAP32[$0_1 >> 2] | 0) + ($3_1 << 2 | 0) | 0) >> 2] = 0;
      $3_1 = $3_1 + 1 | 0;
      if (($3_1 | 0) != ($2_1 | 0)) {
       continue label$5
      }
      break label$5;
     };
     $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     if (!$4_1) {
      break label$2
     }
     $3_1 = $0_1 + 8 | 0;
     $5_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
     label$6 : {
      label$7 : {
       $2_1 = __wasm_popcnt_i32($1_1 | 0) | 0;
       if ($2_1 >>> 0 > 1 >>> 0) {
        break label$7
       }
       $5_1 = $5_1 & ($1_1 + -1 | 0) | 0;
       break label$6;
      }
      if ($5_1 >>> 0 < $1_1 >>> 0) {
       break label$6
      }
      $5_1 = ($5_1 >>> 0) % ($1_1 >>> 0) | 0;
     }
     HEAP32[((HEAP32[$0_1 >> 2] | 0) + ($5_1 << 2 | 0) | 0) >> 2] = $3_1;
     $3_1 = HEAP32[$4_1 >> 2] | 0;
     if (!$3_1) {
      break label$2
     }
     label$8 : {
      if ($2_1 >>> 0 > 1 >>> 0) {
       break label$8
      }
      $6_1 = $1_1 + -1 | 0;
      label$9 : while (1) {
       label$10 : {
        label$11 : {
         $7_1 = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) & $6_1 | 0;
         if (($7_1 | 0) != ($5_1 | 0)) {
          break label$11
         }
         $4_1 = $3_1;
         break label$10;
        }
        $2_1 = $3_1;
        label$12 : {
         $1_1 = $7_1 << 2 | 0;
         $8_1 = (HEAP32[$0_1 >> 2] | 0) + $1_1 | 0;
         if (!(HEAP32[$8_1 >> 2] | 0)) {
          break label$12
         }
         label$13 : {
          label$14 : while (1) {
           $7_1 = $2_1;
           $2_1 = HEAP32[$2_1 >> 2] | 0;
           if (!$2_1) {
            break label$13
           }
           if ((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) == (HEAP32[($2_1 + 8 | 0) >> 2] | 0 | 0)) {
            continue label$14
           }
           break label$14;
          };
         }
         HEAP32[$4_1 >> 2] = $2_1;
         HEAP32[$7_1 >> 2] = HEAP32[(HEAP32[((HEAP32[$0_1 >> 2] | 0) + $1_1 | 0) >> 2] | 0) >> 2] | 0;
         HEAP32[(HEAP32[((HEAP32[$0_1 >> 2] | 0) + $1_1 | 0) >> 2] | 0) >> 2] = $3_1;
         break label$10;
        }
        HEAP32[$8_1 >> 2] = $4_1;
        $4_1 = $3_1;
        $5_1 = $7_1;
       }
       $3_1 = HEAP32[$4_1 >> 2] | 0;
       if ($3_1) {
        continue label$9
       }
       break label$2;
      };
     }
     label$15 : while (1) {
      label$16 : {
       $7_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
       if ($7_1 >>> 0 < $1_1 >>> 0) {
        break label$16
       }
       $7_1 = ($7_1 >>> 0) % ($1_1 >>> 0) | 0;
      }
      label$17 : {
       label$18 : {
        if (($7_1 | 0) != ($5_1 | 0)) {
         break label$18
        }
        $4_1 = $3_1;
        break label$17;
       }
       $2_1 = $3_1;
       label$19 : {
        $6_1 = $7_1 << 2 | 0;
        $8_1 = (HEAP32[$0_1 >> 2] | 0) + $6_1 | 0;
        if (HEAP32[$8_1 >> 2] | 0) {
         break label$19
        }
        HEAP32[$8_1 >> 2] = $4_1;
        $4_1 = $3_1;
        $5_1 = $7_1;
        break label$17;
       }
       label$20 : {
        label$21 : while (1) {
         $7_1 = $2_1;
         $2_1 = HEAP32[$2_1 >> 2] | 0;
         if (!$2_1) {
          break label$20
         }
         if ((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) == (HEAP32[($2_1 + 8 | 0) >> 2] | 0 | 0)) {
          continue label$21
         }
         break label$21;
        };
       }
       HEAP32[$4_1 >> 2] = $2_1;
       HEAP32[$7_1 >> 2] = HEAP32[(HEAP32[((HEAP32[$0_1 >> 2] | 0) + $6_1 | 0) >> 2] | 0) >> 2] | 0;
       HEAP32[(HEAP32[((HEAP32[$0_1 >> 2] | 0) + $6_1 | 0) >> 2] | 0) >> 2] = $3_1;
      }
      $3_1 = HEAP32[$4_1 >> 2] | 0;
      if ($3_1) {
       continue label$15
      }
      break label$2;
     };
    }
    $3_1 = HEAP32[$0_1 >> 2] | 0;
    HEAP32[$0_1 >> 2] = 0;
    label$22 : {
     if (!$3_1) {
      break label$22
     }
     $2032($3_1 | 0);
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = 0;
   }
   return;
  }
  $3(global$1 + 1300 | 0 | 0);
  abort();
 }
 
 function $68($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $5_1 = Math_fround(0), $3_1 = 0;
  $2_1 = 2;
  label$1 : {
   if (($1_1 | 0) == (1 | 0)) {
    break label$1
   }
   label$2 : {
    if ($1_1 & ($1_1 + -1 | 0) | 0) {
     break label$2
    }
    $2_1 = $1_1;
    break label$1;
   }
   $2_1 = $700($1_1 | 0) | 0;
  }
  label$3 : {
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if ($2_1 >>> 0 <= $1_1 >>> 0) {
    break label$3
   }
   $69($0_1 | 0, $2_1 | 0);
   return;
  }
  label$4 : {
   if ($2_1 >>> 0 >= $1_1 >>> 0) {
    break label$4
   }
   $3_1 = $1_1 >>> 0 < 3 >>> 0;
   label$5 : {
    label$6 : {
     $5_1 = Math_fround(Math_ceil(Math_fround(Math_fround((HEAP32[($0_1 + 12 | 0) >> 2] | 0) >>> 0) / Math_fround(HEAPF32[($0_1 + 16 | 0) >> 2]))));
     if (!($5_1 < Math_fround(4294967296.0) & $5_1 >= Math_fround(0.0) | 0)) {
      break label$6
     }
     $4_1 = ~~$5_1 >>> 0;
     break label$5;
    }
    $4_1 = 0;
   }
   label$7 : {
    label$8 : {
     if ($3_1) {
      break label$8
     }
     if ((__wasm_popcnt_i32($1_1 | 0) | 0) >>> 0 > 1 >>> 0) {
      break label$8
     }
     $4_1 = $4_1 >>> 0 < 2 >>> 0 ? $4_1 : 1 << (32 - Math_clz32($4_1 + -1 | 0) | 0) | 0;
     break label$7;
    }
    $4_1 = $700($4_1 | 0) | 0;
   }
   $2_1 = $2_1 >>> 0 < $4_1 >>> 0 ? $4_1 : $2_1;
   if ($2_1 >>> 0 >= $1_1 >>> 0) {
    break label$4
   }
   $69($0_1 | 0, $2_1 | 0);
  }
 }
 
 function $69($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $7_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $8_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!$1_1) {
      break label$3
     }
     if ($1_1 >>> 0 >= 1073741824 >>> 0) {
      break label$1
     }
     $2_1 = $2030($1_1 << 2 | 0 | 0) | 0;
     $3_1 = HEAP32[$0_1 >> 2] | 0;
     HEAP32[$0_1 >> 2] = $2_1;
     label$4 : {
      if (!$3_1) {
       break label$4
      }
      $2032($3_1 | 0);
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
     $2_1 = $1_1 >>> 0 > 1 >>> 0 ? $1_1 : 1;
     $3_1 = 0;
     label$5 : while (1) {
      HEAP32[((HEAP32[$0_1 >> 2] | 0) + ($3_1 << 2 | 0) | 0) >> 2] = 0;
      $3_1 = $3_1 + 1 | 0;
      if (($3_1 | 0) != ($2_1 | 0)) {
       continue label$5
      }
      break label$5;
     };
     $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     if (!$4_1) {
      break label$2
     }
     $3_1 = $0_1 + 8 | 0;
     $5_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
     label$6 : {
      label$7 : {
       $2_1 = __wasm_popcnt_i32($1_1 | 0) | 0;
       if ($2_1 >>> 0 > 1 >>> 0) {
        break label$7
       }
       $5_1 = $5_1 & ($1_1 + -1 | 0) | 0;
       break label$6;
      }
      if ($5_1 >>> 0 < $1_1 >>> 0) {
       break label$6
      }
      $5_1 = ($5_1 >>> 0) % ($1_1 >>> 0) | 0;
     }
     HEAP32[((HEAP32[$0_1 >> 2] | 0) + ($5_1 << 2 | 0) | 0) >> 2] = $3_1;
     $3_1 = HEAP32[$4_1 >> 2] | 0;
     if (!$3_1) {
      break label$2
     }
     label$8 : {
      if ($2_1 >>> 0 > 1 >>> 0) {
       break label$8
      }
      $6_1 = $1_1 + -1 | 0;
      label$9 : while (1) {
       label$10 : {
        label$11 : {
         $7_1 = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) & $6_1 | 0;
         if (($7_1 | 0) != ($5_1 | 0)) {
          break label$11
         }
         $4_1 = $3_1;
         break label$10;
        }
        $2_1 = $3_1;
        label$12 : {
         $1_1 = $7_1 << 2 | 0;
         $8_1 = (HEAP32[$0_1 >> 2] | 0) + $1_1 | 0;
         if (!(HEAP32[$8_1 >> 2] | 0)) {
          break label$12
         }
         label$13 : {
          label$14 : while (1) {
           $7_1 = $2_1;
           $2_1 = HEAP32[$2_1 >> 2] | 0;
           if (!$2_1) {
            break label$13
           }
           if ((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) == (HEAP32[($2_1 + 8 | 0) >> 2] | 0 | 0)) {
            continue label$14
           }
           break label$14;
          };
         }
         HEAP32[$4_1 >> 2] = $2_1;
         HEAP32[$7_1 >> 2] = HEAP32[(HEAP32[((HEAP32[$0_1 >> 2] | 0) + $1_1 | 0) >> 2] | 0) >> 2] | 0;
         HEAP32[(HEAP32[((HEAP32[$0_1 >> 2] | 0) + $1_1 | 0) >> 2] | 0) >> 2] = $3_1;
         break label$10;
        }
        HEAP32[$8_1 >> 2] = $4_1;
        $4_1 = $3_1;
        $5_1 = $7_1;
       }
       $3_1 = HEAP32[$4_1 >> 2] | 0;
       if ($3_1) {
        continue label$9
       }
       break label$2;
      };
     }
     label$15 : while (1) {
      label$16 : {
       $7_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
       if ($7_1 >>> 0 < $1_1 >>> 0) {
        break label$16
       }
       $7_1 = ($7_1 >>> 0) % ($1_1 >>> 0) | 0;
      }
      label$17 : {
       label$18 : {
        if (($7_1 | 0) != ($5_1 | 0)) {
         break label$18
        }
        $4_1 = $3_1;
        break label$17;
       }
       $2_1 = $3_1;
       label$19 : {
        $6_1 = $7_1 << 2 | 0;
        $8_1 = (HEAP32[$0_1 >> 2] | 0) + $6_1 | 0;
        if (HEAP32[$8_1 >> 2] | 0) {
         break label$19
        }
        HEAP32[$8_1 >> 2] = $4_1;
        $4_1 = $3_1;
        $5_1 = $7_1;
        break label$17;
       }
       label$20 : {
        label$21 : while (1) {
         $7_1 = $2_1;
         $2_1 = HEAP32[$2_1 >> 2] | 0;
         if (!$2_1) {
          break label$20
         }
         if ((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) == (HEAP32[($2_1 + 8 | 0) >> 2] | 0 | 0)) {
          continue label$21
         }
         break label$21;
        };
       }
       HEAP32[$4_1 >> 2] = $2_1;
       HEAP32[$7_1 >> 2] = HEAP32[(HEAP32[((HEAP32[$0_1 >> 2] | 0) + $6_1 | 0) >> 2] | 0) >> 2] | 0;
       HEAP32[(HEAP32[((HEAP32[$0_1 >> 2] | 0) + $6_1 | 0) >> 2] | 0) >> 2] = $3_1;
      }
      $3_1 = HEAP32[$4_1 >> 2] | 0;
      if ($3_1) {
       continue label$15
      }
      break label$2;
     };
    }
    $3_1 = HEAP32[$0_1 >> 2] | 0;
    HEAP32[$0_1 >> 2] = 0;
    label$22 : {
     if (!$3_1) {
      break label$22
     }
     $2032($3_1 | 0);
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = 0;
   }
   return;
  }
  $3(global$1 + 1300 | 0 | 0);
  abort();
 }
 
 function $70() {
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $0_1 = 0;
  $0_1 = global$1 + 24632 | 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  i64toi32_i32$1 = i64toi32_i32$1 + 12 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 32 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 44 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 40 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 52 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 60 | 0) >> 2] = 1065353216;
 }
 
 function $71($0_1) {
  $0_1 = $0_1 | 0;
  $72(global$1 + 24760 | 0 | 0) | 0;
 }
 
 function $72($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $2_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   label$2 : while (1) {
    $2_1 = HEAP32[$1_1 >> 2] | 0;
    label$3 : {
     $3_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
     if (!$3_1) {
      break label$3
     }
     HEAP32[($1_1 + 96 | 0) >> 2] = $3_1;
     $2032($3_1 | 0);
    }
    label$4 : {
     $3_1 = HEAP32[($1_1 + 80 | 0) >> 2] | 0;
     if (!$3_1) {
      break label$4
     }
     HEAP32[($1_1 + 84 | 0) >> 2] = $3_1;
     $2032($3_1 | 0);
    }
    label$5 : {
     $3_1 = HEAP32[($1_1 + 68 | 0) >> 2] | 0;
     if (!$3_1) {
      break label$5
     }
     HEAP32[($1_1 + 72 | 0) >> 2] = $3_1;
     $2032($3_1 | 0);
    }
    $2032($1_1 | 0);
    $1_1 = $2_1;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
  }
  $1_1 = HEAP32[$0_1 >> 2] | 0;
  HEAP32[$0_1 >> 2] = 0;
  label$6 : {
   if (!$1_1) {
    break label$6
   }
   $2032($1_1 | 0);
  }
  return $0_1 | 0;
 }
 
 function $73($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $3_1 = 0, $2_1 = 0, $5_1 = 0, $47_1 = 0;
  $2_1 = global$0 - 160 | 0;
  global$0 = $2_1;
  $3_1 = $2030(88 | 0) | 0;
  $2174($3_1 + 4 | 0 | 0, 0 | 0, 72 | 0) | 0;
  HEAP8[($3_1 + 76 | 0) >> 0] = 0;
  $4_1 = global$1;
  HEAP32[$3_1 >> 2] = ($4_1 + 21968 | 0) + 8 | 0;
  $5_1 = $569($3_1 + 80 | 0 | 0) | 0;
  HEAP32[($3_1 + 84 | 0) >> 2] = 0;
  HEAP32[$0_1 >> 2] = $3_1;
  HEAP32[($3_1 + 80 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    label$3 : {
     $3_1 = $74($4_1 + 24760 | 0 | 0, $5_1 | 0) | 0;
     if (!$3_1) {
      break label$3
     }
     HEAP32[((HEAP32[$0_1 >> 2] | 0) + 84 | 0) >> 2] = $3_1 + 12 | 0;
     $0_1 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + 84 | 0) >> 2] | 0;
     HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + 1 | 0;
     break label$2;
    }
    $47_1 = global$1 + 24760 | 0;
    $4_1 = (HEAP32[$0_1 >> 2] | 0) + 80 | 0;
    $1_1 = $573($2_1 + 8 | 0 | 0) | 0;
    $75($2_1 + 152 | 0 | 0, $47_1 | 0, $4_1 | 0, $4_1 | 0, $1_1 | 0);
    label$4 : {
     $4_1 = HEAP32[($1_1 + 80 | 0) >> 2] | 0;
     if (!$4_1) {
      break label$4
     }
     HEAP32[($1_1 + 84 | 0) >> 2] = $4_1;
     $2032($4_1 | 0);
    }
    label$5 : {
     $4_1 = HEAP32[($1_1 + 68 | 0) >> 2] | 0;
     if (!$4_1) {
      break label$5
     }
     HEAP32[($1_1 + 72 | 0) >> 2] = $4_1;
     $2032($4_1 | 0);
    }
    label$6 : {
     $4_1 = HEAP32[($1_1 + 56 | 0) >> 2] | 0;
     if (!$4_1) {
      break label$6
     }
     HEAP32[($1_1 + 60 | 0) >> 2] = $4_1;
     $2032($4_1 | 0);
    }
    $1_1 = $74(global$1 + 24760 | 0 | 0, (HEAP32[$0_1 >> 2] | 0) + 80 | 0 | 0) | 0;
    if (!$1_1) {
     break label$1
    }
    HEAP32[((HEAP32[$0_1 >> 2] | 0) + 84 | 0) >> 2] = $1_1 + 12 | 0;
   }
   global$0 = $2_1 + 160 | 0;
   return ($3_1 | 0) != (0 | 0) | 0;
  }
  $25(global$1 + 1962 | 0 | 0);
  abort();
 }
 
 function $74($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0, $2_1 = 0, $6_1 = 0, $3_1 = 0;
  $2_1 = $575($0_1 + 12 | 0 | 0, $1_1 | 0) | 0;
  $3_1 = 0;
  label$1 : {
   $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!$4_1) {
    break label$1
   }
   label$2 : {
    label$3 : {
     $5_1 = __wasm_popcnt_i32($4_1 | 0) | 0;
     if ($5_1 >>> 0 > 1 >>> 0) {
      break label$3
     }
     $6_1 = ($4_1 + -1 | 0) & $2_1 | 0;
     break label$2;
    }
    $6_1 = $2_1;
    if ($2_1 >>> 0 < $4_1 >>> 0) {
     break label$2
    }
    $6_1 = ($2_1 >>> 0) % ($4_1 >>> 0) | 0;
   }
   $0_1 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + ($6_1 << 2 | 0) | 0) >> 2] | 0;
   if (!$0_1) {
    break label$1
   }
   $0_1 = HEAP32[$0_1 >> 2] | 0;
   if (!$0_1) {
    break label$1
   }
   label$4 : {
    label$5 : {
     if ($5_1 >>> 0 > 1 >>> 0) {
      break label$5
     }
     $4_1 = $4_1 + -1 | 0;
     label$6 : while (1) {
      label$7 : {
       label$8 : {
        $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        if (($5_1 | 0) == ($2_1 | 0)) {
         break label$8
        }
        if (($5_1 & $4_1 | 0 | 0) != ($6_1 | 0)) {
         break label$1
        }
        break label$7;
       }
       if ($571($0_1 + 8 | 0 | 0, $1_1 | 0) | 0) {
        break label$4
       }
      }
      $0_1 = HEAP32[$0_1 >> 2] | 0;
      if ($0_1) {
       continue label$6
      }
      break label$1;
     };
    }
    label$9 : while (1) {
     label$10 : {
      label$11 : {
       $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
       if (($5_1 | 0) == ($2_1 | 0)) {
        break label$11
       }
       label$12 : {
        if ($5_1 >>> 0 < $4_1 >>> 0) {
         break label$12
        }
        $5_1 = ($5_1 >>> 0) % ($4_1 >>> 0) | 0;
       }
       if (($5_1 | 0) != ($6_1 | 0)) {
        break label$1
       }
       break label$10;
      }
      if ($571($0_1 + 8 | 0 | 0, $1_1 | 0) | 0) {
       break label$4
      }
     }
     $0_1 = HEAP32[$0_1 >> 2] | 0;
     if ($0_1) {
      continue label$9
     }
     break label$1;
    };
   }
   $3_1 = $0_1;
  }
  return $3_1 | 0;
 }
 
 function $75($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $6_1 = 0, $5_1 = 0, $9_1 = 0, $7_1 = 0, $8_1 = 0, $11_1 = Math_fround(0), $12_1 = Math_fround(0), $10_1 = 0;
  $5_1 = $575($1_1 + 12 | 0 | 0, $2_1 | 0) | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $6_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     if ($6_1) {
      break label$3
     }
     break label$2;
    }
    label$4 : {
     label$5 : {
      $7_1 = __wasm_popcnt_i32($6_1 | 0) | 0;
      if ($7_1 >>> 0 < 2 >>> 0) {
       break label$5
      }
      $8_1 = $5_1;
      label$6 : {
       if ($5_1 >>> 0 < $6_1 >>> 0) {
        break label$6
       }
       $8_1 = ($5_1 >>> 0) % ($6_1 >>> 0) | 0;
      }
      $9_1 = HEAP32[((HEAP32[$1_1 >> 2] | 0) + ($8_1 << 2 | 0) | 0) >> 2] | 0;
      if (!$9_1) {
       break label$2
      }
      if ($7_1 >>> 0 <= 1 >>> 0) {
       break label$4
      }
      label$7 : while (1) {
       $9_1 = HEAP32[$9_1 >> 2] | 0;
       if (!$9_1) {
        break label$2
       }
       label$8 : {
        $7_1 = HEAP32[($9_1 + 4 | 0) >> 2] | 0;
        if (($7_1 | 0) == ($5_1 | 0)) {
         break label$8
        }
        label$9 : {
         if ($7_1 >>> 0 < $6_1 >>> 0) {
          break label$9
         }
         $7_1 = ($7_1 >>> 0) % ($6_1 >>> 0) | 0;
        }
        if (($7_1 | 0) != ($8_1 | 0)) {
         break label$2
        }
       }
       if (!($571($9_1 + 8 | 0 | 0, $2_1 | 0) | 0)) {
        continue label$7
       }
       break label$7;
      };
      $6_1 = 0;
      break label$1;
     }
     $8_1 = ($6_1 + -1 | 0) & $5_1 | 0;
     $9_1 = HEAP32[((HEAP32[$1_1 >> 2] | 0) + ($8_1 << 2 | 0) | 0) >> 2] | 0;
     if (!$9_1) {
      break label$2
     }
    }
    $10_1 = $6_1 + -1 | 0;
    label$10 : while (1) {
     $9_1 = HEAP32[$9_1 >> 2] | 0;
     if (!$9_1) {
      break label$2
     }
     label$11 : {
      $7_1 = HEAP32[($9_1 + 4 | 0) >> 2] | 0;
      if (($7_1 | 0) == ($5_1 | 0)) {
       break label$11
      }
      if (($7_1 & $10_1 | 0 | 0) != ($8_1 | 0)) {
       break label$2
      }
     }
     if (!($571($9_1 + 8 | 0 | 0, $2_1 | 0) | 0)) {
      continue label$10
     }
     break label$10;
    };
    $6_1 = 0;
    break label$1;
   }
   $9_1 = $2030(152 | 0) | 0;
   HEAP32[($9_1 + 8 | 0) >> 2] = HEAP32[$3_1 >> 2] | 0;
   $81($9_1 + 12 | 0 | 0, $4_1 | 0) | 0;
   HEAP32[$9_1 >> 2] = 0;
   HEAP32[($9_1 + 4 | 0) >> 2] = $5_1;
   $11_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
   $12_1 = Math_fround(((HEAP32[($1_1 + 12 | 0) >> 2] | 0) + 1 | 0) >>> 0);
   label$12 : {
    label$13 : {
     if (!$6_1) {
      break label$13
     }
     if (Math_fround($11_1 * Math_fround($6_1 >>> 0)) < $12_1 ^ 1 | 0) {
      break label$12
     }
    }
    $6_1 = $6_1 << 1 | 0 | ($6_1 >>> 0 < 3 >>> 0 | ($6_1 & ($6_1 + -1 | 0) | 0 | 0) != (0 | 0) | 0) | 0;
    label$14 : {
     label$15 : {
      $11_1 = Math_fround(Math_ceil(Math_fround($12_1 / $11_1)));
      if (!($11_1 < Math_fround(4294967296.0) & $11_1 >= Math_fround(0.0) | 0)) {
       break label$15
      }
      $2_1 = ~~$11_1 >>> 0;
      break label$14;
     }
     $2_1 = 0;
    }
    $124($1_1 | 0, ($6_1 >>> 0 < $2_1 >>> 0 ? $2_1 : $6_1) | 0);
    label$16 : {
     $6_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     if ($6_1 & ($6_1 + -1 | 0) | 0) {
      break label$16
     }
     $8_1 = ($6_1 + -1 | 0) & $5_1 | 0;
     break label$12;
    }
    label$17 : {
     if ($5_1 >>> 0 >= $6_1 >>> 0) {
      break label$17
     }
     $8_1 = $5_1;
     break label$12;
    }
    $8_1 = ($5_1 >>> 0) % ($6_1 >>> 0) | 0;
   }
   label$18 : {
    label$19 : {
     label$20 : {
      $2_1 = (HEAP32[$1_1 >> 2] | 0) + ($8_1 << 2 | 0) | 0;
      $5_1 = HEAP32[$2_1 >> 2] | 0;
      if ($5_1) {
       break label$20
      }
      HEAP32[$9_1 >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
      HEAP32[($1_1 + 8 | 0) >> 2] = $9_1;
      HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
      $5_1 = HEAP32[$9_1 >> 2] | 0;
      if (!$5_1) {
       break label$18
      }
      $5_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
      label$21 : {
       label$22 : {
        $2_1 = $6_1 + -1 | 0;
        if ($6_1 & $2_1 | 0) {
         break label$22
        }
        $5_1 = $5_1 & $2_1 | 0;
        break label$21;
       }
       if ($5_1 >>> 0 < $6_1 >>> 0) {
        break label$21
       }
       $5_1 = ($5_1 >>> 0) % ($6_1 >>> 0) | 0;
      }
      $5_1 = (HEAP32[$1_1 >> 2] | 0) + ($5_1 << 2 | 0) | 0;
      break label$19;
     }
     HEAP32[$9_1 >> 2] = HEAP32[$5_1 >> 2] | 0;
    }
    HEAP32[$5_1 >> 2] = $9_1;
   }
   $6_1 = 1;
   HEAP32[($1_1 + 12 | 0) >> 2] = (HEAP32[($1_1 + 12 | 0) >> 2] | 0) + 1 | 0;
  }
  HEAP8[($0_1 + 4 | 0) >> 0] = $6_1;
  HEAP32[$0_1 >> 2] = $9_1;
 }
 
 function $76($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $2_1 = 0, $4_1 = 0, $3_1 = 0, $7_1 = Math_fround(0), i64toi32_i32$2 = 0, $5_1 = 0, $6_1 = 0, $1482_1 = Math_fround(0), $1489_1 = Math_fround(0), $1510_1 = 0, $1533_1 = 0, $1538_1 = 0, $1542_1 = 0;
  $1_1 = global$0 - 96 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!$0_1) {
      break label$3
     }
     i64toi32_i32$0 = $568(global$1 + 1368 | 0 | 0, 10 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     if ($73($1_1 + 92 | 0 | 0, HEAP32[($570($1_1 + 32 | 0 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0) | 0) >> 2] | 0 | 0) | 0) {
      break label$1
     }
     $77(HEAP32[($1_1 + 92 | 0) >> 2] | 0 | 0, 8 | 0);
     label$4 : {
      $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
      $2_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
      if ((((HEAP32[($0_1 + 48 | 0) >> 2] | 0) - $2_1 | 0) >> 2 | 0) >>> 0 > 23 >>> 0) {
       break label$4
      }
      $3_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
      $4_1 = $2030(96 | 0) | 0;
      $5_1 = $4_1 + 96 | 0;
      $3_1 = $3_1 - $2_1 | 0;
      $6_1 = $4_1 + $3_1 | 0;
      label$5 : {
       if (($3_1 | 0) < (1 | 0)) {
        break label$5
       }
       $2173($4_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
      }
      HEAP32[($0_1 + 48 | 0) >> 2] = $5_1;
      HEAP32[($0_1 + 44 | 0) >> 2] = $6_1;
      HEAP32[($0_1 + 40 | 0) >> 2] = $4_1;
      if (!$2_1) {
       break label$4
      }
      $2032($2_1 | 0);
      $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
     }
     HEAP32[($1_1 + 72 | 0) >> 2] = 1056964608;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$1 = 1056964608;
     HEAP32[($1_1 + 64 | 0) >> 2] = 1056964608;
     HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$1;
     FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0, 0);
     $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
     HEAP32[($1_1 + 72 | 0) >> 2] = -1090519040;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$1 = 1056964608;
     HEAP32[($1_1 + 64 | 0) >> 2] = 1056964608;
     HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$1;
     FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0, 0);
     $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
     HEAP32[($1_1 + 72 | 0) >> 2] = -1090519040;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$1 = -1090519040;
     HEAP32[($1_1 + 64 | 0) >> 2] = 1056964608;
     HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$1;
     FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0, 0);
     $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
     HEAP32[($1_1 + 72 | 0) >> 2] = 1056964608;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$1 = -1090519040;
     HEAP32[($1_1 + 64 | 0) >> 2] = 1056964608;
     HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$1;
     FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0, 0);
     $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
     HEAP32[($1_1 + 72 | 0) >> 2] = 1056964608;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$1 = 1056964608;
     HEAP32[($1_1 + 64 | 0) >> 2] = -1090519040;
     HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$1;
     FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0, 0);
     $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
     HEAP32[($1_1 + 72 | 0) >> 2] = -1090519040;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$1 = 1056964608;
     HEAP32[($1_1 + 64 | 0) >> 2] = -1090519040;
     HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$1;
     FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0, 0);
     $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
     HEAP32[($1_1 + 72 | 0) >> 2] = -1090519040;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$1 = -1090519040;
     HEAP32[($1_1 + 64 | 0) >> 2] = -1090519040;
     HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$1;
     FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0, 0);
     $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
     HEAP32[($1_1 + 72 | 0) >> 2] = 1056964608;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$1 = -1090519040;
     HEAP32[($1_1 + 64 | 0) >> 2] = -1090519040;
     HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$1;
     FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0, 0);
     $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, 0);
     $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, 1);
     $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, 1);
     $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, 2);
     $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, 2);
     $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, 3);
     $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, 3);
     $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, 0);
     $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, 0);
     $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, 4);
     $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, 1);
     $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, 5);
     $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, 2);
     $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, 6);
     $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, 3);
     $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, 7);
     $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, 4);
     $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, 5);
     $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, 5);
     $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, 6);
     $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, 6);
     $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, 7);
     $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, 7);
     $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, 4);
     break label$2;
    }
    i64toi32_i32$1 = $568(global$1 + 1379 | 0 | 0, 3 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    if ($73($1_1 + 92 | 0 | 0, HEAP32[($570($1_1 + 32 | 0 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0) | 0) >> 2] | 0 | 0) | 0) {
     break label$1
    }
    $77(HEAP32[($1_1 + 92 | 0) >> 2] | 0 | 0, 24 | 0);
    label$6 : {
     $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
     $2_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
     if ((((HEAP32[($0_1 + 48 | 0) >> 2] | 0) - $2_1 | 0) >> 2 | 0) >>> 0 > 35 >>> 0) {
      break label$6
     }
     $3_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
     $4_1 = $2030(144 | 0) | 0;
     $5_1 = $4_1 + 144 | 0;
     $3_1 = $3_1 - $2_1 | 0;
     $6_1 = $4_1 + $3_1 | 0;
     label$7 : {
      if (($3_1 | 0) < (1 | 0)) {
       break label$7
      }
      $2173($4_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
     }
     HEAP32[($0_1 + 48 | 0) >> 2] = $5_1;
     HEAP32[($0_1 + 44 | 0) >> 2] = $6_1;
     HEAP32[($0_1 + 40 | 0) >> 2] = $4_1;
     if (!$2_1) {
      break label$6
     }
     $2032($2_1 | 0);
     $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    }
    HEAP32[($1_1 + 72 | 0) >> 2] = -1090519040;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 1056964608;
    HEAP32[($1_1 + 64 | 0) >> 2] = -1090519040;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0, 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    HEAP32[($1_1 + 72 | 0) >> 2] = -1090519040;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 1056964608;
    HEAP32[($1_1 + 64 | 0) >> 2] = 1056964608;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0, 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    HEAP32[($1_1 + 72 | 0) >> 2] = -1090519040;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = -1090519040;
    HEAP32[($1_1 + 64 | 0) >> 2] = 1056964608;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0, 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    HEAP32[($1_1 + 72 | 0) >> 2] = -1090519040;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = -1090519040;
    HEAP32[($1_1 + 64 | 0) >> 2] = -1090519040;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0, 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    HEAP32[($1_1 + 72 | 0) >> 2] = -1090519040;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 1056964608;
    HEAP32[($1_1 + 64 | 0) >> 2] = -1090519040;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0, 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    HEAP32[($1_1 + 72 | 0) >> 2] = -1090519040;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = -1090519040;
    HEAP32[($1_1 + 64 | 0) >> 2] = -1090519040;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0, 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    HEAP32[($1_1 + 72 | 0) >> 2] = 1056964608;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = -1090519040;
    HEAP32[($1_1 + 64 | 0) >> 2] = -1090519040;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0, 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    HEAP32[($1_1 + 72 | 0) >> 2] = 1056964608;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 1056964608;
    HEAP32[($1_1 + 64 | 0) >> 2] = -1090519040;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0, 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    HEAP32[($1_1 + 72 | 0) >> 2] = 1056964608;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = -1090519040;
    HEAP32[($1_1 + 64 | 0) >> 2] = 1056964608;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0, 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    HEAP32[($1_1 + 72 | 0) >> 2] = 1056964608;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = -1090519040;
    HEAP32[($1_1 + 64 | 0) >> 2] = -1090519040;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0, 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    HEAP32[($1_1 + 72 | 0) >> 2] = -1090519040;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = -1090519040;
    HEAP32[($1_1 + 64 | 0) >> 2] = -1090519040;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0, 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    HEAP32[($1_1 + 72 | 0) >> 2] = -1090519040;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = -1090519040;
    HEAP32[($1_1 + 64 | 0) >> 2] = 1056964608;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0, 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    HEAP32[($1_1 + 72 | 0) >> 2] = 1056964608;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 1056964608;
    HEAP32[($1_1 + 64 | 0) >> 2] = 1056964608;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0, 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    HEAP32[($1_1 + 72 | 0) >> 2] = 1056964608;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 1056964608;
    HEAP32[($1_1 + 64 | 0) >> 2] = -1090519040;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0, 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    HEAP32[($1_1 + 72 | 0) >> 2] = 1056964608;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = -1090519040;
    HEAP32[($1_1 + 64 | 0) >> 2] = -1090519040;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0, 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    HEAP32[($1_1 + 72 | 0) >> 2] = 1056964608;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = -1090519040;
    HEAP32[($1_1 + 64 | 0) >> 2] = 1056964608;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0, 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    HEAP32[($1_1 + 72 | 0) >> 2] = -1090519040;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = -1090519040;
    HEAP32[($1_1 + 64 | 0) >> 2] = 1056964608;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0, 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    HEAP32[($1_1 + 72 | 0) >> 2] = -1090519040;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 1056964608;
    HEAP32[($1_1 + 64 | 0) >> 2] = 1056964608;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0, 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    HEAP32[($1_1 + 72 | 0) >> 2] = 1056964608;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 1056964608;
    HEAP32[($1_1 + 64 | 0) >> 2] = 1056964608;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0, 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    HEAP32[($1_1 + 72 | 0) >> 2] = 1056964608;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = -1090519040;
    HEAP32[($1_1 + 64 | 0) >> 2] = 1056964608;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0, 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    HEAP32[($1_1 + 72 | 0) >> 2] = 1056964608;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 1056964608;
    HEAP32[($1_1 + 64 | 0) >> 2] = 1056964608;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0, 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    HEAP32[($1_1 + 72 | 0) >> 2] = -1090519040;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 1056964608;
    HEAP32[($1_1 + 64 | 0) >> 2] = 1056964608;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0, 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    HEAP32[($1_1 + 72 | 0) >> 2] = -1090519040;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 1056964608;
    HEAP32[($1_1 + 64 | 0) >> 2] = -1090519040;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0, 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    HEAP32[($1_1 + 72 | 0) >> 2] = 1056964608;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 1056964608;
    HEAP32[($1_1 + 64 | 0) >> 2] = -1090519040;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0, 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    HEAP32[($1_1 + 72 | 0) >> 2] = -1082130432;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 0;
    HEAP32[($1_1 + 64 | 0) >> 2] = 0;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    HEAP32[($1_1 + 72 | 0) >> 2] = -1082130432;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 0;
    HEAP32[($1_1 + 64 | 0) >> 2] = 0;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    HEAP32[($1_1 + 72 | 0) >> 2] = -1082130432;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 0;
    HEAP32[($1_1 + 64 | 0) >> 2] = 0;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    HEAP32[($1_1 + 72 | 0) >> 2] = -1082130432;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 0;
    HEAP32[($1_1 + 64 | 0) >> 2] = 0;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    HEAP32[($1_1 + 72 | 0) >> 2] = 0;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 0;
    HEAP32[($1_1 + 64 | 0) >> 2] = -1082130432;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    HEAP32[($1_1 + 72 | 0) >> 2] = 0;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 0;
    HEAP32[($1_1 + 64 | 0) >> 2] = -1082130432;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    HEAP32[($1_1 + 72 | 0) >> 2] = 0;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 0;
    HEAP32[($1_1 + 64 | 0) >> 2] = -1082130432;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    HEAP32[($1_1 + 72 | 0) >> 2] = 0;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 0;
    HEAP32[($1_1 + 64 | 0) >> 2] = -1082130432;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    HEAP32[($1_1 + 72 | 0) >> 2] = 0;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = -1082130432;
    HEAP32[($1_1 + 64 | 0) >> 2] = 0;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    HEAP32[($1_1 + 72 | 0) >> 2] = 0;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = -1082130432;
    HEAP32[($1_1 + 64 | 0) >> 2] = 0;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    HEAP32[($1_1 + 72 | 0) >> 2] = 0;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = -1082130432;
    HEAP32[($1_1 + 64 | 0) >> 2] = 0;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    HEAP32[($1_1 + 72 | 0) >> 2] = 0;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = -1082130432;
    HEAP32[($1_1 + 64 | 0) >> 2] = 0;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    HEAP32[($1_1 + 72 | 0) >> 2] = 1065353216;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 0;
    HEAP32[($1_1 + 64 | 0) >> 2] = 0;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    HEAP32[($1_1 + 72 | 0) >> 2] = 1065353216;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 0;
    HEAP32[($1_1 + 64 | 0) >> 2] = 0;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    HEAP32[($1_1 + 72 | 0) >> 2] = 1065353216;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 0;
    HEAP32[($1_1 + 64 | 0) >> 2] = 0;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    HEAP32[($1_1 + 72 | 0) >> 2] = 1065353216;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 0;
    HEAP32[($1_1 + 64 | 0) >> 2] = 0;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    HEAP32[($1_1 + 72 | 0) >> 2] = 0;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 0;
    HEAP32[($1_1 + 64 | 0) >> 2] = 1065353216;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    HEAP32[($1_1 + 72 | 0) >> 2] = 0;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 0;
    HEAP32[($1_1 + 64 | 0) >> 2] = 1065353216;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    HEAP32[($1_1 + 72 | 0) >> 2] = 0;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 0;
    HEAP32[($1_1 + 64 | 0) >> 2] = 1065353216;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    HEAP32[($1_1 + 72 | 0) >> 2] = 0;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 0;
    HEAP32[($1_1 + 64 | 0) >> 2] = 1065353216;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    HEAP32[($1_1 + 72 | 0) >> 2] = 0;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 1065353216;
    HEAP32[($1_1 + 64 | 0) >> 2] = 0;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    HEAP32[($1_1 + 72 | 0) >> 2] = 0;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 1065353216;
    HEAP32[($1_1 + 64 | 0) >> 2] = 0;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    HEAP32[($1_1 + 72 | 0) >> 2] = 0;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 1065353216;
    HEAP32[($1_1 + 64 | 0) >> 2] = 0;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    HEAP32[($1_1 + 72 | 0) >> 2] = 0;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 1065353216;
    HEAP32[($1_1 + 64 | 0) >> 2] = 0;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 0;
    HEAP32[($1_1 + 64 | 0) >> 2] = 1065353216;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 0;
    HEAP32[($1_1 + 64 | 0) >> 2] = 0;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 1065353216;
    HEAP32[($1_1 + 64 | 0) >> 2] = 0;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 1065353216;
    HEAP32[($1_1 + 64 | 0) >> 2] = 1065353216;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 1056964608;
    HEAP32[($1_1 + 64 | 0) >> 2] = 1048576e3;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 1056964608;
    HEAP32[($1_1 + 64 | 0) >> 2] = 0;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 1065353216;
    HEAP32[($1_1 + 64 | 0) >> 2] = 0;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 1065353216;
    HEAP32[($1_1 + 64 | 0) >> 2] = 1048576e3;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 0;
    HEAP32[($1_1 + 64 | 0) >> 2] = 0;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 1065353216;
    HEAP32[($1_1 + 64 | 0) >> 2] = 0;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 1065353216;
    HEAP32[($1_1 + 64 | 0) >> 2] = 1065353216;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 0;
    HEAP32[($1_1 + 64 | 0) >> 2] = 1065353216;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 1056964608;
    HEAP32[($1_1 + 64 | 0) >> 2] = 1048576e3;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 1065353216;
    HEAP32[($1_1 + 64 | 0) >> 2] = 1048576e3;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 1065353216;
    HEAP32[($1_1 + 64 | 0) >> 2] = 1056964608;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 1056964608;
    HEAP32[($1_1 + 64 | 0) >> 2] = 1056964608;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 0;
    HEAP32[($1_1 + 64 | 0) >> 2] = 1065353216;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 0;
    HEAP32[($1_1 + 64 | 0) >> 2] = 0;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 1065353216;
    HEAP32[($1_1 + 64 | 0) >> 2] = 0;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 1065353216;
    HEAP32[($1_1 + 64 | 0) >> 2] = 1065353216;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 0;
    HEAP32[($1_1 + 64 | 0) >> 2] = 1048576e3;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 0;
    HEAP32[($1_1 + 64 | 0) >> 2] = 0;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 1056964608;
    HEAP32[($1_1 + 64 | 0) >> 2] = 0;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 1056964608;
    HEAP32[($1_1 + 64 | 0) >> 2] = 1048576e3;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 0;
    HEAP32[($1_1 + 64 | 0) >> 2] = 1065353216;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 0;
    HEAP32[($1_1 + 64 | 0) >> 2] = 0;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 1065353216;
    HEAP32[($1_1 + 64 | 0) >> 2] = 0;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 1065353216;
    HEAP32[($1_1 + 64 | 0) >> 2] = 1065353216;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 1056964608;
    HEAP32[($1_1 + 64 | 0) >> 2] = 1061158912;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 1056964608;
    HEAP32[($1_1 + 64 | 0) >> 2] = 1056964608;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 1065353216;
    HEAP32[($1_1 + 64 | 0) >> 2] = 1056964608;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 1065353216;
    HEAP32[($1_1 + 64 | 0) >> 2] = 1061158912;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 1065353216;
    HEAP32[($1_1 + 64 | 0) >> 2] = 1065353216;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 0;
    HEAP32[($1_1 + 64 | 0) >> 2] = 1065353216;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 0;
    HEAP32[($1_1 + 64 | 0) >> 2] = 0;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 1065353216;
    HEAP32[($1_1 + 64 | 0) >> 2] = 0;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 1065353216;
    HEAP32[($1_1 + 64 | 0) >> 2] = 1065353216;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 1056964608;
    HEAP32[($1_1 + 64 | 0) >> 2] = 1065353216;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 1056964608;
    HEAP32[($1_1 + 64 | 0) >> 2] = 1061158912;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 1065353216;
    HEAP32[($1_1 + 64 | 0) >> 2] = 1061158912;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 1065353216;
    HEAP32[($1_1 + 64 | 0) >> 2] = 1065353216;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 0;
    HEAP32[($1_1 + 64 | 0) >> 2] = 1065353216;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 0;
    HEAP32[($1_1 + 64 | 0) >> 2] = 0;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 1065353216;
    HEAP32[($1_1 + 64 | 0) >> 2] = 0;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 1056964608;
    HEAP32[($1_1 + 64 | 0) >> 2] = 1061158912;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 0;
    HEAP32[($1_1 + 64 | 0) >> 2] = 1061158912;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 0;
    HEAP32[($1_1 + 64 | 0) >> 2] = 1056964608;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 1056964608;
    HEAP32[($1_1 + 64 | 0) >> 2] = 1056964608;
    HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 64 | 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, 1);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, 2);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, 0);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, 2);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, 3);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, 4);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, 5);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, 6);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, 4);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, 6);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, 7);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, 8);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, 9);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, 10);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, 8);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, 10);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, 11);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, 12);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, 13);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, 14);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, 12);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, 14);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, 15);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, 16);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, 17);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, 18);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, 16);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, 18);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, 19);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, 20);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, 21);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, 22);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, 20);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, 22);
    $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, 23);
   }
   HEAP32[($1_1 + 40 | 0) >> 2] = 1056964608;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$0 = 1056964608;
   HEAP32[($1_1 + 32 | 0) >> 2] = 1056964608;
   HEAP32[($1_1 + 36 | 0) >> 2] = i64toi32_i32$0;
   $0_1 = $535($1_1 + 64 | 0 | 0, global$1 + 1384 | 0 | 0, $1_1 + 32 | 0 | 0) | 0;
   $7_1 = Math_fround(HEAPF32[($0_1 + 16 | 0) >> 2]);
   $1482_1 = Math_fround($7_1 * $7_1);
   $7_1 = Math_fround(HEAPF32[($0_1 + 20 | 0) >> 2]);
   $1489_1 = Math_fround($1482_1 + Math_fround($7_1 * $7_1));
   $7_1 = Math_fround(HEAPF32[($0_1 + 24 | 0) >> 2]);
   $0_1 = $534($1_1 + 32 | 0 | 0, $0_1 + 4 | 0 | 0, Math_fround(Math_fround(Math_sqrt(Math_fround($1489_1 + Math_fround($7_1 * $7_1)))))) | 0;
   $2_1 = HEAP32[((HEAP32[($1_1 + 92 | 0) >> 2] | 0) + 84 | 0) >> 2] | 0;
   HEAP32[($2_1 + 104 | 0) >> 2] = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   $1510_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $2_1 + 96 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $1510_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[($2_1 + 108 | 0) >> 2] = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   HEAP32[($1_1 + 24 | 0) >> 2] = -1090519040;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$1 = -1090519040;
   HEAP32[($1_1 + 16 | 0) >> 2] = -1090519040;
   HEAP32[($1_1 + 20 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[($1_1 + 8 | 0) >> 2] = 1056964608;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$1 = 1056964608;
   HEAP32[$1_1 >> 2] = 1056964608;
   HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$1;
   $0_1 = $528($1_1 + 32 | 0 | 0, $1_1 + 16 | 0 | 0, $1_1 | 0) | 0;
   $4_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
   $2_1 = HEAP32[($4_1 + 84 | 0) >> 2] | 0;
   i64toi32_i32$2 = $0_1 + 20 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $1533_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $2_1 + 132 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $1533_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $0_1 + 12 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $1538_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $2_1 + 124 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $1538_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   $1542_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $2_1 + 116 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $1542_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $160($4_1 | 0);
  }
  $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
  global$0 = $1_1 + 96 | 0;
  return $0_1 | 0;
 }
 
 function $77($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
      if ((((HEAP32[($0_1 + 12 | 0) >> 2] | 0) - $2_1 | 0 | 0) / (12 | 0) | 0) >>> 0 >= $1_1 >>> 0) {
       break label$4
      }
      if ($1_1 >>> 0 >= 357913942 >>> 0) {
       break label$3
      }
      $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
      $4_1 = Math_imul($1_1, 12);
      $5_1 = $2030($4_1 | 0) | 0;
      $6_1 = $5_1 + $4_1 | 0;
      $3_1 = $3_1 - $2_1 | 0;
      $5_1 = $5_1 + Math_imul(($3_1 | 0) / (12 | 0) | 0, 12) | 0;
      $4_1 = $5_1 + Math_imul(($3_1 | 0) / (-12 | 0) | 0, 12) | 0;
      label$5 : {
       if (($3_1 | 0) < (1 | 0)) {
        break label$5
       }
       $2173($4_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
      }
      HEAP32[($0_1 + 12 | 0) >> 2] = $6_1;
      HEAP32[($0_1 + 8 | 0) >> 2] = $5_1;
      HEAP32[($0_1 + 4 | 0) >> 2] = $4_1;
      if (!$2_1) {
       break label$4
      }
      $2032($2_1 | 0);
     }
     label$6 : {
      $2_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
      if ((((HEAP32[($0_1 + 24 | 0) >> 2] | 0) - $2_1 | 0 | 0) / (12 | 0) | 0) >>> 0 >= $1_1 >>> 0) {
       break label$6
      }
      if ($1_1 >>> 0 >= 357913942 >>> 0) {
       break label$2
      }
      $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
      $4_1 = Math_imul($1_1, 12);
      $5_1 = $2030($4_1 | 0) | 0;
      $6_1 = $5_1 + $4_1 | 0;
      $3_1 = $3_1 - $2_1 | 0;
      $5_1 = $5_1 + Math_imul(($3_1 | 0) / (12 | 0) | 0, 12) | 0;
      $4_1 = $5_1 + Math_imul(($3_1 | 0) / (-12 | 0) | 0, 12) | 0;
      label$7 : {
       if (($3_1 | 0) < (1 | 0)) {
        break label$7
       }
       $2173($4_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
      }
      HEAP32[($0_1 + 24 | 0) >> 2] = $6_1;
      HEAP32[($0_1 + 20 | 0) >> 2] = $5_1;
      HEAP32[($0_1 + 16 | 0) >> 2] = $4_1;
      if (!$2_1) {
       break label$6
      }
      $2032($2_1 | 0);
     }
     label$8 : {
      $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
      if ((((HEAP32[($0_1 + 36 | 0) >> 2] | 0) - $2_1 | 0) >> 3 | 0) >>> 0 >= $1_1 >>> 0) {
       break label$8
      }
      if ($1_1 >>> 0 >= 536870912 >>> 0) {
       break label$1
      }
      $3_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
      $4_1 = $1_1 << 3 | 0;
      $1_1 = $2030($4_1 | 0) | 0;
      $4_1 = $1_1 + $4_1 | 0;
      $3_1 = $3_1 - $2_1 | 0;
      $5_1 = $1_1 + $3_1 | 0;
      label$9 : {
       if (($3_1 | 0) < (1 | 0)) {
        break label$9
       }
       $2173($1_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
      }
      HEAP32[($0_1 + 36 | 0) >> 2] = $4_1;
      HEAP32[($0_1 + 32 | 0) >> 2] = $5_1;
      HEAP32[($0_1 + 28 | 0) >> 2] = $1_1;
      if (!$2_1) {
       break label$8
      }
      $2032($2_1 | 0);
     }
     return;
    }
    $3(global$1 + 1869 | 0 | 0);
    abort();
   }
   $3(global$1 + 1869 | 0 | 0);
   abort();
  }
  $3(global$1 + 1869 | 0 | 0);
  abort();
 }
 
 function $78($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $1_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $7_1 = 0, $5_1 = 0, $2_1 = 0, i64toi32_i32$2 = 0, $3_1 = 0, $6_1 = 0, $8_1 = 0, $155_1 = 0, $177_1 = 0, $182_1 = 0, $186_1 = 0;
  $1_1 = global$0 - 128 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 >> 2] = $0_1;
  $631($1_1 + 112 | 0 | 0, global$1 + 1396 | 0 | 0, $1_1 | 0) | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$0 = $568($1_1 + 112 | 0 | 0, $2181($1_1 + 112 | 0 | 0) | 0 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     if (!($73($1_1 + 100 | 0 | 0, HEAP32[($570($1_1 + 104 | 0 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0) | 0) >> 2] | 0 | 0) | 0)) {
      break label$3
     }
     $2_1 = HEAP32[($1_1 + 100 | 0) >> 2] | 0;
     break label$2;
    }
    $2_1 = HEAP32[($1_1 + 100 | 0) >> 2] | 0;
    $3_1 = $0_1 ? Math_imul(4 << (($0_1 << 1 | 0) + -2 | 0) | 0, 60) : 60;
    $77($2_1 | 0, $3_1 | 0);
    label$4 : {
     $4_1 = HEAP32[($2_1 + 40 | 0) >> 2] | 0;
     if ((((HEAP32[($2_1 + 48 | 0) >> 2] | 0) - $4_1 | 0) >> 2 | 0) >>> 0 >= $3_1 >>> 0) {
      break label$4
     }
     if ($3_1 >>> 0 >= 1073741824 >>> 0) {
      break label$1
     }
     $5_1 = HEAP32[($2_1 + 44 | 0) >> 2] | 0;
     $6_1 = $3_1 << 2 | 0;
     $7_1 = $2030($6_1 | 0) | 0;
     $6_1 = $7_1 + $6_1 | 0;
     $5_1 = $5_1 - $4_1 | 0;
     $8_1 = $7_1 + $5_1 | 0;
     label$5 : {
      if (($5_1 | 0) < (1 | 0)) {
       break label$5
      }
      $2173($7_1 | 0, $4_1 | 0, $5_1 | 0) | 0;
     }
     HEAP32[($2_1 + 48 | 0) >> 2] = $6_1;
     HEAP32[($2_1 + 44 | 0) >> 2] = $8_1;
     HEAP32[($2_1 + 40 | 0) >> 2] = $7_1;
     if (!$4_1) {
      break label$4
     }
     $2032($4_1 | 0);
    }
    $4_1 = 0;
    label$6 : while (1) {
     $5_1 = global$1;
     $7_1 = $5_1 + 1408 | 0;
     $5_1 = ($5_1 + 1552 | 0) + Math_imul($4_1, 12) | 0;
     $79($2_1 | 0, $7_1 + Math_imul(HEAP32[$5_1 >> 2] | 0, 12) | 0 | 0, $7_1 + Math_imul(HEAP32[($5_1 + 4 | 0) >> 2] | 0, 12) | 0 | 0, $7_1 + Math_imul(HEAP32[($5_1 + 8 | 0) >> 2] | 0, 12) | 0 | 0, $0_1 | 0);
     $4_1 = $4_1 + 1 | 0;
     if (($4_1 | 0) != (20 | 0)) {
      continue label$6
     }
     break label$6;
    };
    label$7 : {
     if (($3_1 | 0) < (1 | 0)) {
      break label$7
     }
     $4_1 = 0;
     label$8 : while (1) {
      FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($2_1, $4_1);
      $4_1 = $4_1 + 1 | 0;
      if (($4_1 | 0) != ($3_1 | 0)) {
       continue label$8
      }
      break label$8;
     };
    }
    i64toi32_i32$0 = $1_1;
    i64toi32_i32$1 = 1056964608;
    HEAP32[($1_1 + 40 | 0) >> 2] = 1056964608;
    HEAP32[($1_1 + 44 | 0) >> 2] = i64toi32_i32$1;
    $4_1 = global$1 + 1384 | 0;
    $536($1_1 + 72 | 0 | 0, $4_1 | 0, $1_1 + 40 | 0 | 0) | 0;
    $4_1 = $534($1_1 + 40 | 0 | 0, $4_1 | 0, Math_fround(Math_fround(1.0))) | 0;
    $5_1 = $2_1 + 84 | 0;
    $7_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[($7_1 + 104 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
    $155_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $7_1 + 96 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $155_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($7_1 + 108 | 0) >> 2] = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
    HEAP32[($1_1 + 32 | 0) >> 2] = -1082130432;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = -1082130432;
    HEAP32[($1_1 + 24 | 0) >> 2] = -1082130432;
    HEAP32[($1_1 + 28 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($1_1 + 16 | 0) >> 2] = 1065353216;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 1065353216;
    HEAP32[($1_1 + 8 | 0) >> 2] = 1065353216;
    HEAP32[($1_1 + 12 | 0) >> 2] = i64toi32_i32$0;
    $4_1 = $528($1_1 + 40 | 0 | 0, $1_1 + 24 | 0 | 0, $1_1 + 8 | 0 | 0) | 0;
    $7_1 = HEAP32[$5_1 >> 2] | 0;
    i64toi32_i32$2 = $4_1 + 20 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $177_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $7_1 + 132 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $177_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $4_1 + 12 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $182_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $7_1 + 124 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $182_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$0 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
    $186_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $7_1 + 116 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $186_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    $160($2_1 | 0);
   }
   global$0 = $1_1 + 128 | 0;
   return $2_1 | 0;
  }
  $3(global$1 + 1869 | 0 | 0);
  abort();
 }
 
 function $79($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $12_1 = Math_fround(0), $9_1 = Math_fround(0), $13_1 = Math_fround(0), i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $14_1 = Math_fround(0), $6_1 = 0, $7_1 = Math_fround(0), $15_1 = Math_fround(0), $8_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $16_1 = Math_fround(0), $356_1 = Math_fround(0), $400_1 = Math_fround(0), $438_1 = Math_fround(0);
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  label$1 : {
   label$2 : {
    if ($4_1) {
     break label$2
    }
    $7_1 = Math_fround(HEAPF32[$1_1 >> 2]);
    $8_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
    $9_1 = Math_fround($607(Math_fround(Math_fround(-$7_1)), Math_fround(Math_fround(-$8_1))));
    $10_1 = Math_fround(HEAPF32[$2_1 >> 2]);
    $11_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
    $12_1 = Math_fround($607(Math_fround(Math_fround(-$10_1)), Math_fround(Math_fround(-$11_1))));
    $13_1 = Math_fround(Math_fround(($12_1 < Math_fround(0.0) ? Math_fround($12_1 + Math_fround(6.2831854820251465)) : $12_1) * Math_fround(.5)) * Math_fround(.31830987334251404));
    $14_1 = Math_fround(HEAPF32[$3_1 >> 2]);
    $15_1 = Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]);
    $12_1 = Math_fround($607(Math_fround(Math_fround(-$14_1)), Math_fround(Math_fround(-$15_1))));
    $12_1 = Math_fround(Math_fround(($12_1 < Math_fround(0.0) ? Math_fround($12_1 + Math_fround(6.2831854820251465)) : $12_1) * Math_fround(.5)) * Math_fround(.31830987334251404));
    label$3 : {
     label$4 : {
      if ($8_1 != Math_fround(0.0)) {
       break label$4
      }
      if ($7_1 != Math_fround(0.0)) {
       break label$4
      }
      $12_1 = $13_1 == Math_fround(0.0) ? ($12_1 > Math_fround(.800000011920929) ? Math_fround($12_1 + Math_fround(-1.0)) : $12_1) : $12_1;
      $13_1 = $13_1 > Math_fround(.800000011920929) ? ($12_1 == Math_fround(0.0) ? Math_fround($13_1 + Math_fround(-1.0)) : $13_1) : $13_1;
      $9_1 = Math_fround(Math_fround($12_1 + $13_1) * Math_fround(.5));
      break label$3;
     }
     $9_1 = Math_fround(Math_fround(($9_1 < Math_fround(0.0) ? Math_fround($9_1 + Math_fround(6.2831854820251465)) : $9_1) * Math_fround(.5)) * Math_fround(.31830987334251404));
     label$5 : {
      if ($11_1 != Math_fround(0.0)) {
       break label$5
      }
      if ($10_1 != Math_fround(0.0)) {
       break label$5
      }
      $12_1 = $9_1 == Math_fround(0.0) ? ($12_1 > Math_fround(.800000011920929) ? Math_fround($12_1 + Math_fround(-1.0)) : $12_1) : $12_1;
      $9_1 = $9_1 > Math_fround(.800000011920929) ? ($12_1 == Math_fround(0.0) ? Math_fround($9_1 + Math_fround(-1.0)) : $9_1) : $9_1;
      $13_1 = Math_fround(Math_fround($12_1 + $9_1) * Math_fround(.5));
      break label$3;
     }
     label$6 : {
      if ($15_1 != Math_fround(0.0)) {
       break label$6
      }
      if ($14_1 != Math_fround(0.0)) {
       break label$6
      }
      $13_1 = $9_1 == Math_fround(0.0) ? ($13_1 > Math_fround(.800000011920929) ? Math_fround($13_1 + Math_fround(-1.0)) : $13_1) : $13_1;
      $9_1 = $9_1 > Math_fround(.800000011920929) ? ($13_1 == Math_fround(0.0) ? Math_fround($9_1 + Math_fround(-1.0)) : $9_1) : $9_1;
      $12_1 = Math_fround(Math_fround($13_1 + $9_1) * Math_fround(.5));
      break label$3;
     }
     label$7 : {
      if ($9_1 != Math_fround(0.0)) {
       break label$7
      }
      label$8 : {
       $4_1 = $13_1 > Math_fround(.800000011920929) ^ 1 | 0;
       if ($4_1) {
        break label$8
       }
       if (!($12_1 > Math_fround(.800000011920929))) {
        break label$8
       }
       $9_1 = Math_fround(1.0);
       break label$3;
      }
      label$9 : {
       if ($4_1) {
        break label$9
       }
       $9_1 = Math_fround(1.0);
       $12_1 = Math_fround($12_1 + Math_fround(1.0));
       break label$3;
      }
      if ($12_1 > Math_fround(.800000011920929) ^ 1 | 0) {
       break label$3
      }
      $12_1 = Math_fround($12_1 + Math_fround(-1.0));
      break label$3;
     }
     label$10 : {
      if ($13_1 != Math_fround(0.0)) {
       break label$10
      }
      label$11 : {
       $4_1 = $9_1 > Math_fround(.800000011920929) ^ 1 | 0;
       if ($4_1) {
        break label$11
       }
       if (!($12_1 > Math_fround(.800000011920929))) {
        break label$11
       }
       $13_1 = Math_fround(1.0);
       break label$3;
      }
      label$12 : {
       if ($4_1) {
        break label$12
       }
       $9_1 = Math_fround($9_1 + Math_fround(-1.0));
       break label$3;
      }
      if ($12_1 > Math_fround(.800000011920929) ^ 1 | 0) {
       break label$3
      }
      $13_1 = Math_fround(1.0);
      $9_1 = Math_fround($9_1 + Math_fround(1.0));
      break label$3;
     }
     if ($12_1 != Math_fround(0.0)) {
      break label$3
     }
     label$13 : {
      if ($9_1 > Math_fround(.800000011920929) ^ 1 | 0) {
       break label$13
      }
      if (!($13_1 > Math_fround(.800000011920929))) {
       break label$13
      }
      $12_1 = Math_fround(1.0);
      break label$3;
     }
     label$14 : {
      if ($13_1 > Math_fround(.800000011920929) ^ 1 | 0) {
       break label$14
      }
      $12_1 = Math_fround(1.0);
      $9_1 = Math_fround($9_1 + Math_fround(1.0));
      break label$3;
     }
     if ($9_1 > Math_fround(.800000011920929) ^ 1 | 0) {
      break label$3
     }
     $9_1 = Math_fround($9_1 + Math_fround(-1.0));
    }
    $4_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    HEAPF32[($5_1 + 40 | 0) >> 2] = $15_1;
    HEAP32[($5_1 + 36 | 0) >> 2] = $4_1;
    HEAPF32[($5_1 + 32 | 0) >> 2] = $14_1;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $5_1 + 32 | 0, 0);
    i64toi32_i32$0 = HEAP32[$2_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
    $6_1 = i64toi32_i32$0;
    HEAP32[($5_1 + 40 | 0) >> 2] = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
    i64toi32_i32$0 = $5_1;
    HEAP32[($5_1 + 32 | 0) >> 2] = $6_1;
    HEAP32[($5_1 + 36 | 0) >> 2] = i64toi32_i32$1;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $5_1 + 32 | 0, 0);
    i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    $6_1 = i64toi32_i32$1;
    HEAP32[($5_1 + 40 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
    i64toi32_i32$1 = $5_1;
    HEAP32[($5_1 + 32 | 0) >> 2] = $6_1;
    HEAP32[($5_1 + 36 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $5_1 + 32 | 0, 0);
    i64toi32_i32$0 = HEAP32[$3_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    $6_1 = i64toi32_i32$0;
    HEAP32[($5_1 + 40 | 0) >> 2] = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    i64toi32_i32$0 = $5_1;
    HEAP32[($5_1 + 32 | 0) >> 2] = $6_1;
    HEAP32[($5_1 + 36 | 0) >> 2] = i64toi32_i32$1;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $5_1 + 32 | 0);
    i64toi32_i32$1 = HEAP32[$2_1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
    $6_1 = i64toi32_i32$1;
    HEAP32[($5_1 + 40 | 0) >> 2] = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
    i64toi32_i32$1 = $5_1;
    HEAP32[($5_1 + 32 | 0) >> 2] = $6_1;
    HEAP32[($5_1 + 36 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $5_1 + 32 | 0);
    i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    $6_1 = i64toi32_i32$0;
    HEAP32[($5_1 + 40 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
    i64toi32_i32$0 = $5_1;
    HEAP32[($5_1 + 32 | 0) >> 2] = $6_1;
    HEAP32[($5_1 + 36 | 0) >> 2] = i64toi32_i32$1;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $5_1 + 32 | 0);
    $15_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
    HEAPF32[($5_1 + 32 | 0) >> 2] = $9_1;
    HEAPF32[($5_1 + 36 | 0) >> 2] = Math_fround(Math_fround(.5) - Math_fround(Math_fround($599(Math_fround($15_1))) * Math_fround(.31830987334251404)));
    $9_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
    HEAPF32[($5_1 + 16 | 0) >> 2] = $13_1;
    HEAPF32[($5_1 + 20 | 0) >> 2] = Math_fround(Math_fround(.5) - Math_fround(Math_fround($599(Math_fround($9_1))) * Math_fround(.31830987334251404)));
    $13_1 = Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]);
    HEAPF32[$5_1 >> 2] = $12_1;
    HEAPF32[($5_1 + 4 | 0) >> 2] = Math_fround(Math_fround(.5) - Math_fround(Math_fround($599(Math_fround($13_1))) * Math_fround(.31830987334251404)));
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $5_1);
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $5_1 + 16 | 0);
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $5_1 + 32 | 0);
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $5_1);
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $5_1 + 16 | 0);
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $5_1 + 32 | 0);
    break label$1;
   }
   $15_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
   $14_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
   $12_1 = Math_fround($15_1 + $14_1);
   $356_1 = $12_1;
   $8_1 = Math_fround(HEAPF32[$1_1 >> 2]);
   $7_1 = Math_fround(HEAPF32[$2_1 >> 2]);
   $13_1 = Math_fround($8_1 + $7_1);
   $11_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
   $10_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
   $9_1 = Math_fround($11_1 + $10_1);
   $12_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($13_1 * $13_1) + Math_fround($9_1 * $9_1)) + Math_fround($12_1 * $12_1)))));
   HEAPF32[($5_1 + 40 | 0) >> 2] = Math_fround($356_1 * $12_1);
   HEAPF32[($5_1 + 36 | 0) >> 2] = Math_fround($9_1 * $12_1);
   HEAPF32[($5_1 + 32 | 0) >> 2] = Math_fround($13_1 * $12_1);
   $16_1 = Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]);
   $12_1 = Math_fround($14_1 + $16_1);
   $400_1 = $12_1;
   $14_1 = Math_fround(HEAPF32[$3_1 >> 2]);
   $13_1 = Math_fround($7_1 + $14_1);
   $7_1 = Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]);
   $9_1 = Math_fround($10_1 + $7_1);
   $12_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($13_1 * $13_1) + Math_fround($9_1 * $9_1)) + Math_fround($12_1 * $12_1)))));
   HEAPF32[($5_1 + 24 | 0) >> 2] = Math_fround($400_1 * $12_1);
   HEAPF32[($5_1 + 20 | 0) >> 2] = Math_fround($9_1 * $12_1);
   HEAPF32[($5_1 + 16 | 0) >> 2] = Math_fround($13_1 * $12_1);
   $12_1 = Math_fround($15_1 + $16_1);
   $438_1 = $12_1;
   $13_1 = Math_fround($8_1 + $14_1);
   $9_1 = Math_fround($11_1 + $7_1);
   $12_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($13_1 * $13_1) + Math_fround($9_1 * $9_1)) + Math_fround($12_1 * $12_1)))));
   HEAPF32[($5_1 + 8 | 0) >> 2] = Math_fround($438_1 * $12_1);
   HEAPF32[($5_1 + 4 | 0) >> 2] = Math_fround($9_1 * $12_1);
   HEAPF32[$5_1 >> 2] = Math_fround($13_1 * $12_1);
   $4_1 = $4_1 + -1 | 0;
   $79($0_1 | 0, $1_1 | 0, $5_1 + 32 | 0 | 0, $5_1 | 0, $4_1 | 0);
   $79($0_1 | 0, $2_1 | 0, $5_1 + 16 | 0 | 0, $5_1 + 32 | 0 | 0, $4_1 | 0);
   $79($0_1 | 0, $3_1 | 0, $5_1 | 0, $5_1 + 16 | 0 | 0, $4_1 | 0);
   $79($0_1 | 0, $5_1 + 32 | 0 | 0, $5_1 + 16 | 0 | 0, $5_1 | 0, $4_1 | 0);
  }
  global$0 = $5_1 + 48 | 0;
 }
 
 function $80($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $6_1 = 0, $5_1 = 0, $7_1 = 0, $8_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $9_1 = 0, $4_1 = 0, $21_1 = Math_fround(0), $12_1 = 0, $11_1 = 0, i64toi32_i32$2 = 0, $15_1 = Math_fround(0), $10_1 = 0, $14_1 = 0, $24_1 = Math_fround(0), $25_1 = Math_fround(0), $13_1 = 0, $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20_1 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $566_1 = 0, $590_1 = 0, $595_1 = 0, $599_1 = 0;
  $2_1 = global$0 - 144 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 >> 2] = $0_1;
  $3_1 = global$1;
  $631($2_1 + 112 | 0 | 0, ($1_1 ? $3_1 + 1792 | 0 : $3_1 + 1810 | 0) | 0, $2_1 | 0) | 0;
  label$1 : {
   i64toi32_i32$0 = $568($2_1 + 112 | 0 | 0, $2181($2_1 + 112 | 0 | 0) | 0 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   if ($73($2_1 + 100 | 0 | 0, HEAP32[($570($2_1 + 104 | 0 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0) | 0) >> 2] | 0 | 0) | 0) {
    break label$1
   }
   $3_1 = $0_1 + 1 | 0;
   $4_1 = Math_imul($3_1, $3_1);
   $77(HEAP32[($2_1 + 100 | 0) >> 2] | 0 | 0, $4_1 | 0);
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       $5_1 = HEAP32[($2_1 + 100 | 0) >> 2] | 0;
       $6_1 = HEAP32[($5_1 + 40 | 0) >> 2] | 0;
       $7_1 = Math_imul($4_1, 3) + -3 | 0;
       if ((((HEAP32[($5_1 + 48 | 0) >> 2] | 0) - $6_1 | 0) >> 2 | 0) >>> 0 >= $7_1 >>> 0) {
        break label$5
       }
       if ($7_1 >>> 0 >= 1073741824 >>> 0) {
        break label$4
       }
       $8_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
       $9_1 = $7_1 << 2 | 0;
       $7_1 = $2030($9_1 | 0) | 0;
       $9_1 = $7_1 + $9_1 | 0;
       $8_1 = $8_1 - $6_1 | 0;
       $10_1 = $7_1 + $8_1 | 0;
       label$6 : {
        if (($8_1 | 0) < (1 | 0)) {
         break label$6
        }
        $2173($7_1 | 0, $6_1 | 0, $8_1 | 0) | 0;
       }
       HEAP32[($5_1 + 48 | 0) >> 2] = $9_1;
       HEAP32[($5_1 + 44 | 0) >> 2] = $10_1;
       HEAP32[($5_1 + 40 | 0) >> 2] = $7_1;
       if (!$6_1) {
        break label$5
       }
       $2032($6_1 | 0);
      }
      $9_1 = ($3_1 & 1073741823 | 0 | 0) != ($3_1 | 0) ? -1 : $3_1 << 2 | 0;
      $11_1 = $2031($9_1 | 0) | 0;
      label$7 : {
       if (($0_1 | 0) < (0 | 0)) {
        break label$7
       }
       $15_1 = Math_fround($0_1 | 0);
       $16_1 = Math_fround(Math_fround(6.2831854820251465) / $15_1);
       $17_1 = Math_fround(Math_fround(3.1415927410125732) / $15_1);
       $18_1 = Math_fround(Math_fround(.5) / $15_1);
       $19_1 = Math_fround(Math_fround(-.5) / $15_1);
       $8_1 = 0;
       $5_1 = 0;
       label$8 : while (1) {
        $20_1 = $8_1 ? (($8_1 | 0) == ($0_1 | 0) ? $19_1 : Math_fround(0.0)) : $18_1;
        $21_1 = Math_fround($8_1 | 0);
        $22_1 = Math_fround(Math_fround(1.0) - Math_fround($21_1 / $15_1));
        $21_1 = Math_fround($17_1 * $21_1);
        $23_1 = Math_fround(-Math_fround($594(Math_fround($21_1))));
        $3_1 = 0;
        $7_1 = $2031($9_1 | 0) | 0;
        $21_1 = Math_fround($592(Math_fround($21_1)));
        label$9 : while (1) {
         HEAPF32[($2_1 + 44 | 0) >> 2] = $23_1;
         $24_1 = Math_fround($3_1 | 0);
         $25_1 = Math_fround(Math_fround($16_1 * $24_1) + Math_fround(-1.5707963705062866));
         HEAPF32[($2_1 + 48 | 0) >> 2] = Math_fround($21_1 * Math_fround($592(Math_fround($25_1))));
         HEAPF32[($2_1 + 40 | 0) >> 2] = Math_fround($21_1 * Math_fround($594(Math_fround($25_1))));
         $6_1 = HEAP32[($2_1 + 100 | 0) >> 2] | 0;
         FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($6_1, $2_1 + 40 | 0, 0);
         $6_1 = HEAP32[($2_1 + 100 | 0) >> 2] | 0;
         FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($6_1, $2_1 + 40 | 0);
         HEAPF32[($2_1 + 76 | 0) >> 2] = $22_1;
         HEAPF32[($2_1 + 72 | 0) >> 2] = Math_fround($20_1 + Math_fround(Math_fround(1.0) - Math_fround($24_1 / $15_1)));
         $6_1 = HEAP32[($2_1 + 100 | 0) >> 2] | 0;
         FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($6_1, $2_1 + 72 | 0);
         $6_1 = HEAP32[($2_1 + 100 | 0) >> 2] | 0;
         FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($6_1, $2_1 + 72 | 0);
         HEAP32[($7_1 + ($3_1 << 2 | 0) | 0) >> 2] = $5_1;
         $5_1 = $5_1 + 1 | 0;
         $6_1 = ($3_1 | 0) != ($0_1 | 0);
         $3_1 = $3_1 + 1 | 0;
         if ($6_1) {
          continue label$9
         }
         break label$9;
        };
        HEAP32[($11_1 + ($8_1 << 2 | 0) | 0) >> 2] = $7_1;
        $3_1 = ($8_1 | 0) != ($0_1 | 0);
        $8_1 = $8_1 + 1 | 0;
        if ($3_1) {
         continue label$8
        }
        break label$8;
       };
      }
      if ($1_1) {
       break label$3
      }
      if (($0_1 | 0) < (1 | 0)) {
       break label$2
      }
      $4_1 = $0_1 + -1 | 0;
      $1_1 = 0;
      label$10 : while (1) {
       $12_1 = $11_1 + ($1_1 << 2 | 0) | 0;
       $13_1 = $1_1 + 1 | 0;
       $14_1 = $11_1 + ($13_1 << 2 | 0) | 0;
       $5_1 = 0;
       $3_1 = 0;
       label$11 : {
        label$12 : {
         if ($1_1) {
          break label$12
         }
         label$13 : while (1) {
          $3_1 = $5_1 + 1 | 0;
          label$14 : {
           if (($1_1 | 0) == ($4_1 | 0)) {
            break label$14
           }
           $6_1 = HEAP32[$14_1 >> 2] | 0;
           $7_1 = HEAP32[($6_1 + ($3_1 << 2 | 0) | 0) >> 2] | 0;
           $5_1 = $5_1 << 2 | 0;
           $6_1 = HEAP32[($6_1 + $5_1 | 0) >> 2] | 0;
           $8_1 = HEAP32[($2_1 + 100 | 0) >> 2] | 0;
           FUNCTION_TABLE[HEAP32[((HEAP32[$8_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($8_1, HEAP32[((HEAP32[$12_1 >> 2] | 0) + $5_1 | 0) >> 2] | 0);
           $5_1 = HEAP32[($2_1 + 100 | 0) >> 2] | 0;
           FUNCTION_TABLE[HEAP32[((HEAP32[$5_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($5_1, $6_1);
           $5_1 = HEAP32[($2_1 + 100 | 0) >> 2] | 0;
           FUNCTION_TABLE[HEAP32[((HEAP32[$5_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($5_1, $7_1);
          }
          $5_1 = $3_1;
          if (($3_1 | 0) != ($0_1 | 0)) {
           continue label$13
          }
          break label$11;
         };
        }
        label$15 : while (1) {
         $5_1 = HEAP32[$14_1 >> 2] | 0;
         $6_1 = $3_1 << 2 | 0;
         $10_1 = HEAP32[($5_1 + $6_1 | 0) >> 2] | 0;
         $3_1 = $3_1 + 1 | 0;
         $7_1 = $3_1 << 2 | 0;
         $5_1 = HEAP32[($5_1 + $7_1 | 0) >> 2] | 0;
         $8_1 = HEAP32[$12_1 >> 2] | 0;
         $6_1 = HEAP32[($6_1 + $8_1 | 0) >> 2] | 0;
         $9_1 = HEAP32[($2_1 + 100 | 0) >> 2] | 0;
         FUNCTION_TABLE[HEAP32[((HEAP32[$9_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($9_1, HEAP32[($8_1 + $7_1 | 0) >> 2] | 0);
         $7_1 = HEAP32[($2_1 + 100 | 0) >> 2] | 0;
         FUNCTION_TABLE[HEAP32[((HEAP32[$7_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($7_1, $6_1);
         $7_1 = HEAP32[($2_1 + 100 | 0) >> 2] | 0;
         FUNCTION_TABLE[HEAP32[((HEAP32[$7_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($7_1, $5_1);
         label$16 : {
          if (($1_1 | 0) == ($4_1 | 0)) {
           break label$16
          }
          $7_1 = HEAP32[($2_1 + 100 | 0) >> 2] | 0;
          FUNCTION_TABLE[HEAP32[((HEAP32[$7_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($7_1, $6_1);
          $6_1 = HEAP32[($2_1 + 100 | 0) >> 2] | 0;
          FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($6_1, $10_1);
          $6_1 = HEAP32[($2_1 + 100 | 0) >> 2] | 0;
          FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($6_1, $5_1);
         }
         if (($3_1 | 0) != ($0_1 | 0)) {
          continue label$15
         }
         break label$15;
        };
       }
       $1_1 = $13_1;
       if (($1_1 | 0) != ($0_1 | 0)) {
        continue label$10
       }
       break label$2;
      };
     }
     $3(global$1 + 1869 | 0 | 0);
     abort();
    }
    $3_1 = 0;
    if (($0_1 | 0) <= (0 | 0)) {
     break label$2
    }
    $5_1 = $4_1 + ($0_1 ^ -1 | 0) | 0;
    label$17 : while (1) {
     $6_1 = HEAP32[($2_1 + 100 | 0) >> 2] | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($6_1, 0);
     $6_1 = HEAP32[($2_1 + 100 | 0) >> 2] | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($6_1, $3_1 + $0_1 | 0);
     $6_1 = HEAP32[($2_1 + 100 | 0) >> 2] | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($6_1, $5_1);
     $6_1 = HEAP32[($2_1 + 100 | 0) >> 2] | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($6_1, $5_1 + ($3_1 ^ -1 | 0) | 0);
     $3_1 = $3_1 + 1 | 0;
     if (($3_1 | 0) != ($0_1 | 0)) {
      continue label$17
     }
     break label$17;
    };
    if (($0_1 | 0) < (3 | 0)) {
     break label$2
    }
    $14_1 = $0_1 + -1 | 0;
    $12_1 = 1;
    label$18 : while (1) {
     $4_1 = $11_1 + ($12_1 << 2 | 0) | 0;
     $12_1 = $12_1 + 1 | 0;
     $10_1 = $11_1 + ($12_1 << 2 | 0) | 0;
     $3_1 = 0;
     label$19 : while (1) {
      $7_1 = HEAP32[$10_1 >> 2] | 0;
      $5_1 = $3_1 + 1 | 0;
      $8_1 = $5_1 << 2 | 0;
      $6_1 = HEAP32[($7_1 + $8_1 | 0) >> 2] | 0;
      $3_1 = $3_1 << 2 | 0;
      $7_1 = HEAP32[($7_1 + $3_1 | 0) >> 2] | 0;
      $9_1 = HEAP32[$4_1 >> 2] | 0;
      $3_1 = HEAP32[($9_1 + $3_1 | 0) >> 2] | 0;
      $1_1 = HEAP32[($2_1 + 100 | 0) >> 2] | 0;
      FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($1_1, HEAP32[($9_1 + $8_1 | 0) >> 2] | 0);
      $8_1 = HEAP32[($2_1 + 100 | 0) >> 2] | 0;
      FUNCTION_TABLE[HEAP32[((HEAP32[$8_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($8_1, $3_1);
      $8_1 = HEAP32[($2_1 + 100 | 0) >> 2] | 0;
      FUNCTION_TABLE[HEAP32[((HEAP32[$8_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($8_1, $3_1);
      $8_1 = HEAP32[($2_1 + 100 | 0) >> 2] | 0;
      FUNCTION_TABLE[HEAP32[((HEAP32[$8_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($8_1, $7_1);
      $8_1 = HEAP32[($2_1 + 100 | 0) >> 2] | 0;
      FUNCTION_TABLE[HEAP32[((HEAP32[$8_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($8_1, $7_1);
      $7_1 = HEAP32[($2_1 + 100 | 0) >> 2] | 0;
      FUNCTION_TABLE[HEAP32[((HEAP32[$7_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($7_1, $6_1);
      $7_1 = HEAP32[($2_1 + 100 | 0) >> 2] | 0;
      FUNCTION_TABLE[HEAP32[((HEAP32[$7_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($7_1, $3_1);
      $3_1 = HEAP32[($2_1 + 100 | 0) >> 2] | 0;
      FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($3_1, $6_1);
      $3_1 = $5_1;
      if (($3_1 | 0) != ($0_1 | 0)) {
       continue label$19
      }
      break label$19;
     };
     if (($12_1 | 0) != ($14_1 | 0)) {
      continue label$18
     }
     break label$18;
    };
   }
   $3_1 = 0;
   label$20 : {
    if (($0_1 | 0) < (0 | 0)) {
     break label$20
    }
    label$21 : while (1) {
     label$22 : {
      $5_1 = HEAP32[($11_1 + ($3_1 << 2 | 0) | 0) >> 2] | 0;
      if (!$5_1) {
       break label$22
      }
      $2033($5_1 | 0);
     }
     $5_1 = ($3_1 | 0) != ($0_1 | 0);
     $3_1 = $3_1 + 1 | 0;
     if ($5_1) {
      continue label$21
     }
     break label$21;
    };
   }
   $2033($11_1 | 0);
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$1 = 1056964608;
   HEAP32[($2_1 + 40 | 0) >> 2] = 1056964608;
   HEAP32[($2_1 + 44 | 0) >> 2] = i64toi32_i32$1;
   $3_1 = global$1 + 1384 | 0;
   $536($2_1 + 72 | 0 | 0, $3_1 | 0, $2_1 + 40 | 0 | 0) | 0;
   $3_1 = $534($2_1 + 40 | 0 | 0, $3_1 | 0, Math_fround(Math_fround(1.0))) | 0;
   $5_1 = HEAP32[((HEAP32[($2_1 + 100 | 0) >> 2] | 0) + 84 | 0) >> 2] | 0;
   HEAP32[($5_1 + 104 | 0) >> 2] = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
   i64toi32_i32$2 = $3_1;
   i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
   $566_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $5_1 + 96 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $566_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($5_1 + 108 | 0) >> 2] = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
   HEAP32[($2_1 + 32 | 0) >> 2] = -1082130432;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = -1082130432;
   HEAP32[($2_1 + 24 | 0) >> 2] = -1082130432;
   HEAP32[($2_1 + 28 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($2_1 + 16 | 0) >> 2] = 1065353216;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = 1065353216;
   HEAP32[($2_1 + 8 | 0) >> 2] = 1065353216;
   HEAP32[($2_1 + 12 | 0) >> 2] = i64toi32_i32$0;
   $3_1 = $528($2_1 + 40 | 0 | 0, $2_1 + 24 | 0 | 0, $2_1 + 8 | 0 | 0) | 0;
   $6_1 = HEAP32[($2_1 + 100 | 0) >> 2] | 0;
   $5_1 = HEAP32[($6_1 + 84 | 0) >> 2] | 0;
   i64toi32_i32$2 = $3_1 + 20 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $590_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $5_1 + 132 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $590_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $3_1 + 12 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $595_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $5_1 + 124 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $595_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $3_1;
   i64toi32_i32$0 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
   $599_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $5_1 + 116 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $599_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   $160($6_1 | 0);
  }
  $3_1 = HEAP32[($2_1 + 100 | 0) >> 2] | 0;
  global$0 = $2_1 + 144 | 0;
  return $3_1 | 0;
 }
 
 function $81($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $2_1 = 0, i64toi32_i32$2 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $5$hi = 0, $6_1 = 0, $6$hi = 0, $7_1 = 0, $7$hi = 0, $8_1 = 0, $8$hi = 0, $9_1 = 0, $9$hi = 0, $10_1 = 0, $10$hi = 0, $191_1 = 0, $196_1 = 0, $205_1 = 0, $215_1 = 0;
  HEAP16[$0_1 >> 1] = HEAPU16[$1_1 >> 1] | 0;
  i64toi32_i32$2 = $1_1 + 12 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $5_1 = i64toi32_i32$0;
  $5$hi = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1 + 20 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $6_1 = i64toi32_i32$1;
  $6$hi = i64toi32_i32$0;
  i64toi32_i32$2 = $1_1 + 28 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $7_1 = i64toi32_i32$0;
  $7$hi = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1 + 36 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $8_1 = i64toi32_i32$1;
  $8$hi = i64toi32_i32$0;
  i64toi32_i32$2 = $1_1 + 44 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $9_1 = i64toi32_i32$0;
  $9$hi = i64toi32_i32$1;
  $2_1 = HEAPU16[($1_1 + 52 | 0) >> 1] | 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
  $10_1 = i64toi32_i32$1;
  $10$hi = i64toi32_i32$0;
  HEAP32[($0_1 + 64 | 0) >> 2] = 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 56 | 0) >> 2] = 0;
  HEAP32[($0_1 + 60 | 0) >> 2] = i64toi32_i32$0;
  HEAP16[($0_1 + 52 | 0) >> 1] = $2_1;
  i64toi32_i32$0 = $9$hi;
  i64toi32_i32$1 = $0_1 + 44 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $9_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $8$hi;
  i64toi32_i32$1 = $0_1 + 36 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $8_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $7$hi;
  i64toi32_i32$1 = $0_1 + 28 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $7_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$1 = $0_1 + 20 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $6_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $5$hi;
  i64toi32_i32$1 = $0_1 + 12 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $5_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $10$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $10_1;
  HEAP32[($0_1 + 8 | 0) >> 2] = i64toi32_i32$0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      $2_1 = (HEAP32[($1_1 + 60 | 0) >> 2] | 0) - (HEAP32[($1_1 + 56 | 0) >> 2] | 0) | 0;
      if (!$2_1) {
       break label$4
      }
      $3_1 = $2_1 >> 4 | 0;
      if ($3_1 >>> 0 >= 268435456 >>> 0) {
       break label$3
      }
      $2_1 = $2030($2_1 | 0) | 0;
      HEAP32[($0_1 + 56 | 0) >> 2] = $2_1;
      HEAP32[($0_1 + 60 | 0) >> 2] = $2_1;
      HEAP32[($0_1 + 64 | 0) >> 2] = $2_1 + ($3_1 << 4 | 0) | 0;
      label$5 : {
       $4_1 = HEAP32[($1_1 + 56 | 0) >> 2] | 0;
       $3_1 = (HEAP32[($1_1 + 60 | 0) >> 2] | 0) - $4_1 | 0;
       if (($3_1 | 0) < (1 | 0)) {
        break label$5
       }
       $2_1 = ($2173($2_1 | 0, $4_1 | 0, $3_1 | 0) | 0) + $3_1 | 0;
      }
      HEAP32[($0_1 + 60 | 0) >> 2] = $2_1;
     }
     i64toi32_i32$1 = $0_1;
     i64toi32_i32$0 = 0;
     HEAP32[($0_1 + 68 | 0) >> 2] = 0;
     HEAP32[($0_1 + 72 | 0) >> 2] = i64toi32_i32$0;
     HEAP32[($0_1 + 76 | 0) >> 2] = 0;
     $2_1 = (HEAP32[($1_1 + 72 | 0) >> 2] | 0) - (HEAP32[($1_1 + 68 | 0) >> 2] | 0) | 0;
     $3_1 = ($2_1 | 0) / (28 | 0) | 0;
     label$6 : {
      if (!$2_1) {
       break label$6
      }
      if ($3_1 >>> 0 >= 153391690 >>> 0) {
       break label$2
      }
      $2_1 = $2030($2_1 | 0) | 0;
      HEAP32[($0_1 + 68 | 0) >> 2] = $2_1;
      HEAP32[($0_1 + 72 | 0) >> 2] = $2_1;
      HEAP32[($0_1 + 76 | 0) >> 2] = $2_1 + Math_imul($3_1, 28) | 0;
      label$7 : {
       $4_1 = HEAP32[($1_1 + 68 | 0) >> 2] | 0;
       $3_1 = (HEAP32[($1_1 + 72 | 0) >> 2] | 0) - $4_1 | 0;
       if (($3_1 | 0) < (1 | 0)) {
        break label$7
       }
       $2_1 = ($2173($2_1 | 0, $4_1 | 0, $3_1 | 0) | 0) + Math_imul(($3_1 >>> 0) / (28 >>> 0) | 0, 28) | 0;
      }
      HEAP32[($0_1 + 72 | 0) >> 2] = $2_1;
     }
     i64toi32_i32$1 = $0_1;
     i64toi32_i32$0 = 0;
     HEAP32[($0_1 + 80 | 0) >> 2] = 0;
     HEAP32[($0_1 + 84 | 0) >> 2] = i64toi32_i32$0;
     HEAP32[($0_1 + 88 | 0) >> 2] = 0;
     label$8 : {
      $2_1 = (HEAP32[($1_1 + 84 | 0) >> 2] | 0) - (HEAP32[($1_1 + 80 | 0) >> 2] | 0) | 0;
      if (!$2_1) {
       break label$8
      }
      $3_1 = $2_1 >> 4 | 0;
      if ($3_1 >>> 0 >= 268435456 >>> 0) {
       break label$1
      }
      $2_1 = $2030($2_1 | 0) | 0;
      HEAP32[($0_1 + 80 | 0) >> 2] = $2_1;
      HEAP32[($0_1 + 84 | 0) >> 2] = $2_1;
      HEAP32[($0_1 + 88 | 0) >> 2] = $2_1 + ($3_1 << 4 | 0) | 0;
      label$9 : {
       $4_1 = HEAP32[($1_1 + 80 | 0) >> 2] | 0;
       $3_1 = (HEAP32[($1_1 + 84 | 0) >> 2] | 0) - $4_1 | 0;
       if (($3_1 | 0) < (1 | 0)) {
        break label$9
       }
       $2_1 = ($2173($2_1 | 0, $4_1 | 0, $3_1 | 0) | 0) + $3_1 | 0;
      }
      HEAP32[($0_1 + 84 | 0) >> 2] = $2_1;
     }
     $2_1 = global$1;
     HEAP32[($0_1 + 92 | 0) >> 2] = ($2_1 + 22232 | 0) + 8 | 0;
     i64toi32_i32$2 = $1_1 + 96 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $191_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1 + 96 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $191_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $1_1 + 104 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $196_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1 + 104 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $196_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     HEAP32[($0_1 + 112 | 0) >> 2] = ($2_1 + 21928 | 0) + 8 | 0;
     i64toi32_i32$2 = $1_1 + 116 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $205_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1 + 116 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $205_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     HEAP32[($0_1 + 124 | 0) >> 2] = HEAP32[($1_1 + 124 | 0) >> 2] | 0;
     i64toi32_i32$2 = $1_1 + 128 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $215_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1 + 128 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $215_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     HEAP32[($0_1 + 136 | 0) >> 2] = HEAP32[($1_1 + 136 | 0) >> 2] | 0;
     return $0_1 | 0;
    }
    $2097($0_1 + 56 | 0 | 0);
    abort();
   }
   $2097($0_1 + 68 | 0 | 0);
   abort();
  }
  $2097($0_1 + 80 | 0 | 0);
  abort();
 }
 
 function $82($0_1) {
  $0_1 = $0_1 | 0;
  $421(HEAP32[((HEAP32[($0_1 + 84 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0);
  $422(HEAP32[((HEAP32[($0_1 + 84 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0);
 }
 
 function $83($0_1) {
  $0_1 = $0_1 | 0;
  $433(HEAP32[((HEAP32[($0_1 + 84 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0);
  $434(HEAP32[((HEAP32[($0_1 + 84 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0);
 }
 
 function $84($0_1) {
  $0_1 = $0_1 | 0;
  $421(HEAP32[((HEAP32[($0_1 + 84 | 0) >> 2] | 0) + 36 | 0) >> 2] | 0 | 0);
 }
 
 function $85($0_1) {
  $0_1 = $0_1 | 0;
  $433(HEAP32[((HEAP32[($0_1 + 84 | 0) >> 2] | 0) + 36 | 0) >> 2] | 0 | 0);
 }
 
 function $86($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 56 | 0) >> 2] | 0 | 0]($0_1);
  fimport$15($1_1 | 0, HEAP32[((HEAP32[($0_1 + 84 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0 | 0, 5125 | 0, 0 | 0);
  label$1 : {
   if (!($458() | 0)) {
    break label$1
   }
   fimport$16();
  }
 }
 
 function $87($0_1) {
  $0_1 = $0_1 | 0;
  return HEAPU16[(HEAP32[($0_1 + 84 | 0) >> 2] | 0) >> 1] | 0 | 0;
 }
 
 function $88($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $5_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0);
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  $1_1 = HEAP32[($1_1 + 84 | 0) >> 2] | 0;
  $4_1 = Math_fround(HEAPF32[($1_1 + 128 | 0) >> 2]);
  $5_1 = Math_fround(HEAPF32[($1_1 + 116 | 0) >> 2]);
  $6_1 = Math_fround(HEAPF32[($1_1 + 132 | 0) >> 2]);
  $7_1 = Math_fround(HEAPF32[($1_1 + 120 | 0) >> 2]);
  $8_1 = Math_fround(HEAPF32[$2_1 >> 2]);
  $9_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
  $10_1 = Math_fround(HEAPF32[($1_1 + 124 | 0) >> 2]);
  $11_1 = Math_fround(HEAPF32[($1_1 + 136 | 0) >> 2]);
  $12_1 = Math_fround(Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]) * Math_fround(.5));
  $13_1 = Math_fround(Math_fround($10_1 + $11_1) * $12_1);
  $10_1 = Math_fround(Math_fround($11_1 - $10_1) * $12_1);
  HEAPF32[($3_1 + 24 | 0) >> 2] = Math_fround($13_1 - $10_1);
  $9_1 = Math_fround($9_1 * Math_fround(.5));
  $11_1 = Math_fround(Math_fround($7_1 + $6_1) * $9_1);
  $6_1 = Math_fround(Math_fround($6_1 - $7_1) * $9_1);
  HEAPF32[($3_1 + 20 | 0) >> 2] = Math_fround($11_1 - $6_1);
  $7_1 = Math_fround($8_1 * Math_fround(.5));
  $8_1 = Math_fround(Math_fround($5_1 + $4_1) * $7_1);
  $4_1 = Math_fround(Math_fround($4_1 - $5_1) * $7_1);
  HEAPF32[($3_1 + 16 | 0) >> 2] = Math_fround($8_1 - $4_1);
  HEAPF32[($3_1 + 8 | 0) >> 2] = Math_fround($13_1 + $10_1);
  HEAPF32[($3_1 + 4 | 0) >> 2] = Math_fround($11_1 + $6_1);
  HEAPF32[$3_1 >> 2] = Math_fround($8_1 + $4_1);
  $528($0_1 | 0, $3_1 + 16 | 0 | 0, $3_1 | 0) | 0;
  global$0 = $3_1 + 32 | 0;
 }
 
 function $89($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0);
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $1_1 = HEAP32[($1_1 + 84 | 0) >> 2] | 0;
  $4_1 = Math_fround(HEAPF32[($1_1 + 96 | 0) >> 2]);
  $5_1 = Math_fround(HEAPF32[($1_1 + 100 | 0) >> 2]);
  $6_1 = Math_fround(HEAPF32[$2_1 >> 2]);
  $7_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
  $8_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
  HEAPF32[($3_1 + 8 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($1_1 + 104 | 0) >> 2]) * $8_1);
  HEAPF32[($3_1 + 4 | 0) >> 2] = Math_fround($5_1 * $7_1);
  HEAPF32[$3_1 >> 2] = Math_fround($4_1 * $6_1);
  $6_1 = $6_1 < $7_1 ? $7_1 : $6_1;
  $534($0_1 | 0, $3_1 | 0, Math_fround(Math_fround(Math_fround(HEAPF32[($1_1 + 108 | 0) >> 2]) * ($6_1 < $8_1 ? $8_1 : $6_1)))) | 0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $90($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $2_1 = 0, $1_1 = 0, $5_1 = 0, $7_1 = 0, $8_1 = 0, $3_1 = 0, $6_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $9_1 = 0, $14_1 = 0, $15_1 = 0, $17_1 = Math_fround(0), $12_1 = 0, $19_1 = Math_fround(0), i64toi32_i32$2 = 0, $18_1 = Math_fround(0), $21_1 = Math_fround(0), $20_1 = Math_fround(0), $13_1 = 0, $11_1 = 0, $16_1 = 0, $22_1 = Math_fround(0), $23_1 = Math_fround(0), $33_1 = 0, $34_1 = 0, $61_1 = 0, $10_1 = 0, $346_1 = Math_fround(0), $539_1 = 0, $544_1 = 0, $588_1 = 0, $593_1 = 0;
  $1_1 = global$0 - 80 | 0;
  global$0 = $1_1;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
   $3_1 = (HEAP32[($0_1 + 44 | 0) >> 2] | 0) - $2_1 | 0;
   if ((($3_1 >> 2 | 0) >>> 0) % (3 >>> 0) | 0) {
    break label$1
   }
   i64toi32_i32$1 = ($1_1 + 32 | 0) + 8 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$0 = 0;
   HEAP32[($1_1 + 32 | 0) >> 2] = 0;
   HEAP32[($1_1 + 36 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($1_1 + 48 | 0) >> 2] = 1065353216;
   label$2 : {
    label$3 : {
     if ($3_1) {
      break label$3
     }
     $4_1 = 0;
     break label$2;
    }
    $3_1 = 0;
    label$4 : while (1) {
     $4_1 = $3_1 << 2 | 0;
     $2_1 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + Math_imul(HEAP32[($2_1 + $4_1 | 0) >> 2] | 0, 12) | 0;
     HEAP32[(($1_1 + 8 | 0) + 8 | 0) >> 2] = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$0 = HEAP32[$2_1 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
     $61_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $1_1;
     HEAP32[($1_1 + 8 | 0) >> 2] = $61_1;
     HEAP32[($1_1 + 12 | 0) >> 2] = i64toi32_i32$1;
     label$5 : {
      label$6 : {
       $5_1 = $91($1_1 + 32 | 0 | 0, $1_1 + 8 | 0 | 0) | 0;
       if ($5_1) {
        break label$6
       }
       $2_1 = HEAP32[((HEAP32[($0_1 + 40 | 0) >> 2] | 0) + $4_1 | 0) >> 2] | 0;
       $4_1 = global$1;
       HEAP32[($1_1 + 64 | 0) >> 2] = $1_1 + 8 | 0;
       $92($1_1 + 72 | 0 | 0, $1_1 + 32 | 0 | 0, $1_1 + 8 | 0 | 0, $4_1 + 1995 | 0 | 0, $1_1 + 64 | 0 | 0, $1_1 + 56 | 0 | 0);
       HEAP32[((HEAP32[($1_1 + 72 | 0) >> 2] | 0) + 20 | 0) >> 2] = $2_1;
       $2_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
       break label$5;
      }
      $2_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
      HEAP32[($2_1 + $4_1 | 0) >> 2] = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
     }
     $3_1 = $3_1 + 1 | 0;
     $4_1 = ((HEAP32[($0_1 + 44 | 0) >> 2] | 0) - $2_1 | 0) >> 2 | 0;
     if ($3_1 >>> 0 < $4_1 >>> 0) {
      continue label$4
     }
     break label$4;
    };
   }
   label$7 : {
    label$8 : {
     label$9 : {
      label$10 : {
       label$11 : {
        label$12 : {
         label$13 : {
          $2_1 = HEAP32[($0_1 + 84 | 0) >> 2] | 0;
          $5_1 = HEAP32[($2_1 + 68 | 0) >> 2] | 0;
          $3_1 = ($4_1 >>> 0) / (3 >>> 0) | 0;
          if ((((HEAP32[($2_1 + 76 | 0) >> 2] | 0) - $5_1 | 0 | 0) / (28 | 0) | 0) >>> 0 >= $3_1 >>> 0) {
           break label$13
          }
          if ($4_1 >>> 0 >= 460175070 >>> 0) {
           break label$12
          }
          $6_1 = HEAP32[($2_1 + 72 | 0) >> 2] | 0;
          $7_1 = Math_imul($3_1, 28);
          $8_1 = $2030($7_1 | 0) | 0;
          $9_1 = $8_1 + $7_1 | 0;
          $6_1 = $6_1 - $5_1 | 0;
          $8_1 = $8_1 + Math_imul(($6_1 | 0) / (28 | 0) | 0, 28) | 0;
          $7_1 = $8_1 + Math_imul(($6_1 | 0) / (-28 | 0) | 0, 28) | 0;
          label$14 : {
           if (($6_1 | 0) < (1 | 0)) {
            break label$14
           }
           $2173($7_1 | 0, $5_1 | 0, $6_1 | 0) | 0;
          }
          HEAP32[($2_1 + 76 | 0) >> 2] = $9_1;
          HEAP32[($2_1 + 72 | 0) >> 2] = $8_1;
          HEAP32[($2_1 + 68 | 0) >> 2] = $7_1;
          if (!$5_1) {
           break label$13
          }
          $2032($5_1 | 0);
         }
         label$15 : {
          $2_1 = HEAP32[($0_1 + 84 | 0) >> 2] | 0;
          $5_1 = HEAP32[($2_1 + 80 | 0) >> 2] | 0;
          if ((((HEAP32[($2_1 + 88 | 0) >> 2] | 0) - $5_1 | 0) >> 4 | 0) >>> 0 >= $3_1 >>> 0) {
           break label$15
          }
          if ($4_1 >>> 0 >= 805306368 >>> 0) {
           break label$11
          }
          $7_1 = HEAP32[($2_1 + 84 | 0) >> 2] | 0;
          $8_1 = $3_1 << 4 | 0;
          $6_1 = $2030($8_1 | 0) | 0;
          $8_1 = $6_1 + $8_1 | 0;
          $7_1 = $7_1 - $5_1 | 0;
          $9_1 = $6_1 + $7_1 | 0;
          label$16 : {
           if (($7_1 | 0) < (1 | 0)) {
            break label$16
           }
           $2173($6_1 | 0, $5_1 | 0, $7_1 | 0) | 0;
          }
          HEAP32[($2_1 + 88 | 0) >> 2] = $8_1;
          HEAP32[($2_1 + 84 | 0) >> 2] = $9_1;
          HEAP32[($2_1 + 80 | 0) >> 2] = $6_1;
          if (!$5_1) {
           break label$15
          }
          $2032($5_1 | 0);
         }
         i64toi32_i32$0 = ($1_1 + 8 | 0) + 8 | 0;
         i64toi32_i32$1 = 0;
         HEAP32[i64toi32_i32$0 >> 2] = 0;
         HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
         i64toi32_i32$0 = $1_1;
         i64toi32_i32$1 = 0;
         HEAP32[($1_1 + 8 | 0) >> 2] = 0;
         HEAP32[($1_1 + 12 | 0) >> 2] = i64toi32_i32$1;
         HEAP32[($1_1 + 24 | 0) >> 2] = 1065353216;
         if ($4_1 >>> 0 < 3 >>> 0) {
          break label$7
         }
         $10_1 = $3_1 >>> 0 > 1 >>> 0 ? $3_1 : 1;
         $3_1 = 0;
         $11_1 = 0;
         label$17 : while (1) {
          $2_1 = HEAP32[($0_1 + 84 | 0) >> 2] | 0;
          $4_1 = HEAP32[($2_1 + 56 | 0) >> 2] | 0;
          $5_1 = (HEAP32[($0_1 + 40 | 0) >> 2] | 0) + ($3_1 << 2 | 0) | 0;
          $12_1 = HEAP32[$5_1 >> 2] | 0;
          $6_1 = $4_1 + ($12_1 << 5 | 0) | 0;
          $9_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
          $8_1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
          $13_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
          $7_1 = $4_1 + ($13_1 << 5 | 0) | 0;
          $14_1 = HEAP32[($7_1 + 8 | 0) >> 2] | 0;
          $15_1 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
          $17_1 = Math_fround(HEAPF32[$7_1 >> 2]);
          $16_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
          $4_1 = $4_1 + ($16_1 << 5 | 0) | 0;
          $7_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
          $5_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
          label$18 : {
           label$19 : {
            $18_1 = Math_fround(HEAPF32[$6_1 >> 2]);
            $19_1 = Math_fround(HEAPF32[$4_1 >> 2]);
            if ($18_1 != $19_1) {
             break label$19
            }
            if ((wasm2js_scratch_store_i32(2, $8_1), wasm2js_scratch_load_f32()) != (wasm2js_scratch_store_i32(2, $5_1), wasm2js_scratch_load_f32())) {
             break label$19
            }
            if ((wasm2js_scratch_store_i32(2, $9_1), wasm2js_scratch_load_f32()) == (wasm2js_scratch_store_i32(2, $7_1), wasm2js_scratch_load_f32())) {
             break label$18
            }
           }
           label$20 : {
            if ($19_1 != $17_1) {
             break label$20
            }
            if ((wasm2js_scratch_store_i32(2, $5_1), wasm2js_scratch_load_f32()) != (wasm2js_scratch_store_i32(2, $15_1), wasm2js_scratch_load_f32())) {
             break label$20
            }
            if ((wasm2js_scratch_store_i32(2, $7_1), wasm2js_scratch_load_f32()) == (wasm2js_scratch_store_i32(2, $14_1), wasm2js_scratch_load_f32())) {
             break label$18
            }
           }
           label$21 : {
            label$22 : {
             if ($17_1 == $18_1) {
              break label$22
             }
             $20_1 = (wasm2js_scratch_store_i32(2, $15_1), wasm2js_scratch_load_f32());
             $21_1 = (wasm2js_scratch_store_i32(2, $8_1), wasm2js_scratch_load_f32());
             break label$21;
            }
            $20_1 = (wasm2js_scratch_store_i32(2, $15_1), wasm2js_scratch_load_f32());
            $21_1 = (wasm2js_scratch_store_i32(2, $8_1), wasm2js_scratch_load_f32());
            if ($20_1 != $21_1) {
             break label$21
            }
            if ((wasm2js_scratch_store_i32(2, $14_1), wasm2js_scratch_load_f32()) == (wasm2js_scratch_store_i32(2, $9_1), wasm2js_scratch_load_f32())) {
             break label$18
            }
           }
           $6_1 = $12_1 << 1 | 0;
           $8_1 = $13_1 << 1 | 0;
           $15_1 = $16_1 << 1 | 0;
           $19_1 = Math_fround($19_1 - $18_1);
           $20_1 = Math_fround($20_1 - $21_1);
           $21_1 = Math_fround((wasm2js_scratch_store_i32(2, $5_1), wasm2js_scratch_load_f32()) - $21_1);
           $17_1 = Math_fround($17_1 - $18_1);
           $18_1 = Math_fround(Math_fround($19_1 * $20_1) - Math_fround($21_1 * $17_1));
           $22_1 = (wasm2js_scratch_store_i32(2, $9_1), wasm2js_scratch_load_f32());
           $23_1 = Math_fround((wasm2js_scratch_store_i32(2, $7_1), wasm2js_scratch_load_f32()) - $22_1);
           $346_1 = Math_fround($23_1 * $17_1);
           $17_1 = Math_fround((wasm2js_scratch_store_i32(2, $14_1), wasm2js_scratch_load_f32()) - $22_1);
           $19_1 = Math_fround($346_1 - Math_fround($19_1 * $17_1));
           $17_1 = Math_fround(Math_fround($21_1 * $17_1) - Math_fround($23_1 * $20_1));
           $4_1 = HEAP32[($2_1 + 72 | 0) >> 2] | 0;
           $7_1 = HEAP32[($2_1 + 68 | 0) >> 2] | 0;
           $9_1 = $4_1 - $7_1 | 0;
           $5_1 = ($9_1 | 0) / (28 | 0) | 0;
           label$23 : {
            label$24 : {
             $14_1 = HEAP32[($2_1 + 76 | 0) >> 2] | 0;
             if ($14_1 >>> 0 <= $4_1 >>> 0) {
              break label$24
             }
             HEAP8[($4_1 + 24 | 0) >> 0] = 0;
             HEAPF32[($4_1 + 12 | 0) >> 2] = $17_1;
             HEAP32[($4_1 + 8 | 0) >> 2] = $8_1;
             HEAP32[($4_1 + 4 | 0) >> 2] = $15_1;
             HEAP32[$4_1 >> 2] = $6_1;
             HEAPF32[($4_1 + 20 | 0) >> 2] = $18_1;
             HEAPF32[($4_1 + 16 | 0) >> 2] = $19_1;
             $33_1 = HEAPU8[($1_1 + 72 | 0) >> 0] | 0 | ((HEAPU8[($1_1 + 73 | 0) >> 0] | 0) << 8 | 0) | 0;
             HEAP8[($4_1 + 25 | 0) >> 0] = $33_1;
             HEAP8[($4_1 + 26 | 0) >> 0] = $33_1 >>> 8 | 0;
             HEAP8[($4_1 + 27 | 0) >> 0] = HEAPU8[(($1_1 + 72 | 0) + 2 | 0) >> 0] | 0;
             HEAP32[($2_1 + 72 | 0) >> 2] = $4_1 + 28 | 0;
             break label$23;
            }
            $4_1 = $5_1 + 1 | 0;
            if ($4_1 >>> 0 >= 153391690 >>> 0) {
             break label$10
            }
            label$25 : {
             label$26 : {
              $14_1 = ($14_1 - $7_1 | 0 | 0) / (28 | 0) | 0;
              $12_1 = $14_1 << 1 | 0;
              $14_1 = $14_1 >>> 0 < 76695844 >>> 0 ? ($12_1 >>> 0 < $4_1 >>> 0 ? $4_1 : $12_1) : 153391689;
              if ($14_1) {
               break label$26
              }
              $12_1 = 0;
              break label$25;
             }
             if ($14_1 >>> 0 >= 153391690 >>> 0) {
              break label$9
             }
             $12_1 = $2030(Math_imul($14_1, 28) | 0) | 0;
            }
            $4_1 = $12_1 + Math_imul($5_1, 28) | 0;
            HEAP8[($4_1 + 24 | 0) >> 0] = 0;
            HEAPF32[($4_1 + 12 | 0) >> 2] = $17_1;
            HEAP32[($4_1 + 8 | 0) >> 2] = $8_1;
            HEAP32[($4_1 + 4 | 0) >> 2] = $15_1;
            HEAP32[$4_1 >> 2] = $6_1;
            HEAPF32[($4_1 + 20 | 0) >> 2] = $18_1;
            HEAPF32[($4_1 + 16 | 0) >> 2] = $19_1;
            $34_1 = HEAPU8[($1_1 + 72 | 0) >> 0] | 0 | ((HEAPU8[($1_1 + 73 | 0) >> 0] | 0) << 8 | 0) | 0;
            HEAP8[($4_1 + 25 | 0) >> 0] = $34_1;
            HEAP8[($4_1 + 26 | 0) >> 0] = $34_1 >>> 8 | 0;
            HEAP8[($4_1 + 27 | 0) >> 0] = HEAPU8[(($1_1 + 72 | 0) + 2 | 0) >> 0] | 0;
            $13_1 = $4_1 + Math_imul(($9_1 | 0) / (-28 | 0) | 0, 28) | 0;
            $14_1 = $12_1 + Math_imul($14_1, 28) | 0;
            $4_1 = $4_1 + 28 | 0;
            label$27 : {
             if (($9_1 | 0) < (1 | 0)) {
              break label$27
             }
             $2173($13_1 | 0, $7_1 | 0, $9_1 | 0) | 0;
            }
            HEAP32[($2_1 + 76 | 0) >> 2] = $14_1;
            HEAP32[($2_1 + 72 | 0) >> 2] = $4_1;
            HEAP32[($2_1 + 68 | 0) >> 2] = $13_1;
            if (!$7_1) {
             break label$23
            }
            $2032($7_1 | 0);
           }
           $93($5_1 | 0, $6_1 | 0, $15_1 | 0, $1_1 + 8 | 0 | 0, HEAP32[($0_1 + 84 | 0) >> 2] | 0 | 0);
           $93($5_1 | 0, $15_1 | 0, $8_1 | 0, $1_1 + 8 | 0 | 0, HEAP32[($0_1 + 84 | 0) >> 2] | 0 | 0);
           $93($5_1 | 0, $8_1 | 0, $6_1 | 0, $1_1 + 8 | 0 | 0, HEAP32[($0_1 + 84 | 0) >> 2] | 0 | 0);
          }
          $3_1 = $3_1 + 3 | 0;
          $11_1 = $11_1 + 1 | 0;
          if (($11_1 | 0) == ($10_1 | 0)) {
           break label$8
          }
          continue label$17;
         };
        }
        $3(global$1 + 1869 | 0 | 0);
        abort();
       }
       $3(global$1 + 1869 | 0 | 0);
       abort();
      }
      $2097($2_1 + 68 | 0 | 0);
      abort();
     }
     $3(global$1 + 1869 | 0 | 0);
     abort();
    }
    label$28 : {
     $2_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
     if (!$2_1) {
      break label$28
     }
     label$29 : {
      label$30 : {
       label$31 : {
        label$32 : while (1) {
         $5_1 = $2_1 + 16 | 0;
         label$33 : {
          label$34 : {
           $3_1 = HEAP32[($0_1 + 84 | 0) >> 2] | 0;
           $4_1 = HEAP32[($3_1 + 84 | 0) >> 2] | 0;
           $7_1 = HEAP32[($3_1 + 88 | 0) >> 2] | 0;
           if (($4_1 | 0) == ($7_1 | 0)) {
            break label$34
           }
           i64toi32_i32$2 = $5_1;
           i64toi32_i32$1 = HEAP32[$5_1 >> 2] | 0;
           i64toi32_i32$0 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
           $539_1 = i64toi32_i32$1;
           i64toi32_i32$1 = $4_1;
           HEAP32[$4_1 >> 2] = $539_1;
           HEAP32[($4_1 + 4 | 0) >> 2] = i64toi32_i32$0;
           i64toi32_i32$2 = $5_1 + 8 | 0;
           i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
           i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
           $544_1 = i64toi32_i32$0;
           i64toi32_i32$0 = $4_1 + 8 | 0;
           HEAP32[i64toi32_i32$0 >> 2] = $544_1;
           HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
           HEAP32[($3_1 + 84 | 0) >> 2] = $4_1 + 16 | 0;
           break label$33;
          }
          $15_1 = $3_1 + 80 | 0;
          $6_1 = HEAP32[$15_1 >> 2] | 0;
          $9_1 = $4_1 - $6_1 | 0;
          $8_1 = $9_1 >> 4 | 0;
          $4_1 = $8_1 + 1 | 0;
          if ($4_1 >>> 0 >= 268435456 >>> 0) {
           break label$31
          }
          label$35 : {
           label$36 : {
            $7_1 = $7_1 - $6_1 | 0;
            $15_1 = $7_1 >> 3 | 0;
            $7_1 = ($7_1 >> 4 | 0) >>> 0 < 134217727 >>> 0 ? ($15_1 >>> 0 < $4_1 >>> 0 ? $4_1 : $15_1) : 268435455;
            if ($7_1) {
             break label$36
            }
            $4_1 = 0;
            break label$35;
           }
           if ($7_1 >>> 0 >= 268435456 >>> 0) {
            break label$30
           }
           $4_1 = $2030($7_1 << 4 | 0 | 0) | 0;
          }
          $8_1 = $4_1 + ($8_1 << 4 | 0) | 0;
          i64toi32_i32$2 = $5_1;
          i64toi32_i32$1 = HEAP32[$5_1 >> 2] | 0;
          i64toi32_i32$0 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
          $588_1 = i64toi32_i32$1;
          i64toi32_i32$1 = $8_1;
          HEAP32[$8_1 >> 2] = $588_1;
          HEAP32[($8_1 + 4 | 0) >> 2] = i64toi32_i32$0;
          i64toi32_i32$2 = $5_1 + 8 | 0;
          i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
          $593_1 = i64toi32_i32$0;
          i64toi32_i32$0 = $8_1 + 8 | 0;
          HEAP32[i64toi32_i32$0 >> 2] = $593_1;
          HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
          $5_1 = $4_1 + ($7_1 << 4 | 0) | 0;
          $7_1 = $8_1 + 16 | 0;
          label$37 : {
           if (($9_1 | 0) < (1 | 0)) {
            break label$37
           }
           $2173($4_1 | 0, $6_1 | 0, $9_1 | 0) | 0;
          }
          HEAP32[($3_1 + 88 | 0) >> 2] = $5_1;
          HEAP32[($3_1 + 84 | 0) >> 2] = $7_1;
          HEAP32[($3_1 + 80 | 0) >> 2] = $4_1;
          if (!$6_1) {
           break label$33
          }
          $2032($6_1 | 0);
         }
         $2_1 = HEAP32[$2_1 >> 2] | 0;
         if (!$2_1) {
          break label$29
         }
         continue label$32;
        };
       }
       $2097($15_1 | 0);
       abort();
      }
      $3(global$1 + 1869 | 0 | 0);
      abort();
     }
     $2_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
    }
    if (!$2_1) {
     break label$7
    }
    label$38 : while (1) {
     $0_1 = HEAP32[$2_1 >> 2] | 0;
     $2032($2_1 | 0);
     $2_1 = $0_1;
     if ($2_1) {
      continue label$38
     }
     break label$38;
    };
   }
   $0_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
   HEAP32[($1_1 + 8 | 0) >> 2] = 0;
   label$39 : {
    if (!$0_1) {
     break label$39
    }
    $2032($0_1 | 0);
   }
   label$40 : {
    $0_1 = HEAP32[($1_1 + 40 | 0) >> 2] | 0;
    if (!$0_1) {
     break label$40
    }
    label$41 : while (1) {
     $2_1 = HEAP32[$0_1 >> 2] | 0;
     $2032($0_1 | 0);
     $0_1 = $2_1;
     if ($2_1) {
      continue label$41
     }
     break label$41;
    };
   }
   $0_1 = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
   HEAP32[($1_1 + 32 | 0) >> 2] = 0;
   if (!$0_1) {
    break label$1
   }
   $2032($0_1 | 0);
  }
  global$0 = $1_1 + 80 | 0;
 }
 
 function $91($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $2_1 = 0, $6_1 = 0, $3_1 = 0, $5_1 = 0, $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0);
  $2_1 = $576($0_1 + 12 | 0 | 0, $1_1 | 0) | 0;
  $3_1 = 0;
  label$1 : {
   $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!$4_1) {
    break label$1
   }
   label$2 : {
    label$3 : {
     $5_1 = __wasm_popcnt_i32($4_1 | 0) | 0;
     if ($5_1 >>> 0 > 1 >>> 0) {
      break label$3
     }
     $6_1 = ($4_1 + -1 | 0) & $2_1 | 0;
     break label$2;
    }
    $6_1 = $2_1;
    if ($2_1 >>> 0 < $4_1 >>> 0) {
     break label$2
    }
    $6_1 = ($2_1 >>> 0) % ($4_1 >>> 0) | 0;
   }
   $0_1 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + ($6_1 << 2 | 0) | 0) >> 2] | 0;
   if (!$0_1) {
    break label$1
   }
   $0_1 = HEAP32[$0_1 >> 2] | 0;
   if (!$0_1) {
    break label$1
   }
   $7_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
   $8_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
   $9_1 = Math_fround(HEAPF32[$1_1 >> 2]);
   label$4 : {
    label$5 : {
     if ($5_1 >>> 0 > 1 >>> 0) {
      break label$5
     }
     $4_1 = $4_1 + -1 | 0;
     label$6 : while (1) {
      label$7 : {
       label$8 : {
        $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        if (($1_1 | 0) == ($2_1 | 0)) {
         break label$8
        }
        if (($1_1 & $4_1 | 0 | 0) != ($6_1 | 0)) {
         break label$1
        }
        break label$7;
       }
       if (Math_fround(HEAPF32[($0_1 + 8 | 0) >> 2]) != $9_1) {
        break label$7
       }
       if (Math_fround(HEAPF32[($0_1 + 12 | 0) >> 2]) != $8_1) {
        break label$7
       }
       if (Math_fround(HEAPF32[($0_1 + 16 | 0) >> 2]) == $7_1) {
        break label$4
       }
      }
      $0_1 = HEAP32[$0_1 >> 2] | 0;
      if ($0_1) {
       continue label$6
      }
      break label$1;
     };
    }
    label$9 : while (1) {
     label$10 : {
      label$11 : {
       $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
       if (($1_1 | 0) == ($2_1 | 0)) {
        break label$11
       }
       label$12 : {
        if ($1_1 >>> 0 < $4_1 >>> 0) {
         break label$12
        }
        $1_1 = ($1_1 >>> 0) % ($4_1 >>> 0) | 0;
       }
       if (($1_1 | 0) != ($6_1 | 0)) {
        break label$1
       }
       break label$10;
      }
      if (Math_fround(HEAPF32[($0_1 + 8 | 0) >> 2]) != $9_1) {
       break label$10
      }
      if (Math_fround(HEAPF32[($0_1 + 12 | 0) >> 2]) != $8_1) {
       break label$10
      }
      if (Math_fround(HEAPF32[($0_1 + 16 | 0) >> 2]) == $7_1) {
       break label$4
      }
     }
     $0_1 = HEAP32[$0_1 >> 2] | 0;
     if ($0_1) {
      continue label$9
     }
     break label$1;
    };
   }
   $3_1 = $0_1;
  }
  return $3_1 | 0;
 }
 
 function $92($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $7_1 = 0, $10_1 = 0, $6_1 = 0, $9_1 = 0, $13_1 = Math_fround(0), $12_1 = Math_fround(0), $8_1 = 0, $11_1 = Math_fround(0), i64toi32_i32$1 = 0;
  $6_1 = $576($1_1 + 12 | 0 | 0, $2_1 | 0) | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     if ($7_1) {
      break label$3
     }
     break label$2;
    }
    label$4 : {
     label$5 : {
      $8_1 = __wasm_popcnt_i32($7_1 | 0) | 0;
      if ($8_1 >>> 0 > 1 >>> 0) {
       break label$5
      }
      $9_1 = ($7_1 + -1 | 0) & $6_1 | 0;
      break label$4;
     }
     $9_1 = $6_1;
     if ($6_1 >>> 0 < $7_1 >>> 0) {
      break label$4
     }
     $9_1 = ($6_1 >>> 0) % ($7_1 >>> 0) | 0;
    }
    $10_1 = HEAP32[((HEAP32[$1_1 >> 2] | 0) + ($9_1 << 2 | 0) | 0) >> 2] | 0;
    if (!$10_1) {
     break label$2
    }
    $10_1 = HEAP32[$10_1 >> 2] | 0;
    if (!$10_1) {
     break label$2
    }
    $11_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
    $12_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
    $13_1 = Math_fround(HEAPF32[$2_1 >> 2]);
    label$6 : {
     if ($8_1 >>> 0 > 1 >>> 0) {
      break label$6
     }
     $8_1 = $7_1 + -1 | 0;
     label$7 : while (1) {
      label$8 : {
       $2_1 = HEAP32[($10_1 + 4 | 0) >> 2] | 0;
       if (($2_1 | 0) == ($6_1 | 0)) {
        break label$8
       }
       if (($2_1 & $8_1 | 0 | 0) != ($9_1 | 0)) {
        break label$2
       }
      }
      label$9 : {
       if (Math_fround(HEAPF32[($10_1 + 8 | 0) >> 2]) != $13_1) {
        break label$9
       }
       if (Math_fround(HEAPF32[($10_1 + 12 | 0) >> 2]) != $12_1) {
        break label$9
       }
       if (Math_fround(HEAPF32[($10_1 + 16 | 0) >> 2]) != $11_1) {
        break label$9
       }
       $7_1 = 0;
       break label$1;
      }
      $10_1 = HEAP32[$10_1 >> 2] | 0;
      if ($10_1) {
       continue label$7
      }
      break label$2;
     };
    }
    label$10 : while (1) {
     label$11 : {
      $2_1 = HEAP32[($10_1 + 4 | 0) >> 2] | 0;
      if (($2_1 | 0) == ($6_1 | 0)) {
       break label$11
      }
      label$12 : {
       if ($2_1 >>> 0 < $7_1 >>> 0) {
        break label$12
       }
       $2_1 = ($2_1 >>> 0) % ($7_1 >>> 0) | 0;
      }
      if (($2_1 | 0) != ($9_1 | 0)) {
       break label$2
      }
     }
     label$13 : {
      if (Math_fround(HEAPF32[($10_1 + 8 | 0) >> 2]) != $13_1) {
       break label$13
      }
      if (Math_fround(HEAPF32[($10_1 + 12 | 0) >> 2]) != $12_1) {
       break label$13
      }
      if (Math_fround(HEAPF32[($10_1 + 16 | 0) >> 2]) != $11_1) {
       break label$13
      }
      $7_1 = 0;
      break label$1;
     }
     $10_1 = HEAP32[$10_1 >> 2] | 0;
     if ($10_1) {
      continue label$10
     }
     break label$10;
    };
   }
   $10_1 = $2030(24 | 0) | 0;
   $2_1 = HEAP32[$4_1 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
   HEAP32[($10_1 + 8 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
   HEAP32[($10_1 + 12 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[($10_1 + 16 | 0) >> 2] = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
   HEAP32[($10_1 + 20 | 0) >> 2] = 0;
   HEAP32[($10_1 + 4 | 0) >> 2] = $6_1;
   HEAP32[$10_1 >> 2] = 0;
   $13_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
   $12_1 = Math_fround(((HEAP32[($1_1 + 12 | 0) >> 2] | 0) + 1 | 0) >>> 0);
   label$14 : {
    label$15 : {
     if (!$7_1) {
      break label$15
     }
     if (Math_fround($13_1 * Math_fround($7_1 >>> 0)) < $12_1 ^ 1 | 0) {
      break label$14
     }
    }
    $7_1 = $7_1 << 1 | 0 | ($7_1 >>> 0 < 3 >>> 0 | ($7_1 & ($7_1 + -1 | 0) | 0 | 0) != (0 | 0) | 0) | 0;
    label$16 : {
     label$17 : {
      $13_1 = Math_fround(Math_ceil(Math_fround($12_1 / $13_1)));
      if (!($13_1 < Math_fround(4294967296.0) & $13_1 >= Math_fround(0.0) | 0)) {
       break label$17
      }
      $2_1 = ~~$13_1 >>> 0;
      break label$16;
     }
     $2_1 = 0;
    }
    $128($1_1 | 0, ($7_1 >>> 0 < $2_1 >>> 0 ? $2_1 : $7_1) | 0);
    label$18 : {
     $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     if ($7_1 & ($7_1 + -1 | 0) | 0) {
      break label$18
     }
     $9_1 = ($7_1 + -1 | 0) & $6_1 | 0;
     break label$14;
    }
    label$19 : {
     if ($6_1 >>> 0 >= $7_1 >>> 0) {
      break label$19
     }
     $9_1 = $6_1;
     break label$14;
    }
    $9_1 = ($6_1 >>> 0) % ($7_1 >>> 0) | 0;
   }
   label$20 : {
    label$21 : {
     label$22 : {
      $2_1 = (HEAP32[$1_1 >> 2] | 0) + ($9_1 << 2 | 0) | 0;
      $6_1 = HEAP32[$2_1 >> 2] | 0;
      if ($6_1) {
       break label$22
      }
      HEAP32[$10_1 >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
      HEAP32[($1_1 + 8 | 0) >> 2] = $10_1;
      HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
      $6_1 = HEAP32[$10_1 >> 2] | 0;
      if (!$6_1) {
       break label$20
      }
      $6_1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
      label$23 : {
       label$24 : {
        $2_1 = $7_1 + -1 | 0;
        if ($7_1 & $2_1 | 0) {
         break label$24
        }
        $6_1 = $6_1 & $2_1 | 0;
        break label$23;
       }
       if ($6_1 >>> 0 < $7_1 >>> 0) {
        break label$23
       }
       $6_1 = ($6_1 >>> 0) % ($7_1 >>> 0) | 0;
      }
      $6_1 = (HEAP32[$1_1 >> 2] | 0) + ($6_1 << 2 | 0) | 0;
      break label$21;
     }
     HEAP32[$10_1 >> 2] = HEAP32[$6_1 >> 2] | 0;
    }
    HEAP32[$6_1 >> 2] = $10_1;
   }
   $7_1 = 1;
   HEAP32[($1_1 + 12 | 0) >> 2] = (HEAP32[($1_1 + 12 | 0) >> 2] | 0) + 1 | 0;
  }
  HEAP8[($0_1 + 4 | 0) >> 0] = $7_1;
  HEAP32[$0_1 >> 2] = $10_1;
 }
 
 function $93($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $8_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $9_1 = 0, $5_1 = 0, $7_1 = 0, $6_1 = 0, $11_1 = 0, $13_1 = 0, $10_1 = 0, $12_1 = 0, $47_1 = 0, $52_1 = 0, $96_1 = 0, $101_1 = 0, $210_1 = 0, $215_1 = 0, $259_1 = 0, $264_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[$5_1 >> 2] = $2_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        $6_1 = $94($3_1 | 0, $5_1 | 0) | 0;
        if ($6_1) {
         break label$6
        }
        HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
        HEAP32[$5_1 >> 2] = $1_1;
        label$7 : {
         $6_1 = $94($3_1 | 0, $5_1 | 0) | 0;
         if (!$6_1) {
          break label$7
         }
         $7_1 = $6_1 + 16 | 0;
         label$8 : {
          label$9 : {
           $8_1 = HEAP32[($4_1 + 84 | 0) >> 2] | 0;
           $9_1 = HEAP32[($4_1 + 88 | 0) >> 2] | 0;
           if (($8_1 | 0) == ($9_1 | 0)) {
            break label$9
           }
           i64toi32_i32$2 = $7_1;
           i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
           i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
           $47_1 = i64toi32_i32$0;
           i64toi32_i32$0 = $8_1;
           HEAP32[$8_1 >> 2] = $47_1;
           HEAP32[($8_1 + 4 | 0) >> 2] = i64toi32_i32$1;
           i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
           i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
           i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
           $52_1 = i64toi32_i32$1;
           i64toi32_i32$1 = $8_1 + 8 | 0;
           HEAP32[i64toi32_i32$1 >> 2] = $52_1;
           HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
           HEAP32[($4_1 + 84 | 0) >> 2] = $8_1 + 16 | 0;
           break label$8;
          }
          $10_1 = $4_1 + 80 | 0;
          $11_1 = HEAP32[$10_1 >> 2] | 0;
          $12_1 = $8_1 - $11_1 | 0;
          $13_1 = $12_1 >> 4 | 0;
          $8_1 = $13_1 + 1 | 0;
          if ($8_1 >>> 0 >= 268435456 >>> 0) {
           break label$4
          }
          label$10 : {
           label$11 : {
            $9_1 = $9_1 - $11_1 | 0;
            $10_1 = $9_1 >> 3 | 0;
            $9_1 = ($9_1 >> 4 | 0) >>> 0 < 134217727 >>> 0 ? ($10_1 >>> 0 < $8_1 >>> 0 ? $8_1 : $10_1) : 268435455;
            if ($9_1) {
             break label$11
            }
            $8_1 = 0;
            break label$10;
           }
           if ($9_1 >>> 0 >= 268435456 >>> 0) {
            break label$3
           }
           $8_1 = $2030($9_1 << 4 | 0 | 0) | 0;
          }
          $13_1 = $8_1 + ($13_1 << 4 | 0) | 0;
          i64toi32_i32$2 = $7_1;
          i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
          $96_1 = i64toi32_i32$0;
          i64toi32_i32$0 = $13_1;
          HEAP32[i64toi32_i32$0 >> 2] = $96_1;
          HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
          i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
          i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
          $101_1 = i64toi32_i32$1;
          i64toi32_i32$1 = $13_1 + 8 | 0;
          HEAP32[i64toi32_i32$1 >> 2] = $101_1;
          HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
          $7_1 = $8_1 + ($9_1 << 4 | 0) | 0;
          $9_1 = $13_1 + 16 | 0;
          label$12 : {
           if (($12_1 | 0) < (1 | 0)) {
            break label$12
           }
           $2173($8_1 | 0, $11_1 | 0, $12_1 | 0) | 0;
          }
          HEAP32[($4_1 + 88 | 0) >> 2] = $7_1;
          HEAP32[($4_1 + 84 | 0) >> 2] = $9_1;
          HEAP32[($4_1 + 80 | 0) >> 2] = $8_1;
          if (!$11_1) {
           break label$8
          }
          $2032($11_1 | 0);
         }
         $95($5_1 | 0, $3_1 | 0, $6_1 | 0);
         $4_1 = HEAP32[$5_1 >> 2] | 0;
         HEAP32[$5_1 >> 2] = 0;
         if (!$4_1) {
          break label$7
         }
         $2032($4_1 | 0);
        }
        $4_1 = $2030(32 | 0) | 0;
        HEAP32[($4_1 + 28 | 0) >> 2] = $2_1;
        HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
        HEAP32[($4_1 + 20 | 0) >> 2] = -1;
        HEAP32[($4_1 + 16 | 0) >> 2] = $0_1;
        HEAP32[($4_1 + 12 | 0) >> 2] = $2_1;
        HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
        $6_1 = $577($3_1 + 12 | 0 | 0, $4_1 + 8 | 0 | 0) | 0;
        HEAP32[$4_1 >> 2] = 0;
        HEAP32[($4_1 + 4 | 0) >> 2] = $6_1;
        $96($5_1 | 0, $3_1 | 0, $4_1 | 0);
        if (HEAPU8[($5_1 + 4 | 0) >> 0] | 0) {
         break label$5
        }
        $2032($4_1 | 0);
        break label$5;
       }
       label$13 : {
        label$14 : {
         $2_1 = HEAP32[($4_1 + 68 | 0) >> 2] | 0;
         $7_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
         $1_1 = $2_1 + Math_imul($7_1, 28) | 0;
         $8_1 = $2_1 + Math_imul($0_1, 28) | 0;
         if (Math_fround(HEAPF32[($1_1 + 12 | 0) >> 2]) != Math_fround(HEAPF32[($8_1 + 12 | 0) >> 2])) {
          break label$14
         }
         if (Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]) != Math_fround(HEAPF32[($8_1 + 16 | 0) >> 2])) {
          break label$14
         }
         if (Math_fround(HEAPF32[(($2_1 + Math_imul($7_1, 28) | 0) + 20 | 0) >> 2]) == Math_fround(HEAPF32[(($2_1 + Math_imul($0_1, 28) | 0) + 20 | 0) >> 2])) {
          break label$13
         }
        }
        $1_1 = $6_1 + 16 | 0;
        HEAP32[($6_1 + 20 | 0) >> 2] = $0_1;
        label$15 : {
         $2_1 = HEAP32[($4_1 + 84 | 0) >> 2] | 0;
         $8_1 = HEAP32[($4_1 + 88 | 0) >> 2] | 0;
         if (($2_1 | 0) == ($8_1 | 0)) {
          break label$15
         }
         i64toi32_i32$2 = $1_1;
         i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
         i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
         $210_1 = i64toi32_i32$0;
         i64toi32_i32$0 = $2_1;
         HEAP32[$2_1 >> 2] = $210_1;
         HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$1;
         i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
         i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
         i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
         $215_1 = i64toi32_i32$1;
         i64toi32_i32$1 = $2_1 + 8 | 0;
         HEAP32[i64toi32_i32$1 >> 2] = $215_1;
         HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
         HEAP32[($4_1 + 84 | 0) >> 2] = $2_1 + 16 | 0;
         break label$13;
        }
        $9_1 = $4_1 + 80 | 0;
        $0_1 = HEAP32[$9_1 >> 2] | 0;
        $11_1 = $2_1 - $0_1 | 0;
        $7_1 = $11_1 >> 4 | 0;
        $2_1 = $7_1 + 1 | 0;
        if ($2_1 >>> 0 >= 268435456 >>> 0) {
         break label$2
        }
        label$16 : {
         label$17 : {
          $8_1 = $8_1 - $0_1 | 0;
          $9_1 = $8_1 >> 3 | 0;
          $8_1 = ($8_1 >> 4 | 0) >>> 0 < 134217727 >>> 0 ? ($9_1 >>> 0 < $2_1 >>> 0 ? $2_1 : $9_1) : 268435455;
          if ($8_1) {
           break label$17
          }
          $2_1 = 0;
          break label$16;
         }
         if ($8_1 >>> 0 >= 268435456 >>> 0) {
          break label$1
         }
         $2_1 = $2030($8_1 << 4 | 0 | 0) | 0;
        }
        $7_1 = $2_1 + ($7_1 << 4 | 0) | 0;
        i64toi32_i32$2 = $1_1;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $259_1 = i64toi32_i32$0;
        i64toi32_i32$0 = $7_1;
        HEAP32[i64toi32_i32$0 >> 2] = $259_1;
        HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
        i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
        i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $264_1 = i64toi32_i32$1;
        i64toi32_i32$1 = $7_1 + 8 | 0;
        HEAP32[i64toi32_i32$1 >> 2] = $264_1;
        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
        $1_1 = $2_1 + ($8_1 << 4 | 0) | 0;
        $8_1 = $7_1 + 16 | 0;
        label$18 : {
         if (($11_1 | 0) < (1 | 0)) {
          break label$18
         }
         $2173($2_1 | 0, $0_1 | 0, $11_1 | 0) | 0;
        }
        HEAP32[($4_1 + 88 | 0) >> 2] = $1_1;
        HEAP32[($4_1 + 84 | 0) >> 2] = $8_1;
        HEAP32[($4_1 + 80 | 0) >> 2] = $2_1;
        if (!$0_1) {
         break label$13
        }
        $2032($0_1 | 0);
       }
       $95($5_1 | 0, $3_1 | 0, $6_1 | 0);
       $4_1 = HEAP32[$5_1 >> 2] | 0;
       HEAP32[$5_1 >> 2] = 0;
       if (!$4_1) {
        break label$5
       }
       $2032($4_1 | 0);
      }
      global$0 = $5_1 + 16 | 0;
      return;
     }
     $2097($10_1 | 0);
     abort();
    }
    $3(global$1 + 1869 | 0 | 0);
    abort();
   }
   $2097($9_1 | 0);
   abort();
  }
  $3(global$1 + 1869 | 0 | 0);
  abort();
 }
 
 function $94($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $2_1 = 0, $6_1 = 0, $3_1 = 0, $5_1 = 0, $7_1 = 0, $8_1 = 0;
  $2_1 = $577($0_1 + 12 | 0 | 0, $1_1 | 0) | 0;
  $3_1 = 0;
  label$1 : {
   $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!$4_1) {
    break label$1
   }
   label$2 : {
    label$3 : {
     $5_1 = __wasm_popcnt_i32($4_1 | 0) | 0;
     if ($5_1 >>> 0 > 1 >>> 0) {
      break label$3
     }
     $6_1 = ($4_1 + -1 | 0) & $2_1 | 0;
     break label$2;
    }
    $6_1 = $2_1;
    if ($2_1 >>> 0 < $4_1 >>> 0) {
     break label$2
    }
    $6_1 = ($2_1 >>> 0) % ($4_1 >>> 0) | 0;
   }
   $0_1 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + ($6_1 << 2 | 0) | 0) >> 2] | 0;
   if (!$0_1) {
    break label$1
   }
   $0_1 = HEAP32[$0_1 >> 2] | 0;
   if (!$0_1) {
    break label$1
   }
   $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   $8_1 = HEAP32[$1_1 >> 2] | 0;
   label$4 : {
    label$5 : {
     if ($5_1 >>> 0 > 1 >>> 0) {
      break label$5
     }
     $4_1 = $4_1 + -1 | 0;
     label$6 : while (1) {
      label$7 : {
       label$8 : {
        $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        if (($1_1 | 0) == ($2_1 | 0)) {
         break label$8
        }
        if (($1_1 & $4_1 | 0 | 0) != ($6_1 | 0)) {
         break label$1
        }
        break label$7;
       }
       if ((HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) != ($8_1 | 0)) {
        break label$7
       }
       if ((HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0) == ($7_1 | 0)) {
        break label$4
       }
      }
      $0_1 = HEAP32[$0_1 >> 2] | 0;
      if ($0_1) {
       continue label$6
      }
      break label$1;
     };
    }
    label$9 : while (1) {
     label$10 : {
      label$11 : {
       $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
       if (($1_1 | 0) == ($2_1 | 0)) {
        break label$11
       }
       label$12 : {
        if ($1_1 >>> 0 < $4_1 >>> 0) {
         break label$12
        }
        $1_1 = ($1_1 >>> 0) % ($4_1 >>> 0) | 0;
       }
       if (($1_1 | 0) != ($6_1 | 0)) {
        break label$1
       }
       break label$10;
      }
      if ((HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) != ($8_1 | 0)) {
       break label$10
      }
      if ((HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0) == ($7_1 | 0)) {
       break label$4
      }
     }
     $0_1 = HEAP32[$0_1 >> 2] | 0;
     if ($0_1) {
      continue label$9
     }
     break label$1;
    };
   }
   $3_1 = $0_1;
  }
  return $3_1 | 0;
 }
 
 function $95($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $7_1 = 0, $4_1 = 0, $6_1 = 0, $3_1 = 0, $5_1 = 0, $8_1 = 0, $9_1 = 0;
  $3_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    $4_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    $5_1 = __wasm_popcnt_i32($4_1 | 0) | 0;
    if ($5_1 >>> 0 > 1 >>> 0) {
     break label$2
    }
    $3_1 = ($4_1 + -1 | 0) & $3_1 | 0;
    break label$1;
   }
   if ($3_1 >>> 0 < $4_1 >>> 0) {
    break label$1
   }
   $3_1 = ($3_1 >>> 0) % ($4_1 >>> 0) | 0;
  }
  $6_1 = (HEAP32[$1_1 >> 2] | 0) + ($3_1 << 2 | 0) | 0;
  $7_1 = HEAP32[$6_1 >> 2] | 0;
  label$3 : while (1) {
   $8_1 = $7_1;
   $7_1 = HEAP32[$7_1 >> 2] | 0;
   if (($7_1 | 0) != ($2_1 | 0)) {
    continue label$3
   }
   break label$3;
  };
  label$4 : {
   label$5 : {
    $9_1 = $1_1 + 8 | 0;
    if (($8_1 | 0) == ($9_1 | 0)) {
     break label$5
    }
    $7_1 = HEAP32[($8_1 + 4 | 0) >> 2] | 0;
    label$6 : {
     label$7 : {
      if ($5_1 >>> 0 > 1 >>> 0) {
       break label$7
      }
      $7_1 = $7_1 & ($4_1 + -1 | 0) | 0;
      break label$6;
     }
     if ($7_1 >>> 0 < $4_1 >>> 0) {
      break label$6
     }
     $7_1 = ($7_1 >>> 0) % ($4_1 >>> 0) | 0;
    }
    if (($7_1 | 0) == ($3_1 | 0)) {
     break label$4
    }
   }
   label$8 : {
    $7_1 = HEAP32[$2_1 >> 2] | 0;
    if (!$7_1) {
     break label$8
    }
    $7_1 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
    label$9 : {
     label$10 : {
      if ($5_1 >>> 0 > 1 >>> 0) {
       break label$10
      }
      $7_1 = $7_1 & ($4_1 + -1 | 0) | 0;
      break label$9;
     }
     if ($7_1 >>> 0 < $4_1 >>> 0) {
      break label$9
     }
     $7_1 = ($7_1 >>> 0) % ($4_1 >>> 0) | 0;
    }
    if (($7_1 | 0) == ($3_1 | 0)) {
     break label$4
    }
   }
   HEAP32[$6_1 >> 2] = 0;
  }
  label$11 : {
   $7_1 = HEAP32[$2_1 >> 2] | 0;
   if (!$7_1) {
    break label$11
   }
   $6_1 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
   label$12 : {
    label$13 : {
     if ($5_1 >>> 0 > 1 >>> 0) {
      break label$13
     }
     $6_1 = $6_1 & ($4_1 + -1 | 0) | 0;
     break label$12;
    }
    if ($6_1 >>> 0 < $4_1 >>> 0) {
     break label$12
    }
    $6_1 = ($6_1 >>> 0) % ($4_1 >>> 0) | 0;
   }
   if (($6_1 | 0) == ($3_1 | 0)) {
    break label$11
   }
   HEAP32[((HEAP32[$1_1 >> 2] | 0) + ($6_1 << 2 | 0) | 0) >> 2] = $8_1;
   $7_1 = HEAP32[$2_1 >> 2] | 0;
  }
  HEAP32[$8_1 >> 2] = $7_1;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[($1_1 + 12 | 0) >> 2] = (HEAP32[($1_1 + 12 | 0) >> 2] | 0) + -1 | 0;
  HEAP8[($0_1 + 8 | 0) >> 0] = 1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $9_1;
  HEAP32[$0_1 >> 2] = $2_1;
 }
 
 function $96($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $3_1 = 0, $4_1 = 0, $6_1 = 0;
  $3_1 = $2_1 + 8 | 0;
  $4_1 = $577($1_1 + 12 | 0 | 0, $3_1 | 0) | 0;
  HEAP32[($2_1 + 4 | 0) >> 2] = $4_1;
  $5_1 = 0;
  label$1 : {
   $3_1 = $121($1_1 | 0, $4_1 | 0, $3_1 | 0) | 0;
   if ($3_1) {
    break label$1
   }
   $5_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
   label$2 : {
    label$3 : {
     $3_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     $6_1 = __wasm_popcnt_i32($3_1 | 0) | 0;
     if ($6_1 >>> 0 > 1 >>> 0) {
      break label$3
     }
     $5_1 = ($3_1 + -1 | 0) & $5_1 | 0;
     break label$2;
    }
    if ($5_1 >>> 0 < $3_1 >>> 0) {
     break label$2
    }
    $5_1 = ($5_1 >>> 0) % ($3_1 >>> 0) | 0;
   }
   label$4 : {
    label$5 : {
     label$6 : {
      $4_1 = $5_1 << 2 | 0;
      $5_1 = HEAP32[((HEAP32[$1_1 >> 2] | 0) + $4_1 | 0) >> 2] | 0;
      if ($5_1) {
       break label$6
      }
      HEAP32[$2_1 >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
      HEAP32[($1_1 + 8 | 0) >> 2] = $2_1;
      HEAP32[((HEAP32[$1_1 >> 2] | 0) + $4_1 | 0) >> 2] = $1_1 + 8 | 0;
      $5_1 = HEAP32[$2_1 >> 2] | 0;
      if (!$5_1) {
       break label$4
      }
      $5_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
      label$7 : {
       label$8 : {
        if ($6_1 >>> 0 > 1 >>> 0) {
         break label$8
        }
        $5_1 = $5_1 & ($3_1 + -1 | 0) | 0;
        break label$7;
       }
       if ($5_1 >>> 0 < $3_1 >>> 0) {
        break label$7
       }
       $5_1 = ($5_1 >>> 0) % ($3_1 >>> 0) | 0;
      }
      $5_1 = (HEAP32[$1_1 >> 2] | 0) + ($5_1 << 2 | 0) | 0;
      break label$5;
     }
     HEAP32[$2_1 >> 2] = HEAP32[$5_1 >> 2] | 0;
    }
    HEAP32[$5_1 >> 2] = $2_1;
   }
   $5_1 = 1;
   HEAP32[($1_1 + 12 | 0) >> 2] = (HEAP32[($1_1 + 12 | 0) >> 2] | 0) + 1 | 0;
   $3_1 = $2_1;
  }
  HEAP8[($0_1 + 4 | 0) >> 0] = $5_1;
  HEAP32[$0_1 >> 2] = $3_1;
 }
 
 function $97($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $4_1 = 0, $3_1 = 0, $5_1 = 0, $7_1 = 0, $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $8_1 = 0, $6_1 = 0, $247_1 = 0;
  fimport$17(1 | 0, (HEAP32[($0_1 + 84 | 0) >> 2] | 0) + 8 | 0 | 0);
  fimport$11(1 | 0, (HEAP32[($0_1 + 84 | 0) >> 2] | 0) + 24 | 0 | 0);
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 56 | 0) >> 2] | 0 | 0]($0_1);
  fimport$11(1 | 0, (HEAP32[($0_1 + 84 | 0) >> 2] | 0) + 12 | 0 | 0);
  fimport$18(34962 | 0, HEAP32[((HEAP32[($0_1 + 84 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0);
  $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  fimport$12(34962 | 0, (HEAP32[($0_1 + 8 | 0) >> 2] | 0) - $1_1 | 0 | 0, $1_1 | 0, 35044 | 0);
  $2_1 = HEAP32[global$17 >> 2] | 0;
  fimport$19($2_1 | 0, 3 | 0, 5126 | 0, 0 | 0, 12 | 0, 0 | 0);
  fimport$20($2_1 | 0);
  $1_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
  fimport$12(34963 | 0, (HEAP32[($0_1 + 44 | 0) >> 2] | 0) - $1_1 | 0 | 0, $1_1 | 0, 35044 | 0);
  label$1 : {
   if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) == (HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   fimport$11(1 | 0, (HEAP32[($0_1 + 84 | 0) >> 2] | 0) + 16 | 0 | 0);
   fimport$18(34962 | 0, HEAP32[((HEAP32[($0_1 + 84 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0);
   $1_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   fimport$12(34962 | 0, (HEAP32[($0_1 + 20 | 0) >> 2] | 0) - $1_1 | 0 | 0, $1_1 | 0, 35044 | 0);
   $1_1 = HEAP32[global$18 >> 2] | 0;
   fimport$19($1_1 | 0, 3 | 0, 5126 | 0, 0 | 0, 12 | 0, 0 | 0);
   fimport$20($1_1 | 0);
  }
  label$2 : {
   if ((HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) == (HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0)) {
    break label$2
   }
   fimport$11(1 | 0, (HEAP32[($0_1 + 84 | 0) >> 2] | 0) + 20 | 0 | 0);
   fimport$18(34962 | 0, HEAP32[((HEAP32[($0_1 + 84 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0);
   $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   fimport$12(34962 | 0, (HEAP32[($0_1 + 32 | 0) >> 2] | 0) - $1_1 | 0 | 0, $1_1 | 0, 35044 | 0);
   $1_1 = HEAP32[global$19 >> 2] | 0;
   fimport$19($1_1 | 0, 2 | 0, 5126 | 0, 0 | 0, 8 | 0, 0 | 0);
   fimport$20($1_1 | 0);
  }
  label$3 : {
   if ((HEAP32[($0_1 + 56 | 0) >> 2] | 0 | 0) == (HEAP32[($0_1 + 52 | 0) >> 2] | 0 | 0)) {
    break label$3
   }
   fimport$11(1 | 0, (HEAP32[($0_1 + 84 | 0) >> 2] | 0) + 28 | 0 | 0);
   fimport$18(34962 | 0, HEAP32[((HEAP32[($0_1 + 84 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0 | 0);
   $1_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   fimport$12(34962 | 0, (HEAP32[($0_1 + 56 | 0) >> 2] | 0) - $1_1 | 0 | 0, $1_1 | 0, 35044 | 0);
   $1_1 = HEAP32[global$20 >> 2] | 0;
   fimport$19($1_1 | 0, 3 | 0, 5126 | 0, 0 | 0, 12 | 0, 0 | 0);
   fimport$20($1_1 | 0);
  }
  label$4 : {
   if ((HEAP32[($0_1 + 68 | 0) >> 2] | 0 | 0) == (HEAP32[($0_1 + 64 | 0) >> 2] | 0 | 0)) {
    break label$4
   }
   fimport$11(1 | 0, (HEAP32[($0_1 + 84 | 0) >> 2] | 0) + 32 | 0 | 0);
   fimport$18(34962 | 0, HEAP32[((HEAP32[($0_1 + 84 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0 | 0);
   $1_1 = HEAP32[($0_1 + 64 | 0) >> 2] | 0;
   fimport$12(34962 | 0, (HEAP32[($0_1 + 68 | 0) >> 2] | 0) - $1_1 | 0 | 0, $1_1 | 0, 35044 | 0);
   $1_1 = HEAP32[global$21 >> 2] | 0;
   fimport$19($1_1 | 0, 2 | 0, 5126 | 0, 0 | 0, 8 | 0, 0 | 0);
   fimport$20($1_1 | 0);
  }
  fimport$17(1 | 0, (HEAP32[($0_1 + 84 | 0) >> 2] | 0) + 36 | 0 | 0);
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 72 | 0) >> 2] | 0 | 0]($0_1);
  label$5 : {
   label$6 : {
    $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    $5_1 = (($3_1 - $4_1 | 0 | 0) / (12 | 0) | 0) << 1 | 0;
    $1_1 = HEAP32[($0_1 + 84 | 0) >> 2] | 0;
    $6_1 = HEAP32[($1_1 + 56 | 0) >> 2] | 0;
    $7_1 = ((HEAP32[($1_1 + 60 | 0) >> 2] | 0) - $6_1 | 0) >> 4 | 0;
    if ($5_1 >>> 0 <= $7_1 >>> 0) {
     break label$6
    }
    $98($1_1 + 56 | 0 | 0, $5_1 - $7_1 | 0 | 0);
    $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    break label$5;
   }
   if ($5_1 >>> 0 >= $7_1 >>> 0) {
    break label$5
   }
   HEAP32[($1_1 + 60 | 0) >> 2] = $6_1 + ($5_1 << 4 | 0) | 0;
  }
  label$7 : {
   if (($3_1 | 0) == ($4_1 | 0)) {
    break label$7
   }
   $1_1 = 0;
   label$8 : while (1) {
    $3_1 = Math_imul($1_1, 12);
    $4_1 = $4_1 + $3_1 | 0;
    i64toi32_i32$0 = HEAP32[$4_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
    $8_1 = i64toi32_i32$0;
    $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
    $7_1 = $1_1 << 5 | 0;
    $4_1 = (HEAP32[((HEAP32[($0_1 + 84 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + $7_1 | 0;
    HEAP32[($4_1 + 12 | 0) >> 2] = 1065353216;
    HEAP32[($4_1 + 8 | 0) >> 2] = $5_1;
    i64toi32_i32$0 = $4_1;
    HEAP32[$4_1 >> 2] = $8_1;
    HEAP32[($4_1 + 4 | 0) >> 2] = i64toi32_i32$1;
    $4_1 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + $3_1 | 0;
    i64toi32_i32$1 = HEAP32[$4_1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
    $8_1 = i64toi32_i32$1;
    $3_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
    $4_1 = (HEAP32[((HEAP32[($0_1 + 84 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + ($7_1 | 16 | 0) | 0;
    HEAP32[($4_1 + 12 | 0) >> 2] = 0;
    HEAP32[($4_1 + 8 | 0) >> 2] = $3_1;
    i64toi32_i32$1 = $4_1;
    HEAP32[$4_1 >> 2] = $8_1;
    HEAP32[($4_1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $1_1 = $1_1 + 1 | 0;
    $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if ($1_1 >>> 0 < (((HEAP32[($0_1 + 8 | 0) >> 2] | 0) - $4_1 | 0 | 0) / (12 | 0) | 0) >>> 0) {
     continue label$8
    }
    break label$8;
   };
  }
  fimport$11(1 | 0, (HEAP32[($0_1 + 84 | 0) >> 2] | 0) + 40 | 0 | 0);
  fimport$18(34962 | 0, HEAP32[((HEAP32[($0_1 + 84 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0 | 0);
  $1_1 = HEAP32[($0_1 + 84 | 0) >> 2] | 0;
  $247_1 = HEAP32[($1_1 + 60 | 0) >> 2] | 0;
  $1_1 = HEAP32[($1_1 + 56 | 0) >> 2] | 0;
  fimport$12(34962 | 0, $247_1 - $1_1 | 0 | 0, $1_1 | 0, 35044 | 0);
  $4_1 = 0;
  fimport$19($2_1 | 0, 4 | 0, 5126 | 0, 0 | 0, 16 | 0, 0 | 0);
  fimport$20($2_1 | 0);
  label$9 : {
   if ((((HEAP32[($0_1 + 8 | 0) >> 2] | 0) - (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0 | 0) / (12 | 0) | 0) >>> 0 > ($461() | 0) >>> 0) {
    break label$9
   }
   $90($0_1 | 0);
   $4_1 = 1;
  }
  $1_1 = HEAP32[($0_1 + 84 | 0) >> 2] | 0;
  HEAP8[($1_1 + 53 | 0) >> 0] = $4_1;
  $4_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
  HEAP32[($1_1 + 44 | 0) >> 2] = ((HEAP32[($0_1 + 44 | 0) >> 2] | 0) - $4_1 | 0) >> 2 | 0;
  $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  HEAP32[($1_1 + 48 | 0) >> 2] = ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) - $3_1 | 0 | 0) / (12 | 0) | 0;
  HEAP32[($0_1 + 44 | 0) >> 2] = $4_1;
  HEAP32[($0_1 + 8 | 0) >> 2] = $3_1;
  HEAP32[($0_1 + 20 | 0) >> 2] = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
  HEAP32[($0_1 + 32 | 0) >> 2] = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  HEAP32[($0_1 + 56 | 0) >> 2] = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
 }
 
 function $98($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $7_1 = 0, $6_1 = 0, $8_1 = 0;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if ((($2_1 - $3_1 | 0) >> 4 | 0) >>> 0 < $1_1 >>> 0) {
    break label$1
   }
   label$2 : {
    if ($1_1) {
     break label$2
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = $3_1;
    return;
   }
   $1_1 = $3_1 + ($1_1 << 4 | 0) | 0;
   label$3 : while (1) {
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$0 = 0;
    HEAP32[$3_1 >> 2] = 0;
    HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $3_1 + 8 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $3_1 = $3_1 + 16 | 0;
    if (($1_1 | 0) != ($3_1 | 0)) {
     continue label$3
    }
    break label$3;
   };
   HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
   return;
  }
  label$4 : {
   label$5 : {
    $4_1 = HEAP32[$0_1 >> 2] | 0;
    $5_1 = $3_1 - $4_1 | 0;
    $6_1 = $5_1 >> 4 | 0;
    $7_1 = $6_1 + $1_1 | 0;
    if ($7_1 >>> 0 >= 268435456 >>> 0) {
     break label$5
    }
    $3_1 = 0;
    label$6 : {
     $2_1 = $2_1 - $4_1 | 0;
     $8_1 = $2_1 >> 3 | 0;
     $2_1 = ($2_1 >> 4 | 0) >>> 0 < 134217727 >>> 0 ? ($8_1 >>> 0 < $7_1 >>> 0 ? $7_1 : $8_1) : 268435455;
     if (!$2_1) {
      break label$6
     }
     if ($2_1 >>> 0 >= 268435456 >>> 0) {
      break label$4
     }
     $3_1 = $2030($2_1 << 4 | 0 | 0) | 0;
    }
    $1_1 = $1_1 << 4 | 0;
    $1_1 = ($2174($3_1 + ($6_1 << 4 | 0) | 0 | 0, 0 | 0, $1_1 | 0) | 0) + $1_1 | 0;
    $2_1 = $3_1 + ($2_1 << 4 | 0) | 0;
    label$7 : {
     if (($5_1 | 0) < (1 | 0)) {
      break label$7
     }
     $2173($3_1 | 0, $4_1 | 0, $5_1 | 0) | 0;
    }
    HEAP32[($0_1 + 8 | 0) >> 2] = $2_1;
    HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
    HEAP32[$0_1 >> 2] = $3_1;
    label$8 : {
     if (!$4_1) {
      break label$8
     }
     $2032($4_1 | 0);
    }
    return;
   }
   $2097($0_1 | 0);
   abort();
  }
  $3(global$1 + 1869 | 0 | 0);
  abort();
 }
 
 function $99($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $3_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 84 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   $3_1 = (HEAP32[($2_1 + 4 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[($2_1 + 4 | 0) >> 2] = $3_1;
   label$2 : {
    if ($3_1) {
     break label$2
    }
    label$3 : {
     if (!(HEAP32[($2_1 + 8 | 0) >> 2] | 0)) {
      break label$3
     }
     FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 60 | 0) >> 2] | 0 | 0]($0_1);
     fimport$21(1 | 0, (HEAP32[($0_1 + 84 | 0) >> 2] | 0) + 8 | 0 | 0);
     fimport$10(1 | 0, (HEAP32[($0_1 + 84 | 0) >> 2] | 0) + 12 | 0 | 0);
     fimport$10(1 | 0, (HEAP32[($0_1 + 84 | 0) >> 2] | 0) + 24 | 0 | 0);
     label$4 : {
      $2_1 = HEAP32[($0_1 + 84 | 0) >> 2] | 0;
      if (!(HEAP32[($2_1 + 16 | 0) >> 2] | 0)) {
       break label$4
      }
      fimport$10(1 | 0, $2_1 + 16 | 0 | 0);
      $2_1 = HEAP32[($0_1 + 84 | 0) >> 2] | 0;
     }
     label$5 : {
      if (!(HEAP32[($2_1 + 20 | 0) >> 2] | 0)) {
       break label$5
      }
      fimport$10(1 | 0, $2_1 + 20 | 0 | 0);
      $2_1 = HEAP32[($0_1 + 84 | 0) >> 2] | 0;
     }
     label$6 : {
      if (!(HEAP32[($2_1 + 28 | 0) >> 2] | 0)) {
       break label$6
      }
      fimport$10(1 | 0, $2_1 + 28 | 0 | 0);
      $2_1 = HEAP32[($0_1 + 84 | 0) >> 2] | 0;
     }
     if (!(HEAP32[($2_1 + 32 | 0) >> 2] | 0)) {
      break label$3
     }
     fimport$10(1 | 0, $2_1 + 32 | 0 | 0);
    }
    $2_1 = $74(global$1 + 24760 | 0 | 0, $0_1 + 80 | 0 | 0) | 0;
    if (!$2_1) {
     break label$2
    }
    $100(global$1 + 24760 | 0 | 0, $2_1 | 0) | 0;
   }
   HEAP32[($0_1 + 80 | 0) >> 2] = HEAP32[($569($1_1 + 8 | 0 | 0) | 0) >> 2] | 0;
   HEAP32[($0_1 + 84 | 0) >> 2] = 0;
  }
  global$0 = $1_1 + 16 | 0;
 }
 
 function $100($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = HEAP32[$1_1 >> 2] | 0;
  $130($2_1 | 0, $0_1 | 0, $1_1 | 0);
  $1_1 = HEAP32[$2_1 >> 2] | 0;
  HEAP32[$2_1 >> 2] = 0;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   label$2 : {
    if (!(HEAPU8[($2_1 + 8 | 0) >> 0] | 0)) {
     break label$2
    }
    label$3 : {
     $0_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
     if (!$0_1) {
      break label$3
     }
     HEAP32[($1_1 + 96 | 0) >> 2] = $0_1;
     $2032($0_1 | 0);
    }
    label$4 : {
     $0_1 = HEAP32[($1_1 + 80 | 0) >> 2] | 0;
     if (!$0_1) {
      break label$4
     }
     HEAP32[($1_1 + 84 | 0) >> 2] = $0_1;
     $2032($0_1 | 0);
    }
    $0_1 = HEAP32[($1_1 + 68 | 0) >> 2] | 0;
    if (!$0_1) {
     break label$2
    }
    HEAP32[($1_1 + 72 | 0) >> 2] = $0_1;
    $2032($0_1 | 0);
   }
   $2032($1_1 | 0);
  }
  global$0 = $2_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $101($0_1) {
  $0_1 = $0_1 | 0;
  return $76($0_1 | 0) | 0 | 0;
 }
 
 function $102($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   return $78($0_1 | 0) | 0 | 0;
  }
  return $80($0_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $103($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  HEAP32[$0_1 >> 2] = (global$1 + 22116 | 0) + 8 | 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 64 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   HEAP32[($0_1 + 68 | 0) >> 2] = $1_1;
   $2032($1_1 | 0);
  }
  label$2 : {
   $1_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$2
   }
   HEAP32[($0_1 + 56 | 0) >> 2] = $1_1;
   $2032($1_1 | 0);
  }
  label$3 : {
   $1_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$3
   }
   HEAP32[($0_1 + 44 | 0) >> 2] = $1_1;
   $2032($1_1 | 0);
  }
  label$4 : {
   $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$4
   }
   HEAP32[($0_1 + 32 | 0) >> 2] = $1_1;
   $2032($1_1 | 0);
  }
  label$5 : {
   $1_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$5
   }
   HEAP32[($0_1 + 20 | 0) >> 2] = $1_1;
   $2032($1_1 | 0);
  }
  label$6 : {
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$6
   }
   HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
   $2032($1_1 | 0);
  }
  return $0_1 | 0;
 }
 
 function $104($0_1) {
  $0_1 = $0_1 | 0;
  $103($0_1 | 0) | 0;
  $2032($0_1 | 0);
 }
 
 function $105($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $7_1 = 0, $8_1 = 0, $20_1 = 0, $69_1 = 0;
  label$1 : {
   $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (($3_1 | 0) == ($4_1 | 0)) {
    break label$1
   }
   i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   $20_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $3_1;
   HEAP32[$3_1 >> 2] = $20_1;
   HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
   HEAP32[($0_1 + 8 | 0) >> 2] = $3_1 + 12 | 0;
   return;
  }
  label$2 : {
   label$3 : {
    $5_1 = $0_1 + 4 | 0;
    $6_1 = HEAP32[$5_1 >> 2] | 0;
    $7_1 = $3_1 - $6_1 | 0;
    $8_1 = ($7_1 | 0) / (12 | 0) | 0;
    $3_1 = $8_1 + 1 | 0;
    if ($3_1 >>> 0 >= 357913942 >>> 0) {
     break label$3
    }
    label$4 : {
     label$5 : {
      $4_1 = ($4_1 - $6_1 | 0 | 0) / (12 | 0) | 0;
      $5_1 = $4_1 << 1 | 0;
      $4_1 = $4_1 >>> 0 < 178956970 >>> 0 ? ($5_1 >>> 0 < $3_1 >>> 0 ? $3_1 : $5_1) : 357913941;
      if ($4_1) {
       break label$5
      }
      $5_1 = 0;
      break label$4;
     }
     if ($4_1 >>> 0 >= 357913942 >>> 0) {
      break label$2
     }
     $5_1 = $2030(Math_imul($4_1, 12) | 0) | 0;
    }
    $3_1 = $5_1 + Math_imul($8_1, 12) | 0;
    i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    $69_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $3_1;
    HEAP32[$3_1 >> 2] = $69_1;
    HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
    $1_1 = $3_1 + Math_imul(($7_1 | 0) / (-12 | 0) | 0, 12) | 0;
    $4_1 = $5_1 + Math_imul($4_1, 12) | 0;
    $3_1 = $3_1 + 12 | 0;
    label$6 : {
     if (($7_1 | 0) < (1 | 0)) {
      break label$6
     }
     $2173($1_1 | 0, $6_1 | 0, $7_1 | 0) | 0;
    }
    HEAP32[($0_1 + 12 | 0) >> 2] = $4_1;
    HEAP32[($0_1 + 8 | 0) >> 2] = $3_1;
    HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
    label$7 : {
     if (!$6_1) {
      break label$7
     }
     $2032($6_1 | 0);
    }
    return;
   }
   $2097($5_1 | 0);
   abort();
  }
  $3(global$1 + 1869 | 0 | 0);
  abort();
 }
 
 function $106($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $6_1 = 0, $7_1 = 0, $19_1 = 0, $68_1 = 0;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $3_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   if (($2_1 | 0) == ($3_1 | 0)) {
    break label$1
   }
   i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   $19_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $2_1;
   HEAP32[$2_1 >> 2] = $19_1;
   HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
   HEAP32[($0_1 + 20 | 0) >> 2] = $2_1 + 12 | 0;
   return;
  }
  label$2 : {
   label$3 : {
    $4_1 = $0_1 + 16 | 0;
    $5_1 = HEAP32[$4_1 >> 2] | 0;
    $6_1 = $2_1 - $5_1 | 0;
    $7_1 = ($6_1 | 0) / (12 | 0) | 0;
    $2_1 = $7_1 + 1 | 0;
    if ($2_1 >>> 0 >= 357913942 >>> 0) {
     break label$3
    }
    label$4 : {
     label$5 : {
      $3_1 = ($3_1 - $5_1 | 0 | 0) / (12 | 0) | 0;
      $4_1 = $3_1 << 1 | 0;
      $3_1 = $3_1 >>> 0 < 178956970 >>> 0 ? ($4_1 >>> 0 < $2_1 >>> 0 ? $2_1 : $4_1) : 357913941;
      if ($3_1) {
       break label$5
      }
      $4_1 = 0;
      break label$4;
     }
     if ($3_1 >>> 0 >= 357913942 >>> 0) {
      break label$2
     }
     $4_1 = $2030(Math_imul($3_1, 12) | 0) | 0;
    }
    $2_1 = $4_1 + Math_imul($7_1, 12) | 0;
    i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    $68_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $2_1;
    HEAP32[$2_1 >> 2] = $68_1;
    HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
    $1_1 = $2_1 + Math_imul(($6_1 | 0) / (-12 | 0) | 0, 12) | 0;
    $3_1 = $4_1 + Math_imul($3_1, 12) | 0;
    $2_1 = $2_1 + 12 | 0;
    label$6 : {
     if (($6_1 | 0) < (1 | 0)) {
      break label$6
     }
     $2173($1_1 | 0, $5_1 | 0, $6_1 | 0) | 0;
    }
    HEAP32[($0_1 + 24 | 0) >> 2] = $3_1;
    HEAP32[($0_1 + 20 | 0) >> 2] = $2_1;
    HEAP32[($0_1 + 16 | 0) >> 2] = $1_1;
    label$7 : {
     if (!$5_1) {
      break label$7
     }
     $2032($5_1 | 0);
    }
    return;
   }
   $2097($4_1 | 0);
   abort();
  }
  $3(global$1 + 1869 | 0 | 0);
  abort();
 }
 
 function $107($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $5_1 = 0, i64toi32_i32$0 = 0, $7_1 = 0, $6_1 = 0, $19_1 = 0, $63_1 = 0;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
   $3_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
   if (($2_1 | 0) == ($3_1 | 0)) {
    break label$1
   }
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $19_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $2_1;
   HEAP32[$2_1 >> 2] = $19_1;
   HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[($0_1 + 32 | 0) >> 2] = $2_1 + 8 | 0;
   return;
  }
  label$2 : {
   label$3 : {
    $4_1 = $0_1 + 28 | 0;
    $5_1 = HEAP32[$4_1 >> 2] | 0;
    $6_1 = $2_1 - $5_1 | 0;
    $7_1 = $6_1 >> 3 | 0;
    $2_1 = $7_1 + 1 | 0;
    if ($2_1 >>> 0 >= 536870912 >>> 0) {
     break label$3
    }
    label$4 : {
     label$5 : {
      $3_1 = $3_1 - $5_1 | 0;
      $4_1 = $3_1 >> 2 | 0;
      $3_1 = ($3_1 >> 3 | 0) >>> 0 < 268435455 >>> 0 ? ($4_1 >>> 0 < $2_1 >>> 0 ? $2_1 : $4_1) : 536870911;
      if ($3_1) {
       break label$5
      }
      $2_1 = 0;
      break label$4;
     }
     if ($3_1 >>> 0 >= 536870912 >>> 0) {
      break label$2
     }
     $2_1 = $2030($3_1 << 3 | 0 | 0) | 0;
    }
    $7_1 = $2_1 + ($7_1 << 3 | 0) | 0;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $63_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $7_1;
    HEAP32[i64toi32_i32$1 >> 2] = $63_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $1_1 = $2_1 + ($3_1 << 3 | 0) | 0;
    $3_1 = i64toi32_i32$1 + 8 | 0;
    label$6 : {
     if (($6_1 | 0) < (1 | 0)) {
      break label$6
     }
     $2173($2_1 | 0, $5_1 | 0, $6_1 | 0) | 0;
    }
    HEAP32[($0_1 + 36 | 0) >> 2] = $1_1;
    HEAP32[($0_1 + 32 | 0) >> 2] = $3_1;
    HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
    label$7 : {
     if (!$5_1) {
      break label$7
     }
     $2032($5_1 | 0);
    }
    return;
   }
   $2097($4_1 | 0);
   abort();
  }
  $3(global$1 + 1869 | 0 | 0);
  abort();
 }
 
 function $108($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $5_1 = 0, i64toi32_i32$0 = 0, $7_1 = 0, $6_1 = 0, $19_1 = 0, $63_1 = 0;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
   $3_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
   if (($2_1 | 0) == ($3_1 | 0)) {
    break label$1
   }
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $19_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $2_1;
   HEAP32[$2_1 >> 2] = $19_1;
   HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[($0_1 + 68 | 0) >> 2] = $2_1 + 8 | 0;
   return;
  }
  label$2 : {
   label$3 : {
    $4_1 = $0_1 + 64 | 0;
    $5_1 = HEAP32[$4_1 >> 2] | 0;
    $6_1 = $2_1 - $5_1 | 0;
    $7_1 = $6_1 >> 3 | 0;
    $2_1 = $7_1 + 1 | 0;
    if ($2_1 >>> 0 >= 536870912 >>> 0) {
     break label$3
    }
    label$4 : {
     label$5 : {
      $3_1 = $3_1 - $5_1 | 0;
      $4_1 = $3_1 >> 2 | 0;
      $3_1 = ($3_1 >> 3 | 0) >>> 0 < 268435455 >>> 0 ? ($4_1 >>> 0 < $2_1 >>> 0 ? $2_1 : $4_1) : 536870911;
      if ($3_1) {
       break label$5
      }
      $2_1 = 0;
      break label$4;
     }
     if ($3_1 >>> 0 >= 536870912 >>> 0) {
      break label$2
     }
     $2_1 = $2030($3_1 << 3 | 0 | 0) | 0;
    }
    $7_1 = $2_1 + ($7_1 << 3 | 0) | 0;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $63_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $7_1;
    HEAP32[i64toi32_i32$1 >> 2] = $63_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $1_1 = $2_1 + ($3_1 << 3 | 0) | 0;
    $3_1 = i64toi32_i32$1 + 8 | 0;
    label$6 : {
     if (($6_1 | 0) < (1 | 0)) {
      break label$6
     }
     $2173($2_1 | 0, $5_1 | 0, $6_1 | 0) | 0;
    }
    HEAP32[($0_1 + 72 | 0) >> 2] = $1_1;
    HEAP32[($0_1 + 68 | 0) >> 2] = $3_1;
    HEAP32[($0_1 + 64 | 0) >> 2] = $2_1;
    label$7 : {
     if (!$5_1) {
      break label$7
     }
     $2032($5_1 | 0);
    }
    return;
   }
   $2097($4_1 | 0);
   abort();
  }
  $3(global$1 + 1869 | 0 | 0);
  abort();
 }
 
 function $109($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0, $6_1 = 0;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
   $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
   if (($2_1 | 0) == ($3_1 | 0)) {
    break label$1
   }
   HEAP32[$2_1 >> 2] = $1_1;
   HEAP32[($0_1 + 44 | 0) >> 2] = $2_1 + 4 | 0;
   return;
  }
  label$2 : {
   label$3 : {
    $4_1 = $0_1 + 40 | 0;
    $5_1 = HEAP32[$4_1 >> 2] | 0;
    $6_1 = $2_1 - $5_1 | 0;
    $7_1 = $6_1 >> 2 | 0;
    $2_1 = $7_1 + 1 | 0;
    if ($2_1 >>> 0 >= 1073741824 >>> 0) {
     break label$3
    }
    label$4 : {
     label$5 : {
      $3_1 = $3_1 - $5_1 | 0;
      $4_1 = $3_1 >> 1 | 0;
      $3_1 = ($3_1 >> 2 | 0) >>> 0 < 536870911 >>> 0 ? ($4_1 >>> 0 < $2_1 >>> 0 ? $2_1 : $4_1) : 1073741823;
      if ($3_1) {
       break label$5
      }
      $2_1 = 0;
      break label$4;
     }
     if ($3_1 >>> 0 >= 1073741824 >>> 0) {
      break label$2
     }
     $2_1 = $2030($3_1 << 2 | 0 | 0) | 0;
    }
    $7_1 = $2_1 + ($7_1 << 2 | 0) | 0;
    HEAP32[$7_1 >> 2] = $1_1;
    $1_1 = $2_1 + ($3_1 << 2 | 0) | 0;
    $3_1 = $7_1 + 4 | 0;
    label$6 : {
     if (($6_1 | 0) < (1 | 0)) {
      break label$6
     }
     $2173($2_1 | 0, $5_1 | 0, $6_1 | 0) | 0;
    }
    HEAP32[($0_1 + 48 | 0) >> 2] = $1_1;
    HEAP32[($0_1 + 44 | 0) >> 2] = $3_1;
    HEAP32[($0_1 + 40 | 0) >> 2] = $2_1;
    label$7 : {
     if (!$5_1) {
      break label$7
     }
     $2032($5_1 | 0);
    }
    return;
   }
   $2097($4_1 | 0);
   abort();
  }
  $3(global$1 + 1869 | 0 | 0);
  abort();
 }
 
 function $110($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $6_1 = 0, $7_1 = 0, $19_1 = 0, $68_1 = 0;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
   $3_1 = HEAP32[($0_1 + 60 | 0) >> 2] | 0;
   if (($2_1 | 0) == ($3_1 | 0)) {
    break label$1
   }
   i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   $19_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $2_1;
   HEAP32[$2_1 >> 2] = $19_1;
   HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
   HEAP32[($0_1 + 56 | 0) >> 2] = $2_1 + 12 | 0;
   return;
  }
  label$2 : {
   label$3 : {
    $4_1 = $0_1 + 52 | 0;
    $5_1 = HEAP32[$4_1 >> 2] | 0;
    $6_1 = $2_1 - $5_1 | 0;
    $7_1 = ($6_1 | 0) / (12 | 0) | 0;
    $2_1 = $7_1 + 1 | 0;
    if ($2_1 >>> 0 >= 357913942 >>> 0) {
     break label$3
    }
    label$4 : {
     label$5 : {
      $3_1 = ($3_1 - $5_1 | 0 | 0) / (12 | 0) | 0;
      $4_1 = $3_1 << 1 | 0;
      $3_1 = $3_1 >>> 0 < 178956970 >>> 0 ? ($4_1 >>> 0 < $2_1 >>> 0 ? $2_1 : $4_1) : 357913941;
      if ($3_1) {
       break label$5
      }
      $4_1 = 0;
      break label$4;
     }
     if ($3_1 >>> 0 >= 357913942 >>> 0) {
      break label$2
     }
     $4_1 = $2030(Math_imul($3_1, 12) | 0) | 0;
    }
    $2_1 = $4_1 + Math_imul($7_1, 12) | 0;
    i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    $68_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $2_1;
    HEAP32[$2_1 >> 2] = $68_1;
    HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
    $1_1 = $2_1 + Math_imul(($6_1 | 0) / (-12 | 0) | 0, 12) | 0;
    $3_1 = $4_1 + Math_imul($3_1, 12) | 0;
    $2_1 = $2_1 + 12 | 0;
    label$6 : {
     if (($6_1 | 0) < (1 | 0)) {
      break label$6
     }
     $2173($1_1 | 0, $5_1 | 0, $6_1 | 0) | 0;
    }
    HEAP32[($0_1 + 60 | 0) >> 2] = $3_1;
    HEAP32[($0_1 + 56 | 0) >> 2] = $2_1;
    HEAP32[($0_1 + 52 | 0) >> 2] = $1_1;
    label$7 : {
     if (!$5_1) {
      break label$7
     }
     $2032($5_1 | 0);
    }
    return;
   }
   $2097($4_1 | 0);
   abort();
  }
  $3(global$1 + 1869 | 0 | 0);
  abort();
 }
 
 function $111($0_1) {
  $0_1 = $0_1 | 0;
  return (HEAP32[($0_1 + 84 | 0) >> 2] | 0) + 56 | 0 | 0;
 }
 
 function $112($0_1) {
  $0_1 = $0_1 | 0;
  return (HEAP32[($0_1 + 84 | 0) >> 2] | 0) + 80 | 0 | 0;
 }
 
 function $113($0_1) {
  $0_1 = $0_1 | 0;
  return (HEAP32[($0_1 + 84 | 0) >> 2] | 0) + 68 | 0 | 0;
 }
 
 function $114($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return (HEAP32[((HEAP32[($0_1 + 84 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0) + Math_imul($1_1, 28) | 0 | 0;
 }
 
 function $115($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
  HEAP32[($0_1 + 32 | 0) >> 2] = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  HEAP32[($0_1 + 44 | 0) >> 2] = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
  HEAP32[($0_1 + 56 | 0) >> 2] = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
  HEAP32[($0_1 + 68 | 0) >> 2] = HEAP32[($0_1 + 64 | 0) >> 2] | 0;
 }
 
 function $116($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $117($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $118($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $119($0_1) {
  $0_1 = $0_1 | 0;
  return HEAPU8[((HEAP32[($0_1 + 84 | 0) >> 2] | 0) + 53 | 0) >> 0] | 0 | 0;
 }
 
 function $120($0_1) {
  $0_1 = $0_1 | 0;
  abort();
 }
 
 function $121($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $5_1 = 0, $8_1 = Math_fround(0), $4_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = Math_fround(0);
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if (!$3_1) {
     break label$2
    }
    label$3 : {
     label$4 : {
      $4_1 = __wasm_popcnt_i32($3_1 | 0) | 0;
      if ($4_1 >>> 0 > 1 >>> 0) {
       break label$4
      }
      $1_1 = ($3_1 + -1 | 0) & $1_1 | 0;
      break label$3;
     }
     if ($3_1 >>> 0 > $1_1 >>> 0) {
      break label$3
     }
     $1_1 = ($1_1 >>> 0) % ($3_1 >>> 0) | 0;
    }
    $5_1 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + ($1_1 << 2 | 0) | 0) >> 2] | 0;
    if (!$5_1) {
     break label$2
    }
    $6_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
    $7_1 = HEAP32[$2_1 >> 2] | 0;
    label$5 : {
     if ($4_1 >>> 0 > 1 >>> 0) {
      break label$5
     }
     $2_1 = $3_1 + -1 | 0;
     label$6 : while (1) {
      $5_1 = HEAP32[$5_1 >> 2] | 0;
      if (!$5_1) {
       break label$2
      }
      if (((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & $2_1 | 0 | 0) != ($1_1 | 0)) {
       break label$2
      }
      if ((HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) != ($7_1 | 0)) {
       continue label$6
      }
      if ((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) != ($6_1 | 0)) {
       continue label$6
      }
      break label$1;
     };
    }
    label$7 : while (1) {
     $5_1 = HEAP32[$5_1 >> 2] | 0;
     if (!$5_1) {
      break label$2
     }
     label$8 : {
      $2_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
      if ($2_1 >>> 0 < $3_1 >>> 0) {
       break label$8
      }
      $2_1 = ($2_1 >>> 0) % ($3_1 >>> 0) | 0;
     }
     if (($2_1 | 0) != ($1_1 | 0)) {
      break label$2
     }
     if ((HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) != ($7_1 | 0)) {
      continue label$7
     }
     if ((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) != ($6_1 | 0)) {
      continue label$7
     }
     break label$1;
    };
   }
   $8_1 = Math_fround(HEAPF32[($0_1 + 16 | 0) >> 2]);
   $9_1 = Math_fround(((HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 1 | 0) >>> 0);
   label$9 : {
    if (!$3_1) {
     break label$9
    }
    $5_1 = 0;
    if (Math_fround($8_1 * Math_fround($3_1 >>> 0)) < $9_1 ^ 1 | 0) {
     break label$1
    }
   }
   $5_1 = 0;
   $3_1 = $3_1 << 1 | 0 | ($3_1 >>> 0 < 3 >>> 0 | ($3_1 & ($3_1 + -1 | 0) | 0 | 0) != (0 | 0) | 0) | 0;
   label$10 : {
    label$11 : {
     $8_1 = Math_fround(Math_ceil(Math_fround($9_1 / $8_1)));
     if (!($8_1 < Math_fround(4294967296.0) & $8_1 >= Math_fround(0.0) | 0)) {
      break label$11
     }
     $1_1 = ~~$8_1 >>> 0;
     break label$10;
    }
    $1_1 = 0;
   }
   $122($0_1 | 0, ($3_1 >>> 0 < $1_1 >>> 0 ? $1_1 : $3_1) | 0);
  }
  return $5_1 | 0;
 }
 
 function $122($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $5_1 = Math_fround(0), $3_1 = 0;
  $2_1 = 2;
  label$1 : {
   if (($1_1 | 0) == (1 | 0)) {
    break label$1
   }
   label$2 : {
    if ($1_1 & ($1_1 + -1 | 0) | 0) {
     break label$2
    }
    $2_1 = $1_1;
    break label$1;
   }
   $2_1 = $700($1_1 | 0) | 0;
  }
  label$3 : {
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if ($2_1 >>> 0 <= $1_1 >>> 0) {
    break label$3
   }
   $123($0_1 | 0, $2_1 | 0);
   return;
  }
  label$4 : {
   if ($2_1 >>> 0 >= $1_1 >>> 0) {
    break label$4
   }
   $3_1 = $1_1 >>> 0 < 3 >>> 0;
   label$5 : {
    label$6 : {
     $5_1 = Math_fround(Math_ceil(Math_fround(Math_fround((HEAP32[($0_1 + 12 | 0) >> 2] | 0) >>> 0) / Math_fround(HEAPF32[($0_1 + 16 | 0) >> 2]))));
     if (!($5_1 < Math_fround(4294967296.0) & $5_1 >= Math_fround(0.0) | 0)) {
      break label$6
     }
     $4_1 = ~~$5_1 >>> 0;
     break label$5;
    }
    $4_1 = 0;
   }
   label$7 : {
    label$8 : {
     if ($3_1) {
      break label$8
     }
     if ((__wasm_popcnt_i32($1_1 | 0) | 0) >>> 0 > 1 >>> 0) {
      break label$8
     }
     $4_1 = $4_1 >>> 0 < 2 >>> 0 ? $4_1 : 1 << (32 - Math_clz32($4_1 + -1 | 0) | 0) | 0;
     break label$7;
    }
    $4_1 = $700($4_1 | 0) | 0;
   }
   $2_1 = $2_1 >>> 0 < $4_1 >>> 0 ? $4_1 : $2_1;
   if ($2_1 >>> 0 >= $1_1 >>> 0) {
    break label$4
   }
   $123($0_1 | 0, $2_1 | 0);
  }
 }
 
 function $123($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $7_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $8_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!$1_1) {
      break label$3
     }
     if ($1_1 >>> 0 >= 1073741824 >>> 0) {
      break label$1
     }
     $2_1 = $2030($1_1 << 2 | 0 | 0) | 0;
     $3_1 = HEAP32[$0_1 >> 2] | 0;
     HEAP32[$0_1 >> 2] = $2_1;
     label$4 : {
      if (!$3_1) {
       break label$4
      }
      $2032($3_1 | 0);
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
     $2_1 = $1_1 >>> 0 > 1 >>> 0 ? $1_1 : 1;
     $3_1 = 0;
     label$5 : while (1) {
      HEAP32[((HEAP32[$0_1 >> 2] | 0) + ($3_1 << 2 | 0) | 0) >> 2] = 0;
      $3_1 = $3_1 + 1 | 0;
      if (($3_1 | 0) != ($2_1 | 0)) {
       continue label$5
      }
      break label$5;
     };
     $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     if (!$4_1) {
      break label$2
     }
     $3_1 = $0_1 + 8 | 0;
     $5_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
     label$6 : {
      label$7 : {
       $2_1 = __wasm_popcnt_i32($1_1 | 0) | 0;
       if ($2_1 >>> 0 > 1 >>> 0) {
        break label$7
       }
       $5_1 = $5_1 & ($1_1 + -1 | 0) | 0;
       break label$6;
      }
      if ($5_1 >>> 0 < $1_1 >>> 0) {
       break label$6
      }
      $5_1 = ($5_1 >>> 0) % ($1_1 >>> 0) | 0;
     }
     HEAP32[((HEAP32[$0_1 >> 2] | 0) + ($5_1 << 2 | 0) | 0) >> 2] = $3_1;
     $3_1 = HEAP32[$4_1 >> 2] | 0;
     if (!$3_1) {
      break label$2
     }
     label$8 : {
      if ($2_1 >>> 0 > 1 >>> 0) {
       break label$8
      }
      $6_1 = $1_1 + -1 | 0;
      label$9 : while (1) {
       label$10 : {
        label$11 : {
         $7_1 = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) & $6_1 | 0;
         if (($7_1 | 0) != ($5_1 | 0)) {
          break label$11
         }
         $4_1 = $3_1;
         break label$10;
        }
        $2_1 = $3_1;
        label$12 : {
         $1_1 = $7_1 << 2 | 0;
         $8_1 = (HEAP32[$0_1 >> 2] | 0) + $1_1 | 0;
         if (!(HEAP32[$8_1 >> 2] | 0)) {
          break label$12
         }
         label$13 : {
          label$14 : while (1) {
           $7_1 = $2_1;
           $2_1 = HEAP32[$2_1 >> 2] | 0;
           if (!$2_1) {
            break label$13
           }
           if ((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) != (HEAP32[($2_1 + 8 | 0) >> 2] | 0 | 0)) {
            break label$13
           }
           if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) == (HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0)) {
            continue label$14
           }
           break label$14;
          };
         }
         HEAP32[$4_1 >> 2] = $2_1;
         HEAP32[$7_1 >> 2] = HEAP32[(HEAP32[((HEAP32[$0_1 >> 2] | 0) + $1_1 | 0) >> 2] | 0) >> 2] | 0;
         HEAP32[(HEAP32[((HEAP32[$0_1 >> 2] | 0) + $1_1 | 0) >> 2] | 0) >> 2] = $3_1;
         break label$10;
        }
        HEAP32[$8_1 >> 2] = $4_1;
        $4_1 = $3_1;
        $5_1 = $7_1;
       }
       $3_1 = HEAP32[$4_1 >> 2] | 0;
       if ($3_1) {
        continue label$9
       }
       break label$2;
      };
     }
     label$15 : while (1) {
      label$16 : {
       $7_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
       if ($7_1 >>> 0 < $1_1 >>> 0) {
        break label$16
       }
       $7_1 = ($7_1 >>> 0) % ($1_1 >>> 0) | 0;
      }
      label$17 : {
       label$18 : {
        if (($7_1 | 0) != ($5_1 | 0)) {
         break label$18
        }
        $4_1 = $3_1;
        break label$17;
       }
       $2_1 = $3_1;
       label$19 : {
        $6_1 = $7_1 << 2 | 0;
        $8_1 = (HEAP32[$0_1 >> 2] | 0) + $6_1 | 0;
        if (HEAP32[$8_1 >> 2] | 0) {
         break label$19
        }
        HEAP32[$8_1 >> 2] = $4_1;
        $4_1 = $3_1;
        $5_1 = $7_1;
        break label$17;
       }
       label$20 : {
        label$21 : while (1) {
         $7_1 = $2_1;
         $2_1 = HEAP32[$2_1 >> 2] | 0;
         if (!$2_1) {
          break label$20
         }
         if ((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) != (HEAP32[($2_1 + 8 | 0) >> 2] | 0 | 0)) {
          break label$20
         }
         if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) == (HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0)) {
          continue label$21
         }
         break label$21;
        };
       }
       HEAP32[$4_1 >> 2] = $2_1;
       HEAP32[$7_1 >> 2] = HEAP32[(HEAP32[((HEAP32[$0_1 >> 2] | 0) + $6_1 | 0) >> 2] | 0) >> 2] | 0;
       HEAP32[(HEAP32[((HEAP32[$0_1 >> 2] | 0) + $6_1 | 0) >> 2] | 0) >> 2] = $3_1;
      }
      $3_1 = HEAP32[$4_1 >> 2] | 0;
      if ($3_1) {
       continue label$15
      }
      break label$2;
     };
    }
    $3_1 = HEAP32[$0_1 >> 2] | 0;
    HEAP32[$0_1 >> 2] = 0;
    label$22 : {
     if (!$3_1) {
      break label$22
     }
     $2032($3_1 | 0);
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = 0;
   }
   return;
  }
  $3(global$1 + 1869 | 0 | 0);
  abort();
 }
 
 function $124($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $5_1 = Math_fround(0), $3_1 = 0;
  $2_1 = 2;
  label$1 : {
   if (($1_1 | 0) == (1 | 0)) {
    break label$1
   }
   label$2 : {
    if ($1_1 & ($1_1 + -1 | 0) | 0) {
     break label$2
    }
    $2_1 = $1_1;
    break label$1;
   }
   $2_1 = $700($1_1 | 0) | 0;
  }
  label$3 : {
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if ($2_1 >>> 0 <= $1_1 >>> 0) {
    break label$3
   }
   $125($0_1 | 0, $2_1 | 0);
   return;
  }
  label$4 : {
   if ($2_1 >>> 0 >= $1_1 >>> 0) {
    break label$4
   }
   $3_1 = $1_1 >>> 0 < 3 >>> 0;
   label$5 : {
    label$6 : {
     $5_1 = Math_fround(Math_ceil(Math_fround(Math_fround((HEAP32[($0_1 + 12 | 0) >> 2] | 0) >>> 0) / Math_fround(HEAPF32[($0_1 + 16 | 0) >> 2]))));
     if (!($5_1 < Math_fround(4294967296.0) & $5_1 >= Math_fround(0.0) | 0)) {
      break label$6
     }
     $4_1 = ~~$5_1 >>> 0;
     break label$5;
    }
    $4_1 = 0;
   }
   label$7 : {
    label$8 : {
     if ($3_1) {
      break label$8
     }
     if ((__wasm_popcnt_i32($1_1 | 0) | 0) >>> 0 > 1 >>> 0) {
      break label$8
     }
     $4_1 = $4_1 >>> 0 < 2 >>> 0 ? $4_1 : 1 << (32 - Math_clz32($4_1 + -1 | 0) | 0) | 0;
     break label$7;
    }
    $4_1 = $700($4_1 | 0) | 0;
   }
   $2_1 = $2_1 >>> 0 < $4_1 >>> 0 ? $4_1 : $2_1;
   if ($2_1 >>> 0 >= $1_1 >>> 0) {
    break label$4
   }
   $125($0_1 | 0, $2_1 | 0);
  }
 }
 
 function $125($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $5_1 = 0, $2_1 = 0, $8_1 = 0, $4_1 = 0, $7_1 = 0, $6_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!$1_1) {
      break label$3
     }
     label$4 : {
      if ($1_1 >>> 0 >= 1073741824 >>> 0) {
       break label$4
      }
      $2_1 = $2030($1_1 << 2 | 0 | 0) | 0;
      $3_1 = HEAP32[$0_1 >> 2] | 0;
      HEAP32[$0_1 >> 2] = $2_1;
      label$5 : {
       if (!$3_1) {
        break label$5
       }
       $2032($3_1 | 0);
      }
      HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
      $2_1 = $1_1 >>> 0 > 1 >>> 0 ? $1_1 : 1;
      $3_1 = 0;
      label$6 : while (1) {
       HEAP32[((HEAP32[$0_1 >> 2] | 0) + ($3_1 << 2 | 0) | 0) >> 2] = 0;
       $3_1 = $3_1 + 1 | 0;
       if (($3_1 | 0) != ($2_1 | 0)) {
        continue label$6
       }
       break label$6;
      };
      $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
      if (!$2_1) {
       break label$1
      }
      $3_1 = $0_1 + 8 | 0;
      $4_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
      label$7 : {
       label$8 : {
        $5_1 = __wasm_popcnt_i32($1_1 | 0) | 0;
        if ($5_1 >>> 0 > 1 >>> 0) {
         break label$8
        }
        $4_1 = $4_1 & ($1_1 + -1 | 0) | 0;
        break label$7;
       }
       if ($4_1 >>> 0 < $1_1 >>> 0) {
        break label$7
       }
       $4_1 = ($4_1 >>> 0) % ($1_1 >>> 0) | 0;
      }
      HEAP32[((HEAP32[$0_1 >> 2] | 0) + ($4_1 << 2 | 0) | 0) >> 2] = $3_1;
      $3_1 = HEAP32[$2_1 >> 2] | 0;
      if (!$3_1) {
       break label$1
      }
      if ($5_1 >>> 0 > 1 >>> 0) {
       break label$2
      }
      $6_1 = $1_1 + -1 | 0;
      label$9 : while (1) {
       label$10 : {
        label$11 : {
         $5_1 = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) & $6_1 | 0;
         if (($5_1 | 0) != ($4_1 | 0)) {
          break label$11
         }
         $2_1 = $3_1;
         break label$10;
        }
        label$12 : {
         label$13 : {
          label$14 : {
           $7_1 = $5_1 << 2 | 0;
           $8_1 = (HEAP32[$0_1 >> 2] | 0) + $7_1 | 0;
           if (!(HEAP32[$8_1 >> 2] | 0)) {
            break label$14
           }
           $5_1 = $3_1;
           $8_1 = HEAP32[$3_1 >> 2] | 0;
           if (!$8_1) {
            break label$12
           }
           $5_1 = $3_1;
           $1_1 = $3_1 + 8 | 0;
           if ($571($1_1 | 0, $8_1 + 8 | 0 | 0) | 0) {
            break label$13
           }
           break label$12;
          }
          HEAP32[$8_1 >> 2] = $2_1;
          $2_1 = $3_1;
          $4_1 = $5_1;
          break label$10;
         }
         label$15 : while (1) {
          $5_1 = HEAP32[$5_1 >> 2] | 0;
          $8_1 = HEAP32[$5_1 >> 2] | 0;
          if (!$8_1) {
           break label$12
          }
          if ($571($1_1 | 0, $8_1 + 8 | 0 | 0) | 0) {
           continue label$15
          }
          break label$15;
         };
        }
        HEAP32[$2_1 >> 2] = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = HEAP32[(HEAP32[((HEAP32[$0_1 >> 2] | 0) + $7_1 | 0) >> 2] | 0) >> 2] | 0;
        HEAP32[(HEAP32[((HEAP32[$0_1 >> 2] | 0) + $7_1 | 0) >> 2] | 0) >> 2] = $3_1;
       }
       $3_1 = HEAP32[$2_1 >> 2] | 0;
       if ($3_1) {
        continue label$9
       }
       break label$1;
      };
     }
     $3(global$1 + 1869 | 0 | 0);
     abort();
    }
    $3_1 = HEAP32[$0_1 >> 2] | 0;
    HEAP32[$0_1 >> 2] = 0;
    label$16 : {
     if (!$3_1) {
      break label$16
     }
     $2032($3_1 | 0);
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = 0;
    break label$1;
   }
   label$17 : while (1) {
    label$18 : {
     $5_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
     if ($5_1 >>> 0 < $1_1 >>> 0) {
      break label$18
     }
     $5_1 = ($5_1 >>> 0) % ($1_1 >>> 0) | 0;
    }
    label$19 : {
     label$20 : {
      if (($5_1 | 0) != ($4_1 | 0)) {
       break label$20
      }
      $2_1 = $3_1;
      break label$19;
     }
     label$21 : {
      label$22 : {
       label$23 : {
        $6_1 = $5_1 << 2 | 0;
        $8_1 = (HEAP32[$0_1 >> 2] | 0) + $6_1 | 0;
        if (!(HEAP32[$8_1 >> 2] | 0)) {
         break label$23
        }
        $5_1 = $3_1;
        $8_1 = HEAP32[$3_1 >> 2] | 0;
        if (!$8_1) {
         break label$21
        }
        $5_1 = $3_1;
        $7_1 = $3_1 + 8 | 0;
        if ($571($7_1 | 0, $8_1 + 8 | 0 | 0) | 0) {
         break label$22
        }
        break label$21;
       }
       HEAP32[$8_1 >> 2] = $2_1;
       $2_1 = $3_1;
       $4_1 = $5_1;
       break label$19;
      }
      label$24 : while (1) {
       $5_1 = HEAP32[$5_1 >> 2] | 0;
       $8_1 = HEAP32[$5_1 >> 2] | 0;
       if (!$8_1) {
        break label$21
       }
       if ($571($7_1 | 0, $8_1 + 8 | 0 | 0) | 0) {
        continue label$24
       }
       break label$24;
      };
     }
     HEAP32[$2_1 >> 2] = HEAP32[$5_1 >> 2] | 0;
     HEAP32[$5_1 >> 2] = HEAP32[(HEAP32[((HEAP32[$0_1 >> 2] | 0) + $6_1 | 0) >> 2] | 0) >> 2] | 0;
     HEAP32[(HEAP32[((HEAP32[$0_1 >> 2] | 0) + $6_1 | 0) >> 2] | 0) >> 2] = $3_1;
    }
    $3_1 = HEAP32[$2_1 >> 2] | 0;
    if ($3_1) {
     continue label$17
    }
    break label$17;
   };
  }
 }
 
 function $126($0_1) {
  $0_1 = $0_1 | 0;
  $2032($0_1 | 0);
 }
 
 function $127($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $8_1 = 0, $13_1 = 0;
  HEAP32[$0_1 >> 2] = (global$1 + 22232 | 0) + 8 | 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  $8_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = $8_1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$2 + 12 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $13_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + 12 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $13_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function $128($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $5_1 = Math_fround(0), $3_1 = 0;
  $2_1 = 2;
  label$1 : {
   if (($1_1 | 0) == (1 | 0)) {
    break label$1
   }
   label$2 : {
    if ($1_1 & ($1_1 + -1 | 0) | 0) {
     break label$2
    }
    $2_1 = $1_1;
    break label$1;
   }
   $2_1 = $700($1_1 | 0) | 0;
  }
  label$3 : {
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if ($2_1 >>> 0 <= $1_1 >>> 0) {
    break label$3
   }
   $129($0_1 | 0, $2_1 | 0);
   return;
  }
  label$4 : {
   if ($2_1 >>> 0 >= $1_1 >>> 0) {
    break label$4
   }
   $3_1 = $1_1 >>> 0 < 3 >>> 0;
   label$5 : {
    label$6 : {
     $5_1 = Math_fround(Math_ceil(Math_fround(Math_fround((HEAP32[($0_1 + 12 | 0) >> 2] | 0) >>> 0) / Math_fround(HEAPF32[($0_1 + 16 | 0) >> 2]))));
     if (!($5_1 < Math_fround(4294967296.0) & $5_1 >= Math_fround(0.0) | 0)) {
      break label$6
     }
     $4_1 = ~~$5_1 >>> 0;
     break label$5;
    }
    $4_1 = 0;
   }
   label$7 : {
    label$8 : {
     if ($3_1) {
      break label$8
     }
     if ((__wasm_popcnt_i32($1_1 | 0) | 0) >>> 0 > 1 >>> 0) {
      break label$8
     }
     $4_1 = $4_1 >>> 0 < 2 >>> 0 ? $4_1 : 1 << (32 - Math_clz32($4_1 + -1 | 0) | 0) | 0;
     break label$7;
    }
    $4_1 = $700($4_1 | 0) | 0;
   }
   $2_1 = $2_1 >>> 0 < $4_1 >>> 0 ? $4_1 : $2_1;
   if ($2_1 >>> 0 >= $1_1 >>> 0) {
    break label$4
   }
   $129($0_1 | 0, $2_1 | 0);
  }
 }
 
 function $129($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $7_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $8_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!$1_1) {
      break label$3
     }
     if ($1_1 >>> 0 >= 1073741824 >>> 0) {
      break label$1
     }
     $2_1 = $2030($1_1 << 2 | 0 | 0) | 0;
     $3_1 = HEAP32[$0_1 >> 2] | 0;
     HEAP32[$0_1 >> 2] = $2_1;
     label$4 : {
      if (!$3_1) {
       break label$4
      }
      $2032($3_1 | 0);
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
     $2_1 = $1_1 >>> 0 > 1 >>> 0 ? $1_1 : 1;
     $3_1 = 0;
     label$5 : while (1) {
      HEAP32[((HEAP32[$0_1 >> 2] | 0) + ($3_1 << 2 | 0) | 0) >> 2] = 0;
      $3_1 = $3_1 + 1 | 0;
      if (($3_1 | 0) != ($2_1 | 0)) {
       continue label$5
      }
      break label$5;
     };
     $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     if (!$4_1) {
      break label$2
     }
     $3_1 = $0_1 + 8 | 0;
     $5_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
     label$6 : {
      label$7 : {
       $2_1 = __wasm_popcnt_i32($1_1 | 0) | 0;
       if ($2_1 >>> 0 > 1 >>> 0) {
        break label$7
       }
       $5_1 = $5_1 & ($1_1 + -1 | 0) | 0;
       break label$6;
      }
      if ($5_1 >>> 0 < $1_1 >>> 0) {
       break label$6
      }
      $5_1 = ($5_1 >>> 0) % ($1_1 >>> 0) | 0;
     }
     HEAP32[((HEAP32[$0_1 >> 2] | 0) + ($5_1 << 2 | 0) | 0) >> 2] = $3_1;
     $3_1 = HEAP32[$4_1 >> 2] | 0;
     if (!$3_1) {
      break label$2
     }
     label$8 : {
      if ($2_1 >>> 0 > 1 >>> 0) {
       break label$8
      }
      $6_1 = $1_1 + -1 | 0;
      label$9 : while (1) {
       label$10 : {
        label$11 : {
         $7_1 = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) & $6_1 | 0;
         if (($7_1 | 0) != ($5_1 | 0)) {
          break label$11
         }
         $4_1 = $3_1;
         break label$10;
        }
        $2_1 = $3_1;
        label$12 : {
         $1_1 = $7_1 << 2 | 0;
         $8_1 = (HEAP32[$0_1 >> 2] | 0) + $1_1 | 0;
         if (!(HEAP32[$8_1 >> 2] | 0)) {
          break label$12
         }
         label$13 : {
          label$14 : while (1) {
           $7_1 = $2_1;
           $2_1 = HEAP32[$2_1 >> 2] | 0;
           if (!$2_1) {
            break label$13
           }
           if (Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]) != Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2])) {
            break label$13
           }
           if (Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]) != Math_fround(HEAPF32[($2_1 + 12 | 0) >> 2])) {
            break label$13
           }
           if (Math_fround(HEAPF32[($3_1 + 16 | 0) >> 2]) == Math_fround(HEAPF32[($2_1 + 16 | 0) >> 2])) {
            continue label$14
           }
           break label$14;
          };
         }
         HEAP32[$4_1 >> 2] = $2_1;
         HEAP32[$7_1 >> 2] = HEAP32[(HEAP32[((HEAP32[$0_1 >> 2] | 0) + $1_1 | 0) >> 2] | 0) >> 2] | 0;
         HEAP32[(HEAP32[((HEAP32[$0_1 >> 2] | 0) + $1_1 | 0) >> 2] | 0) >> 2] = $3_1;
         break label$10;
        }
        HEAP32[$8_1 >> 2] = $4_1;
        $4_1 = $3_1;
        $5_1 = $7_1;
       }
       $3_1 = HEAP32[$4_1 >> 2] | 0;
       if ($3_1) {
        continue label$9
       }
       break label$2;
      };
     }
     label$15 : while (1) {
      label$16 : {
       $7_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
       if ($7_1 >>> 0 < $1_1 >>> 0) {
        break label$16
       }
       $7_1 = ($7_1 >>> 0) % ($1_1 >>> 0) | 0;
      }
      label$17 : {
       label$18 : {
        if (($7_1 | 0) != ($5_1 | 0)) {
         break label$18
        }
        $4_1 = $3_1;
        break label$17;
       }
       $2_1 = $3_1;
       label$19 : {
        $6_1 = $7_1 << 2 | 0;
        $8_1 = (HEAP32[$0_1 >> 2] | 0) + $6_1 | 0;
        if (HEAP32[$8_1 >> 2] | 0) {
         break label$19
        }
        HEAP32[$8_1 >> 2] = $4_1;
        $4_1 = $3_1;
        $5_1 = $7_1;
        break label$17;
       }
       label$20 : {
        label$21 : while (1) {
         $7_1 = $2_1;
         $2_1 = HEAP32[$2_1 >> 2] | 0;
         if (!$2_1) {
          break label$20
         }
         if (Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]) != Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2])) {
          break label$20
         }
         if (Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]) != Math_fround(HEAPF32[($2_1 + 12 | 0) >> 2])) {
          break label$20
         }
         if (Math_fround(HEAPF32[($3_1 + 16 | 0) >> 2]) == Math_fround(HEAPF32[($2_1 + 16 | 0) >> 2])) {
          continue label$21
         }
         break label$21;
        };
       }
       HEAP32[$4_1 >> 2] = $2_1;
       HEAP32[$7_1 >> 2] = HEAP32[(HEAP32[((HEAP32[$0_1 >> 2] | 0) + $6_1 | 0) >> 2] | 0) >> 2] | 0;
       HEAP32[(HEAP32[((HEAP32[$0_1 >> 2] | 0) + $6_1 | 0) >> 2] | 0) >> 2] = $3_1;
      }
      $3_1 = HEAP32[$4_1 >> 2] | 0;
      if ($3_1) {
       continue label$15
      }
      break label$2;
     };
    }
    $3_1 = HEAP32[$0_1 >> 2] | 0;
    HEAP32[$0_1 >> 2] = 0;
    label$22 : {
     if (!$3_1) {
      break label$22
     }
     $2032($3_1 | 0);
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = 0;
   }
   return;
  }
  $3(global$1 + 1869 | 0 | 0);
  abort();
 }
 
 function $130($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $7_1 = 0, $4_1 = 0, $6_1 = 0, $3_1 = 0, $5_1 = 0, $8_1 = 0, $9_1 = 0;
  $3_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    $4_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    $5_1 = __wasm_popcnt_i32($4_1 | 0) | 0;
    if ($5_1 >>> 0 > 1 >>> 0) {
     break label$2
    }
    $3_1 = ($4_1 + -1 | 0) & $3_1 | 0;
    break label$1;
   }
   if ($3_1 >>> 0 < $4_1 >>> 0) {
    break label$1
   }
   $3_1 = ($3_1 >>> 0) % ($4_1 >>> 0) | 0;
  }
  $6_1 = (HEAP32[$1_1 >> 2] | 0) + ($3_1 << 2 | 0) | 0;
  $7_1 = HEAP32[$6_1 >> 2] | 0;
  label$3 : while (1) {
   $8_1 = $7_1;
   $7_1 = HEAP32[$7_1 >> 2] | 0;
   if (($7_1 | 0) != ($2_1 | 0)) {
    continue label$3
   }
   break label$3;
  };
  label$4 : {
   label$5 : {
    $9_1 = $1_1 + 8 | 0;
    if (($8_1 | 0) == ($9_1 | 0)) {
     break label$5
    }
    $7_1 = HEAP32[($8_1 + 4 | 0) >> 2] | 0;
    label$6 : {
     label$7 : {
      if ($5_1 >>> 0 > 1 >>> 0) {
       break label$7
      }
      $7_1 = $7_1 & ($4_1 + -1 | 0) | 0;
      break label$6;
     }
     if ($7_1 >>> 0 < $4_1 >>> 0) {
      break label$6
     }
     $7_1 = ($7_1 >>> 0) % ($4_1 >>> 0) | 0;
    }
    if (($7_1 | 0) == ($3_1 | 0)) {
     break label$4
    }
   }
   label$8 : {
    $7_1 = HEAP32[$2_1 >> 2] | 0;
    if (!$7_1) {
     break label$8
    }
    $7_1 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
    label$9 : {
     label$10 : {
      if ($5_1 >>> 0 > 1 >>> 0) {
       break label$10
      }
      $7_1 = $7_1 & ($4_1 + -1 | 0) | 0;
      break label$9;
     }
     if ($7_1 >>> 0 < $4_1 >>> 0) {
      break label$9
     }
     $7_1 = ($7_1 >>> 0) % ($4_1 >>> 0) | 0;
    }
    if (($7_1 | 0) == ($3_1 | 0)) {
     break label$4
    }
   }
   HEAP32[$6_1 >> 2] = 0;
  }
  label$11 : {
   $7_1 = HEAP32[$2_1 >> 2] | 0;
   if (!$7_1) {
    break label$11
   }
   $6_1 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
   label$12 : {
    label$13 : {
     if ($5_1 >>> 0 > 1 >>> 0) {
      break label$13
     }
     $6_1 = $6_1 & ($4_1 + -1 | 0) | 0;
     break label$12;
    }
    if ($6_1 >>> 0 < $4_1 >>> 0) {
     break label$12
    }
    $6_1 = ($6_1 >>> 0) % ($4_1 >>> 0) | 0;
   }
   if (($6_1 | 0) == ($3_1 | 0)) {
    break label$11
   }
   HEAP32[((HEAP32[$1_1 >> 2] | 0) + ($6_1 << 2 | 0) | 0) >> 2] = $8_1;
   $7_1 = HEAP32[$2_1 >> 2] | 0;
  }
  HEAP32[$8_1 >> 2] = $7_1;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[($1_1 + 12 | 0) >> 2] = (HEAP32[($1_1 + 12 | 0) >> 2] | 0) + -1 | 0;
  HEAP8[($0_1 + 8 | 0) >> 0] = 1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $9_1;
  HEAP32[$0_1 >> 2] = $2_1;
 }
 
 function $131() {
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $1_1 = 0, $0_1 = 0, $2_1 = 0;
  $0_1 = global$1;
  $1_1 = $0_1 + 24696 | 0;
  i64toi32_i32$1 = $1_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  $2_1 = $0_1 + 24760 | 0;
  i64toi32_i32$1 = $2_1;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $1_1 + 12 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($1_1 + 20 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $1_1 + 32 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1_1 + 44 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($1_1 + 40 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $1_1 + 52 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($1_1 + 60 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $2_1 + 8 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  fimport$3(global$15 + 41 | 0 | 0, 0 | 0, $0_1 + 1024 | 0 | 0) | 0;
 }
 
 function $132($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[(global$1 + 65844 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   HEAP32[((global$1 + 65844 | 0) + 4 | 0) >> 2] = $1_1;
   $2032($1_1 | 0);
  }
 }
 
 function $133() {
  var $4_1 = 0, $1_1 = 0, $0_1 = 0, $11_1 = Math_fround(0), $12_1 = Math_fround(0), i64toi32_i32$0 = 0, $5_1 = 0, $6_1 = 0, $13_1 = Math_fround(0), i64toi32_i32$1 = 0, $7_1 = 0, $14_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $10_1 = 0, $9_1 = 0, $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20_1 = Math_fround(0), $21_1 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25_1 = Math_fround(0), $2_1 = 0, $3_1 = 0, $8_1 = 0, $45_1 = 0;
  $0_1 = global$1;
  $1_1 = $341() | 0;
  $2_1 = $341() | 0;
  $3_1 = $341() | 0;
  $4_1 = HEAP32[((HEAP32[(($341() | 0) + 12 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0;
  $5_1 = $0_1 + 24856 | 0;
  HEAP32[($5_1 + 40972 | 0) >> 2] = 1065353216;
  $0_1 = $0_1 + 24844 | 0;
  HEAP32[($5_1 + 40968 | 0) >> 2] = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[$0_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $45_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1;
  HEAP32[(i64toi32_i32$0 + 40960 | 0) >> 2] = $45_1;
  HEAP32[(i64toi32_i32$0 + 40964 | 0) >> 2] = i64toi32_i32$1;
  $5_1 = 0;
  $6_1 = 0;
  label$1 : {
   $7_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
   $8_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
   if (($7_1 | 0) == ($8_1 | 0)) {
    break label$1
   }
   $6_1 = 0;
   label$2 : {
    label$3 : while (1) {
     label$4 : {
      label$5 : {
       $0_1 = HEAP32[$7_1 >> 2] | 0;
       $1_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
       if (!$1_1) {
        break label$5
       }
       if (!(HEAPU8[($1_1 + 4 | 0) >> 0] | 0)) {
        break label$4
       }
      }
      $1_1 = global$1;
      $9_1 = HEAP32[($0_1 + 100 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($0_1 + 92 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($0_1 + 96 | 0) >> 2] | 0;
      $10_1 = i64toi32_i32$1;
      $1_1 = ($1_1 + 24856 | 0) + ($6_1 << 5 | 0) | 0;
      HEAP32[($1_1 + 12 | 0) >> 2] = HEAP32[($0_1 + 84 | 0) >> 2] | 0;
      i64toi32_i32$1 = $1_1;
      HEAP32[$1_1 >> 2] = $10_1;
      HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[($1_1 + 8 | 0) >> 2] = $9_1;
      $308($4_1 | 0);
      $11_1 = Math_fround(HEAPF32[($0_1 + 104 | 0) >> 2]);
      $12_1 = Math_fround(HEAPF32[($0_1 + 108 | 0) >> 2]);
      $13_1 = Math_fround(HEAPF32[($0_1 + 112 | 0) >> 2]);
      $14_1 = Math_fround(Math_fround(Math_fround($11_1 * Math_fround(HEAPF32[($4_1 + 384 | 0) >> 2])) + Math_fround($12_1 * Math_fround(HEAPF32[($4_1 + 400 | 0) >> 2]))) + Math_fround(Math_fround($13_1 * Math_fround(HEAPF32[($4_1 + 416 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($4_1 + 432 | 0) >> 2]) * Math_fround(0.0))));
      $15_1 = Math_fround(Math_fround(Math_fround($11_1 * Math_fround(HEAPF32[($4_1 + 372 | 0) >> 2])) + Math_fround($12_1 * Math_fround(HEAPF32[($4_1 + 388 | 0) >> 2]))) + Math_fround(Math_fround($13_1 * Math_fround(HEAPF32[($4_1 + 404 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($4_1 + 420 | 0) >> 2]) * Math_fround(0.0))));
      $16_1 = Math_fround(Math_fround(Math_fround($11_1 * Math_fround(HEAPF32[($4_1 + 376 | 0) >> 2])) + Math_fround($12_1 * Math_fround(HEAPF32[($4_1 + 392 | 0) >> 2]))) + Math_fround(Math_fround($13_1 * Math_fround(HEAPF32[($4_1 + 408 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($4_1 + 424 | 0) >> 2]) * Math_fround(0.0))));
      $12_1 = Math_fround(Math_fround(Math_fround($11_1 * Math_fround(HEAPF32[($4_1 + 380 | 0) >> 2])) + Math_fround($12_1 * Math_fround(HEAPF32[($4_1 + 396 | 0) >> 2]))) + Math_fround(Math_fround($13_1 * Math_fround(HEAPF32[($4_1 + 412 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($4_1 + 428 | 0) >> 2]) * Math_fround(0.0))));
      $11_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($15_1 * $15_1) + Math_fround($16_1 * $16_1)) + Math_fround(Math_fround($12_1 * $12_1) + Math_fround($14_1 * $14_1))))));
      HEAPF32[($1_1 + 28 | 0) >> 2] = Math_fround($14_1 * $11_1);
      HEAPF32[($1_1 + 24 | 0) >> 2] = Math_fround($12_1 * $11_1);
      HEAPF32[($1_1 + 20 | 0) >> 2] = Math_fround($16_1 * $11_1);
      HEAPF32[($1_1 + 16 | 0) >> 2] = Math_fround($15_1 * $11_1);
      if (($6_1 | 0) > (254 | 0)) {
       break label$2
      }
      $6_1 = $6_1 + 1 | 0;
     }
     $7_1 = $7_1 + 4 | 0;
     if (($7_1 | 0) != ($8_1 | 0)) {
      continue label$3
     }
     break label$1;
    };
   }
   $6_1 = 256;
  }
  HEAP32[((global$1 + 24856 | 0) + 40976 | 0) >> 2] = $6_1;
  label$6 : {
   $6_1 = HEAP32[($2_1 + 28 | 0) >> 2] | 0;
   $9_1 = HEAP32[($2_1 + 32 | 0) >> 2] | 0;
   if (($6_1 | 0) == ($9_1 | 0)) {
    break label$6
   }
   $5_1 = 0;
   label$7 : {
    label$8 : while (1) {
     label$9 : {
      label$10 : {
       $0_1 = HEAP32[$6_1 >> 2] | 0;
       $1_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
       if (!$1_1) {
        break label$10
       }
       if (!(HEAPU8[($1_1 + 4 | 0) >> 0] | 0)) {
        break label$9
       }
      }
      $1_1 = global$1;
      $7_1 = HEAP32[($0_1 + 100 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($0_1 + 92 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($0_1 + 96 | 0) >> 2] | 0;
      $10_1 = i64toi32_i32$0;
      $1_1 = ($1_1 + 24856 | 0) + Math_imul($5_1, 48) | 0;
      HEAP32[($1_1 + 8204 | 0) >> 2] = HEAP32[($0_1 + 84 | 0) >> 2] | 0;
      i64toi32_i32$0 = $1_1 + 8192 | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $10_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      HEAP32[($1_1 + 8200 | 0) >> 2] = $7_1;
      $308($4_1 | 0);
      FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($0_1);
      $14_1 = Math_fround(HEAPF32[($4_1 + 420 | 0) >> 2]);
      $15_1 = Math_fround(HEAPF32[($4_1 + 404 | 0) >> 2]);
      $16_1 = Math_fround(HEAPF32[($4_1 + 372 | 0) >> 2]);
      $17_1 = Math_fround(HEAPF32[($4_1 + 388 | 0) >> 2]);
      $18_1 = Math_fround(HEAPF32[($4_1 + 424 | 0) >> 2]);
      $19_1 = Math_fround(HEAPF32[($4_1 + 408 | 0) >> 2]);
      $20_1 = Math_fround(HEAPF32[($4_1 + 376 | 0) >> 2]);
      $21_1 = Math_fround(HEAPF32[($4_1 + 392 | 0) >> 2]);
      $22_1 = Math_fround(HEAPF32[($4_1 + 428 | 0) >> 2]);
      $23_1 = Math_fround(HEAPF32[($4_1 + 412 | 0) >> 2]);
      $24_1 = Math_fround(HEAPF32[($4_1 + 380 | 0) >> 2]);
      $25_1 = Math_fround(HEAPF32[($4_1 + 396 | 0) >> 2]);
      $11_1 = Math_fround(HEAPF32[($0_1 + 108 | 0) >> 2]);
      $12_1 = Math_fround(HEAPF32[($0_1 + 112 | 0) >> 2]);
      $13_1 = Math_fround(HEAPF32[($0_1 + 116 | 0) >> 2]);
      HEAPF32[($1_1 + 8220 | 0) >> 2] = Math_fround(Math_fround(Math_fround($11_1 * Math_fround(HEAPF32[($4_1 + 384 | 0) >> 2])) + Math_fround($12_1 * Math_fround(HEAPF32[($4_1 + 400 | 0) >> 2]))) + Math_fround(Math_fround($13_1 * Math_fround(HEAPF32[($4_1 + 416 | 0) >> 2])) + Math_fround(HEAPF32[($4_1 + 432 | 0) >> 2])));
      HEAPF32[($1_1 + 8216 | 0) >> 2] = Math_fround(Math_fround(Math_fround($11_1 * $24_1) + Math_fround($12_1 * $25_1)) + Math_fround($22_1 + Math_fround($13_1 * $23_1)));
      HEAPF32[($1_1 + 8212 | 0) >> 2] = Math_fround(Math_fround(Math_fround($11_1 * $20_1) + Math_fround($12_1 * $21_1)) + Math_fround($18_1 + Math_fround($13_1 * $19_1)));
      HEAPF32[($1_1 + 8208 | 0) >> 2] = Math_fround(Math_fround(Math_fround($11_1 * $16_1) + Math_fround($12_1 * $17_1)) + Math_fround($14_1 + Math_fround($13_1 * $15_1)));
      $7_1 = HEAP32[($0_1 + 144 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($0_1 + 136 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($0_1 + 140 | 0) >> 2] | 0;
      $10_1 = i64toi32_i32$1;
      HEAP32[($1_1 + 8236 | 0) >> 2] = HEAP32[($0_1 + 132 | 0) >> 2] | 0;
      i64toi32_i32$1 = $1_1 + 8224 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $10_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[($1_1 + 8232 | 0) >> 2] = $7_1;
      if (($5_1 | 0) > (254 | 0)) {
       break label$7
      }
      $5_1 = $5_1 + 1 | 0;
     }
     $6_1 = $6_1 + 4 | 0;
     if (($6_1 | 0) != ($9_1 | 0)) {
      continue label$8
     }
     break label$6;
    };
   }
   $5_1 = 256;
  }
  HEAP32[((global$1 + 24856 | 0) + 40980 | 0) >> 2] = $5_1;
  label$11 : {
   label$12 : {
    $6_1 = HEAP32[($3_1 + 40 | 0) >> 2] | 0;
    $9_1 = HEAP32[($3_1 + 44 | 0) >> 2] | 0;
    if (($6_1 | 0) != ($9_1 | 0)) {
     break label$12
    }
    $5_1 = 0;
    break label$11;
   }
   $5_1 = 0;
   label$13 : {
    label$14 : while (1) {
     label$15 : {
      label$16 : {
       $0_1 = HEAP32[$6_1 >> 2] | 0;
       $1_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
       if (!$1_1) {
        break label$16
       }
       if (!(HEAPU8[($1_1 + 4 | 0) >> 0] | 0)) {
        break label$15
       }
      }
      $1_1 = global$1;
      $7_1 = HEAP32[($0_1 + 100 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($0_1 + 92 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($0_1 + 96 | 0) >> 2] | 0;
      $10_1 = i64toi32_i32$0;
      $1_1 = ($1_1 + 24856 | 0) + Math_imul($5_1, 80) | 0;
      HEAP32[($1_1 + 20492 | 0) >> 2] = HEAP32[($0_1 + 84 | 0) >> 2] | 0;
      i64toi32_i32$0 = $1_1 + 20480 | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $10_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      HEAP32[($1_1 + 20488 | 0) >> 2] = $7_1;
      $308($4_1 | 0);
      FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($0_1);
      $14_1 = Math_fround(HEAPF32[($4_1 + 420 | 0) >> 2]);
      $15_1 = Math_fround(HEAPF32[($4_1 + 404 | 0) >> 2]);
      $16_1 = Math_fround(HEAPF32[($4_1 + 372 | 0) >> 2]);
      $17_1 = Math_fround(HEAPF32[($4_1 + 388 | 0) >> 2]);
      $18_1 = Math_fround(HEAPF32[($4_1 + 424 | 0) >> 2]);
      $19_1 = Math_fround(HEAPF32[($4_1 + 408 | 0) >> 2]);
      $20_1 = Math_fround(HEAPF32[($4_1 + 376 | 0) >> 2]);
      $21_1 = Math_fround(HEAPF32[($4_1 + 392 | 0) >> 2]);
      $22_1 = Math_fround(HEAPF32[($4_1 + 428 | 0) >> 2]);
      $23_1 = Math_fround(HEAPF32[($4_1 + 412 | 0) >> 2]);
      $24_1 = Math_fround(HEAPF32[($4_1 + 380 | 0) >> 2]);
      $25_1 = Math_fround(HEAPF32[($4_1 + 396 | 0) >> 2]);
      $11_1 = Math_fround(HEAPF32[($0_1 + 108 | 0) >> 2]);
      $12_1 = Math_fround(HEAPF32[($0_1 + 112 | 0) >> 2]);
      $13_1 = Math_fround(HEAPF32[($0_1 + 116 | 0) >> 2]);
      HEAPF32[($1_1 + 20508 | 0) >> 2] = Math_fround(Math_fround(Math_fround($11_1 * Math_fround(HEAPF32[($4_1 + 384 | 0) >> 2])) + Math_fround($12_1 * Math_fround(HEAPF32[($4_1 + 400 | 0) >> 2]))) + Math_fround(Math_fround($13_1 * Math_fround(HEAPF32[($4_1 + 416 | 0) >> 2])) + Math_fround(HEAPF32[($4_1 + 432 | 0) >> 2])));
      HEAPF32[($1_1 + 20504 | 0) >> 2] = Math_fround(Math_fround(Math_fround($11_1 * $24_1) + Math_fround($12_1 * $25_1)) + Math_fround($22_1 + Math_fround($13_1 * $23_1)));
      HEAPF32[($1_1 + 20500 | 0) >> 2] = Math_fround(Math_fround(Math_fround($11_1 * $20_1) + Math_fround($12_1 * $21_1)) + Math_fround($18_1 + Math_fround($13_1 * $19_1)));
      HEAPF32[($1_1 + 20496 | 0) >> 2] = Math_fround(Math_fround(Math_fround($11_1 * $16_1) + Math_fround($12_1 * $17_1)) + Math_fround($14_1 + Math_fround($13_1 * $15_1)));
      $308($4_1 | 0);
      FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($0_1);
      $11_1 = Math_fround(HEAPF32[($0_1 + 152 | 0) >> 2]);
      $12_1 = Math_fround(HEAPF32[($0_1 + 156 | 0) >> 2]);
      $13_1 = Math_fround(HEAPF32[($0_1 + 160 | 0) >> 2]);
      $14_1 = Math_fround(Math_fround(Math_fround($11_1 * Math_fround(HEAPF32[($4_1 + 384 | 0) >> 2])) + Math_fround($12_1 * Math_fround(HEAPF32[($4_1 + 400 | 0) >> 2]))) + Math_fround(Math_fround($13_1 * Math_fround(HEAPF32[($4_1 + 416 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($4_1 + 432 | 0) >> 2]) * Math_fround(0.0))));
      $15_1 = Math_fround(Math_fround(Math_fround($11_1 * Math_fround(HEAPF32[($4_1 + 372 | 0) >> 2])) + Math_fround($12_1 * Math_fround(HEAPF32[($4_1 + 388 | 0) >> 2]))) + Math_fround(Math_fround($13_1 * Math_fround(HEAPF32[($4_1 + 404 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($4_1 + 420 | 0) >> 2]) * Math_fround(0.0))));
      $16_1 = Math_fround(Math_fround(Math_fround($11_1 * Math_fround(HEAPF32[($4_1 + 376 | 0) >> 2])) + Math_fround($12_1 * Math_fround(HEAPF32[($4_1 + 392 | 0) >> 2]))) + Math_fround(Math_fround($13_1 * Math_fround(HEAPF32[($4_1 + 408 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($4_1 + 424 | 0) >> 2]) * Math_fround(0.0))));
      $12_1 = Math_fround(Math_fround(Math_fround($11_1 * Math_fround(HEAPF32[($4_1 + 380 | 0) >> 2])) + Math_fround($12_1 * Math_fround(HEAPF32[($4_1 + 396 | 0) >> 2]))) + Math_fround(Math_fround($13_1 * Math_fround(HEAPF32[($4_1 + 412 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($4_1 + 428 | 0) >> 2]) * Math_fround(0.0))));
      $11_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($15_1 * $15_1) + Math_fround($16_1 * $16_1)) + Math_fround(Math_fround($12_1 * $12_1) + Math_fround($14_1 * $14_1))))));
      HEAPF32[($1_1 + 20524 | 0) >> 2] = Math_fround($14_1 * $11_1);
      HEAPF32[($1_1 + 20520 | 0) >> 2] = Math_fround($12_1 * $11_1);
      HEAPF32[($1_1 + 20516 | 0) >> 2] = Math_fround($16_1 * $11_1);
      HEAPF32[($1_1 + 20512 | 0) >> 2] = Math_fround($15_1 * $11_1);
      i64toi32_i32$1 = HEAP32[($0_1 + 136 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($0_1 + 140 | 0) >> 2] | 0;
      $10_1 = i64toi32_i32$1;
      $7_1 = HEAP32[($0_1 + 144 | 0) >> 2] | 0;
      HEAP32[($1_1 + 20540 | 0) >> 2] = HEAP32[($0_1 + 132 | 0) >> 2] | 0;
      HEAP32[($1_1 + 20536 | 0) >> 2] = $7_1;
      i64toi32_i32$1 = $1_1 + 20528 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $10_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      $11_1 = Math_fround(HEAPF32[($0_1 + 176 | 0) >> 2]);
      $12_1 = Math_fround(HEAPF32[($0_1 + 180 | 0) >> 2]);
      HEAPF32[($1_1 + 20548 | 0) >> 2] = $12_1;
      HEAP32[($1_1 + 20556 | 0) >> 2] = 0;
      HEAPF32[($1_1 + 20544 | 0) >> 2] = $11_1;
      HEAPF32[($1_1 + 20552 | 0) >> 2] = Math_fround(Math_fround(1.0) / Math_fround($12_1 - $11_1));
      if (($5_1 | 0) > (254 | 0)) {
       break label$13
      }
      $5_1 = $5_1 + 1 | 0;
     }
     $6_1 = $6_1 + 4 | 0;
     if (($6_1 | 0) != ($9_1 | 0)) {
      continue label$14
     }
     break label$11;
    };
   }
   $5_1 = 256;
  }
  $4_1 = global$1 + 24856 | 0;
  HEAP32[($4_1 + 40984 | 0) >> 2] = $5_1;
  $489($431(2 | 0) | 0 | 0, $4_1 | 0);
 }
 
 function $134($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $135($0_1) {
  $0_1 = $0_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1);
 }
 
 function $136() {
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $1_1 = 0, $2_1 = 0, $0_1 = 0, $3_1 = 0;
  $0_1 = global$1;
  $1_1 = $0_1 + 24780 | 0;
  i64toi32_i32$1 = $1_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  $2_1 = $0_1 + 65844 | 0;
  HEAP32[($2_1 + 8 | 0) >> 2] = 0;
  i64toi32_i32$1 = $2_1;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1_1 + 12 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($1_1 + 20 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $1_1 + 32 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1_1 + 44 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($1_1 + 40 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $1_1 + 52 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($1_1 + 60 | 0) >> 2] = 1065353216;
  $1_1 = $2030(12 | 0) | 0;
  HEAP32[$2_1 >> 2] = $1_1;
  $3_1 = $1_1 + 12 | 0;
  HEAP32[($2_1 + 8 | 0) >> 2] = $3_1;
  HEAP32[($1_1 + 8 | 0) >> 2] = 0;
  i64toi32_i32$1 = $1_1;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($2_1 + 4 | 0) >> 2] = $3_1;
  fimport$3(global$15 + 73 | 0 | 0, 0 | 0, $0_1 + 1024 | 0 | 0) | 0;
 }
 
 function $137($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $2_1 = ((HEAP32[($0_1 + 32 | 0) >> 2] | 0) - (HEAP32[($0_1 + 28 | 0) >> 2] | 0) | 0) >> 2 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        $3_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
        $4_1 = HEAP32[($0_1 + 60 | 0) >> 2] | 0;
        if ($3_1 >>> 0 >= $4_1 >>> 0) {
         break label$6
        }
        HEAP32[($3_1 + 8 | 0) >> 2] = 0;
        HEAP32[($3_1 + 4 | 0) >> 2] = $2_1;
        HEAP16[$3_1 >> 1] = 256;
        HEAP32[($0_1 + 56 | 0) >> 2] = $3_1 + 12 | 0;
        break label$5;
       }
       $5_1 = $0_1 + 52 | 0;
       $6_1 = HEAP32[$5_1 >> 2] | 0;
       $7_1 = $3_1 - $6_1 | 0;
       $8_1 = ($7_1 | 0) / (12 | 0) | 0;
       $3_1 = $8_1 + 1 | 0;
       if ($3_1 >>> 0 >= 357913942 >>> 0) {
        break label$4
       }
       $5_1 = 0;
       label$7 : {
        $4_1 = ($4_1 - $6_1 | 0 | 0) / (12 | 0) | 0;
        $9_1 = $4_1 << 1 | 0;
        $4_1 = $4_1 >>> 0 < 178956970 >>> 0 ? ($9_1 >>> 0 < $3_1 >>> 0 ? $3_1 : $9_1) : 357913941;
        if (!$4_1) {
         break label$7
        }
        if ($4_1 >>> 0 >= 357913942 >>> 0) {
         break label$3
        }
        $5_1 = $2030(Math_imul($4_1, 12) | 0) | 0;
       }
       $3_1 = $5_1 + Math_imul($8_1, 12) | 0;
       HEAP32[($3_1 + 8 | 0) >> 2] = 0;
       HEAP32[($3_1 + 4 | 0) >> 2] = $2_1;
       HEAP16[$3_1 >> 1] = 256;
       $2_1 = $3_1 + Math_imul(($7_1 | 0) / (-12 | 0) | 0, 12) | 0;
       $5_1 = $5_1 + Math_imul($4_1, 12) | 0;
       $3_1 = $3_1 + 12 | 0;
       label$8 : {
        if (($7_1 | 0) < (1 | 0)) {
         break label$8
        }
        $2173($2_1 | 0, $6_1 | 0, $7_1 | 0) | 0;
       }
       HEAP32[($0_1 + 60 | 0) >> 2] = $5_1;
       HEAP32[($0_1 + 56 | 0) >> 2] = $3_1;
       HEAP32[($0_1 + 52 | 0) >> 2] = $2_1;
       if (!$6_1) {
        break label$5
       }
       $2032($6_1 | 0);
      }
      label$9 : {
       $3_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
       $2_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
       if (($3_1 | 0) == ($2_1 | 0)) {
        break label$9
       }
       HEAP32[$3_1 >> 2] = $1_1;
       HEAP32[($0_1 + 32 | 0) >> 2] = $3_1 + 4 | 0;
       return;
      }
      $4_1 = $0_1 + 28 | 0;
      $6_1 = HEAP32[$4_1 >> 2] | 0;
      $7_1 = $3_1 - $6_1 | 0;
      $5_1 = $7_1 >> 2 | 0;
      $3_1 = $5_1 + 1 | 0;
      if ($3_1 >>> 0 >= 1073741824 >>> 0) {
       break label$2
      }
      label$10 : {
       label$11 : {
        $2_1 = $2_1 - $6_1 | 0;
        $4_1 = $2_1 >> 1 | 0;
        $2_1 = ($2_1 >> 2 | 0) >>> 0 < 536870911 >>> 0 ? ($4_1 >>> 0 < $3_1 >>> 0 ? $3_1 : $4_1) : 1073741823;
        if ($2_1) {
         break label$11
        }
        $3_1 = 0;
        break label$10;
       }
       if ($2_1 >>> 0 >= 1073741824 >>> 0) {
        break label$1
       }
       $3_1 = $2030($2_1 << 2 | 0 | 0) | 0;
      }
      $5_1 = $3_1 + ($5_1 << 2 | 0) | 0;
      HEAP32[$5_1 >> 2] = $1_1;
      $1_1 = $3_1 + ($2_1 << 2 | 0) | 0;
      $2_1 = $5_1 + 4 | 0;
      label$12 : {
       if (($7_1 | 0) < (1 | 0)) {
        break label$12
       }
       $2173($3_1 | 0, $6_1 | 0, $7_1 | 0) | 0;
      }
      HEAP32[($0_1 + 36 | 0) >> 2] = $1_1;
      HEAP32[($0_1 + 32 | 0) >> 2] = $2_1;
      HEAP32[($0_1 + 28 | 0) >> 2] = $3_1;
      label$13 : {
       if (!$6_1) {
        break label$13
       }
       $2032($6_1 | 0);
      }
      return;
     }
     $2097($5_1 | 0);
     abort();
    }
    $3(global$1 + 2017 | 0 | 0);
    abort();
   }
   $2097($4_1 | 0);
   abort();
  }
  $3(global$1 + 2017 | 0 | 0);
  abort();
 }
 
 function $138($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $5_1 = 0, $3_1 = 0, $6_1 = 0, $7_1 = 0, $1_1 = 0, $2_1 = 0;
  label$1 : {
   if (!(HEAP32[($0_1 + 4 | 0) >> 2] | 0)) {
    break label$1
   }
   $1_1 = $440() | 0;
   $2_1 = $442() | 0;
   $426(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
   label$2 : {
    $3_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
    $4_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
    if (($3_1 | 0) == ($4_1 | 0)) {
     break label$2
    }
    $5_1 = 0;
    label$3 : while (1) {
     label$4 : {
      $6_1 = Math_imul($5_1, 12);
      $7_1 = $4_1 + $6_1 | 0;
      if (!(HEAP32[($7_1 + 8 | 0) >> 2] | 0)) {
       break label$4
      }
      $4_1 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
      label$5 : {
       label$6 : {
        if (!(HEAPU8[$7_1 >> 0] | 0)) {
         break label$6
        }
        $4_1 = ((HEAP32[($0_1 + 40 | 0) >> 2] | 0) + Math_imul($4_1, 24) | 0) + 4 | 0;
        break label$5;
       }
       $4_1 = (HEAP32[((HEAP32[($0_1 + 28 | 0) >> 2] | 0) + ($4_1 << 2 | 0) | 0) >> 2] | 0) + 4 | 0;
      }
      fimport$22($5_1 + 36064 | 0 | 0);
      $427(HEAP32[(((HEAP32[($0_1 + 52 | 0) >> 2] | 0) + $6_1 | 0) + 8 | 0) >> 2] | 0 | 0);
      fimport$23(0 | 0, 0 | 0, HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0);
      $437(HEAP32[(((HEAP32[($0_1 + 52 | 0) >> 2] | 0) + $6_1 | 0) + 8 | 0) >> 2] | 0 | 0);
      $4_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
      $3_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
     }
     $5_1 = $5_1 + 1 | 0;
     if ($5_1 >>> 0 < (($3_1 - $4_1 | 0 | 0) / (12 | 0) | 0) >>> 0) {
      continue label$3
     }
     break label$3;
    };
   }
   $427($2_1 | 0);
   $426($1_1 | 0);
  }
 }
 
 function $139($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP8[(((HEAP32[($0_1 + 52 | 0) >> 2] | 0) + Math_imul($1_1, 12) | 0) + 1 | 0) >> 0] = $2_1;
 }
 
 function $140($0_1) {
  $0_1 = $0_1 | 0;
  var $7_1 = 0, $1_1 = 0, $2_1 = 0, $8_1 = 0, $6_1 = 0, $5_1 = 0, $11_1 = 0, $4_1 = 0, $3_1 = 0, $10_1 = 0, $9_1 = 0;
  $1_1 = global$0 - 32 | 0;
  global$0 = $1_1;
  $424(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  $2_1 = 0;
  HEAP32[($1_1 + 24 | 0) >> 2] = 0;
  HEAP32[($1_1 + 16 | 0) >> 2] = 0;
  HEAP32[($1_1 + 20 | 0) >> 2] = 0;
  label$1 : {
   $3_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
   $4_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   if (($3_1 | 0) == ($4_1 | 0)) {
    break label$1
   }
   $2_1 = 0;
   $5_1 = 0;
   $6_1 = 0;
   $7_1 = 0;
   $8_1 = 0;
   label$2 : {
    label$3 : {
     label$4 : while (1) {
      label$5 : {
       if (!(HEAPU8[(($4_1 + Math_imul($8_1, 12) | 0) + 1 | 0) >> 0] | 0)) {
        break label$5
       }
       $9_1 = $8_1 + 36064 | 0;
       label$6 : {
        if ($7_1 >>> 0 >= $6_1 >>> 0) {
         break label$6
        }
        HEAP32[$7_1 >> 2] = $9_1;
        $7_1 = $7_1 + 4 | 0;
        HEAP32[($1_1 + 20 | 0) >> 2] = $7_1;
        break label$5;
       }
       $10_1 = $7_1 - $5_1 | 0;
       $11_1 = $10_1 >> 2 | 0;
       $7_1 = $11_1 + 1 | 0;
       if ($7_1 >>> 0 >= 1073741824 >>> 0) {
        break label$3
       }
       label$7 : {
        label$8 : {
         $2_1 = $6_1 - $5_1 | 0;
         $6_1 = $2_1 >> 1 | 0;
         $7_1 = ($2_1 >> 2 | 0) >>> 0 < 536870911 >>> 0 ? ($6_1 >>> 0 < $7_1 >>> 0 ? $7_1 : $6_1) : 1073741823;
         if ($7_1) {
          break label$8
         }
         $2_1 = 0;
         break label$7;
        }
        if ($7_1 >>> 0 >= 1073741824 >>> 0) {
         break label$2
        }
        $2_1 = $2030($7_1 << 2 | 0 | 0) | 0;
       }
       $11_1 = $2_1 + ($11_1 << 2 | 0) | 0;
       HEAP32[$11_1 >> 2] = $9_1;
       $6_1 = $2_1 + ($7_1 << 2 | 0) | 0;
       $7_1 = $11_1 + 4 | 0;
       label$9 : {
        if (($10_1 | 0) < (1 | 0)) {
         break label$9
        }
        $2173($2_1 | 0, $5_1 | 0, $10_1 | 0) | 0;
       }
       HEAP32[($1_1 + 24 | 0) >> 2] = $6_1;
       HEAP32[($1_1 + 20 | 0) >> 2] = $7_1;
       HEAP32[($1_1 + 16 | 0) >> 2] = $2_1;
       label$10 : {
        if (!$5_1) {
         break label$10
        }
        $2032($5_1 | 0);
        $4_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
        $3_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
       }
       $5_1 = $2_1;
      }
      $8_1 = $8_1 + 1 | 0;
      if ($8_1 >>> 0 < (($3_1 - $4_1 | 0 | 0) / (12 | 0) | 0) >>> 0) {
       continue label$4
      }
      break label$1;
     };
    }
    $2097($1_1 + 16 | 0 | 0);
    abort();
   }
   $3(global$1 + 2017 | 0 | 0);
   abort();
  }
  HEAP32[($1_1 + 12 | 0) >> 2] = 1029;
  $141($1_1 + 16 | 0 | 0, $2_1 | 0, $1_1 + 12 | 0 | 0) | 0;
  fimport$24(1 | 0, HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0);
  label$11 : {
   $8_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
   if (!$8_1) {
    break label$11
   }
   HEAP32[($1_1 + 20 | 0) >> 2] = $8_1;
   $2032($8_1 | 0);
  }
  global$0 = $1_1 + 32 | 0;
 }
 
 function $141($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $7_1 = 0, $5_1 = 0, $3_1 = 0, $4_1 = 0, $6_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
      $5_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
      if ($4_1 >>> 0 >= $5_1 >>> 0) {
       break label$4
      }
      label$5 : {
       if (($4_1 | 0) != ($1_1 | 0)) {
        break label$5
       }
       HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
       HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 4 | 0;
       break label$3;
      }
      $6_1 = ($4_1 - $1_1 | 0) + -4 | 0;
      $7_1 = $4_1;
      label$6 : {
       $5_1 = $7_1 + -4 | 0;
       if ($5_1 >>> 0 >= $7_1 >>> 0) {
        break label$6
       }
       $7_1 = $4_1;
       label$7 : while (1) {
        HEAP32[$7_1 >> 2] = HEAP32[$5_1 >> 2] | 0;
        $7_1 = $7_1 + 4 | 0;
        $5_1 = $5_1 + 4 | 0;
        if ($5_1 >>> 0 < $4_1 >>> 0) {
         continue label$7
        }
        break label$7;
       };
      }
      HEAP32[($0_1 + 4 | 0) >> 2] = $7_1;
      label$8 : {
       if (!$6_1) {
        break label$8
       }
       $2175($4_1 - (($6_1 >> 2 | 0) << 2 | 0) | 0 | 0, $1_1 | 0, $6_1 | 0) | 0;
      }
      HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
      break label$3;
     }
     $6_1 = HEAP32[$0_1 >> 2] | 0;
     $4_1 = (($4_1 - $6_1 | 0) >> 2 | 0) + 1 | 0;
     if ($4_1 >>> 0 >= 1073741824 >>> 0) {
      break label$2
     }
     HEAP32[($3_1 + 24 | 0) >> 2] = $0_1 + 8 | 0;
     $7_1 = 0;
     HEAP32[($3_1 + 20 | 0) >> 2] = 0;
     label$9 : {
      $5_1 = $5_1 - $6_1 | 0;
      $8_1 = $5_1 >> 1 | 0;
      $5_1 = ($5_1 >> 2 | 0) >>> 0 < 536870911 >>> 0 ? ($8_1 >>> 0 < $4_1 >>> 0 ? $4_1 : $8_1) : 1073741823;
      if (!$5_1) {
       break label$9
      }
      if ($5_1 >>> 0 >= 1073741824 >>> 0) {
       break label$1
      }
      $7_1 = $2030($5_1 << 2 | 0 | 0) | 0;
     }
     HEAP32[($3_1 + 8 | 0) >> 2] = $7_1;
     $4_1 = $7_1 + ((($1_1 - $6_1 | 0) >> 2 | 0) << 2 | 0) | 0;
     HEAP32[($3_1 + 16 | 0) >> 2] = $4_1;
     HEAP32[($3_1 + 20 | 0) >> 2] = $7_1 + ($5_1 << 2 | 0) | 0;
     HEAP32[($3_1 + 12 | 0) >> 2] = $4_1;
     $142($3_1 + 8 | 0 | 0, $2_1 | 0);
     $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
     $5_1 = HEAP32[$0_1 >> 2] | 0;
     $7_1 = $1_1 - $5_1 | 0;
     $2_1 = $4_1 - $7_1 | 0;
     HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
     label$10 : {
      if (($7_1 | 0) < (1 | 0)) {
       break label$10
      }
      $2173($2_1 | 0, $5_1 | 0, $7_1 | 0) | 0;
     }
     label$11 : {
      label$12 : {
       $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
       $7_1 = $5_1 - $1_1 | 0;
       if (($7_1 | 0) > (0 | 0)) {
        break label$12
       }
       $1_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
       break label$11;
      }
      $2173(HEAP32[($3_1 + 16 | 0) >> 2] | 0 | 0, $1_1 | 0, $7_1 | 0) | 0;
      $1_1 = (HEAP32[($3_1 + 16 | 0) >> 2] | 0) + $7_1 | 0;
      HEAP32[($3_1 + 16 | 0) >> 2] = $1_1;
      $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     }
     $7_1 = HEAP32[$0_1 >> 2] | 0;
     HEAP32[$0_1 >> 2] = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
     HEAP32[($3_1 + 12 | 0) >> 2] = $7_1;
     HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
     HEAP32[($3_1 + 16 | 0) >> 2] = $5_1;
     $1_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     HEAP32[($0_1 + 8 | 0) >> 2] = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
     HEAP32[($3_1 + 8 | 0) >> 2] = $7_1;
     HEAP32[($3_1 + 20 | 0) >> 2] = $1_1;
     label$13 : {
      if (($5_1 | 0) == ($7_1 | 0)) {
       break label$13
      }
      HEAP32[($3_1 + 16 | 0) >> 2] = $5_1 + ((((($5_1 - $7_1 | 0) + -4 | 0) >>> 2 | 0) ^ -1 | 0) << 2 | 0) | 0;
     }
     label$14 : {
      if (!$7_1) {
       break label$14
      }
      $2032($7_1 | 0);
     }
     $1_1 = $4_1;
    }
    global$0 = $3_1 + 32 | 0;
    return $1_1 | 0;
   }
   $2097($0_1 | 0);
   abort();
  }
  $3(global$1 + 2017 | 0 | 0);
  abort();
 }
 
 function $142($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  label$1 : {
   label$2 : {
    $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    if (($2_1 | 0) != ($3_1 | 0)) {
     break label$2
    }
    label$3 : {
     $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     $5_1 = HEAP32[$0_1 >> 2] | 0;
     if ($4_1 >>> 0 <= $5_1 >>> 0) {
      break label$3
     }
     $5_1 = (((($4_1 - $5_1 | 0) >> 2 | 0) + 1 | 0 | 0) / (-2 | 0) | 0) << 2 | 0;
     $3_1 = $4_1 + $5_1 | 0;
     label$4 : {
      $2_1 = $2_1 - $4_1 | 0;
      if (!$2_1) {
       break label$4
      }
      $2175($3_1 | 0, $4_1 | 0, $2_1 | 0) | 0;
      $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     }
     $2_1 = $3_1 + $2_1 | 0;
     HEAP32[($0_1 + 8 | 0) >> 2] = $2_1;
     HEAP32[($0_1 + 4 | 0) >> 2] = $4_1 + $5_1 | 0;
     break label$2;
    }
    $3_1 = $3_1 - $5_1 | 0;
    $3_1 = $3_1 ? $3_1 >> 1 | 0 : 1;
    if ($3_1 >>> 0 >= 1073741824 >>> 0) {
     break label$1
    }
    $6_1 = $3_1 << 2 | 0;
    $7_1 = $2030($6_1 | 0) | 0;
    $8_1 = $7_1 + $6_1 | 0;
    $6_1 = $7_1 + ($3_1 & -4 | 0) | 0;
    label$5 : {
     label$6 : {
      $3_1 = $2_1 - $4_1 | 0;
      if ($3_1) {
       break label$6
      }
      $2_1 = $6_1;
      break label$5;
     }
     $2_1 = $6_1 + $3_1 | 0;
     $3_1 = $6_1;
     label$7 : while (1) {
      HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2] | 0;
      $4_1 = $4_1 + 4 | 0;
      $3_1 = $3_1 + 4 | 0;
      if (($2_1 | 0) != ($3_1 | 0)) {
       continue label$7
      }
      break label$7;
     };
    }
    HEAP32[($0_1 + 12 | 0) >> 2] = $8_1;
    HEAP32[($0_1 + 8 | 0) >> 2] = $2_1;
    HEAP32[($0_1 + 4 | 0) >> 2] = $6_1;
    HEAP32[$0_1 >> 2] = $7_1;
    if (!$5_1) {
     break label$2
    }
    $2032($5_1 | 0);
    $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   }
   HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
   HEAP32[($0_1 + 8 | 0) >> 2] = $2_1 + 4 | 0;
   return;
  }
  $3(global$1 + 2017 | 0 | 0);
  abort();
 }
 
 function $143($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1, $12_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  $11_1 = $11_1 | 0;
  $12_1 = $12_1 | 0;
  var $13_1 = 0, $14_1 = 0;
  $13_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if ($2_1) {
     break label$2
    }
    if ($3_1) {
     break label$2
    }
    if (!$4_1) {
     break label$1
    }
   }
   $14_1 = $440() | 0;
   $426($13_1 | 0);
   fimport$25(36008 | 0, $13_1 | 0);
   fimport$22($1_1 + 36064 | 0 | 0);
   $2_1 = $2_1 ? 16384 : 0;
   $13_1 = $2_1 | 256 | 0;
   label$3 : {
    if ($7_1) {
     break label$3
    }
    $7_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   }
   $2_1 = $3_1 ? $13_1 : $2_1;
   label$4 : {
    if ($8_1) {
     break label$4
    }
    $8_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   }
   $3_1 = $2_1 | 1024 | 0;
   label$5 : {
    if ($11_1) {
     break label$5
    }
    $11_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   }
   $2_1 = $4_1 ? $3_1 : $2_1;
   $3_1 = $7_1 + $5_1 | 0;
   $4_1 = $8_1 + $6_1 | 0;
   $7_1 = $11_1 + $9_1 | 0;
   label$6 : {
    if ($12_1) {
     break label$6
    }
    $12_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   }
   fimport$26($5_1 | 0, $6_1 | 0, $3_1 | 0, $4_1 | 0, $9_1 | 0, $10_1 | 0, $7_1 | 0, $12_1 + $10_1 | 0 | 0, $2_1 | 0, 9728 | 0);
   $426($14_1 | 0);
  }
 }
 
 function $144($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $1_1 = 0, $2_1 = 0;
  $1_1 = $440() | 0;
  $2_1 = $441() | 0;
  fimport$27(1 | 0, $0_1 + 4 | 0 | 0);
  $424(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  label$1 : {
   $3_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   if ((HEAP32[($0_1 + 56 | 0) >> 2] | 0 | 0) == ($3_1 | 0)) {
    break label$1
   }
   $4_1 = 0;
   label$2 : while (1) {
    $3_1 = $3_1 + Math_imul($4_1, 12) | 0;
    $5_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    label$3 : {
     label$4 : {
      if (!(HEAPU8[$3_1 >> 0] | 0)) {
       break label$4
      }
      $3_1 = (HEAP32[($0_1 + 40 | 0) >> 2] | 0) + Math_imul($5_1, 24) | 0;
      fimport$28(1 | 0, $3_1 | 0);
      $428(HEAP32[$3_1 >> 2] | 0 | 0);
      fimport$29(36161 | 0, HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0);
      fimport$30(36160 | 0, $4_1 + 36064 | 0 | 0, 36161 | 0, HEAP32[$3_1 >> 2] | 0 | 0);
      break label$3;
     }
     label$5 : {
      $3_1 = HEAP32[((HEAP32[($0_1 + 28 | 0) >> 2] | 0) + ($5_1 << 2 | 0) | 0) >> 2] | 0;
      if (FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($3_1) | 0) {
       break label$5
      }
      FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($3_1, HEAP32[($0_1 + 16 | 0) >> 2] | 0, HEAP32[($0_1 + 20 | 0) >> 2] | 0);
      FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($3_1);
     }
     fimport$31(36160 | 0, $4_1 + 36064 | 0 | 0, 3553 | 0, FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($3_1) | 0 | 0, 0 | 0);
    }
    $4_1 = $4_1 + 1 | 0;
    $3_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
    if ($4_1 >>> 0 < (((HEAP32[($0_1 + 56 | 0) >> 2] | 0) - $3_1 | 0 | 0) / (12 | 0) | 0) >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
  label$6 : {
   if (!(HEAPU8[($0_1 + 12 | 0) >> 0] | 0)) {
    break label$6
   }
   label$7 : {
    $4_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (!$4_1) {
     break label$7
    }
    label$8 : {
     if (FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($4_1) | 0) {
      break label$8
     }
     $4_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($4_1, HEAP32[($0_1 + 16 | 0) >> 2] | 0, HEAP32[($0_1 + 20 | 0) >> 2] | 0);
     $4_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($4_1);
    }
    $0_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    $0_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1) | 0;
    label$9 : {
     if (($4_1 | 0) != (35056 | 0)) {
      break label$9
     }
     fimport$31(36160 | 0, 33306 | 0, 3553 | 0, $0_1 | 0, 0 | 0);
     break label$6;
    }
    fimport$31(36160 | 0, 36096 | 0, 3553 | 0, $0_1 | 0, 0 | 0);
    break label$6;
   }
   fimport$28(1 | 0, $0_1 + 8 | 0 | 0);
   $428(HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0);
   fimport$29(36161 | 0, 34041 | 0, HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0);
   fimport$30(36160 | 0, 33306 | 0, 36161 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0);
  }
  $428(0 | 0);
  $426($1_1 | 0);
  $425($2_1 | 0);
 }
 
 function $145($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $4_1 = 0, $3_1 = 0, $5_1 = 0, $2_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   $2_1 = $0_1 + 4 | 0;
   $436($1_1 | 0);
   label$2 : {
    $1_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
    if ((HEAP32[($0_1 + 56 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
     break label$2
    }
    $3_1 = 0;
    label$3 : while (1) {
     label$4 : {
      $4_1 = Math_imul($3_1, 12);
      $5_1 = $1_1 + $4_1 | 0;
      if (!(HEAP32[($5_1 + 8 | 0) >> 2] | 0)) {
       break label$4
      }
      fimport$10(1 | 0, $5_1 + 8 | 0 | 0);
      $1_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
     }
     label$5 : {
      $4_1 = $1_1 + $4_1 | 0;
      if (!(HEAPU8[$4_1 >> 0] | 0)) {
       break label$5
      }
      fimport$32(1 | 0, (HEAP32[($0_1 + 40 | 0) >> 2] | 0) + Math_imul(HEAP32[($4_1 + 4 | 0) >> 2] | 0, 24) | 0 | 0);
      $1_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
     }
     $3_1 = $3_1 + 1 | 0;
     if ($3_1 >>> 0 < (((HEAP32[($0_1 + 56 | 0) >> 2] | 0) - $1_1 | 0 | 0) / (12 | 0) | 0) >>> 0) {
      continue label$3
     }
     break label$3;
    };
   }
   fimport$33(1 | 0, $2_1 | 0);
   if (!(HEAPU8[($0_1 + 12 | 0) >> 0] | 0)) {
    break label$1
   }
   if (HEAP32[($0_1 + 24 | 0) >> 2] | 0) {
    break label$1
   }
   fimport$32(1 | 0, $0_1 + 8 | 0 | 0);
  }
 }
 
 function $146() {
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $0_1 = 0;
  $0_1 = $2030(64 | 0) | 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[i64toi32_i32$1 >> 2] = (global$1 + 22264 | 0) + 8 | 0;
  HEAP16[(i64toi32_i32$1 + 12 | 0) >> 1] = 0;
  i64toi32_i32$1 = i64toi32_i32$1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 32 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 40 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 48 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 56 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  return $0_1 | 0;
 }
 
 function $147($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $137($0_1 | 0, $1_1 | 0);
 }
 
 function $148($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 24 | 0) >> 2] = $1_1;
 }
 
 function $149($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP8[($0_1 + 12 | 0) >> 0] = $1_1;
 }
 
 function $150($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 16 | 0) >> 2] = $1_1;
 }
 
 function $151($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!($392() | 0)) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1);
   return;
  }
  $549($0_1 | 0, 0 | 0);
 }
 
 function $152($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  HEAP32[$0_1 >> 2] = (global$1 + 22264 | 0) + 8 | 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   HEAP32[($0_1 + 56 | 0) >> 2] = $1_1;
   $2032($1_1 | 0);
  }
  label$2 : {
   $1_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$2
   }
   HEAP32[($0_1 + 44 | 0) >> 2] = $1_1;
   $2032($1_1 | 0);
  }
  label$3 : {
   $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$3
   }
   HEAP32[($0_1 + 32 | 0) >> 2] = $1_1;
   $2032($1_1 | 0);
  }
  return $0_1 | 0;
 }
 
 function $153($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  HEAP32[$0_1 >> 2] = (global$1 + 22264 | 0) + 8 | 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   HEAP32[($0_1 + 56 | 0) >> 2] = $1_1;
   $2032($1_1 | 0);
  }
  label$2 : {
   $1_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$2
   }
   HEAP32[($0_1 + 44 | 0) >> 2] = $1_1;
   $2032($1_1 | 0);
  }
  label$3 : {
   $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$3
   }
   HEAP32[($0_1 + 32 | 0) >> 2] = $1_1;
   $2032($1_1 | 0);
  }
  $2032($0_1 | 0);
 }
 
 function $154() {
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $0_1 = 0;
  $0_1 = global$1 + 65856 | 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  i64toi32_i32$1 = i64toi32_i32$1 + 12 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 32 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 44 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 40 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 52 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 60 | 0) >> 2] = 1065353216;
 }
 
 function $155($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $26_1 = Math_fround(0), i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $4_1 = 0, $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25_1 = Math_fround(0), $43_1 = 0.0, $44_1 = 0.0, $45_1 = 0.0, $46_1 = 0.0, $3_1 = 0, $5_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $6_1 = 0, $8_1 = 0, $14_1 = 0, $20_1 = 0, $7_1 = 0, $9_1 = 0, $10_1 = 0, $15_1 = 0, $16_1 = 0, $21_1 = 0, $22_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $105_1 = 0, $154_1 = 0, $211_1 = 0, $262_1 = 0, $319_1 = 0, $370_1 = 0, $423_1 = Math_fround(0), $47_1 = 0.0, $48_1 = 0.0, $49_1 = 0.0, $50_1 = 0.0, $51_1 = 0.0, $52_1 = 0.0, $53_1 = 0.0, $54_1 = 0.0, $55_1 = 0.0, $56_1 = 0.0, $57_1 = 0.0, $58_1 = 0.0, $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = Math_fround(0), $30_1 = Math_fround(0), $31_1 = Math_fround(0), $32_1 = Math_fround(0), $33_1 = Math_fround(0), $34_1 = Math_fround(0), $35_1 = Math_fround(0), $36_1 = Math_fround(0), $37_1 = Math_fround(0), $38_1 = Math_fround(0), $39_1 = Math_fround(0), $40_1 = Math_fround(0), $41_1 = Math_fround(0), $42_1 = Math_fround(0), $785_1 = 0, $790_1 = 0, $795_1 = 0;
  $2_1 = global$0 - 224 | 0;
  global$0 = $2_1;
  $3_1 = $1_1 + 56 | 0;
  $43_1 = +HEAPF64[$3_1 >> 3];
  $44_1 = +HEAPF64[$1_1 >> 3];
  $45_1 = +HEAPF64[($1_1 + 24 | 0) >> 3];
  $46_1 = +HEAPF64[($1_1 + 32 | 0) >> 3];
  $4_1 = $1_1 + 88 | 0;
  HEAPF32[($2_1 + 136 | 0) >> 2] = Math_fround(+HEAPF64[$4_1 >> 3] + +HEAPF64[($1_1 + 64 | 0) >> 3]);
  HEAPF32[($2_1 + 132 | 0) >> 2] = Math_fround($43_1 + $46_1);
  HEAPF32[($2_1 + 128 | 0) >> 2] = Math_fround($45_1 + $44_1);
  $5_1 = $1_1 + 120 | 0;
  $6_1 = $527($2_1 | 0, $2_1 + 128 | 0 | 0, Math_fround(Math_fround(+HEAPF64[$5_1 >> 3] + +HEAPF64[($1_1 + 96 | 0) >> 3]))) | 0;
  i64toi32_i32$2 = $6_1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  $105_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $105_1;
  HEAP32[($0_1 + 8 | 0) >> 2] = i64toi32_i32$1;
  $7_1 = $0_1 + 12 | 0;
  HEAP32[$7_1 >> 2] = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
  $43_1 = +HEAPF64[$3_1 >> 3];
  $44_1 = +HEAPF64[$1_1 >> 3];
  $45_1 = +HEAPF64[($1_1 + 24 | 0) >> 3];
  $46_1 = +HEAPF64[($1_1 + 32 | 0) >> 3];
  HEAPF32[($2_1 + 136 | 0) >> 2] = Math_fround(+HEAPF64[$4_1 >> 3] - +HEAPF64[($1_1 + 64 | 0) >> 3]);
  HEAPF32[($2_1 + 132 | 0) >> 2] = Math_fround($43_1 - $46_1);
  HEAPF32[($2_1 + 128 | 0) >> 2] = Math_fround($45_1 - $44_1);
  $6_1 = $0_1 + 24 | 0;
  $8_1 = $527($2_1 | 0, $2_1 + 128 | 0 | 0, Math_fround(Math_fround(+HEAPF64[$5_1 >> 3] - +HEAPF64[($1_1 + 96 | 0) >> 3]))) | 0;
  i64toi32_i32$2 = $8_1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  $154_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $6_1;
  HEAP32[i64toi32_i32$1 >> 2] = $154_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $9_1 = $0_1 + 32 | 0;
  HEAP32[$9_1 >> 2] = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $10_1 = $0_1 + 36 | 0;
  HEAP32[$10_1 >> 2] = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
  $11_1 = $1_1 + 40 | 0;
  $43_1 = +HEAPF64[$11_1 >> 3];
  $44_1 = +HEAPF64[$3_1 >> 3];
  $45_1 = +HEAPF64[($1_1 + 8 | 0) >> 3];
  $46_1 = +HEAPF64[($1_1 + 24 | 0) >> 3];
  $12_1 = $1_1 + 72 | 0;
  HEAPF32[($2_1 + 136 | 0) >> 2] = Math_fround(+HEAPF64[$4_1 >> 3] + +HEAPF64[$12_1 >> 3]);
  HEAPF32[($2_1 + 132 | 0) >> 2] = Math_fround($44_1 + $43_1);
  HEAPF32[($2_1 + 128 | 0) >> 2] = Math_fround($46_1 + $45_1);
  $8_1 = $0_1 + 44 | 0;
  $13_1 = $1_1 + 104 | 0;
  $14_1 = $527($2_1 | 0, $2_1 + 128 | 0 | 0, Math_fround(Math_fround(+HEAPF64[$5_1 >> 3] + +HEAPF64[$13_1 >> 3]))) | 0;
  i64toi32_i32$2 = $14_1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  $211_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $8_1;
  HEAP32[i64toi32_i32$0 >> 2] = $211_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $15_1 = $0_1 + 52 | 0;
  HEAP32[$15_1 >> 2] = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $16_1 = $0_1 + 56 | 0;
  HEAP32[$16_1 >> 2] = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
  $43_1 = +HEAPF64[$11_1 >> 3];
  $44_1 = +HEAPF64[$3_1 >> 3];
  $45_1 = +HEAPF64[($1_1 + 8 | 0) >> 3];
  $46_1 = +HEAPF64[($1_1 + 24 | 0) >> 3];
  HEAPF32[($2_1 + 136 | 0) >> 2] = Math_fround(+HEAPF64[$4_1 >> 3] - +HEAPF64[$12_1 >> 3]);
  HEAPF32[($2_1 + 132 | 0) >> 2] = Math_fround($44_1 - $43_1);
  HEAPF32[($2_1 + 128 | 0) >> 2] = Math_fround($46_1 - $45_1);
  $14_1 = $0_1 + 64 | 0;
  $11_1 = $527($2_1 | 0, $2_1 + 128 | 0 | 0, Math_fround(Math_fround(+HEAPF64[$5_1 >> 3] - +HEAPF64[$13_1 >> 3]))) | 0;
  i64toi32_i32$2 = $11_1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  $262_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $14_1;
  HEAP32[i64toi32_i32$1 >> 2] = $262_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $12_1 = $0_1 + 72 | 0;
  HEAP32[$12_1 >> 2] = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $13_1 = $0_1 + 76 | 0;
  HEAP32[$13_1 >> 2] = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
  $17_1 = $1_1 + 48 | 0;
  $43_1 = +HEAPF64[$17_1 >> 3];
  $44_1 = +HEAPF64[$3_1 >> 3];
  $45_1 = +HEAPF64[($1_1 + 16 | 0) >> 3];
  $46_1 = +HEAPF64[($1_1 + 24 | 0) >> 3];
  $18_1 = $1_1 + 80 | 0;
  HEAPF32[($2_1 + 136 | 0) >> 2] = Math_fround(+HEAPF64[$4_1 >> 3] + +HEAPF64[$18_1 >> 3]);
  HEAPF32[($2_1 + 132 | 0) >> 2] = Math_fround($44_1 + $43_1);
  HEAPF32[($2_1 + 128 | 0) >> 2] = Math_fround($46_1 + $45_1);
  $11_1 = $0_1 + 84 | 0;
  $19_1 = $1_1 + 112 | 0;
  $20_1 = $527($2_1 | 0, $2_1 + 128 | 0 | 0, Math_fround(Math_fround(+HEAPF64[$5_1 >> 3] + +HEAPF64[$19_1 >> 3]))) | 0;
  i64toi32_i32$2 = $20_1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  $319_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $11_1;
  HEAP32[i64toi32_i32$0 >> 2] = $319_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $21_1 = $0_1 + 92 | 0;
  HEAP32[$21_1 >> 2] = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $22_1 = $0_1 + 96 | 0;
  HEAP32[$22_1 >> 2] = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
  $43_1 = +HEAPF64[$17_1 >> 3];
  $44_1 = +HEAPF64[$3_1 >> 3];
  $45_1 = +HEAPF64[($1_1 + 16 | 0) >> 3];
  $46_1 = +HEAPF64[($1_1 + 24 | 0) >> 3];
  HEAPF32[($2_1 + 136 | 0) >> 2] = Math_fround(+HEAPF64[$4_1 >> 3] - +HEAPF64[$18_1 >> 3]);
  HEAPF32[($2_1 + 132 | 0) >> 2] = Math_fround($44_1 - $43_1);
  HEAPF32[($2_1 + 128 | 0) >> 2] = Math_fround($46_1 - $45_1);
  $3_1 = $0_1 + 104 | 0;
  $4_1 = $527($2_1 | 0, $2_1 + 128 | 0 | 0, Math_fround(Math_fround(+HEAPF64[$5_1 >> 3] - +HEAPF64[$19_1 >> 3]))) | 0;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  $370_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $3_1;
  HEAP32[i64toi32_i32$1 >> 2] = $370_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $5_1 = $0_1 + 112 | 0;
  HEAP32[$5_1 >> 2] = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $20_1 = $0_1 + 116 | 0;
  HEAP32[$20_1 >> 2] = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
  $23_1 = Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2]);
  $4_1 = $0_1 + 8 | 0;
  $24_1 = Math_fround(HEAPF32[$4_1 >> 2]);
  $25_1 = Math_fround(HEAPF32[$7_1 >> 2]);
  $26_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($23_1 * $23_1) + Math_fround($24_1 * $24_1)) + Math_fround($25_1 * $25_1)))));
  HEAPF32[($0_1 + 16 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($0_1 + 16 | 0) >> 2]) * $26_1);
  HEAPF32[$7_1 >> 2] = Math_fround($25_1 * $26_1);
  HEAPF32[$4_1 >> 2] = Math_fround($24_1 * $26_1);
  HEAPF32[($0_1 + 4 | 0) >> 2] = Math_fround($23_1 * $26_1);
  $26_1 = Math_fround(HEAPF32[$6_1 >> 2]);
  $423_1 = $26_1;
  $4_1 = $0_1 + 28 | 0;
  $23_1 = Math_fround(HEAPF32[$4_1 >> 2]);
  $24_1 = Math_fround(HEAPF32[$9_1 >> 2]);
  $26_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($26_1 * $26_1) + Math_fround($23_1 * $23_1)) + Math_fround($24_1 * $24_1)))));
  HEAPF32[$6_1 >> 2] = Math_fround($423_1 * $26_1);
  HEAPF32[$4_1 >> 2] = Math_fround($23_1 * $26_1);
  HEAPF32[$9_1 >> 2] = Math_fround($24_1 * $26_1);
  HEAPF32[$10_1 >> 2] = Math_fround(Math_fround(HEAPF32[$10_1 >> 2]) * $26_1);
  $23_1 = Math_fround(HEAPF32[$8_1 >> 2]);
  $4_1 = $0_1 + 48 | 0;
  $24_1 = Math_fround(HEAPF32[$4_1 >> 2]);
  $25_1 = Math_fround(HEAPF32[$15_1 >> 2]);
  $26_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($23_1 * $23_1) + Math_fround($24_1 * $24_1)) + Math_fround($25_1 * $25_1)))));
  HEAPF32[$16_1 >> 2] = Math_fround(Math_fround(HEAPF32[$16_1 >> 2]) * $26_1);
  HEAPF32[$15_1 >> 2] = Math_fround($25_1 * $26_1);
  HEAPF32[$4_1 >> 2] = Math_fround($24_1 * $26_1);
  HEAPF32[$8_1 >> 2] = Math_fround($23_1 * $26_1);
  $23_1 = Math_fround(HEAPF32[$14_1 >> 2]);
  $4_1 = $0_1 + 68 | 0;
  $24_1 = Math_fround(HEAPF32[$4_1 >> 2]);
  $25_1 = Math_fround(HEAPF32[$12_1 >> 2]);
  $26_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($23_1 * $23_1) + Math_fround($24_1 * $24_1)) + Math_fround($25_1 * $25_1)))));
  HEAPF32[$13_1 >> 2] = Math_fround(Math_fround(HEAPF32[$13_1 >> 2]) * $26_1);
  HEAPF32[$12_1 >> 2] = Math_fround($25_1 * $26_1);
  HEAPF32[$4_1 >> 2] = Math_fround($24_1 * $26_1);
  HEAPF32[$14_1 >> 2] = Math_fround($23_1 * $26_1);
  $23_1 = Math_fround(HEAPF32[$11_1 >> 2]);
  $4_1 = $0_1 + 88 | 0;
  $24_1 = Math_fround(HEAPF32[$4_1 >> 2]);
  $25_1 = Math_fround(HEAPF32[$21_1 >> 2]);
  $26_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($23_1 * $23_1) + Math_fround($24_1 * $24_1)) + Math_fround($25_1 * $25_1)))));
  HEAPF32[$22_1 >> 2] = Math_fround(Math_fround(HEAPF32[$22_1 >> 2]) * $26_1);
  HEAPF32[$21_1 >> 2] = Math_fround($25_1 * $26_1);
  HEAPF32[$4_1 >> 2] = Math_fround($24_1 * $26_1);
  HEAPF32[$11_1 >> 2] = Math_fround($23_1 * $26_1);
  $23_1 = Math_fround(HEAPF32[i64toi32_i32$1 >> 2]);
  $4_1 = $0_1 + 108 | 0;
  $24_1 = Math_fround(HEAPF32[$4_1 >> 2]);
  $25_1 = Math_fround(HEAPF32[$5_1 >> 2]);
  $26_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($23_1 * $23_1) + Math_fround($24_1 * $24_1)) + Math_fround($25_1 * $25_1)))));
  HEAPF32[$20_1 >> 2] = Math_fround(Math_fround(HEAPF32[$20_1 >> 2]) * $26_1);
  HEAPF32[$5_1 >> 2] = Math_fround($25_1 * $26_1);
  HEAPF32[$4_1 >> 2] = Math_fround($24_1 * $26_1);
  HEAPF32[i64toi32_i32$1 >> 2] = Math_fround($23_1 * $26_1);
  $156($2_1 | 0, $1_1 | 0);
  $1_1 = global$1;
  $43_1 = +HEAPF64[($2_1 + 40 | 0) >> 3];
  $44_1 = +HEAPF64[($2_1 + 48 | 0) >> 3];
  $45_1 = +HEAPF64[($2_1 + 56 | 0) >> 3];
  $46_1 = +HEAPF64[($2_1 + 72 | 0) >> 3];
  $47_1 = +HEAPF64[($2_1 + 80 | 0) >> 3];
  $48_1 = +HEAPF64[($2_1 + 88 | 0) >> 3];
  $49_1 = +HEAPF64[($2_1 + 104 | 0) >> 3];
  $50_1 = +HEAPF64[($2_1 + 112 | 0) >> 3];
  $51_1 = +HEAPF64[($2_1 + 120 | 0) >> 3];
  $52_1 = +HEAPF64[$2_1 >> 3];
  $53_1 = +HEAPF64[($2_1 + 8 | 0) >> 3];
  $54_1 = +HEAPF64[($2_1 + 16 | 0) >> 3];
  $55_1 = +HEAPF64[($2_1 + 24 | 0) >> 3];
  $56_1 = +HEAPF64[($2_1 + 32 | 0) >> 3];
  $57_1 = +HEAPF64[($2_1 + 64 | 0) >> 3];
  $58_1 = +HEAPF64[($2_1 + 96 | 0) >> 3];
  $2173($2_1 + 128 | 0 | 0, $1_1 + 2088 | 0 | 0, 96 | 0) | 0;
  $4_1 = $0_1 + 120 | 0;
  $157($4_1 | 0, $2_1 + 128 | 0 | 0, ($2_1 + 128 | 0) + 96 | 0 | 0);
  label$1 : {
   $1_1 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
   $3_1 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
   if (($1_1 | 0) == ($3_1 | 0)) {
    break label$1
   }
   $27_1 = Math_fround($51_1);
   $28_1 = Math_fround($50_1);
   $29_1 = Math_fround($49_1);
   $30_1 = Math_fround($58_1);
   $31_1 = Math_fround($48_1);
   $32_1 = Math_fround($47_1);
   $33_1 = Math_fround($46_1);
   $34_1 = Math_fround($57_1);
   $35_1 = Math_fround($45_1);
   $36_1 = Math_fround($44_1);
   $37_1 = Math_fround($43_1);
   $38_1 = Math_fround($56_1);
   $39_1 = Math_fround($55_1);
   $40_1 = Math_fround($54_1);
   $41_1 = Math_fround($53_1);
   $42_1 = Math_fround($52_1);
   label$2 : while (1) {
    $26_1 = Math_fround(HEAPF32[$1_1 >> 2]);
    $23_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
    $24_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
    $25_1 = Math_fround(Math_fround(Math_fround($26_1 * $39_1) + Math_fround($23_1 * $35_1)) + Math_fround(Math_fround($24_1 * $31_1) + $27_1));
    HEAPF32[($1_1 + 8 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($26_1 * $40_1) + Math_fround($23_1 * $36_1)) + Math_fround(Math_fround($24_1 * $32_1) + $28_1)) / $25_1);
    HEAPF32[($1_1 + 4 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($26_1 * $41_1) + Math_fround($23_1 * $37_1)) + Math_fround(Math_fround($24_1 * $33_1) + $29_1)) / $25_1);
    HEAPF32[$1_1 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($26_1 * $42_1) + Math_fround($23_1 * $38_1)) + Math_fround(Math_fround($24_1 * $34_1) + $30_1)) / $25_1);
    $1_1 = $1_1 + 12 | 0;
    if (($1_1 | 0) != ($3_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  $1_1 = $529($2_1 | 0, $4_1 | 0) | 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
  $785_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1 + 136 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $785_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1 + 20 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $790_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + 152 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $790_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $1_1 + 12 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $795_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1 + 144 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $795_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  global$0 = $2_1 + 224 | 0;
 }
 
 function $156($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $31_1 = 0.0, $3_1 = 0.0, $4_1 = 0.0, $9_1 = 0.0, $7_1 = 0.0, $8_1 = 0.0, $13_1 = 0.0, $30_1 = 0.0, $2_1 = 0.0, $5_1 = 0.0, $10_1 = 0.0, $14_1 = 0.0, $15_1 = 0.0, $16_1 = 0.0, $18_1 = 0.0, $19_1 = 0.0, $23_1 = 0.0, $17_1 = 0.0, $20_1 = 0.0, $21_1 = 0.0, $24_1 = 0.0, $25_1 = 0.0, $27_1 = 0.0, $6_1 = 0.0, $11_1 = 0.0, $12_1 = 0.0, $22_1 = 0.0, $26_1 = 0.0, $28_1 = 0.0, $29_1 = 0.0, $32_1 = 0.0, $33_1 = 0.0, $34_1 = 0.0;
  $2_1 = +HEAPF64[($1_1 + 80 | 0) >> 3];
  $3_1 = +HEAPF64[($1_1 + 40 | 0) >> 3];
  $4_1 = +HEAPF64[($1_1 + 48 | 0) >> 3];
  $5_1 = +HEAPF64[($1_1 + 72 | 0) >> 3];
  $6_1 = $2_1 * $3_1 - $4_1 * $5_1;
  $7_1 = +HEAPF64[$1_1 >> 3];
  $8_1 = +HEAPF64[($1_1 + 8 | 0) >> 3];
  $9_1 = +HEAPF64[($1_1 + 32 | 0) >> 3];
  $10_1 = +HEAPF64[($1_1 + 64 | 0) >> 3];
  $11_1 = $2_1 * $9_1 - $4_1 * $10_1;
  $12_1 = $5_1 * $9_1 - $3_1 * $10_1;
  $13_1 = +HEAPF64[($1_1 + 16 | 0) >> 3];
  $14_1 = +HEAPF64[($1_1 + 56 | 0) >> 3];
  $15_1 = +HEAPF64[($1_1 + 112 | 0) >> 3];
  $16_1 = +HEAPF64[($1_1 + 104 | 0) >> 3];
  $17_1 = $15_1 * $5_1 - $2_1 * $16_1;
  $18_1 = +HEAPF64[($1_1 + 120 | 0) >> 3];
  $19_1 = +HEAPF64[($1_1 + 88 | 0) >> 3];
  $20_1 = $2_1 * $18_1 - $15_1 * $19_1;
  $21_1 = $18_1 * $5_1 - $19_1 * $16_1;
  $22_1 = $14_1 * $17_1 + ($20_1 * $3_1 - $4_1 * $21_1);
  $23_1 = +HEAPF64[($1_1 + 96 | 0) >> 3];
  $24_1 = $15_1 * $10_1 - $2_1 * $23_1;
  $25_1 = $18_1 * $10_1 - $19_1 * $23_1;
  $26_1 = $14_1 * $24_1 + ($20_1 * $9_1 - $4_1 * $25_1);
  $27_1 = $16_1 * $10_1 - $5_1 * $23_1;
  $28_1 = $14_1 * $27_1 + ($21_1 * $9_1 - $3_1 * $25_1);
  $29_1 = $4_1 * $27_1 + ($17_1 * $9_1 - $3_1 * $24_1);
  $30_1 = +HEAPF64[($1_1 + 24 | 0) >> 3];
  $31_1 = 1.0 / ($7_1 * $22_1 - $26_1 * $8_1 + ($28_1 * $13_1 - $29_1 * $30_1));
  HEAPF64[($0_1 + 120 | 0) >> 3] = ($6_1 * $7_1 - $8_1 * $11_1 + $12_1 * $13_1) * $31_1;
  $32_1 = $15_1 * $3_1 - $4_1 * $16_1;
  $33_1 = $15_1 * $9_1 - $4_1 * $23_1;
  $34_1 = $16_1 * $9_1 - $3_1 * $23_1;
  HEAPF64[($0_1 + 112 | 0) >> 3] = $31_1 * -($7_1 * $32_1 - $8_1 * $33_1 + $13_1 * $34_1);
  HEAPF64[($0_1 + 104 | 0) >> 3] = ($17_1 * $7_1 - $24_1 * $8_1 + $27_1 * $13_1) * $31_1;
  HEAPF64[($0_1 + 96 | 0) >> 3] = $31_1 * -$29_1;
  $5_1 = $19_1 * $3_1 - $14_1 * $5_1;
  $10_1 = $19_1 * $9_1 - $14_1 * $10_1;
  HEAPF64[($0_1 + 88 | 0) >> 3] = $31_1 * -($7_1 * $5_1 - $8_1 * $10_1 + $12_1 * $30_1);
  $3_1 = $18_1 * $3_1 - $14_1 * $16_1;
  $9_1 = $18_1 * $9_1 - $14_1 * $23_1;
  HEAPF64[($0_1 + 80 | 0) >> 3] = ($7_1 * $3_1 - $8_1 * $9_1 + $34_1 * $30_1) * $31_1;
  HEAPF64[($0_1 + 72 | 0) >> 3] = $31_1 * -($21_1 * $7_1 - $25_1 * $8_1 + $27_1 * $30_1);
  HEAPF64[($0_1 + 64 | 0) >> 3] = $28_1 * $31_1;
  $2_1 = $19_1 * $4_1 - $2_1 * $14_1;
  HEAPF64[($0_1 + 56 | 0) >> 3] = ($7_1 * $2_1 - $10_1 * $13_1 + $11_1 * $30_1) * $31_1;
  $4_1 = $18_1 * $4_1 - $15_1 * $14_1;
  HEAPF64[($0_1 + 48 | 0) >> 3] = $31_1 * -($7_1 * $4_1 - $9_1 * $13_1 + $33_1 * $30_1);
  HEAPF64[($0_1 + 40 | 0) >> 3] = ($20_1 * $7_1 - $25_1 * $13_1 + $24_1 * $30_1) * $31_1;
  HEAPF64[($0_1 + 32 | 0) >> 3] = $31_1 * -$26_1;
  HEAPF64[($0_1 + 24 | 0) >> 3] = $31_1 * -($2_1 * $8_1 - $5_1 * $13_1 + $6_1 * $30_1);
  HEAPF64[($0_1 + 16 | 0) >> 3] = ($4_1 * $8_1 - $3_1 * $13_1 + $32_1 * $30_1) * $31_1;
  HEAPF64[($0_1 + 8 | 0) >> 3] = $31_1 * -($20_1 * $8_1 - $21_1 * $13_1 + $17_1 * $30_1);
  HEAPF64[$0_1 >> 3] = $22_1 * $31_1;
 }
 
 function $157($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $6_1 = 0, $3_1 = 0, $5_1 = 0, $7_1 = 0;
  label$1 : {
   $3_1 = $2_1 - $1_1 | 0;
   $4_1 = ($3_1 | 0) / (12 | 0) | 0;
   $5_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   $6_1 = HEAP32[$0_1 >> 2] | 0;
   if ($4_1 >>> 0 > (($5_1 - $6_1 | 0 | 0) / (12 | 0) | 0) >>> 0) {
    break label$1
   }
   label$2 : {
    $3_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) - $6_1 | 0 | 0) / (12 | 0) | 0;
    $7_1 = $4_1 >>> 0 > $3_1 >>> 0 ? $1_1 + Math_imul($3_1, 12) | 0 : $2_1;
    $5_1 = $7_1 - $1_1 | 0;
    if (!$5_1) {
     break label$2
    }
    $2175($6_1 | 0, $1_1 | 0, $5_1 | 0) | 0;
   }
   label$3 : {
    if ($4_1 >>> 0 <= $3_1 >>> 0) {
     break label$3
    }
    $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    label$4 : {
     $4_1 = $2_1 - $7_1 | 0;
     if (($4_1 | 0) < (1 | 0)) {
      break label$4
     }
     $1_1 = ($2173($1_1 | 0, $7_1 | 0, $4_1 | 0) | 0) + Math_imul(($4_1 >>> 0) / (12 >>> 0) | 0, 12) | 0;
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
    return;
   }
   HEAP32[($0_1 + 4 | 0) >> 2] = $6_1 + Math_imul(($5_1 | 0) / (12 | 0) | 0, 12) | 0;
   return;
  }
  label$5 : {
   if (!$6_1) {
    break label$5
   }
   HEAP32[($0_1 + 4 | 0) >> 2] = $6_1;
   $2032($6_1 | 0);
   $5_1 = 0;
   HEAP32[($0_1 + 8 | 0) >> 2] = 0;
   HEAP32[$0_1 >> 2] = 0;
   HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  }
  label$6 : {
   if ($4_1 >>> 0 >= 357913942 >>> 0) {
    break label$6
   }
   $6_1 = ($5_1 | 0) / (12 | 0) | 0;
   $2_1 = $6_1 << 1 | 0;
   $4_1 = $6_1 >>> 0 < 178956970 >>> 0 ? ($2_1 >>> 0 < $4_1 >>> 0 ? $4_1 : $2_1) : 357913941;
   if ($4_1 >>> 0 >= 357913942 >>> 0) {
    break label$6
   }
   $6_1 = Math_imul($4_1, 12);
   $4_1 = $2030($6_1 | 0) | 0;
   HEAP32[$0_1 >> 2] = $4_1;
   HEAP32[($0_1 + 4 | 0) >> 2] = $4_1;
   HEAP32[($0_1 + 8 | 0) >> 2] = $4_1 + $6_1 | 0;
   label$7 : {
    if (($3_1 | 0) < (1 | 0)) {
     break label$7
    }
    $4_1 = ($2173($4_1 | 0, $1_1 | 0, $3_1 | 0) | 0) + Math_imul(($3_1 >>> 0) / (12 >>> 0) | 0, 12) | 0;
   }
   HEAP32[($0_1 + 4 | 0) >> 2] = $4_1;
   return;
  }
  $2097($0_1 | 0);
  abort();
 }
 
 function $158($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (!($537($0_1 | 0, $1_1 | 0) | 0)) {
    break label$1
   }
   if (!($537($0_1 + 20 | 0 | 0, $1_1 | 0) | 0)) {
    break label$1
   }
   if (!($537($0_1 + 40 | 0 | 0, $1_1 | 0) | 0)) {
    break label$1
   }
   if (!($537($0_1 + 60 | 0 | 0, $1_1 | 0) | 0)) {
    break label$1
   }
   if (!($537($0_1 + 80 | 0 | 0, $1_1 | 0) | 0)) {
    break label$1
   }
   return $537($0_1 + 100 | 0 | 0, $1_1 | 0) | 0 | 0;
  }
  return 0 | 0;
 }
 
 function $159() {
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $0_1 = 0;
  $0_1 = global$1 + 65920 | 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  i64toi32_i32$1 = i64toi32_i32$1 + 12 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 32 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 44 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 40 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 52 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 60 | 0) >> 2] = 1065353216;
 }
 
 function $160($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!($392() | 0)) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1);
   return;
  }
  $549($0_1 | 0, 0 | 0);
 }
 
 function $161() {
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $0_1 = 0;
  $0_1 = global$1 + 65984 | 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  i64toi32_i32$1 = i64toi32_i32$1 + 12 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 32 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 44 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 40 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 52 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 60 | 0) >> 2] = 1065353216;
 }
 
 function $162($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = Math_fround(0), $4_1 = Math_fround(0), $2_1 = Math_fround(0), $5_1 = Math_fround(0);
  $2_1 = Math_fround(HEAPF32[$1_1 >> 2]);
  $3_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
  $4_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
  HEAP32[($0_1 + 12 | 0) >> 2] = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
  $5_1 = Math_fround($4_1 / Math_fround(12.920000076293945));
  HEAPF32[($0_1 + 8 | 0) >> 2] = Math_fround($5_1 + Math_fround(Math_fround(Math_fround($590(Math_fround(Math_fround(Math_fround($4_1 + Math_fround(.054999999701976776)) / Math_fround(1.0549999475479126))), Math_fround(Math_fround(2.4000000953674316)))) - $5_1) * ($4_1 < Math_fround(.040449999272823334) ? Math_fround(0.0) : Math_fround(1.0))));
  $4_1 = Math_fround($3_1 / Math_fround(12.920000076293945));
  HEAPF32[($0_1 + 4 | 0) >> 2] = Math_fround($4_1 + Math_fround(Math_fround(Math_fround($590(Math_fround(Math_fround(Math_fround($3_1 + Math_fround(.054999999701976776)) / Math_fround(1.0549999475479126))), Math_fround(Math_fround(2.4000000953674316)))) - $4_1) * ($3_1 < Math_fround(.040449999272823334) ? Math_fround(0.0) : Math_fround(1.0))));
  $3_1 = Math_fround($2_1 / Math_fround(12.920000076293945));
  HEAPF32[$0_1 >> 2] = Math_fround($3_1 + Math_fround(Math_fround(Math_fround($590(Math_fround(Math_fround(Math_fround($2_1 + Math_fround(.054999999701976776)) / Math_fround(1.0549999475479126))), Math_fround(Math_fround(2.4000000953674316)))) - $3_1) * ($2_1 < Math_fround(.040449999272823334) ? Math_fround(0.0) : Math_fround(1.0))));
 }
 
 function $163() {
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $0_1 = 0;
  $0_1 = global$1 + 66048 | 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  i64toi32_i32$1 = i64toi32_i32$1 + 12 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 32 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 44 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 40 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 52 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 60 | 0) >> 2] = 1065353216;
 }
 
 function $164() {
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $0_1 = 0;
  $0_1 = global$1 + 66112 | 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  i64toi32_i32$1 = i64toi32_i32$1 + 12 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 32 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 44 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 40 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 52 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 60 | 0) >> 2] = 1065353216;
 }
 
 function $165($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $2_1 = 0, i64toi32_i32$2 = 0, $1_1 = 0, $24_1 = 0, $30_1 = 0, $36_1 = 0, $39_1 = 0;
  $1_1 = global$0 - 48 | 0;
  global$0 = $1_1;
  HEAP32[($0_1 + 68 | 0) >> 2] = $286() | 0;
  label$1 : {
   if ((HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
    break label$1
   }
   $287($0_1 | 0, 0 | 0);
  }
  $2_1 = global$13;
  HEAP32[(($1_1 + 8 | 0) + 32 | 0) >> 2] = HEAP32[($2_1 + 32 | 0) >> 2] | 0;
  i64toi32_i32$2 = $2_1 + 24 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $24_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($1_1 + 8 | 0) + 24 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $24_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $2_1 + 16 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $30_1 = i64toi32_i32$1;
  i64toi32_i32$1 = ($1_1 + 8 | 0) + 16 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $30_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $2_1 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $36_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($1_1 + 8 | 0) + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $36_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = HEAP32[$2_1 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
  $39_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $1_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $39_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[(i64toi32_i32$1 + 41 | 0) >> 0] = 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, i64toi32_i32$1 + 8 | 0);
  label$2 : {
   label$3 : {
    if (!(HEAPU8[($0_1 + 72 | 0) >> 0] | 0)) {
     break label$3
    }
    $2_1 = $285($0_1 + 4 | 0 | 0, HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0;
    fimport$0(3553 | 0, 0 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0, 0 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $2_1 | 0);
    if (!$2_1) {
     break label$2
    }
    $2033($2_1 | 0);
    break label$2;
   }
   fimport$0(3553 | 0, 0 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0, 0 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, 0 | 0);
  }
  global$0 = $1_1 + 48 | 0;
 }
 
 function $166() {
  var $0_1 = 0;
  $0_1 = $2030(76 | 0) | 0;
  $294($0_1 | 0) | 0;
  HEAP8[($0_1 + 72 | 0) >> 0] = 0;
  HEAP32[($0_1 + 68 | 0) >> 2] = 0;
  HEAP32[$0_1 >> 2] = (global$1 + 22300 | 0) + 8 | 0;
  return $0_1 | 0;
 }
 
 function $167($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP8[($0_1 + 72 | 0) >> 0] = $1_1;
 }
 
 function $168($0_1) {
  $0_1 = $0_1 | 0;
  $295($0_1 | 0) | 0;
  $2032($0_1 | 0);
 }
 
 function $169($0_1) {
  $0_1 = $0_1 | 0;
  return 1 | 0;
 }
 
 function $170($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 68 | 0) >> 2] | 0 | 0;
 }
 
 function $171($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 68 | 0) >> 2] = $1_1;
 }
 
 function $172() {
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $0_1 = 0;
  $0_1 = global$1 + 66176 | 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  i64toi32_i32$1 = i64toi32_i32$1 + 12 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 32 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 44 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 40 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 52 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 60 | 0) >> 2] = 1065353216;
 }
 
 function $173($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  label$1 : {
   if (!(HEAPU8[($0_1 + 4 | 0) >> 0] | 0)) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 208 | 0) >> 2] | 0;
   $2_1 = HEAP32[($0_1 + 212 | 0) >> 2] | 0;
   if (($1_1 | 0) == ($2_1 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $0_1 = HEAP32[$1_1 >> 2] | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($0_1);
    $1_1 = $1_1 + 4 | 0;
    if (($1_1 | 0) != ($2_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $174($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $1_1 = 0, $5_1 = 0, $3_1 = 0, $2_1 = 0, $59_1 = 0, $69_1 = 0, $97_1 = 0, $102_1 = 0, $107_1 = 0, $117_1 = 0, $122_1 = 0, $127_1 = 0;
  $1_1 = global$0 - 48 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      $2_1 = HEAP32[($0_1 + 212 | 0) >> 2] | 0;
      $3_1 = HEAP32[($0_1 + 208 | 0) >> 2] | 0;
      $4_1 = $2_1 - $3_1 | 0;
      if (!$4_1) {
       break label$4
      }
      HEAP32[($1_1 + 40 | 0) >> 2] = 0;
      i64toi32_i32$1 = $1_1;
      i64toi32_i32$0 = 0;
      HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] = i64toi32_i32$0;
      $4_1 = $4_1 >> 2 | 0;
      if ($4_1 >>> 0 >= 153391690 >>> 0) {
       break label$3
      }
      $5_1 = Math_imul($4_1, 28);
      $4_1 = $2030($5_1 | 0) | 0;
      HEAP32[($1_1 + 36 | 0) >> 2] = $4_1;
      HEAP32[($1_1 + 32 | 0) >> 2] = $4_1;
      HEAP32[($1_1 + 40 | 0) >> 2] = $4_1 + $5_1 | 0;
      if (($3_1 | 0) == ($2_1 | 0)) {
       break label$2
      }
      label$5 : while (1) {
       $4_1 = HEAP32[$3_1 >> 2] | 0;
       $5_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($4_1) | 0;
       label$6 : {
        label$7 : {
         $4_1 = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
         if (($4_1 | 0) == (HEAP32[($1_1 + 40 | 0) >> 2] | 0 | 0)) {
          break label$7
         }
         HEAP32[$4_1 >> 2] = (global$1 + 21928 | 0) + 8 | 0;
         i64toi32_i32$2 = $5_1;
         i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
         i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
         $59_1 = i64toi32_i32$0;
         i64toi32_i32$0 = $4_1;
         HEAP32[($4_1 + 4 | 0) >> 2] = $59_1;
         HEAP32[($4_1 + 8 | 0) >> 2] = i64toi32_i32$1;
         HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
         i64toi32_i32$2 = i64toi32_i32$2 + 16 | 0;
         i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
         i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
         $69_1 = i64toi32_i32$1;
         i64toi32_i32$1 = $4_1 + 16 | 0;
         HEAP32[i64toi32_i32$1 >> 2] = $69_1;
         HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
         HEAP32[($4_1 + 24 | 0) >> 2] = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
         HEAP32[($1_1 + 36 | 0) >> 2] = $4_1 + 28 | 0;
         break label$6;
        }
        $175($1_1 + 32 | 0 | 0, $5_1 | 0);
       }
       $3_1 = $3_1 + 4 | 0;
       if (($3_1 | 0) != ($2_1 | 0)) {
        continue label$5
       }
       break label$2;
      };
     }
     $564($0_1 | 0);
     $564($0_1 | 0);
     $4_1 = $0_1 + 128 | 0;
     $4_1 = $528($1_1 | 0, $4_1 | 0, $4_1 | 0) | 0;
     i64toi32_i32$2 = $4_1;
     i64toi32_i32$0 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
     $97_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1 + 12 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $97_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $4_1 + 20 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $102_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1 + 28 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $102_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$2 = $4_1 + 12 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $107_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1 + 20 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $107_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     break label$1;
    }
    $3(global$1 + 2204 | 0 | 0);
    abort();
   }
   $4_1 = $530($1_1 | 0, $1_1 + 32 | 0 | 0) | 0;
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
   $117_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1 + 12 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $117_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $4_1 + 20 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $122_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1 + 28 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $122_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $4_1 + 12 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $127_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1 + 20 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $127_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $5_1 = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
   if (!$5_1) {
    break label$1
   }
   label$8 : {
    label$9 : {
     $4_1 = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
     if (($4_1 | 0) != ($5_1 | 0)) {
      break label$9
     }
     $4_1 = $5_1;
     break label$8;
    }
    label$10 : while (1) {
     $4_1 = $4_1 + -28 | 0;
     FUNCTION_TABLE[HEAP32[(HEAP32[$4_1 >> 2] | 0) >> 2] | 0 | 0]($4_1) | 0;
     if (($4_1 | 0) != ($5_1 | 0)) {
      continue label$10
     }
     break label$10;
    };
    $4_1 = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
   }
   HEAP32[($1_1 + 36 | 0) >> 2] = $5_1;
   $2032($4_1 | 0);
  }
  global$0 = $1_1 + 48 | 0;
 }
 
 function $175($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $2_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $3_1 = 0, $6_1 = 0, i64toi32_i32$0 = 0, $7_1 = 0, $4_1 = 0, $52_1 = 0, $62_1 = 0, $86_1 = 0, $96_1 = 0;
  label$1 : {
   label$2 : {
    $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    $3_1 = HEAP32[$0_1 >> 2] | 0;
    $4_1 = ($2_1 - $3_1 | 0 | 0) / (28 | 0) | 0;
    $5_1 = $4_1 + 1 | 0;
    if ($5_1 >>> 0 >= 153391690 >>> 0) {
     break label$2
    }
    label$3 : {
     label$4 : {
      $6_1 = ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) - $3_1 | 0 | 0) / (28 | 0) | 0;
      $7_1 = $6_1 << 1 | 0;
      $6_1 = $6_1 >>> 0 < 76695844 >>> 0 ? ($7_1 >>> 0 < $5_1 >>> 0 ? $5_1 : $7_1) : 153391689;
      if ($6_1) {
       break label$4
      }
      $7_1 = 0;
      break label$3;
     }
     if ($6_1 >>> 0 >= 153391690 >>> 0) {
      break label$1
     }
     $7_1 = $2030(Math_imul($6_1, 28) | 0) | 0;
    }
    $5_1 = $7_1 + Math_imul($4_1, 28) | 0;
    HEAP32[$5_1 >> 2] = (global$1 + 21928 | 0) + 8 | 0;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
    $52_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $5_1;
    HEAP32[($5_1 + 4 | 0) >> 2] = $52_1;
    HEAP32[($5_1 + 8 | 0) >> 2] = i64toi32_i32$1;
    HEAP32[($5_1 + 12 | 0) >> 2] = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
    i64toi32_i32$2 = i64toi32_i32$2 + 16 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $62_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $5_1 + 16 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $62_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($5_1 + 24 | 0) >> 2] = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
    $1_1 = $7_1 + Math_imul($6_1, 28) | 0;
    $6_1 = $5_1 + 28 | 0;
    label$5 : {
     if (($2_1 | 0) == ($3_1 | 0)) {
      break label$5
     }
     label$6 : while (1) {
      $5_1 = $5_1 + -28 | 0;
      HEAP32[$5_1 >> 2] = (global$1 + 21928 | 0) + 8 | 0;
      i64toi32_i32$2 = $2_1 + -24 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $86_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $5_1;
      HEAP32[($5_1 + 4 | 0) >> 2] = $86_1;
      HEAP32[($5_1 + 8 | 0) >> 2] = i64toi32_i32$1;
      HEAP32[($5_1 + 12 | 0) >> 2] = HEAP32[($2_1 + -16 | 0) >> 2] | 0;
      i64toi32_i32$2 = $2_1 + -12 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $96_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $5_1 + 16 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $96_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[($5_1 + 24 | 0) >> 2] = HEAP32[($2_1 + -4 | 0) >> 2] | 0;
      $2_1 = $2_1 + -28 | 0;
      if (($2_1 | 0) != ($3_1 | 0)) {
       continue label$6
      }
      break label$6;
     };
     $2_1 = HEAP32[$0_1 >> 2] | 0;
     $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    }
    HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
    HEAP32[($0_1 + 4 | 0) >> 2] = $6_1;
    HEAP32[$0_1 >> 2] = $5_1;
    label$7 : {
     if (($3_1 | 0) == ($2_1 | 0)) {
      break label$7
     }
     label$8 : while (1) {
      $3_1 = $3_1 + -28 | 0;
      FUNCTION_TABLE[HEAP32[(HEAP32[$3_1 >> 2] | 0) >> 2] | 0 | 0]($3_1) | 0;
      if (($3_1 | 0) != ($2_1 | 0)) {
       continue label$8
      }
      break label$8;
     };
    }
    label$9 : {
     if (!$2_1) {
      break label$9
     }
     $2032($2_1 | 0);
    }
    return;
   }
   $2097($0_1 | 0);
   abort();
  }
  $3(global$1 + 2204 | 0 | 0);
  abort();
 }
 
 function $176($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $1_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $3_1 = 0, i64toi32_i32$2 = 0, $5_1 = 0, $2_1 = 0, $59_1 = 0, $64_1 = 0, $85_1 = 0, $109_1 = 0;
  $1_1 = global$0 - 48 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      $2_1 = HEAP32[($0_1 + 212 | 0) >> 2] | 0;
      $3_1 = HEAP32[($0_1 + 208 | 0) >> 2] | 0;
      $4_1 = $2_1 - $3_1 | 0;
      if (!$4_1) {
       break label$4
      }
      HEAP32[($1_1 + 40 | 0) >> 2] = 0;
      i64toi32_i32$1 = $1_1;
      i64toi32_i32$0 = 0;
      HEAP32[($1_1 + 32 | 0) >> 2] = 0;
      HEAP32[($1_1 + 36 | 0) >> 2] = i64toi32_i32$0;
      $4_1 = $4_1 >> 2 | 0;
      if ($4_1 >>> 0 >= 214748365 >>> 0) {
       break label$3
      }
      $5_1 = Math_imul($4_1, 20);
      $4_1 = $2030($5_1 | 0) | 0;
      HEAP32[($1_1 + 36 | 0) >> 2] = $4_1;
      HEAP32[($1_1 + 32 | 0) >> 2] = $4_1;
      HEAP32[($1_1 + 40 | 0) >> 2] = $4_1 + $5_1 | 0;
      if (($3_1 | 0) == ($2_1 | 0)) {
       break label$2
      }
      label$5 : while (1) {
       $4_1 = HEAP32[$3_1 >> 2] | 0;
       $5_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($4_1) | 0;
       label$6 : {
        label$7 : {
         $4_1 = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
         if (($4_1 | 0) == (HEAP32[($1_1 + 40 | 0) >> 2] | 0 | 0)) {
          break label$7
         }
         HEAP32[$4_1 >> 2] = (global$1 + 22232 | 0) + 8 | 0;
         i64toi32_i32$2 = $5_1;
         i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
         i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
         $59_1 = i64toi32_i32$0;
         i64toi32_i32$0 = $4_1;
         HEAP32[($4_1 + 4 | 0) >> 2] = $59_1;
         HEAP32[($4_1 + 8 | 0) >> 2] = i64toi32_i32$1;
         i64toi32_i32$2 = i64toi32_i32$2 + 12 | 0;
         i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
         i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
         $64_1 = i64toi32_i32$1;
         i64toi32_i32$1 = $4_1 + 12 | 0;
         HEAP32[i64toi32_i32$1 >> 2] = $64_1;
         HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
         HEAP32[($1_1 + 36 | 0) >> 2] = $4_1 + 20 | 0;
         break label$6;
        }
        $177($1_1 + 32 | 0 | 0, $5_1 | 0);
       }
       $3_1 = $3_1 + 4 | 0;
       if (($3_1 | 0) != ($2_1 | 0)) {
        continue label$5
       }
       break label$2;
      };
     }
     $564($0_1 | 0);
     $4_1 = $534($1_1 + 8 | 0 | 0, $0_1 + 128 | 0 | 0, Math_fround(Math_fround(0.0))) | 0;
     i64toi32_i32$2 = $4_1;
     i64toi32_i32$0 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
     $85_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1 + 40 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $85_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     HEAP32[($0_1 + 48 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
     HEAP32[($0_1 + 52 | 0) >> 2] = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
     break label$1;
    }
    $3(global$1 + 2204 | 0 | 0);
    abort();
   }
   $541($1_1 + 8 | 0 | 0, $1_1 + 32 | 0 | 0);
   HEAP32[($0_1 + 48 | 0) >> 2] = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
   $109_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1 + 40 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $109_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($0_1 + 52 | 0) >> 2] = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
   $3_1 = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
   if (!$3_1) {
    break label$1
   }
   label$8 : {
    label$9 : {
     $4_1 = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
     if (($4_1 | 0) != ($3_1 | 0)) {
      break label$9
     }
     $4_1 = $3_1;
     break label$8;
    }
    label$10 : while (1) {
     $4_1 = $4_1 + -20 | 0;
     FUNCTION_TABLE[HEAP32[(HEAP32[$4_1 >> 2] | 0) >> 2] | 0 | 0]($4_1) | 0;
     if (($4_1 | 0) != ($3_1 | 0)) {
      continue label$10
     }
     break label$10;
    };
    $4_1 = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
   }
   HEAP32[($1_1 + 36 | 0) >> 2] = $3_1;
   $2032($4_1 | 0);
  }
  global$0 = $1_1 + 48 | 0;
 }
 
 function $177($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, i64toi32_i32$1 = 0, $2_1 = 0, i64toi32_i32$2 = 0, $3_1 = 0, $6_1 = 0, i64toi32_i32$0 = 0, $7_1 = 0, $4_1 = 0, $52_1 = 0, $57_1 = 0, $76_1 = 0, $81_1 = 0;
  label$1 : {
   label$2 : {
    $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    $3_1 = HEAP32[$0_1 >> 2] | 0;
    $4_1 = ($2_1 - $3_1 | 0 | 0) / (20 | 0) | 0;
    $5_1 = $4_1 + 1 | 0;
    if ($5_1 >>> 0 >= 214748365 >>> 0) {
     break label$2
    }
    label$3 : {
     label$4 : {
      $6_1 = ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) - $3_1 | 0 | 0) / (20 | 0) | 0;
      $7_1 = $6_1 << 1 | 0;
      $6_1 = $6_1 >>> 0 < 107374182 >>> 0 ? ($7_1 >>> 0 < $5_1 >>> 0 ? $5_1 : $7_1) : 214748364;
      if ($6_1) {
       break label$4
      }
      $7_1 = 0;
      break label$3;
     }
     if ($6_1 >>> 0 >= 214748365 >>> 0) {
      break label$1
     }
     $7_1 = $2030(Math_imul($6_1, 20) | 0) | 0;
    }
    $5_1 = $7_1 + Math_imul($4_1, 20) | 0;
    HEAP32[$5_1 >> 2] = (global$1 + 22232 | 0) + 8 | 0;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
    $52_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $5_1;
    HEAP32[($5_1 + 4 | 0) >> 2] = $52_1;
    HEAP32[($5_1 + 8 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = i64toi32_i32$2 + 12 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $57_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $5_1 + 12 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $57_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $6_1 = $7_1 + Math_imul($6_1, 20) | 0;
    $1_1 = $5_1 + 20 | 0;
    label$5 : {
     if (($2_1 | 0) == ($3_1 | 0)) {
      break label$5
     }
     label$6 : while (1) {
      $5_1 = $5_1 + -20 | 0;
      HEAP32[$5_1 >> 2] = (global$1 + 22232 | 0) + 8 | 0;
      i64toi32_i32$2 = $2_1 + -16 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $76_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $5_1;
      HEAP32[($5_1 + 4 | 0) >> 2] = $76_1;
      HEAP32[($5_1 + 8 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = $2_1 + -8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $81_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $5_1 + 12 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $81_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      $2_1 = $2_1 + -20 | 0;
      if (($2_1 | 0) != ($3_1 | 0)) {
       continue label$6
      }
      break label$6;
     };
     $2_1 = HEAP32[$0_1 >> 2] | 0;
     $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    }
    HEAP32[($0_1 + 8 | 0) >> 2] = $6_1;
    HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
    HEAP32[$0_1 >> 2] = $5_1;
    label$7 : {
     if (($3_1 | 0) == ($2_1 | 0)) {
      break label$7
     }
     label$8 : while (1) {
      $3_1 = $3_1 + -20 | 0;
      FUNCTION_TABLE[HEAP32[(HEAP32[$3_1 >> 2] | 0) >> 2] | 0 | 0]($3_1) | 0;
      if (($3_1 | 0) != ($2_1 | 0)) {
       continue label$8
      }
      break label$8;
     };
    }
    label$9 : {
     if (!$2_1) {
      break label$9
     }
     $2032($2_1 | 0);
    }
    return;
   }
   $2097($0_1 | 0);
   abort();
  }
  $3(global$1 + 2204 | 0 | 0);
  abort();
 }
 
 function $178($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = Math_fround(0);
  HEAPF32[($0_1 + 168 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[$1_1 >> 2]) + Math_fround(HEAPF32[($0_1 + 168 | 0) >> 2]));
  $2_1 = $0_1 + 172 | 0;
  HEAPF32[$2_1 >> 2] = Math_fround(Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]) + Math_fround(HEAPF32[$2_1 >> 2]));
  $3_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
  HEAP8[($0_1 + 60 | 0) >> 0] = 1;
  $0_1 = $0_1 + 176 | 0;
  HEAPF32[$0_1 >> 2] = Math_fround($3_1 + Math_fround(HEAPF32[$0_1 >> 2]));
 }
 
 function $179($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $2_1 = 0, $22_1 = 0;
  $3_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
  $4_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
  $5_1 = Math_fround(HEAPF32[($1_1 + 12 | 0) >> 2]);
  $6_1 = Math_fround(HEAPF32[$1_1 >> 2]);
  HEAP8[($0_1 + 60 | 0) >> 0] = 1;
  $1_1 = $0_1 + 192 | 0;
  $22_1 = $1_1;
  $7_1 = Math_fround(HEAPF32[$1_1 >> 2]);
  $8_1 = Math_fround(HEAPF32[($0_1 + 180 | 0) >> 2]);
  $1_1 = $0_1 + 184 | 0;
  $9_1 = Math_fround(HEAPF32[$1_1 >> 2]);
  $2_1 = $0_1 + 188 | 0;
  $10_1 = Math_fround(HEAPF32[$2_1 >> 2]);
  HEAPF32[$22_1 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($5_1 * $7_1) - Math_fround($6_1 * $8_1)) - Math_fround($4_1 * $9_1)) - Math_fround($3_1 * $10_1));
  HEAPF32[$2_1 >> 2] = Math_fround(Math_fround(Math_fround($6_1 * $9_1) + Math_fround(Math_fround($5_1 * $10_1) + Math_fround($3_1 * $7_1))) - Math_fround($4_1 * $8_1));
  HEAPF32[$1_1 >> 2] = Math_fround(Math_fround(Math_fround($3_1 * $8_1) + Math_fround(Math_fround($5_1 * $9_1) + Math_fround($4_1 * $7_1))) - Math_fround($6_1 * $10_1));
  HEAPF32[($0_1 + 180 | 0) >> 2] = Math_fround(Math_fround(Math_fround($4_1 * $10_1) + Math_fround(Math_fround($5_1 * $8_1) + Math_fround($6_1 * $7_1))) - Math_fround($3_1 * $9_1));
 }
 
 function $180($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = $2_1 | 0;
  var $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $9_1 = Math_fround(0), $8_1 = Math_fround(0), $10_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $11_1 = Math_fround(0), $3_1 = 0, $4_1 = 0;
  $5_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
  $6_1 = Math_fround(HEAPF32[$2_1 >> 2]);
  $7_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
  HEAP8[($0_1 + 60 | 0) >> 0] = 1;
  $2_1 = $0_1 + 192 | 0;
  $8_1 = Math_fround(HEAPF32[$2_1 >> 2]);
  $9_1 = Math_fround($1_1 * Math_fround(.5));
  $1_1 = Math_fround($594(Math_fround($9_1)));
  $9_1 = Math_fround($592(Math_fround($9_1)));
  $10_1 = Math_fround(HEAPF32[($0_1 + 180 | 0) >> 2]);
  $11_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($6_1 * $6_1) + Math_fround($7_1 * $7_1)) + Math_fround($5_1 * $5_1)))));
  $6_1 = Math_fround($9_1 * Math_fround($6_1 * $11_1));
  $3_1 = $0_1 + 184 | 0;
  $12_1 = Math_fround(HEAPF32[$3_1 >> 2]);
  $7_1 = Math_fround($9_1 * Math_fround($7_1 * $11_1));
  $4_1 = $0_1 + 188 | 0;
  $13_1 = Math_fround(HEAPF32[$4_1 >> 2]);
  $5_1 = Math_fround($9_1 * Math_fround($5_1 * $11_1));
  HEAPF32[$2_1 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($1_1 * $8_1) - Math_fround($10_1 * $6_1)) - Math_fround($12_1 * $7_1)) - Math_fround($13_1 * $5_1));
  HEAPF32[$4_1 >> 2] = Math_fround(Math_fround(Math_fround($12_1 * $6_1) + Math_fround(Math_fround($1_1 * $13_1) + Math_fround($8_1 * $5_1))) - Math_fround($10_1 * $7_1));
  HEAPF32[$3_1 >> 2] = Math_fround(Math_fround(Math_fround($10_1 * $5_1) + Math_fround(Math_fround($1_1 * $12_1) + Math_fround($8_1 * $7_1))) - Math_fround($13_1 * $6_1));
  HEAPF32[($0_1 + 180 | 0) >> 2] = Math_fround(Math_fround(Math_fround($13_1 * $7_1) + Math_fround(Math_fround($1_1 * $10_1) + Math_fround($8_1 * $6_1))) - Math_fround($12_1 * $5_1));
 }
 
 function $181($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = Math_fround(0);
  HEAPF32[($0_1 + 196 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[$1_1 >> 2]) * Math_fround(HEAPF32[($0_1 + 196 | 0) >> 2]));
  $2_1 = $0_1 + 200 | 0;
  HEAPF32[$2_1 >> 2] = Math_fround(Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]) * Math_fround(HEAPF32[$2_1 >> 2]));
  $3_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
  HEAP8[($0_1 + 60 | 0) >> 0] = 1;
  $0_1 = $0_1 + 204 | 0;
  HEAPF32[$0_1 >> 2] = Math_fround($3_1 * Math_fround(HEAPF32[$0_1 >> 2]));
 }
 
 function $182() {
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $0_1 = 0;
  $0_1 = global$1 + 66240 | 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  i64toi32_i32$1 = i64toi32_i32$1 + 12 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 32 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 44 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 40 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 52 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 60 | 0) >> 2] = 1065353216;
 }
 
 function $183($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $8_1 = 0, $5_1 = 0, $4_1 = 0, $6_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = $786($3_1 | 0, $0_1 | 0) | 0;
  label$1 : {
   if (!(HEAPU8[$3_1 >> 0] | 0)) {
    break label$1
   }
   $5_1 = $1_1 + $2_1 | 0;
   $2_1 = $0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0;
   $6_1 = ((HEAP32[($2_1 + 4 | 0) >> 2] | 0) & 176 | 0 | 0) == (32 | 0) ? $5_1 : $1_1;
   $7_1 = HEAP32[($2_1 + 24 | 0) >> 2] | 0;
   label$2 : {
    $8_1 = HEAP32[($2_1 + 76 | 0) >> 2] | 0;
    if (($8_1 | 0) != (-1 | 0)) {
     break label$2
    }
    $774($3_1 + 8 | 0 | 0, $2_1 | 0);
    $8_1 = $1023($3_1 + 8 | 0 | 0, global$22 | 0) | 0;
    $8_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$8_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($8_1, 32) | 0;
    $1018($3_1 + 8 | 0 | 0) | 0;
    HEAP32[($2_1 + 76 | 0) >> 2] = $8_1;
   }
   if ($184($7_1 | 0, $1_1 | 0, $6_1 | 0, $5_1 | 0, $2_1 | 0, ($8_1 << 24 | 0) >> 24 | 0 | 0) | 0) {
    break label$1
   }
   $2_1 = $0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0;
   $805($2_1 | 0, HEAP32[($2_1 + 16 | 0) >> 2] | 0 | 5 | 0 | 0);
  }
  $789($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $184($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0, $9_1 = 0, $8_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  label$1 : {
   label$2 : {
    if ($0_1) {
     break label$2
    }
    $7_1 = 0;
    break label$1;
   }
   $8_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
   $7_1 = 0;
   label$3 : {
    $9_1 = $2_1 - $1_1 | 0;
    if (($9_1 | 0) < (1 | 0)) {
     break label$3
    }
    if ((FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0 | 0]($0_1, $1_1, $9_1) | 0 | 0) != ($9_1 | 0)) {
     break label$1
    }
   }
   label$4 : {
    $7_1 = $3_1 - $1_1 | 0;
    $1_1 = ($8_1 | 0) > ($7_1 | 0) ? $8_1 - $7_1 | 0 : 0;
    if (($1_1 | 0) < (1 | 0)) {
     break label$4
    }
    label$5 : {
     label$6 : {
      if ($1_1 >>> 0 < 11 >>> 0) {
       break label$6
      }
      $7_1 = ($1_1 + 16 | 0) & -16 | 0;
      $9_1 = $2030($7_1 | 0) | 0;
      HEAP32[($6_1 + 8 | 0) >> 2] = $7_1 | -2147483648 | 0;
      HEAP32[$6_1 >> 2] = $9_1;
      HEAP32[($6_1 + 4 | 0) >> 2] = $1_1;
      $8_1 = $6_1;
      break label$5;
     }
     HEAP8[($6_1 + 11 | 0) >> 0] = $1_1;
     $8_1 = $6_1;
     $9_1 = $6_1;
    }
    $7_1 = 0;
    HEAP8[(($2174($9_1 | 0, $5_1 | 0, $1_1 | 0) | 0) + $1_1 | 0) >> 0] = 0;
    $9_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0 | 0]($0_1, (wasm2js_i32$0 = HEAP32[$6_1 >> 2] | 0, wasm2js_i32$1 = $6_1, wasm2js_i32$2 = (HEAP8[($8_1 + 11 | 0) >> 0] | 0 | 0) < (0 | 0), wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), $1_1) | 0;
    label$7 : {
     if ((HEAP8[($8_1 + 11 | 0) >> 0] | 0 | 0) > (-1 | 0)) {
      break label$7
     }
     $2032(HEAP32[$6_1 >> 2] | 0 | 0);
    }
    if (($9_1 | 0) != ($1_1 | 0)) {
     break label$1
    }
   }
   label$8 : {
    $1_1 = $3_1 - $2_1 | 0;
    if (($1_1 | 0) < (1 | 0)) {
     break label$8
    }
    $7_1 = 0;
    if ((FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0 | 0]($0_1, $2_1, $1_1) | 0 | 0) != ($1_1 | 0)) {
     break label$1
    }
   }
   HEAP32[($4_1 + 12 | 0) >> 2] = 0;
   $7_1 = $0_1;
  }
  global$0 = $6_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $185() {
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $0_1 = 0;
  $0_1 = global$1 + 66304 | 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  i64toi32_i32$1 = i64toi32_i32$1 + 12 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 32 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 44 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 40 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 52 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 60 | 0) >> 2] = 1065353216;
 }
 
 function $186($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $4_1 = 0, $2_1 = 0, $6_1 = 0, $5_1 = 0, $7_1 = 0;
  $2_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
  $3_1 = $2_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       $4_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
       if (($3_1 | 0) == ($4_1 | 0)) {
        break label$5
       }
       $3_1 = $2_1;
       label$6 : while (1) {
        if ((HEAP32[$3_1 >> 2] | 0 | 0) == ($1_1 | 0)) {
         break label$5
        }
        $3_1 = $3_1 + 4 | 0;
        if (($3_1 | 0) != ($4_1 | 0)) {
         continue label$6
        }
        break label$4;
       };
      }
      if (($3_1 | 0) != ($4_1 | 0)) {
       break label$3
      }
     }
     label$7 : {
      $3_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
      if (($4_1 | 0) == ($3_1 | 0)) {
       break label$7
      }
      HEAP32[$4_1 >> 2] = $1_1;
      HEAP32[($0_1 + 36 | 0) >> 2] = $4_1 + 4 | 0;
      return;
     }
     $5_1 = $4_1 - $2_1 | 0;
     $6_1 = $5_1 >> 2 | 0;
     $4_1 = $6_1 + 1 | 0;
     if ($4_1 >>> 0 >= 1073741824 >>> 0) {
      break label$2
     }
     label$8 : {
      label$9 : {
       $3_1 = $3_1 - $2_1 | 0;
       $7_1 = $3_1 >> 1 | 0;
       $4_1 = ($3_1 >> 2 | 0) >>> 0 < 536870911 >>> 0 ? ($7_1 >>> 0 < $4_1 >>> 0 ? $4_1 : $7_1) : 1073741823;
       if ($4_1) {
        break label$9
       }
       $3_1 = 0;
       break label$8;
      }
      if ($4_1 >>> 0 >= 1073741824 >>> 0) {
       break label$1
      }
      $3_1 = $2030($4_1 << 2 | 0 | 0) | 0;
     }
     $6_1 = $3_1 + ($6_1 << 2 | 0) | 0;
     HEAP32[$6_1 >> 2] = $1_1;
     $4_1 = $3_1 + ($4_1 << 2 | 0) | 0;
     $1_1 = $6_1 + 4 | 0;
     label$10 : {
      if (($5_1 | 0) < (1 | 0)) {
       break label$10
      }
      $2173($3_1 | 0, $2_1 | 0, $5_1 | 0) | 0;
     }
     HEAP32[($0_1 + 40 | 0) >> 2] = $4_1;
     HEAP32[($0_1 + 36 | 0) >> 2] = $1_1;
     HEAP32[($0_1 + 32 | 0) >> 2] = $3_1;
     if (!$2_1) {
      break label$3
     }
     $2032($2_1 | 0);
    }
    return;
   }
   $2097($0_1 + 32 | 0 | 0);
   abort();
  }
  $3(global$1 + 2391 | 0 | 0);
  abort();
 }
 
 function $187($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $4_1 = 0, $2_1 = 0, $6_1 = 0, $5_1 = 0, $7_1 = 0;
  $2_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  $3_1 = $2_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       $4_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
       if (($3_1 | 0) == ($4_1 | 0)) {
        break label$5
       }
       $3_1 = $2_1;
       label$6 : while (1) {
        if ((HEAP32[$3_1 >> 2] | 0 | 0) == ($1_1 | 0)) {
         break label$5
        }
        $3_1 = $3_1 + 4 | 0;
        if (($3_1 | 0) != ($4_1 | 0)) {
         continue label$6
        }
        break label$4;
       };
      }
      if (($3_1 | 0) != ($4_1 | 0)) {
       break label$3
      }
     }
     label$7 : {
      $3_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
      if (($4_1 | 0) == ($3_1 | 0)) {
       break label$7
      }
      HEAP32[$4_1 >> 2] = $1_1;
      HEAP32[($0_1 + 48 | 0) >> 2] = $4_1 + 4 | 0;
      return;
     }
     $5_1 = $4_1 - $2_1 | 0;
     $6_1 = $5_1 >> 2 | 0;
     $4_1 = $6_1 + 1 | 0;
     if ($4_1 >>> 0 >= 1073741824 >>> 0) {
      break label$2
     }
     label$8 : {
      label$9 : {
       $3_1 = $3_1 - $2_1 | 0;
       $7_1 = $3_1 >> 1 | 0;
       $4_1 = ($3_1 >> 2 | 0) >>> 0 < 536870911 >>> 0 ? ($7_1 >>> 0 < $4_1 >>> 0 ? $4_1 : $7_1) : 1073741823;
       if ($4_1) {
        break label$9
       }
       $3_1 = 0;
       break label$8;
      }
      if ($4_1 >>> 0 >= 1073741824 >>> 0) {
       break label$1
      }
      $3_1 = $2030($4_1 << 2 | 0 | 0) | 0;
     }
     $6_1 = $3_1 + ($6_1 << 2 | 0) | 0;
     HEAP32[$6_1 >> 2] = $1_1;
     $4_1 = $3_1 + ($4_1 << 2 | 0) | 0;
     $1_1 = $6_1 + 4 | 0;
     label$10 : {
      if (($5_1 | 0) < (1 | 0)) {
       break label$10
      }
      $2173($3_1 | 0, $2_1 | 0, $5_1 | 0) | 0;
     }
     HEAP32[($0_1 + 52 | 0) >> 2] = $4_1;
     HEAP32[($0_1 + 48 | 0) >> 2] = $1_1;
     HEAP32[($0_1 + 44 | 0) >> 2] = $3_1;
     if (!$2_1) {
      break label$3
     }
     $2032($2_1 | 0);
    }
    return;
   }
   $2097($0_1 + 44 | 0 | 0);
   abort();
  }
  $3(global$1 + 2391 | 0 | 0);
  abort();
 }
 
 function $188($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   $420($1_1 | 0);
   $0_1 = HEAP32[($0_1 + 76 | 0) >> 2] | 0;
   if (!$0_1) {
    break label$1
   }
   label$2 : while (1) {
    $1_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($1_1);
    $0_1 = HEAP32[$0_1 >> 2] | 0;
    if ($0_1) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $189($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $5_1 = 0, i64toi32_i32$0 = 0, $4_1 = 0, i64toi32_i32$1 = 0, $6_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $2_1 = global$0 - 208 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 20 | 0) >> 2] = 0;
  $3_1 = global$23;
  HEAP32[($2_1 + 124 | 0) >> 2] = $3_1 + 32 | 0;
  HEAP32[($2_1 + 16 | 0) >> 2] = $3_1 + 12 | 0;
  $4_1 = $2_1 + 124 | 0;
  $3_1 = $2_1 + 24 | 0;
  $868($4_1 | 0, $3_1 | 0);
  i64toi32_i32$1 = $2_1 + 196 | 0;
  i64toi32_i32$0 = -1;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $5_1 = global$6;
  HEAP32[($2_1 + 124 | 0) >> 2] = $5_1 + 32 | 0;
  HEAP32[($2_1 + 16 | 0) >> 2] = $5_1 + 12 | 0;
  $3_1 = $2($3_1 | 0) | 0;
  label$1 : {
   label$2 : {
    if (HEAP32[($2_1 + 88 | 0) >> 2] | 0) {
     break label$2
    }
    $0_1 = $625((wasm2js_i32$0 = HEAP32[$0_1 >> 2] | 0, wasm2js_i32$1 = $0_1, wasm2js_i32$2 = (HEAP8[($0_1 + 11 | 0) >> 0] | 0 | 0) < (0 | 0), wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) | 0, global$1 + 2459 | 0 | 0) | 0;
    HEAP32[($2_1 + 88 | 0) >> 2] = $0_1;
    if (!$0_1) {
     break label$2
    }
    HEAP32[($2_1 + 112 | 0) >> 2] = 12;
    break label$1;
   }
   $0_1 = ($2_1 + 16 | 0) + (HEAP32[((HEAP32[($2_1 + 16 | 0) >> 2] | 0) + -12 | 0) >> 2] | 0) | 0;
   $805($0_1 | 0, HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 4 | 0 | 0);
  }
  label$3 : {
   $0_1 = (HEAP32[((($2_1 + 16 | 0) + (HEAP32[((HEAP32[($2_1 + 16 | 0) >> 2] | 0) + -12 | 0) >> 2] | 0) | 0) + 16 | 0) >> 2] | 0) & 5 | 0;
   if ($0_1) {
    break label$3
   }
   i64toi32_i32$0 = 0;
   $810($2_1 + 16 | 0 | 0, 0 | 0, i64toi32_i32$0 | 0, 2 | 0) | 0;
   $806($2_1 | 0, $2_1 + 16 | 0 | 0);
   $2065($1_1 | 0, HEAP32[($2_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0);
   i64toi32_i32$0 = 0;
   $810($2_1 + 16 | 0 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0) | 0;
   $5_1 = HEAPU8[($1_1 + 11 | 0) >> 0] | 0;
   $6_1 = (($5_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0);
   $800($2_1 + 16 | 0 | 0, (wasm2js_i32$0 = HEAP32[$1_1 >> 2] | 0, wasm2js_i32$1 = $1_1, wasm2js_i32$2 = $6_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) | 0, (wasm2js_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0, wasm2js_i32$1 = $5_1, wasm2js_i32$2 = $6_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) | 0) | 0;
   label$4 : {
    $1_1 = HEAP32[($2_1 + 88 | 0) >> 2] | 0;
    if (!$1_1) {
     break label$4
    }
    $5_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($3_1) | 0;
    $1_1 = $615($1_1 | 0) | 0;
    HEAP32[($2_1 + 88 | 0) >> 2] = 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($3_1, 0, 0) | 0;
    if (!($1_1 | $5_1 | 0)) {
     break label$3
    }
   }
   $1_1 = ($2_1 + 16 | 0) + (HEAP32[((HEAP32[($2_1 + 16 | 0) >> 2] | 0) + -12 | 0) >> 2] | 0) | 0;
   $805($1_1 | 0, HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 4 | 0 | 0);
  }
  $1_1 = global$6;
  HEAP32[($2_1 + 124 | 0) >> 2] = $1_1 + 32 | 0;
  HEAP32[($2_1 + 16 | 0) >> 2] = $1_1 + 12 | 0;
  $4($3_1 | 0) | 0;
  $764($2_1 + 16 | 0 | 0, global$7 + 4 | 0 | 0) | 0;
  $715($4_1 | 0) | 0;
  global$0 = $2_1 + 208 | 0;
  return !$0_1 | 0;
 }
 
 function $190($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $3_1 = 0, $4_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  $4_1 = 0;
  $5_1 = $3_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = 0;
  HEAP32[($5_1 + 16 | 0) >> 2] = 0;
  HEAP32[($5_1 + 20 | 0) >> 2] = 0;
  $189($1_1 | 0, $5_1 + 16 | 0 | 0) | 0;
  $2_1 = fimport$37($2_1 | 0) | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = (wasm2js_i32$0 = HEAP32[($5_1 + 16 | 0) >> 2] | 0, wasm2js_i32$1 = $5_1 + 16 | 0, wasm2js_i32$2 = (HEAP8[($5_1 + 27 | 0) >> 0] | 0 | 0) < (0 | 0), wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  fimport$38($2_1 | 0, 1 | 0, $5_1 + 12 | 0 | 0, 0 | 0);
  fimport$39($2_1 | 0);
  fimport$40($2_1 | 0, 35713 | 0, $5_1 + 8 | 0 | 0);
  label$1 : {
   label$2 : {
    if (!(HEAP32[($5_1 + 8 | 0) >> 2] | 0)) {
     break label$2
    }
    $4_1 = $2_1;
    break label$1;
   }
   fimport$40($2_1 | 0, 35716 | 0, $5_1 + 4 | 0 | 0);
   $1_1 = $3_1 - (((HEAP32[($5_1 + 4 | 0) >> 2] | 0) + 15 | 0) & -16 | 0) | 0;
   global$0 = $1_1;
   fimport$41($2_1 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0, 0 | 0, $1_1 | 0);
   $2072($0_1 + 92 | 0 | 0, $1_1 | 0) | 0;
   fimport$42($2_1 | 0);
  }
  label$3 : {
   if ((HEAP8[($5_1 + 27 | 0) >> 0] | 0 | 0) > (-1 | 0)) {
    break label$3
   }
   $2032(HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0);
  }
  global$0 = $5_1 + 32 | 0;
  return $4_1 | 0;
 }
 
 function $191($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  HEAP32[$0_1 >> 2] = (global$1 + 22372 | 0) + 8 | 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 76 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   label$2 : while (1) {
    label$3 : {
     $2_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
     if (!$2_1) {
      break label$3
     }
     FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($2_1);
    }
    $1_1 = HEAP32[$1_1 >> 2] | 0;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
  }
  label$4 : {
   if ((HEAP8[($0_1 + 103 | 0) >> 0] | 0 | 0) > (-1 | 0)) {
    break label$4
   }
   $2032(HEAP32[($0_1 + 92 | 0) >> 2] | 0 | 0);
  }
  label$5 : {
   $1_1 = HEAP32[($0_1 + 76 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$5
   }
   label$6 : while (1) {
    $2_1 = HEAP32[$1_1 >> 2] | 0;
    label$7 : {
     if ((HEAP8[($1_1 + 19 | 0) >> 0] | 0 | 0) > (-1 | 0)) {
      break label$7
     }
     $2032(HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0);
    }
    $2032($1_1 | 0);
    $1_1 = $2_1;
    if ($1_1) {
     continue label$6
    }
    break label$6;
   };
  }
  $1_1 = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
  HEAP32[($0_1 + 68 | 0) >> 2] = 0;
  label$8 : {
   if (!$1_1) {
    break label$8
   }
   $2032($1_1 | 0);
  }
  label$9 : {
   $1_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$9
   }
   HEAP32[($0_1 + 60 | 0) >> 2] = $1_1;
   $2032($1_1 | 0);
  }
  label$10 : {
   $1_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$10
   }
   HEAP32[($0_1 + 48 | 0) >> 2] = $1_1;
   $2032($1_1 | 0);
  }
  label$11 : {
   $1_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$11
   }
   HEAP32[($0_1 + 36 | 0) >> 2] = $1_1;
   $2032($1_1 | 0);
  }
  label$12 : {
   if ((HEAP8[($0_1 + 31 | 0) >> 0] | 0 | 0) > (-1 | 0)) {
    break label$12
   }
   $2032(HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0);
  }
  label$13 : {
   if ((HEAP8[($0_1 + 19 | 0) >> 0] | 0 | 0) > (-1 | 0)) {
    break label$13
   }
   $2032(HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0);
  }
  return $0_1 | 0;
 }
 
 function $192($0_1) {
  $0_1 = $0_1 | 0;
  $2032($191($0_1 | 0) | 0 | 0);
 }
 
 function $193($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $5_1 = 0, $3_1 = 0, $1_1 = 0, $4_1 = 0;
  $1_1 = global$0 - 16 | 0;
  $2_1 = $1_1;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    $3_1 = $190($0_1 | 0, $0_1 + 8 | 0 | 0, 35633 | 0) | 0;
    if ($3_1) {
     break label$2
    }
    HEAP8[($0_1 + 88 | 0) >> 0] = 1;
    $0_1 = 0;
    break label$1;
   }
   label$3 : {
    $4_1 = $190($0_1 | 0, $0_1 + 20 | 0 | 0, 35632 | 0) | 0;
    if ($4_1) {
     break label$3
    }
    fimport$42($3_1 | 0);
    HEAP8[($0_1 + 89 | 0) >> 0] = 1;
    $0_1 = 0;
    break label$1;
   }
   $5_1 = fimport$43() | 0;
   HEAP32[($0_1 + 4 | 0) >> 2] = $5_1;
   fimport$44($5_1 | 0, $3_1 | 0);
   fimport$44(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $4_1 | 0);
   fimport$45(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
   fimport$46(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, 35714 | 0, $2_1 + 12 | 0 | 0);
   label$4 : {
    if (HEAP32[($2_1 + 12 | 0) >> 2] | 0) {
     break label$4
    }
    fimport$46(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, 35716 | 0, $2_1 + 8 | 0 | 0);
    $5_1 = $1_1 - (((HEAP32[($2_1 + 8 | 0) >> 2] | 0) + 15 | 0) & -16 | 0) | 0;
    global$0 = $5_1;
    fimport$47(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0, $5_1 | 0);
    fimport$48(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
    HEAP32[($0_1 + 4 | 0) >> 2] = 0;
   }
   fimport$42($3_1 | 0);
   fimport$42($4_1 | 0);
   $0_1 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) != (0 | 0);
  }
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $194($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $4_1 = 0, $3_1 = 0, $6_1 = 0, $1_1 = 0, $5_1 = 0, $49_1 = 0, $98_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $1_1 = global$0 - 32 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    if ($193($0_1 | 0) | 0) {
     break label$2
    }
    $2_1 = global$1;
    $3_1 = global$24;
    $4_1 = $183($3_1 | 0, $2_1 + 2272 | 0 | 0, 51 | 0) | 0;
    $774($1_1 + 24 | 0 | 0, $4_1 + (HEAP32[((HEAP32[$4_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0);
    $5_1 = global$22;
    $6_1 = $1023($1_1 + 24 | 0 | 0, $5_1 | 0) | 0;
    $6_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($6_1, 10) | 0;
    $1018($1_1 + 24 | 0 | 0) | 0;
    $851($4_1 | 0, $6_1 | 0) | 0;
    $772($4_1 | 0) | 0;
    $49_1 = $183($3_1 | 0, $2_1 + 2324 | 0 | 0, 20 | 0) | 0;
    $4_1 = HEAPU8[($0_1 + 19 | 0) >> 0] | 0;
    $6_1 = (($4_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0);
    $4_1 = $183($49_1 | 0, (wasm2js_i32$0 = HEAP32[($0_1 + 8 | 0) >> 2] | 0, wasm2js_i32$1 = $0_1 + 8 | 0, wasm2js_i32$2 = $6_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) | 0, (wasm2js_i32$0 = HEAP32[($0_1 + 12 | 0) >> 2] | 0, wasm2js_i32$1 = $4_1, wasm2js_i32$2 = $6_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) | 0) | 0;
    $774($1_1 + 16 | 0 | 0, $4_1 + (HEAP32[((HEAP32[$4_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0);
    $6_1 = $1023($1_1 + 16 | 0 | 0, $5_1 | 0) | 0;
    $6_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($6_1, 10) | 0;
    $1018($1_1 + 16 | 0 | 0) | 0;
    $851($4_1 | 0, $6_1 | 0) | 0;
    $772($4_1 | 0) | 0;
    $98_1 = $183($3_1 | 0, $2_1 + 2345 | 0 | 0, 22 | 0) | 0;
    $2_1 = HEAPU8[($0_1 + 31 | 0) >> 0] | 0;
    $4_1 = (($2_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0);
    $0_1 = $183($98_1 | 0, (wasm2js_i32$0 = HEAP32[($0_1 + 20 | 0) >> 2] | 0, wasm2js_i32$1 = $0_1 + 20 | 0, wasm2js_i32$2 = $4_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) | 0, (wasm2js_i32$0 = HEAP32[($0_1 + 24 | 0) >> 2] | 0, wasm2js_i32$1 = $2_1, wasm2js_i32$2 = $4_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) | 0) | 0;
    $774($1_1 + 8 | 0 | 0, $0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0);
    $2_1 = $1023($1_1 + 8 | 0 | 0, $5_1 | 0) | 0;
    $2_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($2_1, 10) | 0;
    $1018($1_1 + 8 | 0 | 0) | 0;
    $851($0_1 | 0, $2_1 | 0) | 0;
    $772($0_1 | 0) | 0;
    break label$1;
   }
   $420(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
   label$3 : {
    $2_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
    $5_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
    if (($2_1 | 0) == ($5_1 | 0)) {
     break label$3
    }
    label$4 : while (1) {
     $4_1 = HEAP32[$2_1 >> 2] | 0;
     $3_1 = global$25;
     $4_1 = $4_1 << 2 | 0;
     $3_1 = fimport$49(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[$3_1 >> 2] | 0) + $4_1 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[((HEAP32[($0_1 + 56 | 0) >> 2] | 0) + $4_1 | 0) >> 2] = $3_1;
     $2_1 = $2_1 + 4 | 0;
     if (($2_1 | 0) != ($5_1 | 0)) {
      continue label$4
     }
     break label$4;
    };
   }
   label$5 : {
    $2_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
    $5_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
    if (($2_1 | 0) == ($5_1 | 0)) {
     break label$5
    }
    label$6 : while (1) {
     $4_1 = HEAP32[$2_1 >> 2] | 0;
     $3_1 = global$26;
     $3_1 = fimport$50(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[$3_1 >> 2] | 0) + ($4_1 << 2 | 0) | 0) >> 2] | 0 | 0) | 0;
     fimport$51(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $3_1 | 0, $4_1 | 0);
     $2_1 = $2_1 + 4 | 0;
     if (($2_1 | 0) != ($5_1 | 0)) {
      continue label$6
     }
     break label$6;
    };
   }
   $2_1 = HEAP32[($0_1 + 76 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   label$7 : while (1) {
    $3_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
    $4_1 = $3_1 + 4 | 0;
    $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    label$8 : {
     if ((HEAP8[($3_1 + 15 | 0) >> 0] | 0 | 0) > (-1 | 0)) {
      break label$8
     }
     $4_1 = HEAP32[$4_1 >> 2] | 0;
    }
    $4_1 = fimport$49($5_1 | 0, $4_1 | 0) | 0;
    HEAP32[((HEAP32[($2_1 + 20 | 0) >> 2] | 0) + 16 | 0) >> 2] = $4_1;
    $2_1 = HEAP32[$2_1 >> 2] | 0;
    if ($2_1) {
     continue label$7
    }
    break label$7;
   };
  }
  global$0 = $1_1 + 32 | 0;
 }
 
 function $195($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   $432($1_1 | 0);
   fimport$48(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  }
 }
 
 function $196() {
  var $0_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $1_1 = 0, $2_1 = 0;
  $0_1 = $2030(104 | 0) | 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[$0_1 >> 2] = (global$1 + 22372 | 0) + 8 | 0;
  i64toi32_i32$1 = $0_1 + 12 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 20 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 28 | 0) >> 2] = 0;
  $1_1 = $2030(88 | 0) | 0;
  HEAP32[($0_1 + 56 | 0) >> 2] = $1_1;
  $2_1 = $1_1 + 88 | 0;
  HEAP32[($0_1 + 64 | 0) >> 2] = $2_1;
  $2174($1_1 | 0, 255 | 0, 88 | 0) | 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 68 | 0) >> 2] = 0;
  HEAP32[($0_1 + 72 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 60 | 0) >> 2] = $2_1;
  i64toi32_i32$1 = $0_1 + 76 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 92 | 0) >> 2] = 0;
  HEAP32[($0_1 + 96 | 0) >> 2] = i64toi32_i32$0;
  HEAP16[($0_1 + 88 | 0) >> 1] = 0;
  HEAP32[($0_1 + 84 | 0) >> 2] = 1065353216;
  HEAP32[($0_1 + 100 | 0) >> 2] = 0;
  $1_1 = $2030(88 | 0) | 0;
  HEAP32[($0_1 + 36 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 32 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 40 | 0) >> 2] = $1_1 + 88 | 0;
  $1_1 = $2030(28 | 0) | 0;
  HEAP32[($0_1 + 48 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 44 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 52 | 0) >> 2] = $1_1 + 28 | 0;
  return $0_1 | 0;
 }
 
 function $197($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2072($0_1 + 8 | 0 | 0, $1_1 | 0) | 0;
 }
 
 function $198($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2072($0_1 + 20 | 0 | 0, $1_1 | 0) | 0;
 }
 
 function $199($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $186($0_1 | 0, $1_1 | 0);
 }
 
 function $200($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $187($0_1 | 0, $1_1 | 0);
 }
 
 function $201($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, $7_1 = 0, $6_1 = 0, $116_1 = 0, $147_1 = 0, $183_1 = 0, $188_1 = 0, $219_1 = 0, $224_1 = 0, $229_1 = 0, $234_1 = 0, $239_1 = 0, $244_1 = 0, $249_1 = 0, $254_1 = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  label$1 : {
   $5_1 = $2181($1_1 | 0) | 0;
   if ($5_1 >>> 0 >= -16 >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     label$4 : {
      if ($5_1 >>> 0 < 11 >>> 0) {
       break label$4
      }
      $6_1 = ($5_1 + 16 | 0) & -16 | 0;
      $7_1 = $2030($6_1 | 0) | 0;
      HEAP32[($4_1 + 16 | 0) >> 2] = $6_1 | -2147483648 | 0;
      HEAP32[($4_1 + 8 | 0) >> 2] = $7_1;
      HEAP32[($4_1 + 12 | 0) >> 2] = $5_1;
      break label$3;
     }
     HEAP8[($4_1 + 19 | 0) >> 0] = $5_1;
     $7_1 = $4_1 + 8 | 0;
     if (!$5_1) {
      break label$2
     }
    }
    $2173($7_1 | 0, $1_1 | 0, $5_1 | 0) | 0;
   }
   HEAP8[($7_1 + $5_1 | 0) >> 0] = 0;
   label$5 : {
    label$6 : {
     switch ($2_1 | 0) {
     case 0:
      $5_1 = $2030(24 | 0) | 0;
      $555($5_1 | 0, $4_1 + 8 | 0 | 0) | 0;
      HEAP32[$5_1 >> 2] = (global$1 + 22408 | 0) + 8 | 0;
      HEAP32[($5_1 + 20 | 0) >> 2] = HEAP32[$3_1 >> 2] | 0;
      $7_1 = $2051($4_1 + 24 | 0 | 0, $4_1 + 8 | 0 | 0) | 0;
      HEAP32[($4_1 + 36 | 0) >> 2] = $5_1;
      $202($4_1 + 40 | 0 | 0, $0_1 + 68 | 0 | 0, $7_1 | 0, $4_1 + 24 | 0 | 0);
      if ((HEAP8[($4_1 + 35 | 0) >> 0] | 0 | 0) > (-1 | 0)) {
       break label$5
      }
      $2032(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
      break label$5;
     case 1:
      $5_1 = $2030(24 | 0) | 0;
      $555($5_1 | 0, $4_1 + 8 | 0 | 0) | 0;
      HEAP32[$5_1 >> 2] = (global$1 + 22476 | 0) + 8 | 0;
      HEAP32[($5_1 + 20 | 0) >> 2] = HEAP32[$3_1 >> 2] | 0;
      $7_1 = $2051($4_1 + 24 | 0 | 0, $4_1 + 8 | 0 | 0) | 0;
      HEAP32[($4_1 + 36 | 0) >> 2] = $5_1;
      $203($4_1 + 40 | 0 | 0, $0_1 + 68 | 0 | 0, $7_1 | 0, $4_1 + 24 | 0 | 0);
      if ((HEAP8[($4_1 + 35 | 0) >> 0] | 0 | 0) > (-1 | 0)) {
       break label$5
      }
      $2032(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
      break label$5;
     case 2:
      $5_1 = $2030(28 | 0) | 0;
      $555($5_1 | 0, $4_1 + 8 | 0 | 0) | 0;
      HEAP32[$5_1 >> 2] = (global$1 + 22512 | 0) + 8 | 0;
      i64toi32_i32$2 = $3_1;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $116_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $5_1;
      HEAP32[($5_1 + 20 | 0) >> 2] = $116_1;
      HEAP32[($5_1 + 24 | 0) >> 2] = i64toi32_i32$1;
      $7_1 = $2051($4_1 + 24 | 0 | 0, $4_1 + 8 | 0 | 0) | 0;
      HEAP32[($4_1 + 36 | 0) >> 2] = $5_1;
      $204($4_1 + 40 | 0 | 0, $0_1 + 68 | 0 | 0, $7_1 | 0, $4_1 + 24 | 0 | 0);
      if ((HEAP8[($4_1 + 35 | 0) >> 0] | 0 | 0) > (-1 | 0)) {
       break label$5
      }
      $2032(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
      break label$5;
     case 3:
      $5_1 = $2030(32 | 0) | 0;
      $555($5_1 | 0, $4_1 + 8 | 0 | 0) | 0;
      HEAP32[$5_1 >> 2] = (global$1 + 22548 | 0) + 8 | 0;
      i64toi32_i32$2 = $3_1;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $147_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $5_1;
      HEAP32[($5_1 + 20 | 0) >> 2] = $147_1;
      HEAP32[($5_1 + 24 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[($5_1 + 28 | 0) >> 2] = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
      $7_1 = $2051($4_1 + 24 | 0 | 0, $4_1 + 8 | 0 | 0) | 0;
      HEAP32[($4_1 + 36 | 0) >> 2] = $5_1;
      $205($4_1 + 40 | 0 | 0, $0_1 + 68 | 0 | 0, $7_1 | 0, $4_1 + 24 | 0 | 0);
      if ((HEAP8[($4_1 + 35 | 0) >> 0] | 0 | 0) > (-1 | 0)) {
       break label$5
      }
      $2032(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
      break label$5;
     case 4:
      $5_1 = $2030(36 | 0) | 0;
      $555($5_1 | 0, $4_1 + 8 | 0 | 0) | 0;
      HEAP32[$5_1 >> 2] = (global$1 + 22584 | 0) + 8 | 0;
      i64toi32_i32$2 = $3_1;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $183_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $5_1;
      HEAP32[($5_1 + 20 | 0) >> 2] = $183_1;
      HEAP32[($5_1 + 24 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $188_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $5_1 + 28 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $188_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      $7_1 = $2051($4_1 + 24 | 0 | 0, $4_1 + 8 | 0 | 0) | 0;
      HEAP32[($4_1 + 36 | 0) >> 2] = $5_1;
      $206($4_1 + 40 | 0 | 0, $0_1 + 68 | 0 | 0, $7_1 | 0, $4_1 + 24 | 0 | 0);
      if ((HEAP8[($4_1 + 35 | 0) >> 0] | 0 | 0) > (-1 | 0)) {
       break label$5
      }
      $2032(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
      break label$5;
     case 5:
      break label$6;
     default:
      break label$5;
     };
    }
    $5_1 = $2030(84 | 0) | 0;
    $555($5_1 | 0, $4_1 + 8 | 0 | 0) | 0;
    HEAP32[$5_1 >> 2] = (global$1 + 22620 | 0) + 8 | 0;
    i64toi32_i32$2 = $3_1;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $219_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $5_1;
    HEAP32[($5_1 + 20 | 0) >> 2] = $219_1;
    HEAP32[($5_1 + 24 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $224_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $5_1 + 28 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $224_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $3_1 + 16 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $229_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $5_1 + 36 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $229_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $3_1 + 24 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $234_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $5_1 + 44 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $234_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $3_1 + 32 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $239_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $5_1 + 52 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $239_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $3_1 + 40 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $244_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $5_1 + 60 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $244_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $3_1 + 48 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $249_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $5_1 + 68 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $249_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $3_1 + 56 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $254_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $5_1 + 76 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $254_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $7_1 = $2051($4_1 + 24 | 0 | 0, $4_1 + 8 | 0 | 0) | 0;
    HEAP32[($4_1 + 36 | 0) >> 2] = $5_1;
    $207($4_1 + 40 | 0 | 0, $0_1 + 68 | 0 | 0, $7_1 | 0, $4_1 + 24 | 0 | 0);
    if ((HEAP8[($4_1 + 35 | 0) >> 0] | 0 | 0) > (-1 | 0)) {
     break label$5
    }
    $2032(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
   }
   label$12 : {
    if ((HEAP8[($4_1 + 19 | 0) >> 0] | 0 | 0) > (-1 | 0)) {
     break label$12
    }
    $2032(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
   }
   global$0 = $4_1 + 48 | 0;
   return;
  }
  $2049($4_1 + 8 | 0 | 0);
  abort();
 }
 
 function $202($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $5_1 = 0, $4_1 = 0, $8_1 = 0, $9_1 = 0, $12_1 = 0, $6_1 = 0, $10_1 = 0, $13_1 = 0, $7_1 = 0, $15_1 = Math_fround(0), $14_1 = 0, i64toi32_i32$1 = 0, $16_1 = Math_fround(0), $11_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $4_1 = HEAPU8[($2_1 + 11 | 0) >> 0] | 0;
  $5_1 = (($4_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0);
  $6_1 = (wasm2js_i32$0 = HEAP32[($2_1 + 4 | 0) >> 2] | 0, wasm2js_i32$1 = $4_1, wasm2js_i32$2 = $5_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  $4_1 = $6_1;
  $7_1 = (wasm2js_i32$0 = HEAP32[$2_1 >> 2] | 0, wasm2js_i32$1 = $2_1, wasm2js_i32$2 = $5_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  $2_1 = $7_1;
  $5_1 = $4_1;
  label$1 : {
   if ($5_1 >>> 0 < 4 >>> 0) {
    break label$1
   }
   $5_1 = $6_1;
   $2_1 = $7_1;
   $4_1 = $5_1;
   label$2 : while (1) {
    $8_1 = Math_imul(HEAPU8[$2_1 >> 0] | 0 | ((HEAPU8[($2_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($2_1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($2_1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0, 1540483477);
    $4_1 = Math_imul(($8_1 >>> 24 | 0) ^ $8_1 | 0, 1540483477) ^ Math_imul($4_1, 1540483477) | 0;
    $2_1 = $2_1 + 4 | 0;
    $5_1 = $5_1 + -4 | 0;
    if ($5_1 >>> 0 > 3 >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
  label$3 : {
   switch ($5_1 + -1 | 0 | 0) {
   case 2:
    $4_1 = ((HEAPU8[($2_1 + 2 | 0) >> 0] | 0) << 16 | 0) ^ $4_1 | 0;
   case 1:
    $4_1 = ((HEAPU8[($2_1 + 1 | 0) >> 0] | 0) << 8 | 0) ^ $4_1 | 0;
   case 0:
    $4_1 = Math_imul($4_1 ^ (HEAPU8[$2_1 >> 0] | 0) | 0, 1540483477);
    break;
   default:
    break label$3;
   };
  }
  $2_1 = Math_imul(($4_1 >>> 13 | 0) ^ $4_1 | 0, 1540483477);
  $9_1 = ($2_1 >>> 15 | 0) ^ $2_1 | 0;
  label$7 : {
   label$8 : {
    label$9 : {
     $4_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     if ($4_1) {
      break label$9
     }
     break label$8;
    }
    label$10 : {
     label$11 : {
      $5_1 = __wasm_popcnt_i32($4_1 | 0) | 0;
      if ($5_1 >>> 0 > 1 >>> 0) {
       break label$11
      }
      $10_1 = $9_1 & ($4_1 + -1 | 0) | 0;
      break label$10;
     }
     $10_1 = $9_1;
     if ($9_1 >>> 0 < $4_1 >>> 0) {
      break label$10
     }
     $10_1 = ($9_1 >>> 0) % ($4_1 >>> 0) | 0;
    }
    $2_1 = HEAP32[((HEAP32[$1_1 >> 2] | 0) + ($10_1 << 2 | 0) | 0) >> 2] | 0;
    if (!$2_1) {
     break label$8
    }
    $2_1 = HEAP32[$2_1 >> 2] | 0;
    if (!$2_1) {
     break label$8
    }
    label$12 : {
     if ($5_1 >>> 0 > 1 >>> 0) {
      break label$12
     }
     $11_1 = $4_1 + -1 | 0;
     label$13 : while (1) {
      label$14 : {
       $5_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
       if (($5_1 | 0) == ($9_1 | 0)) {
        break label$14
       }
       if (($5_1 & $11_1 | 0 | 0) != ($10_1 | 0)) {
        break label$8
       }
      }
      label$15 : {
       $8_1 = HEAPU8[($2_1 + 19 | 0) >> 0] | 0;
       $5_1 = (($8_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0);
       if (((wasm2js_i32$0 = HEAP32[($2_1 + 12 | 0) >> 2] | 0, wasm2js_i32$1 = $8_1, wasm2js_i32$2 = $5_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) | 0) != ($6_1 | 0)) {
        break label$15
       }
       $12_1 = $2_1 + 8 | 0;
       $13_1 = HEAP32[$12_1 >> 2] | 0;
       label$16 : {
        if ($5_1) {
         break label$16
        }
        $14_1 = 0;
        if (!$6_1) {
         break label$7
        }
        $5_1 = $7_1;
        if ((HEAPU8[$5_1 >> 0] | 0 | 0) != ($13_1 & 255 | 0 | 0)) {
         break label$15
        }
        label$17 : while (1) {
         $8_1 = $8_1 + -1 | 0;
         if (!$8_1) {
          break label$7
         }
         $13_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
         $5_1 = $5_1 + 1 | 0;
         $12_1 = $12_1 + 1 | 0;
         if (($13_1 | 0) == (HEAPU8[$12_1 >> 0] | 0 | 0)) {
          continue label$17
         }
         break label$15;
        };
       }
       $14_1 = 0;
       if (!$6_1) {
        break label$7
       }
       if (!($588(($5_1 ? $13_1 : $12_1) | 0, $7_1 | 0, $6_1 | 0) | 0)) {
        break label$7
       }
      }
      $2_1 = HEAP32[$2_1 >> 2] | 0;
      if ($2_1) {
       continue label$13
      }
      break label$8;
     };
    }
    label$18 : while (1) {
     label$19 : {
      $5_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
      if (($5_1 | 0) == ($9_1 | 0)) {
       break label$19
      }
      label$20 : {
       if ($5_1 >>> 0 < $4_1 >>> 0) {
        break label$20
       }
       $5_1 = ($5_1 >>> 0) % ($4_1 >>> 0) | 0;
      }
      if (($5_1 | 0) != ($10_1 | 0)) {
       break label$8
      }
     }
     label$21 : {
      $8_1 = HEAPU8[($2_1 + 19 | 0) >> 0] | 0;
      $5_1 = (($8_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0);
      if (((wasm2js_i32$0 = HEAP32[($2_1 + 12 | 0) >> 2] | 0, wasm2js_i32$1 = $8_1, wasm2js_i32$2 = $5_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) | 0) != ($6_1 | 0)) {
       break label$21
      }
      $12_1 = $2_1 + 8 | 0;
      $13_1 = HEAP32[$12_1 >> 2] | 0;
      label$22 : {
       if ($5_1) {
        break label$22
       }
       $14_1 = 0;
       if (!$6_1) {
        break label$7
       }
       $5_1 = $7_1;
       if ((HEAPU8[$5_1 >> 0] | 0 | 0) != ($13_1 & 255 | 0 | 0)) {
        break label$21
       }
       label$23 : while (1) {
        $8_1 = $8_1 + -1 | 0;
        if (!$8_1) {
         break label$7
        }
        $13_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
        $5_1 = $5_1 + 1 | 0;
        $12_1 = $12_1 + 1 | 0;
        if (($13_1 | 0) == (HEAPU8[$12_1 >> 0] | 0 | 0)) {
         continue label$23
        }
        break label$21;
       };
      }
      $14_1 = 0;
      if (!$6_1) {
       break label$7
      }
      if (!($588(($5_1 ? $13_1 : $12_1) | 0, $7_1 | 0, $6_1 | 0) | 0)) {
       break label$7
      }
     }
     $2_1 = HEAP32[$2_1 >> 2] | 0;
     if ($2_1) {
      continue label$18
     }
     break label$18;
    };
   }
   $2_1 = $2030(24 | 0) | 0;
   $5_1 = $3_1 + 8 | 0;
   HEAP32[($2_1 + 16 | 0) >> 2] = HEAP32[$5_1 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
   HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[$3_1 >> 2] | 0;
   HEAP32[($2_1 + 12 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[$5_1 >> 2] = 0;
   i64toi32_i32$1 = 0;
   HEAP32[$3_1 >> 2] = 0;
   HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$1;
   $5_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
   HEAP32[($2_1 + 4 | 0) >> 2] = $9_1;
   HEAP32[$2_1 >> 2] = 0;
   HEAP32[($2_1 + 20 | 0) >> 2] = $5_1;
   $15_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
   $16_1 = Math_fround(((HEAP32[($1_1 + 12 | 0) >> 2] | 0) + 1 | 0) >>> 0);
   label$24 : {
    label$25 : {
     if (!$4_1) {
      break label$25
     }
     if (Math_fround($15_1 * Math_fround($4_1 >>> 0)) < $16_1 ^ 1 | 0) {
      break label$24
     }
    }
    $4_1 = $4_1 << 1 | 0 | ($4_1 >>> 0 < 3 >>> 0 | ($4_1 & ($4_1 + -1 | 0) | 0 | 0) != (0 | 0) | 0) | 0;
    label$26 : {
     label$27 : {
      $15_1 = Math_fround(Math_ceil(Math_fround($16_1 / $15_1)));
      if (!($15_1 < Math_fround(4294967296.0) & $15_1 >= Math_fround(0.0) | 0)) {
       break label$27
      }
      $5_1 = ~~$15_1 >>> 0;
      break label$26;
     }
     $5_1 = 0;
    }
    $213($1_1 | 0, ($4_1 >>> 0 < $5_1 >>> 0 ? $5_1 : $4_1) | 0);
    label$28 : {
     $4_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     if ($4_1 & ($4_1 + -1 | 0) | 0) {
      break label$28
     }
     $10_1 = ($4_1 + -1 | 0) & $9_1 | 0;
     break label$24;
    }
    label$29 : {
     if ($9_1 >>> 0 >= $4_1 >>> 0) {
      break label$29
     }
     $10_1 = $9_1;
     break label$24;
    }
    $10_1 = ($9_1 >>> 0) % ($4_1 >>> 0) | 0;
   }
   label$30 : {
    label$31 : {
     label$32 : {
      $8_1 = (HEAP32[$1_1 >> 2] | 0) + ($10_1 << 2 | 0) | 0;
      $5_1 = HEAP32[$8_1 >> 2] | 0;
      if ($5_1) {
       break label$32
      }
      HEAP32[$2_1 >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
      HEAP32[($1_1 + 8 | 0) >> 2] = $2_1;
      HEAP32[$8_1 >> 2] = $1_1 + 8 | 0;
      $5_1 = HEAP32[$2_1 >> 2] | 0;
      if (!$5_1) {
       break label$30
      }
      $5_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
      label$33 : {
       label$34 : {
        $8_1 = $4_1 + -1 | 0;
        if ($4_1 & $8_1 | 0) {
         break label$34
        }
        $5_1 = $5_1 & $8_1 | 0;
        break label$33;
       }
       if ($5_1 >>> 0 < $4_1 >>> 0) {
        break label$33
       }
       $5_1 = ($5_1 >>> 0) % ($4_1 >>> 0) | 0;
      }
      $5_1 = (HEAP32[$1_1 >> 2] | 0) + ($5_1 << 2 | 0) | 0;
      break label$31;
     }
     HEAP32[$2_1 >> 2] = HEAP32[$5_1 >> 2] | 0;
    }
    HEAP32[$5_1 >> 2] = $2_1;
   }
   $14_1 = 1;
   HEAP32[($1_1 + 12 | 0) >> 2] = (HEAP32[($1_1 + 12 | 0) >> 2] | 0) + 1 | 0;
  }
  HEAP8[($0_1 + 4 | 0) >> 0] = $14_1;
  HEAP32[$0_1 >> 2] = $2_1;
 }
 
 function $203($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $5_1 = 0, $4_1 = 0, $8_1 = 0, $9_1 = 0, $12_1 = 0, $6_1 = 0, $10_1 = 0, $13_1 = 0, $7_1 = 0, $15_1 = Math_fround(0), $14_1 = 0, i64toi32_i32$1 = 0, $16_1 = Math_fround(0), $11_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $4_1 = HEAPU8[($2_1 + 11 | 0) >> 0] | 0;
  $5_1 = (($4_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0);
  $6_1 = (wasm2js_i32$0 = HEAP32[($2_1 + 4 | 0) >> 2] | 0, wasm2js_i32$1 = $4_1, wasm2js_i32$2 = $5_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  $4_1 = $6_1;
  $7_1 = (wasm2js_i32$0 = HEAP32[$2_1 >> 2] | 0, wasm2js_i32$1 = $2_1, wasm2js_i32$2 = $5_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  $2_1 = $7_1;
  $5_1 = $4_1;
  label$1 : {
   if ($5_1 >>> 0 < 4 >>> 0) {
    break label$1
   }
   $5_1 = $6_1;
   $2_1 = $7_1;
   $4_1 = $5_1;
   label$2 : while (1) {
    $8_1 = Math_imul(HEAPU8[$2_1 >> 0] | 0 | ((HEAPU8[($2_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($2_1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($2_1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0, 1540483477);
    $4_1 = Math_imul(($8_1 >>> 24 | 0) ^ $8_1 | 0, 1540483477) ^ Math_imul($4_1, 1540483477) | 0;
    $2_1 = $2_1 + 4 | 0;
    $5_1 = $5_1 + -4 | 0;
    if ($5_1 >>> 0 > 3 >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
  label$3 : {
   switch ($5_1 + -1 | 0 | 0) {
   case 2:
    $4_1 = ((HEAPU8[($2_1 + 2 | 0) >> 0] | 0) << 16 | 0) ^ $4_1 | 0;
   case 1:
    $4_1 = ((HEAPU8[($2_1 + 1 | 0) >> 0] | 0) << 8 | 0) ^ $4_1 | 0;
   case 0:
    $4_1 = Math_imul($4_1 ^ (HEAPU8[$2_1 >> 0] | 0) | 0, 1540483477);
    break;
   default:
    break label$3;
   };
  }
  $2_1 = Math_imul(($4_1 >>> 13 | 0) ^ $4_1 | 0, 1540483477);
  $9_1 = ($2_1 >>> 15 | 0) ^ $2_1 | 0;
  label$7 : {
   label$8 : {
    label$9 : {
     $4_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     if ($4_1) {
      break label$9
     }
     break label$8;
    }
    label$10 : {
     label$11 : {
      $5_1 = __wasm_popcnt_i32($4_1 | 0) | 0;
      if ($5_1 >>> 0 > 1 >>> 0) {
       break label$11
      }
      $10_1 = $9_1 & ($4_1 + -1 | 0) | 0;
      break label$10;
     }
     $10_1 = $9_1;
     if ($9_1 >>> 0 < $4_1 >>> 0) {
      break label$10
     }
     $10_1 = ($9_1 >>> 0) % ($4_1 >>> 0) | 0;
    }
    $2_1 = HEAP32[((HEAP32[$1_1 >> 2] | 0) + ($10_1 << 2 | 0) | 0) >> 2] | 0;
    if (!$2_1) {
     break label$8
    }
    $2_1 = HEAP32[$2_1 >> 2] | 0;
    if (!$2_1) {
     break label$8
    }
    label$12 : {
     if ($5_1 >>> 0 > 1 >>> 0) {
      break label$12
     }
     $11_1 = $4_1 + -1 | 0;
     label$13 : while (1) {
      label$14 : {
       $5_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
       if (($5_1 | 0) == ($9_1 | 0)) {
        break label$14
       }
       if (($5_1 & $11_1 | 0 | 0) != ($10_1 | 0)) {
        break label$8
       }
      }
      label$15 : {
       $8_1 = HEAPU8[($2_1 + 19 | 0) >> 0] | 0;
       $5_1 = (($8_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0);
       if (((wasm2js_i32$0 = HEAP32[($2_1 + 12 | 0) >> 2] | 0, wasm2js_i32$1 = $8_1, wasm2js_i32$2 = $5_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) | 0) != ($6_1 | 0)) {
        break label$15
       }
       $12_1 = $2_1 + 8 | 0;
       $13_1 = HEAP32[$12_1 >> 2] | 0;
       label$16 : {
        if ($5_1) {
         break label$16
        }
        $14_1 = 0;
        if (!$6_1) {
         break label$7
        }
        $5_1 = $7_1;
        if ((HEAPU8[$5_1 >> 0] | 0 | 0) != ($13_1 & 255 | 0 | 0)) {
         break label$15
        }
        label$17 : while (1) {
         $8_1 = $8_1 + -1 | 0;
         if (!$8_1) {
          break label$7
         }
         $13_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
         $5_1 = $5_1 + 1 | 0;
         $12_1 = $12_1 + 1 | 0;
         if (($13_1 | 0) == (HEAPU8[$12_1 >> 0] | 0 | 0)) {
          continue label$17
         }
         break label$15;
        };
       }
       $14_1 = 0;
       if (!$6_1) {
        break label$7
       }
       if (!($588(($5_1 ? $13_1 : $12_1) | 0, $7_1 | 0, $6_1 | 0) | 0)) {
        break label$7
       }
      }
      $2_1 = HEAP32[$2_1 >> 2] | 0;
      if ($2_1) {
       continue label$13
      }
      break label$8;
     };
    }
    label$18 : while (1) {
     label$19 : {
      $5_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
      if (($5_1 | 0) == ($9_1 | 0)) {
       break label$19
      }
      label$20 : {
       if ($5_1 >>> 0 < $4_1 >>> 0) {
        break label$20
       }
       $5_1 = ($5_1 >>> 0) % ($4_1 >>> 0) | 0;
      }
      if (($5_1 | 0) != ($10_1 | 0)) {
       break label$8
      }
     }
     label$21 : {
      $8_1 = HEAPU8[($2_1 + 19 | 0) >> 0] | 0;
      $5_1 = (($8_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0);
      if (((wasm2js_i32$0 = HEAP32[($2_1 + 12 | 0) >> 2] | 0, wasm2js_i32$1 = $8_1, wasm2js_i32$2 = $5_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) | 0) != ($6_1 | 0)) {
       break label$21
      }
      $12_1 = $2_1 + 8 | 0;
      $13_1 = HEAP32[$12_1 >> 2] | 0;
      label$22 : {
       if ($5_1) {
        break label$22
       }
       $14_1 = 0;
       if (!$6_1) {
        break label$7
       }
       $5_1 = $7_1;
       if ((HEAPU8[$5_1 >> 0] | 0 | 0) != ($13_1 & 255 | 0 | 0)) {
        break label$21
       }
       label$23 : while (1) {
        $8_1 = $8_1 + -1 | 0;
        if (!$8_1) {
         break label$7
        }
        $13_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
        $5_1 = $5_1 + 1 | 0;
        $12_1 = $12_1 + 1 | 0;
        if (($13_1 | 0) == (HEAPU8[$12_1 >> 0] | 0 | 0)) {
         continue label$23
        }
        break label$21;
       };
      }
      $14_1 = 0;
      if (!$6_1) {
       break label$7
      }
      if (!($588(($5_1 ? $13_1 : $12_1) | 0, $7_1 | 0, $6_1 | 0) | 0)) {
       break label$7
      }
     }
     $2_1 = HEAP32[$2_1 >> 2] | 0;
     if ($2_1) {
      continue label$18
     }
     break label$18;
    };
   }
   $2_1 = $2030(24 | 0) | 0;
   $5_1 = $3_1 + 8 | 0;
   HEAP32[($2_1 + 16 | 0) >> 2] = HEAP32[$5_1 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
   HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[$3_1 >> 2] | 0;
   HEAP32[($2_1 + 12 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[$5_1 >> 2] = 0;
   i64toi32_i32$1 = 0;
   HEAP32[$3_1 >> 2] = 0;
   HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$1;
   $5_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
   HEAP32[($2_1 + 4 | 0) >> 2] = $9_1;
   HEAP32[$2_1 >> 2] = 0;
   HEAP32[($2_1 + 20 | 0) >> 2] = $5_1;
   $15_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
   $16_1 = Math_fround(((HEAP32[($1_1 + 12 | 0) >> 2] | 0) + 1 | 0) >>> 0);
   label$24 : {
    label$25 : {
     if (!$4_1) {
      break label$25
     }
     if (Math_fround($15_1 * Math_fround($4_1 >>> 0)) < $16_1 ^ 1 | 0) {
      break label$24
     }
    }
    $4_1 = $4_1 << 1 | 0 | ($4_1 >>> 0 < 3 >>> 0 | ($4_1 & ($4_1 + -1 | 0) | 0 | 0) != (0 | 0) | 0) | 0;
    label$26 : {
     label$27 : {
      $15_1 = Math_fround(Math_ceil(Math_fround($16_1 / $15_1)));
      if (!($15_1 < Math_fround(4294967296.0) & $15_1 >= Math_fround(0.0) | 0)) {
       break label$27
      }
      $5_1 = ~~$15_1 >>> 0;
      break label$26;
     }
     $5_1 = 0;
    }
    $213($1_1 | 0, ($4_1 >>> 0 < $5_1 >>> 0 ? $5_1 : $4_1) | 0);
    label$28 : {
     $4_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     if ($4_1 & ($4_1 + -1 | 0) | 0) {
      break label$28
     }
     $10_1 = ($4_1 + -1 | 0) & $9_1 | 0;
     break label$24;
    }
    label$29 : {
     if ($9_1 >>> 0 >= $4_1 >>> 0) {
      break label$29
     }
     $10_1 = $9_1;
     break label$24;
    }
    $10_1 = ($9_1 >>> 0) % ($4_1 >>> 0) | 0;
   }
   label$30 : {
    label$31 : {
     label$32 : {
      $8_1 = (HEAP32[$1_1 >> 2] | 0) + ($10_1 << 2 | 0) | 0;
      $5_1 = HEAP32[$8_1 >> 2] | 0;
      if ($5_1) {
       break label$32
      }
      HEAP32[$2_1 >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
      HEAP32[($1_1 + 8 | 0) >> 2] = $2_1;
      HEAP32[$8_1 >> 2] = $1_1 + 8 | 0;
      $5_1 = HEAP32[$2_1 >> 2] | 0;
      if (!$5_1) {
       break label$30
      }
      $5_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
      label$33 : {
       label$34 : {
        $8_1 = $4_1 + -1 | 0;
        if ($4_1 & $8_1 | 0) {
         break label$34
        }
        $5_1 = $5_1 & $8_1 | 0;
        break label$33;
       }
       if ($5_1 >>> 0 < $4_1 >>> 0) {
        break label$33
       }
       $5_1 = ($5_1 >>> 0) % ($4_1 >>> 0) | 0;
      }
      $5_1 = (HEAP32[$1_1 >> 2] | 0) + ($5_1 << 2 | 0) | 0;
      break label$31;
     }
     HEAP32[$2_1 >> 2] = HEAP32[$5_1 >> 2] | 0;
    }
    HEAP32[$5_1 >> 2] = $2_1;
   }
   $14_1 = 1;
   HEAP32[($1_1 + 12 | 0) >> 2] = (HEAP32[($1_1 + 12 | 0) >> 2] | 0) + 1 | 0;
  }
  HEAP8[($0_1 + 4 | 0) >> 0] = $14_1;
  HEAP32[$0_1 >> 2] = $2_1;
 }
 
 function $204($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $5_1 = 0, $4_1 = 0, $8_1 = 0, $9_1 = 0, $12_1 = 0, $6_1 = 0, $10_1 = 0, $13_1 = 0, $7_1 = 0, $15_1 = Math_fround(0), $14_1 = 0, i64toi32_i32$1 = 0, $16_1 = Math_fround(0), $11_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $4_1 = HEAPU8[($2_1 + 11 | 0) >> 0] | 0;
  $5_1 = (($4_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0);
  $6_1 = (wasm2js_i32$0 = HEAP32[($2_1 + 4 | 0) >> 2] | 0, wasm2js_i32$1 = $4_1, wasm2js_i32$2 = $5_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  $4_1 = $6_1;
  $7_1 = (wasm2js_i32$0 = HEAP32[$2_1 >> 2] | 0, wasm2js_i32$1 = $2_1, wasm2js_i32$2 = $5_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  $2_1 = $7_1;
  $5_1 = $4_1;
  label$1 : {
   if ($5_1 >>> 0 < 4 >>> 0) {
    break label$1
   }
   $5_1 = $6_1;
   $2_1 = $7_1;
   $4_1 = $5_1;
   label$2 : while (1) {
    $8_1 = Math_imul(HEAPU8[$2_1 >> 0] | 0 | ((HEAPU8[($2_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($2_1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($2_1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0, 1540483477);
    $4_1 = Math_imul(($8_1 >>> 24 | 0) ^ $8_1 | 0, 1540483477) ^ Math_imul($4_1, 1540483477) | 0;
    $2_1 = $2_1 + 4 | 0;
    $5_1 = $5_1 + -4 | 0;
    if ($5_1 >>> 0 > 3 >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
  label$3 : {
   switch ($5_1 + -1 | 0 | 0) {
   case 2:
    $4_1 = ((HEAPU8[($2_1 + 2 | 0) >> 0] | 0) << 16 | 0) ^ $4_1 | 0;
   case 1:
    $4_1 = ((HEAPU8[($2_1 + 1 | 0) >> 0] | 0) << 8 | 0) ^ $4_1 | 0;
   case 0:
    $4_1 = Math_imul($4_1 ^ (HEAPU8[$2_1 >> 0] | 0) | 0, 1540483477);
    break;
   default:
    break label$3;
   };
  }
  $2_1 = Math_imul(($4_1 >>> 13 | 0) ^ $4_1 | 0, 1540483477);
  $9_1 = ($2_1 >>> 15 | 0) ^ $2_1 | 0;
  label$7 : {
   label$8 : {
    label$9 : {
     $4_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     if ($4_1) {
      break label$9
     }
     break label$8;
    }
    label$10 : {
     label$11 : {
      $5_1 = __wasm_popcnt_i32($4_1 | 0) | 0;
      if ($5_1 >>> 0 > 1 >>> 0) {
       break label$11
      }
      $10_1 = $9_1 & ($4_1 + -1 | 0) | 0;
      break label$10;
     }
     $10_1 = $9_1;
     if ($9_1 >>> 0 < $4_1 >>> 0) {
      break label$10
     }
     $10_1 = ($9_1 >>> 0) % ($4_1 >>> 0) | 0;
    }
    $2_1 = HEAP32[((HEAP32[$1_1 >> 2] | 0) + ($10_1 << 2 | 0) | 0) >> 2] | 0;
    if (!$2_1) {
     break label$8
    }
    $2_1 = HEAP32[$2_1 >> 2] | 0;
    if (!$2_1) {
     break label$8
    }
    label$12 : {
     if ($5_1 >>> 0 > 1 >>> 0) {
      break label$12
     }
     $11_1 = $4_1 + -1 | 0;
     label$13 : while (1) {
      label$14 : {
       $5_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
       if (($5_1 | 0) == ($9_1 | 0)) {
        break label$14
       }
       if (($5_1 & $11_1 | 0 | 0) != ($10_1 | 0)) {
        break label$8
       }
      }
      label$15 : {
       $8_1 = HEAPU8[($2_1 + 19 | 0) >> 0] | 0;
       $5_1 = (($8_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0);
       if (((wasm2js_i32$0 = HEAP32[($2_1 + 12 | 0) >> 2] | 0, wasm2js_i32$1 = $8_1, wasm2js_i32$2 = $5_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) | 0) != ($6_1 | 0)) {
        break label$15
       }
       $12_1 = $2_1 + 8 | 0;
       $13_1 = HEAP32[$12_1 >> 2] | 0;
       label$16 : {
        if ($5_1) {
         break label$16
        }
        $14_1 = 0;
        if (!$6_1) {
         break label$7
        }
        $5_1 = $7_1;
        if ((HEAPU8[$5_1 >> 0] | 0 | 0) != ($13_1 & 255 | 0 | 0)) {
         break label$15
        }
        label$17 : while (1) {
         $8_1 = $8_1 + -1 | 0;
         if (!$8_1) {
          break label$7
         }
         $13_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
         $5_1 = $5_1 + 1 | 0;
         $12_1 = $12_1 + 1 | 0;
         if (($13_1 | 0) == (HEAPU8[$12_1 >> 0] | 0 | 0)) {
          continue label$17
         }
         break label$15;
        };
       }
       $14_1 = 0;
       if (!$6_1) {
        break label$7
       }
       if (!($588(($5_1 ? $13_1 : $12_1) | 0, $7_1 | 0, $6_1 | 0) | 0)) {
        break label$7
       }
      }
      $2_1 = HEAP32[$2_1 >> 2] | 0;
      if ($2_1) {
       continue label$13
      }
      break label$8;
     };
    }
    label$18 : while (1) {
     label$19 : {
      $5_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
      if (($5_1 | 0) == ($9_1 | 0)) {
       break label$19
      }
      label$20 : {
       if ($5_1 >>> 0 < $4_1 >>> 0) {
        break label$20
       }
       $5_1 = ($5_1 >>> 0) % ($4_1 >>> 0) | 0;
      }
      if (($5_1 | 0) != ($10_1 | 0)) {
       break label$8
      }
     }
     label$21 : {
      $8_1 = HEAPU8[($2_1 + 19 | 0) >> 0] | 0;
      $5_1 = (($8_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0);
      if (((wasm2js_i32$0 = HEAP32[($2_1 + 12 | 0) >> 2] | 0, wasm2js_i32$1 = $8_1, wasm2js_i32$2 = $5_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) | 0) != ($6_1 | 0)) {
       break label$21
      }
      $12_1 = $2_1 + 8 | 0;
      $13_1 = HEAP32[$12_1 >> 2] | 0;
      label$22 : {
       if ($5_1) {
        break label$22
       }
       $14_1 = 0;
       if (!$6_1) {
        break label$7
       }
       $5_1 = $7_1;
       if ((HEAPU8[$5_1 >> 0] | 0 | 0) != ($13_1 & 255 | 0 | 0)) {
        break label$21
       }
       label$23 : while (1) {
        $8_1 = $8_1 + -1 | 0;
        if (!$8_1) {
         break label$7
        }
        $13_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
        $5_1 = $5_1 + 1 | 0;
        $12_1 = $12_1 + 1 | 0;
        if (($13_1 | 0) == (HEAPU8[$12_1 >> 0] | 0 | 0)) {
         continue label$23
        }
        break label$21;
       };
      }
      $14_1 = 0;
      if (!$6_1) {
       break label$7
      }
      if (!($588(($5_1 ? $13_1 : $12_1) | 0, $7_1 | 0, $6_1 | 0) | 0)) {
       break label$7
      }
     }
     $2_1 = HEAP32[$2_1 >> 2] | 0;
     if ($2_1) {
      continue label$18
     }
     break label$18;
    };
   }
   $2_1 = $2030(24 | 0) | 0;
   $5_1 = $3_1 + 8 | 0;
   HEAP32[($2_1 + 16 | 0) >> 2] = HEAP32[$5_1 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
   HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[$3_1 >> 2] | 0;
   HEAP32[($2_1 + 12 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[$5_1 >> 2] = 0;
   i64toi32_i32$1 = 0;
   HEAP32[$3_1 >> 2] = 0;
   HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$1;
   $5_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
   HEAP32[($2_1 + 4 | 0) >> 2] = $9_1;
   HEAP32[$2_1 >> 2] = 0;
   HEAP32[($2_1 + 20 | 0) >> 2] = $5_1;
   $15_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
   $16_1 = Math_fround(((HEAP32[($1_1 + 12 | 0) >> 2] | 0) + 1 | 0) >>> 0);
   label$24 : {
    label$25 : {
     if (!$4_1) {
      break label$25
     }
     if (Math_fround($15_1 * Math_fround($4_1 >>> 0)) < $16_1 ^ 1 | 0) {
      break label$24
     }
    }
    $4_1 = $4_1 << 1 | 0 | ($4_1 >>> 0 < 3 >>> 0 | ($4_1 & ($4_1 + -1 | 0) | 0 | 0) != (0 | 0) | 0) | 0;
    label$26 : {
     label$27 : {
      $15_1 = Math_fround(Math_ceil(Math_fround($16_1 / $15_1)));
      if (!($15_1 < Math_fround(4294967296.0) & $15_1 >= Math_fround(0.0) | 0)) {
       break label$27
      }
      $5_1 = ~~$15_1 >>> 0;
      break label$26;
     }
     $5_1 = 0;
    }
    $213($1_1 | 0, ($4_1 >>> 0 < $5_1 >>> 0 ? $5_1 : $4_1) | 0);
    label$28 : {
     $4_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     if ($4_1 & ($4_1 + -1 | 0) | 0) {
      break label$28
     }
     $10_1 = ($4_1 + -1 | 0) & $9_1 | 0;
     break label$24;
    }
    label$29 : {
     if ($9_1 >>> 0 >= $4_1 >>> 0) {
      break label$29
     }
     $10_1 = $9_1;
     break label$24;
    }
    $10_1 = ($9_1 >>> 0) % ($4_1 >>> 0) | 0;
   }
   label$30 : {
    label$31 : {
     label$32 : {
      $8_1 = (HEAP32[$1_1 >> 2] | 0) + ($10_1 << 2 | 0) | 0;
      $5_1 = HEAP32[$8_1 >> 2] | 0;
      if ($5_1) {
       break label$32
      }
      HEAP32[$2_1 >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
      HEAP32[($1_1 + 8 | 0) >> 2] = $2_1;
      HEAP32[$8_1 >> 2] = $1_1 + 8 | 0;
      $5_1 = HEAP32[$2_1 >> 2] | 0;
      if (!$5_1) {
       break label$30
      }
      $5_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
      label$33 : {
       label$34 : {
        $8_1 = $4_1 + -1 | 0;
        if ($4_1 & $8_1 | 0) {
         break label$34
        }
        $5_1 = $5_1 & $8_1 | 0;
        break label$33;
       }
       if ($5_1 >>> 0 < $4_1 >>> 0) {
        break label$33
       }
       $5_1 = ($5_1 >>> 0) % ($4_1 >>> 0) | 0;
      }
      $5_1 = (HEAP32[$1_1 >> 2] | 0) + ($5_1 << 2 | 0) | 0;
      break label$31;
     }
     HEAP32[$2_1 >> 2] = HEAP32[$5_1 >> 2] | 0;
    }
    HEAP32[$5_1 >> 2] = $2_1;
   }
   $14_1 = 1;
   HEAP32[($1_1 + 12 | 0) >> 2] = (HEAP32[($1_1 + 12 | 0) >> 2] | 0) + 1 | 0;
  }
  HEAP8[($0_1 + 4 | 0) >> 0] = $14_1;
  HEAP32[$0_1 >> 2] = $2_1;
 }
 
 function $205($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $5_1 = 0, $4_1 = 0, $8_1 = 0, $9_1 = 0, $12_1 = 0, $6_1 = 0, $10_1 = 0, $13_1 = 0, $7_1 = 0, $15_1 = Math_fround(0), $14_1 = 0, i64toi32_i32$1 = 0, $16_1 = Math_fround(0), $11_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $4_1 = HEAPU8[($2_1 + 11 | 0) >> 0] | 0;
  $5_1 = (($4_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0);
  $6_1 = (wasm2js_i32$0 = HEAP32[($2_1 + 4 | 0) >> 2] | 0, wasm2js_i32$1 = $4_1, wasm2js_i32$2 = $5_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  $4_1 = $6_1;
  $7_1 = (wasm2js_i32$0 = HEAP32[$2_1 >> 2] | 0, wasm2js_i32$1 = $2_1, wasm2js_i32$2 = $5_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  $2_1 = $7_1;
  $5_1 = $4_1;
  label$1 : {
   if ($5_1 >>> 0 < 4 >>> 0) {
    break label$1
   }
   $5_1 = $6_1;
   $2_1 = $7_1;
   $4_1 = $5_1;
   label$2 : while (1) {
    $8_1 = Math_imul(HEAPU8[$2_1 >> 0] | 0 | ((HEAPU8[($2_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($2_1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($2_1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0, 1540483477);
    $4_1 = Math_imul(($8_1 >>> 24 | 0) ^ $8_1 | 0, 1540483477) ^ Math_imul($4_1, 1540483477) | 0;
    $2_1 = $2_1 + 4 | 0;
    $5_1 = $5_1 + -4 | 0;
    if ($5_1 >>> 0 > 3 >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
  label$3 : {
   switch ($5_1 + -1 | 0 | 0) {
   case 2:
    $4_1 = ((HEAPU8[($2_1 + 2 | 0) >> 0] | 0) << 16 | 0) ^ $4_1 | 0;
   case 1:
    $4_1 = ((HEAPU8[($2_1 + 1 | 0) >> 0] | 0) << 8 | 0) ^ $4_1 | 0;
   case 0:
    $4_1 = Math_imul($4_1 ^ (HEAPU8[$2_1 >> 0] | 0) | 0, 1540483477);
    break;
   default:
    break label$3;
   };
  }
  $2_1 = Math_imul(($4_1 >>> 13 | 0) ^ $4_1 | 0, 1540483477);
  $9_1 = ($2_1 >>> 15 | 0) ^ $2_1 | 0;
  label$7 : {
   label$8 : {
    label$9 : {
     $4_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     if ($4_1) {
      break label$9
     }
     break label$8;
    }
    label$10 : {
     label$11 : {
      $5_1 = __wasm_popcnt_i32($4_1 | 0) | 0;
      if ($5_1 >>> 0 > 1 >>> 0) {
       break label$11
      }
      $10_1 = $9_1 & ($4_1 + -1 | 0) | 0;
      break label$10;
     }
     $10_1 = $9_1;
     if ($9_1 >>> 0 < $4_1 >>> 0) {
      break label$10
     }
     $10_1 = ($9_1 >>> 0) % ($4_1 >>> 0) | 0;
    }
    $2_1 = HEAP32[((HEAP32[$1_1 >> 2] | 0) + ($10_1 << 2 | 0) | 0) >> 2] | 0;
    if (!$2_1) {
     break label$8
    }
    $2_1 = HEAP32[$2_1 >> 2] | 0;
    if (!$2_1) {
     break label$8
    }
    label$12 : {
     if ($5_1 >>> 0 > 1 >>> 0) {
      break label$12
     }
     $11_1 = $4_1 + -1 | 0;
     label$13 : while (1) {
      label$14 : {
       $5_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
       if (($5_1 | 0) == ($9_1 | 0)) {
        break label$14
       }
       if (($5_1 & $11_1 | 0 | 0) != ($10_1 | 0)) {
        break label$8
       }
      }
      label$15 : {
       $8_1 = HEAPU8[($2_1 + 19 | 0) >> 0] | 0;
       $5_1 = (($8_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0);
       if (((wasm2js_i32$0 = HEAP32[($2_1 + 12 | 0) >> 2] | 0, wasm2js_i32$1 = $8_1, wasm2js_i32$2 = $5_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) | 0) != ($6_1 | 0)) {
        break label$15
       }
       $12_1 = $2_1 + 8 | 0;
       $13_1 = HEAP32[$12_1 >> 2] | 0;
       label$16 : {
        if ($5_1) {
         break label$16
        }
        $14_1 = 0;
        if (!$6_1) {
         break label$7
        }
        $5_1 = $7_1;
        if ((HEAPU8[$5_1 >> 0] | 0 | 0) != ($13_1 & 255 | 0 | 0)) {
         break label$15
        }
        label$17 : while (1) {
         $8_1 = $8_1 + -1 | 0;
         if (!$8_1) {
          break label$7
         }
         $13_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
         $5_1 = $5_1 + 1 | 0;
         $12_1 = $12_1 + 1 | 0;
         if (($13_1 | 0) == (HEAPU8[$12_1 >> 0] | 0 | 0)) {
          continue label$17
         }
         break label$15;
        };
       }
       $14_1 = 0;
       if (!$6_1) {
        break label$7
       }
       if (!($588(($5_1 ? $13_1 : $12_1) | 0, $7_1 | 0, $6_1 | 0) | 0)) {
        break label$7
       }
      }
      $2_1 = HEAP32[$2_1 >> 2] | 0;
      if ($2_1) {
       continue label$13
      }
      break label$8;
     };
    }
    label$18 : while (1) {
     label$19 : {
      $5_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
      if (($5_1 | 0) == ($9_1 | 0)) {
       break label$19
      }
      label$20 : {
       if ($5_1 >>> 0 < $4_1 >>> 0) {
        break label$20
       }
       $5_1 = ($5_1 >>> 0) % ($4_1 >>> 0) | 0;
      }
      if (($5_1 | 0) != ($10_1 | 0)) {
       break label$8
      }
     }
     label$21 : {
      $8_1 = HEAPU8[($2_1 + 19 | 0) >> 0] | 0;
      $5_1 = (($8_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0);
      if (((wasm2js_i32$0 = HEAP32[($2_1 + 12 | 0) >> 2] | 0, wasm2js_i32$1 = $8_1, wasm2js_i32$2 = $5_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) | 0) != ($6_1 | 0)) {
       break label$21
      }
      $12_1 = $2_1 + 8 | 0;
      $13_1 = HEAP32[$12_1 >> 2] | 0;
      label$22 : {
       if ($5_1) {
        break label$22
       }
       $14_1 = 0;
       if (!$6_1) {
        break label$7
       }
       $5_1 = $7_1;
       if ((HEAPU8[$5_1 >> 0] | 0 | 0) != ($13_1 & 255 | 0 | 0)) {
        break label$21
       }
       label$23 : while (1) {
        $8_1 = $8_1 + -1 | 0;
        if (!$8_1) {
         break label$7
        }
        $13_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
        $5_1 = $5_1 + 1 | 0;
        $12_1 = $12_1 + 1 | 0;
        if (($13_1 | 0) == (HEAPU8[$12_1 >> 0] | 0 | 0)) {
         continue label$23
        }
        break label$21;
       };
      }
      $14_1 = 0;
      if (!$6_1) {
       break label$7
      }
      if (!($588(($5_1 ? $13_1 : $12_1) | 0, $7_1 | 0, $6_1 | 0) | 0)) {
       break label$7
      }
     }
     $2_1 = HEAP32[$2_1 >> 2] | 0;
     if ($2_1) {
      continue label$18
     }
     break label$18;
    };
   }
   $2_1 = $2030(24 | 0) | 0;
   $5_1 = $3_1 + 8 | 0;
   HEAP32[($2_1 + 16 | 0) >> 2] = HEAP32[$5_1 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
   HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[$3_1 >> 2] | 0;
   HEAP32[($2_1 + 12 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[$5_1 >> 2] = 0;
   i64toi32_i32$1 = 0;
   HEAP32[$3_1 >> 2] = 0;
   HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$1;
   $5_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
   HEAP32[($2_1 + 4 | 0) >> 2] = $9_1;
   HEAP32[$2_1 >> 2] = 0;
   HEAP32[($2_1 + 20 | 0) >> 2] = $5_1;
   $15_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
   $16_1 = Math_fround(((HEAP32[($1_1 + 12 | 0) >> 2] | 0) + 1 | 0) >>> 0);
   label$24 : {
    label$25 : {
     if (!$4_1) {
      break label$25
     }
     if (Math_fround($15_1 * Math_fround($4_1 >>> 0)) < $16_1 ^ 1 | 0) {
      break label$24
     }
    }
    $4_1 = $4_1 << 1 | 0 | ($4_1 >>> 0 < 3 >>> 0 | ($4_1 & ($4_1 + -1 | 0) | 0 | 0) != (0 | 0) | 0) | 0;
    label$26 : {
     label$27 : {
      $15_1 = Math_fround(Math_ceil(Math_fround($16_1 / $15_1)));
      if (!($15_1 < Math_fround(4294967296.0) & $15_1 >= Math_fround(0.0) | 0)) {
       break label$27
      }
      $5_1 = ~~$15_1 >>> 0;
      break label$26;
     }
     $5_1 = 0;
    }
    $213($1_1 | 0, ($4_1 >>> 0 < $5_1 >>> 0 ? $5_1 : $4_1) | 0);
    label$28 : {
     $4_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     if ($4_1 & ($4_1 + -1 | 0) | 0) {
      break label$28
     }
     $10_1 = ($4_1 + -1 | 0) & $9_1 | 0;
     break label$24;
    }
    label$29 : {
     if ($9_1 >>> 0 >= $4_1 >>> 0) {
      break label$29
     }
     $10_1 = $9_1;
     break label$24;
    }
    $10_1 = ($9_1 >>> 0) % ($4_1 >>> 0) | 0;
   }
   label$30 : {
    label$31 : {
     label$32 : {
      $8_1 = (HEAP32[$1_1 >> 2] | 0) + ($10_1 << 2 | 0) | 0;
      $5_1 = HEAP32[$8_1 >> 2] | 0;
      if ($5_1) {
       break label$32
      }
      HEAP32[$2_1 >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
      HEAP32[($1_1 + 8 | 0) >> 2] = $2_1;
      HEAP32[$8_1 >> 2] = $1_1 + 8 | 0;
      $5_1 = HEAP32[$2_1 >> 2] | 0;
      if (!$5_1) {
       break label$30
      }
      $5_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
      label$33 : {
       label$34 : {
        $8_1 = $4_1 + -1 | 0;
        if ($4_1 & $8_1 | 0) {
         break label$34
        }
        $5_1 = $5_1 & $8_1 | 0;
        break label$33;
       }
       if ($5_1 >>> 0 < $4_1 >>> 0) {
        break label$33
       }
       $5_1 = ($5_1 >>> 0) % ($4_1 >>> 0) | 0;
      }
      $5_1 = (HEAP32[$1_1 >> 2] | 0) + ($5_1 << 2 | 0) | 0;
      break label$31;
     }
     HEAP32[$2_1 >> 2] = HEAP32[$5_1 >> 2] | 0;
    }
    HEAP32[$5_1 >> 2] = $2_1;
   }
   $14_1 = 1;
   HEAP32[($1_1 + 12 | 0) >> 2] = (HEAP32[($1_1 + 12 | 0) >> 2] | 0) + 1 | 0;
  }
  HEAP8[($0_1 + 4 | 0) >> 0] = $14_1;
  HEAP32[$0_1 >> 2] = $2_1;
 }
 
 function $206($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $5_1 = 0, $4_1 = 0, $8_1 = 0, $9_1 = 0, $12_1 = 0, $6_1 = 0, $10_1 = 0, $13_1 = 0, $7_1 = 0, $15_1 = Math_fround(0), $14_1 = 0, i64toi32_i32$1 = 0, $16_1 = Math_fround(0), $11_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $4_1 = HEAPU8[($2_1 + 11 | 0) >> 0] | 0;
  $5_1 = (($4_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0);
  $6_1 = (wasm2js_i32$0 = HEAP32[($2_1 + 4 | 0) >> 2] | 0, wasm2js_i32$1 = $4_1, wasm2js_i32$2 = $5_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  $4_1 = $6_1;
  $7_1 = (wasm2js_i32$0 = HEAP32[$2_1 >> 2] | 0, wasm2js_i32$1 = $2_1, wasm2js_i32$2 = $5_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  $2_1 = $7_1;
  $5_1 = $4_1;
  label$1 : {
   if ($5_1 >>> 0 < 4 >>> 0) {
    break label$1
   }
   $5_1 = $6_1;
   $2_1 = $7_1;
   $4_1 = $5_1;
   label$2 : while (1) {
    $8_1 = Math_imul(HEAPU8[$2_1 >> 0] | 0 | ((HEAPU8[($2_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($2_1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($2_1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0, 1540483477);
    $4_1 = Math_imul(($8_1 >>> 24 | 0) ^ $8_1 | 0, 1540483477) ^ Math_imul($4_1, 1540483477) | 0;
    $2_1 = $2_1 + 4 | 0;
    $5_1 = $5_1 + -4 | 0;
    if ($5_1 >>> 0 > 3 >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
  label$3 : {
   switch ($5_1 + -1 | 0 | 0) {
   case 2:
    $4_1 = ((HEAPU8[($2_1 + 2 | 0) >> 0] | 0) << 16 | 0) ^ $4_1 | 0;
   case 1:
    $4_1 = ((HEAPU8[($2_1 + 1 | 0) >> 0] | 0) << 8 | 0) ^ $4_1 | 0;
   case 0:
    $4_1 = Math_imul($4_1 ^ (HEAPU8[$2_1 >> 0] | 0) | 0, 1540483477);
    break;
   default:
    break label$3;
   };
  }
  $2_1 = Math_imul(($4_1 >>> 13 | 0) ^ $4_1 | 0, 1540483477);
  $9_1 = ($2_1 >>> 15 | 0) ^ $2_1 | 0;
  label$7 : {
   label$8 : {
    label$9 : {
     $4_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     if ($4_1) {
      break label$9
     }
     break label$8;
    }
    label$10 : {
     label$11 : {
      $5_1 = __wasm_popcnt_i32($4_1 | 0) | 0;
      if ($5_1 >>> 0 > 1 >>> 0) {
       break label$11
      }
      $10_1 = $9_1 & ($4_1 + -1 | 0) | 0;
      break label$10;
     }
     $10_1 = $9_1;
     if ($9_1 >>> 0 < $4_1 >>> 0) {
      break label$10
     }
     $10_1 = ($9_1 >>> 0) % ($4_1 >>> 0) | 0;
    }
    $2_1 = HEAP32[((HEAP32[$1_1 >> 2] | 0) + ($10_1 << 2 | 0) | 0) >> 2] | 0;
    if (!$2_1) {
     break label$8
    }
    $2_1 = HEAP32[$2_1 >> 2] | 0;
    if (!$2_1) {
     break label$8
    }
    label$12 : {
     if ($5_1 >>> 0 > 1 >>> 0) {
      break label$12
     }
     $11_1 = $4_1 + -1 | 0;
     label$13 : while (1) {
      label$14 : {
       $5_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
       if (($5_1 | 0) == ($9_1 | 0)) {
        break label$14
       }
       if (($5_1 & $11_1 | 0 | 0) != ($10_1 | 0)) {
        break label$8
       }
      }
      label$15 : {
       $8_1 = HEAPU8[($2_1 + 19 | 0) >> 0] | 0;
       $5_1 = (($8_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0);
       if (((wasm2js_i32$0 = HEAP32[($2_1 + 12 | 0) >> 2] | 0, wasm2js_i32$1 = $8_1, wasm2js_i32$2 = $5_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) | 0) != ($6_1 | 0)) {
        break label$15
       }
       $12_1 = $2_1 + 8 | 0;
       $13_1 = HEAP32[$12_1 >> 2] | 0;
       label$16 : {
        if ($5_1) {
         break label$16
        }
        $14_1 = 0;
        if (!$6_1) {
         break label$7
        }
        $5_1 = $7_1;
        if ((HEAPU8[$5_1 >> 0] | 0 | 0) != ($13_1 & 255 | 0 | 0)) {
         break label$15
        }
        label$17 : while (1) {
         $8_1 = $8_1 + -1 | 0;
         if (!$8_1) {
          break label$7
         }
         $13_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
         $5_1 = $5_1 + 1 | 0;
         $12_1 = $12_1 + 1 | 0;
         if (($13_1 | 0) == (HEAPU8[$12_1 >> 0] | 0 | 0)) {
          continue label$17
         }
         break label$15;
        };
       }
       $14_1 = 0;
       if (!$6_1) {
        break label$7
       }
       if (!($588(($5_1 ? $13_1 : $12_1) | 0, $7_1 | 0, $6_1 | 0) | 0)) {
        break label$7
       }
      }
      $2_1 = HEAP32[$2_1 >> 2] | 0;
      if ($2_1) {
       continue label$13
      }
      break label$8;
     };
    }
    label$18 : while (1) {
     label$19 : {
      $5_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
      if (($5_1 | 0) == ($9_1 | 0)) {
       break label$19
      }
      label$20 : {
       if ($5_1 >>> 0 < $4_1 >>> 0) {
        break label$20
       }
       $5_1 = ($5_1 >>> 0) % ($4_1 >>> 0) | 0;
      }
      if (($5_1 | 0) != ($10_1 | 0)) {
       break label$8
      }
     }
     label$21 : {
      $8_1 = HEAPU8[($2_1 + 19 | 0) >> 0] | 0;
      $5_1 = (($8_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0);
      if (((wasm2js_i32$0 = HEAP32[($2_1 + 12 | 0) >> 2] | 0, wasm2js_i32$1 = $8_1, wasm2js_i32$2 = $5_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) | 0) != ($6_1 | 0)) {
       break label$21
      }
      $12_1 = $2_1 + 8 | 0;
      $13_1 = HEAP32[$12_1 >> 2] | 0;
      label$22 : {
       if ($5_1) {
        break label$22
       }
       $14_1 = 0;
       if (!$6_1) {
        break label$7
       }
       $5_1 = $7_1;
       if ((HEAPU8[$5_1 >> 0] | 0 | 0) != ($13_1 & 255 | 0 | 0)) {
        break label$21
       }
       label$23 : while (1) {
        $8_1 = $8_1 + -1 | 0;
        if (!$8_1) {
         break label$7
        }
        $13_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
        $5_1 = $5_1 + 1 | 0;
        $12_1 = $12_1 + 1 | 0;
        if (($13_1 | 0) == (HEAPU8[$12_1 >> 0] | 0 | 0)) {
         continue label$23
        }
        break label$21;
       };
      }
      $14_1 = 0;
      if (!$6_1) {
       break label$7
      }
      if (!($588(($5_1 ? $13_1 : $12_1) | 0, $7_1 | 0, $6_1 | 0) | 0)) {
       break label$7
      }
     }
     $2_1 = HEAP32[$2_1 >> 2] | 0;
     if ($2_1) {
      continue label$18
     }
     break label$18;
    };
   }
   $2_1 = $2030(24 | 0) | 0;
   $5_1 = $3_1 + 8 | 0;
   HEAP32[($2_1 + 16 | 0) >> 2] = HEAP32[$5_1 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
   HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[$3_1 >> 2] | 0;
   HEAP32[($2_1 + 12 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[$5_1 >> 2] = 0;
   i64toi32_i32$1 = 0;
   HEAP32[$3_1 >> 2] = 0;
   HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$1;
   $5_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
   HEAP32[($2_1 + 4 | 0) >> 2] = $9_1;
   HEAP32[$2_1 >> 2] = 0;
   HEAP32[($2_1 + 20 | 0) >> 2] = $5_1;
   $15_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
   $16_1 = Math_fround(((HEAP32[($1_1 + 12 | 0) >> 2] | 0) + 1 | 0) >>> 0);
   label$24 : {
    label$25 : {
     if (!$4_1) {
      break label$25
     }
     if (Math_fround($15_1 * Math_fround($4_1 >>> 0)) < $16_1 ^ 1 | 0) {
      break label$24
     }
    }
    $4_1 = $4_1 << 1 | 0 | ($4_1 >>> 0 < 3 >>> 0 | ($4_1 & ($4_1 + -1 | 0) | 0 | 0) != (0 | 0) | 0) | 0;
    label$26 : {
     label$27 : {
      $15_1 = Math_fround(Math_ceil(Math_fround($16_1 / $15_1)));
      if (!($15_1 < Math_fround(4294967296.0) & $15_1 >= Math_fround(0.0) | 0)) {
       break label$27
      }
      $5_1 = ~~$15_1 >>> 0;
      break label$26;
     }
     $5_1 = 0;
    }
    $213($1_1 | 0, ($4_1 >>> 0 < $5_1 >>> 0 ? $5_1 : $4_1) | 0);
    label$28 : {
     $4_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     if ($4_1 & ($4_1 + -1 | 0) | 0) {
      break label$28
     }
     $10_1 = ($4_1 + -1 | 0) & $9_1 | 0;
     break label$24;
    }
    label$29 : {
     if ($9_1 >>> 0 >= $4_1 >>> 0) {
      break label$29
     }
     $10_1 = $9_1;
     break label$24;
    }
    $10_1 = ($9_1 >>> 0) % ($4_1 >>> 0) | 0;
   }
   label$30 : {
    label$31 : {
     label$32 : {
      $8_1 = (HEAP32[$1_1 >> 2] | 0) + ($10_1 << 2 | 0) | 0;
      $5_1 = HEAP32[$8_1 >> 2] | 0;
      if ($5_1) {
       break label$32
      }
      HEAP32[$2_1 >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
      HEAP32[($1_1 + 8 | 0) >> 2] = $2_1;
      HEAP32[$8_1 >> 2] = $1_1 + 8 | 0;
      $5_1 = HEAP32[$2_1 >> 2] | 0;
      if (!$5_1) {
       break label$30
      }
      $5_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
      label$33 : {
       label$34 : {
        $8_1 = $4_1 + -1 | 0;
        if ($4_1 & $8_1 | 0) {
         break label$34
        }
        $5_1 = $5_1 & $8_1 | 0;
        break label$33;
       }
       if ($5_1 >>> 0 < $4_1 >>> 0) {
        break label$33
       }
       $5_1 = ($5_1 >>> 0) % ($4_1 >>> 0) | 0;
      }
      $5_1 = (HEAP32[$1_1 >> 2] | 0) + ($5_1 << 2 | 0) | 0;
      break label$31;
     }
     HEAP32[$2_1 >> 2] = HEAP32[$5_1 >> 2] | 0;
    }
    HEAP32[$5_1 >> 2] = $2_1;
   }
   $14_1 = 1;
   HEAP32[($1_1 + 12 | 0) >> 2] = (HEAP32[($1_1 + 12 | 0) >> 2] | 0) + 1 | 0;
  }
  HEAP8[($0_1 + 4 | 0) >> 0] = $14_1;
  HEAP32[$0_1 >> 2] = $2_1;
 }
 
 function $207($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $5_1 = 0, $4_1 = 0, $8_1 = 0, $9_1 = 0, $12_1 = 0, $6_1 = 0, $10_1 = 0, $13_1 = 0, $7_1 = 0, $15_1 = Math_fround(0), $14_1 = 0, i64toi32_i32$1 = 0, $16_1 = Math_fround(0), $11_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $4_1 = HEAPU8[($2_1 + 11 | 0) >> 0] | 0;
  $5_1 = (($4_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0);
  $6_1 = (wasm2js_i32$0 = HEAP32[($2_1 + 4 | 0) >> 2] | 0, wasm2js_i32$1 = $4_1, wasm2js_i32$2 = $5_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  $4_1 = $6_1;
  $7_1 = (wasm2js_i32$0 = HEAP32[$2_1 >> 2] | 0, wasm2js_i32$1 = $2_1, wasm2js_i32$2 = $5_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  $2_1 = $7_1;
  $5_1 = $4_1;
  label$1 : {
   if ($5_1 >>> 0 < 4 >>> 0) {
    break label$1
   }
   $5_1 = $6_1;
   $2_1 = $7_1;
   $4_1 = $5_1;
   label$2 : while (1) {
    $8_1 = Math_imul(HEAPU8[$2_1 >> 0] | 0 | ((HEAPU8[($2_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($2_1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($2_1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0, 1540483477);
    $4_1 = Math_imul(($8_1 >>> 24 | 0) ^ $8_1 | 0, 1540483477) ^ Math_imul($4_1, 1540483477) | 0;
    $2_1 = $2_1 + 4 | 0;
    $5_1 = $5_1 + -4 | 0;
    if ($5_1 >>> 0 > 3 >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
  label$3 : {
   switch ($5_1 + -1 | 0 | 0) {
   case 2:
    $4_1 = ((HEAPU8[($2_1 + 2 | 0) >> 0] | 0) << 16 | 0) ^ $4_1 | 0;
   case 1:
    $4_1 = ((HEAPU8[($2_1 + 1 | 0) >> 0] | 0) << 8 | 0) ^ $4_1 | 0;
   case 0:
    $4_1 = Math_imul($4_1 ^ (HEAPU8[$2_1 >> 0] | 0) | 0, 1540483477);
    break;
   default:
    break label$3;
   };
  }
  $2_1 = Math_imul(($4_1 >>> 13 | 0) ^ $4_1 | 0, 1540483477);
  $9_1 = ($2_1 >>> 15 | 0) ^ $2_1 | 0;
  label$7 : {
   label$8 : {
    label$9 : {
     $4_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     if ($4_1) {
      break label$9
     }
     break label$8;
    }
    label$10 : {
     label$11 : {
      $5_1 = __wasm_popcnt_i32($4_1 | 0) | 0;
      if ($5_1 >>> 0 > 1 >>> 0) {
       break label$11
      }
      $10_1 = $9_1 & ($4_1 + -1 | 0) | 0;
      break label$10;
     }
     $10_1 = $9_1;
     if ($9_1 >>> 0 < $4_1 >>> 0) {
      break label$10
     }
     $10_1 = ($9_1 >>> 0) % ($4_1 >>> 0) | 0;
    }
    $2_1 = HEAP32[((HEAP32[$1_1 >> 2] | 0) + ($10_1 << 2 | 0) | 0) >> 2] | 0;
    if (!$2_1) {
     break label$8
    }
    $2_1 = HEAP32[$2_1 >> 2] | 0;
    if (!$2_1) {
     break label$8
    }
    label$12 : {
     if ($5_1 >>> 0 > 1 >>> 0) {
      break label$12
     }
     $11_1 = $4_1 + -1 | 0;
     label$13 : while (1) {
      label$14 : {
       $5_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
       if (($5_1 | 0) == ($9_1 | 0)) {
        break label$14
       }
       if (($5_1 & $11_1 | 0 | 0) != ($10_1 | 0)) {
        break label$8
       }
      }
      label$15 : {
       $8_1 = HEAPU8[($2_1 + 19 | 0) >> 0] | 0;
       $5_1 = (($8_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0);
       if (((wasm2js_i32$0 = HEAP32[($2_1 + 12 | 0) >> 2] | 0, wasm2js_i32$1 = $8_1, wasm2js_i32$2 = $5_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) | 0) != ($6_1 | 0)) {
        break label$15
       }
       $12_1 = $2_1 + 8 | 0;
       $13_1 = HEAP32[$12_1 >> 2] | 0;
       label$16 : {
        if ($5_1) {
         break label$16
        }
        $14_1 = 0;
        if (!$6_1) {
         break label$7
        }
        $5_1 = $7_1;
        if ((HEAPU8[$5_1 >> 0] | 0 | 0) != ($13_1 & 255 | 0 | 0)) {
         break label$15
        }
        label$17 : while (1) {
         $8_1 = $8_1 + -1 | 0;
         if (!$8_1) {
          break label$7
         }
         $13_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
         $5_1 = $5_1 + 1 | 0;
         $12_1 = $12_1 + 1 | 0;
         if (($13_1 | 0) == (HEAPU8[$12_1 >> 0] | 0 | 0)) {
          continue label$17
         }
         break label$15;
        };
       }
       $14_1 = 0;
       if (!$6_1) {
        break label$7
       }
       if (!($588(($5_1 ? $13_1 : $12_1) | 0, $7_1 | 0, $6_1 | 0) | 0)) {
        break label$7
       }
      }
      $2_1 = HEAP32[$2_1 >> 2] | 0;
      if ($2_1) {
       continue label$13
      }
      break label$8;
     };
    }
    label$18 : while (1) {
     label$19 : {
      $5_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
      if (($5_1 | 0) == ($9_1 | 0)) {
       break label$19
      }
      label$20 : {
       if ($5_1 >>> 0 < $4_1 >>> 0) {
        break label$20
       }
       $5_1 = ($5_1 >>> 0) % ($4_1 >>> 0) | 0;
      }
      if (($5_1 | 0) != ($10_1 | 0)) {
       break label$8
      }
     }
     label$21 : {
      $8_1 = HEAPU8[($2_1 + 19 | 0) >> 0] | 0;
      $5_1 = (($8_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0);
      if (((wasm2js_i32$0 = HEAP32[($2_1 + 12 | 0) >> 2] | 0, wasm2js_i32$1 = $8_1, wasm2js_i32$2 = $5_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) | 0) != ($6_1 | 0)) {
       break label$21
      }
      $12_1 = $2_1 + 8 | 0;
      $13_1 = HEAP32[$12_1 >> 2] | 0;
      label$22 : {
       if ($5_1) {
        break label$22
       }
       $14_1 = 0;
       if (!$6_1) {
        break label$7
       }
       $5_1 = $7_1;
       if ((HEAPU8[$5_1 >> 0] | 0 | 0) != ($13_1 & 255 | 0 | 0)) {
        break label$21
       }
       label$23 : while (1) {
        $8_1 = $8_1 + -1 | 0;
        if (!$8_1) {
         break label$7
        }
        $13_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
        $5_1 = $5_1 + 1 | 0;
        $12_1 = $12_1 + 1 | 0;
        if (($13_1 | 0) == (HEAPU8[$12_1 >> 0] | 0 | 0)) {
         continue label$23
        }
        break label$21;
       };
      }
      $14_1 = 0;
      if (!$6_1) {
       break label$7
      }
      if (!($588(($5_1 ? $13_1 : $12_1) | 0, $7_1 | 0, $6_1 | 0) | 0)) {
       break label$7
      }
     }
     $2_1 = HEAP32[$2_1 >> 2] | 0;
     if ($2_1) {
      continue label$18
     }
     break label$18;
    };
   }
   $2_1 = $2030(24 | 0) | 0;
   $5_1 = $3_1 + 8 | 0;
   HEAP32[($2_1 + 16 | 0) >> 2] = HEAP32[$5_1 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
   HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[$3_1 >> 2] | 0;
   HEAP32[($2_1 + 12 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[$5_1 >> 2] = 0;
   i64toi32_i32$1 = 0;
   HEAP32[$3_1 >> 2] = 0;
   HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$1;
   $5_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
   HEAP32[($2_1 + 4 | 0) >> 2] = $9_1;
   HEAP32[$2_1 >> 2] = 0;
   HEAP32[($2_1 + 20 | 0) >> 2] = $5_1;
   $15_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
   $16_1 = Math_fround(((HEAP32[($1_1 + 12 | 0) >> 2] | 0) + 1 | 0) >>> 0);
   label$24 : {
    label$25 : {
     if (!$4_1) {
      break label$25
     }
     if (Math_fround($15_1 * Math_fround($4_1 >>> 0)) < $16_1 ^ 1 | 0) {
      break label$24
     }
    }
    $4_1 = $4_1 << 1 | 0 | ($4_1 >>> 0 < 3 >>> 0 | ($4_1 & ($4_1 + -1 | 0) | 0 | 0) != (0 | 0) | 0) | 0;
    label$26 : {
     label$27 : {
      $15_1 = Math_fround(Math_ceil(Math_fround($16_1 / $15_1)));
      if (!($15_1 < Math_fround(4294967296.0) & $15_1 >= Math_fround(0.0) | 0)) {
       break label$27
      }
      $5_1 = ~~$15_1 >>> 0;
      break label$26;
     }
     $5_1 = 0;
    }
    $213($1_1 | 0, ($4_1 >>> 0 < $5_1 >>> 0 ? $5_1 : $4_1) | 0);
    label$28 : {
     $4_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     if ($4_1 & ($4_1 + -1 | 0) | 0) {
      break label$28
     }
     $10_1 = ($4_1 + -1 | 0) & $9_1 | 0;
     break label$24;
    }
    label$29 : {
     if ($9_1 >>> 0 >= $4_1 >>> 0) {
      break label$29
     }
     $10_1 = $9_1;
     break label$24;
    }
    $10_1 = ($9_1 >>> 0) % ($4_1 >>> 0) | 0;
   }
   label$30 : {
    label$31 : {
     label$32 : {
      $8_1 = (HEAP32[$1_1 >> 2] | 0) + ($10_1 << 2 | 0) | 0;
      $5_1 = HEAP32[$8_1 >> 2] | 0;
      if ($5_1) {
       break label$32
      }
      HEAP32[$2_1 >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
      HEAP32[($1_1 + 8 | 0) >> 2] = $2_1;
      HEAP32[$8_1 >> 2] = $1_1 + 8 | 0;
      $5_1 = HEAP32[$2_1 >> 2] | 0;
      if (!$5_1) {
       break label$30
      }
      $5_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
      label$33 : {
       label$34 : {
        $8_1 = $4_1 + -1 | 0;
        if ($4_1 & $8_1 | 0) {
         break label$34
        }
        $5_1 = $5_1 & $8_1 | 0;
        break label$33;
       }
       if ($5_1 >>> 0 < $4_1 >>> 0) {
        break label$33
       }
       $5_1 = ($5_1 >>> 0) % ($4_1 >>> 0) | 0;
      }
      $5_1 = (HEAP32[$1_1 >> 2] | 0) + ($5_1 << 2 | 0) | 0;
      break label$31;
     }
     HEAP32[$2_1 >> 2] = HEAP32[$5_1 >> 2] | 0;
    }
    HEAP32[$5_1 >> 2] = $2_1;
   }
   $14_1 = 1;
   HEAP32[($1_1 + 12 | 0) >> 2] = (HEAP32[($1_1 + 12 | 0) >> 2] | 0) + 1 | 0;
  }
  HEAP8[($0_1 + 4 | 0) >> 0] = $14_1;
  HEAP32[$0_1 >> 2] = $2_1;
 }
 
 function $208($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $209($0_1) {
  $0_1 = $0_1 | 0;
  return HEAPU8[($0_1 + 88 | 0) >> 0] | 0 | 0;
 }
 
 function $210($0_1) {
  $0_1 = $0_1 | 0;
  return HEAPU8[($0_1 + 89 | 0) >> 0] | 0 | 0;
 }
 
 function $211($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = $0_1 + 92 | 0;
  label$1 : {
   if ((HEAP8[($0_1 + 103 | 0) >> 0] | 0 | 0) > (-1 | 0)) {
    break label$1
   }
   $1_1 = HEAP32[$1_1 >> 2] | 0;
  }
  return $1_1 | 0;
 }
 
 function $212($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!($392() | 0)) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1);
   return;
  }
  $549($0_1 | 0, 0 | 0);
 }
 
 function $213($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $5_1 = Math_fround(0), $3_1 = 0;
  $2_1 = 2;
  label$1 : {
   if (($1_1 | 0) == (1 | 0)) {
    break label$1
   }
   label$2 : {
    if ($1_1 & ($1_1 + -1 | 0) | 0) {
     break label$2
    }
    $2_1 = $1_1;
    break label$1;
   }
   $2_1 = $700($1_1 | 0) | 0;
  }
  label$3 : {
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if ($2_1 >>> 0 <= $1_1 >>> 0) {
    break label$3
   }
   $214($0_1 | 0, $2_1 | 0);
   return;
  }
  label$4 : {
   if ($2_1 >>> 0 >= $1_1 >>> 0) {
    break label$4
   }
   $3_1 = $1_1 >>> 0 < 3 >>> 0;
   label$5 : {
    label$6 : {
     $5_1 = Math_fround(Math_ceil(Math_fround(Math_fround((HEAP32[($0_1 + 12 | 0) >> 2] | 0) >>> 0) / Math_fround(HEAPF32[($0_1 + 16 | 0) >> 2]))));
     if (!($5_1 < Math_fround(4294967296.0) & $5_1 >= Math_fround(0.0) | 0)) {
      break label$6
     }
     $4_1 = ~~$5_1 >>> 0;
     break label$5;
    }
    $4_1 = 0;
   }
   label$7 : {
    label$8 : {
     if ($3_1) {
      break label$8
     }
     if ((__wasm_popcnt_i32($1_1 | 0) | 0) >>> 0 > 1 >>> 0) {
      break label$8
     }
     $4_1 = $4_1 >>> 0 < 2 >>> 0 ? $4_1 : 1 << (32 - Math_clz32($4_1 + -1 | 0) | 0) | 0;
     break label$7;
    }
    $4_1 = $700($4_1 | 0) | 0;
   }
   $2_1 = $2_1 >>> 0 < $4_1 >>> 0 ? $4_1 : $2_1;
   if ($2_1 >>> 0 >= $1_1 >>> 0) {
    break label$4
   }
   $214($0_1 | 0, $2_1 | 0);
  }
 }
 
 function $214($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $6_1 = 0, $2_1 = 0, $10_1 = 0, $14_1 = 0, $4_1 = 0, $5_1 = 0, $15_1 = 0, $12_1 = 0, $16_1 = 0, $9_1 = 0, $11_1 = 0, $13_1 = 0, $7_1 = 0, $8_1 = 0, $192_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  label$1 : {
   label$2 : {
    if (!$1_1) {
     break label$2
    }
    label$3 : {
     if ($1_1 >>> 0 >= 1073741824 >>> 0) {
      break label$3
     }
     $2_1 = $2030($1_1 << 2 | 0 | 0) | 0;
     $3_1 = HEAP32[$0_1 >> 2] | 0;
     HEAP32[$0_1 >> 2] = $2_1;
     label$4 : {
      if (!$3_1) {
       break label$4
      }
      $2032($3_1 | 0);
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
     $2_1 = $1_1 >>> 0 > 1 >>> 0 ? $1_1 : 1;
     $3_1 = 0;
     label$5 : while (1) {
      HEAP32[((HEAP32[$0_1 >> 2] | 0) + ($3_1 << 2 | 0) | 0) >> 2] = 0;
      $3_1 = $3_1 + 1 | 0;
      if (($3_1 | 0) != ($2_1 | 0)) {
       continue label$5
      }
      break label$5;
     };
     $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     if (!$4_1) {
      break label$1
     }
     $3_1 = $0_1 + 8 | 0;
     $5_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
     label$6 : {
      label$7 : {
       $6_1 = __wasm_popcnt_i32($1_1 | 0) | 0;
       if ($6_1 >>> 0 > 1 >>> 0) {
        break label$7
       }
       $5_1 = $5_1 & ($1_1 + -1 | 0) | 0;
       break label$6;
      }
      if ($5_1 >>> 0 < $1_1 >>> 0) {
       break label$6
      }
      $5_1 = ($5_1 >>> 0) % ($1_1 >>> 0) | 0;
     }
     HEAP32[((HEAP32[$0_1 >> 2] | 0) + ($5_1 << 2 | 0) | 0) >> 2] = $3_1;
     $2_1 = HEAP32[$4_1 >> 2] | 0;
     if (!$2_1) {
      break label$1
     }
     $7_1 = $1_1 + -1 | 0;
     $8_1 = $6_1 >>> 0 > 1 >>> 0;
     label$8 : while (1) {
      $3_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
      label$9 : {
       label$10 : {
        if ($8_1) {
         break label$10
        }
        $3_1 = $3_1 & $7_1 | 0;
        break label$9;
       }
       if ($3_1 >>> 0 < $1_1 >>> 0) {
        break label$9
       }
       $3_1 = ($3_1 >>> 0) % ($1_1 >>> 0) | 0;
      }
      label$11 : {
       label$12 : {
        if (($3_1 | 0) != ($5_1 | 0)) {
         break label$12
        }
        $4_1 = $2_1;
        break label$11;
       }
       label$13 : {
        label$14 : {
         label$15 : {
          $9_1 = $3_1 << 2 | 0;
          $6_1 = (HEAP32[$0_1 >> 2] | 0) + $9_1 | 0;
          if (!(HEAP32[$6_1 >> 2] | 0)) {
           break label$15
          }
          $10_1 = $2_1;
          $3_1 = HEAP32[$2_1 >> 2] | 0;
          if (!$3_1) {
           break label$13
          }
          $11_1 = HEAPU8[($2_1 + 19 | 0) >> 0] | 0;
          $6_1 = ($11_1 << 24 | 0) >> 24 | 0;
          $12_1 = (wasm2js_i32$0 = HEAP32[($2_1 + 12 | 0) >> 2] | 0, wasm2js_i32$1 = $11_1, wasm2js_i32$2 = ($6_1 | 0) < (0 | 0), wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
          $13_1 = $2_1 + 8 | 0;
          label$16 : {
           if (($6_1 | 0) > (-1 | 0)) {
            break label$16
           }
           $10_1 = $2_1;
           $6_1 = HEAPU8[($3_1 + 19 | 0) >> 0] | 0;
           $14_1 = (($6_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0);
           if (($12_1 | 0) != ((wasm2js_i32$0 = HEAP32[($3_1 + 12 | 0) >> 2] | 0, wasm2js_i32$1 = $6_1, wasm2js_i32$2 = $14_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) | 0)) {
            break label$13
           }
           $15_1 = $3_1 + 8 | 0;
           $10_1 = $2_1;
           label$17 : while (1) {
            $6_1 = $3_1;
            label$18 : {
             if (!$12_1) {
              break label$18
             }
             if ($588(HEAP32[$13_1 >> 2] | 0 | 0, (wasm2js_i32$0 = HEAP32[$15_1 >> 2] | 0, wasm2js_i32$1 = $15_1, wasm2js_i32$2 = $14_1 & 1 | 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) | 0, $12_1 | 0) | 0) {
              break label$13
             }
            }
            label$19 : {
             $3_1 = HEAP32[$6_1 >> 2] | 0;
             if (!$3_1) {
              break label$19
             }
             $15_1 = $3_1 + 8 | 0;
             $10_1 = $6_1;
             $6_1 = HEAPU8[($3_1 + 19 | 0) >> 0] | 0;
             $14_1 = (($6_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0);
             if (($12_1 | 0) != ((wasm2js_i32$0 = HEAP32[($3_1 + 12 | 0) >> 2] | 0, wasm2js_i32$1 = $6_1, wasm2js_i32$2 = $14_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) | 0)) {
              break label$13
             }
             continue label$17;
            }
            break label$17;
           };
           $10_1 = $6_1;
           break label$13;
          }
          if (!$12_1) {
           break label$14
          }
          $16_1 = $2_1;
          label$20 : while (1) {
           label$21 : {
            $10_1 = $3_1;
            $3_1 = HEAPU8[($3_1 + 19 | 0) >> 0] | 0;
            $192_1 = $3_1;
            $3_1 = (($3_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0);
            if (($12_1 | 0) == ((wasm2js_i32$0 = HEAP32[($10_1 + 12 | 0) >> 2] | 0, wasm2js_i32$1 = $192_1, wasm2js_i32$2 = $3_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) | 0)) {
             break label$21
            }
            $10_1 = $16_1;
            break label$13;
           }
           $6_1 = $11_1;
           $15_1 = $13_1;
           label$22 : {
            $14_1 = $10_1 + 8 | 0;
            $3_1 = (wasm2js_i32$0 = HEAP32[$14_1 >> 2] | 0, wasm2js_i32$1 = $14_1, wasm2js_i32$2 = $3_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
            if ((HEAPU8[$3_1 >> 0] | 0 | 0) == (HEAPU8[$15_1 >> 0] | 0 | 0)) {
             break label$22
            }
            $10_1 = $16_1;
            break label$13;
           }
           label$23 : {
            label$24 : while (1) {
             $6_1 = $6_1 + -1 | 0;
             if (!$6_1) {
              break label$23
             }
             $14_1 = HEAPU8[($3_1 + 1 | 0) >> 0] | 0;
             $3_1 = $3_1 + 1 | 0;
             $15_1 = $15_1 + 1 | 0;
             if (($14_1 | 0) == (HEAPU8[$15_1 >> 0] | 0 | 0)) {
              continue label$24
             }
             break label$24;
            };
            $10_1 = $16_1;
            break label$13;
           }
           $16_1 = $10_1;
           $3_1 = HEAP32[$10_1 >> 2] | 0;
           if ($3_1) {
            continue label$20
           }
           break label$13;
          };
         }
         HEAP32[$6_1 >> 2] = $4_1;
         $4_1 = $2_1;
         $5_1 = $3_1;
         break label$11;
        }
        $10_1 = $2_1;
        $6_1 = HEAPU8[($3_1 + 19 | 0) >> 0] | 0;
        if (wasm2js_i32$0 = HEAP32[($3_1 + 12 | 0) >> 2] | 0, wasm2js_i32$1 = $6_1, wasm2js_i32$2 = (($6_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0), wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) {
         break label$13
        }
        label$25 : while (1) {
         $10_1 = $3_1;
         $3_1 = HEAP32[$3_1 >> 2] | 0;
         if (!$3_1) {
          break label$13
         }
         $6_1 = HEAPU8[($3_1 + 19 | 0) >> 0] | 0;
         if (!(wasm2js_i32$0 = HEAP32[($3_1 + 12 | 0) >> 2] | 0, wasm2js_i32$1 = $6_1, wasm2js_i32$2 = (($6_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0), wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1)) {
          continue label$25
         }
         break label$25;
        };
       }
       HEAP32[$4_1 >> 2] = HEAP32[$10_1 >> 2] | 0;
       HEAP32[$10_1 >> 2] = HEAP32[(HEAP32[((HEAP32[$0_1 >> 2] | 0) + $9_1 | 0) >> 2] | 0) >> 2] | 0;
       HEAP32[(HEAP32[((HEAP32[$0_1 >> 2] | 0) + $9_1 | 0) >> 2] | 0) >> 2] = $2_1;
      }
      $2_1 = HEAP32[$4_1 >> 2] | 0;
      if ($2_1) {
       continue label$8
      }
      break label$1;
     };
    }
    $3(global$1 + 2391 | 0 | 0);
    abort();
   }
   $3_1 = HEAP32[$0_1 >> 2] | 0;
   HEAP32[$0_1 >> 2] = 0;
   label$26 : {
    if (!$3_1) {
     break label$26
    }
    $2032($3_1 | 0);
   }
   HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  }
 }
 
 function $215($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = (global$1 + 22452 | 0) + 8 | 0;
  label$1 : {
   if ((HEAP8[($0_1 + 15 | 0) >> 0] | 0 | 0) > (-1 | 0)) {
    break label$1
   }
   $2032(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  }
  $2032($0_1 | 0);
 }
 
 function $216($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
 }
 
 function $217($0_1) {
  $0_1 = $0_1 | 0;
  $556($0_1 | 0, Math_fround(Math_fround(HEAPF32[($0_1 + 20 | 0) >> 2])));
 }
 
 function $218($0_1) {
  $0_1 = $0_1 | 0;
  abort();
 }
 
 function $219($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = (global$1 + 22452 | 0) + 8 | 0;
  label$1 : {
   if ((HEAP8[($0_1 + 15 | 0) >> 0] | 0 | 0) > (-1 | 0)) {
    break label$1
   }
   $2032(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  }
  $2032($0_1 | 0);
 }
 
 function $220($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
 }
 
 function $221($0_1) {
  $0_1 = $0_1 | 0;
  $557($0_1 | 0, HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0);
 }
 
 function $222($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = (global$1 + 22452 | 0) + 8 | 0;
  label$1 : {
   if ((HEAP8[($0_1 + 15 | 0) >> 0] | 0 | 0) > (-1 | 0)) {
    break label$1
   }
   $2032(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  }
  return $0_1 | 0;
 }
 
 function $223($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = (global$1 + 22452 | 0) + 8 | 0;
  label$1 : {
   if ((HEAP8[($0_1 + 15 | 0) >> 0] | 0 | 0) > (-1 | 0)) {
    break label$1
   }
   $2032(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  }
  $2032($0_1 | 0);
 }
 
 function $224($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $4_1 = 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $4_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] = $4_1;
  HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] = i64toi32_i32$1;
 }
 
 function $225($0_1) {
  $0_1 = $0_1 | 0;
  $558($0_1 | 0, $0_1 + 20 | 0 | 0);
 }
 
 function $226($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = (global$1 + 22452 | 0) + 8 | 0;
  label$1 : {
   if ((HEAP8[($0_1 + 15 | 0) >> 0] | 0 | 0) > (-1 | 0)) {
    break label$1
   }
   $2032(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  }
  $2032($0_1 | 0);
 }
 
 function $227($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $4_1 = 0;
  i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  $4_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] = $4_1;
  HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
 }
 
 function $228($0_1) {
  $0_1 = $0_1 | 0;
  $559($0_1 | 0, $0_1 + 20 | 0 | 0);
 }
 
 function $229($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = (global$1 + 22452 | 0) + 8 | 0;
  label$1 : {
   if ((HEAP8[($0_1 + 15 | 0) >> 0] | 0 | 0) > (-1 | 0)) {
    break label$1
   }
   $2032(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  }
  $2032($0_1 | 0);
 }
 
 function $230($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $4_1 = 0, $9_1 = 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $4_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] = $4_1;
  HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $9_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + 28 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $9_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function $231($0_1) {
  $0_1 = $0_1 | 0;
  $560($0_1 | 0, $0_1 + 20 | 0 | 0);
 }
 
 function $232($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = (global$1 + 22452 | 0) + 8 | 0;
  label$1 : {
   if ((HEAP8[($0_1 + 15 | 0) >> 0] | 0 | 0) > (-1 | 0)) {
    break label$1
   }
   $2032(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  }
  $2032($0_1 | 0);
 }
 
 function $233($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $9_1 = 0, $14_1 = 0, $19_1 = 0, $24_1 = 0, $29_1 = 0, $34_1 = 0, $39_1 = 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $4_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] = $4_1;
  HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$2 + 56 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $9_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + 76 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $9_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $1_1 + 48 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $14_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1 + 68 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $14_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1 + 40 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $19_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + 60 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $19_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $1_1 + 32 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $24_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1 + 52 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $24_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1 + 24 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $29_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + 44 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $29_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $1_1 + 16 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $34_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1 + 36 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $34_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $39_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + 28 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $39_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function $234($0_1) {
  $0_1 = $0_1 | 0;
  $561($0_1 | 0, $0_1 + 20 | 0 | 0);
 }
 
 function $235() {
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $0_1 = 0;
  $0_1 = global$1 + 66368 | 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  i64toi32_i32$1 = i64toi32_i32$1 + 12 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 32 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 44 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 40 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 52 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 60 | 0) >> 2] = 1065353216;
 }
 
 function $236($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[(global$1 + 66496 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   HEAP32[((global$1 + 66496 | 0) + 4 | 0) >> 2] = $1_1;
   $2032($1_1 | 0);
  }
 }
 
 function $237($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[(global$1 + 66508 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   HEAP32[((global$1 + 66508 | 0) + 4 | 0) >> 2] = $1_1;
   $2032($1_1 | 0);
  }
 }
 
 function $238($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[(global$1 + 66520 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   HEAP32[((global$1 + 66520 | 0) + 4 | 0) >> 2] = $1_1;
   $2032($1_1 | 0);
  }
 }
 
 function $239() {
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $1_1 = 0, $0_1 = 0, i64toi32_i32$2 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $74_1 = 0, $79_1 = 0, $82_1 = 0, $111_1 = 0, $116_1 = 0, $119_1 = 0;
  $0_1 = global$1;
  $1_1 = $0_1 + 66432 | 0;
  i64toi32_i32$1 = $1_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  $2_1 = $0_1 + 66496 | 0;
  HEAP32[($2_1 + 8 | 0) >> 2] = 0;
  i64toi32_i32$1 = $2_1;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1_1 + 12 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($1_1 + 20 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $1_1 + 32 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1_1 + 44 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($1_1 + 40 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $1_1 + 52 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($1_1 + 60 | 0) >> 2] = 1065353216;
  $1_1 = $2030(88 | 0) | 0;
  HEAP32[$2_1 >> 2] = $1_1;
  $3_1 = $1_1 + 88 | 0;
  HEAP32[($2_1 + 8 | 0) >> 2] = $3_1;
  $2173($1_1 | 0, $0_1 + 22656 | 0 | 0, 88 | 0) | 0;
  HEAP32[($2_1 + 4 | 0) >> 2] = $3_1;
  $4_1 = global$15;
  $5_1 = $0_1 + 1024 | 0;
  fimport$3($4_1 + 110 | 0 | 0, 0 | 0, $5_1 | 0) | 0;
  $2_1 = $0_1 + 66508 | 0;
  HEAP32[($2_1 + 8 | 0) >> 2] = 0;
  i64toi32_i32$1 = $2_1;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $1_1 = $2030(28 | 0) | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $1_1;
  $6_1 = $1_1 + 28 | 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $6_1;
  $3_1 = $0_1 + 22744 | 0;
  HEAP32[($1_1 + 24 | 0) >> 2] = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
  i64toi32_i32$2 = $3_1 + 16 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $74_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $1_1 + 16 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $74_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $3_1 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $79_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $1_1 + 8 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $79_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $82_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $1_1;
  HEAP32[i64toi32_i32$0 >> 2] = $82_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[($2_1 + 4 | 0) >> 2] = $6_1;
  fimport$3($4_1 + 111 | 0 | 0, 0 | 0, $5_1 | 0) | 0;
  $2_1 = $0_1 + 66520 | 0;
  HEAP32[($2_1 + 8 | 0) >> 2] = 0;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$1 = 0;
  HEAP32[i64toi32_i32$0 >> 2] = 0;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $1_1 = $2030(28 | 0) | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $1_1;
  $3_1 = $1_1 + 28 | 0;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $3_1;
  $0_1 = $0_1 + 3232 | 0;
  HEAP32[($1_1 + 24 | 0) >> 2] = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
  i64toi32_i32$2 = $0_1 + 16 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $111_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $1_1 + 16 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $111_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $0_1 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $116_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $1_1 + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $116_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = HEAP32[$0_1 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $119_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $1_1;
  HEAP32[i64toi32_i32$1 >> 2] = $119_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($2_1 + 4 | 0) >> 2] = $3_1;
  fimport$3($4_1 + 112 | 0 | 0, 0 | 0, $5_1 | 0) | 0;
 }
 
 function $240() {
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $0_1 = 0;
  $0_1 = global$1 + 66532 | 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  i64toi32_i32$1 = i64toi32_i32$1 + 12 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 32 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 44 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 40 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 52 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 60 | 0) >> 2] = 1065353216;
 }
 
 function $241($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $2_1 = 0, $3_1 = 0, $7_1 = 0, $5_1 = 0, $6_1 = 0;
  label$1 : {
   $2_1 = HEAP32[($1_1 + 56 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   label$2 : {
    $3_1 = HEAP32[($2_1 + 208 | 0) >> 2] | 0;
    $4_1 = HEAP32[($2_1 + 212 | 0) >> 2] | 0;
    if (($3_1 | 0) == ($4_1 | 0)) {
     break label$2
    }
    label$3 : {
     $4_1 = $4_1 + -4 | 0;
     $5_1 = HEAP32[$4_1 >> 2] | 0;
     if (($5_1 | 0) == ($1_1 | 0)) {
      break label$3
     }
     if ($4_1 >>> 0 < $3_1 >>> 0) {
      break label$2
     }
     label$4 : while (1) {
      $4_1 = $4_1 + -4 | 0;
      if ($4_1 >>> 0 < $3_1 >>> 0) {
       break label$2
      }
      if ((HEAP32[$4_1 >> 2] | 0 | 0) != ($1_1 | 0)) {
       continue label$4
      }
      break label$4;
     };
     HEAP32[$4_1 >> 2] = $5_1;
     HEAP32[($2_1 + 212 | 0) >> 2] = (HEAP32[($2_1 + 212 | 0) >> 2] | 0) + -4 | 0;
     break label$2;
    }
    HEAP32[($2_1 + 212 | 0) >> 2] = $4_1;
   }
   FUNCTION_TABLE[HEAP32[(HEAP32[$1_1 >> 2] | 0) >> 2] | 0 | 0]($1_1, 0);
  }
  label$5 : {
   label$6 : {
    label$7 : {
     label$8 : {
      $4_1 = HEAP32[($0_1 + 212 | 0) >> 2] | 0;
      $2_1 = HEAP32[($0_1 + 216 | 0) >> 2] | 0;
      if (($4_1 | 0) == ($2_1 | 0)) {
       break label$8
      }
      HEAP32[$4_1 >> 2] = $1_1;
      HEAP32[($0_1 + 212 | 0) >> 2] = $4_1 + 4 | 0;
      break label$7;
     }
     $6_1 = $0_1 + 208 | 0;
     $3_1 = HEAP32[$6_1 >> 2] | 0;
     $5_1 = $4_1 - $3_1 | 0;
     $7_1 = $5_1 >> 2 | 0;
     $4_1 = $7_1 + 1 | 0;
     if ($4_1 >>> 0 >= 1073741824 >>> 0) {
      break label$6
     }
     label$9 : {
      label$10 : {
       $2_1 = $2_1 - $3_1 | 0;
       $6_1 = $2_1 >> 1 | 0;
       $2_1 = ($2_1 >> 2 | 0) >>> 0 < 536870911 >>> 0 ? ($6_1 >>> 0 < $4_1 >>> 0 ? $4_1 : $6_1) : 1073741823;
       if ($2_1) {
        break label$10
       }
       $4_1 = 0;
       break label$9;
      }
      if ($2_1 >>> 0 >= 1073741824 >>> 0) {
       break label$5
      }
      $4_1 = $2030($2_1 << 2 | 0 | 0) | 0;
     }
     $7_1 = $4_1 + ($7_1 << 2 | 0) | 0;
     HEAP32[$7_1 >> 2] = $1_1;
     $2_1 = $4_1 + ($2_1 << 2 | 0) | 0;
     $7_1 = $7_1 + 4 | 0;
     label$11 : {
      if (($5_1 | 0) < (1 | 0)) {
       break label$11
      }
      $2173($4_1 | 0, $3_1 | 0, $5_1 | 0) | 0;
     }
     HEAP32[($0_1 + 216 | 0) >> 2] = $2_1;
     HEAP32[($0_1 + 212 | 0) >> 2] = $7_1;
     HEAP32[($0_1 + 208 | 0) >> 2] = $4_1;
     if (!$3_1) {
      break label$7
     }
     $2032($3_1 | 0);
    }
    FUNCTION_TABLE[HEAP32[(HEAP32[$1_1 >> 2] | 0) >> 2] | 0 | 0]($1_1, $0_1);
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1);
    return;
   }
   $2097($6_1 | 0);
   abort();
  }
  $3(global$1 + 3299 | 0 | 0);
  abort();
 }
 
 function $242($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = HEAP32[($0_1 + 212 | 0) >> 2] | 0;
  $0_1 = HEAP32[($0_1 + 208 | 0) >> 2] | 0;
  $2_1 = ($1_1 - $0_1 | 0) >> 2 | 0;
  label$1 : {
   if (($1_1 | 0) == ($0_1 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $3_1 = HEAP32[$0_1 >> 2] | 0;
    $2_1 = (FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($3_1) | 0) + $2_1 | 0;
    $0_1 = $0_1 + 4 | 0;
    if (($0_1 | 0) != ($1_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  return $2_1 | 0;
 }
 
 function $243($0_1) {
  $0_1 = $0_1 | 0;
  $565($0_1 | 0) | 0;
  HEAP32[($0_1 + 216 | 0) >> 2] = 0;
  HEAP32[($0_1 + 208 | 0) >> 2] = 0;
  HEAP32[($0_1 + 212 | 0) >> 2] = 0;
  HEAP32[$0_1 >> 2] = (global$1 + 22784 | 0) + 8 | 0;
  return $0_1 | 0;
 }
 
 function $244($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  HEAP32[$0_1 >> 2] = (global$1 + 22784 | 0) + 8 | 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 208 | 0) >> 2] | 0;
   $2_1 = HEAP32[($0_1 + 212 | 0) >> 2] | 0;
   if (($1_1 | 0) == ($2_1 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $3_1 = HEAP32[$1_1 >> 2] | 0;
    FUNCTION_TABLE[HEAP32[(HEAP32[$3_1 >> 2] | 0) >> 2] | 0 | 0]($3_1, 0);
    $1_1 = $1_1 + 4 | 0;
    if (($1_1 | 0) != ($2_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
   $1_1 = HEAP32[($0_1 + 208 | 0) >> 2] | 0;
  }
  label$3 : {
   if (!$1_1) {
    break label$3
   }
   HEAP32[($0_1 + 212 | 0) >> 2] = $1_1;
   $2032($1_1 | 0);
  }
  return $0_1 | 0;
 }
 
 function $245($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  HEAP32[$0_1 >> 2] = (global$1 + 22784 | 0) + 8 | 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 208 | 0) >> 2] | 0;
   $2_1 = HEAP32[($0_1 + 212 | 0) >> 2] | 0;
   if (($1_1 | 0) == ($2_1 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $3_1 = HEAP32[$1_1 >> 2] | 0;
    FUNCTION_TABLE[HEAP32[(HEAP32[$3_1 >> 2] | 0) >> 2] | 0 | 0]($3_1, 0);
    $1_1 = $1_1 + 4 | 0;
    if (($1_1 | 0) != ($2_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
   $1_1 = HEAP32[($0_1 + 208 | 0) >> 2] | 0;
  }
  label$3 : {
   if (!$1_1) {
    break label$3
   }
   HEAP32[($0_1 + 212 | 0) >> 2] = $1_1;
   $2032($1_1 | 0);
  }
  $2032($0_1 | 0);
 }
 
 function $246() {
  var $0_1 = 0;
  $0_1 = $2030(220 | 0) | 0;
  $565($0_1 | 0) | 0;
  HEAP32[($0_1 + 216 | 0) >> 2] = 0;
  HEAP32[($0_1 + 208 | 0) >> 2] = 0;
  HEAP32[($0_1 + 212 | 0) >> 2] = 0;
  HEAP32[$0_1 >> 2] = (global$1 + 22784 | 0) + 8 | 0;
  return $0_1 | 0;
 }
 
 function $247($0_1) {
  $0_1 = $0_1 | 0;
  $564($0_1 | 0);
  return $0_1 + 64 | 0 | 0;
 }
 
 function $248($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $241($0_1 | 0, $1_1 | 0);
 }
 
 function $249($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $11_1 = 0;
  i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  HEAP32[($0_1 + 204 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
  $11_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[($0_1 + 196 | 0) >> 2] = $11_1;
  HEAP32[($0_1 + 200 | 0) >> 2] = i64toi32_i32$1;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1);
 }
 
 function $250($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  label$1 : {
   if (HEAPU8[($0_1 + 60 | 0) >> 0] | 0) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1);
   HEAP8[($0_1 + 60 | 0) >> 0] = 1;
  }
  label$2 : {
   $1_1 = HEAP32[($0_1 + 208 | 0) >> 2] | 0;
   $2_1 = HEAP32[($0_1 + 212 | 0) >> 2] | 0;
   if (($1_1 | 0) == ($2_1 | 0)) {
    break label$2
   }
   label$3 : while (1) {
    $0_1 = HEAP32[$1_1 >> 2] | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1);
    $1_1 = $1_1 + 4 | 0;
    if (($1_1 | 0) != ($2_1 | 0)) {
     continue label$3
    }
    break label$3;
   };
  }
 }
 
 function $251() {
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $0_1 = 0;
  $0_1 = global$1 + 66596 | 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  i64toi32_i32$1 = i64toi32_i32$1 + 12 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 32 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 44 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 40 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 52 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 60 | 0) >> 2] = 1065353216;
 }
 
 function $252($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 92 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   $2032($53($1_1 | 0) | 0 | 0);
  }
  label$2 : {
   $1_1 = HEAP32[($0_1 + 88 | 0) >> 2] | 0;
   if ($1_1) {
    break label$2
   }
   HEAP32[($0_1 + 92 | 0) >> 2] = 0;
   return;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     if (HEAPU8[($0_1 + 108 | 0) >> 0] | 0) {
      break label$5
     }
     HEAP32[($0_1 + 92 | 0) >> 2] = 0;
     break label$4;
    }
    $1_1 = $2030(28 | 0) | 0;
    $52($1_1 | 0, $0_1 | 0) | 0;
    HEAP32[($0_1 + 92 | 0) >> 2] = $1_1;
    $1_1 = HEAP32[($0_1 + 88 | 0) >> 2] | 0;
    if (!$1_1) {
     break label$3
    }
   }
   if (!(FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 100 | 0) >> 2] | 0 | 0]($1_1) | 0)) {
    break label$3
   }
   $1_1 = global$1;
   HEAP32[(($2143(HEAP32[($0_1 + 88 | 0) >> 2] | 0 | 0, $1_1 + 22092 | 0 | 0, global$27 | 0, 0 | 0) | 0) + 272 | 0) >> 2] = HEAP32[($0_1 + 92 | 0) >> 2] | 0;
  }
 }
 
 function $253($0_1) {
  $0_1 = $0_1 | 0;
  $0_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
  $564($0_1 | 0);
  return $0_1 + 64 | 0 | 0;
 }
 
 function $254($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   $1_1 = $255($0_1 + 68 | 0 | 0, $1_1 | 0) | 0;
   if ($1_1) {
    break label$1
   }
   return 0 | 0;
  }
  return HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0;
 }
 
 function $255($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $7_1 = 0, $4_1 = 0, $6_1 = 0, $5_1 = 0, $9_1 = 0, $8_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $2_1 = HEAPU8[($1_1 + 11 | 0) >> 0] | 0;
  $3_1 = (($2_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0);
  $4_1 = (wasm2js_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0, wasm2js_i32$1 = $2_1, wasm2js_i32$2 = $3_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  $2_1 = $4_1;
  $5_1 = (wasm2js_i32$0 = HEAP32[$1_1 >> 2] | 0, wasm2js_i32$1 = $1_1, wasm2js_i32$2 = $3_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  $1_1 = $5_1;
  $3_1 = $2_1;
  label$1 : {
   if ($2_1 >>> 0 < 4 >>> 0) {
    break label$1
   }
   $3_1 = $4_1;
   $1_1 = $5_1;
   $2_1 = $3_1;
   label$2 : while (1) {
    $6_1 = Math_imul(HEAPU8[$1_1 >> 0] | 0 | ((HEAPU8[($1_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($1_1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($1_1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0, 1540483477);
    $2_1 = Math_imul(($6_1 >>> 24 | 0) ^ $6_1 | 0, 1540483477) ^ Math_imul($2_1, 1540483477) | 0;
    $1_1 = $1_1 + 4 | 0;
    $3_1 = $3_1 + -4 | 0;
    if ($3_1 >>> 0 > 3 >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
  label$3 : {
   switch ($3_1 + -1 | 0 | 0) {
   case 2:
    $2_1 = ((HEAPU8[($1_1 + 2 | 0) >> 0] | 0) << 16 | 0) ^ $2_1 | 0;
   case 1:
    $2_1 = ((HEAPU8[($1_1 + 1 | 0) >> 0] | 0) << 8 | 0) ^ $2_1 | 0;
   case 0:
    $2_1 = Math_imul($2_1 ^ (HEAPU8[$1_1 >> 0] | 0) | 0, 1540483477);
    break;
   default:
    break label$3;
   };
  }
  $3_1 = 0;
  label$7 : {
   $7_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!$7_1) {
    break label$7
   }
   $1_1 = Math_imul(($2_1 >>> 13 | 0) ^ $2_1 | 0, 1540483477);
   $6_1 = ($1_1 >>> 15 | 0) ^ $1_1 | 0;
   label$8 : {
    label$9 : {
     $2_1 = __wasm_popcnt_i32($7_1 | 0) | 0;
     if ($2_1 >>> 0 > 1 >>> 0) {
      break label$9
     }
     $8_1 = $6_1 & ($7_1 + -1 | 0) | 0;
     break label$8;
    }
    $8_1 = $6_1;
    if ($6_1 >>> 0 < $7_1 >>> 0) {
     break label$8
    }
    $8_1 = ($6_1 >>> 0) % ($7_1 >>> 0) | 0;
   }
   $1_1 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + ($8_1 << 2 | 0) | 0) >> 2] | 0;
   if (!$1_1) {
    break label$7
   }
   $1_1 = HEAP32[$1_1 >> 2] | 0;
   if (!$1_1) {
    break label$7
   }
   label$10 : {
    label$11 : {
     if ($2_1 >>> 0 > 1 >>> 0) {
      break label$11
     }
     $9_1 = $7_1 + -1 | 0;
     label$12 : while (1) {
      label$13 : {
       label$14 : {
        $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
        if (($6_1 | 0) == ($2_1 | 0)) {
         break label$14
        }
        if (($2_1 & $9_1 | 0 | 0) == ($8_1 | 0)) {
         break label$13
        }
        break label$10;
       }
       $3_1 = HEAPU8[($1_1 + 19 | 0) >> 0] | 0;
       $2_1 = (($3_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0);
       if (((wasm2js_i32$0 = HEAP32[($1_1 + 12 | 0) >> 2] | 0, wasm2js_i32$1 = $3_1, wasm2js_i32$2 = $2_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) | 0) != ($4_1 | 0)) {
        break label$13
       }
       $0_1 = $1_1 + 8 | 0;
       $7_1 = HEAP32[$0_1 >> 2] | 0;
       label$15 : {
        if ($2_1) {
         break label$15
        }
        label$16 : {
         if ($4_1) {
          break label$16
         }
         return $1_1 | 0;
        }
        $2_1 = $5_1;
        if ((HEAPU8[$2_1 >> 0] | 0 | 0) != ($7_1 & 255 | 0 | 0)) {
         break label$13
        }
        label$17 : while (1) {
         label$18 : {
          $3_1 = $3_1 + -1 | 0;
          if ($3_1) {
           break label$18
          }
          return $1_1 | 0;
         }
         $7_1 = HEAPU8[($2_1 + 1 | 0) >> 0] | 0;
         $2_1 = $2_1 + 1 | 0;
         $0_1 = $0_1 + 1 | 0;
         if (($7_1 | 0) == (HEAPU8[$0_1 >> 0] | 0 | 0)) {
          continue label$17
         }
         break label$13;
        };
       }
       label$19 : {
        if ($4_1) {
         break label$19
        }
        return $1_1 | 0;
       }
       if ($588(($2_1 ? $7_1 : $0_1) | 0, $5_1 | 0, $4_1 | 0) | 0) {
        break label$13
       }
       return $1_1 | 0;
      }
      $1_1 = HEAP32[$1_1 >> 2] | 0;
      if ($1_1) {
       continue label$12
      }
      break label$10;
     };
    }
    label$20 : while (1) {
     label$21 : {
      label$22 : {
       $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if (($6_1 | 0) == ($2_1 | 0)) {
        break label$22
       }
       label$23 : {
        if ($2_1 >>> 0 < $7_1 >>> 0) {
         break label$23
        }
        $2_1 = ($2_1 >>> 0) % ($7_1 >>> 0) | 0;
       }
       if (($2_1 | 0) == ($8_1 | 0)) {
        break label$21
       }
       break label$10;
      }
      $3_1 = HEAPU8[($1_1 + 19 | 0) >> 0] | 0;
      $2_1 = (($3_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0);
      if (((wasm2js_i32$0 = HEAP32[($1_1 + 12 | 0) >> 2] | 0, wasm2js_i32$1 = $3_1, wasm2js_i32$2 = $2_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) | 0) != ($4_1 | 0)) {
       break label$21
      }
      $0_1 = $1_1 + 8 | 0;
      $9_1 = HEAP32[$0_1 >> 2] | 0;
      label$24 : {
       label$25 : {
        if ($2_1) {
         break label$25
        }
        if ($4_1) {
         break label$24
        }
        return $1_1 | 0;
       }
       label$26 : {
        if ($4_1) {
         break label$26
        }
        return $1_1 | 0;
       }
       if ($588(($2_1 ? $9_1 : $0_1) | 0, $5_1 | 0, $4_1 | 0) | 0) {
        break label$21
       }
       return $1_1 | 0;
      }
      $2_1 = $5_1;
      if ((HEAPU8[$2_1 >> 0] | 0 | 0) != ($9_1 & 255 | 0 | 0)) {
       break label$21
      }
      label$27 : {
       label$28 : while (1) {
        $3_1 = $3_1 + -1 | 0;
        if (!$3_1) {
         break label$27
        }
        $9_1 = HEAPU8[($2_1 + 1 | 0) >> 0] | 0;
        $2_1 = $2_1 + 1 | 0;
        $0_1 = $0_1 + 1 | 0;
        if (($9_1 | 0) != (HEAPU8[$0_1 >> 0] | 0 | 0)) {
         break label$21
        }
        continue label$28;
       };
      }
      return $1_1 | 0;
     }
     $1_1 = HEAP32[$1_1 >> 2] | 0;
     if ($1_1) {
      continue label$20
     }
     break label$20;
    };
   }
   $3_1 = 0;
  }
  return $3_1 | 0;
 }
 
 function $256($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 64 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($2_1, !$1_1);
   label$2 : {
    if ($1_1) {
     break label$2
    }
    $1_1 = HEAP32[((HEAP32[($0_1 + 64 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0;
   }
   $257($0_1 | 0, $1_1 | 0);
  }
 }
 
 function $257($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = Math_fround(0), $2_1 = 0;
  $2_1 = $443() | 0;
  $3_1 = $444() | 0;
  label$1 : {
   if (!(HEAPU8[((HEAP32[($0_1 + 60 | 0) >> 2] | 0) + 4 | 0) >> 0] | 0)) {
    break label$1
   }
   $403(1 | 0, $3_1 | 0);
  }
  label$2 : {
   if (!($460() | 0)) {
    break label$2
   }
   $5_1 = Math_fround(HEAPF32[($0_1 + 116 | 0) >> 2]);
   if ($5_1 > Math_fround(0.0) ^ 1 | 0) {
    break label$2
   }
   label$3 : {
    label$4 : {
     if (HEAP32[($1_1 + 4 | 0) >> 2] | 0) {
      break label$4
     }
     $4_1 = -1;
     break label$3;
    }
    $4_1 = HEAP32[((HEAP32[($1_1 + 56 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0;
   }
   fimport$52($4_1 | 0, Math_fround($5_1));
  }
  $389(HEAPU8[($0_1 + 113 | 0) >> 0] | 0 | 0);
  label$5 : {
   label$6 : {
    if (HEAP32[($1_1 + 4 | 0) >> 2] | 0) {
     break label$6
    }
    $4_1 = -1;
    break label$5;
   }
   $4_1 = HEAP32[((HEAP32[($1_1 + 56 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0;
  }
  $1_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
  $564($1_1 | 0);
  fimport$53($4_1 | 0, 1 | 0, 0 | 0, $1_1 + 64 | 0 | 0);
  $1_1 = HEAP32[($0_1 + 88 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 64 | 0) >> 2] | 0 | 0]($1_1, HEAP32[($0_1 + 96 | 0) >> 2] | 0);
  label$7 : {
   if (!(HEAPU8[((HEAP32[($0_1 + 60 | 0) >> 2] | 0) + 4 | 0) >> 0] | 0)) {
    break label$7
   }
   $403($2_1 | 0, $3_1 | 0);
  }
 }
 
 function $258($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $188($1_1 | 0);
  $257($0_1 | 0, $1_1 | 0);
 }
 
 function $259($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $13_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = Math_fround(0), $2_1 = 0, $4_1 = 0, $25_1 = 0, $31_1 = 0, $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0);
  $2_1 = $0_1 + 124 | 0;
  i64toi32_i32$2 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1) | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  $25_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $2_1;
  HEAP32[i64toi32_i32$0 >> 2] = $25_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $4_1 = $0_1 + 132 | 0;
  i64toi32_i32$2 = i64toi32_i32$2 + 12 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $31_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $4_1;
  HEAP32[i64toi32_i32$1 >> 2] = $31_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  label$1 : {
   if (HEAPU8[($0_1 + 111 | 0) >> 0] | 0) {
    break label$1
   }
   $5_1 = Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]);
   $6_1 = Math_fround(HEAPF32[($1_1 + 52 | 0) >> 2]);
   $7_1 = Math_fround(HEAPF32[($1_1 + 36 | 0) >> 2]);
   $8_1 = Math_fround(HEAPF32[($1_1 + 48 | 0) >> 2]);
   $9_1 = Math_fround(HEAPF32[($1_1 + 32 | 0) >> 2]);
   $10_1 = Math_fround(HEAPF32[$1_1 >> 2]);
   $11_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
   $12_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
   $13_1 = Math_fround(HEAPF32[($0_1 + 40 | 0) >> 2]);
   $14_1 = Math_fround(HEAPF32[($0_1 + 44 | 0) >> 2]);
   $15_1 = Math_fround(HEAPF32[($0_1 + 48 | 0) >> 2]);
   HEAPF32[$4_1 >> 2] = Math_fround(Math_fround(Math_fround($13_1 * Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2])) + Math_fround($14_1 * Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]))) + Math_fround(Math_fround($15_1 * Math_fround(HEAPF32[($1_1 + 40 | 0) >> 2])) + Math_fround(HEAPF32[($1_1 + 56 | 0) >> 2])));
   HEAPF32[($0_1 + 128 | 0) >> 2] = Math_fround(Math_fround(Math_fround($13_1 * $12_1) + Math_fround($14_1 * $5_1)) + Math_fround($6_1 + Math_fround($15_1 * $7_1)));
   HEAPF32[$2_1 >> 2] = Math_fround(Math_fround(Math_fround($13_1 * $10_1) + Math_fround($14_1 * $11_1)) + Math_fround($8_1 + Math_fround($15_1 * $9_1)));
  }
 }
 
 function $260($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $3_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $1_1 = 0, $10_1 = Math_fround(0), $5_1 = 0, $8_1 = Math_fround(0), $4_1 = 0, $12_1 = Math_fround(0), $15_1 = Math_fround(0), $6_1 = 0, $9_1 = Math_fround(0), $11_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = Math_fround(0), $16_1 = Math_fround(0), $7_1 = 0, $17_1 = Math_fround(0), $41_1 = 0, $46_1 = 0, $51_1 = 0, $121_1 = Math_fround(0), $241_1 = 0, $246_1 = 0, $251_1 = 0;
  $1_1 = global$0 - 32 | 0;
  global$0 = $1_1;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   label$2 : {
    $3_1 = HEAP32[($0_1 + 88 | 0) >> 2] | 0;
    if ($3_1) {
     break label$2
    }
    $516($0_1 | 0);
    break label$1;
   }
   $564($2_1 | 0);
   FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 84 | 0) >> 2] | 0 | 0]($1_1, $3_1, $2_1 + 156 | 0);
   i64toi32_i32$2 = $1_1 + 20 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $41_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1 + 28 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $41_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $1_1 + 12 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $46_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1 + 20 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $46_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $4_1 = $0_1 + 12 | 0;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
   $51_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $4_1;
   HEAP32[i64toi32_i32$0 >> 2] = $51_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   $2_1 = $0_1 + 8 | 0;
   label$3 : {
    if ((HEAPU8[(global$1 + 66740 | 0) >> 0] | 0) & 1 | 0) {
     break label$3
    }
    if (!($2099(global$1 + 66740 | 0 | 0) | 0)) {
     break label$3
    }
    $5_1 = global$1;
    $3_1 = $5_1 + 66728 | 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = 0;
    i64toi32_i32$0 = $3_1;
    i64toi32_i32$1 = 0;
    HEAP32[$3_1 >> 2] = 0;
    HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$1;
    $6_1 = $2030(96 | 0) | 0;
    HEAP32[$3_1 >> 2] = $6_1;
    $7_1 = $6_1 + 96 | 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = $7_1;
    $2174($6_1 | 0, 0 | 0, 96 | 0) | 0;
    HEAP32[($3_1 + 4 | 0) >> 2] = $7_1;
    fimport$3(global$15 + 129 | 0 | 0, 0 | 0, $5_1 + 1024 | 0 | 0) | 0;
    $2107($5_1 + 66740 | 0 | 0);
   }
   $533($1_1 | 0, $2_1 | 0);
   label$4 : {
    $2_1 = HEAP32[(global$1 + 66728 | 0) >> 2] | 0;
    if (!$2_1) {
     break label$4
    }
    $3_1 = global$1 + 66728 | 0;
    HEAP32[($3_1 + 4 | 0) >> 2] = $2_1;
    $2032($2_1 | 0);
    HEAP32[($3_1 + 8 | 0) >> 2] = 0;
    i64toi32_i32$0 = $3_1;
    i64toi32_i32$1 = 0;
    HEAP32[$3_1 >> 2] = 0;
    HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$1;
   }
   $3_1 = global$1 + 66728 | 0;
   $2_1 = HEAP32[$1_1 >> 2] | 0;
   HEAP32[$3_1 >> 2] = $2_1;
   $5_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   HEAP32[($3_1 + 4 | 0) >> 2] = $5_1;
   HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
   label$5 : {
    if (($2_1 | 0) == ($5_1 | 0)) {
     break label$5
    }
    label$6 : while (1) {
     $3_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
     $564($3_1 | 0);
     $8_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
     $121_1 = $8_1;
     $9_1 = Math_fround(HEAPF32[($3_1 + 152 | 0) >> 2]);
     $10_1 = Math_fround(HEAPF32[($3_1 + 140 | 0) >> 2]);
     $11_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
     $12_1 = Math_fround(HEAPF32[($3_1 + 144 | 0) >> 2]);
     $13_1 = Math_fround(HEAPF32[$2_1 >> 2]);
     $14_1 = Math_fround(Math_fround($10_1 * $11_1) - Math_fround($12_1 * $13_1));
     $15_1 = Math_fround(HEAPF32[($3_1 + 148 | 0) >> 2]);
     $16_1 = Math_fround(Math_fround($15_1 * $13_1) - Math_fround($10_1 * $8_1));
     $8_1 = Math_fround(Math_fround($12_1 * $8_1) - Math_fround($15_1 * $11_1));
     $17_1 = Math_fround(Math_fround($9_1 * $14_1) + Math_fround(Math_fround($10_1 * $16_1) - Math_fround($12_1 * $8_1)));
     HEAPF32[($2_1 + 8 | 0) >> 2] = Math_fround($121_1 + Math_fround($17_1 + $17_1));
     $10_1 = Math_fround(Math_fround($9_1 * $16_1) + Math_fround(Math_fround($15_1 * $8_1) - Math_fround($10_1 * $14_1)));
     HEAPF32[($2_1 + 4 | 0) >> 2] = Math_fround($11_1 + Math_fround($10_1 + $10_1));
     $10_1 = Math_fround(Math_fround($8_1 * $9_1) + Math_fround(Math_fround($12_1 * $14_1) - Math_fround($15_1 * $16_1)));
     HEAPF32[$2_1 >> 2] = Math_fround($13_1 + Math_fround($10_1 + $10_1));
     $3_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
     $564($3_1 | 0);
     HEAPF32[$2_1 >> 2] = Math_fround(Math_fround(HEAPF32[($3_1 + 128 | 0) >> 2]) + Math_fround(HEAPF32[$2_1 >> 2]));
     HEAPF32[($2_1 + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($3_1 + 132 | 0) >> 2]) + Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]));
     HEAPF32[($2_1 + 8 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($3_1 + 136 | 0) >> 2]) + Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]));
     $2_1 = $2_1 + 12 | 0;
     if (($2_1 | 0) != ($5_1 | 0)) {
      continue label$6
     }
     break label$6;
    };
   }
   $2_1 = $529($1_1 | 0, global$1 + 66728 | 0 | 0) | 0;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
   $241_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $4_1;
   HEAP32[i64toi32_i32$1 >> 2] = $241_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $2_1 + 20 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $246_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $4_1 + 16 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $246_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $2_1 + 12 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $251_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $4_1 + 8 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $251_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  }
  global$0 = $1_1 + 32 | 0;
 }
 
 function $261($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[(global$1 + 66728 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   HEAP32[((global$1 + 66728 | 0) + 4 | 0) >> 2] = $1_1;
   $2032($1_1 | 0);
  }
 }
 
 function $262($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $8_1 = Math_fround(0), $2_1 = 0, $1_1 = 0, $6_1 = Math_fround(0), $4_1 = 0, $5_1 = 0, $10_1 = Math_fround(0), $13_1 = Math_fround(0), $7_1 = Math_fround(0), $9_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = Math_fround(0), i64toi32_i32$1 = 0, $57_1 = Math_fround(0);
  $1_1 = global$0 - 32 | 0;
  global$0 = $1_1;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   label$2 : {
    $3_1 = HEAP32[($0_1 + 88 | 0) >> 2] | 0;
    if ($3_1) {
     break label$2
    }
    $517($0_1 | 0);
    break label$1;
   }
   $564($2_1 | 0);
   FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 88 | 0) >> 2] | 0 | 0]($1_1 + 8 | 0, $3_1, $2_1 + 156 | 0);
   $2_1 = $0_1 + 48 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
   $3_1 = $0_1 + 40 | 0;
   i64toi32_i32$1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
   HEAP32[$3_1 >> 2] = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
   HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[($0_1 + 52 | 0) >> 2] = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
   $4_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
   $564($4_1 | 0);
   $6_1 = Math_fround(HEAPF32[$2_1 >> 2]);
   $57_1 = $6_1;
   $7_1 = Math_fround(HEAPF32[($4_1 + 152 | 0) >> 2]);
   $8_1 = Math_fround(HEAPF32[($4_1 + 140 | 0) >> 2]);
   $5_1 = $0_1 + 44 | 0;
   $9_1 = Math_fround(HEAPF32[$5_1 >> 2]);
   $10_1 = Math_fround(HEAPF32[($4_1 + 144 | 0) >> 2]);
   $11_1 = Math_fround(HEAPF32[$3_1 >> 2]);
   $12_1 = Math_fround(Math_fround($8_1 * $9_1) - Math_fround($10_1 * $11_1));
   $13_1 = Math_fround(HEAPF32[($4_1 + 148 | 0) >> 2]);
   $14_1 = Math_fround(Math_fround($13_1 * $11_1) - Math_fround($8_1 * $6_1));
   $6_1 = Math_fround(Math_fround($10_1 * $6_1) - Math_fround($13_1 * $9_1));
   $15_1 = Math_fround(Math_fround($7_1 * $12_1) + Math_fround(Math_fround($8_1 * $14_1) - Math_fround($10_1 * $6_1)));
   HEAPF32[$2_1 >> 2] = Math_fround($57_1 + Math_fround($15_1 + $15_1));
   $8_1 = Math_fround(Math_fround($7_1 * $14_1) + Math_fround(Math_fround($13_1 * $6_1) - Math_fround($8_1 * $12_1)));
   HEAPF32[$5_1 >> 2] = Math_fround($9_1 + Math_fround($8_1 + $8_1));
   $8_1 = Math_fround(Math_fround($6_1 * $7_1) + Math_fround(Math_fround($10_1 * $12_1) - Math_fround($13_1 * $14_1)));
   HEAPF32[$3_1 >> 2] = Math_fround($11_1 + Math_fround($8_1 + $8_1));
   $0_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
   $564($0_1 | 0);
   HEAPF32[$3_1 >> 2] = Math_fround(Math_fround(HEAPF32[($0_1 + 128 | 0) >> 2]) + Math_fround(HEAPF32[$3_1 >> 2]));
   HEAPF32[$5_1 >> 2] = Math_fround(Math_fround(HEAPF32[($0_1 + 132 | 0) >> 2]) + Math_fround(HEAPF32[$5_1 >> 2]));
   HEAPF32[$2_1 >> 2] = Math_fround(Math_fround(HEAPF32[($0_1 + 136 | 0) >> 2]) + Math_fround(HEAPF32[$2_1 >> 2]));
  }
  global$0 = $1_1 + 32 | 0;
 }
 
 function $263($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   $0_1 = HEAP32[($0_1 + 60 | 0) >> 2] | 0;
   if ($0_1) {
    break label$1
   }
   return 0 | 0;
  }
  return (HEAPU8[($0_1 + 5 | 0) >> 0] | 0 | 0) != (0 | 0) | 0;
 }
 
 function $264($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $12_1 = 0;
  $1_1 = HEAP32[($0_1 + 88 | 0) >> 2] | 0;
  $12_1 = HEAPU8[($0_1 + 113 | 0) >> 0] | 0 | ((FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 80 | 0) >> 2] | 0 | 0]($1_1) | 0) << 1 | 0) | 0;
  $0_1 = HEAP32[($0_1 + 60 | 0) >> 2] | 0;
  return $12_1 | ((FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1) | 0) << 16 | 0) | 0 | 0;
 }
 
 function $265($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    if (!(HEAPU8[($0_1 + 4 | 0) >> 0] | 0)) {
     break label$2
    }
    if (!(HEAP32[($0_1 + 88 | 0) >> 2] | 0)) {
     break label$2
    }
    label$3 : {
     label$4 : {
      $2_1 = HEAP32[(global$1 + 66724 | 0) >> 2] | 0;
      if (!$2_1) {
       break label$4
      }
      $3_1 = $2181($2_1 | 0) | 0;
      if ($3_1 >>> 0 >= -16 >>> 0) {
       break label$1
      }
      label$5 : {
       label$6 : {
        label$7 : {
         if ($3_1 >>> 0 < 11 >>> 0) {
          break label$7
         }
         $4_1 = ($3_1 + 16 | 0) & -16 | 0;
         $5_1 = $2030($4_1 | 0) | 0;
         HEAP32[($1_1 + 8 | 0) >> 2] = $4_1 | -2147483648 | 0;
         HEAP32[$1_1 >> 2] = $5_1;
         HEAP32[($1_1 + 4 | 0) >> 2] = $3_1;
         $4_1 = $1_1;
         break label$6;
        }
        HEAP8[($1_1 + 11 | 0) >> 0] = $3_1;
        $4_1 = $1_1;
        $5_1 = $1_1;
        if (!$3_1) {
         break label$5
        }
       }
       $2173($5_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
      }
      HEAP8[($5_1 + $3_1 | 0) >> 0] = 0;
      $3_1 = $266($0_1 + 68 | 0 | 0, $1_1 | 0) | 0;
      label$8 : {
       if ((HEAP8[($4_1 + 11 | 0) >> 0] | 0 | 0) > (-1 | 0)) {
        break label$8
       }
       $2032(HEAP32[$1_1 >> 2] | 0 | 0);
      }
      label$9 : {
       if ($3_1) {
        break label$9
       }
       HEAP32[($0_1 + 64 | 0) >> 2] = 0;
       break label$3;
      }
      HEAP32[($0_1 + 64 | 0) >> 2] = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
      break label$3;
     }
     HEAP32[($0_1 + 64 | 0) >> 2] = HEAP32[($0_1 + 60 | 0) >> 2] | 0;
    }
    $354($341() | 0 | 0, $0_1 | 0);
   }
   global$0 = $1_1 + 16 | 0;
   return;
  }
  $2049($1_1 | 0);
  abort();
 }
 
 function $266($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $7_1 = 0, $4_1 = 0, $6_1 = 0, $5_1 = 0, $9_1 = 0, $8_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $2_1 = HEAPU8[($1_1 + 11 | 0) >> 0] | 0;
  $3_1 = (($2_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0);
  $4_1 = (wasm2js_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0, wasm2js_i32$1 = $2_1, wasm2js_i32$2 = $3_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  $2_1 = $4_1;
  $5_1 = (wasm2js_i32$0 = HEAP32[$1_1 >> 2] | 0, wasm2js_i32$1 = $1_1, wasm2js_i32$2 = $3_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  $1_1 = $5_1;
  $3_1 = $2_1;
  label$1 : {
   if ($2_1 >>> 0 < 4 >>> 0) {
    break label$1
   }
   $3_1 = $4_1;
   $1_1 = $5_1;
   $2_1 = $3_1;
   label$2 : while (1) {
    $6_1 = Math_imul(HEAPU8[$1_1 >> 0] | 0 | ((HEAPU8[($1_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($1_1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($1_1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0, 1540483477);
    $2_1 = Math_imul(($6_1 >>> 24 | 0) ^ $6_1 | 0, 1540483477) ^ Math_imul($2_1, 1540483477) | 0;
    $1_1 = $1_1 + 4 | 0;
    $3_1 = $3_1 + -4 | 0;
    if ($3_1 >>> 0 > 3 >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
  label$3 : {
   switch ($3_1 + -1 | 0 | 0) {
   case 2:
    $2_1 = ((HEAPU8[($1_1 + 2 | 0) >> 0] | 0) << 16 | 0) ^ $2_1 | 0;
   case 1:
    $2_1 = ((HEAPU8[($1_1 + 1 | 0) >> 0] | 0) << 8 | 0) ^ $2_1 | 0;
   case 0:
    $2_1 = Math_imul($2_1 ^ (HEAPU8[$1_1 >> 0] | 0) | 0, 1540483477);
    break;
   default:
    break label$3;
   };
  }
  $3_1 = 0;
  label$7 : {
   $7_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!$7_1) {
    break label$7
   }
   $1_1 = Math_imul(($2_1 >>> 13 | 0) ^ $2_1 | 0, 1540483477);
   $6_1 = ($1_1 >>> 15 | 0) ^ $1_1 | 0;
   label$8 : {
    label$9 : {
     $2_1 = __wasm_popcnt_i32($7_1 | 0) | 0;
     if ($2_1 >>> 0 > 1 >>> 0) {
      break label$9
     }
     $8_1 = $6_1 & ($7_1 + -1 | 0) | 0;
     break label$8;
    }
    $8_1 = $6_1;
    if ($6_1 >>> 0 < $7_1 >>> 0) {
     break label$8
    }
    $8_1 = ($6_1 >>> 0) % ($7_1 >>> 0) | 0;
   }
   $1_1 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + ($8_1 << 2 | 0) | 0) >> 2] | 0;
   if (!$1_1) {
    break label$7
   }
   $1_1 = HEAP32[$1_1 >> 2] | 0;
   if (!$1_1) {
    break label$7
   }
   label$10 : {
    label$11 : {
     if ($2_1 >>> 0 > 1 >>> 0) {
      break label$11
     }
     $9_1 = $7_1 + -1 | 0;
     label$12 : while (1) {
      label$13 : {
       label$14 : {
        $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
        if (($2_1 | 0) == ($6_1 | 0)) {
         break label$14
        }
        if (($2_1 & $9_1 | 0 | 0) == ($8_1 | 0)) {
         break label$13
        }
        break label$10;
       }
       $3_1 = HEAPU8[($1_1 + 19 | 0) >> 0] | 0;
       $2_1 = (($3_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0);
       if (((wasm2js_i32$0 = HEAP32[($1_1 + 12 | 0) >> 2] | 0, wasm2js_i32$1 = $3_1, wasm2js_i32$2 = $2_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) | 0) != ($4_1 | 0)) {
        break label$13
       }
       $0_1 = $1_1 + 8 | 0;
       $7_1 = HEAP32[$0_1 >> 2] | 0;
       label$15 : {
        if ($2_1) {
         break label$15
        }
        label$16 : {
         if ($4_1) {
          break label$16
         }
         return $1_1 | 0;
        }
        $2_1 = $5_1;
        if ((HEAPU8[$2_1 >> 0] | 0 | 0) != ($7_1 & 255 | 0 | 0)) {
         break label$13
        }
        label$17 : while (1) {
         label$18 : {
          $3_1 = $3_1 + -1 | 0;
          if ($3_1) {
           break label$18
          }
          return $1_1 | 0;
         }
         $7_1 = HEAPU8[($2_1 + 1 | 0) >> 0] | 0;
         $2_1 = $2_1 + 1 | 0;
         $0_1 = $0_1 + 1 | 0;
         if (($7_1 | 0) == (HEAPU8[$0_1 >> 0] | 0 | 0)) {
          continue label$17
         }
         break label$13;
        };
       }
       label$19 : {
        if ($4_1) {
         break label$19
        }
        return $1_1 | 0;
       }
       if ($588(($2_1 ? $7_1 : $0_1) | 0, $5_1 | 0, $4_1 | 0) | 0) {
        break label$13
       }
       return $1_1 | 0;
      }
      $1_1 = HEAP32[$1_1 >> 2] | 0;
      if ($1_1) {
       continue label$12
      }
      break label$10;
     };
    }
    label$20 : while (1) {
     label$21 : {
      label$22 : {
       $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if (($2_1 | 0) == ($6_1 | 0)) {
        break label$22
       }
       label$23 : {
        if ($2_1 >>> 0 < $7_1 >>> 0) {
         break label$23
        }
        $2_1 = ($2_1 >>> 0) % ($7_1 >>> 0) | 0;
       }
       if (($2_1 | 0) == ($8_1 | 0)) {
        break label$21
       }
       break label$10;
      }
      $3_1 = HEAPU8[($1_1 + 19 | 0) >> 0] | 0;
      $2_1 = (($3_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0);
      if (((wasm2js_i32$0 = HEAP32[($1_1 + 12 | 0) >> 2] | 0, wasm2js_i32$1 = $3_1, wasm2js_i32$2 = $2_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) | 0) != ($4_1 | 0)) {
       break label$21
      }
      $0_1 = $1_1 + 8 | 0;
      $9_1 = HEAP32[$0_1 >> 2] | 0;
      label$24 : {
       label$25 : {
        if ($2_1) {
         break label$25
        }
        if ($4_1) {
         break label$24
        }
        return $1_1 | 0;
       }
       label$26 : {
        if ($4_1) {
         break label$26
        }
        return $1_1 | 0;
       }
       if ($588(($2_1 ? $9_1 : $0_1) | 0, $5_1 | 0, $4_1 | 0) | 0) {
        break label$21
       }
       return $1_1 | 0;
      }
      $2_1 = $5_1;
      if ((HEAPU8[$2_1 >> 0] | 0 | 0) != ($9_1 & 255 | 0 | 0)) {
       break label$21
      }
      label$27 : {
       label$28 : while (1) {
        $3_1 = $3_1 + -1 | 0;
        if (!$3_1) {
         break label$27
        }
        $9_1 = HEAPU8[($2_1 + 1 | 0) >> 0] | 0;
        $2_1 = $2_1 + 1 | 0;
        $0_1 = $0_1 + 1 | 0;
        if (($9_1 | 0) != (HEAPU8[$0_1 >> 0] | 0 | 0)) {
         break label$21
        }
        continue label$28;
       };
      }
      return $1_1 | 0;
     }
     $1_1 = HEAP32[$1_1 >> 2] | 0;
     if ($1_1) {
      continue label$20
     }
     break label$20;
    };
   }
   $3_1 = 0;
  }
  return $3_1 | 0;
 }
 
 function $267($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 88 | 0) >> 2] | 0;
   if (!(FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 92 | 0) >> 2] | 0 | 0]($1_1) | 0)) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1);
  }
  return $512($0_1 | 0) | 0 | 0;
 }
 
 function $268($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 88 | 0) >> 2] | 0;
   if (!(FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 96 | 0) >> 2] | 0 | 0]($1_1) | 0)) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 44 | 0) >> 2] | 0 | 0]($0_1);
  }
  return $513($0_1 | 0) | 0 | 0;
 }
 
 function $269($0_1) {
  $0_1 = $0_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1);
  label$1 : {
   $0_1 = HEAP32[($0_1 + 92 | 0) >> 2] | 0;
   if (!$0_1) {
    break label$1
   }
   $56($0_1 | 0);
  }
 }
 
 function $270($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  HEAP32[$0_1 >> 2] = (global$1 + 22868 | 0) + 8 | 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 92 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   $2032($53($1_1 | 0) | 0 | 0);
  }
  label$2 : {
   $1_1 = HEAP32[($0_1 + 76 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$2
   }
   label$3 : while (1) {
    $2_1 = HEAP32[$1_1 >> 2] | 0;
    label$4 : {
     if ((HEAP8[($1_1 + 19 | 0) >> 0] | 0 | 0) > (-1 | 0)) {
      break label$4
     }
     $2032(HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0);
    }
    $2032($1_1 | 0);
    $1_1 = $2_1;
    if ($1_1) {
     continue label$3
    }
    break label$3;
   };
  }
  $1_1 = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
  HEAP32[($0_1 + 68 | 0) >> 2] = 0;
  label$5 : {
   if (!$1_1) {
    break label$5
   }
   $2032($1_1 | 0);
  }
  return $0_1 | 0;
 }
 
 function $271($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  HEAP32[$0_1 >> 2] = (global$1 + 22868 | 0) + 8 | 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 92 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   $2032($53($1_1 | 0) | 0 | 0);
  }
  label$2 : {
   $1_1 = HEAP32[($0_1 + 76 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$2
   }
   label$3 : while (1) {
    $2_1 = HEAP32[$1_1 >> 2] | 0;
    label$4 : {
     if ((HEAP8[($1_1 + 19 | 0) >> 0] | 0 | 0) > (-1 | 0)) {
      break label$4
     }
     $2032(HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0);
    }
    $2032($1_1 | 0);
    $1_1 = $2_1;
    if ($1_1) {
     continue label$3
    }
    break label$3;
   };
  }
  $1_1 = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
  HEAP32[($0_1 + 68 | 0) >> 2] = 0;
  label$5 : {
   if (!$1_1) {
    break label$5
   }
   $2032($1_1 | 0);
  }
  $2032($0_1 | 0);
 }
 
 function $272() {
  var $0_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $1_1 = 0;
  $0_1 = $2030(140 | 0) | 0;
  $515($0_1 | 0) | 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 60 | 0) >> 2] = 0;
  HEAP32[($0_1 + 64 | 0) >> 2] = i64toi32_i32$0;
  $1_1 = global$1;
  HEAP32[$0_1 >> 2] = ($1_1 + 22868 | 0) + 8 | 0;
  i64toi32_i32$1 = $0_1 + 68 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 76 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 116 | 0) >> 2] = -1082130432;
  HEAP16[($0_1 + 112 | 0) >> 1] = 256;
  HEAP32[($0_1 + 108 | 0) >> 2] = 65793;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = -1;
  HEAP32[($0_1 + 100 | 0) >> 2] = 0;
  HEAP32[($0_1 + 104 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 4;
  HEAP32[($0_1 + 92 | 0) >> 2] = 0;
  HEAP32[($0_1 + 96 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 84 | 0) >> 2] = 1065353216;
  HEAP32[($0_1 + 88 | 0) >> 2] = i64toi32_i32$0;
  $534($0_1 + 120 | 0 | 0, $1_1 + 3368 | 0 | 0, Math_fround(Math_fround(0.0))) | 0;
  return $0_1 | 0;
 }
 
 function $273($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 88 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
    break label$1
   }
   HEAP32[($0_1 + 88 | 0) >> 2] = $1_1;
   FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1);
   $2_1 = HEAPU8[($0_1 + 108 | 0) >> 0] | 0;
   label$2 : {
    label$3 : {
     $1_1 = HEAP32[($0_1 + 88 | 0) >> 2] | 0;
     if ($1_1) {
      break label$3
     }
     $1_1 = ($2_1 | 0) != (0 | 0);
     break label$2;
    }
    $1_1 = ($2_1 | 0) != (0 | 0) & (FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 104 | 0) >> 2] | 0 | 0]($1_1) | 0) | 0;
   }
   HEAP8[($0_1 + 108 | 0) >> 0] = $1_1;
   $252($0_1 | 0);
  }
 }
 
 function $274($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 64 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!$1_1) {
      break label$3
     }
     label$4 : {
      if ((HEAP32[$1_1 >> 2] | 0 | 0) != (1 | 0)) {
       break label$4
      }
      label$5 : {
       if ($2_1) {
        break label$5
       }
       HEAP32[($0_1 + 60 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       break label$3;
      }
      $4_1 = $2181($2_1 | 0) | 0;
      if ($4_1 >>> 0 >= -16 >>> 0) {
       break label$2
      }
      label$6 : {
       label$7 : {
        label$8 : {
         if ($4_1 >>> 0 < 11 >>> 0) {
          break label$8
         }
         $5_1 = ($4_1 + 16 | 0) & -16 | 0;
         $6_1 = $2030($5_1 | 0) | 0;
         HEAP32[($3_1 + 32 | 0) >> 2] = $5_1 | -2147483648 | 0;
         HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
         HEAP32[($3_1 + 28 | 0) >> 2] = $4_1;
         $5_1 = $3_1 + 24 | 0;
         break label$7;
        }
        HEAP8[($3_1 + 35 | 0) >> 0] = $4_1;
        $5_1 = $3_1 + 24 | 0;
        $6_1 = $5_1;
        if (!$4_1) {
         break label$6
        }
       }
       $2173($6_1 | 0, $2_1 | 0, $4_1 | 0) | 0;
      }
      HEAP8[($6_1 + $4_1 | 0) >> 0] = 0;
      $2_1 = global$1;
      $1_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      HEAP32[($3_1 + 48 | 0) >> 2] = $3_1 + 24 | 0;
      $275($3_1 + 56 | 0 | 0, $0_1 + 68 | 0 | 0, $3_1 + 24 | 0 | 0, $2_1 + 3400 | 0 | 0, $3_1 + 48 | 0 | 0, $3_1 + 40 | 0 | 0);
      HEAP32[((HEAP32[($3_1 + 56 | 0) >> 2] | 0) + 20 | 0) >> 2] = $1_1;
      if ((HEAP8[($5_1 + 11 | 0) >> 0] | 0 | 0) > (-1 | 0)) {
       break label$3
      }
      $2032(HEAP32[($3_1 + 24 | 0) >> 2] | 0 | 0);
      break label$3;
     }
     label$9 : {
      if ($2_1) {
       break label$9
      }
      HEAP32[($0_1 + 60 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      break label$3;
     }
     $4_1 = $2181($2_1 | 0) | 0;
     if ($4_1 >>> 0 >= -16 >>> 0) {
      break label$1
     }
     label$10 : {
      label$11 : {
       label$12 : {
        if ($4_1 >>> 0 < 11 >>> 0) {
         break label$12
        }
        $5_1 = ($4_1 + 16 | 0) & -16 | 0;
        $6_1 = $2030($5_1 | 0) | 0;
        HEAP32[($3_1 + 16 | 0) >> 2] = $5_1 | -2147483648 | 0;
        HEAP32[($3_1 + 8 | 0) >> 2] = $6_1;
        HEAP32[($3_1 + 12 | 0) >> 2] = $4_1;
        $5_1 = $3_1 + 8 | 0;
        break label$11;
       }
       HEAP8[($3_1 + 19 | 0) >> 0] = $4_1;
       $5_1 = $3_1 + 8 | 0;
       $6_1 = $5_1;
       if (!$4_1) {
        break label$10
       }
      }
      $2173($6_1 | 0, $2_1 | 0, $4_1 | 0) | 0;
     }
     HEAP8[($6_1 + $4_1 | 0) >> 0] = 0;
     $2_1 = global$1;
     $1_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     HEAP32[($3_1 + 48 | 0) >> 2] = $3_1 + 8 | 0;
     $275($3_1 + 56 | 0 | 0, $0_1 + 68 | 0 | 0, $3_1 + 8 | 0 | 0, $2_1 + 3400 | 0 | 0, $3_1 + 48 | 0 | 0, $3_1 + 40 | 0 | 0);
     HEAP32[((HEAP32[($3_1 + 56 | 0) >> 2] | 0) + 20 | 0) >> 2] = $1_1;
     if ((HEAP8[($5_1 + 11 | 0) >> 0] | 0 | 0) > (-1 | 0)) {
      break label$3
     }
     $2032(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0);
    }
    global$0 = $3_1 + 64 | 0;
    return;
   }
   $2049($3_1 + 24 | 0 | 0);
   abort();
  }
  $2049($3_1 + 8 | 0 | 0);
  abort();
 }
 
 function $275($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $7_1 = 0, $6_1 = 0, $10_1 = 0, $11_1 = 0, $14_1 = 0, $8_1 = 0, $12_1 = 0, $15_1 = 0, $9_1 = 0, $17_1 = Math_fround(0), $16_1 = 0, $18_1 = Math_fround(0), $13_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $6_1 = HEAPU8[($2_1 + 11 | 0) >> 0] | 0;
  $7_1 = (($6_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0);
  $8_1 = (wasm2js_i32$0 = HEAP32[($2_1 + 4 | 0) >> 2] | 0, wasm2js_i32$1 = $6_1, wasm2js_i32$2 = $7_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  $6_1 = $8_1;
  $9_1 = (wasm2js_i32$0 = HEAP32[$2_1 >> 2] | 0, wasm2js_i32$1 = $2_1, wasm2js_i32$2 = $7_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  $2_1 = $9_1;
  $7_1 = $6_1;
  label$1 : {
   if ($6_1 >>> 0 < 4 >>> 0) {
    break label$1
   }
   $7_1 = $8_1;
   $2_1 = $9_1;
   $6_1 = $7_1;
   label$2 : while (1) {
    $10_1 = Math_imul(HEAPU8[$2_1 >> 0] | 0 | ((HEAPU8[($2_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($2_1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($2_1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0, 1540483477);
    $6_1 = Math_imul(($10_1 >>> 24 | 0) ^ $10_1 | 0, 1540483477) ^ Math_imul($6_1, 1540483477) | 0;
    $2_1 = $2_1 + 4 | 0;
    $7_1 = $7_1 + -4 | 0;
    if ($7_1 >>> 0 > 3 >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
  label$3 : {
   switch ($7_1 + -1 | 0 | 0) {
   case 2:
    $6_1 = ((HEAPU8[($2_1 + 2 | 0) >> 0] | 0) << 16 | 0) ^ $6_1 | 0;
   case 1:
    $6_1 = ((HEAPU8[($2_1 + 1 | 0) >> 0] | 0) << 8 | 0) ^ $6_1 | 0;
   case 0:
    $6_1 = Math_imul($6_1 ^ (HEAPU8[$2_1 >> 0] | 0) | 0, 1540483477);
    break;
   default:
    break label$3;
   };
  }
  $2_1 = Math_imul(($6_1 >>> 13 | 0) ^ $6_1 | 0, 1540483477);
  $11_1 = ($2_1 >>> 15 | 0) ^ $2_1 | 0;
  label$7 : {
   label$8 : {
    label$9 : {
     $6_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     if ($6_1) {
      break label$9
     }
     break label$8;
    }
    label$10 : {
     label$11 : {
      $7_1 = __wasm_popcnt_i32($6_1 | 0) | 0;
      if ($7_1 >>> 0 > 1 >>> 0) {
       break label$11
      }
      $12_1 = $11_1 & ($6_1 + -1 | 0) | 0;
      break label$10;
     }
     $12_1 = $11_1;
     if ($11_1 >>> 0 < $6_1 >>> 0) {
      break label$10
     }
     $12_1 = ($11_1 >>> 0) % ($6_1 >>> 0) | 0;
    }
    $2_1 = HEAP32[((HEAP32[$1_1 >> 2] | 0) + ($12_1 << 2 | 0) | 0) >> 2] | 0;
    if (!$2_1) {
     break label$8
    }
    $2_1 = HEAP32[$2_1 >> 2] | 0;
    if (!$2_1) {
     break label$8
    }
    label$12 : {
     if ($7_1 >>> 0 > 1 >>> 0) {
      break label$12
     }
     $13_1 = $6_1 + -1 | 0;
     label$13 : while (1) {
      label$14 : {
       $7_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
       if (($7_1 | 0) == ($11_1 | 0)) {
        break label$14
       }
       if (($7_1 & $13_1 | 0 | 0) != ($12_1 | 0)) {
        break label$8
       }
      }
      label$15 : {
       $10_1 = HEAPU8[($2_1 + 19 | 0) >> 0] | 0;
       $7_1 = (($10_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0);
       if (((wasm2js_i32$0 = HEAP32[($2_1 + 12 | 0) >> 2] | 0, wasm2js_i32$1 = $10_1, wasm2js_i32$2 = $7_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) | 0) != ($8_1 | 0)) {
        break label$15
       }
       $14_1 = $2_1 + 8 | 0;
       $15_1 = HEAP32[$14_1 >> 2] | 0;
       label$16 : {
        if ($7_1) {
         break label$16
        }
        $16_1 = 0;
        if (!$8_1) {
         break label$7
        }
        $7_1 = $9_1;
        if ((HEAPU8[$7_1 >> 0] | 0 | 0) != ($15_1 & 255 | 0 | 0)) {
         break label$15
        }
        label$17 : while (1) {
         $10_1 = $10_1 + -1 | 0;
         if (!$10_1) {
          break label$7
         }
         $15_1 = HEAPU8[($7_1 + 1 | 0) >> 0] | 0;
         $7_1 = $7_1 + 1 | 0;
         $14_1 = $14_1 + 1 | 0;
         if (($15_1 | 0) == (HEAPU8[$14_1 >> 0] | 0 | 0)) {
          continue label$17
         }
         break label$15;
        };
       }
       $16_1 = 0;
       if (!$8_1) {
        break label$7
       }
       if (!($588(($7_1 ? $15_1 : $14_1) | 0, $9_1 | 0, $8_1 | 0) | 0)) {
        break label$7
       }
      }
      $2_1 = HEAP32[$2_1 >> 2] | 0;
      if ($2_1) {
       continue label$13
      }
      break label$8;
     };
    }
    label$18 : while (1) {
     label$19 : {
      $7_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
      if (($7_1 | 0) == ($11_1 | 0)) {
       break label$19
      }
      label$20 : {
       if ($7_1 >>> 0 < $6_1 >>> 0) {
        break label$20
       }
       $7_1 = ($7_1 >>> 0) % ($6_1 >>> 0) | 0;
      }
      if (($7_1 | 0) != ($12_1 | 0)) {
       break label$8
      }
     }
     label$21 : {
      $10_1 = HEAPU8[($2_1 + 19 | 0) >> 0] | 0;
      $7_1 = (($10_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0);
      if (((wasm2js_i32$0 = HEAP32[($2_1 + 12 | 0) >> 2] | 0, wasm2js_i32$1 = $10_1, wasm2js_i32$2 = $7_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) | 0) != ($8_1 | 0)) {
       break label$21
      }
      $14_1 = $2_1 + 8 | 0;
      $15_1 = HEAP32[$14_1 >> 2] | 0;
      label$22 : {
       if ($7_1) {
        break label$22
       }
       $16_1 = 0;
       if (!$8_1) {
        break label$7
       }
       $7_1 = $9_1;
       if ((HEAPU8[$7_1 >> 0] | 0 | 0) != ($15_1 & 255 | 0 | 0)) {
        break label$21
       }
       label$23 : while (1) {
        $10_1 = $10_1 + -1 | 0;
        if (!$10_1) {
         break label$7
        }
        $15_1 = HEAPU8[($7_1 + 1 | 0) >> 0] | 0;
        $7_1 = $7_1 + 1 | 0;
        $14_1 = $14_1 + 1 | 0;
        if (($15_1 | 0) == (HEAPU8[$14_1 >> 0] | 0 | 0)) {
         continue label$23
        }
        break label$21;
       };
      }
      $16_1 = 0;
      if (!$8_1) {
       break label$7
      }
      if (!($588(($7_1 ? $15_1 : $14_1) | 0, $9_1 | 0, $8_1 | 0) | 0)) {
       break label$7
      }
     }
     $2_1 = HEAP32[$2_1 >> 2] | 0;
     if ($2_1) {
      continue label$18
     }
     break label$18;
    };
   }
   $2_1 = $2030(24 | 0) | 0;
   $2051($2_1 + 8 | 0 | 0, HEAP32[$4_1 >> 2] | 0 | 0) | 0;
   HEAP32[($2_1 + 4 | 0) >> 2] = $11_1;
   HEAP32[($2_1 + 20 | 0) >> 2] = 0;
   HEAP32[$2_1 >> 2] = 0;
   $17_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
   $18_1 = Math_fround(((HEAP32[($1_1 + 12 | 0) >> 2] | 0) + 1 | 0) >>> 0);
   label$24 : {
    label$25 : {
     if (!$6_1) {
      break label$25
     }
     if (Math_fround($17_1 * Math_fround($6_1 >>> 0)) < $18_1 ^ 1 | 0) {
      break label$24
     }
    }
    $6_1 = $6_1 << 1 | 0 | ($6_1 >>> 0 < 3 >>> 0 | ($6_1 & ($6_1 + -1 | 0) | 0 | 0) != (0 | 0) | 0) | 0;
    label$26 : {
     label$27 : {
      $17_1 = Math_fround(Math_ceil(Math_fround($18_1 / $17_1)));
      if (!($17_1 < Math_fround(4294967296.0) & $17_1 >= Math_fround(0.0) | 0)) {
       break label$27
      }
      $7_1 = ~~$17_1 >>> 0;
      break label$26;
     }
     $7_1 = 0;
    }
    $278($1_1 | 0, ($6_1 >>> 0 < $7_1 >>> 0 ? $7_1 : $6_1) | 0);
    label$28 : {
     $6_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     if ($6_1 & ($6_1 + -1 | 0) | 0) {
      break label$28
     }
     $12_1 = ($6_1 + -1 | 0) & $11_1 | 0;
     break label$24;
    }
    label$29 : {
     if ($11_1 >>> 0 >= $6_1 >>> 0) {
      break label$29
     }
     $12_1 = $11_1;
     break label$24;
    }
    $12_1 = ($11_1 >>> 0) % ($6_1 >>> 0) | 0;
   }
   label$30 : {
    label$31 : {
     label$32 : {
      $10_1 = (HEAP32[$1_1 >> 2] | 0) + ($12_1 << 2 | 0) | 0;
      $7_1 = HEAP32[$10_1 >> 2] | 0;
      if ($7_1) {
       break label$32
      }
      HEAP32[$2_1 >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
      HEAP32[($1_1 + 8 | 0) >> 2] = $2_1;
      HEAP32[$10_1 >> 2] = $1_1 + 8 | 0;
      $7_1 = HEAP32[$2_1 >> 2] | 0;
      if (!$7_1) {
       break label$30
      }
      $7_1 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
      label$33 : {
       label$34 : {
        $10_1 = $6_1 + -1 | 0;
        if ($6_1 & $10_1 | 0) {
         break label$34
        }
        $7_1 = $7_1 & $10_1 | 0;
        break label$33;
       }
       if ($7_1 >>> 0 < $6_1 >>> 0) {
        break label$33
       }
       $7_1 = ($7_1 >>> 0) % ($6_1 >>> 0) | 0;
      }
      $7_1 = (HEAP32[$1_1 >> 2] | 0) + ($7_1 << 2 | 0) | 0;
      break label$31;
     }
     HEAP32[$2_1 >> 2] = HEAP32[$7_1 >> 2] | 0;
    }
    HEAP32[$7_1 >> 2] = $2_1;
   }
   $16_1 = 1;
   HEAP32[($1_1 + 12 | 0) >> 2] = (HEAP32[($1_1 + 12 | 0) >> 2] | 0) + 1 | 0;
  }
  HEAP8[($0_1 + 4 | 0) >> 0] = $16_1;
  HEAP32[$0_1 >> 2] = $2_1;
 }
 
 function $276($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 104 | 0) >> 2] = $1_1;
 }
 
 function $277($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 88 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   $1_1 = (FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 104 | 0) >> 2] | 0 | 0]($2_1) | 0) & $1_1 | 0;
  }
  HEAP8[($0_1 + 108 | 0) >> 0] = $1_1;
  $252($0_1 | 0);
 }
 
 function $278($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $5_1 = Math_fround(0), $3_1 = 0;
  $2_1 = 2;
  label$1 : {
   if (($1_1 | 0) == (1 | 0)) {
    break label$1
   }
   label$2 : {
    if ($1_1 & ($1_1 + -1 | 0) | 0) {
     break label$2
    }
    $2_1 = $1_1;
    break label$1;
   }
   $2_1 = $700($1_1 | 0) | 0;
  }
  label$3 : {
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if ($2_1 >>> 0 <= $1_1 >>> 0) {
    break label$3
   }
   $279($0_1 | 0, $2_1 | 0);
   return;
  }
  label$4 : {
   if ($2_1 >>> 0 >= $1_1 >>> 0) {
    break label$4
   }
   $3_1 = $1_1 >>> 0 < 3 >>> 0;
   label$5 : {
    label$6 : {
     $5_1 = Math_fround(Math_ceil(Math_fround(Math_fround((HEAP32[($0_1 + 12 | 0) >> 2] | 0) >>> 0) / Math_fround(HEAPF32[($0_1 + 16 | 0) >> 2]))));
     if (!($5_1 < Math_fround(4294967296.0) & $5_1 >= Math_fround(0.0) | 0)) {
      break label$6
     }
     $4_1 = ~~$5_1 >>> 0;
     break label$5;
    }
    $4_1 = 0;
   }
   label$7 : {
    label$8 : {
     if ($3_1) {
      break label$8
     }
     if ((__wasm_popcnt_i32($1_1 | 0) | 0) >>> 0 > 1 >>> 0) {
      break label$8
     }
     $4_1 = $4_1 >>> 0 < 2 >>> 0 ? $4_1 : 1 << (32 - Math_clz32($4_1 + -1 | 0) | 0) | 0;
     break label$7;
    }
    $4_1 = $700($4_1 | 0) | 0;
   }
   $2_1 = $2_1 >>> 0 < $4_1 >>> 0 ? $4_1 : $2_1;
   if ($2_1 >>> 0 >= $1_1 >>> 0) {
    break label$4
   }
   $279($0_1 | 0, $2_1 | 0);
  }
 }
 
 function $279($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $6_1 = 0, $2_1 = 0, $10_1 = 0, $14_1 = 0, $4_1 = 0, $5_1 = 0, $15_1 = 0, $12_1 = 0, $16_1 = 0, $9_1 = 0, $11_1 = 0, $13_1 = 0, $7_1 = 0, $8_1 = 0, $192_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  label$1 : {
   label$2 : {
    if (!$1_1) {
     break label$2
    }
    label$3 : {
     if ($1_1 >>> 0 >= 1073741824 >>> 0) {
      break label$3
     }
     $2_1 = $2030($1_1 << 2 | 0 | 0) | 0;
     $3_1 = HEAP32[$0_1 >> 2] | 0;
     HEAP32[$0_1 >> 2] = $2_1;
     label$4 : {
      if (!$3_1) {
       break label$4
      }
      $2032($3_1 | 0);
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
     $2_1 = $1_1 >>> 0 > 1 >>> 0 ? $1_1 : 1;
     $3_1 = 0;
     label$5 : while (1) {
      HEAP32[((HEAP32[$0_1 >> 2] | 0) + ($3_1 << 2 | 0) | 0) >> 2] = 0;
      $3_1 = $3_1 + 1 | 0;
      if (($3_1 | 0) != ($2_1 | 0)) {
       continue label$5
      }
      break label$5;
     };
     $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     if (!$4_1) {
      break label$1
     }
     $3_1 = $0_1 + 8 | 0;
     $5_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
     label$6 : {
      label$7 : {
       $6_1 = __wasm_popcnt_i32($1_1 | 0) | 0;
       if ($6_1 >>> 0 > 1 >>> 0) {
        break label$7
       }
       $5_1 = $5_1 & ($1_1 + -1 | 0) | 0;
       break label$6;
      }
      if ($5_1 >>> 0 < $1_1 >>> 0) {
       break label$6
      }
      $5_1 = ($5_1 >>> 0) % ($1_1 >>> 0) | 0;
     }
     HEAP32[((HEAP32[$0_1 >> 2] | 0) + ($5_1 << 2 | 0) | 0) >> 2] = $3_1;
     $2_1 = HEAP32[$4_1 >> 2] | 0;
     if (!$2_1) {
      break label$1
     }
     $7_1 = $1_1 + -1 | 0;
     $8_1 = $6_1 >>> 0 > 1 >>> 0;
     label$8 : while (1) {
      $3_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
      label$9 : {
       label$10 : {
        if ($8_1) {
         break label$10
        }
        $3_1 = $3_1 & $7_1 | 0;
        break label$9;
       }
       if ($3_1 >>> 0 < $1_1 >>> 0) {
        break label$9
       }
       $3_1 = ($3_1 >>> 0) % ($1_1 >>> 0) | 0;
      }
      label$11 : {
       label$12 : {
        if (($3_1 | 0) != ($5_1 | 0)) {
         break label$12
        }
        $4_1 = $2_1;
        break label$11;
       }
       label$13 : {
        label$14 : {
         label$15 : {
          $9_1 = $3_1 << 2 | 0;
          $6_1 = (HEAP32[$0_1 >> 2] | 0) + $9_1 | 0;
          if (!(HEAP32[$6_1 >> 2] | 0)) {
           break label$15
          }
          $10_1 = $2_1;
          $3_1 = HEAP32[$2_1 >> 2] | 0;
          if (!$3_1) {
           break label$13
          }
          $11_1 = HEAPU8[($2_1 + 19 | 0) >> 0] | 0;
          $6_1 = ($11_1 << 24 | 0) >> 24 | 0;
          $12_1 = (wasm2js_i32$0 = HEAP32[($2_1 + 12 | 0) >> 2] | 0, wasm2js_i32$1 = $11_1, wasm2js_i32$2 = ($6_1 | 0) < (0 | 0), wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
          $13_1 = $2_1 + 8 | 0;
          label$16 : {
           if (($6_1 | 0) > (-1 | 0)) {
            break label$16
           }
           $10_1 = $2_1;
           $6_1 = HEAPU8[($3_1 + 19 | 0) >> 0] | 0;
           $14_1 = (($6_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0);
           if (($12_1 | 0) != ((wasm2js_i32$0 = HEAP32[($3_1 + 12 | 0) >> 2] | 0, wasm2js_i32$1 = $6_1, wasm2js_i32$2 = $14_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) | 0)) {
            break label$13
           }
           $15_1 = $3_1 + 8 | 0;
           $10_1 = $2_1;
           label$17 : while (1) {
            $6_1 = $3_1;
            label$18 : {
             if (!$12_1) {
              break label$18
             }
             if ($588(HEAP32[$13_1 >> 2] | 0 | 0, (wasm2js_i32$0 = HEAP32[$15_1 >> 2] | 0, wasm2js_i32$1 = $15_1, wasm2js_i32$2 = $14_1 & 1 | 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) | 0, $12_1 | 0) | 0) {
              break label$13
             }
            }
            label$19 : {
             $3_1 = HEAP32[$6_1 >> 2] | 0;
             if (!$3_1) {
              break label$19
             }
             $15_1 = $3_1 + 8 | 0;
             $10_1 = $6_1;
             $6_1 = HEAPU8[($3_1 + 19 | 0) >> 0] | 0;
             $14_1 = (($6_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0);
             if (($12_1 | 0) != ((wasm2js_i32$0 = HEAP32[($3_1 + 12 | 0) >> 2] | 0, wasm2js_i32$1 = $6_1, wasm2js_i32$2 = $14_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) | 0)) {
              break label$13
             }
             continue label$17;
            }
            break label$17;
           };
           $10_1 = $6_1;
           break label$13;
          }
          if (!$12_1) {
           break label$14
          }
          $16_1 = $2_1;
          label$20 : while (1) {
           label$21 : {
            $10_1 = $3_1;
            $3_1 = HEAPU8[($3_1 + 19 | 0) >> 0] | 0;
            $192_1 = $3_1;
            $3_1 = (($3_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0);
            if (($12_1 | 0) == ((wasm2js_i32$0 = HEAP32[($10_1 + 12 | 0) >> 2] | 0, wasm2js_i32$1 = $192_1, wasm2js_i32$2 = $3_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) | 0)) {
             break label$21
            }
            $10_1 = $16_1;
            break label$13;
           }
           $6_1 = $11_1;
           $15_1 = $13_1;
           label$22 : {
            $14_1 = $10_1 + 8 | 0;
            $3_1 = (wasm2js_i32$0 = HEAP32[$14_1 >> 2] | 0, wasm2js_i32$1 = $14_1, wasm2js_i32$2 = $3_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
            if ((HEAPU8[$3_1 >> 0] | 0 | 0) == (HEAPU8[$15_1 >> 0] | 0 | 0)) {
             break label$22
            }
            $10_1 = $16_1;
            break label$13;
           }
           label$23 : {
            label$24 : while (1) {
             $6_1 = $6_1 + -1 | 0;
             if (!$6_1) {
              break label$23
             }
             $14_1 = HEAPU8[($3_1 + 1 | 0) >> 0] | 0;
             $3_1 = $3_1 + 1 | 0;
             $15_1 = $15_1 + 1 | 0;
             if (($14_1 | 0) == (HEAPU8[$15_1 >> 0] | 0 | 0)) {
              continue label$24
             }
             break label$24;
            };
            $10_1 = $16_1;
            break label$13;
           }
           $16_1 = $10_1;
           $3_1 = HEAP32[$10_1 >> 2] | 0;
           if ($3_1) {
            continue label$20
           }
           break label$13;
          };
         }
         HEAP32[$6_1 >> 2] = $4_1;
         $4_1 = $2_1;
         $5_1 = $3_1;
         break label$11;
        }
        $10_1 = $2_1;
        $6_1 = HEAPU8[($3_1 + 19 | 0) >> 0] | 0;
        if (wasm2js_i32$0 = HEAP32[($3_1 + 12 | 0) >> 2] | 0, wasm2js_i32$1 = $6_1, wasm2js_i32$2 = (($6_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0), wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) {
         break label$13
        }
        label$25 : while (1) {
         $10_1 = $3_1;
         $3_1 = HEAP32[$3_1 >> 2] | 0;
         if (!$3_1) {
          break label$13
         }
         $6_1 = HEAPU8[($3_1 + 19 | 0) >> 0] | 0;
         if (!(wasm2js_i32$0 = HEAP32[($3_1 + 12 | 0) >> 2] | 0, wasm2js_i32$1 = $6_1, wasm2js_i32$2 = (($6_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0), wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1)) {
          continue label$25
         }
         break label$25;
        };
       }
       HEAP32[$4_1 >> 2] = HEAP32[$10_1 >> 2] | 0;
       HEAP32[$10_1 >> 2] = HEAP32[(HEAP32[((HEAP32[$0_1 >> 2] | 0) + $9_1 | 0) >> 2] | 0) >> 2] | 0;
       HEAP32[(HEAP32[((HEAP32[$0_1 >> 2] | 0) + $9_1 | 0) >> 2] | 0) >> 2] = $2_1;
      }
      $2_1 = HEAP32[$4_1 >> 2] | 0;
      if ($2_1) {
       continue label$8
      }
      break label$1;
     };
    }
    $3(global$1 + 3401 | 0 | 0);
    abort();
   }
   $3_1 = HEAP32[$0_1 >> 2] | 0;
   HEAP32[$0_1 >> 2] = 0;
   label$26 : {
    if (!$3_1) {
     break label$26
    }
    $2032($3_1 | 0);
   }
   HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  }
 }
 
 function $280() {
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $0_1 = 0;
  $0_1 = global$1 + 66660 | 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  i64toi32_i32$1 = i64toi32_i32$1 + 12 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 32 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 44 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 40 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 52 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 60 | 0) >> 2] = 1065353216;
 }
 
 function $281() {
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $0_1 = 0;
  $0_1 = global$1 + 66744 | 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  i64toi32_i32$1 = i64toi32_i32$1 + 12 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 32 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 44 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 40 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 52 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 60 | 0) >> 2] = 1065353216;
 }
 
 function $282($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $4_1 = 0;
  $1_1 = global$1 + 22936 | 0;
  $4_1 = $1_1;
  $1_1 = HEAPU16[$1_1 >> 1] | 0;
  HEAP16[$4_1 >> 1] = $1_1 + 1 | 0;
  HEAP16[$0_1 >> 1] = $1_1;
  return $0_1 | 0;
 }
 
 function $283($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $4_1 = 0;
  $1_1 = global$1 + 22938 | 0;
  $4_1 = $1_1;
  $1_1 = HEAPU16[$1_1 >> 1] | 0;
  HEAP16[$4_1 >> 1] = $1_1 + 1 | 0;
  HEAP16[$0_1 >> 1] = $1_1;
  return $0_1 | 0;
 }
 
 function $284() {
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $0_1 = 0;
  $0_1 = global$1 + 66808 | 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  i64toi32_i32$1 = i64toi32_i32$1 + 12 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 32 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 44 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 40 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 52 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 60 | 0) >> 2] = 1065353216;
 }
 
 function $285($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, $11_1 = 0, $5_1 = 0, $32_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $11_1 = Math_imul($2_1, $1_1);
  $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  $1_1 = Math_imul($11_1, $2_1);
  $4_1 = $2031((($1_1 | 0) > (-1 | 0) ? $1_1 : -1) | 0) | 0;
  i64toi32_i32$0 = 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  label$1 : {
   if (($1_1 | 0) < (1 | 0)) {
    break label$1
   }
   $5_1 = $4_1 + $1_1 | 0;
   $1_1 = $4_1;
   label$2 : while (1) {
    $32_1 = $2173($1_1 | 0, $3_1 | 0, $2_1 | 0) | 0;
    $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    $1_1 = $32_1 + $2_1 | 0;
    if ($1_1 >>> 0 < $5_1 >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $286() {
  var $0_1 = 0, $1_1 = 0;
  $0_1 = global$0 - 16 | 0;
  global$0 = $0_1;
  fimport$54(1 | 0, $0_1 + 12 | 0 | 0);
  $385(0 | 0);
  $417(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0);
  $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  global$0 = $0_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $287($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   if (($2_1 | 0) == ($1_1 | 0)) {
    break label$1
   }
   label$2 : {
    if (($2_1 | 0) < (0 | 0)) {
     break label$2
    }
    if (!(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1) | 0)) {
     break label$2
    }
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1);
   }
   HEAP32[($0_1 + 24 | 0) >> 2] = $1_1;
  }
 }
 
 function $288($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (!(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1) | 0)) {
    break label$1
   }
   label$2 : {
    if (!(HEAPU8[($0_1 + 52 | 0) >> 0] | 0)) {
     break label$2
    }
    if (!$1_1) {
     break label$1
    }
   }
   fimport$34(3553 | 0);
   HEAP8[($0_1 + 52 | 0) >> 0] = 1;
  }
 }
 
 function $289($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[($0_1 + 32 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 28 | 0) >> 2] = $1_1;
 }
 
 function $290($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!($392() | 0)) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1);
   return;
  }
  $549($0_1 | 0, 0 | 0);
 }
 
 function $291($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $410(HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0);
  $423(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0, HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0);
  label$1 : {
   if (!(HEAPU8[($1_1 + 33 | 0) >> 0] | 0)) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, 0);
  }
  $411(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0, HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[$1_1 >> 2] | 0 | 0);
  $413(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0, HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0);
  $414(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0, HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0, $1_1 + 12 | 0 | 0);
  $415(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0, HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[($1_1 + 28 | 0) >> 2])));
  $416(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0, HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0, HEAPU8[($1_1 + 32 | 0) >> 0] | 0 | 0, HEAPU8[($1_1 + 33 | 0) >> 0] | 0 | 0);
 }
 
 function $292($0_1) {
  $0_1 = $0_1 | 0;
  $435(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0, HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0);
 }
 
 function $293($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   if (!(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1) | 0)) {
    break label$1
   }
   $418(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0);
   FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1);
   HEAP32[($1_1 + 12 | 0) >> 2] = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1) | 0;
   fimport$55(1 | 0, $1_1 + 12 | 0 | 0);
   label$2 : {
    $2_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (($2_1 | 0) == (-1 | 0)) {
     break label$2
    }
    label$3 : {
     if (($2_1 | 0) < (0 | 0)) {
      break label$3
     }
     if (!(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1) | 0)) {
      break label$3
     }
     FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1);
    }
    HEAP32[($0_1 + 24 | 0) >> 2] = -1;
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0 | 0]($0_1, 0);
  }
  global$0 = $1_1 + 16 | 0;
 }
 
 function $294($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $1_1 = 0, i64toi32_i32$2 = 0, $11_1 = 0, $16_1 = 0;
  $1_1 = global$1;
  HEAP32[$0_1 >> 2] = ($1_1 + 22940 | 0) + 8 | 0;
  $1_1 = $1_1 + 66976 | 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[($1_1 + 60 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($1_1 + 64 | 0) >> 2] | 0;
  $11_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $11_1;
  HEAP32[($0_1 + 8 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1 + 68 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $16_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + 12 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $16_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 20 | 0) >> 2] = HEAP32[($1_1 + 76 | 0) >> 2] | 0;
  HEAP32[($0_1 + 64 | 0) >> 2] = 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 56 | 0) >> 2] = 0;
  HEAP32[($0_1 + 60 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 24 | 0) >> 2] = -1;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = 0;
  HEAP32[($0_1 + 32 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 36 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 44 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP16[($0_1 + 52 | 0) >> 1] = 0;
  return $0_1 | 0;
 }
 
 function $295($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  HEAP32[$0_1 >> 2] = (global$1 + 22940 | 0) + 8 | 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
   $2_1 = HEAP32[($0_1 + 60 | 0) >> 2] | 0;
   if (($1_1 | 0) == ($2_1 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $326(HEAP32[$1_1 >> 2] | 0 | 0, $0_1 | 0);
    $1_1 = $1_1 + 4 | 0;
    if (($1_1 | 0) != ($2_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
   $1_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
  }
  label$3 : {
   if (!$1_1) {
    break label$3
   }
   HEAP32[($0_1 + 60 | 0) >> 2] = $1_1;
   $2032($1_1 | 0);
  }
  return $0_1 | 0;
 }
 
 function $296($0_1) {
  $0_1 = $0_1 | 0;
  abort();
 }
 
 function $297($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $4_1 = 0, $2_1 = 0, $6_1 = 0, $5_1 = 0, $7_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      $2_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
      $3_1 = HEAP32[($0_1 + 60 | 0) >> 2] | 0;
      if (($2_1 | 0) == ($3_1 | 0)) {
       break label$4
      }
      $4_1 = $2_1;
      label$5 : while (1) {
       if ((HEAP32[$4_1 >> 2] | 0 | 0) == ($1_1 | 0)) {
        break label$3
       }
       $4_1 = $4_1 + 4 | 0;
       if (($4_1 | 0) != ($3_1 | 0)) {
        continue label$5
       }
       break label$5;
      };
     }
     label$6 : {
      $4_1 = HEAP32[($0_1 + 64 | 0) >> 2] | 0;
      if (($3_1 | 0) == ($4_1 | 0)) {
       break label$6
      }
      HEAP32[$3_1 >> 2] = $1_1;
      HEAP32[($0_1 + 60 | 0) >> 2] = $3_1 + 4 | 0;
      return;
     }
     $5_1 = $3_1 - $2_1 | 0;
     $6_1 = $5_1 >> 2 | 0;
     $3_1 = $6_1 + 1 | 0;
     if ($3_1 >>> 0 >= 1073741824 >>> 0) {
      break label$2
     }
     label$7 : {
      label$8 : {
       $4_1 = $4_1 - $2_1 | 0;
       $7_1 = $4_1 >> 1 | 0;
       $3_1 = ($4_1 >> 2 | 0) >>> 0 < 536870911 >>> 0 ? ($7_1 >>> 0 < $3_1 >>> 0 ? $3_1 : $7_1) : 1073741823;
       if ($3_1) {
        break label$8
       }
       $4_1 = 0;
       break label$7;
      }
      if ($3_1 >>> 0 >= 1073741824 >>> 0) {
       break label$1
      }
      $4_1 = $2030($3_1 << 2 | 0 | 0) | 0;
     }
     $6_1 = $4_1 + ($6_1 << 2 | 0) | 0;
     HEAP32[$6_1 >> 2] = $1_1;
     $3_1 = $4_1 + ($3_1 << 2 | 0) | 0;
     $1_1 = $6_1 + 4 | 0;
     label$9 : {
      if (($5_1 | 0) < (1 | 0)) {
       break label$9
      }
      $2173($4_1 | 0, $2_1 | 0, $5_1 | 0) | 0;
     }
     HEAP32[($0_1 + 64 | 0) >> 2] = $3_1;
     HEAP32[($0_1 + 60 | 0) >> 2] = $1_1;
     HEAP32[($0_1 + 56 | 0) >> 2] = $4_1;
     if (!$2_1) {
      break label$3
     }
     $2032($2_1 | 0);
    }
    return;
   }
   $2097($0_1 + 56 | 0 | 0);
   abort();
  }
  $3(global$1 + 3485 | 0 | 0);
  abort();
 }
 
 function $298($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 60 | 0) >> 2] | 0;
   $3_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
   if (($2_1 | 0) == ($3_1 | 0)) {
    break label$1
   }
   $4_1 = 0;
   label$2 : while (1) {
    label$3 : {
     $5_1 = $3_1 + ($4_1 << 2 | 0) | 0;
     if ((HEAP32[$5_1 >> 2] | 0 | 0) != ($1_1 | 0)) {
      break label$3
     }
     label$4 : {
      $6_1 = $5_1 + 4 | 0;
      $2_1 = $2_1 - $6_1 | 0;
      if (!$2_1) {
       break label$4
      }
      $2175($5_1 | 0, $6_1 | 0, $2_1 | 0) | 0;
      $3_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
     }
     $2_1 = $5_1 + $2_1 | 0;
     HEAP32[($0_1 + 60 | 0) >> 2] = $2_1;
    }
    $4_1 = $4_1 + 1 | 0;
    if ($4_1 >>> 0 < (($2_1 - $3_1 | 0) >> 2 | 0) >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $299($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $9_1 = 0, $19_1 = 0;
  $1_1 = (global$1 + 66976 | 0) + Math_imul($1_1, 20) | 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  $9_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = $9_1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
  i64toi32_i32$2 = $1_1 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $19_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + 12 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $19_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function $300($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1);
 }
 
 function $301($0_1) {
  $0_1 = $0_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1);
 }
 
 function $302() {
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $0_1 = 0, $1_1 = 0, $2_1 = 0;
  $0_1 = global$1;
  $1_1 = $0_1 + 66872 | 0;
  i64toi32_i32$1 = $1_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  $2_1 = $0_1 + 66936 | 0;
  i64toi32_i32$1 = $2_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = 10497;
  i64toi32_i32$0 = 10497;
  HEAP32[i64toi32_i32$1 >> 2] = 10497;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP16[(i64toi32_i32$1 + 32 | 0) >> 1] = 1;
  HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = 1065353216;
  $0_1 = $0_1 + 66976 | 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 6403;
  HEAP32[i64toi32_i32$1 >> 2] = 33321;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = 5121;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 33323;
  HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = 1;
  HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 32992;
  HEAP32[(i64toi32_i32$1 + 40 | 0) >> 2] = 32849;
  HEAP32[(i64toi32_i32$1 + 44 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 6403;
  HEAP32[(i64toi32_i32$1 + 80 | 0) >> 2] = 33325;
  HEAP32[(i64toi32_i32$1 + 84 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 6408;
  HEAP32[(i64toi32_i32$1 + 120 | 0) >> 2] = 34842;
  HEAP32[(i64toi32_i32$1 + 124 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 33319;
  HEAP32[(i64toi32_i32$1 + 160 | 0) >> 2] = 33328;
  HEAP32[(i64toi32_i32$1 + 164 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 6408;
  HEAP32[(i64toi32_i32$1 + 200 | 0) >> 2] = 34836;
  HEAP32[(i64toi32_i32$1 + 204 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 6402;
  HEAP32[(i64toi32_i32$1 + 240 | 0) >> 2] = 36012;
  HEAP32[(i64toi32_i32$1 + 244 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1_1 + 12 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($1_1 + 20 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $1_1 + 32 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1_1 + 44 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($1_1 + 40 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $1_1 + 52 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($1_1 + 60 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $2_1 + 20 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 256 | 0) >> 2] = 1;
  i64toi32_i32$1 = $0_1 + 24 | 0;
  i64toi32_i32$0 = 5121;
  HEAP32[i64toi32_i32$1 >> 2] = 33319;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 32 | 0;
  i64toi32_i32$0 = 2;
  HEAP32[i64toi32_i32$1 >> 2] = 2;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 48 | 0;
  i64toi32_i32$0 = 3;
  HEAP32[i64toi32_i32$1 >> 2] = 5121;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 56 | 0;
  i64toi32_i32$0 = 32856;
  HEAP32[i64toi32_i32$1 >> 2] = 3;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 64 | 0;
  i64toi32_i32$0 = 5121;
  HEAP32[i64toi32_i32$1 >> 2] = 6408;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 72 | 0;
  i64toi32_i32$0 = 4;
  HEAP32[i64toi32_i32$1 >> 2] = 4;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 88 | 0;
  i64toi32_i32$0 = 2;
  HEAP32[i64toi32_i32$1 >> 2] = 5121;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 96 | 0;
  i64toi32_i32$0 = 34843;
  HEAP32[i64toi32_i32$1 >> 2] = 1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 104 | 0;
  i64toi32_i32$0 = 5121;
  HEAP32[i64toi32_i32$1 >> 2] = 6407;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 112 | 0;
  i64toi32_i32$0 = 3;
  HEAP32[i64toi32_i32$1 >> 2] = 6;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 128 | 0;
  i64toi32_i32$0 = 8;
  HEAP32[i64toi32_i32$1 >> 2] = 5121;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 136 | 0;
  i64toi32_i32$0 = 33326;
  HEAP32[i64toi32_i32$1 >> 2] = 4;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 144 | 0;
  i64toi32_i32$0 = 5126;
  HEAP32[i64toi32_i32$1 >> 2] = 6403;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 152 | 0;
  i64toi32_i32$0 = 1;
  HEAP32[i64toi32_i32$1 >> 2] = 4;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 168 | 0;
  i64toi32_i32$0 = 8;
  HEAP32[i64toi32_i32$1 >> 2] = 5126;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 176 | 0;
  i64toi32_i32$0 = 34837;
  HEAP32[i64toi32_i32$1 >> 2] = 2;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 184 | 0;
  i64toi32_i32$0 = 5126;
  HEAP32[i64toi32_i32$1 >> 2] = 6407;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 192 | 0;
  i64toi32_i32$0 = 3;
  HEAP32[i64toi32_i32$1 >> 2] = 12;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 208 | 0;
  i64toi32_i32$0 = 16;
  HEAP32[i64toi32_i32$1 >> 2] = 5126;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 216 | 0;
  i64toi32_i32$0 = 35056;
  HEAP32[i64toi32_i32$1 >> 2] = 4;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 224 | 0;
  i64toi32_i32$0 = 34042;
  HEAP32[i64toi32_i32$1 >> 2] = 34041;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 232 | 0;
  i64toi32_i32$0 = 2;
  HEAP32[i64toi32_i32$1 >> 2] = 4;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 248 | 0;
  i64toi32_i32$0 = 4;
  HEAP32[i64toi32_i32$1 >> 2] = 5126;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function $303($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $6_1 = Math_fround(0), $2_1 = 0, $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $59_1 = 0, $64_1 = 0, $68_1 = 0;
  $1_1 = global$0 - 64 | 0;
  global$0 = $1_1;
  label$1 : {
   if (!(HEAPU8[($0_1 + 788 | 0) >> 0] | 0)) {
    break label$1
   }
   $564($0_1 | 0);
   $3_1 = Math_fround(HEAPF32[($0_1 + 128 | 0) >> 2]);
   $4_1 = Math_fround(HEAPF32[($0_1 + 132 | 0) >> 2]);
   $5_1 = Math_fround(HEAPF32[($0_1 + 136 | 0) >> 2]);
   $6_1 = Math_fround(HEAPF32[($0_1 + 740 | 0) >> 2]);
   HEAPF32[($1_1 + 56 | 0) >> 2] = Math_fround($5_1 - $6_1);
   HEAPF32[($1_1 + 52 | 0) >> 2] = Math_fround($4_1 - $6_1);
   HEAPF32[($1_1 + 48 | 0) >> 2] = Math_fround($3_1 - $6_1);
   HEAPF32[($1_1 + 40 | 0) >> 2] = Math_fround($6_1 + $5_1);
   HEAPF32[($1_1 + 36 | 0) >> 2] = Math_fround($6_1 + $4_1);
   HEAPF32[($1_1 + 32 | 0) >> 2] = Math_fround($6_1 + $3_1);
   $2_1 = $528($1_1 | 0, $1_1 + 48 | 0 | 0, $1_1 + 32 | 0 | 0) | 0;
   i64toi32_i32$2 = $2_1 + 20 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $59_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1 + 780 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $59_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $2_1 + 12 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $64_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1 + 772 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $64_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
   $68_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1 + 764 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $68_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   HEAP8[($0_1 + 788 | 0) >> 0] = 0;
  }
  global$0 = $1_1 + 64 | 0;
  return $0_1 + 760 | 0 | 0;
 }
 
 function $304($0_1) {
  $0_1 = $0_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($0_1);
  $489($431(4 | 0) | 0 | 0, $0_1 + 372 | 0 | 0);
 }
 
 function $305($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $158($0_1 + 212 | 0 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $306($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!(HEAPU8[((HEAP32[($0_1 + 56 | 0) >> 2] | 0) + 60 | 0) >> 0] | 0)) {
    break label$1
   }
   HEAP8[($0_1 + 208 | 0) >> 0] = 1;
  }
 }
 
 function $307($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $2_1 = 0;
  $1_1 = global$0 - 256 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (HEAPU8[($0_1 + 208 | 0) >> 0] | 0) {
      break label$3
     }
     $2_1 = HEAPU8[($0_1 + 209 | 0) >> 0] | 0;
     $308($0_1 | 0);
     $309($0_1 | 0);
     if ($2_1) {
      break label$2
     }
     break label$1;
    }
    $308($0_1 | 0);
    $309($0_1 | 0);
   }
   $3_1 = Math_fround(HEAPF32[($0_1 + 376 | 0) >> 2]);
   $4_1 = Math_fround(HEAPF32[($0_1 + 380 | 0) >> 2]);
   $5_1 = Math_fround(HEAPF32[($0_1 + 384 | 0) >> 2]);
   HEAPF64[($1_1 + 128 | 0) >> 3] = +Math_fround(HEAPF32[($0_1 + 372 | 0) >> 2]);
   HEAPF64[($1_1 + 152 | 0) >> 3] = +$5_1;
   HEAPF64[($1_1 + 144 | 0) >> 3] = +$4_1;
   HEAPF64[($1_1 + 136 | 0) >> 3] = +$3_1;
   $3_1 = Math_fround(HEAPF32[($0_1 + 388 | 0) >> 2]);
   $4_1 = Math_fround(HEAPF32[($0_1 + 392 | 0) >> 2]);
   $5_1 = Math_fround(HEAPF32[($0_1 + 396 | 0) >> 2]);
   HEAPF64[($1_1 + 184 | 0) >> 3] = +Math_fround(HEAPF32[($0_1 + 400 | 0) >> 2]);
   HEAPF64[($1_1 + 176 | 0) >> 3] = +$5_1;
   HEAPF64[($1_1 + 168 | 0) >> 3] = +$4_1;
   HEAPF64[($1_1 + 160 | 0) >> 3] = +$3_1;
   $3_1 = Math_fround(HEAPF32[($0_1 + 404 | 0) >> 2]);
   $4_1 = Math_fround(HEAPF32[($0_1 + 408 | 0) >> 2]);
   $5_1 = Math_fround(HEAPF32[($0_1 + 412 | 0) >> 2]);
   HEAPF64[($1_1 + 216 | 0) >> 3] = +Math_fround(HEAPF32[($0_1 + 416 | 0) >> 2]);
   HEAPF64[($1_1 + 208 | 0) >> 3] = +$5_1;
   HEAPF64[($1_1 + 200 | 0) >> 3] = +$4_1;
   HEAPF64[($1_1 + 192 | 0) >> 3] = +$3_1;
   $3_1 = Math_fround(HEAPF32[($0_1 + 420 | 0) >> 2]);
   $4_1 = Math_fround(HEAPF32[($0_1 + 424 | 0) >> 2]);
   $5_1 = Math_fround(HEAPF32[($0_1 + 428 | 0) >> 2]);
   HEAPF64[($1_1 + 248 | 0) >> 3] = +Math_fround(HEAPF32[($0_1 + 432 | 0) >> 2]);
   HEAPF64[($1_1 + 240 | 0) >> 3] = +$5_1;
   HEAPF64[($1_1 + 232 | 0) >> 3] = +$4_1;
   HEAPF64[($1_1 + 224 | 0) >> 3] = +$3_1;
   $310($1_1 | 0, $0_1 + 568 | 0 | 0, $1_1 + 128 | 0 | 0);
   $155($0_1 + 212 | 0 | 0, $1_1 | 0);
  }
  global$0 = $1_1 + 256 | 0;
 }
 
 function $308($0_1) {
  $0_1 = $0_1 | 0;
  var $8_1 = Math_fround(0), $7_1 = Math_fround(0), $10_1 = Math_fround(0), $12_1 = Math_fround(0), $14_1 = Math_fround(0), $9_1 = Math_fround(0), $13_1 = Math_fround(0), $11_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $2_1 = 0, $1_1 = 0, $5_1 = 0, $3_1 = 0, $4_1 = 0, $6_1 = 0, $193_1 = Math_fround(0), $304_1 = Math_fround(0), $307_1 = Math_fround(0);
  label$1 : {
   if (!(HEAPU8[($0_1 + 208 | 0) >> 0] | 0)) {
    break label$1
   }
   $564($0_1 | 0);
   $1_1 = $0_1 + 716 | 0;
   $2_1 = $0_1 + 152 | 0;
   $7_1 = Math_fround(HEAPF32[$2_1 >> 2]);
   $8_1 = Math_fround(HEAPF32[($0_1 + 140 | 0) >> 2]);
   $3_1 = $0_1 + 144 | 0;
   $9_1 = Math_fround(HEAPF32[$3_1 >> 2]);
   $10_1 = Math_fround($9_1 * Math_fround(0.0));
   $11_1 = Math_fround($8_1 - $10_1);
   $4_1 = $0_1 + 148 | 0;
   $12_1 = Math_fround(HEAPF32[$4_1 >> 2]);
   $13_1 = Math_fround(Math_fround($12_1 * Math_fround(0.0)) + Math_fround($8_1 * Math_fround(-0.0)));
   $10_1 = Math_fround($10_1 - $12_1);
   $14_1 = Math_fround(Math_fround($7_1 * $11_1) + Math_fround(Math_fround($8_1 * $13_1) - Math_fround($9_1 * $10_1)));
   HEAPF32[$1_1 >> 2] = Math_fround(Math_fround($14_1 + $14_1) + Math_fround(0.0));
   $5_1 = $0_1 + 712 | 0;
   $8_1 = Math_fround(Math_fround($7_1 * $13_1) + Math_fround(Math_fround($12_1 * $10_1) - Math_fround($8_1 * $11_1)));
   HEAPF32[$5_1 >> 2] = Math_fround(Math_fround($8_1 + $8_1) + Math_fround(1.0));
   $8_1 = Math_fround(Math_fround($10_1 * $7_1) + Math_fround(Math_fround($9_1 * $11_1) - Math_fround($12_1 * $13_1)));
   HEAPF32[($0_1 + 708 | 0) >> 2] = Math_fround(Math_fround($8_1 + $8_1) + Math_fround(0.0));
   $564($0_1 | 0);
   $6_1 = $0_1 + 724 | 0;
   $7_1 = Math_fround(HEAPF32[$2_1 >> 2]);
   $8_1 = Math_fround(HEAPF32[($0_1 + 140 | 0) >> 2]);
   $9_1 = Math_fround(HEAPF32[$4_1 >> 2]);
   $13_1 = Math_fround($9_1 * Math_fround(-0.0));
   $11_1 = Math_fround($8_1 + $13_1);
   $12_1 = Math_fround(HEAPF32[$3_1 >> 2]);
   $13_1 = Math_fround(Math_fround(-$12_1) - $13_1);
   $10_1 = Math_fround(Math_fround($8_1 * Math_fround(-0.0)) + Math_fround($12_1 * Math_fround(0.0)));
   $14_1 = Math_fround(Math_fround($7_1 * $11_1) + Math_fround(Math_fround($9_1 * $13_1) - Math_fround($8_1 * $10_1)));
   $14_1 = Math_fround($14_1 + $14_1);
   HEAPF32[$6_1 >> 2] = $14_1;
   $9_1 = Math_fround(Math_fround($7_1 * $13_1) + Math_fround(Math_fround($12_1 * $10_1) - Math_fround($9_1 * $11_1)));
   $9_1 = Math_fround($9_1 + $9_1);
   HEAPF32[($0_1 + 720 | 0) >> 2] = $9_1;
   $2_1 = $0_1 + 728 | 0;
   $8_1 = Math_fround(Math_fround($7_1 * $10_1) + Math_fround(Math_fround($8_1 * $11_1) - Math_fround($12_1 * $13_1)));
   $8_1 = Math_fround(Math_fround($8_1 + $8_1) + Math_fround(-1.0));
   HEAPF32[$2_1 >> 2] = $8_1;
   $12_1 = Math_fround(HEAPF32[$5_1 >> 2]);
   $7_1 = Math_fround(HEAPF32[($0_1 + 708 | 0) >> 2]);
   HEAPF32[($0_1 + 704 | 0) >> 2] = Math_fround(Math_fround($12_1 * $9_1) - Math_fround($14_1 * $7_1));
   $193_1 = Math_fround($8_1 * $7_1);
   $7_1 = Math_fround(HEAPF32[$1_1 >> 2]);
   HEAPF32[($0_1 + 700 | 0) >> 2] = Math_fround($193_1 - Math_fround($7_1 * $9_1));
   HEAPF32[($0_1 + 696 | 0) >> 2] = Math_fround(Math_fround($7_1 * $14_1) - Math_fround($12_1 * $8_1));
   $564($0_1 | 0);
   $564($0_1 | 0);
   HEAP32[($0_1 + 432 | 0) >> 2] = 1065353216;
   HEAP32[($0_1 + 416 | 0) >> 2] = 0;
   HEAP32[($0_1 + 400 | 0) >> 2] = 0;
   HEAP32[($0_1 + 384 | 0) >> 2] = 0;
   $9_1 = Math_fround(HEAPF32[($0_1 + 136 | 0) >> 2]);
   $8_1 = Math_fround(Math_fround($9_1 + Math_fround(HEAPF32[$2_1 >> 2])) - $9_1);
   $11_1 = Math_fround(HEAPF32[($0_1 + 128 | 0) >> 2]);
   $7_1 = Math_fround(Math_fround($11_1 + Math_fround(HEAPF32[($0_1 + 720 | 0) >> 2])) - $11_1);
   $13_1 = Math_fround(HEAPF32[($0_1 + 132 | 0) >> 2]);
   $12_1 = Math_fround(Math_fround($13_1 + Math_fround(HEAPF32[$6_1 >> 2])) - $13_1);
   $10_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($7_1 * $7_1) + Math_fround($12_1 * $12_1)) + Math_fround($8_1 * $8_1)))));
   $8_1 = Math_fround($8_1 * $10_1);
   HEAPF32[($0_1 + 412 | 0) >> 2] = Math_fround(-$8_1);
   $12_1 = Math_fround($12_1 * $10_1);
   HEAPF32[($0_1 + 396 | 0) >> 2] = Math_fround(-$12_1);
   $7_1 = Math_fround($7_1 * $10_1);
   HEAPF32[($0_1 + 380 | 0) >> 2] = Math_fround(-$7_1);
   HEAPF32[($0_1 + 428 | 0) >> 2] = Math_fround(Math_fround($9_1 * $8_1) + Math_fround(Math_fround($11_1 * $7_1) + Math_fround($13_1 * $12_1)));
   $14_1 = Math_fround(HEAPF32[$5_1 >> 2]);
   $15_1 = Math_fround(HEAPF32[($0_1 + 708 | 0) >> 2]);
   $10_1 = Math_fround(Math_fround($14_1 * $7_1) - Math_fround($15_1 * $12_1));
   $304_1 = $10_1;
   $307_1 = Math_fround($10_1 * $10_1);
   $10_1 = Math_fround(HEAPF32[$1_1 >> 2]);
   $16_1 = Math_fround(Math_fround($10_1 * $12_1) - Math_fround($14_1 * $8_1));
   $14_1 = Math_fround(Math_fround($15_1 * $8_1) - Math_fround($10_1 * $7_1));
   $15_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround($307_1 + Math_fround(Math_fround($16_1 * $16_1) + Math_fround($14_1 * $14_1))))));
   $10_1 = Math_fround($304_1 * $15_1);
   HEAPF32[($0_1 + 404 | 0) >> 2] = $10_1;
   $14_1 = Math_fround($14_1 * $15_1);
   HEAPF32[($0_1 + 388 | 0) >> 2] = $14_1;
   $16_1 = Math_fround($16_1 * $15_1);
   HEAPF32[($0_1 + 372 | 0) >> 2] = $16_1;
   $15_1 = Math_fround(Math_fround($12_1 * $16_1) - Math_fround($7_1 * $14_1));
   HEAPF32[($0_1 + 408 | 0) >> 2] = $15_1;
   $7_1 = Math_fround(Math_fround($7_1 * $10_1) - Math_fround($8_1 * $16_1));
   HEAPF32[($0_1 + 392 | 0) >> 2] = $7_1;
   $8_1 = Math_fround(Math_fround($8_1 * $14_1) - Math_fround($12_1 * $10_1));
   HEAPF32[($0_1 + 376 | 0) >> 2] = $8_1;
   HEAPF32[($0_1 + 420 | 0) >> 2] = Math_fround(-Math_fround(Math_fround($9_1 * $10_1) + Math_fround(Math_fround($11_1 * $16_1) + Math_fround($13_1 * $14_1))));
   HEAPF32[($0_1 + 424 | 0) >> 2] = Math_fround(-Math_fround(Math_fround($9_1 * $15_1) + Math_fround(Math_fround($11_1 * $8_1) + Math_fround($13_1 * $7_1))));
   HEAP8[($0_1 + 208 | 0) >> 0] = 0;
  }
 }
 
 function $309($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $1_1 = 0, $11_1 = Math_fround(0), i64toi32_i32$2 = 0, $13_1 = Math_fround(0), $18_1 = 0.0, $14_1 = Math_fround(0), $19_1 = 0.0, $12_1 = Math_fround(0), $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $15_1 = Math_fround(0), $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $20_1 = 0.0, $10_1 = 0, $21_1 = 0.0, $22_1 = 0.0, $16_1 = Math_fround(0), $17_1 = Math_fround(0), $224_1 = Math_fround(0), $295_1 = 0, $299_1 = 0, $303_1 = 0, $308_1 = 0, $312_1 = 0, $316_1 = 0;
  label$1 : {
   if (!(HEAPU8[($0_1 + 209 | 0) >> 0] | 0)) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if (HEAP32[($0_1 + 732 | 0) >> 2] | 0) {
      break label$3
     }
     $11_1 = Math_fround(HEAPF32[($0_1 + 748 | 0) >> 2]);
     $12_1 = Math_fround(HEAPF32[($0_1 + 736 | 0) >> 2]);
     $13_1 = Math_fround(HEAPF32[($0_1 + 740 | 0) >> 2]);
     $14_1 = Math_fround(HEAPF32[($0_1 + 744 | 0) >> 2]);
     $1_1 = $0_1 + 576 | 0;
     i64toi32_i32$1 = $1_1;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $2_1 = $0_1 + 584 | 0;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $3_1 = $0_1 + 592 | 0;
     i64toi32_i32$1 = $3_1;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $4_1 = $0_1 + 600 | 0;
     i64toi32_i32$1 = $4_1;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $5_1 = $0_1 + 616 | 0;
     i64toi32_i32$1 = $5_1;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $6_1 = $0_1 + 624 | 0;
     i64toi32_i32$1 = $6_1;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $7_1 = $0_1 + 632 | 0;
     i64toi32_i32$1 = $7_1;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $8_1 = $0_1 + 640 | 0;
     i64toi32_i32$1 = $8_1;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $9_1 = $0_1 + 664 | 0;
     i64toi32_i32$1 = $9_1;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $0_1 + 656 | 0;
     i64toi32_i32$0 = -1074790400;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $18_1 = +$14_1;
     $19_1 = +$13_1;
     $20_1 = $18_1 / ($19_1 - $18_1);
     HEAPF64[($0_1 + 648 | 0) >> 3] = $20_1;
     $10_1 = $0_1 + 672 | 0;
     i64toi32_i32$1 = $10_1;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $0_1 + 688 | 0;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $21_1 = +$604(+(+$11_1 * .5));
     $22_1 = 1.0 / $21_1;
     HEAPF64[($0_1 + 608 | 0) >> 3] = $22_1;
     $18_1 = $19_1 * -$18_1 / ($18_1 - $19_1);
     HEAPF64[($0_1 + 680 | 0) >> 3] = $18_1;
     $19_1 = 1.0 / ($21_1 * +$12_1);
     HEAPF64[($0_1 + 568 | 0) >> 3] = $19_1;
     HEAPF32[($0_1 + 436 | 0) >> 2] = Math_fround($19_1);
     HEAPF32[($0_1 + 440 | 0) >> 2] = Math_fround(+HEAPF64[$1_1 >> 3]);
     $14_1 = Math_fround($22_1);
     HEAPF32[($0_1 + 456 | 0) >> 2] = $14_1;
     $15_1 = Math_fround($20_1);
     HEAPF32[($0_1 + 476 | 0) >> 2] = $15_1;
     $1_1 = -1082130432;
     HEAP32[($0_1 + 480 | 0) >> 2] = -1082130432;
     HEAPF32[($0_1 + 444 | 0) >> 2] = Math_fround(+HEAPF64[$2_1 >> 3]);
     HEAPF32[($0_1 + 448 | 0) >> 2] = Math_fround(+HEAPF64[$3_1 >> 3]);
     HEAPF32[($0_1 + 452 | 0) >> 2] = Math_fround(+HEAPF64[$4_1 >> 3]);
     HEAPF32[($0_1 + 460 | 0) >> 2] = Math_fround(+HEAPF64[$5_1 >> 3]);
     HEAPF32[($0_1 + 464 | 0) >> 2] = Math_fround(+HEAPF64[$6_1 >> 3]);
     HEAPF32[($0_1 + 468 | 0) >> 2] = Math_fround(+HEAPF64[$7_1 >> 3]);
     HEAPF32[($0_1 + 472 | 0) >> 2] = Math_fround(+HEAPF64[$8_1 >> 3]);
     HEAP32[($0_1 + 496 | 0) >> 2] = 0;
     HEAPF32[($0_1 + 492 | 0) >> 2] = Math_fround($18_1);
     HEAPF32[($0_1 + 484 | 0) >> 2] = Math_fround(+HEAPF64[$9_1 >> 3]);
     HEAPF32[($0_1 + 488 | 0) >> 2] = Math_fround(+HEAPF64[$10_1 >> 3]);
     i64toi32_i32$1 = $0_1 + 504 | 0;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $0_1 + 512 | 0;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $0_1 + 524 | 0;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $0_1 + 532 | 0;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     HEAP32[($0_1 + 560 | 0) >> 2] = 0;
     HEAPF32[($0_1 + 556 | 0) >> 2] = Math_fround(-$13_1);
     i64toi32_i32$1 = $0_1 + 548 | 0;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $0_1 + 540 | 0;
     i64toi32_i32$0 = -1082130432;
     HEAP32[i64toi32_i32$1 >> 2] = -1082130432;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $11_1 = Math_fround($603(Math_fround(Math_fround($11_1 * Math_fround(.5)))));
     HEAPF32[($0_1 + 520 | 0) >> 2] = Math_fround(Math_fround(1.0) / $11_1);
     HEAPF32[($0_1 + 500 | 0) >> 2] = Math_fround(Math_fround(1.0) / Math_fround($12_1 * $11_1));
     break label$2;
    }
    i64toi32_i32$1 = $0_1 + 448 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $0_1 + 440 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($0_1 + 496 | 0) >> 2] = 1065353216;
    $2_1 = $0_1 + 492 | 0;
    $11_1 = Math_fround(HEAPF32[($0_1 + 740 | 0) >> 2]);
    $224_1 = Math_fround(-$11_1);
    $11_1 = Math_fround(Math_fround(HEAPF32[($0_1 + 744 | 0) >> 2]) - $11_1);
    HEAPF32[$2_1 >> 2] = Math_fround($224_1 / $11_1);
    $1_1 = 0;
    HEAP32[($0_1 + 480 | 0) >> 2] = 0;
    $3_1 = $0_1 + 476 | 0;
    $15_1 = Math_fround(Math_fround(-1.0) / $11_1);
    HEAPF32[$3_1 >> 2] = $15_1;
    $11_1 = Math_fround(HEAPF32[($0_1 + 752 | 0) >> 2]);
    $12_1 = Math_fround($11_1 + $11_1);
    $14_1 = Math_fround(Math_fround(2.0) / $12_1);
    HEAPF32[($0_1 + 456 | 0) >> 2] = $14_1;
    $4_1 = $0_1 + 436 | 0;
    $13_1 = Math_fround(HEAPF32[($0_1 + 736 | 0) >> 2]);
    $16_1 = Math_fround($11_1 * $13_1);
    $13_1 = Math_fround($13_1 * Math_fround(-$11_1));
    $17_1 = Math_fround($16_1 - $13_1);
    HEAPF32[$4_1 >> 2] = Math_fround(Math_fround(2.0) / $17_1);
    HEAPF32[($0_1 + 488 | 0) >> 2] = Math_fround(Math_fround(-Math_fround($11_1 - $11_1)) / $12_1);
    $5_1 = $0_1 + 484 | 0;
    HEAPF32[$5_1 >> 2] = Math_fround(Math_fround(-Math_fround($13_1 + $16_1)) / $17_1);
    i64toi32_i32$1 = $0_1 + 460 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $0_1 + 468 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $0_1 + 532 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $0_1 + 524 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $0_1 + 444 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $295_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1 + 508 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $295_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $299_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1 + 556 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $299_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $3_1;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $303_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1 + 540 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $303_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $0_1 + 452 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $308_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1 + 516 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $308_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $312_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1 + 500 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $312_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $316_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1 + 548 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $316_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   }
   label$4 : {
    if (!(HEAPU8[($0_1 + 756 | 0) >> 0] | 0)) {
     break label$4
    }
    HEAP32[($0_1 + 480 | 0) >> 2] = $1_1;
    HEAPF32[($0_1 + 476 | 0) >> 2] = $15_1;
    HEAPF32[($0_1 + 456 | 0) >> 2] = Math_fround(-$14_1);
    $1_1 = $0_1 + 464 | 0;
    HEAPF32[$1_1 >> 2] = Math_fround(-Math_fround(HEAPF32[$1_1 >> 2]));
    $1_1 = $0_1 + 460 | 0;
    HEAPF32[$1_1 >> 2] = Math_fround(-Math_fround(HEAPF32[$1_1 >> 2]));
    $1_1 = $0_1 + 452 | 0;
    HEAPF32[$1_1 >> 2] = Math_fround(-Math_fround(HEAPF32[$1_1 >> 2]));
    $1_1 = $0_1 + 516 | 0;
    HEAPF32[$1_1 >> 2] = Math_fround(-Math_fround(HEAPF32[$1_1 >> 2]));
    $1_1 = $0_1 + 520 | 0;
    HEAPF32[$1_1 >> 2] = Math_fround(-Math_fround(HEAPF32[$1_1 >> 2]));
    $1_1 = $0_1 + 524 | 0;
    HEAPF32[$1_1 >> 2] = Math_fround(-Math_fround(HEAPF32[$1_1 >> 2]));
    $1_1 = $0_1 + 528 | 0;
    HEAPF32[$1_1 >> 2] = Math_fround(-Math_fround(HEAPF32[$1_1 >> 2]));
   }
   HEAP8[($0_1 + 209 | 0) >> 0] = 0;
  }
 }
 
 function $310($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0.0, $4_1 = 0.0, $5_1 = 0.0, $6_1 = 0.0, $7_1 = 0.0, $8_1 = 0.0, $9_1 = 0.0, $10_1 = 0.0, $11_1 = 0.0, $12_1 = 0.0, $13_1 = 0.0, $14_1 = 0.0, $15_1 = 0.0, $16_1 = 0.0, $17_1 = 0.0, $18_1 = 0.0, $19_1 = 0.0, $20_1 = 0.0, $21_1 = 0.0, $22_1 = 0.0, $23_1 = 0.0, $24_1 = 0.0, $25_1 = 0.0, $26_1 = 0.0, $27_1 = 0.0, $28_1 = 0.0, $29_1 = 0.0, $30_1 = 0.0, $31_1 = 0.0, $32_1 = 0.0, $33_1 = 0.0, $34_1 = 0.0;
  $3_1 = +HEAPF64[($2_1 + 56 | 0) >> 3];
  $4_1 = +HEAPF64[($2_1 + 40 | 0) >> 3];
  $5_1 = +HEAPF64[($2_1 + 48 | 0) >> 3];
  $6_1 = +HEAPF64[($2_1 + 88 | 0) >> 3];
  $7_1 = +HEAPF64[($2_1 + 72 | 0) >> 3];
  $8_1 = +HEAPF64[($2_1 + 80 | 0) >> 3];
  $9_1 = +HEAPF64[($1_1 + 104 | 0) >> 3];
  $10_1 = +HEAPF64[($1_1 + 40 | 0) >> 3];
  $11_1 = +HEAPF64[($1_1 + 72 | 0) >> 3];
  $12_1 = +HEAPF64[($1_1 + 112 | 0) >> 3];
  $13_1 = +HEAPF64[($1_1 + 48 | 0) >> 3];
  $14_1 = +HEAPF64[($1_1 + 80 | 0) >> 3];
  $15_1 = +HEAPF64[($2_1 + 120 | 0) >> 3];
  $16_1 = +HEAPF64[($1_1 + 120 | 0) >> 3];
  $17_1 = +HEAPF64[($2_1 + 104 | 0) >> 3];
  $18_1 = +HEAPF64[($1_1 + 56 | 0) >> 3];
  $19_1 = +HEAPF64[($2_1 + 112 | 0) >> 3];
  $20_1 = +HEAPF64[($1_1 + 88 | 0) >> 3];
  $21_1 = +HEAPF64[($2_1 + 32 | 0) >> 3];
  $22_1 = +HEAPF64[($2_1 + 64 | 0) >> 3];
  $23_1 = +HEAPF64[($1_1 + 8 | 0) >> 3];
  $24_1 = +HEAPF64[($1_1 + 16 | 0) >> 3];
  $25_1 = +HEAPF64[($2_1 + 96 | 0) >> 3];
  $26_1 = +HEAPF64[($1_1 + 24 | 0) >> 3];
  $27_1 = +HEAPF64[$1_1 >> 3];
  $28_1 = +HEAPF64[$2_1 >> 3];
  $29_1 = +HEAPF64[($1_1 + 32 | 0) >> 3];
  $30_1 = +HEAPF64[($2_1 + 8 | 0) >> 3];
  $31_1 = +HEAPF64[($1_1 + 64 | 0) >> 3];
  $32_1 = +HEAPF64[($2_1 + 16 | 0) >> 3];
  $33_1 = +HEAPF64[($1_1 + 96 | 0) >> 3];
  $34_1 = +HEAPF64[($2_1 + 24 | 0) >> 3];
  HEAPF64[$0_1 >> 3] = $27_1 * $28_1 + $29_1 * $30_1 + $31_1 * $32_1 + $33_1 * $34_1;
  HEAPF64[($0_1 + 120 | 0) >> 3] = $26_1 * $25_1 + $18_1 * $17_1 + $20_1 * $19_1 + $16_1 * $15_1;
  HEAPF64[($0_1 + 112 | 0) >> 3] = $24_1 * $25_1 + $13_1 * $17_1 + $14_1 * $19_1 + $12_1 * $15_1;
  HEAPF64[($0_1 + 104 | 0) >> 3] = $23_1 * $25_1 + $10_1 * $17_1 + $11_1 * $19_1 + $9_1 * $15_1;
  HEAPF64[($0_1 + 96 | 0) >> 3] = $27_1 * $25_1 + $29_1 * $17_1 + $31_1 * $19_1 + $33_1 * $15_1;
  HEAPF64[($0_1 + 88 | 0) >> 3] = $26_1 * $22_1 + $18_1 * $7_1 + $20_1 * $8_1 + $16_1 * $6_1;
  HEAPF64[($0_1 + 80 | 0) >> 3] = $24_1 * $22_1 + $13_1 * $7_1 + $14_1 * $8_1 + $12_1 * $6_1;
  HEAPF64[($0_1 + 72 | 0) >> 3] = $23_1 * $22_1 + $10_1 * $7_1 + $11_1 * $8_1 + $9_1 * $6_1;
  HEAPF64[($0_1 + 64 | 0) >> 3] = $27_1 * $22_1 + $29_1 * $7_1 + $31_1 * $8_1 + $33_1 * $6_1;
  HEAPF64[($0_1 + 56 | 0) >> 3] = $26_1 * $21_1 + $18_1 * $4_1 + $20_1 * $5_1 + $16_1 * $3_1;
  HEAPF64[($0_1 + 48 | 0) >> 3] = $24_1 * $21_1 + $13_1 * $4_1 + $14_1 * $5_1 + $12_1 * $3_1;
  HEAPF64[($0_1 + 40 | 0) >> 3] = $23_1 * $21_1 + $10_1 * $4_1 + $11_1 * $5_1 + $9_1 * $3_1;
  HEAPF64[($0_1 + 32 | 0) >> 3] = $27_1 * $21_1 + $29_1 * $4_1 + $31_1 * $5_1 + $33_1 * $3_1;
  HEAPF64[($0_1 + 24 | 0) >> 3] = $26_1 * $28_1 + $18_1 * $30_1 + $20_1 * $32_1 + $16_1 * $34_1;
  HEAPF64[($0_1 + 16 | 0) >> 3] = $24_1 * $28_1 + $13_1 * $30_1 + $14_1 * $32_1 + $12_1 * $34_1;
  HEAPF64[($0_1 + 8 | 0) >> 3] = $23_1 * $28_1 + $10_1 * $30_1 + $11_1 * $32_1 + $9_1 * $34_1;
 }
 
 function $311($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $4_1 = 0, $1_1 = 0, $8_1 = Math_fround(0), i64toi32_i32$2 = 0, $3_1 = 0, $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $2_1 = 0, $208_1 = 0, $213_1 = 0, $217_1 = 0;
  $1_1 = global$0 - 64 | 0;
  global$0 = $1_1;
  $2_1 = $565($0_1 | 0) | 0;
  HEAP16[($0_1 + 208 | 0) >> 1] = 257;
  $3_1 = global$1;
  HEAP32[$0_1 >> 2] = ($3_1 + 23012 | 0) + 8 | 0;
  $4_1 = $3_1 + 3568 | 0;
  $527($0_1 + 212 | 0 | 0, $4_1 | 0, Math_fround(Math_fround(0.0))) | 0;
  $527($0_1 + 232 | 0 | 0, $4_1 | 0, Math_fround(Math_fround(0.0))) | 0;
  $527($0_1 + 252 | 0 | 0, $4_1 | 0, Math_fround(Math_fround(0.0))) | 0;
  $527($0_1 + 272 | 0 | 0, $4_1 | 0, Math_fround(Math_fround(0.0))) | 0;
  $527($0_1 + 292 | 0 | 0, $4_1 | 0, Math_fround(Math_fround(0.0))) | 0;
  $527($0_1 + 312 | 0 | 0, $4_1 | 0, Math_fround(Math_fround(0.0))) | 0;
  HEAP32[($0_1 + 340 | 0) >> 2] = 0;
  i64toi32_i32$1 = $0_1 + 332 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $4_1 = $3_1 + 3556 | 0;
  $528($0_1 + 344 | 0 | 0, $4_1 | 0, $4_1 | 0) | 0;
  i64toi32_i32$1 = $0_1 + 376 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 372 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 384 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 396 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 392 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 404 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 416 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 412 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 424 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 440 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 432 | 0;
  i64toi32_i32$0 = 1065353216;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 448 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 460 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 456 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 468 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 476 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 480 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 488 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 504 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 496 | 0;
  i64toi32_i32$0 = 1065353216;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 512 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 520 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 524 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 532 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 540 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 544 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 552 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 1072693248;
  HEAP32[(i64toi32_i32$1 + 568 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 572 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 560 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = i64toi32_i32$1 + 576 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 584 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 592 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 600 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 608 | 0;
  i64toi32_i32$0 = 1072693248;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 616 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 624 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 632 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 640 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 656 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 648 | 0;
  i64toi32_i32$0 = 1072693248;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 664 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 672 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 680 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 696 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 700 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 688 | 0;
  i64toi32_i32$0 = 1072693248;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 704 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 712 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 720 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 728 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 756 | 0) >> 0] = 0;
  HEAP32[($0_1 + 752 | 0) >> 2] = 1056964608;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 1061752795;
  HEAP32[(i64toi32_i32$1 + 744 | 0) >> 2] = 1120403456;
  HEAP32[(i64toi32_i32$1 + 748 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 1028443341;
  HEAP32[(i64toi32_i32$1 + 736 | 0) >> 2] = 1065353216;
  HEAP32[(i64toi32_i32$1 + 740 | 0) >> 2] = i64toi32_i32$0;
  $528(i64toi32_i32$1 + 760 | 0 | 0, $4_1 | 0, $4_1 | 0) | 0;
  HEAP8[(i64toi32_i32$1 + 788 | 0) >> 0] = 0;
  $564($2_1 | 0);
  $5_1 = Math_fround(HEAPF32[(i64toi32_i32$1 + 128 | 0) >> 2]);
  $6_1 = Math_fround(HEAPF32[(i64toi32_i32$1 + 132 | 0) >> 2]);
  $7_1 = Math_fround(HEAPF32[(i64toi32_i32$1 + 136 | 0) >> 2]);
  $8_1 = Math_fround(HEAPF32[(i64toi32_i32$1 + 740 | 0) >> 2]);
  HEAPF32[($1_1 + 56 | 0) >> 2] = Math_fround($7_1 - $8_1);
  HEAPF32[($1_1 + 52 | 0) >> 2] = Math_fround($6_1 - $8_1);
  HEAPF32[($1_1 + 48 | 0) >> 2] = Math_fround($5_1 - $8_1);
  HEAPF32[($1_1 + 40 | 0) >> 2] = Math_fround($8_1 + $7_1);
  HEAPF32[($1_1 + 36 | 0) >> 2] = Math_fround($8_1 + $6_1);
  HEAPF32[($1_1 + 32 | 0) >> 2] = Math_fround($8_1 + $5_1);
  $4_1 = $528($1_1 | 0, $1_1 + 48 | 0 | 0, $1_1 + 32 | 0 | 0) | 0;
  i64toi32_i32$2 = $4_1 + 20 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $208_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1 + 780 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $208_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $4_1 + 12 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $213_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + 772 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $213_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$0 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  $217_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1 + 764 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $217_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  global$0 = $1_1 + 64 | 0;
  return $0_1 | 0;
 }
 
 function $312($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  HEAP8[($0_1 + 788 | 0) >> 0] = 1;
  HEAP8[($0_1 + 209 | 0) >> 0] = 1;
  HEAPF32[($0_1 + 740 | 0) >> 2] = $1_1;
 }
 
 function $313($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  HEAP8[($0_1 + 209 | 0) >> 0] = 1;
  HEAPF32[($0_1 + 744 | 0) >> 2] = $1_1 > Math_fround(0.0) ? $1_1 : Math_fround(1.0e4);
 }
 
 function $314($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  HEAP8[($0_1 + 209 | 0) >> 0] = 1;
  HEAPF32[($0_1 + 748 | 0) >> 2] = $1_1;
 }
 
 function $315($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $11_1 = 0;
  i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  HEAP32[($0_1 + 176 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
  $11_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[($0_1 + 168 | 0) >> 2] = $11_1;
  HEAP32[($0_1 + 172 | 0) >> 2] = i64toi32_i32$1;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1);
  HEAP8[($0_1 + 788 | 0) >> 0] = 1;
  HEAP8[($0_1 + 208 | 0) >> 0] = 1;
 }
 
 function $316($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = Math_fround(0), $2_1 = Math_fround(0), $3_1 = Math_fround(0), $4_1 = Math_fround(0);
  $2_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
  $3_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
  $4_1 = Math_fround(HEAPF32[($1_1 + 12 | 0) >> 2]);
  $5_1 = Math_fround(Math_fround(HEAPF32[$1_1 >> 2]) * Math_fround(.5));
  HEAPF32[($0_1 + 192 | 0) >> 2] = Math_fround($594(Math_fround($5_1)));
  $5_1 = Math_fround($592(Math_fround($5_1)));
  HEAPF32[($0_1 + 188 | 0) >> 2] = Math_fround($4_1 * $5_1);
  HEAPF32[($0_1 + 184 | 0) >> 2] = Math_fround($3_1 * $5_1);
  HEAPF32[($0_1 + 180 | 0) >> 2] = Math_fround($2_1 * $5_1);
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1);
  HEAP8[($0_1 + 208 | 0) >> 0] = 1;
 }
 
 function $317($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (HEAPU8[($0_1 + 60 | 0) >> 0] | 0) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1);
   HEAP8[($0_1 + 60 | 0) >> 0] = 1;
  }
 }
 
 function $318($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  HEAP32[$0_1 >> 2] = (global$1 + 23012 | 0) + 8 | 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 332 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   HEAP32[($0_1 + 336 | 0) >> 2] = $1_1;
   $2032($1_1 | 0);
  }
  return $0_1 | 0;
 }
 
 function $319($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  HEAP32[$0_1 >> 2] = (global$1 + 23012 | 0) + 8 | 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 332 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   HEAP32[($0_1 + 336 | 0) >> 2] = $1_1;
   $2032($1_1 | 0);
  }
  $2032($0_1 | 0);
 }
 
 function $320($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = Math_fround(0);
  HEAPF32[($0_1 + 168 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[$1_1 >> 2]) + Math_fround(HEAPF32[($0_1 + 168 | 0) >> 2]));
  $2_1 = $0_1 + 172 | 0;
  HEAPF32[$2_1 >> 2] = Math_fround(Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]) + Math_fround(HEAPF32[$2_1 >> 2]));
  $3_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
  HEAP8[($0_1 + 208 | 0) >> 0] = 1;
  HEAP8[($0_1 + 60 | 0) >> 0] = 1;
  $0_1 = $0_1 + 176 | 0;
  HEAPF32[$0_1 >> 2] = Math_fround($3_1 + Math_fround(HEAPF32[$0_1 >> 2]));
 }
 
 function $321($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $2_1 = 0, $23_1 = 0;
  $3_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
  $4_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
  $5_1 = Math_fround(HEAPF32[($1_1 + 12 | 0) >> 2]);
  $6_1 = Math_fround(HEAPF32[$1_1 >> 2]);
  HEAP8[($0_1 + 208 | 0) >> 0] = 1;
  HEAP8[($0_1 + 60 | 0) >> 0] = 1;
  $1_1 = $0_1 + 192 | 0;
  $23_1 = $1_1;
  $7_1 = Math_fround(HEAPF32[$1_1 >> 2]);
  $8_1 = Math_fround(HEAPF32[($0_1 + 180 | 0) >> 2]);
  $1_1 = $0_1 + 184 | 0;
  $9_1 = Math_fround(HEAPF32[$1_1 >> 2]);
  $2_1 = $0_1 + 188 | 0;
  $10_1 = Math_fround(HEAPF32[$2_1 >> 2]);
  HEAPF32[$23_1 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($5_1 * $7_1) - Math_fround($6_1 * $8_1)) - Math_fround($4_1 * $9_1)) - Math_fround($3_1 * $10_1));
  HEAPF32[$2_1 >> 2] = Math_fround(Math_fround(Math_fround($6_1 * $9_1) + Math_fround(Math_fround($5_1 * $10_1) + Math_fround($3_1 * $7_1))) - Math_fround($4_1 * $8_1));
  HEAPF32[$1_1 >> 2] = Math_fround(Math_fround(Math_fround($3_1 * $8_1) + Math_fround(Math_fround($5_1 * $9_1) + Math_fround($4_1 * $7_1))) - Math_fround($6_1 * $10_1));
  HEAPF32[($0_1 + 180 | 0) >> 2] = Math_fround(Math_fround(Math_fround($4_1 * $10_1) + Math_fround(Math_fround($5_1 * $8_1) + Math_fround($6_1 * $7_1))) - Math_fround($3_1 * $9_1));
 }
 
 function $322($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = $2_1 | 0;
  var $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $9_1 = Math_fround(0), $8_1 = Math_fround(0), $10_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $11_1 = Math_fround(0), $3_1 = 0, $4_1 = 0;
  $5_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
  $6_1 = Math_fround(HEAPF32[$2_1 >> 2]);
  $7_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
  HEAP8[($0_1 + 208 | 0) >> 0] = 1;
  HEAP8[($0_1 + 60 | 0) >> 0] = 1;
  $2_1 = $0_1 + 192 | 0;
  $8_1 = Math_fround(HEAPF32[$2_1 >> 2]);
  $9_1 = Math_fround($1_1 * Math_fround(.5));
  $1_1 = Math_fround($594(Math_fround($9_1)));
  $9_1 = Math_fround($592(Math_fround($9_1)));
  $10_1 = Math_fround(HEAPF32[($0_1 + 180 | 0) >> 2]);
  $11_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($6_1 * $6_1) + Math_fround($7_1 * $7_1)) + Math_fround($5_1 * $5_1)))));
  $6_1 = Math_fround($9_1 * Math_fround($6_1 * $11_1));
  $3_1 = $0_1 + 184 | 0;
  $12_1 = Math_fround(HEAPF32[$3_1 >> 2]);
  $7_1 = Math_fround($9_1 * Math_fround($7_1 * $11_1));
  $4_1 = $0_1 + 188 | 0;
  $13_1 = Math_fround(HEAPF32[$4_1 >> 2]);
  $5_1 = Math_fround($9_1 * Math_fround($5_1 * $11_1));
  HEAPF32[$2_1 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($1_1 * $8_1) - Math_fround($10_1 * $6_1)) - Math_fround($12_1 * $7_1)) - Math_fround($13_1 * $5_1));
  HEAPF32[$4_1 >> 2] = Math_fround(Math_fround(Math_fround($12_1 * $6_1) + Math_fround(Math_fround($1_1 * $13_1) + Math_fround($8_1 * $5_1))) - Math_fround($10_1 * $7_1));
  HEAPF32[$3_1 >> 2] = Math_fround(Math_fround(Math_fround($10_1 * $5_1) + Math_fround(Math_fround($1_1 * $12_1) + Math_fround($8_1 * $7_1))) - Math_fround($13_1 * $6_1));
  HEAPF32[($0_1 + 180 | 0) >> 2] = Math_fround(Math_fround(Math_fround($13_1 * $7_1) + Math_fround(Math_fround($1_1 * $10_1) + Math_fround($8_1 * $6_1))) - Math_fround($12_1 * $5_1));
 }
 
 function $323() {
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $0_1 = 0;
  $0_1 = global$1 + 67236 | 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  i64toi32_i32$1 = i64toi32_i32$1 + 12 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 32 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 44 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 40 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 52 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 60 | 0) >> 2] = 1065353216;
 }
 
 function $324($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $7_1 = 0, $5_1 = 0, $4_1 = 0, $6_1 = 0;
  label$1 : {
   $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   $4_1 = Math_imul($2_1, 40);
   $5_1 = HEAP32[($3_1 + $4_1 | 0) >> 2] | 0;
   if (!$5_1) {
    break label$1
   }
   $6_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (($3_1 | 0) == ($6_1 | 0)) {
    break label$1
   }
   $7_1 = 0;
   $2_1 = $3_1;
   label$2 : while (1) {
    $7_1 = $7_1 + ((HEAP32[$2_1 >> 2] | 0 | 0) == ($5_1 | 0)) | 0;
    $2_1 = $2_1 + 40 | 0;
    if (($2_1 | 0) != ($6_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
   if (($7_1 | 0) != (1 | 0)) {
    break label$1
   }
   $298($5_1 | 0, $0_1 | 0);
   $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  }
  HEAP32[($3_1 + $4_1 | 0) >> 2] = $1_1;
  label$3 : {
   if (!$1_1) {
    break label$3
   }
   $297($1_1 | 0, $0_1 | 0);
   $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  }
  $2_1 = 0;
  HEAP8[($0_1 + 4 | 0) >> 0] = 0;
  label$4 : {
   $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (($3_1 | 0) == ($5_1 | 0)) {
    break label$4
   }
   label$5 : while (1) {
    label$6 : {
     label$7 : {
      $7_1 = HEAP32[$3_1 >> 2] | 0;
      if ($7_1) {
       break label$7
      }
      $7_1 = 0;
      break label$6;
     }
     $7_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$7_1 >> 2] | 0) + 44 | 0) >> 2] | 0 | 0]($7_1) | 0;
     $2_1 = HEAPU8[($0_1 + 4 | 0) >> 0] | 0;
    }
    $2_1 = $2_1 | $7_1 | 0;
    HEAP8[($0_1 + 4 | 0) >> 0] = $2_1;
    $3_1 = $3_1 + 40 | 0;
    if (($3_1 | 0) != ($5_1 | 0)) {
     continue label$5
    }
    break label$5;
   };
  }
 }
 
 function $325($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[((HEAP32[($0_1 + 20 | 0) >> 2] | 0) + Math_imul($2_1, 40) | 0) >> 2] = $1_1;
 }
 
 function $326($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $3_1 = 0, $2_1 = 0;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   if (($2_1 | 0) == ($3_1 | 0)) {
    break label$1
   }
   $4_1 = 0;
   label$2 : while (1) {
    label$3 : {
     if ((HEAP32[($3_1 + Math_imul($4_1, 40) | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
      break label$3
     }
     FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, 0, $4_1);
     $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    }
    $4_1 = $4_1 + 1 | 0;
    if ($4_1 >>> 0 < (($2_1 - $3_1 | 0 | 0) / (40 | 0) | 0) >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $327($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $12_1 = 0, $1_1 = 0, $2_1 = 0, $7_1 = 0, $9_1 = 0, $5_1 = 0, $3_1 = 0, $4_1 = 0, $6_1 = 0, $8_1 = 0, $10_1 = 0, $11_1 = 0, $13_1 = 0, $38_1 = 0, $46_1 = 0, $54_1 = 0, $57_1 = 0, $72_1 = 0, $76_1 = 0, $80_1 = 0, $84_1 = 0, $92_1 = 0, $96_1 = 0, $100_1 = 0, $104_1 = 0, $112_1 = 0, $116_1 = 0, $120_1 = 0, $124_1 = 0, $137_1 = 0, $141_1 = 0, $145_1 = 0, $148_1 = 0, $157_1 = 0, $161_1 = 0, $165_1 = 0, $168_1 = 0, $177_1 = 0, $181_1 = 0, $185_1 = 0, $188_1 = 0, $197_1 = 0, $201_1 = 0, $205_1 = 0, $208_1 = 0, $217_1 = 0, $221_1 = 0, $225_1 = 0, $228_1 = 0, $237_1 = 0, $241_1 = 0, $245_1 = 0, $248_1 = 0, $257_1 = 0, $261_1 = 0, $265_1 = 0, $268_1 = 0, $277_1 = 0, $281_1 = 0, $285_1 = 0, $288_1 = 0, $297_1 = 0, $301_1 = 0, $305_1 = 0, $308_1 = 0, $317_1 = 0, $321_1 = 0, $325_1 = 0, $328_1 = 0, $337_1 = 0, $340_1 = 0, $343_1 = 0, $346_1 = 0, $361_1 = 0, $365_1 = 0, $369_1 = 0, $373_1 = 0, $381_1 = 0, $385_1 = 0, $389_1 = 0, $393_1 = 0;
  $1_1 = global$0 - 48 | 0;
  global$0 = $1_1;
  HEAP16[($0_1 + 4 | 0) >> 1] = 0;
  HEAP32[$0_1 >> 2] = (global$1 + 23096 | 0) + 8 | 0;
  $2_1 = ($1_1 + 8 | 0) + 32 | 0;
  $3_1 = global$13;
  $4_1 = $3_1 + 32 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2] | 0;
  $5_1 = ($1_1 + 8 | 0) + 24 | 0;
  $6_1 = $3_1 + 24 | 0;
  i64toi32_i32$2 = $6_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $38_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1;
  HEAP32[i64toi32_i32$0 >> 2] = $38_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $7_1 = ($1_1 + 8 | 0) + 16 | 0;
  $8_1 = $3_1 + 16 | 0;
  i64toi32_i32$2 = $8_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $46_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $7_1;
  HEAP32[i64toi32_i32$1 >> 2] = $46_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $9_1 = ($1_1 + 8 | 0) + 8 | 0;
  $10_1 = $3_1 + 8 | 0;
  i64toi32_i32$2 = $10_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $54_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $9_1;
  HEAP32[i64toi32_i32$0 >> 2] = $54_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $57_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $1_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $57_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  $11_1 = $0_1 + 16 | 0;
  HEAP32[$11_1 >> 2] = 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  $12_1 = $2030(520 | 0) | 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $12_1;
  $13_1 = $12_1 + 520 | 0;
  HEAP32[$11_1 >> 2] = $13_1;
  HEAP32[$12_1 >> 2] = 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $72_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $12_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = $72_1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $9_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $76_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $12_1 + 12 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $76_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $7_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $80_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $12_1 + 20 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $80_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $5_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $84_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $12_1 + 28 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $84_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($12_1 + 36 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
  HEAP32[($12_1 + 40 | 0) >> 2] = 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $92_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $12_1;
  HEAP32[(i64toi32_i32$0 + 44 | 0) >> 2] = $92_1;
  HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $9_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $96_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $12_1 + 52 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $96_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $7_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $100_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $12_1 + 60 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $100_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $5_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $104_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $12_1 + 68 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $104_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($12_1 + 76 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
  HEAP32[($12_1 + 80 | 0) >> 2] = 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $112_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $12_1;
  HEAP32[(i64toi32_i32$0 + 84 | 0) >> 2] = $112_1;
  HEAP32[(i64toi32_i32$0 + 88 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $9_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $116_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $12_1 + 92 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $116_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $7_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $120_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $12_1 + 100 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $120_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $5_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $124_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $12_1 + 108 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $124_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($12_1 + 116 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
  HEAP32[($12_1 + 120 | 0) >> 2] = 0;
  HEAP32[($12_1 + 156 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $137_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $12_1 + 148 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $137_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $7_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $141_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $12_1 + 140 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $141_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $9_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $145_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $12_1 + 132 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $145_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $148_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $12_1;
  HEAP32[(i64toi32_i32$1 + 124 | 0) >> 2] = $148_1;
  HEAP32[(i64toi32_i32$1 + 128 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 160 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 196 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
  i64toi32_i32$2 = $5_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $157_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $12_1 + 188 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $157_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $7_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $161_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $12_1 + 180 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $161_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $9_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $165_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $12_1 + 172 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $165_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $168_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $12_1;
  HEAP32[(i64toi32_i32$1 + 164 | 0) >> 2] = $168_1;
  HEAP32[(i64toi32_i32$1 + 168 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 200 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 236 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
  i64toi32_i32$2 = $5_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $177_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $12_1 + 228 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $177_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $7_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $181_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $12_1 + 220 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $181_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $9_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $185_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $12_1 + 212 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $185_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $188_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $12_1;
  HEAP32[(i64toi32_i32$1 + 204 | 0) >> 2] = $188_1;
  HEAP32[(i64toi32_i32$1 + 208 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 240 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 276 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
  i64toi32_i32$2 = $5_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $197_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $12_1 + 268 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $197_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $7_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $201_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $12_1 + 260 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $201_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $9_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $205_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $12_1 + 252 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $205_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $208_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $12_1;
  HEAP32[(i64toi32_i32$1 + 244 | 0) >> 2] = $208_1;
  HEAP32[(i64toi32_i32$1 + 248 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 280 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 316 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
  i64toi32_i32$2 = $5_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $217_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $12_1 + 308 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $217_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $7_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $221_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $12_1 + 300 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $221_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $9_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $225_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $12_1 + 292 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $225_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $228_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $12_1;
  HEAP32[(i64toi32_i32$1 + 284 | 0) >> 2] = $228_1;
  HEAP32[(i64toi32_i32$1 + 288 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 320 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 356 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
  i64toi32_i32$2 = $5_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $237_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $12_1 + 348 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $237_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $7_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $241_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $12_1 + 340 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $241_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $9_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $245_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $12_1 + 332 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $245_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $248_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $12_1;
  HEAP32[(i64toi32_i32$1 + 324 | 0) >> 2] = $248_1;
  HEAP32[(i64toi32_i32$1 + 328 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 360 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 396 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
  i64toi32_i32$2 = $5_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $257_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $12_1 + 388 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $257_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $7_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $261_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $12_1 + 380 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $261_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $9_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $265_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $12_1 + 372 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $265_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $268_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $12_1;
  HEAP32[(i64toi32_i32$1 + 364 | 0) >> 2] = $268_1;
  HEAP32[(i64toi32_i32$1 + 368 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 400 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 436 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
  i64toi32_i32$2 = $5_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $277_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $12_1 + 428 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $277_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $7_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $281_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $12_1 + 420 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $281_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $9_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $285_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $12_1 + 412 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $285_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $288_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $12_1;
  HEAP32[(i64toi32_i32$1 + 404 | 0) >> 2] = $288_1;
  HEAP32[(i64toi32_i32$1 + 408 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 440 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 476 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
  i64toi32_i32$2 = $5_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $297_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $12_1 + 468 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $297_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $7_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $301_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $12_1 + 460 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $301_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $9_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $305_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $12_1 + 452 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $305_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $308_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $12_1;
  HEAP32[(i64toi32_i32$1 + 444 | 0) >> 2] = $308_1;
  HEAP32[(i64toi32_i32$1 + 448 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 480 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 516 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
  i64toi32_i32$2 = $5_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $317_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $12_1 + 508 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $317_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $7_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $321_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $12_1 + 500 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $321_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $9_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $325_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $12_1 + 492 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $325_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $328_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $12_1;
  HEAP32[(i64toi32_i32$1 + 484 | 0) >> 2] = $328_1;
  HEAP32[(i64toi32_i32$1 + 488 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 12 | 0) >> 2] = $13_1;
  HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2] | 0;
  i64toi32_i32$2 = $6_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $337_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1;
  HEAP32[i64toi32_i32$0 >> 2] = $337_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $8_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $340_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $7_1;
  HEAP32[i64toi32_i32$1 >> 2] = $340_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $10_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $343_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $9_1;
  HEAP32[i64toi32_i32$0 >> 2] = $343_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $346_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $1_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $346_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  $3_1 = $0_1 + 28 | 0;
  HEAP32[$3_1 >> 2] = 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = i64toi32_i32$0;
  $12_1 = $2030(80 | 0) | 0;
  HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = $12_1;
  $4_1 = $12_1 + 80 | 0;
  HEAP32[$3_1 >> 2] = $4_1;
  HEAP32[$12_1 >> 2] = 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $361_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $12_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = $361_1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $9_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $365_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $12_1 + 12 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $365_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $7_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $369_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $12_1 + 20 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $369_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $5_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $373_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $12_1 + 28 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $373_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($12_1 + 36 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
  HEAP32[($12_1 + 40 | 0) >> 2] = 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $381_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $12_1;
  HEAP32[(i64toi32_i32$0 + 44 | 0) >> 2] = $381_1;
  HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $9_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $385_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $12_1 + 52 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $385_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $7_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $389_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $12_1 + 60 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $389_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $5_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $393_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $12_1 + 68 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $393_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($12_1 + 76 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
  HEAP32[($0_1 + 24 | 0) >> 2] = $4_1;
  i64toi32_i32$1 = $0_1 + 48 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 40 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $1_1 + 48 | 0;
  return i64toi32_i32$1 | 0;
 }
 
 function $328($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  HEAP32[$0_1 >> 2] = (global$1 + 23096 | 0) + 8 | 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (($1_1 | 0) == ($2_1 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    label$3 : {
     $3_1 = HEAP32[$1_1 >> 2] | 0;
     if (!$3_1) {
      break label$3
     }
     $298($3_1 | 0, $0_1 | 0);
    }
    $1_1 = $1_1 + 40 | 0;
    if (($1_1 | 0) != ($2_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  label$4 : {
   $1_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$4
   }
   $450($1_1 | 0, $0_1 | 0);
  }
  label$5 : {
   $1_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$5
   }
   HEAP32[($0_1 + 24 | 0) >> 2] = $1_1;
   $2032($1_1 | 0);
  }
  label$6 : {
   $1_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$6
   }
   HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
   $2032($1_1 | 0);
  }
  return $0_1 | 0;
 }
 
 function $329($0_1) {
  $0_1 = $0_1 | 0;
  abort();
 }
 
 function $330($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  HEAP8[($0_1 + 5 | 0) >> 0] = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (($1_1 | 0) == ($2_1 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    label$3 : {
     $3_1 = HEAP32[$1_1 >> 2] | 0;
     if (!$3_1) {
      break label$3
     }
     if (!(HEAPU8[($3_1 + 53 | 0) >> 0] | 0)) {
      break label$3
     }
     HEAP8[($0_1 + 5 | 0) >> 0] = 1;
    }
    $1_1 = $1_1 + 40 | 0;
    if (($1_1 | 0) != ($2_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $331($0_1) {
  $0_1 = $0_1 | 0;
  $188(HEAP32[($0_1 + 52 | 0) >> 2] | 0 | 0);
 }
 
 function $332($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = 0;
  label$1 : while (1) {
   label$2 : {
    $2_1 = Math_imul($1_1, 40);
    $3_1 = HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + $2_1 | 0) >> 2] | 0;
    if (!$3_1) {
     break label$2
    }
    $287($3_1 | 0, $1_1 | 0);
    $2_1 = (HEAP32[($0_1 + 8 | 0) >> 2] | 0) + $2_1 | 0;
    $3_1 = HEAP32[$2_1 >> 2] | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($3_1, $2_1 + 4 | 0);
   }
   label$3 : {
    label$4 : {
     $2_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
     if (HEAP32[($2_1 + 4 | 0) >> 2] | 0) {
      break label$4
     }
     $2_1 = -1;
     break label$3;
    }
    $2_1 = HEAP32[((HEAP32[($2_1 + 56 | 0) >> 2] | 0) + ($1_1 << 2 | 0) | 0) >> 2] | 0;
   }
   fimport$6($2_1 | 0, $1_1 | 0);
   $1_1 = $1_1 + 1 | 0;
   if (($1_1 | 0) != (13 | 0)) {
    continue label$1
   }
   break label$1;
  };
  label$5 : {
   $1_1 = HEAP32[(HEAP32[($0_1 + 20 | 0) >> 2] | 0) >> 2] | 0;
   if (!$1_1) {
    break label$5
   }
   $287($1_1 | 0, 13 | 0);
   $1_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $2_1 = HEAP32[$1_1 >> 2] | 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($2_1, $1_1 + 4 | 0);
  }
  label$6 : {
   label$7 : {
    $1_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
    if (HEAP32[($1_1 + 4 | 0) >> 2] | 0) {
     break label$7
    }
    $1_1 = -1;
    break label$6;
   }
   $1_1 = HEAP32[((HEAP32[($1_1 + 56 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0;
  }
  fimport$6($1_1 | 0, 13 | 0);
  label$8 : {
   $1_1 = HEAP32[((HEAP32[($0_1 + 20 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$8
   }
   $287($1_1 | 0, 14 | 0);
   $1_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $2_1 = HEAP32[($1_1 + 40 | 0) >> 2] | 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($2_1, $1_1 + 44 | 0);
  }
  label$9 : {
   label$10 : {
    $1_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
    if (HEAP32[($1_1 + 4 | 0) >> 2] | 0) {
     break label$10
    }
    $1_1 = -1;
    break label$9;
   }
   $1_1 = HEAP32[((HEAP32[($1_1 + 56 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0;
  }
  fimport$6($1_1 | 0, 14 | 0);
 }
 
 function $333($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   if (!(HEAP32[($1_1 + 4 | 0) >> 2] | 0)) {
    break label$1
   }
   $1_1 = HEAP32[((HEAP32[($1_1 + 56 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0;
   if (($1_1 | 0) < (0 | 0)) {
    break label$1
   }
   label$2 : {
    $2_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
    if (!$2_1) {
     break label$2
    }
    fimport$53($1_1 | 0, 1 | 0, 0 | 0, $447($2_1 | 0) | 0 | 0);
    break label$1;
   }
   fimport$53($1_1 | 0, 1 | 0, 0 | 0, global$1 + 67300 | 0 | 0);
  }
  label$3 : {
   $1_1 = HEAP32[(HEAP32[($0_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
   if (!$1_1) {
    break label$3
   }
   $0_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   if (!(HEAP32[($0_1 + 4 | 0) >> 2] | 0)) {
    break label$3
   }
   $0_1 = HEAP32[((HEAP32[($0_1 + 56 | 0) >> 2] | 0) + 84 | 0) >> 2] | 0;
   if (($0_1 | 0) < (0 | 0)) {
    break label$3
   }
   fimport$6($0_1 | 0, HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0);
  }
 }
 
 function $334($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    switch ((HEAP32[$0_1 >> 2] | 0) + -1 | 0 | 0) {
    case 0:
     $469(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
     return;
    case 1:
     break label$2;
    default:
     break label$1;
    };
   }
   $553(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  }
 }
 
 function $335($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   switch ((HEAP32[$0_1 >> 2] | 0) + -1 | 0 | 0) {
   case 0:
    $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1);
    return;
   case 1:
    $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1);
    break;
   default:
    break label$1;
   };
  }
 }
 
 function $336($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (((HEAP32[$0_1 >> 2] | 0) + -1 | 0) >>> 0 > 1 >>> 0) {
    break label$1
   }
   HEAP32[((HEAP32[($0_1 + 4 | 0) >> 2] | 0) + 40 | 0) >> 2] = $1_1;
  }
 }
 
 function $337($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $338($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $339($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $340() {
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $0_1 = 0;
  $0_1 = global$1 + 67300 | 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  i64toi32_i32$1 = i64toi32_i32$1 + 12 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 32 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 44 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 40 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 52 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 60 | 0) >> 2] = 1065353216;
 }
 
 function $341() {
  var $0_1 = 0, $2_1 = 0, $1_1 = 0;
  label$1 : {
   $0_1 = HEAP32[(global$1 + 67428 | 0) >> 2] | 0;
   if ($0_1) {
    break label$1
   }
   $1_1 = global$1;
   $2_1 = $2030(220 | 0) | 0;
   $0_1 = $342($2_1 | 0) | 0;
   HEAP32[($1_1 + 67428 | 0) >> 2] = $2_1;
  }
  return $0_1 | 0;
 }
 
 function $342($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $2_1 = 0, $1_1 = 0, $3_1 = 0, $6_1 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0, $81_1 = 0, $84_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0_1 = $2174($0_1 | 0, 0 | 0, 140 | 0) | 0;
  $2_1 = $2030(60 | 0) | 0;
  HEAP32[($0_1 + 128 | 0) >> 2] = $2_1;
  $3_1 = $2_1 + 60 | 0;
  HEAP32[($0_1 + 136 | 0) >> 2] = $3_1;
  HEAP32[($2_1 + 56 | 0) >> 2] = 0;
  i64toi32_i32$1 = $2_1 + 48 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $2_1 + 40 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $2_1 + 32 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $2_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $2_1 + 16 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $2_1 + 8 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $2_1;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 140 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 144 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 132 | 0) >> 2] = $3_1;
  i64toi32_i32$1 = i64toi32_i32$1 + 148 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 164 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 168 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 156 | 0) >> 2] = 16843009;
  i64toi32_i32$1 = i64toi32_i32$1 + 172 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $2_1 = $0_1 + 180 | 0;
  i64toi32_i32$1 = $2_1;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $3_1 = $0_1 + 188 | 0;
  i64toi32_i32$1 = $3_1;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $4_1 = $0_1 + 196 | 0;
  i64toi32_i32$1 = $4_1;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $5_1 = $0_1 + 204 | 0;
  i64toi32_i32$1 = $5_1;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 212 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $6_1 = $2030(220 | 0) | 0;
  $243($6_1 | 0) | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $6_1;
  $6_1 = $2030(84 | 0) | 0;
  $7_1 = $503($6_1 | 0) | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = $6_1;
  $493($7_1 | 0, $311($2030(792 | 0) | 0 | 0) | 0 | 0);
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 164 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 168 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[(i64toi32_i32$1 + 160 | 0) >> 0] = 1;
  $162($1_1 | 0, global$1 + 3612 | 0 | 0);
  i64toi32_i32$2 = $1_1 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $81_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1;
  HEAP32[i64toi32_i32$0 >> 2] = $81_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  $84_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $4_1;
  HEAP32[i64toi32_i32$1 >> 2] = $84_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $3_1;
  i64toi32_i32$0 = 1065353216;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $2_1;
  i64toi32_i32$0 = 1069066811;
  HEAP32[i64toi32_i32$1 >> 2] = 1069066811;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $343($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $5_1 = 0, $10_1 = 0, $6_1 = 0, $11_1 = 0;
  label$1 : {
   $3_1 = HEAP32[($0_1 + 104 | 0) >> 2] | 0;
   $4_1 = HEAP32[($0_1 + 108 | 0) >> 2] | 0;
   if (($3_1 | 0) == ($4_1 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    FUNCTION_TABLE[HEAP32[$3_1 >> 2] | 0 | 0]();
    $3_1 = $3_1 + 4 | 0;
    if (($3_1 | 0) != ($4_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  $550();
  label$3 : {
   $3_1 = HEAP32[($0_1 + 128 | 0) >> 2] | 0;
   $4_1 = HEAP32[($0_1 + 132 | 0) >> 2] | 0;
   if (($3_1 | 0) == ($4_1 | 0)) {
    break label$3
   }
   label$4 : while (1) {
    HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[$3_1 >> 2] | 0;
    $3_1 = $3_1 + 12 | 0;
    if (($3_1 | 0) != ($4_1 | 0)) {
     continue label$4
    }
    break label$4;
   };
  }
  HEAP32[($0_1 + 120 | 0) >> 2] = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
  $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($3_1);
  label$5 : {
   if (!(HEAPU8[($0_1 + 160 | 0) >> 0] | 0)) {
    break label$5
   }
   $489($431(5 | 0) | 0 | 0, $0_1 + 164 | 0 | 0);
   HEAP8[($0_1 + 160 | 0) >> 0] = 0;
  }
  label$6 : {
   $5_1 = HEAP32[$1_1 >> 2] | 0;
   $6_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   if (($5_1 | 0) == ($6_1 | 0)) {
    break label$6
   }
   $7_1 = $0_1 + 12 | 0;
   label$7 : while (1) {
    HEAP32[$7_1 >> 2] = HEAP32[$5_1 >> 2] | 0;
    $393();
    $496(HEAP32[$7_1 >> 2] | 0 | 0);
    $494(HEAP32[$7_1 >> 2] | 0 | 0);
    $495(HEAP32[$7_1 >> 2] | 0 | 0);
    $8_1 = 0;
    label$8 : {
     label$9 : {
      if (!(HEAP32[global$28 >> 2] | 0)) {
       break label$9
      }
      label$10 : while (1) {
       label$11 : {
        $9_1 = Math_imul($8_1, 12);
        $3_1 = (HEAP32[($0_1 + 128 | 0) >> 2] | 0) + $9_1 | 0;
        $4_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
        $3_1 = HEAP32[$3_1 >> 2] | 0;
        $1_1 = ($4_1 | 0) == ($3_1 | 0);
        if ($1_1) {
         break label$11
        }
        label$12 : {
         if ($1_1) {
          break label$12
         }
         label$13 : while (1) {
          $1_1 = HEAP32[((HEAP32[$7_1 >> 2] | 0) + 24 | 0) >> 2] | 0;
          label$14 : {
           label$15 : while (1) {
            $10_1 = HEAP32[$3_1 >> 2] | 0;
            if (!((HEAP32[($10_1 + 104 | 0) >> 2] | 0) & $1_1 | 0)) {
             break label$14
            }
            $3_1 = $3_1 + 4 | 0;
            if (($3_1 | 0) != ($4_1 | 0)) {
             continue label$15
            }
            break label$15;
           };
           $3_1 = $4_1;
           break label$12;
          }
          label$16 : while (1) {
           $4_1 = $4_1 + -4 | 0;
           if (($3_1 | 0) == ($4_1 | 0)) {
            break label$12
           }
           $11_1 = HEAP32[$4_1 >> 2] | 0;
           if (!((HEAP32[($11_1 + 104 | 0) >> 2] | 0) & $1_1 | 0)) {
            continue label$16
           }
           break label$16;
          };
          HEAP32[$3_1 >> 2] = $11_1;
          HEAP32[$4_1 >> 2] = $10_1;
          $3_1 = $3_1 + 4 | 0;
          if (($3_1 | 0) != ($4_1 | 0)) {
           continue label$13
          }
          break label$13;
         };
        }
        label$17 : {
         $4_1 = HEAP32[((HEAP32[($0_1 + 128 | 0) >> 2] | 0) + $9_1 | 0) >> 2] | 0;
         if (($4_1 | 0) == ($3_1 | 0)) {
          break label$17
         }
         label$18 : while (1) {
          label$19 : {
           label$20 : {
            $1_1 = HEAP32[$4_1 >> 2] | 0;
            if (!(HEAPU8[($1_1 + 110 | 0) >> 0] | 0)) {
             break label$20
            }
            if (!($305(HEAP32[((HEAP32[$7_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0, FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($1_1) | 0 | 0) | 0)) {
             break label$19
            }
           }
           $4_1 = $4_1 + 4 | 0;
           if (($4_1 | 0) != ($3_1 | 0)) {
            continue label$18
           }
           break label$17;
          }
          label$21 : {
           label$22 : while (1) {
            label$23 : {
             $3_1 = $3_1 + -4 | 0;
             if (($4_1 | 0) != ($3_1 | 0)) {
              break label$23
             }
             $3_1 = $4_1;
             break label$17;
            }
            $1_1 = HEAP32[$3_1 >> 2] | 0;
            if (!(HEAPU8[($1_1 + 110 | 0) >> 0] | 0)) {
             break label$21
            }
            if (!($305(HEAP32[((HEAP32[$7_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0, FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($1_1) | 0 | 0) | 0)) {
             continue label$22
            }
            break label$22;
           };
           $1_1 = HEAP32[$3_1 >> 2] | 0;
          }
          $10_1 = HEAP32[$4_1 >> 2] | 0;
          HEAP32[$4_1 >> 2] = $1_1;
          HEAP32[$3_1 >> 2] = $10_1;
          $4_1 = $4_1 + 4 | 0;
          if (($4_1 | 0) != ($3_1 | 0)) {
           continue label$18
          }
          break label$18;
         };
        }
        $3_1 = $344($3_1 | 0, HEAP32[((HEAP32[($0_1 + 128 | 0) >> 2] | 0) + $9_1 | 0) >> 2] | 0 | 0, $3_1 | 0) | 0;
        $4_1 = HEAP32[((HEAP32[($0_1 + 128 | 0) >> 2] | 0) + $9_1 | 0) >> 2] | 0;
        if (($3_1 | 0) == ($4_1 | 0)) {
         break label$11
        }
        label$24 : {
         if (!$8_1) {
          break label$24
         }
         if (!((HEAPU8[($0_1 + 159 | 0) >> 0] | 0) & 255 | 0)) {
          break label$24
         }
         fimport$9(1280 | 0);
         $4_1 = HEAP32[((HEAP32[($0_1 + 128 | 0) >> 2] | 0) + $9_1 | 0) >> 2] | 0;
        }
        $345($4_1 | 0, $3_1 | 0);
        $346($3_1 | 0, HEAP32[((HEAP32[($0_1 + 128 | 0) >> 2] | 0) + $9_1 | 0) >> 2] | 0 | 0, $3_1 | 0, ($8_1 | 0) != (0 | 0) | 0);
        $498(HEAP32[$7_1 >> 2] | 0 | 0);
       }
       $8_1 = $8_1 + 1 | 0;
       if (($8_1 | 0) != (5 | 0)) {
        continue label$10
       }
       break label$8;
      };
     }
     $347($0_1 | 0, $2_1 | 0);
     $3_1 = HEAP32[$7_1 >> 2] | 0;
     if (($3_1 | 0) != (HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0)) {
      break label$8
     }
     if (!(HEAP32[($3_1 + 44 | 0) >> 2] | 0)) {
      break label$8
     }
     $425(0 | 0);
     $3_1 = HEAP32[$7_1 >> 2] | 0;
     $4_1 = HEAP32[($3_1 + 36 | 0) >> 2] | 0;
     $143(HEAP32[($3_1 + 44 | 0) >> 2] | 0 | 0, 0 | 0, 1 | 0, 0 | 0, 0 | 0, 0 | 0, 0 | 0, 0 | 0, 0 | 0, 0 | 0, 0 | 0, Math_imul($4_1, HEAP32[($3_1 + 28 | 0) >> 2] | 0) | 0, Math_imul(HEAP32[($3_1 + 32 | 0) >> 2] | 0, $4_1) | 0);
    }
    $497(HEAP32[$7_1 >> 2] | 0 | 0);
    $5_1 = $5_1 + 4 | 0;
    if (($5_1 | 0) != ($6_1 | 0)) {
     continue label$7
    }
    break label$7;
   };
  }
  $385(0 | 0);
 }
 
 function $344($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $5_1 = 0, $7_1 = 0, $4_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   $4_1 = HEAP32[global$28 >> 2] | 0;
   $5_1 = $2181($4_1 | 0) | 0;
   if ($5_1 >>> 0 >= -16 >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     label$4 : {
      if ($5_1 >>> 0 < 11 >>> 0) {
       break label$4
      }
      $6_1 = ($5_1 + 16 | 0) & -16 | 0;
      $7_1 = $2030($6_1 | 0) | 0;
      HEAP32[($3_1 + 8 | 0) >> 2] = $6_1 | -2147483648 | 0;
      HEAP32[$3_1 >> 2] = $7_1;
      HEAP32[($3_1 + 4 | 0) >> 2] = $5_1;
      break label$3;
     }
     HEAP8[($3_1 + 11 | 0) >> 0] = $5_1;
     $7_1 = $3_1;
     if (!$5_1) {
      break label$2
     }
    }
    $2173($7_1 | 0, $4_1 | 0, $5_1 | 0) | 0;
   }
   HEAP8[($7_1 + $5_1 | 0) >> 0] = 0;
   label$5 : {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break label$5
    }
    label$6 : while (1) {
     label$7 : {
      if (!($254(HEAP32[$1_1 >> 2] | 0 | 0, $3_1 | 0) | 0)) {
       break label$7
      }
      $1_1 = $1_1 + 4 | 0;
      if (($1_1 | 0) != ($2_1 | 0)) {
       continue label$6
      }
      $1_1 = $2_1;
      break label$5;
     }
     label$8 : while (1) {
      $2_1 = $2_1 + -4 | 0;
      if (($1_1 | 0) == ($2_1 | 0)) {
       break label$5
      }
      if (!($254(HEAP32[$2_1 >> 2] | 0 | 0, $3_1 | 0) | 0)) {
       continue label$8
      }
      break label$8;
     };
     $5_1 = HEAP32[$1_1 >> 2] | 0;
     HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $5_1;
     $1_1 = $1_1 + 4 | 0;
     if (($1_1 | 0) != ($2_1 | 0)) {
      continue label$6
     }
     break label$6;
    };
   }
   label$9 : {
    if ((HEAP8[($3_1 + 11 | 0) >> 0] | 0 | 0) > (-1 | 0)) {
     break label$9
    }
    $2032(HEAP32[$3_1 >> 2] | 0 | 0);
   }
   global$0 = $3_1 + 16 | 0;
   return $1_1 | 0;
  }
  $2049($3_1 | 0);
  abort();
 }
 
 function $345($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $5_1 = 0, $4_1 = 0, $8_1 = 0, $6_1 = 0, $2_1 = 0, $7_1 = 0;
  label$1 : while (1) {
   $2_1 = $1_1 + -4 | 0;
   label$2 : while (1) {
    $3_1 = $0_1;
    label$3 : {
     label$4 : while (1) {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             $0_1 = $1_1 - $3_1 | 0;
             $4_1 = $0_1 >> 2 | 0;
             switch ($4_1 | 0) {
             case 4:
              break label$10;
             case 2:
              break label$11;
             case 0:
             case 1:
              break label$3;
             case 3:
              break label$7;
             case 5:
              break label$9;
             default:
              break label$8;
             };
            }
            $0_1 = HEAP32[$3_1 >> 2] | 0;
            $5_1 = $1_1 + -4 | 0;
            if (($264(HEAP32[$5_1 >> 2] | 0 | 0) | 0) >>> 0 <= ($264($0_1 | 0) | 0) >>> 0) {
             break label$3
            }
            $0_1 = HEAP32[$3_1 >> 2] | 0;
            HEAP32[$3_1 >> 2] = HEAP32[$5_1 >> 2] | 0;
            HEAP32[$5_1 >> 2] = $0_1;
            return;
           }
           $365($3_1 | 0, $3_1 + 4 | 0 | 0, $3_1 + 8 | 0 | 0, $1_1 + -4 | 0 | 0) | 0;
           return;
          }
          $366($3_1 | 0, $3_1 + 4 | 0 | 0, $3_1 + 8 | 0 | 0, $3_1 + 12 | 0 | 0, $1_1 + -4 | 0 | 0) | 0;
          return;
         }
         label$12 : {
          if (($0_1 | 0) > (123 | 0)) {
           break label$12
          }
          $5_1 = $3_1 + 8 | 0;
          $367($3_1 | 0, $3_1 + 4 | 0 | 0, $5_1 | 0) | 0;
          $0_1 = $3_1 + 12 | 0;
          if (($0_1 | 0) == ($1_1 | 0)) {
           break label$3
          }
          label$13 : while (1) {
           $4_1 = HEAP32[$5_1 >> 2] | 0;
           label$14 : {
            $6_1 = $0_1;
            if (($264(HEAP32[$0_1 >> 2] | 0 | 0) | 0) >>> 0 <= ($264($4_1 | 0) | 0) >>> 0) {
             break label$14
            }
            $7_1 = HEAP32[$6_1 >> 2] | 0;
            $4_1 = $6_1;
            label$15 : {
             label$16 : while (1) {
              $0_1 = $5_1;
              HEAP32[$4_1 >> 2] = HEAP32[$0_1 >> 2] | 0;
              label$17 : {
               if (($0_1 | 0) != ($3_1 | 0)) {
                break label$17
               }
               $0_1 = $3_1;
               break label$15;
              }
              $5_1 = $0_1 + -4 | 0;
              $8_1 = HEAP32[$5_1 >> 2] | 0;
              $4_1 = $0_1;
              if (($264($7_1 | 0) | 0) >>> 0 > ($264($8_1 | 0) | 0) >>> 0) {
               continue label$16
              }
              break label$16;
             };
            }
            HEAP32[$0_1 >> 2] = $7_1;
           }
           $5_1 = $6_1;
           $0_1 = $5_1 + 4 | 0;
           if (($0_1 | 0) != ($1_1 | 0)) {
            continue label$13
           }
           break label$3;
          };
         }
         $5_1 = $3_1 + ((($4_1 | 0) / (2 | 0) | 0) << 2 | 0) | 0;
         label$18 : {
          label$19 : {
           if (($0_1 | 0) < (3997 | 0)) {
            break label$19
           }
           $0_1 = (($4_1 | 0) / (4 | 0) | 0) << 2 | 0;
           $6_1 = $366($3_1 | 0, $3_1 + $0_1 | 0 | 0, $5_1 | 0, $5_1 + $0_1 | 0 | 0, $2_1 | 0) | 0;
           break label$18;
          }
          $6_1 = $367($3_1 | 0, $5_1 | 0, $2_1 | 0) | 0;
         }
         $4_1 = HEAP32[$5_1 >> 2] | 0;
         $0_1 = $2_1;
         label$20 : {
          label$21 : {
           if (($264(HEAP32[$3_1 >> 2] | 0 | 0) | 0) >>> 0 <= ($264($4_1 | 0) | 0) >>> 0) {
            break label$21
           }
           $0_1 = $2_1;
           break label$20;
          }
          label$22 : while (1) {
           label$23 : {
            $0_1 = $0_1 + -4 | 0;
            if (($3_1 | 0) != ($0_1 | 0)) {
             break label$23
            }
            $4_1 = $3_1 + 4 | 0;
            $0_1 = HEAP32[$2_1 >> 2] | 0;
            if (($264(HEAP32[$3_1 >> 2] | 0 | 0) | 0) >>> 0 > ($264($0_1 | 0) | 0) >>> 0) {
             break label$5
            }
            if (($4_1 | 0) == ($2_1 | 0)) {
             break label$3
            }
            label$24 : while (1) {
             $0_1 = HEAP32[$4_1 >> 2] | 0;
             label$25 : {
              if (($264(HEAP32[$3_1 >> 2] | 0 | 0) | 0) >>> 0 <= ($264($0_1 | 0) | 0) >>> 0) {
               break label$25
              }
              $0_1 = HEAP32[$4_1 >> 2] | 0;
              HEAP32[$4_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
              HEAP32[$2_1 >> 2] = $0_1;
              $4_1 = $4_1 + 4 | 0;
              break label$5;
             }
             $4_1 = $4_1 + 4 | 0;
             if (($4_1 | 0) != ($2_1 | 0)) {
              continue label$24
             }
             break label$3;
            };
           }
           $4_1 = HEAP32[$5_1 >> 2] | 0;
           if (($264(HEAP32[$0_1 >> 2] | 0 | 0) | 0) >>> 0 <= ($264($4_1 | 0) | 0) >>> 0) {
            continue label$22
           }
           break label$22;
          };
          $4_1 = HEAP32[$3_1 >> 2] | 0;
          HEAP32[$3_1 >> 2] = HEAP32[$0_1 >> 2] | 0;
          HEAP32[$0_1 >> 2] = $4_1;
          $6_1 = $6_1 + 1 | 0;
         }
         $8_1 = $3_1 + 4 | 0;
         if ($8_1 >>> 0 >= $0_1 >>> 0) {
          break label$6
         }
         label$26 : while (1) {
          $4_1 = $8_1;
          $8_1 = $4_1 + 4 | 0;
          $7_1 = HEAP32[$5_1 >> 2] | 0;
          if (($264(HEAP32[$4_1 >> 2] | 0 | 0) | 0) >>> 0 > ($264($7_1 | 0) | 0) >>> 0) {
           continue label$26
          }
          label$27 : while (1) {
           $7_1 = HEAP32[$5_1 >> 2] | 0;
           $0_1 = $0_1 + -4 | 0;
           if (($264(HEAP32[$0_1 >> 2] | 0 | 0) | 0) >>> 0 <= ($264($7_1 | 0) | 0) >>> 0) {
            continue label$27
           }
           break label$27;
          };
          label$28 : {
           if ($4_1 >>> 0 <= $0_1 >>> 0) {
            break label$28
           }
           $8_1 = $4_1;
           break label$6;
          }
          $7_1 = HEAP32[$4_1 >> 2] | 0;
          HEAP32[$4_1 >> 2] = HEAP32[$0_1 >> 2] | 0;
          HEAP32[$0_1 >> 2] = $7_1;
          $5_1 = ($5_1 | 0) == ($4_1 | 0) ? $0_1 : $5_1;
          $6_1 = $6_1 + 1 | 0;
          continue label$26;
         };
        }
        $367($3_1 | 0, $3_1 + 4 | 0 | 0, $1_1 + -4 | 0 | 0) | 0;
        break label$3;
       }
       label$29 : {
        if (($8_1 | 0) == ($5_1 | 0)) {
         break label$29
        }
        $0_1 = HEAP32[$8_1 >> 2] | 0;
        if (($264(HEAP32[$5_1 >> 2] | 0 | 0) | 0) >>> 0 <= ($264($0_1 | 0) | 0) >>> 0) {
         break label$29
        }
        $0_1 = HEAP32[$8_1 >> 2] | 0;
        HEAP32[$8_1 >> 2] = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = $0_1;
        $6_1 = $6_1 + 1 | 0;
       }
       label$30 : {
        if ($6_1) {
         break label$30
        }
        $5_1 = $368($3_1 | 0, $8_1 | 0) | 0;
        label$31 : {
         $0_1 = $8_1 + 4 | 0;
         if (!($368($0_1 | 0, $1_1 | 0) | 0)) {
          break label$31
         }
         $1_1 = $8_1;
         $0_1 = $3_1;
         if (!$5_1) {
          continue label$1
         }
         break label$3;
        }
        if ($5_1) {
         continue label$2
        }
       }
       label$32 : {
        if (($8_1 - $3_1 | 0 | 0) >= ($1_1 - $8_1 | 0 | 0)) {
         break label$32
        }
        $345($3_1 | 0, $8_1 | 0);
        $0_1 = $8_1 + 4 | 0;
        continue label$2;
       }
       $345($8_1 + 4 | 0 | 0, $1_1 | 0);
       $1_1 = $8_1;
       $0_1 = $3_1;
       continue label$1;
      }
      $0_1 = $2_1;
      if (($4_1 | 0) == ($0_1 | 0)) {
       break label$3
      }
      label$33 : while (1) {
       $5_1 = $4_1;
       $4_1 = $5_1 + 4 | 0;
       $8_1 = HEAP32[$5_1 >> 2] | 0;
       if (($264(HEAP32[$3_1 >> 2] | 0 | 0) | 0) >>> 0 <= ($264($8_1 | 0) | 0) >>> 0) {
        continue label$33
       }
       label$34 : while (1) {
        $0_1 = $0_1 + -4 | 0;
        $8_1 = HEAP32[$0_1 >> 2] | 0;
        if (($264(HEAP32[$3_1 >> 2] | 0 | 0) | 0) >>> 0 > ($264($8_1 | 0) | 0) >>> 0) {
         continue label$34
        }
        break label$34;
       };
       label$35 : {
        if ($5_1 >>> 0 < $0_1 >>> 0) {
         break label$35
        }
        $3_1 = $5_1;
        continue label$4;
       }
       $8_1 = HEAP32[$5_1 >> 2] | 0;
       HEAP32[$5_1 >> 2] = HEAP32[$0_1 >> 2] | 0;
       HEAP32[$0_1 >> 2] = $8_1;
       continue label$33;
      };
     };
    }
    break label$2;
   };
   break label$1;
  };
 }
 
 function $346($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $402(0 | 0);
  $394(0 | 0);
  $396(1 | 0);
  $388($3_1 ^ 1 | 0 | 0);
  $395(513 | 0);
  $397(0 | 0);
  $389(1 | 0);
  $400(1 | 0, 1 | 0, 1 | 0, 1 | 0);
  label$1 : {
   if ($1_1 >>> 0 >= $2_1 >>> 0) {
    break label$1
   }
   label$2 : while (1) {
    $3_1 = HEAP32[((HEAP32[$1_1 >> 2] | 0) + 64 | 0) >> 2] | 0;
    HEAP32[($3_1 + 52 | 0) >> 2] = HEAP32[($3_1 + 40 | 0) >> 2] | 0;
    $256(HEAP32[$1_1 >> 2] | 0 | 0, 0 | 0);
    $1_1 = $1_1 + 4 | 0;
    if ($1_1 >>> 0 < $2_1 >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $347($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $4_1 = 0, $6_1 = 0, $7_1 = 0, $2_1 = 0, $8_1 = 0, $5_1 = 0, $9_1 = 0, i64toi32_i32$0 = 0, $10_1 = 0;
  $133();
  label$1 : {
   if (!(HEAPU8[($0_1 + 157 | 0) >> 0] | 0)) {
    break label$1
   }
   if (!(HEAP32[($0_1 + 144 | 0) >> 2] | 0)) {
    break label$1
   }
   if (!(HEAPU8[((HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 49 | 0) >> 0] | 0)) {
    break label$1
   }
   $402(0 | 0);
   $394(0 | 0);
   $396(0 | 0);
   $388(0 | 0);
   $397(0 | 0);
   $400(1 | 0, 1 | 0, 1 | 0, 1 | 0);
   $401(2305 | 0);
   $256(HEAP32[($0_1 + 144 | 0) >> 2] | 0 | 0, 0 | 0);
   if (!(HEAPU8[((HEAP32[((HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0) + 756 | 0) >> 0] | 0)) {
    break label$1
   }
   $401(2304 | 0);
  }
  label$2 : {
   if (!(HEAP32[($0_1 + 140 | 0) >> 2] | 0)) {
    break label$2
   }
   if (!(HEAPU8[($0_1 + 156 | 0) >> 0] | 0)) {
    break label$2
   }
   if (!(HEAPU8[((HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 49 | 0) >> 0] | 0)) {
    break label$2
   }
   $402(0 | 0);
   $394(1 | 0);
   $396(0 | 0);
   $388(1 | 0);
   $395(513 | 0);
   $397(0 | 0);
   $400(1 | 0, 1 | 0, 1 | 0, 1 | 0);
   $256(HEAP32[($0_1 + 140 | 0) >> 2] | 0 | 0, 0 | 0);
  }
  label$3 : {
   $2_1 = HEAP32[($0_1 + 128 | 0) >> 2] | 0;
   $3_1 = HEAP32[$2_1 >> 2] | 0;
   $4_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
   if (($3_1 | 0) == ($4_1 | 0)) {
    break label$3
   }
   $5_1 = $0_1 + 12 | 0;
   label$4 : while (1) {
    $6_1 = HEAP32[((HEAP32[$5_1 >> 2] | 0) + 24 | 0) >> 2] | 0;
    label$5 : {
     label$6 : while (1) {
      $7_1 = HEAP32[$3_1 >> 2] | 0;
      if (!((HEAP32[($7_1 + 104 | 0) >> 2] | 0) & $6_1 | 0)) {
       break label$5
      }
      $3_1 = $3_1 + 4 | 0;
      if (($3_1 | 0) != ($4_1 | 0)) {
       continue label$6
      }
      break label$6;
     };
     $3_1 = $4_1;
     break label$3;
    }
    label$7 : while (1) {
     $4_1 = $4_1 + -4 | 0;
     if (($3_1 | 0) == ($4_1 | 0)) {
      break label$3
     }
     $8_1 = HEAP32[$4_1 >> 2] | 0;
     if (!((HEAP32[($8_1 + 104 | 0) >> 2] | 0) & $6_1 | 0)) {
      continue label$7
     }
     break label$7;
    };
    HEAP32[$3_1 >> 2] = $8_1;
    HEAP32[$4_1 >> 2] = $7_1;
    $3_1 = $3_1 + 4 | 0;
    if (($3_1 | 0) != ($4_1 | 0)) {
     continue label$4
    }
    break label$4;
   };
  }
  label$8 : {
   label$9 : {
    if (!$1_1) {
     break label$9
    }
    $4_1 = HEAP32[$2_1 >> 2] | 0;
    if (($4_1 | 0) == ($3_1 | 0)) {
     break label$8
    }
    label$10 : while (1) {
     label$11 : {
      label$12 : {
       $6_1 = HEAP32[$4_1 >> 2] | 0;
       if (!(HEAPU8[($6_1 + 110 | 0) >> 0] | 0)) {
        break label$12
       }
       if (!($305(HEAP32[((HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0 | 0, FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($6_1) | 0 | 0) | 0)) {
        break label$11
       }
      }
      $4_1 = $4_1 + 4 | 0;
      if (($4_1 | 0) != ($3_1 | 0)) {
       continue label$10
      }
      break label$8;
     }
     label$13 : {
      label$14 : while (1) {
       label$15 : {
        $3_1 = $3_1 + -4 | 0;
        if (($4_1 | 0) != ($3_1 | 0)) {
         break label$15
        }
        $3_1 = $4_1;
        break label$8;
       }
       $6_1 = HEAP32[$3_1 >> 2] | 0;
       if (!(HEAPU8[($6_1 + 110 | 0) >> 0] | 0)) {
        break label$13
       }
       if (!($305(HEAP32[((HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0 | 0, FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($6_1) | 0 | 0) | 0)) {
        continue label$14
       }
       break label$14;
      };
      $6_1 = HEAP32[$3_1 >> 2] | 0;
     }
     $7_1 = HEAP32[$4_1 >> 2] | 0;
     HEAP32[$4_1 >> 2] = $6_1;
     HEAP32[$3_1 >> 2] = $7_1;
     $4_1 = $4_1 + 4 | 0;
     if (($4_1 | 0) != ($3_1 | 0)) {
      continue label$10
     }
     break label$8;
    };
   }
   $3_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
  }
  $6_1 = HEAP32[$2_1 >> 2] | 0;
  label$16 : {
   label$17 : {
    if (HEAPU8[($0_1 + 158 | 0) >> 0] | 0) {
     break label$17
    }
    $4_1 = $6_1;
    break label$16;
   }
   label$18 : {
    if (($6_1 | 0) != ($3_1 | 0)) {
     break label$18
    }
    $4_1 = $6_1;
    break label$16;
   }
   $4_1 = $3_1;
   label$19 : while (1) {
    label$20 : {
     if (!($263(HEAP32[$6_1 >> 2] | 0 | 0) | 0)) {
      break label$20
     }
     $6_1 = $6_1 + 4 | 0;
     if (($6_1 | 0) != ($4_1 | 0)) {
      continue label$19
     }
     break label$16;
    }
    label$21 : while (1) {
     label$22 : {
      $4_1 = $4_1 + -4 | 0;
      if (($6_1 | 0) != ($4_1 | 0)) {
       break label$22
      }
      $4_1 = $6_1;
      break label$16;
     }
     if (!($263(HEAP32[$4_1 >> 2] | 0 | 0) | 0)) {
      continue label$21
     }
     break label$21;
    };
    $7_1 = HEAP32[$6_1 >> 2] | 0;
    HEAP32[$6_1 >> 2] = HEAP32[$4_1 >> 2] | 0;
    HEAP32[$4_1 >> 2] = $7_1;
    $6_1 = $6_1 + 4 | 0;
    if (($6_1 | 0) != ($4_1 | 0)) {
     continue label$19
    }
    break label$19;
   };
  }
  $345($4_1 | 0, $3_1 | 0);
  label$23 : {
   $5_1 = HEAP32[$2_1 >> 2] | 0;
   if ($5_1 >>> 0 >= $4_1 >>> 0) {
    break label$23
   }
   $6_1 = $5_1;
   label$24 : while (1) {
    $7_1 = HEAP32[$6_1 >> 2] | 0;
    $8_1 = HEAP32[((HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0;
    $308($8_1 | 0);
    $259($7_1 | 0, $8_1 + 372 | 0 | 0);
    $6_1 = $6_1 + 4 | 0;
    if ($6_1 >>> 0 < $4_1 >>> 0) {
     continue label$24
    }
    break label$24;
   };
  }
  $348($5_1 | 0, $4_1 | 0);
  label$25 : {
   label$26 : {
    if (!($459() | 0)) {
     break label$26
    }
    if (!(HEAPU8[((HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 48 | 0) >> 0] | 0)) {
     break label$26
    }
    $7_1 = global$29;
    $6_1 = HEAP32[$7_1 >> 2] | 0;
    $8_1 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
    if (($6_1 | 0) == ($8_1 | 0)) {
     break label$26
    }
    $7_1 = 0;
    label$27 : while (1) {
     $7_1 = (HEAP32[$6_1 >> 2] | 0) + $7_1 | 0;
     $6_1 = $6_1 + 4 | 0;
     if (($6_1 | 0) != ($8_1 | 0)) {
      continue label$27
     }
     break label$27;
    };
    if (($7_1 | 0) < (1 | 0)) {
     break label$26
    }
    label$28 : {
     label$29 : {
      if (($4_1 | 0) != ($3_1 | 0)) {
       break label$29
      }
      $8_1 = $3_1;
      $6_1 = $3_1;
      break label$28;
     }
     $6_1 = $3_1;
     $7_1 = $4_1;
     label$30 : {
      label$31 : while (1) {
       label$32 : {
        $8_1 = HEAP32[$7_1 >> 2] | 0;
        if (!(HEAP32[((HEAP32[($8_1 + 64 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0)) {
         break label$32
        }
        $7_1 = $7_1 + 4 | 0;
        if (($7_1 | 0) != ($6_1 | 0)) {
         continue label$31
        }
        $7_1 = $6_1;
        break label$30;
       }
       label$33 : while (1) {
        $6_1 = $6_1 + -4 | 0;
        if (($7_1 | 0) == ($6_1 | 0)) {
         break label$30
        }
        $5_1 = HEAP32[$6_1 >> 2] | 0;
        if (!(HEAP32[((HEAP32[($5_1 + 64 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0)) {
         continue label$33
        }
        break label$33;
       };
       HEAP32[$7_1 >> 2] = $5_1;
       HEAP32[$6_1 >> 2] = $8_1;
       $7_1 = $7_1 + 4 | 0;
       if (($7_1 | 0) != ($6_1 | 0)) {
        continue label$31
       }
       break label$31;
      };
     }
     $8_1 = $4_1;
     $6_1 = $4_1;
     if (($4_1 | 0) == ($7_1 | 0)) {
      break label$28
     }
     $5_1 = $7_1;
     $6_1 = $4_1;
     label$34 : {
      label$35 : while (1) {
       label$36 : {
        $8_1 = HEAP32[$6_1 >> 2] | 0;
        if (HEAPU8[($8_1 + 109 | 0) >> 0] | 0) {
         break label$36
        }
        $6_1 = $6_1 + 4 | 0;
        if (($6_1 | 0) != ($5_1 | 0)) {
         continue label$35
        }
        break label$34;
       }
       label$37 : while (1) {
        label$38 : {
         $5_1 = $5_1 + -4 | 0;
         if (($6_1 | 0) != ($5_1 | 0)) {
          break label$38
         }
         $8_1 = $7_1;
         break label$28;
        }
        $9_1 = HEAP32[$5_1 >> 2] | 0;
        if (HEAPU8[($9_1 + 109 | 0) >> 0] | 0) {
         continue label$37
        }
        break label$37;
       };
       HEAP32[$6_1 >> 2] = $9_1;
       HEAP32[$5_1 >> 2] = $8_1;
       $6_1 = $6_1 + 4 | 0;
       if (($6_1 | 0) != ($5_1 | 0)) {
        continue label$35
       }
       break label$35;
      };
     }
     $8_1 = $7_1;
     $6_1 = $5_1;
    }
    $349($3_1 | 0, $4_1 | 0, $8_1 | 0);
    $499(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0);
    label$39 : {
     if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) == (HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0)) {
      break label$39
     }
     $5_1 = $0_1 + 88 | 0;
     $7_1 = 0;
     label$40 : while (1) {
      HEAP32[($0_1 + 100 | 0) >> 2] = -1;
      i64toi32_i32$0 = -1;
      HEAP32[($0_1 + 92 | 0) >> 2] = -1;
      HEAP32[($0_1 + 96 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[($0_1 + 88 | 0) >> 2] = $7_1;
      $489($431(3 | 0) | 0 | 0, $5_1 | 0);
      $350($0_1 | 0, HEAP32[((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + ($7_1 << 2 | 0) | 0) >> 2] | 0 | 0, $4_1 | 0, $6_1 | 0, $8_1 | 0);
      $7_1 = $7_1 + 1 | 0;
      if ($7_1 >>> 0 < (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) - (HEAP32[($0_1 + 16 | 0) >> 2] | 0) | 0) >> 2 | 0) >>> 0) {
       continue label$40
      }
      break label$40;
     };
    }
    label$41 : {
     if ((HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) == (HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0)) {
      break label$41
     }
     $5_1 = $0_1 + 88 | 0;
     $7_1 = 0;
     label$42 : while (1) {
      i64toi32_i32$0 = -1;
      HEAP32[($0_1 + 96 | 0) >> 2] = -1;
      HEAP32[($0_1 + 100 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[($0_1 + 92 | 0) >> 2] = $7_1;
      HEAP32[($0_1 + 88 | 0) >> 2] = -1;
      $489($431(3 | 0) | 0 | 0, $5_1 | 0);
      $350($0_1 | 0, HEAP32[((HEAP32[($0_1 + 28 | 0) >> 2] | 0) + ($7_1 << 2 | 0) | 0) >> 2] | 0 | 0, $4_1 | 0, $6_1 | 0, $8_1 | 0);
      $7_1 = $7_1 + 1 | 0;
      if ($7_1 >>> 0 < (((HEAP32[($0_1 + 32 | 0) >> 2] | 0) - (HEAP32[($0_1 + 28 | 0) >> 2] | 0) | 0) >> 2 | 0) >>> 0) {
       continue label$42
      }
      break label$42;
     };
    }
    label$43 : {
     if ((HEAP32[($0_1 + 44 | 0) >> 2] | 0 | 0) == (HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0)) {
      break label$43
     }
     $5_1 = $0_1 + 88 | 0;
     $7_1 = 0;
     label$44 : while (1) {
      HEAP32[($0_1 + 100 | 0) >> 2] = -1;
      HEAP32[($0_1 + 96 | 0) >> 2] = $7_1;
      i64toi32_i32$0 = -1;
      HEAP32[($0_1 + 88 | 0) >> 2] = -1;
      HEAP32[($0_1 + 92 | 0) >> 2] = i64toi32_i32$0;
      $489($431(3 | 0) | 0 | 0, $5_1 | 0);
      $350($0_1 | 0, HEAP32[((HEAP32[($0_1 + 40 | 0) >> 2] | 0) + ($7_1 << 2 | 0) | 0) >> 2] | 0 | 0, $4_1 | 0, $6_1 | 0, $8_1 | 0);
      $7_1 = $7_1 + 1 | 0;
      if ($7_1 >>> 0 < (((HEAP32[($0_1 + 44 | 0) >> 2] | 0) - (HEAP32[($0_1 + 40 | 0) >> 2] | 0) | 0) >> 2 | 0) >>> 0) {
       continue label$44
      }
      break label$44;
     };
    }
    label$45 : {
     if (!(Math_fround(HEAPF32[($0_1 + 164 | 0) >> 2]) > Math_fround(0.0))) {
      break label$45
     }
     $351($0_1 | 0, $4_1 | 0, $8_1 | 0);
    }
    $352($3_1 | 0, $8_1 | 0, $3_1 | 0);
    break label$25;
   }
   $346($3_1 | 0, $4_1 | 0, $3_1 | 0, 0 | 0);
   $499(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0);
  }
  label$46 : {
   $3_1 = HEAP32[$2_1 >> 2] | 0;
   if (($4_1 | 0) == ($3_1 | 0)) {
    break label$46
   }
   $353($3_1 | 0, $3_1 | 0, $4_1 | 0, 0 | 0);
  }
  label$47 : {
   if (!($457() | 0)) {
    break label$47
   }
   $3_1 = HEAP32[$2_1 >> 2] | 0;
   if ($3_1 >>> 0 >= (HEAP32[($2_1 + 4 | 0) >> 2] | 0) >>> 0) {
    break label$47
   }
   label$48 : while (1) {
    $4_1 = HEAP32[$3_1 >> 2] | 0;
    $454(FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($4_1) | 0 | 0);
    $3_1 = $3_1 + 4 | 0;
    if ($3_1 >>> 0 < (HEAP32[($2_1 + 4 | 0) >> 2] | 0) >>> 0) {
     continue label$48
    }
    break label$48;
   };
  }
  label$49 : {
   if (!($455() | 0)) {
    break label$49
   }
   $3_1 = HEAP32[$2_1 >> 2] | 0;
   if ($3_1 >>> 0 >= (HEAP32[($2_1 + 4 | 0) >> 2] | 0) >>> 0) {
    break label$49
   }
   label$50 : while (1) {
    $4_1 = HEAP32[$3_1 >> 2] | 0;
    $453(FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($4_1) | 0 | 0);
    $3_1 = $3_1 + 4 | 0;
    if ($3_1 >>> 0 < (HEAP32[($2_1 + 4 | 0) >> 2] | 0) >>> 0) {
     continue label$50
    }
    break label$50;
   };
  }
  $395(515 | 0);
  $8_1 = $0_1 + 12 | 0;
  $498(HEAP32[$8_1 >> 2] | 0 | 0);
  $5_1 = 1;
  label$51 : while (1) {
   label$52 : {
    $6_1 = HEAP32[($0_1 + 128 | 0) >> 2] | 0;
    $7_1 = Math_imul($5_1, 12);
    $3_1 = $6_1 + $7_1 | 0;
    $4_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    if (($4_1 | 0) == (HEAP32[$3_1 >> 2] | 0 | 0)) {
     break label$52
    }
    label$53 : {
     if (!(HEAPU8[($0_1 + 159 | 0) >> 0] | 0)) {
      break label$53
     }
     fimport$9(1280 | 0);
     $6_1 = HEAP32[($0_1 + 128 | 0) >> 2] | 0;
     $4_1 = HEAP32[(($6_1 + $7_1 | 0) + 4 | 0) >> 2] | 0;
    }
    $2_1 = $4_1;
    label$54 : {
     $9_1 = $6_1 + $7_1 | 0;
     $3_1 = HEAP32[$9_1 >> 2] | 0;
     if (($3_1 | 0) == ($4_1 | 0)) {
      break label$54
     }
     label$55 : while (1) {
      $6_1 = HEAP32[((HEAP32[$8_1 >> 2] | 0) + 24 | 0) >> 2] | 0;
      label$56 : {
       label$57 : while (1) {
        $7_1 = HEAP32[$3_1 >> 2] | 0;
        if (!((HEAP32[($7_1 + 104 | 0) >> 2] | 0) & $6_1 | 0)) {
         break label$56
        }
        $3_1 = $3_1 + 4 | 0;
        if (($3_1 | 0) != ($4_1 | 0)) {
         continue label$57
        }
        break label$57;
       };
       $2_1 = $4_1;
       break label$54;
      }
      label$58 : while (1) {
       label$59 : {
        $4_1 = $4_1 + -4 | 0;
        if (($3_1 | 0) != ($4_1 | 0)) {
         break label$59
        }
        $2_1 = $3_1;
        break label$54;
       }
       $2_1 = HEAP32[$4_1 >> 2] | 0;
       if (!((HEAP32[($2_1 + 104 | 0) >> 2] | 0) & $6_1 | 0)) {
        continue label$58
       }
       break label$58;
      };
      HEAP32[$3_1 >> 2] = $2_1;
      HEAP32[$4_1 >> 2] = $7_1;
      $3_1 = $3_1 + 4 | 0;
      $2_1 = $3_1;
      if (($3_1 | 0) != ($4_1 | 0)) {
       continue label$55
      }
      break label$55;
     };
    }
    label$60 : {
     label$61 : {
      if (!$1_1) {
       break label$61
      }
      $3_1 = HEAP32[$9_1 >> 2] | 0;
      if (($3_1 | 0) == ($2_1 | 0)) {
       break label$60
      }
      label$62 : while (1) {
       label$63 : {
        label$64 : {
         $4_1 = HEAP32[$3_1 >> 2] | 0;
         if (!(HEAPU8[($4_1 + 110 | 0) >> 0] | 0)) {
          break label$64
         }
         if (!($305(HEAP32[((HEAP32[$8_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0, FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($4_1) | 0 | 0) | 0)) {
          break label$63
         }
        }
        $3_1 = $3_1 + 4 | 0;
        if (($3_1 | 0) != ($2_1 | 0)) {
         continue label$62
        }
        break label$60;
       }
       label$65 : {
        label$66 : while (1) {
         label$67 : {
          $2_1 = $2_1 + -4 | 0;
          if (($3_1 | 0) != ($2_1 | 0)) {
           break label$67
          }
          $2_1 = $3_1;
          break label$60;
         }
         $4_1 = HEAP32[$2_1 >> 2] | 0;
         if (!(HEAPU8[($4_1 + 110 | 0) >> 0] | 0)) {
          break label$65
         }
         if (!($305(HEAP32[((HEAP32[$8_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0, FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($4_1) | 0 | 0) | 0)) {
          continue label$66
         }
         break label$66;
        };
        $4_1 = HEAP32[$2_1 >> 2] | 0;
       }
       $6_1 = HEAP32[$3_1 >> 2] | 0;
       HEAP32[$3_1 >> 2] = $4_1;
       HEAP32[$2_1 >> 2] = $6_1;
       $3_1 = $3_1 + 4 | 0;
       if (($3_1 | 0) != ($2_1 | 0)) {
        continue label$62
       }
       break label$60;
      };
     }
     $2_1 = HEAP32[($9_1 + 4 | 0) >> 2] | 0;
    }
    label$68 : {
     label$69 : {
      $3_1 = HEAP32[$9_1 >> 2] | 0;
      if (($3_1 | 0) != ($2_1 | 0)) {
       break label$69
      }
      $7_1 = $3_1;
      break label$68;
     }
     $4_1 = $2_1;
     $7_1 = $3_1;
     if (!((HEAPU8[($0_1 + 158 | 0) >> 0] | 0) & 255 | 0)) {
      break label$68
     }
     label$70 : while (1) {
      label$71 : {
       if (!($263(HEAP32[$3_1 >> 2] | 0 | 0) | 0)) {
        break label$71
       }
       $3_1 = $3_1 + 4 | 0;
       if (($3_1 | 0) != ($4_1 | 0)) {
        continue label$70
       }
       $7_1 = $4_1;
       break label$68;
      }
      label$72 : while (1) {
       label$73 : {
        $4_1 = $4_1 + -4 | 0;
        if (($3_1 | 0) != ($4_1 | 0)) {
         break label$73
        }
        $7_1 = $3_1;
        break label$68;
       }
       if (!($263(HEAP32[$4_1 >> 2] | 0 | 0) | 0)) {
        continue label$72
       }
       break label$72;
      };
      $6_1 = HEAP32[$3_1 >> 2] | 0;
      HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2] | 0;
      HEAP32[$4_1 >> 2] = $6_1;
      $7_1 = $4_1;
      $3_1 = $3_1 + 4 | 0;
      if (($3_1 | 0) != ($4_1 | 0)) {
       continue label$70
      }
      break label$70;
     };
    }
    $345($7_1 | 0, $2_1 | 0);
    $10_1 = HEAP32[$9_1 >> 2] | 0;
    $3_1 = $10_1;
    label$74 : {
     if ($3_1 >>> 0 >= $7_1 >>> 0) {
      break label$74
     }
     label$75 : while (1) {
      $4_1 = HEAP32[$3_1 >> 2] | 0;
      $6_1 = HEAP32[((HEAP32[$8_1 >> 2] | 0) + 40 | 0) >> 2] | 0;
      $308($6_1 | 0);
      $259($4_1 | 0, $6_1 + 372 | 0 | 0);
      $3_1 = $3_1 + 4 | 0;
      if ($3_1 >>> 0 < $7_1 >>> 0) {
       continue label$75
      }
      break label$75;
     };
    }
    $348($10_1 | 0, $7_1 | 0);
    label$76 : {
     if (($2_1 | 0) == ($7_1 | 0)) {
      break label$76
     }
     $346($3_1 | 0, $7_1 | 0, $2_1 | 0, 1 | 0);
    }
    $3_1 = HEAP32[$9_1 >> 2] | 0;
    if (($7_1 | 0) == ($3_1 | 0)) {
     break label$52
    }
    $353($3_1 | 0, $3_1 | 0, $7_1 | 0, 1 | 0);
   }
   $5_1 = $5_1 + 1 | 0;
   if (($5_1 | 0) != (5 | 0)) {
    continue label$51
   }
   break label$51;
  };
  $3_1 = $0_1 + 12 | 0;
  $500(HEAP32[$3_1 >> 2] | 0 | 0);
  $501(HEAP32[$3_1 >> 2] | 0 | 0);
 }
 
 function $348($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $10_1 = Math_fround(0), $11_1 = Math_fround(0), $4_1 = 0, $3_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $2_1 = 0, $9_1 = 0, $42_1 = Math_fround(0), $49_1 = Math_fround(0), $72_1 = Math_fround(0), $79_1 = Math_fround(0), $150_1 = Math_fround(0), $157_1 = Math_fround(0), $180_1 = Math_fround(0), $187_1 = Math_fround(0), $228_1 = Math_fround(0), $234_1 = Math_fround(0), $256_1 = Math_fround(0), $263_1 = Math_fround(0), $326_1 = Math_fround(0), $333_1 = Math_fround(0), $356_1 = Math_fround(0), $363_1 = Math_fround(0), $401_1 = Math_fround(0), $408_1 = Math_fround(0), $431_1 = Math_fround(0), $438_1 = Math_fround(0), $473_1 = Math_fround(0), $480_1 = Math_fround(0), $503_1 = Math_fround(0), $510_1 = Math_fround(0), $555_1 = Math_fround(0), $562_1 = Math_fround(0), $585_1 = Math_fround(0), $592_1 = Math_fround(0), $638_1 = Math_fround(0), $645_1 = Math_fround(0), $668_1 = Math_fround(0), $675_1 = Math_fround(0), $709_1 = Math_fround(0), $716_1 = Math_fround(0), $739_1 = Math_fround(0), $746_1 = Math_fround(0), $805_1 = Math_fround(0), $812_1 = Math_fround(0), $835_1 = Math_fround(0), $842_1 = Math_fround(0), $918_1 = Math_fround(0), $925_1 = Math_fround(0), $948_1 = Math_fround(0), $955_1 = Math_fround(0), $990_1 = Math_fround(0), $997_1 = Math_fround(0), $1020_1 = Math_fround(0), $1027_1 = Math_fround(0);
  label$1 : while (1) {
   $2_1 = $1_1 + -4 | 0;
   label$2 : while (1) {
    $3_1 = $0_1;
    label$3 : {
     label$4 : while (1) {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             $0_1 = $1_1 - $3_1 | 0;
             $4_1 = $0_1 >> 2 | 0;
             switch ($4_1 | 0) {
             case 4:
              break label$10;
             case 2:
              break label$11;
             case 0:
             case 1:
              break label$3;
             case 3:
              break label$7;
             case 5:
              break label$9;
             default:
              break label$8;
             };
            }
            $0_1 = HEAP32[$3_1 >> 2] | 0;
            label$12 : {
             label$13 : {
              $5_1 = $1_1 + -4 | 0;
              $4_1 = HEAP32[$5_1 >> 2] | 0;
              if (!(HEAPU8[($4_1 + 111 | 0) >> 0] | 0)) {
               break label$13
              }
              $4_1 = HEAP32[($4_1 + 56 | 0) >> 2] | 0;
              $564($4_1 | 0);
              $10_1 = Math_fround(Math_abs(Math_fround(HEAPF32[($4_1 + 136 | 0) >> 2])));
              break label$12;
             }
             $10_1 = Math_fround(HEAPF32[($4_1 + 124 | 0) >> 2]);
             $42_1 = Math_fround($10_1 * $10_1);
             $10_1 = Math_fround(HEAPF32[($4_1 + 128 | 0) >> 2]);
             $49_1 = Math_fround($42_1 + Math_fround($10_1 * $10_1));
             $10_1 = Math_fround(HEAPF32[($4_1 + 132 | 0) >> 2]);
             $10_1 = Math_fround($49_1 + Math_fround($10_1 * $10_1));
            }
            label$14 : {
             label$15 : {
              if (!(HEAPU8[($0_1 + 111 | 0) >> 0] | 0)) {
               break label$15
              }
              $0_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
              $564($0_1 | 0);
              $11_1 = Math_fround(Math_abs(Math_fround(HEAPF32[($0_1 + 136 | 0) >> 2])));
              break label$14;
             }
             $11_1 = Math_fround(HEAPF32[($0_1 + 124 | 0) >> 2]);
             $72_1 = Math_fround($11_1 * $11_1);
             $11_1 = Math_fround(HEAPF32[($0_1 + 128 | 0) >> 2]);
             $79_1 = Math_fround($72_1 + Math_fround($11_1 * $11_1));
             $11_1 = Math_fround(HEAPF32[($0_1 + 132 | 0) >> 2]);
             $11_1 = Math_fround($79_1 + Math_fround($11_1 * $11_1));
            }
            if ($10_1 > $11_1 ^ 1 | 0) {
             break label$3
            }
            $0_1 = HEAP32[$3_1 >> 2] | 0;
            HEAP32[$3_1 >> 2] = HEAP32[$5_1 >> 2] | 0;
            HEAP32[$5_1 >> 2] = $0_1;
            return;
           }
           $369($3_1 | 0, $3_1 + 4 | 0 | 0, $3_1 + 8 | 0 | 0, $1_1 + -4 | 0 | 0) | 0;
           return;
          }
          $370($3_1 | 0, $3_1 + 4 | 0 | 0, $3_1 + 8 | 0 | 0, $3_1 + 12 | 0 | 0, $1_1 + -4 | 0 | 0) | 0;
          return;
         }
         label$16 : {
          if (($0_1 | 0) > (123 | 0)) {
           break label$16
          }
          $6_1 = $3_1 + 8 | 0;
          $371($3_1 | 0, $3_1 + 4 | 0 | 0, $6_1 | 0) | 0;
          $4_1 = $3_1 + 12 | 0;
          if (($4_1 | 0) == ($1_1 | 0)) {
           break label$3
          }
          label$17 : while (1) {
           $0_1 = HEAP32[$6_1 >> 2] | 0;
           label$18 : {
            label$19 : {
             $7_1 = $4_1;
             $4_1 = HEAP32[$4_1 >> 2] | 0;
             if (!(HEAPU8[($4_1 + 111 | 0) >> 0] | 0)) {
              break label$19
             }
             $4_1 = HEAP32[($4_1 + 56 | 0) >> 2] | 0;
             $564($4_1 | 0);
             $10_1 = Math_fround(Math_abs(Math_fround(HEAPF32[($4_1 + 136 | 0) >> 2])));
             break label$18;
            }
            $10_1 = Math_fround(HEAPF32[($4_1 + 124 | 0) >> 2]);
            $150_1 = Math_fround($10_1 * $10_1);
            $10_1 = Math_fround(HEAPF32[($4_1 + 128 | 0) >> 2]);
            $157_1 = Math_fround($150_1 + Math_fround($10_1 * $10_1));
            $10_1 = Math_fround(HEAPF32[($4_1 + 132 | 0) >> 2]);
            $10_1 = Math_fround($157_1 + Math_fround($10_1 * $10_1));
           }
           label$20 : {
            label$21 : {
             if (!(HEAPU8[($0_1 + 111 | 0) >> 0] | 0)) {
              break label$21
             }
             $0_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
             $564($0_1 | 0);
             $11_1 = Math_fround(Math_abs(Math_fround(HEAPF32[($0_1 + 136 | 0) >> 2])));
             break label$20;
            }
            $11_1 = Math_fround(HEAPF32[($0_1 + 124 | 0) >> 2]);
            $180_1 = Math_fround($11_1 * $11_1);
            $11_1 = Math_fround(HEAPF32[($0_1 + 128 | 0) >> 2]);
            $187_1 = Math_fround($180_1 + Math_fround($11_1 * $11_1));
            $11_1 = Math_fround(HEAPF32[($0_1 + 132 | 0) >> 2]);
            $11_1 = Math_fround($187_1 + Math_fround($11_1 * $11_1));
           }
           label$22 : {
            if ($10_1 > $11_1 ^ 1 | 0) {
             break label$22
            }
            $5_1 = HEAP32[$7_1 >> 2] | 0;
            $4_1 = $7_1;
            label$23 : {
             label$24 : while (1) {
              $0_1 = $6_1;
              HEAP32[$4_1 >> 2] = HEAP32[$0_1 >> 2] | 0;
              label$25 : {
               if (($0_1 | 0) != ($3_1 | 0)) {
                break label$25
               }
               $0_1 = $3_1;
               break label$23;
              }
              $6_1 = $0_1 + -4 | 0;
              $4_1 = HEAP32[$6_1 >> 2] | 0;
              label$26 : {
               label$27 : {
                if (!(HEAPU8[($5_1 + 111 | 0) >> 0] | 0)) {
                 break label$27
                }
                $8_1 = HEAP32[($5_1 + 56 | 0) >> 2] | 0;
                $564($8_1 | 0);
                $10_1 = Math_fround(Math_abs(Math_fround(HEAPF32[($8_1 + 136 | 0) >> 2])));
                break label$26;
               }
               $10_1 = Math_fround(HEAPF32[($5_1 + 124 | 0) >> 2]);
               $228_1 = Math_fround($10_1 * $10_1);
               $10_1 = Math_fround(HEAPF32[($5_1 + 128 | 0) >> 2]);
               $234_1 = Math_fround($228_1 + Math_fround($10_1 * $10_1));
               $10_1 = Math_fround(HEAPF32[($5_1 + 132 | 0) >> 2]);
               $10_1 = Math_fround($234_1 + Math_fround($10_1 * $10_1));
              }
              label$28 : {
               label$29 : {
                if (!(HEAPU8[($4_1 + 111 | 0) >> 0] | 0)) {
                 break label$29
                }
                $4_1 = HEAP32[($4_1 + 56 | 0) >> 2] | 0;
                $564($4_1 | 0);
                $11_1 = Math_fround(Math_abs(Math_fround(HEAPF32[($4_1 + 136 | 0) >> 2])));
                break label$28;
               }
               $11_1 = Math_fround(HEAPF32[($4_1 + 124 | 0) >> 2]);
               $256_1 = Math_fround($11_1 * $11_1);
               $11_1 = Math_fround(HEAPF32[($4_1 + 128 | 0) >> 2]);
               $263_1 = Math_fround($256_1 + Math_fround($11_1 * $11_1));
               $11_1 = Math_fround(HEAPF32[($4_1 + 132 | 0) >> 2]);
               $11_1 = Math_fround($263_1 + Math_fround($11_1 * $11_1));
              }
              $4_1 = $0_1;
              if ($10_1 > $11_1) {
               continue label$24
              }
              break label$24;
             };
            }
            HEAP32[$0_1 >> 2] = $5_1;
           }
           $6_1 = $7_1;
           $4_1 = $6_1 + 4 | 0;
           if (($4_1 | 0) != ($1_1 | 0)) {
            continue label$17
           }
           break label$3;
          };
         }
         $6_1 = $3_1 + ((($4_1 | 0) / (2 | 0) | 0) << 2 | 0) | 0;
         label$30 : {
          label$31 : {
           if (($0_1 | 0) < (3997 | 0)) {
            break label$31
           }
           $0_1 = (($4_1 | 0) / (4 | 0) | 0) << 2 | 0;
           $9_1 = $370($3_1 | 0, $3_1 + $0_1 | 0 | 0, $6_1 | 0, $6_1 + $0_1 | 0 | 0, $2_1 | 0) | 0;
           break label$30;
          }
          $9_1 = $371($3_1 | 0, $6_1 | 0, $2_1 | 0) | 0;
         }
         $0_1 = HEAP32[$6_1 >> 2] | 0;
         label$32 : {
          label$33 : {
           $4_1 = HEAP32[$3_1 >> 2] | 0;
           if (!(HEAPU8[($4_1 + 111 | 0) >> 0] | 0)) {
            break label$33
           }
           $4_1 = HEAP32[($4_1 + 56 | 0) >> 2] | 0;
           $564($4_1 | 0);
           $10_1 = Math_fround(Math_abs(Math_fround(HEAPF32[($4_1 + 136 | 0) >> 2])));
           break label$32;
          }
          $10_1 = Math_fround(HEAPF32[($4_1 + 124 | 0) >> 2]);
          $326_1 = Math_fround($10_1 * $10_1);
          $10_1 = Math_fround(HEAPF32[($4_1 + 128 | 0) >> 2]);
          $333_1 = Math_fround($326_1 + Math_fround($10_1 * $10_1));
          $10_1 = Math_fround(HEAPF32[($4_1 + 132 | 0) >> 2]);
          $10_1 = Math_fround($333_1 + Math_fround($10_1 * $10_1));
         }
         label$34 : {
          label$35 : {
           if (!(HEAPU8[($0_1 + 111 | 0) >> 0] | 0)) {
            break label$35
           }
           $0_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
           $564($0_1 | 0);
           $11_1 = Math_fround(Math_abs(Math_fround(HEAPF32[($0_1 + 136 | 0) >> 2])));
           break label$34;
          }
          $11_1 = Math_fround(HEAPF32[($0_1 + 124 | 0) >> 2]);
          $356_1 = Math_fround($11_1 * $11_1);
          $11_1 = Math_fround(HEAPF32[($0_1 + 128 | 0) >> 2]);
          $363_1 = Math_fround($356_1 + Math_fround($11_1 * $11_1));
          $11_1 = Math_fround(HEAPF32[($0_1 + 132 | 0) >> 2]);
          $11_1 = Math_fround($363_1 + Math_fround($11_1 * $11_1));
         }
         $5_1 = $2_1;
         label$36 : {
          label$37 : {
           if (!($10_1 > $11_1)) {
            break label$37
           }
           $5_1 = $2_1;
           break label$36;
          }
          label$38 : while (1) {
           label$39 : {
            $5_1 = $5_1 + -4 | 0;
            if (($3_1 | 0) != ($5_1 | 0)) {
             break label$39
            }
            $0_1 = HEAP32[$2_1 >> 2] | 0;
            label$40 : {
             label$41 : {
              $4_1 = HEAP32[$3_1 >> 2] | 0;
              if (!(HEAPU8[($4_1 + 111 | 0) >> 0] | 0)) {
               break label$41
              }
              $4_1 = HEAP32[($4_1 + 56 | 0) >> 2] | 0;
              $564($4_1 | 0);
              $10_1 = Math_fround(Math_abs(Math_fround(HEAPF32[($4_1 + 136 | 0) >> 2])));
              break label$40;
             }
             $10_1 = Math_fround(HEAPF32[($4_1 + 124 | 0) >> 2]);
             $401_1 = Math_fround($10_1 * $10_1);
             $10_1 = Math_fround(HEAPF32[($4_1 + 128 | 0) >> 2]);
             $408_1 = Math_fround($401_1 + Math_fround($10_1 * $10_1));
             $10_1 = Math_fround(HEAPF32[($4_1 + 132 | 0) >> 2]);
             $10_1 = Math_fround($408_1 + Math_fround($10_1 * $10_1));
            }
            label$42 : {
             label$43 : {
              if (!(HEAPU8[($0_1 + 111 | 0) >> 0] | 0)) {
               break label$43
              }
              $0_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
              $564($0_1 | 0);
              $11_1 = Math_fround(Math_abs(Math_fround(HEAPF32[($0_1 + 136 | 0) >> 2])));
              break label$42;
             }
             $11_1 = Math_fround(HEAPF32[($0_1 + 124 | 0) >> 2]);
             $431_1 = Math_fround($11_1 * $11_1);
             $11_1 = Math_fround(HEAPF32[($0_1 + 128 | 0) >> 2]);
             $438_1 = Math_fround($431_1 + Math_fround($11_1 * $11_1));
             $11_1 = Math_fround(HEAPF32[($0_1 + 132 | 0) >> 2]);
             $11_1 = Math_fround($438_1 + Math_fround($11_1 * $11_1));
            }
            $8_1 = $3_1 + 4 | 0;
            if ($10_1 > $11_1) {
             break label$5
            }
            if (($8_1 | 0) == ($2_1 | 0)) {
             break label$3
            }
            label$44 : while (1) {
             $0_1 = HEAP32[$8_1 >> 2] | 0;
             label$45 : {
              label$46 : {
               $4_1 = HEAP32[$3_1 >> 2] | 0;
               if (!(HEAPU8[($4_1 + 111 | 0) >> 0] | 0)) {
                break label$46
               }
               $4_1 = HEAP32[($4_1 + 56 | 0) >> 2] | 0;
               $564($4_1 | 0);
               $10_1 = Math_fround(Math_abs(Math_fround(HEAPF32[($4_1 + 136 | 0) >> 2])));
               break label$45;
              }
              $10_1 = Math_fround(HEAPF32[($4_1 + 124 | 0) >> 2]);
              $473_1 = Math_fround($10_1 * $10_1);
              $10_1 = Math_fround(HEAPF32[($4_1 + 128 | 0) >> 2]);
              $480_1 = Math_fround($473_1 + Math_fround($10_1 * $10_1));
              $10_1 = Math_fround(HEAPF32[($4_1 + 132 | 0) >> 2]);
              $10_1 = Math_fround($480_1 + Math_fround($10_1 * $10_1));
             }
             label$47 : {
              label$48 : {
               if (!(HEAPU8[($0_1 + 111 | 0) >> 0] | 0)) {
                break label$48
               }
               $0_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
               $564($0_1 | 0);
               $11_1 = Math_fround(Math_abs(Math_fround(HEAPF32[($0_1 + 136 | 0) >> 2])));
               break label$47;
              }
              $11_1 = Math_fround(HEAPF32[($0_1 + 124 | 0) >> 2]);
              $503_1 = Math_fround($11_1 * $11_1);
              $11_1 = Math_fround(HEAPF32[($0_1 + 128 | 0) >> 2]);
              $510_1 = Math_fround($503_1 + Math_fround($11_1 * $11_1));
              $11_1 = Math_fround(HEAPF32[($0_1 + 132 | 0) >> 2]);
              $11_1 = Math_fround($510_1 + Math_fround($11_1 * $11_1));
             }
             label$49 : {
              if ($10_1 > $11_1 ^ 1 | 0) {
               break label$49
              }
              $0_1 = HEAP32[$8_1 >> 2] | 0;
              HEAP32[$8_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
              HEAP32[$2_1 >> 2] = $0_1;
              $8_1 = $8_1 + 4 | 0;
              break label$5;
             }
             $8_1 = $8_1 + 4 | 0;
             if (($8_1 | 0) != ($2_1 | 0)) {
              continue label$44
             }
             break label$3;
            };
           }
           $0_1 = HEAP32[$6_1 >> 2] | 0;
           label$50 : {
            label$51 : {
             $4_1 = HEAP32[$5_1 >> 2] | 0;
             if (!(HEAPU8[($4_1 + 111 | 0) >> 0] | 0)) {
              break label$51
             }
             $4_1 = HEAP32[($4_1 + 56 | 0) >> 2] | 0;
             $564($4_1 | 0);
             $10_1 = Math_fround(Math_abs(Math_fround(HEAPF32[($4_1 + 136 | 0) >> 2])));
             break label$50;
            }
            $10_1 = Math_fround(HEAPF32[($4_1 + 124 | 0) >> 2]);
            $555_1 = Math_fround($10_1 * $10_1);
            $10_1 = Math_fround(HEAPF32[($4_1 + 128 | 0) >> 2]);
            $562_1 = Math_fround($555_1 + Math_fround($10_1 * $10_1));
            $10_1 = Math_fround(HEAPF32[($4_1 + 132 | 0) >> 2]);
            $10_1 = Math_fround($562_1 + Math_fround($10_1 * $10_1));
           }
           label$52 : {
            label$53 : {
             if (!(HEAPU8[($0_1 + 111 | 0) >> 0] | 0)) {
              break label$53
             }
             $0_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
             $564($0_1 | 0);
             $11_1 = Math_fround(Math_abs(Math_fround(HEAPF32[($0_1 + 136 | 0) >> 2])));
             break label$52;
            }
            $11_1 = Math_fround(HEAPF32[($0_1 + 124 | 0) >> 2]);
            $585_1 = Math_fround($11_1 * $11_1);
            $11_1 = Math_fround(HEAPF32[($0_1 + 128 | 0) >> 2]);
            $592_1 = Math_fround($585_1 + Math_fround($11_1 * $11_1));
            $11_1 = Math_fround(HEAPF32[($0_1 + 132 | 0) >> 2]);
            $11_1 = Math_fround($592_1 + Math_fround($11_1 * $11_1));
           }
           if ($10_1 > $11_1 ^ 1 | 0) {
            continue label$38
           }
           break label$38;
          };
          $0_1 = HEAP32[$3_1 >> 2] | 0;
          HEAP32[$3_1 >> 2] = HEAP32[$5_1 >> 2] | 0;
          HEAP32[$5_1 >> 2] = $0_1;
          $9_1 = $9_1 + 1 | 0;
         }
         $7_1 = $3_1 + 4 | 0;
         if ($7_1 >>> 0 >= $5_1 >>> 0) {
          break label$6
         }
         label$54 : while (1) {
          $0_1 = HEAP32[$6_1 >> 2] | 0;
          label$55 : {
           label$56 : {
            $8_1 = $7_1;
            $4_1 = HEAP32[$7_1 >> 2] | 0;
            if (!(HEAPU8[($4_1 + 111 | 0) >> 0] | 0)) {
             break label$56
            }
            $4_1 = HEAP32[($4_1 + 56 | 0) >> 2] | 0;
            $564($4_1 | 0);
            $10_1 = Math_fround(Math_abs(Math_fround(HEAPF32[($4_1 + 136 | 0) >> 2])));
            break label$55;
           }
           $10_1 = Math_fround(HEAPF32[($4_1 + 124 | 0) >> 2]);
           $638_1 = Math_fround($10_1 * $10_1);
           $10_1 = Math_fround(HEAPF32[($4_1 + 128 | 0) >> 2]);
           $645_1 = Math_fround($638_1 + Math_fround($10_1 * $10_1));
           $10_1 = Math_fround(HEAPF32[($4_1 + 132 | 0) >> 2]);
           $10_1 = Math_fround($645_1 + Math_fround($10_1 * $10_1));
          }
          label$57 : {
           label$58 : {
            if (!(HEAPU8[($0_1 + 111 | 0) >> 0] | 0)) {
             break label$58
            }
            $0_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
            $564($0_1 | 0);
            $11_1 = Math_fround(Math_abs(Math_fround(HEAPF32[($0_1 + 136 | 0) >> 2])));
            break label$57;
           }
           $11_1 = Math_fround(HEAPF32[($0_1 + 124 | 0) >> 2]);
           $668_1 = Math_fround($11_1 * $11_1);
           $11_1 = Math_fround(HEAPF32[($0_1 + 128 | 0) >> 2]);
           $675_1 = Math_fround($668_1 + Math_fround($11_1 * $11_1));
           $11_1 = Math_fround(HEAPF32[($0_1 + 132 | 0) >> 2]);
           $11_1 = Math_fround($675_1 + Math_fround($11_1 * $11_1));
          }
          $7_1 = $8_1 + 4 | 0;
          if ($10_1 > $11_1) {
           continue label$54
          }
          label$59 : while (1) {
           $0_1 = HEAP32[$6_1 >> 2] | 0;
           label$60 : {
            label$61 : {
             $5_1 = $5_1 + -4 | 0;
             $4_1 = HEAP32[$5_1 >> 2] | 0;
             if (!(HEAPU8[($4_1 + 111 | 0) >> 0] | 0)) {
              break label$61
             }
             $4_1 = HEAP32[($4_1 + 56 | 0) >> 2] | 0;
             $564($4_1 | 0);
             $10_1 = Math_fround(Math_abs(Math_fround(HEAPF32[($4_1 + 136 | 0) >> 2])));
             break label$60;
            }
            $10_1 = Math_fround(HEAPF32[($4_1 + 124 | 0) >> 2]);
            $709_1 = Math_fround($10_1 * $10_1);
            $10_1 = Math_fround(HEAPF32[($4_1 + 128 | 0) >> 2]);
            $716_1 = Math_fround($709_1 + Math_fround($10_1 * $10_1));
            $10_1 = Math_fround(HEAPF32[($4_1 + 132 | 0) >> 2]);
            $10_1 = Math_fround($716_1 + Math_fround($10_1 * $10_1));
           }
           label$62 : {
            label$63 : {
             if (!(HEAPU8[($0_1 + 111 | 0) >> 0] | 0)) {
              break label$63
             }
             $0_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
             $564($0_1 | 0);
             $11_1 = Math_fround(Math_abs(Math_fround(HEAPF32[($0_1 + 136 | 0) >> 2])));
             break label$62;
            }
            $11_1 = Math_fround(HEAPF32[($0_1 + 124 | 0) >> 2]);
            $739_1 = Math_fround($11_1 * $11_1);
            $11_1 = Math_fround(HEAPF32[($0_1 + 128 | 0) >> 2]);
            $746_1 = Math_fround($739_1 + Math_fround($11_1 * $11_1));
            $11_1 = Math_fround(HEAPF32[($0_1 + 132 | 0) >> 2]);
            $11_1 = Math_fround($746_1 + Math_fround($11_1 * $11_1));
           }
           if ($10_1 > $11_1 ^ 1 | 0) {
            continue label$59
           }
           break label$59;
          };
          label$64 : {
           if ($8_1 >>> 0 <= $5_1 >>> 0) {
            break label$64
           }
           $7_1 = $8_1;
           break label$6;
          }
          $0_1 = HEAP32[$8_1 >> 2] | 0;
          HEAP32[$8_1 >> 2] = HEAP32[$5_1 >> 2] | 0;
          HEAP32[$5_1 >> 2] = $0_1;
          $6_1 = ($6_1 | 0) == ($8_1 | 0) ? $5_1 : $6_1;
          $9_1 = $9_1 + 1 | 0;
          continue label$54;
         };
        }
        $371($3_1 | 0, $3_1 + 4 | 0 | 0, $1_1 + -4 | 0 | 0) | 0;
        break label$3;
       }
       label$65 : {
        if (($7_1 | 0) == ($6_1 | 0)) {
         break label$65
        }
        $0_1 = HEAP32[$7_1 >> 2] | 0;
        label$66 : {
         label$67 : {
          $4_1 = HEAP32[$6_1 >> 2] | 0;
          if (!(HEAPU8[($4_1 + 111 | 0) >> 0] | 0)) {
           break label$67
          }
          $4_1 = HEAP32[($4_1 + 56 | 0) >> 2] | 0;
          $564($4_1 | 0);
          $10_1 = Math_fround(Math_abs(Math_fround(HEAPF32[($4_1 + 136 | 0) >> 2])));
          break label$66;
         }
         $10_1 = Math_fround(HEAPF32[($4_1 + 124 | 0) >> 2]);
         $805_1 = Math_fround($10_1 * $10_1);
         $10_1 = Math_fround(HEAPF32[($4_1 + 128 | 0) >> 2]);
         $812_1 = Math_fround($805_1 + Math_fround($10_1 * $10_1));
         $10_1 = Math_fround(HEAPF32[($4_1 + 132 | 0) >> 2]);
         $10_1 = Math_fround($812_1 + Math_fround($10_1 * $10_1));
        }
        label$68 : {
         label$69 : {
          if (!(HEAPU8[($0_1 + 111 | 0) >> 0] | 0)) {
           break label$69
          }
          $0_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
          $564($0_1 | 0);
          $11_1 = Math_fround(Math_abs(Math_fround(HEAPF32[($0_1 + 136 | 0) >> 2])));
          break label$68;
         }
         $11_1 = Math_fround(HEAPF32[($0_1 + 124 | 0) >> 2]);
         $835_1 = Math_fround($11_1 * $11_1);
         $11_1 = Math_fround(HEAPF32[($0_1 + 128 | 0) >> 2]);
         $842_1 = Math_fround($835_1 + Math_fround($11_1 * $11_1));
         $11_1 = Math_fround(HEAPF32[($0_1 + 132 | 0) >> 2]);
         $11_1 = Math_fround($842_1 + Math_fround($11_1 * $11_1));
        }
        if ($10_1 > $11_1 ^ 1 | 0) {
         break label$65
        }
        $0_1 = HEAP32[$7_1 >> 2] | 0;
        HEAP32[$7_1 >> 2] = HEAP32[$6_1 >> 2] | 0;
        HEAP32[$6_1 >> 2] = $0_1;
        $9_1 = $9_1 + 1 | 0;
       }
       label$70 : {
        if ($9_1) {
         break label$70
        }
        $4_1 = $372($3_1 | 0, $7_1 | 0) | 0;
        label$71 : {
         $0_1 = $7_1 + 4 | 0;
         if (!($372($0_1 | 0, $1_1 | 0) | 0)) {
          break label$71
         }
         $1_1 = $7_1;
         $0_1 = $3_1;
         if (!$4_1) {
          continue label$1
         }
         break label$3;
        }
        if ($4_1) {
         continue label$2
        }
       }
       label$72 : {
        if (($7_1 - $3_1 | 0 | 0) >= ($1_1 - $7_1 | 0 | 0)) {
         break label$72
        }
        $348($3_1 | 0, $7_1 | 0);
        $0_1 = $7_1 + 4 | 0;
        continue label$2;
       }
       $348($7_1 + 4 | 0 | 0, $1_1 | 0);
       $1_1 = $7_1;
       $0_1 = $3_1;
       continue label$1;
      }
      $5_1 = $2_1;
      if (($8_1 | 0) == ($5_1 | 0)) {
       break label$3
      }
      label$73 : while (1) {
       $6_1 = $8_1;
       $0_1 = HEAP32[$6_1 >> 2] | 0;
       label$74 : {
        label$75 : {
         $4_1 = HEAP32[$3_1 >> 2] | 0;
         if (!(HEAPU8[($4_1 + 111 | 0) >> 0] | 0)) {
          break label$75
         }
         $4_1 = HEAP32[($4_1 + 56 | 0) >> 2] | 0;
         $564($4_1 | 0);
         $10_1 = Math_fround(Math_abs(Math_fround(HEAPF32[($4_1 + 136 | 0) >> 2])));
         break label$74;
        }
        $10_1 = Math_fround(HEAPF32[($4_1 + 124 | 0) >> 2]);
        $918_1 = Math_fround($10_1 * $10_1);
        $10_1 = Math_fround(HEAPF32[($4_1 + 128 | 0) >> 2]);
        $925_1 = Math_fround($918_1 + Math_fround($10_1 * $10_1));
        $10_1 = Math_fround(HEAPF32[($4_1 + 132 | 0) >> 2]);
        $10_1 = Math_fround($925_1 + Math_fround($10_1 * $10_1));
       }
       label$76 : {
        label$77 : {
         if (!(HEAPU8[($0_1 + 111 | 0) >> 0] | 0)) {
          break label$77
         }
         $0_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
         $564($0_1 | 0);
         $11_1 = Math_fround(Math_abs(Math_fround(HEAPF32[($0_1 + 136 | 0) >> 2])));
         break label$76;
        }
        $11_1 = Math_fround(HEAPF32[($0_1 + 124 | 0) >> 2]);
        $948_1 = Math_fround($11_1 * $11_1);
        $11_1 = Math_fround(HEAPF32[($0_1 + 128 | 0) >> 2]);
        $955_1 = Math_fround($948_1 + Math_fround($11_1 * $11_1));
        $11_1 = Math_fround(HEAPF32[($0_1 + 132 | 0) >> 2]);
        $11_1 = Math_fround($955_1 + Math_fround($11_1 * $11_1));
       }
       $8_1 = $6_1 + 4 | 0;
       if ($10_1 > $11_1 ^ 1 | 0) {
        continue label$73
       }
       label$78 : while (1) {
        $5_1 = $5_1 + -4 | 0;
        $0_1 = HEAP32[$5_1 >> 2] | 0;
        label$79 : {
         label$80 : {
          $4_1 = HEAP32[$3_1 >> 2] | 0;
          if (!(HEAPU8[($4_1 + 111 | 0) >> 0] | 0)) {
           break label$80
          }
          $4_1 = HEAP32[($4_1 + 56 | 0) >> 2] | 0;
          $564($4_1 | 0);
          $10_1 = Math_fround(Math_abs(Math_fround(HEAPF32[($4_1 + 136 | 0) >> 2])));
          break label$79;
         }
         $10_1 = Math_fround(HEAPF32[($4_1 + 124 | 0) >> 2]);
         $990_1 = Math_fround($10_1 * $10_1);
         $10_1 = Math_fround(HEAPF32[($4_1 + 128 | 0) >> 2]);
         $997_1 = Math_fround($990_1 + Math_fround($10_1 * $10_1));
         $10_1 = Math_fround(HEAPF32[($4_1 + 132 | 0) >> 2]);
         $10_1 = Math_fround($997_1 + Math_fround($10_1 * $10_1));
        }
        label$81 : {
         label$82 : {
          if (!(HEAPU8[($0_1 + 111 | 0) >> 0] | 0)) {
           break label$82
          }
          $0_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
          $564($0_1 | 0);
          $11_1 = Math_fround(Math_abs(Math_fround(HEAPF32[($0_1 + 136 | 0) >> 2])));
          break label$81;
         }
         $11_1 = Math_fround(HEAPF32[($0_1 + 124 | 0) >> 2]);
         $1020_1 = Math_fround($11_1 * $11_1);
         $11_1 = Math_fround(HEAPF32[($0_1 + 128 | 0) >> 2]);
         $1027_1 = Math_fround($1020_1 + Math_fround($11_1 * $11_1));
         $11_1 = Math_fround(HEAPF32[($0_1 + 132 | 0) >> 2]);
         $11_1 = Math_fround($1027_1 + Math_fround($11_1 * $11_1));
        }
        if ($10_1 > $11_1) {
         continue label$78
        }
        break label$78;
       };
       label$83 : {
        if ($6_1 >>> 0 < $5_1 >>> 0) {
         break label$83
        }
        $3_1 = $6_1;
        continue label$4;
       }
       $0_1 = HEAP32[$6_1 >> 2] | 0;
       HEAP32[$6_1 >> 2] = HEAP32[$5_1 >> 2] | 0;
       HEAP32[$5_1 >> 2] = $0_1;
       continue label$73;
      };
     };
    }
    break label$2;
   };
   break label$1;
  };
 }
 
 function $349($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $402(0 | 0);
  $394(0 | 0);
  $396(1 | 0);
  $388(1 | 0);
  $395(513 | 0);
  $397(0 | 0);
  $389(1 | 0);
  $400(1 | 0, 1 | 0, 1 | 0, 1 | 0);
  label$1 : {
   if ($1_1 >>> 0 >= $2_1 >>> 0) {
    break label$1
   }
   label$2 : while (1) {
    $3_1 = HEAP32[((HEAP32[$1_1 >> 2] | 0) + 64 | 0) >> 2] | 0;
    HEAP32[($3_1 + 52 | 0) >> 2] = HEAP32[($3_1 + 44 | 0) >> 2] | 0;
    $256(HEAP32[$1_1 >> 2] | 0 | 0, 0 | 0);
    $1_1 = $1_1 + 4 | 0;
    if ($1_1 >>> 0 < $2_1 >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $350($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $8_1 = 0, $5_1 = 0, $15_1 = Math_fround(0), i64toi32_i32$0 = 0, $9_1 = 0, $10_1 = 0, $6_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $16_1 = Math_fround(0), $17_1 = Math_fround(0), $11_1 = 0, $18_1 = Math_fround(0), $13_1 = 0, $44_1 = 0, $48_1 = 0, $7_1 = 0, $12_1 = 0, $14_1 = 0, $216_1 = 0, $225_1 = 0, $251_1 = Math_fround(0), $261_1 = Math_fround(0);
  $5_1 = global$0 - 80 | 0;
  global$0 = $5_1;
  label$1 : {
   label$2 : {
    if (!(HEAPU8[($1_1 + 81 | 0) >> 0] | 0)) {
     break label$2
    }
    $188(HEAP32[($0_1 + 152 | 0) >> 2] | 0 | 0);
    $6_1 = HEAP32[((HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($6_1);
    HEAP32[($5_1 + 56 | 0) >> 2] = (global$1 + 23168 | 0) + 8 | 0;
    i64toi32_i32$2 = $6_1 + 324 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $44_1 = i64toi32_i32$0;
    i64toi32_i32$0 = ($5_1 + 56 | 0) + 12 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $44_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $6_1 + 316 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $48_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $5_1;
    HEAP32[($5_1 + 60 | 0) >> 2] = $48_1;
    HEAP32[($5_1 + 64 | 0) >> 2] = i64toi32_i32$0;
    $7_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($6_1) | 0;
    HEAP32[($5_1 + 48 | 0) >> 2] = 0;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = 0;
    HEAP32[($5_1 + 40 | 0) >> 2] = 0;
    HEAP32[($5_1 + 44 | 0) >> 2] = i64toi32_i32$0;
    label$3 : {
     label$4 : {
      if (!(FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 48 | 0) >> 2] | 0 | 0]($1_1) | 0)) {
       break label$4
      }
      FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($1_1);
      $564($6_1 | 0);
      $15_1 = Math_fround(Math_fround(HEAPF32[($1_1 + 116 | 0) >> 2]) - Math_fround(HEAPF32[($6_1 + 136 | 0) >> 2]));
      $16_1 = Math_fround(Math_fround(HEAPF32[($1_1 + 108 | 0) >> 2]) - Math_fround(HEAPF32[($6_1 + 128 | 0) >> 2]));
      $17_1 = Math_fround(Math_fround(HEAPF32[($1_1 + 112 | 0) >> 2]) - Math_fround(HEAPF32[($6_1 + 132 | 0) >> 2]));
      $18_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($16_1 * $16_1) + Math_fround($17_1 * $17_1)) + Math_fround($15_1 * $15_1)))));
      $15_1 = Math_fround($15_1 * $18_1);
      $17_1 = Math_fround($17_1 * $18_1);
      $16_1 = Math_fround($16_1 * $18_1);
      break label$3;
     }
     $15_1 = Math_fround(-Math_fround(HEAPF32[($1_1 + 112 | 0) >> 2]));
     $17_1 = Math_fround(-Math_fround(HEAPF32[($1_1 + 108 | 0) >> 2]));
     $16_1 = Math_fround(-Math_fround(HEAPF32[($1_1 + 104 | 0) >> 2]));
    }
    HEAPF32[($5_1 + 48 | 0) >> 2] = Math_fround(Math_fround(1.0) / $15_1);
    HEAPF32[($5_1 + 44 | 0) >> 2] = Math_fround(Math_fround(1.0) / $17_1);
    HEAPF32[($5_1 + 40 | 0) >> 2] = Math_fround(Math_fround(1.0) / $16_1);
    label$5 : {
     label$6 : {
      $8_1 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
      $9_1 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
      if (($8_1 | 0) != ($9_1 | 0)) {
       break label$6
      }
      $9_1 = $8_1;
      break label$5;
     }
     $10_1 = $0_1 + 12 | 0;
     label$7 : while (1) {
      label$8 : {
       if (!($305(HEAP32[((HEAP32[$10_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0, $55(HEAP32[$8_1 >> 2] | 0 | 0, $1_1 | 0) | 0 | 0) | 0)) {
        break label$8
       }
       $8_1 = $8_1 + 4 | 0;
       if (($8_1 | 0) != ($9_1 | 0)) {
        continue label$7
       }
       break label$5;
      }
      label$9 : while (1) {
       label$10 : {
        $9_1 = $9_1 + -4 | 0;
        if (($8_1 | 0) != ($9_1 | 0)) {
         break label$10
        }
        $9_1 = $8_1;
        break label$5;
       }
       if (!($305(HEAP32[((HEAP32[$10_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0, $55(HEAP32[$9_1 >> 2] | 0 | 0, $1_1 | 0) | 0 | 0) | 0)) {
        continue label$9
       }
       break label$9;
      };
      $11_1 = HEAP32[$8_1 >> 2] | 0;
      HEAP32[$8_1 >> 2] = HEAP32[$9_1 >> 2] | 0;
      HEAP32[$9_1 >> 2] = $11_1;
      $8_1 = $8_1 + 4 | 0;
      if (($8_1 | 0) != ($9_1 | 0)) {
       continue label$7
      }
      break label$7;
     };
    }
    label$11 : {
     $10_1 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
     if ($10_1 >>> 0 >= $9_1 >>> 0) {
      break label$11
     }
     $12_1 = $6_1 + 128 | 0;
     $11_1 = ($5_1 + 8 | 0) + 16 | 0;
     $13_1 = $5_1 + 8 | 0 | 4 | 0;
     label$12 : while (1) {
      $14_1 = global$1;
      $8_1 = HEAP32[(HEAP32[$10_1 >> 2] | 0) >> 2] | 0;
      $8_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$8_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($8_1) | 0;
      HEAP32[($5_1 + 8 | 0) >> 2] = ($14_1 + 21928 | 0) + 8 | 0;
      HEAP32[($13_1 + 8 | 0) >> 2] = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
      i64toi32_i32$2 = $8_1;
      i64toi32_i32$0 = HEAP32[($8_1 + 4 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
      $216_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $13_1;
      HEAP32[i64toi32_i32$0 >> 2] = $216_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      HEAP32[($11_1 + 8 | 0) >> 2] = HEAP32[($8_1 + 24 | 0) >> 2] | 0;
      i64toi32_i32$2 = $8_1 + 16 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $225_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $11_1;
      HEAP32[i64toi32_i32$1 >> 2] = $225_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      $8_1 = HEAP32[(HEAP32[$10_1 >> 2] | 0) >> 2] | 0;
      label$13 : {
       label$14 : {
        if (!(FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 48 | 0) >> 2] | 0 | 0]($1_1) | 0)) {
         break label$14
        }
        $8_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$8_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($8_1) | 0;
        FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($1_1);
        $15_1 = Math_fround(Math_fround(HEAPF32[($1_1 + 108 | 0) >> 2]) - Math_fround(HEAPF32[($8_1 + 4 | 0) >> 2]));
        $251_1 = Math_fround($15_1 * $15_1);
        $15_1 = Math_fround(Math_fround(HEAPF32[($1_1 + 112 | 0) >> 2]) - Math_fround(HEAPF32[($8_1 + 8 | 0) >> 2]));
        $261_1 = Math_fround($251_1 + Math_fround($15_1 * $15_1));
        $15_1 = Math_fround(Math_fround(HEAPF32[($1_1 + 116 | 0) >> 2]) - Math_fround(HEAPF32[($8_1 + 12 | 0) >> 2]));
        $15_1 = Math_fround(Math_sqrt(Math_fround($261_1 + Math_fround($15_1 * $15_1))));
        if ($15_1 <= Math_fround(Math_fround(HEAPF32[($1_1 + 132 | 0) >> 2]) + Math_fround(HEAPF32[($8_1 + 16 | 0) >> 2])) ^ 1 | 0) {
         break label$13
        }
        if (Math_fround(Math_fround(HEAPF32[($1_1 + 136 | 0) >> 2]) + Math_fround($15_1 * Math_fround(Math_fround(HEAPF32[($1_1 + 140 | 0) >> 2]) + Math_fround($15_1 * Math_fround(HEAPF32[($1_1 + 144 | 0) >> 2]))))) < Math_fround(255.0) ^ 1 | 0) {
         break label$13
        }
       }
       if (!($537($5_1 + 56 | 0 | 0, $5_1 + 8 | 0 | 0) | 0)) {
        break label$13
       }
       label$15 : {
        label$16 : {
         label$17 : {
          if ($539($7_1 | 0, $55(HEAP32[$10_1 >> 2] | 0 | 0, $1_1 | 0) | 0 | 0) | 0) {
           break label$17
          }
          $564($6_1 | 0);
          if (!($538($12_1 | 0, $5_1 + 40 | 0 | 0, $5_1 + 8 | 0 | 0, 0 | 0) | 0)) {
           break label$16
          }
         }
         $355($0_1 | 0, HEAP32[$10_1 >> 2] | 0 | 0, $1_1 | 0);
         break label$15;
        }
        $356($0_1 | 0, HEAP32[$10_1 >> 2] | 0 | 0, $1_1 | 0);
       }
       if (!($456() | 0)) {
        break label$13
       }
       $453($55(HEAP32[$10_1 >> 2] | 0 | 0, $1_1 | 0) | 0 | 0);
       $188(HEAP32[($0_1 + 152 | 0) >> 2] | 0 | 0);
      }
      $10_1 = $10_1 + 4 | 0;
      if ($10_1 >>> 0 < $9_1 >>> 0) {
       continue label$12
      }
      break label$12;
     };
    }
    label$18 : {
     if (($2_1 | 0) == ($3_1 | 0)) {
      break label$18
     }
     $357($1_1 | 0, $2_1 | 0, $3_1 | 0, $1_1 | 0, 0 | 0);
    }
    $357($1_1 | 0, $3_1 | 0, $4_1 | 0, $1_1 | 0, 1 | 0);
    fimport$9(1024 | 0);
    break label$1;
   }
   $357($1_1 | 0, $2_1 | 0, $4_1 | 0, $1_1 | 0, 0 | 0);
  }
  global$0 = $5_1 + 80 | 0;
 }
 
 function $351($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $402(1 | 0);
  $404(32774 | 0);
  $403(770 | 0, 771 | 0);
  $394(0 | 0);
  $396(0 | 0);
  $388(1 | 0);
  $395(515 | 0);
  $397(0 | 0);
  $389(1 | 0);
  $400(1 | 0, 1 | 0, 1 | 0, 1 | 0);
  label$1 : {
   if ($1_1 >>> 0 >= $2_1 >>> 0) {
    break label$1
   }
   label$2 : while (1) {
    $258(HEAP32[$1_1 >> 2] | 0 | 0, HEAP32[($0_1 + 148 | 0) >> 2] | 0 | 0);
    $1_1 = $1_1 + 4 | 0;
    if ($1_1 >>> 0 < $2_1 >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $352($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $402(1 | 0);
  $404(32774 | 0);
  $403(770 | 0, 771 | 0);
  $394(0 | 0);
  $396(1 | 0);
  $388(1 | 0);
  $395(513 | 0);
  $397(0 | 0);
  $389(1 | 0);
  $400(1 | 0, 1 | 0, 1 | 0, 1 | 0);
  label$1 : {
   if ($1_1 >>> 0 >= $2_1 >>> 0) {
    break label$1
   }
   label$2 : while (1) {
    $3_1 = HEAP32[((HEAP32[$1_1 >> 2] | 0) + 64 | 0) >> 2] | 0;
    HEAP32[($3_1 + 52 | 0) >> 2] = HEAP32[($3_1 + 40 | 0) >> 2] | 0;
    $256(HEAP32[$1_1 >> 2] | 0 | 0, 0 | 0);
    $1_1 = $1_1 + 4 | 0;
    if ($1_1 >>> 0 < $2_1 >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $353($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $402(1 | 0);
  $404(32774 | 0);
  $403(770 | 0, 771 | 0);
  $394(0 | 0);
  $396(0 | 0);
  $388($3_1 ^ 1 | 0 | 0);
  $395(513 | 0);
  $397(0 | 0);
  $389(1 | 0);
  $400(1 | 0, 1 | 0, 1 | 0, 1 | 0);
  label$1 : {
   if ($1_1 >>> 0 >= $2_1 >>> 0) {
    break label$1
   }
   label$2 : while (1) {
    label$3 : {
     $3_1 = HEAP32[((HEAP32[$1_1 >> 2] | 0) + 64 | 0) >> 2] | 0;
     if (!$3_1) {
      break label$3
     }
     HEAP32[($3_1 + 52 | 0) >> 2] = HEAP32[($3_1 + 40 | 0) >> 2] | 0;
     $256(HEAP32[$1_1 >> 2] | 0 | 0, 0 | 0);
    }
    $1_1 = $1_1 + 4 | 0;
    if ($1_1 >>> 0 < $2_1 >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $354($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $3_1 = 0, $2_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $2_1 = (HEAP32[($0_1 + 128 | 0) >> 2] | 0) + Math_imul(HEAP32[($1_1 + 100 | 0) >> 2] | 0, 12) | 0;
  $3_1 = $2_1 + 4 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        $4_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
        $5_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
        if (($4_1 | 0) == ($5_1 | 0)) {
         break label$6
        }
        HEAP32[$4_1 >> 2] = $1_1;
        HEAP32[$3_1 >> 2] = $4_1 + 4 | 0;
        break label$5;
       }
       $6_1 = HEAP32[$2_1 >> 2] | 0;
       $7_1 = $4_1 - $6_1 | 0;
       $8_1 = $7_1 >> 2 | 0;
       $4_1 = $8_1 + 1 | 0;
       if ($4_1 >>> 0 >= 1073741824 >>> 0) {
        break label$4
       }
       label$7 : {
        label$8 : {
         $5_1 = $5_1 - $6_1 | 0;
         $9_1 = $5_1 >> 1 | 0;
         $5_1 = ($5_1 >> 2 | 0) >>> 0 < 536870911 >>> 0 ? ($9_1 >>> 0 < $4_1 >>> 0 ? $4_1 : $9_1) : 1073741823;
         if ($5_1) {
          break label$8
         }
         $4_1 = 0;
         break label$7;
        }
        if ($5_1 >>> 0 >= 1073741824 >>> 0) {
         break label$3
        }
        $4_1 = $2030($5_1 << 2 | 0 | 0) | 0;
       }
       $9_1 = $2_1 + 8 | 0;
       $8_1 = $4_1 + ($8_1 << 2 | 0) | 0;
       HEAP32[$8_1 >> 2] = $1_1;
       $5_1 = $4_1 + ($5_1 << 2 | 0) | 0;
       $8_1 = $8_1 + 4 | 0;
       label$9 : {
        if (($7_1 | 0) < (1 | 0)) {
         break label$9
        }
        $2173($4_1 | 0, $6_1 | 0, $7_1 | 0) | 0;
       }
       HEAP32[$2_1 >> 2] = $4_1;
       HEAP32[$3_1 >> 2] = $8_1;
       HEAP32[$9_1 >> 2] = $5_1;
       if (!$6_1) {
        break label$5
       }
       $2032($6_1 | 0);
      }
      label$10 : {
       if ($263($1_1 | 0) | 0) {
        break label$10
       }
       if (!(HEAPU8[($1_1 + 108 | 0) >> 0] | 0)) {
        break label$10
       }
       $2_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
       if (!$2_1) {
        break label$10
       }
       if (HEAP32[($1_1 + 100 | 0) >> 2] | 0) {
        break label$10
       }
       if ((HEAP32[($1_1 + 96 | 0) >> 2] | 0 | 0) != (4 | 0)) {
        break label$10
       }
       label$11 : {
        $1_1 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
        $3_1 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
        if ($1_1 >>> 0 >= $3_1 >>> 0) {
         break label$11
        }
        HEAP32[$1_1 >> 2] = $2_1;
        HEAP32[($0_1 + 120 | 0) >> 2] = $1_1 + 4 | 0;
        return;
       }
       $7_1 = $0_1 + 116 | 0;
       $4_1 = HEAP32[$7_1 >> 2] | 0;
       $6_1 = $1_1 - $4_1 | 0;
       $5_1 = $6_1 >> 2 | 0;
       $1_1 = $5_1 + 1 | 0;
       if ($1_1 >>> 0 >= 1073741824 >>> 0) {
        break label$2
       }
       label$12 : {
        label$13 : {
         $3_1 = $3_1 - $4_1 | 0;
         $7_1 = $3_1 >> 1 | 0;
         $3_1 = ($3_1 >> 2 | 0) >>> 0 < 536870911 >>> 0 ? ($7_1 >>> 0 < $1_1 >>> 0 ? $1_1 : $7_1) : 1073741823;
         if ($3_1) {
          break label$13
         }
         $1_1 = 0;
         break label$12;
        }
        if ($3_1 >>> 0 >= 1073741824 >>> 0) {
         break label$1
        }
        $1_1 = $2030($3_1 << 2 | 0 | 0) | 0;
       }
       $5_1 = $1_1 + ($5_1 << 2 | 0) | 0;
       HEAP32[$5_1 >> 2] = $2_1;
       $2_1 = $1_1 + ($3_1 << 2 | 0) | 0;
       $3_1 = $5_1 + 4 | 0;
       label$14 : {
        if (($6_1 | 0) < (1 | 0)) {
         break label$14
        }
        $2173($1_1 | 0, $4_1 | 0, $6_1 | 0) | 0;
       }
       HEAP32[($0_1 + 124 | 0) >> 2] = $2_1;
       HEAP32[($0_1 + 120 | 0) >> 2] = $3_1;
       HEAP32[($0_1 + 116 | 0) >> 2] = $1_1;
       if (!$4_1) {
        break label$10
       }
       $2032($4_1 | 0);
      }
      return;
     }
     $2097($2_1 | 0);
     abort();
    }
    $3(global$1 + 3652 | 0 | 0);
    abort();
   }
   $2097($7_1 | 0);
   abort();
  }
  $3(global$1 + 3652 | 0 | 0);
  abort();
 }
 
 function $355($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $394(1 | 0);
  $396(0 | 0);
  $388(1 | 0);
  $395(518 | 0);
  $397(1 | 0);
  $3_1 = -1;
  $398(519 | 0, 0 | 0, -1 | 0);
  $406(7680 | 0, 7680 | 0, 34056 | 0);
  $407(7680 | 0, 7680 | 0, 34055 | 0);
  $389(0 | 0);
  $400(0 | 0, 0 | 0, 0 | 0, 0 | 0);
  $57($1_1 | 0, $2_1 | 0, 1 | 0);
  label$1 : {
   $0_1 = HEAP32[($0_1 + 152 | 0) >> 2] | 0;
   if (!(HEAP32[($0_1 + 4 | 0) >> 2] | 0)) {
    break label$1
   }
   $3_1 = HEAP32[((HEAP32[($0_1 + 56 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0;
  }
  $0_1 = HEAP32[((HEAP32[$1_1 >> 2] | 0) + 56 | 0) >> 2] | 0;
  $564($0_1 | 0);
  fimport$53($3_1 | 0, 1 | 0, 0 | 0, $0_1 + 64 | 0 | 0);
  $61($1_1 | 0, $2_1 | 0);
  $62($1_1 | 0, $2_1 | 0);
 }
 
 function $356($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $394(1 | 0);
  $396(0 | 0);
  $388(1 | 0);
  $395(513 | 0);
  $397(1 | 0);
  $3_1 = -1;
  $398(519 | 0, 0 | 0, -1 | 0);
  $406(7680 | 0, 7680 | 0, 34055 | 0);
  $407(7680 | 0, 7680 | 0, 34056 | 0);
  $389(0 | 0);
  $400(0 | 0, 0 | 0, 0 | 0, 0 | 0);
  $57($1_1 | 0, $2_1 | 0, 0 | 0);
  label$1 : {
   $0_1 = HEAP32[($0_1 + 152 | 0) >> 2] | 0;
   if (!(HEAP32[($0_1 + 4 | 0) >> 2] | 0)) {
    break label$1
   }
   $3_1 = HEAP32[((HEAP32[($0_1 + 56 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0;
  }
  $0_1 = HEAP32[((HEAP32[$1_1 >> 2] | 0) + 56 | 0) >> 2] | 0;
  $564($0_1 | 0);
  fimport$53($3_1 | 0, 1 | 0, 0 | 0, $0_1 + 64 | 0 | 0);
  $61($1_1 | 0, $2_1 | 0);
 }
 
 function $357($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = Math_fround(0), $35_1 = Math_fround(0), $45_1 = Math_fround(0);
  $402(1 | 0);
  $404(32774 | 0);
  $403(1 | 0, 1 | 0);
  $394(0 | 0);
  $396(0 | 0);
  $388(1 | 0);
  $395(515 | 0);
  $389(1 | 0);
  $400(1 | 0, 1 | 0, 1 | 0, 1 | 0);
  label$1 : {
   label$2 : {
    if (!$4_1) {
     break label$2
    }
    $397(1 | 0);
    $398(514 | 0, 0 | 0, -1 | 0);
    $399(7680 | 0, 7680 | 0, 7680 | 0);
    break label$1;
   }
   $397(0 | 0);
  }
  label$3 : {
   if ($1_1 >>> 0 >= $2_1 >>> 0) {
    break label$3
   }
   label$4 : while (1) {
    $4_1 = HEAP32[$1_1 >> 2] | 0;
    label$5 : {
     label$6 : {
      if (!(FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 48 | 0) >> 2] | 0 | 0]($3_1) | 0)) {
       break label$6
      }
      $4_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($4_1) | 0;
      FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($3_1);
      $5_1 = Math_fround(Math_fround(HEAPF32[($3_1 + 108 | 0) >> 2]) - Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]));
      $35_1 = Math_fround($5_1 * $5_1);
      $5_1 = Math_fround(Math_fround(HEAPF32[($3_1 + 112 | 0) >> 2]) - Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]));
      $45_1 = Math_fround($35_1 + Math_fround($5_1 * $5_1));
      $5_1 = Math_fround(Math_fround(HEAPF32[($3_1 + 116 | 0) >> 2]) - Math_fround(HEAPF32[($4_1 + 12 | 0) >> 2]));
      $5_1 = Math_fround(Math_sqrt(Math_fround($45_1 + Math_fround($5_1 * $5_1))));
      if ($5_1 <= Math_fround(Math_fround(HEAPF32[($3_1 + 132 | 0) >> 2]) + Math_fround(HEAPF32[($4_1 + 16 | 0) >> 2])) ^ 1 | 0) {
       break label$5
      }
      if (Math_fround(Math_fround(HEAPF32[($3_1 + 136 | 0) >> 2]) + Math_fround($5_1 * Math_fround(Math_fround(HEAPF32[($3_1 + 140 | 0) >> 2]) + Math_fround($5_1 * Math_fround(HEAPF32[($3_1 + 144 | 0) >> 2]))))) < Math_fround(255.0) ^ 1 | 0) {
       break label$5
      }
     }
     $4_1 = HEAP32[((HEAP32[$1_1 >> 2] | 0) + 64 | 0) >> 2] | 0;
     HEAP32[($4_1 + 52 | 0) >> 2] = HEAP32[($4_1 + 48 | 0) >> 2] | 0;
     $256(HEAP32[$1_1 >> 2] | 0 | 0, 0 | 0);
    }
    $1_1 = $1_1 + 4 | 0;
    if ($1_1 >>> 0 < $2_1 >>> 0) {
     continue label$4
    }
    break label$4;
   };
  }
 }
 
 function $358() {
  var $0_1 = 0, $2_1 = 0, $1_1 = 0;
  label$1 : {
   $0_1 = HEAP32[(global$1 + 67428 | 0) >> 2] | 0;
   if ($0_1) {
    break label$1
   }
   $1_1 = global$1;
   $2_1 = $2030(220 | 0) | 0;
   $0_1 = $342($2_1 | 0) | 0;
   HEAP32[($1_1 + 67428 | 0) >> 2] = $2_1;
  }
  return $0_1 | 0;
 }
 
 function $359($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ($391() | 0) {
    break label$1
   }
   $384();
  }
 }
 
 function $360($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $5_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   HEAP32[global$28 >> 2] = $1_1;
  }
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + 1 | 0;
  $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  $1_1 = $2030(4 | 0) | 0;
  HEAP32[$3_1 >> 2] = $1_1;
  $5_1 = $1_1 + 4 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $5_1;
  HEAP32[$1_1 >> 2] = $4_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = $5_1;
  $343($0_1 | 0, $3_1 | 0, $2_1 | 0);
  $2032($1_1 | 0);
  HEAP32[global$28 >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $361($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $362($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0;
 }
 
 function $363($0_1) {
  $0_1 = $0_1 | 0;
  $2032($0_1 | 0);
 }
 
 function $364($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $10_1 = 0, $15_1 = 0;
  HEAP32[$0_1 >> 2] = (global$1 + 22232 | 0) + 8 | 0;
  i64toi32_i32$2 = global$30;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  $10_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = $10_1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$2 + 12 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $15_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + 12 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $15_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function $365($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = $367($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  $5_1 = HEAP32[$2_1 >> 2] | 0;
  label$1 : {
   if (($264(HEAP32[$3_1 >> 2] | 0 | 0) | 0) >>> 0 <= ($264($5_1 | 0) | 0) >>> 0) {
    break label$1
   }
   $5_1 = HEAP32[$2_1 >> 2] | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2] | 0;
   HEAP32[$3_1 >> 2] = $5_1;
   $3_1 = HEAP32[$1_1 >> 2] | 0;
   label$2 : {
    if (($264(HEAP32[$2_1 >> 2] | 0 | 0) | 0) >>> 0 > ($264($3_1 | 0) | 0) >>> 0) {
     break label$2
    }
    return $4_1 + 1 | 0 | 0;
   }
   $3_1 = HEAP32[$1_1 >> 2] | 0;
   HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
   HEAP32[$2_1 >> 2] = $3_1;
   $2_1 = HEAP32[$0_1 >> 2] | 0;
   label$3 : {
    if (($264(HEAP32[$1_1 >> 2] | 0 | 0) | 0) >>> 0 > ($264($2_1 | 0) | 0) >>> 0) {
     break label$3
    }
    return $4_1 + 2 | 0 | 0;
   }
   $2_1 = HEAP32[$0_1 >> 2] | 0;
   HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
   HEAP32[$1_1 >> 2] = $2_1;
   $4_1 = $4_1 + 3 | 0;
  }
  return $4_1 | 0;
 }
 
 function $366($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = $365($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  $6_1 = HEAP32[$3_1 >> 2] | 0;
  label$1 : {
   if (($264(HEAP32[$4_1 >> 2] | 0 | 0) | 0) >>> 0 <= ($264($6_1 | 0) | 0) >>> 0) {
    break label$1
   }
   $6_1 = HEAP32[$3_1 >> 2] | 0;
   HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2] | 0;
   HEAP32[$4_1 >> 2] = $6_1;
   $4_1 = HEAP32[$2_1 >> 2] | 0;
   label$2 : {
    if (($264(HEAP32[$3_1 >> 2] | 0 | 0) | 0) >>> 0 > ($264($4_1 | 0) | 0) >>> 0) {
     break label$2
    }
    return $5_1 + 1 | 0 | 0;
   }
   $4_1 = HEAP32[$2_1 >> 2] | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2] | 0;
   HEAP32[$3_1 >> 2] = $4_1;
   $3_1 = HEAP32[$1_1 >> 2] | 0;
   label$3 : {
    if (($264(HEAP32[$2_1 >> 2] | 0 | 0) | 0) >>> 0 > ($264($3_1 | 0) | 0) >>> 0) {
     break label$3
    }
    return $5_1 + 2 | 0 | 0;
   }
   $3_1 = HEAP32[$1_1 >> 2] | 0;
   HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
   HEAP32[$2_1 >> 2] = $3_1;
   $3_1 = HEAP32[$0_1 >> 2] | 0;
   label$4 : {
    if (($264(HEAP32[$1_1 >> 2] | 0 | 0) | 0) >>> 0 > ($264($3_1 | 0) | 0) >>> 0) {
     break label$4
    }
    return $5_1 + 3 | 0 | 0;
   }
   $3_1 = HEAP32[$0_1 >> 2] | 0;
   HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
   HEAP32[$1_1 >> 2] = $3_1;
   $5_1 = $5_1 + 4 | 0;
  }
  return $5_1 | 0;
 }
 
 function $367($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $3_1 = HEAP32[$0_1 >> 2] | 0;
  $4_1 = $264(HEAP32[$1_1 >> 2] | 0 | 0) | 0;
  $3_1 = $264($3_1 | 0) | 0;
  $5_1 = HEAP32[$1_1 >> 2] | 0;
  $6_1 = $264(HEAP32[$2_1 >> 2] | 0 | 0) | 0;
  $5_1 = $264($5_1 | 0) | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($4_1 >>> 0 > $3_1 >>> 0) {
      break label$3
     }
     $3_1 = 0;
     if ($6_1 >>> 0 <= $5_1 >>> 0) {
      break label$1
     }
     $3_1 = HEAP32[$1_1 >> 2] | 0;
     HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $3_1;
     $2_1 = HEAP32[$0_1 >> 2] | 0;
     $3_1 = 1;
     if (($264(HEAP32[$1_1 >> 2] | 0 | 0) | 0) >>> 0 <= ($264($2_1 | 0) | 0) >>> 0) {
      break label$1
     }
     $2_1 = HEAP32[$0_1 >> 2] | 0;
     HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
     HEAP32[$1_1 >> 2] = $2_1;
     break label$2;
    }
    $4_1 = HEAP32[$0_1 >> 2] | 0;
    label$4 : {
     if ($6_1 >>> 0 <= $5_1 >>> 0) {
      break label$4
     }
     HEAP32[$0_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $4_1;
     return 1 | 0;
    }
    HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
    HEAP32[$1_1 >> 2] = $4_1;
    $3_1 = 1;
    if (($264(HEAP32[$2_1 >> 2] | 0 | 0) | 0) >>> 0 <= ($264($4_1 | 0) | 0) >>> 0) {
     break label$1
    }
    $0_1 = HEAP32[$1_1 >> 2] | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $0_1;
   }
   $3_1 = 2;
  }
  return $3_1 | 0;
 }
 
 function $368($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $6_1 = 0, $5_1 = 0, $7_1 = 0, $8_1 = 0;
  $2_1 = 1;
  label$1 : {
   label$2 : {
    switch (($1_1 - $0_1 | 0) >> 2 | 0 | 0) {
    case 2:
     $3_1 = HEAP32[$0_1 >> 2] | 0;
     $2_1 = 1;
     $4_1 = $1_1 + -4 | 0;
     if (($264(HEAP32[$4_1 >> 2] | 0 | 0) | 0) >>> 0 <= ($264($3_1 | 0) | 0) >>> 0) {
      break label$1
     }
     $2_1 = HEAP32[$0_1 >> 2] | 0;
     HEAP32[$0_1 >> 2] = HEAP32[$4_1 >> 2] | 0;
     HEAP32[$4_1 >> 2] = $2_1;
     return 1 & 1 | 0 | 0;
    case 3:
     $367($0_1 | 0, $0_1 + 4 | 0 | 0, $1_1 + -4 | 0 | 0) | 0;
     return 1 & 1 | 0 | 0;
    case 4:
     $365($0_1 | 0, $0_1 + 4 | 0 | 0, $0_1 + 8 | 0 | 0, $1_1 + -4 | 0 | 0) | 0;
     return 1 & 1 | 0 | 0;
    case 5:
     $366($0_1 | 0, $0_1 + 4 | 0 | 0, $0_1 + 8 | 0 | 0, $0_1 + 12 | 0 | 0, $1_1 + -4 | 0 | 0) | 0;
     return 1 & 1 | 0 | 0;
    case 0:
    case 1:
     break label$1;
    default:
     break label$2;
    };
   }
   $3_1 = $0_1 + 8 | 0;
   $367($0_1 | 0, $0_1 + 4 | 0 | 0, $3_1 | 0) | 0;
   label$7 : {
    label$8 : {
     $2_1 = $0_1 + 12 | 0;
     if (($2_1 | 0) == ($1_1 | 0)) {
      break label$8
     }
     $5_1 = 0;
     label$9 : {
      label$10 : while (1) {
       $4_1 = HEAP32[$3_1 >> 2] | 0;
       label$11 : {
        $6_1 = $2_1;
        if (($264(HEAP32[$2_1 >> 2] | 0 | 0) | 0) >>> 0 <= ($264($4_1 | 0) | 0) >>> 0) {
         break label$11
        }
        $7_1 = HEAP32[$6_1 >> 2] | 0;
        $4_1 = $6_1;
        label$12 : {
         label$13 : while (1) {
          $2_1 = $3_1;
          HEAP32[$4_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
          label$14 : {
           if (($2_1 | 0) != ($0_1 | 0)) {
            break label$14
           }
           $2_1 = $0_1;
           break label$12;
          }
          $3_1 = $2_1 + -4 | 0;
          $8_1 = HEAP32[$3_1 >> 2] | 0;
          $4_1 = $2_1;
          if (($264($7_1 | 0) | 0) >>> 0 > ($264($8_1 | 0) | 0) >>> 0) {
           continue label$13
          }
          break label$13;
         };
        }
        HEAP32[$2_1 >> 2] = $7_1;
        $5_1 = $5_1 + 1 | 0;
        if (($5_1 | 0) == (8 | 0)) {
         break label$9
        }
       }
       $3_1 = $6_1;
       $2_1 = $3_1 + 4 | 0;
       if (($2_1 | 0) == ($1_1 | 0)) {
        break label$8
       }
       continue label$10;
      };
     }
     $3_1 = ($6_1 + 4 | 0 | 0) == ($1_1 | 0);
     $2_1 = 0;
     break label$7;
    }
    $2_1 = 1;
   }
   $2_1 = $2_1 | $3_1 | 0;
  }
  return $2_1 & 1 | 0 | 0;
 }
 
 function $369($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $7_1 = Math_fround(0), $8_1 = Math_fround(0), $5_1 = 0, $6_1 = 0, $4_1 = 0, $32_1 = Math_fround(0), $39_1 = Math_fround(0), $62_1 = Math_fround(0), $69_1 = Math_fround(0), $107_1 = Math_fround(0), $114_1 = Math_fround(0), $137_1 = Math_fround(0), $144_1 = Math_fround(0), $185_1 = Math_fround(0), $192_1 = Math_fround(0), $215_1 = Math_fround(0), $222_1 = Math_fround(0);
  $4_1 = $371($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  $5_1 = HEAP32[$2_1 >> 2] | 0;
  label$1 : {
   label$2 : {
    $6_1 = HEAP32[$3_1 >> 2] | 0;
    if (!(HEAPU8[($6_1 + 111 | 0) >> 0] | 0)) {
     break label$2
    }
    $6_1 = HEAP32[($6_1 + 56 | 0) >> 2] | 0;
    $564($6_1 | 0);
    $7_1 = Math_fround(Math_abs(Math_fround(HEAPF32[($6_1 + 136 | 0) >> 2])));
    break label$1;
   }
   $7_1 = Math_fround(HEAPF32[($6_1 + 124 | 0) >> 2]);
   $32_1 = Math_fround($7_1 * $7_1);
   $7_1 = Math_fround(HEAPF32[($6_1 + 128 | 0) >> 2]);
   $39_1 = Math_fround($32_1 + Math_fround($7_1 * $7_1));
   $7_1 = Math_fround(HEAPF32[($6_1 + 132 | 0) >> 2]);
   $7_1 = Math_fround($39_1 + Math_fround($7_1 * $7_1));
  }
  label$3 : {
   label$4 : {
    if (!(HEAPU8[($5_1 + 111 | 0) >> 0] | 0)) {
     break label$4
    }
    $5_1 = HEAP32[($5_1 + 56 | 0) >> 2] | 0;
    $564($5_1 | 0);
    $8_1 = Math_fround(Math_abs(Math_fround(HEAPF32[($5_1 + 136 | 0) >> 2])));
    break label$3;
   }
   $8_1 = Math_fround(HEAPF32[($5_1 + 124 | 0) >> 2]);
   $62_1 = Math_fround($8_1 * $8_1);
   $8_1 = Math_fround(HEAPF32[($5_1 + 128 | 0) >> 2]);
   $69_1 = Math_fround($62_1 + Math_fround($8_1 * $8_1));
   $8_1 = Math_fround(HEAPF32[($5_1 + 132 | 0) >> 2]);
   $8_1 = Math_fround($69_1 + Math_fround($8_1 * $8_1));
  }
  label$5 : {
   if ($7_1 > $8_1 ^ 1 | 0) {
    break label$5
   }
   $5_1 = HEAP32[$2_1 >> 2] | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2] | 0;
   HEAP32[$3_1 >> 2] = $5_1;
   $5_1 = HEAP32[$1_1 >> 2] | 0;
   label$6 : {
    label$7 : {
     $3_1 = HEAP32[$2_1 >> 2] | 0;
     if (!(HEAPU8[($3_1 + 111 | 0) >> 0] | 0)) {
      break label$7
     }
     $3_1 = HEAP32[($3_1 + 56 | 0) >> 2] | 0;
     $564($3_1 | 0);
     $7_1 = Math_fround(Math_abs(Math_fround(HEAPF32[($3_1 + 136 | 0) >> 2])));
     break label$6;
    }
    $7_1 = Math_fround(HEAPF32[($3_1 + 124 | 0) >> 2]);
    $107_1 = Math_fround($7_1 * $7_1);
    $7_1 = Math_fround(HEAPF32[($3_1 + 128 | 0) >> 2]);
    $114_1 = Math_fround($107_1 + Math_fround($7_1 * $7_1));
    $7_1 = Math_fround(HEAPF32[($3_1 + 132 | 0) >> 2]);
    $7_1 = Math_fround($114_1 + Math_fround($7_1 * $7_1));
   }
   label$8 : {
    label$9 : {
     if (!(HEAPU8[($5_1 + 111 | 0) >> 0] | 0)) {
      break label$9
     }
     $5_1 = HEAP32[($5_1 + 56 | 0) >> 2] | 0;
     $564($5_1 | 0);
     $8_1 = Math_fround(Math_abs(Math_fround(HEAPF32[($5_1 + 136 | 0) >> 2])));
     break label$8;
    }
    $8_1 = Math_fround(HEAPF32[($5_1 + 124 | 0) >> 2]);
    $137_1 = Math_fround($8_1 * $8_1);
    $8_1 = Math_fround(HEAPF32[($5_1 + 128 | 0) >> 2]);
    $144_1 = Math_fround($137_1 + Math_fround($8_1 * $8_1));
    $8_1 = Math_fround(HEAPF32[($5_1 + 132 | 0) >> 2]);
    $8_1 = Math_fround($144_1 + Math_fround($8_1 * $8_1));
   }
   label$10 : {
    if (!($7_1 > $8_1 ^ 1 | 0)) {
     break label$10
    }
    return $4_1 + 1 | 0 | 0;
   }
   $5_1 = HEAP32[$1_1 >> 2] | 0;
   HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
   HEAP32[$2_1 >> 2] = $5_1;
   $2_1 = HEAP32[$0_1 >> 2] | 0;
   label$11 : {
    label$12 : {
     $5_1 = HEAP32[$1_1 >> 2] | 0;
     if (!(HEAPU8[($5_1 + 111 | 0) >> 0] | 0)) {
      break label$12
     }
     $5_1 = HEAP32[($5_1 + 56 | 0) >> 2] | 0;
     $564($5_1 | 0);
     $7_1 = Math_fround(Math_abs(Math_fround(HEAPF32[($5_1 + 136 | 0) >> 2])));
     break label$11;
    }
    $7_1 = Math_fround(HEAPF32[($5_1 + 124 | 0) >> 2]);
    $185_1 = Math_fround($7_1 * $7_1);
    $7_1 = Math_fround(HEAPF32[($5_1 + 128 | 0) >> 2]);
    $192_1 = Math_fround($185_1 + Math_fround($7_1 * $7_1));
    $7_1 = Math_fround(HEAPF32[($5_1 + 132 | 0) >> 2]);
    $7_1 = Math_fround($192_1 + Math_fround($7_1 * $7_1));
   }
   label$13 : {
    label$14 : {
     if (!(HEAPU8[($2_1 + 111 | 0) >> 0] | 0)) {
      break label$14
     }
     $2_1 = HEAP32[($2_1 + 56 | 0) >> 2] | 0;
     $564($2_1 | 0);
     $8_1 = Math_fround(Math_abs(Math_fround(HEAPF32[($2_1 + 136 | 0) >> 2])));
     break label$13;
    }
    $8_1 = Math_fround(HEAPF32[($2_1 + 124 | 0) >> 2]);
    $215_1 = Math_fround($8_1 * $8_1);
    $8_1 = Math_fround(HEAPF32[($2_1 + 128 | 0) >> 2]);
    $222_1 = Math_fround($215_1 + Math_fround($8_1 * $8_1));
    $8_1 = Math_fround(HEAPF32[($2_1 + 132 | 0) >> 2]);
    $8_1 = Math_fround($222_1 + Math_fround($8_1 * $8_1));
   }
   label$15 : {
    if (!($7_1 > $8_1 ^ 1 | 0)) {
     break label$15
    }
    return $4_1 + 2 | 0 | 0;
   }
   $2_1 = HEAP32[$0_1 >> 2] | 0;
   HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
   HEAP32[$1_1 >> 2] = $2_1;
   $4_1 = $4_1 + 3 | 0;
  }
  return $4_1 | 0;
 }
 
 function $370($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $8_1 = Math_fround(0), $9_1 = Math_fround(0), $6_1 = 0, $7_1 = 0, $5_1 = 0, $34_1 = Math_fround(0), $41_1 = Math_fround(0), $64_1 = Math_fround(0), $71_1 = Math_fround(0), $109_1 = Math_fround(0), $116_1 = Math_fround(0), $139_1 = Math_fround(0), $146_1 = Math_fround(0), $187_1 = Math_fround(0), $194_1 = Math_fround(0), $217_1 = Math_fround(0), $224_1 = Math_fround(0), $265_1 = Math_fround(0), $272_1 = Math_fround(0), $295_1 = Math_fround(0), $302_1 = Math_fround(0);
  $5_1 = $369($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  $6_1 = HEAP32[$3_1 >> 2] | 0;
  label$1 : {
   label$2 : {
    $7_1 = HEAP32[$4_1 >> 2] | 0;
    if (!(HEAPU8[($7_1 + 111 | 0) >> 0] | 0)) {
     break label$2
    }
    $7_1 = HEAP32[($7_1 + 56 | 0) >> 2] | 0;
    $564($7_1 | 0);
    $8_1 = Math_fround(Math_abs(Math_fround(HEAPF32[($7_1 + 136 | 0) >> 2])));
    break label$1;
   }
   $8_1 = Math_fround(HEAPF32[($7_1 + 124 | 0) >> 2]);
   $34_1 = Math_fround($8_1 * $8_1);
   $8_1 = Math_fround(HEAPF32[($7_1 + 128 | 0) >> 2]);
   $41_1 = Math_fround($34_1 + Math_fround($8_1 * $8_1));
   $8_1 = Math_fround(HEAPF32[($7_1 + 132 | 0) >> 2]);
   $8_1 = Math_fround($41_1 + Math_fround($8_1 * $8_1));
  }
  label$3 : {
   label$4 : {
    if (!(HEAPU8[($6_1 + 111 | 0) >> 0] | 0)) {
     break label$4
    }
    $6_1 = HEAP32[($6_1 + 56 | 0) >> 2] | 0;
    $564($6_1 | 0);
    $9_1 = Math_fround(Math_abs(Math_fround(HEAPF32[($6_1 + 136 | 0) >> 2])));
    break label$3;
   }
   $9_1 = Math_fround(HEAPF32[($6_1 + 124 | 0) >> 2]);
   $64_1 = Math_fround($9_1 * $9_1);
   $9_1 = Math_fround(HEAPF32[($6_1 + 128 | 0) >> 2]);
   $71_1 = Math_fround($64_1 + Math_fround($9_1 * $9_1));
   $9_1 = Math_fround(HEAPF32[($6_1 + 132 | 0) >> 2]);
   $9_1 = Math_fround($71_1 + Math_fround($9_1 * $9_1));
  }
  label$5 : {
   if ($8_1 > $9_1 ^ 1 | 0) {
    break label$5
   }
   $6_1 = HEAP32[$3_1 >> 2] | 0;
   HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2] | 0;
   HEAP32[$4_1 >> 2] = $6_1;
   $6_1 = HEAP32[$2_1 >> 2] | 0;
   label$6 : {
    label$7 : {
     $4_1 = HEAP32[$3_1 >> 2] | 0;
     if (!(HEAPU8[($4_1 + 111 | 0) >> 0] | 0)) {
      break label$7
     }
     $4_1 = HEAP32[($4_1 + 56 | 0) >> 2] | 0;
     $564($4_1 | 0);
     $8_1 = Math_fround(Math_abs(Math_fround(HEAPF32[($4_1 + 136 | 0) >> 2])));
     break label$6;
    }
    $8_1 = Math_fround(HEAPF32[($4_1 + 124 | 0) >> 2]);
    $109_1 = Math_fround($8_1 * $8_1);
    $8_1 = Math_fround(HEAPF32[($4_1 + 128 | 0) >> 2]);
    $116_1 = Math_fround($109_1 + Math_fround($8_1 * $8_1));
    $8_1 = Math_fround(HEAPF32[($4_1 + 132 | 0) >> 2]);
    $8_1 = Math_fround($116_1 + Math_fround($8_1 * $8_1));
   }
   label$8 : {
    label$9 : {
     if (!(HEAPU8[($6_1 + 111 | 0) >> 0] | 0)) {
      break label$9
     }
     $6_1 = HEAP32[($6_1 + 56 | 0) >> 2] | 0;
     $564($6_1 | 0);
     $9_1 = Math_fround(Math_abs(Math_fround(HEAPF32[($6_1 + 136 | 0) >> 2])));
     break label$8;
    }
    $9_1 = Math_fround(HEAPF32[($6_1 + 124 | 0) >> 2]);
    $139_1 = Math_fround($9_1 * $9_1);
    $9_1 = Math_fround(HEAPF32[($6_1 + 128 | 0) >> 2]);
    $146_1 = Math_fround($139_1 + Math_fround($9_1 * $9_1));
    $9_1 = Math_fround(HEAPF32[($6_1 + 132 | 0) >> 2]);
    $9_1 = Math_fround($146_1 + Math_fround($9_1 * $9_1));
   }
   label$10 : {
    if (!($8_1 > $9_1 ^ 1 | 0)) {
     break label$10
    }
    return $5_1 + 1 | 0 | 0;
   }
   $6_1 = HEAP32[$2_1 >> 2] | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2] | 0;
   HEAP32[$3_1 >> 2] = $6_1;
   $3_1 = HEAP32[$1_1 >> 2] | 0;
   label$11 : {
    label$12 : {
     $6_1 = HEAP32[$2_1 >> 2] | 0;
     if (!(HEAPU8[($6_1 + 111 | 0) >> 0] | 0)) {
      break label$12
     }
     $6_1 = HEAP32[($6_1 + 56 | 0) >> 2] | 0;
     $564($6_1 | 0);
     $8_1 = Math_fround(Math_abs(Math_fround(HEAPF32[($6_1 + 136 | 0) >> 2])));
     break label$11;
    }
    $8_1 = Math_fround(HEAPF32[($6_1 + 124 | 0) >> 2]);
    $187_1 = Math_fround($8_1 * $8_1);
    $8_1 = Math_fround(HEAPF32[($6_1 + 128 | 0) >> 2]);
    $194_1 = Math_fround($187_1 + Math_fround($8_1 * $8_1));
    $8_1 = Math_fround(HEAPF32[($6_1 + 132 | 0) >> 2]);
    $8_1 = Math_fround($194_1 + Math_fround($8_1 * $8_1));
   }
   label$13 : {
    label$14 : {
     if (!(HEAPU8[($3_1 + 111 | 0) >> 0] | 0)) {
      break label$14
     }
     $3_1 = HEAP32[($3_1 + 56 | 0) >> 2] | 0;
     $564($3_1 | 0);
     $9_1 = Math_fround(Math_abs(Math_fround(HEAPF32[($3_1 + 136 | 0) >> 2])));
     break label$13;
    }
    $9_1 = Math_fround(HEAPF32[($3_1 + 124 | 0) >> 2]);
    $217_1 = Math_fround($9_1 * $9_1);
    $9_1 = Math_fround(HEAPF32[($3_1 + 128 | 0) >> 2]);
    $224_1 = Math_fround($217_1 + Math_fround($9_1 * $9_1));
    $9_1 = Math_fround(HEAPF32[($3_1 + 132 | 0) >> 2]);
    $9_1 = Math_fround($224_1 + Math_fround($9_1 * $9_1));
   }
   label$15 : {
    if (!($8_1 > $9_1 ^ 1 | 0)) {
     break label$15
    }
    return $5_1 + 2 | 0 | 0;
   }
   $3_1 = HEAP32[$1_1 >> 2] | 0;
   HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
   HEAP32[$2_1 >> 2] = $3_1;
   $3_1 = HEAP32[$0_1 >> 2] | 0;
   label$16 : {
    label$17 : {
     $6_1 = HEAP32[$1_1 >> 2] | 0;
     if (!(HEAPU8[($6_1 + 111 | 0) >> 0] | 0)) {
      break label$17
     }
     $6_1 = HEAP32[($6_1 + 56 | 0) >> 2] | 0;
     $564($6_1 | 0);
     $8_1 = Math_fround(Math_abs(Math_fround(HEAPF32[($6_1 + 136 | 0) >> 2])));
     break label$16;
    }
    $8_1 = Math_fround(HEAPF32[($6_1 + 124 | 0) >> 2]);
    $265_1 = Math_fround($8_1 * $8_1);
    $8_1 = Math_fround(HEAPF32[($6_1 + 128 | 0) >> 2]);
    $272_1 = Math_fround($265_1 + Math_fround($8_1 * $8_1));
    $8_1 = Math_fround(HEAPF32[($6_1 + 132 | 0) >> 2]);
    $8_1 = Math_fround($272_1 + Math_fround($8_1 * $8_1));
   }
   label$18 : {
    label$19 : {
     if (!(HEAPU8[($3_1 + 111 | 0) >> 0] | 0)) {
      break label$19
     }
     $3_1 = HEAP32[($3_1 + 56 | 0) >> 2] | 0;
     $564($3_1 | 0);
     $9_1 = Math_fround(Math_abs(Math_fround(HEAPF32[($3_1 + 136 | 0) >> 2])));
     break label$18;
    }
    $9_1 = Math_fround(HEAPF32[($3_1 + 124 | 0) >> 2]);
    $295_1 = Math_fround($9_1 * $9_1);
    $9_1 = Math_fround(HEAPF32[($3_1 + 128 | 0) >> 2]);
    $302_1 = Math_fround($295_1 + Math_fround($9_1 * $9_1));
    $9_1 = Math_fround(HEAPF32[($3_1 + 132 | 0) >> 2]);
    $9_1 = Math_fround($302_1 + Math_fround($9_1 * $9_1));
   }
   label$20 : {
    if (!($8_1 > $9_1 ^ 1 | 0)) {
     break label$20
    }
    return $5_1 + 3 | 0 | 0;
   }
   $3_1 = HEAP32[$0_1 >> 2] | 0;
   HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
   HEAP32[$1_1 >> 2] = $3_1;
   $5_1 = $5_1 + 4 | 0;
  }
  return $5_1 | 0;
 }
 
 function $371($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $6_1 = Math_fround(0), $7_1 = Math_fround(0), $3_1 = 0, $4_1 = 0, $5_1 = 0, $27_1 = Math_fround(0), $34_1 = Math_fround(0), $57_1 = Math_fround(0), $64_1 = Math_fround(0), $96_1 = Math_fround(0), $103_1 = Math_fround(0), $126_1 = Math_fround(0), $133_1 = Math_fround(0), $171_1 = Math_fround(0), $178_1 = Math_fround(0), $201_1 = Math_fround(0), $208_1 = Math_fround(0), $242_1 = Math_fround(0), $249_1 = Math_fround(0), $272_1 = Math_fround(0), $279_1 = Math_fround(0), $320_1 = Math_fround(0), $327_1 = Math_fround(0), $350_1 = Math_fround(0), $357_1 = Math_fround(0);
  $3_1 = HEAP32[$0_1 >> 2] | 0;
  label$1 : {
   label$2 : {
    $4_1 = HEAP32[$1_1 >> 2] | 0;
    if (!(HEAPU8[($4_1 + 111 | 0) >> 0] | 0)) {
     break label$2
    }
    $4_1 = HEAP32[($4_1 + 56 | 0) >> 2] | 0;
    $564($4_1 | 0);
    $6_1 = Math_fround(Math_abs(Math_fround(HEAPF32[($4_1 + 136 | 0) >> 2])));
    break label$1;
   }
   $6_1 = Math_fround(HEAPF32[($4_1 + 124 | 0) >> 2]);
   $27_1 = Math_fround($6_1 * $6_1);
   $6_1 = Math_fround(HEAPF32[($4_1 + 128 | 0) >> 2]);
   $34_1 = Math_fround($27_1 + Math_fround($6_1 * $6_1));
   $6_1 = Math_fround(HEAPF32[($4_1 + 132 | 0) >> 2]);
   $6_1 = Math_fround($34_1 + Math_fround($6_1 * $6_1));
  }
  label$3 : {
   label$4 : {
    if (!(HEAPU8[($3_1 + 111 | 0) >> 0] | 0)) {
     break label$4
    }
    $3_1 = HEAP32[($3_1 + 56 | 0) >> 2] | 0;
    $564($3_1 | 0);
    $7_1 = Math_fround(Math_abs(Math_fround(HEAPF32[($3_1 + 136 | 0) >> 2])));
    break label$3;
   }
   $7_1 = Math_fround(HEAPF32[($3_1 + 124 | 0) >> 2]);
   $57_1 = Math_fround($7_1 * $7_1);
   $7_1 = Math_fround(HEAPF32[($3_1 + 128 | 0) >> 2]);
   $64_1 = Math_fround($57_1 + Math_fround($7_1 * $7_1));
   $7_1 = Math_fround(HEAPF32[($3_1 + 132 | 0) >> 2]);
   $7_1 = Math_fround($64_1 + Math_fround($7_1 * $7_1));
  }
  $3_1 = HEAP32[$1_1 >> 2] | 0;
  $4_1 = HEAP32[$2_1 >> 2] | 0;
  $5_1 = HEAPU8[($4_1 + 111 | 0) >> 0] | 0;
  label$5 : {
   label$6 : {
    label$7 : {
     if ($6_1 > $7_1) {
      break label$7
     }
     label$8 : {
      label$9 : {
       if (!($5_1 & 255 | 0)) {
        break label$9
       }
       $4_1 = HEAP32[($4_1 + 56 | 0) >> 2] | 0;
       $564($4_1 | 0);
       $6_1 = Math_fround(Math_abs(Math_fround(HEAPF32[($4_1 + 136 | 0) >> 2])));
       break label$8;
      }
      $6_1 = Math_fround(HEAPF32[($4_1 + 124 | 0) >> 2]);
      $96_1 = Math_fround($6_1 * $6_1);
      $6_1 = Math_fround(HEAPF32[($4_1 + 128 | 0) >> 2]);
      $103_1 = Math_fround($96_1 + Math_fround($6_1 * $6_1));
      $6_1 = Math_fround(HEAPF32[($4_1 + 132 | 0) >> 2]);
      $6_1 = Math_fround($103_1 + Math_fround($6_1 * $6_1));
     }
     label$10 : {
      label$11 : {
       if (!(HEAPU8[($3_1 + 111 | 0) >> 0] | 0)) {
        break label$11
       }
       $3_1 = HEAP32[($3_1 + 56 | 0) >> 2] | 0;
       $564($3_1 | 0);
       $7_1 = Math_fround(Math_abs(Math_fround(HEAPF32[($3_1 + 136 | 0) >> 2])));
       break label$10;
      }
      $7_1 = Math_fround(HEAPF32[($3_1 + 124 | 0) >> 2]);
      $126_1 = Math_fround($7_1 * $7_1);
      $7_1 = Math_fround(HEAPF32[($3_1 + 128 | 0) >> 2]);
      $133_1 = Math_fround($126_1 + Math_fround($7_1 * $7_1));
      $7_1 = Math_fround(HEAPF32[($3_1 + 132 | 0) >> 2]);
      $7_1 = Math_fround($133_1 + Math_fround($7_1 * $7_1));
     }
     $3_1 = 0;
     if ($6_1 > $7_1 ^ 1 | 0) {
      break label$5
     }
     $3_1 = HEAP32[$1_1 >> 2] | 0;
     HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $3_1;
     $3_1 = HEAP32[$0_1 >> 2] | 0;
     label$12 : {
      label$13 : {
       $2_1 = HEAP32[$1_1 >> 2] | 0;
       if (!(HEAPU8[($2_1 + 111 | 0) >> 0] | 0)) {
        break label$13
       }
       $2_1 = HEAP32[($2_1 + 56 | 0) >> 2] | 0;
       $564($2_1 | 0);
       $6_1 = Math_fround(Math_abs(Math_fround(HEAPF32[($2_1 + 136 | 0) >> 2])));
       break label$12;
      }
      $6_1 = Math_fround(HEAPF32[($2_1 + 124 | 0) >> 2]);
      $171_1 = Math_fround($6_1 * $6_1);
      $6_1 = Math_fround(HEAPF32[($2_1 + 128 | 0) >> 2]);
      $178_1 = Math_fround($171_1 + Math_fround($6_1 * $6_1));
      $6_1 = Math_fround(HEAPF32[($2_1 + 132 | 0) >> 2]);
      $6_1 = Math_fround($178_1 + Math_fround($6_1 * $6_1));
     }
     label$14 : {
      label$15 : {
       if (!(HEAPU8[($3_1 + 111 | 0) >> 0] | 0)) {
        break label$15
       }
       $3_1 = HEAP32[($3_1 + 56 | 0) >> 2] | 0;
       $564($3_1 | 0);
       $7_1 = Math_fround(Math_abs(Math_fround(HEAPF32[($3_1 + 136 | 0) >> 2])));
       break label$14;
      }
      $7_1 = Math_fround(HEAPF32[($3_1 + 124 | 0) >> 2]);
      $201_1 = Math_fround($7_1 * $7_1);
      $7_1 = Math_fround(HEAPF32[($3_1 + 128 | 0) >> 2]);
      $208_1 = Math_fround($201_1 + Math_fround($7_1 * $7_1));
      $7_1 = Math_fround(HEAPF32[($3_1 + 132 | 0) >> 2]);
      $7_1 = Math_fround($208_1 + Math_fround($7_1 * $7_1));
     }
     $3_1 = 1;
     if ($6_1 > $7_1 ^ 1 | 0) {
      break label$5
     }
     $3_1 = HEAP32[$0_1 >> 2] | 0;
     HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
     HEAP32[$1_1 >> 2] = $3_1;
     break label$6;
    }
    label$16 : {
     label$17 : {
      if (!($5_1 & 255 | 0)) {
       break label$17
      }
      $4_1 = HEAP32[($4_1 + 56 | 0) >> 2] | 0;
      $564($4_1 | 0);
      $6_1 = Math_fround(Math_abs(Math_fround(HEAPF32[($4_1 + 136 | 0) >> 2])));
      break label$16;
     }
     $6_1 = Math_fround(HEAPF32[($4_1 + 124 | 0) >> 2]);
     $242_1 = Math_fround($6_1 * $6_1);
     $6_1 = Math_fround(HEAPF32[($4_1 + 128 | 0) >> 2]);
     $249_1 = Math_fround($242_1 + Math_fround($6_1 * $6_1));
     $6_1 = Math_fround(HEAPF32[($4_1 + 132 | 0) >> 2]);
     $6_1 = Math_fround($249_1 + Math_fround($6_1 * $6_1));
    }
    label$18 : {
     label$19 : {
      if (!(HEAPU8[($3_1 + 111 | 0) >> 0] | 0)) {
       break label$19
      }
      $3_1 = HEAP32[($3_1 + 56 | 0) >> 2] | 0;
      $564($3_1 | 0);
      $7_1 = Math_fround(Math_abs(Math_fround(HEAPF32[($3_1 + 136 | 0) >> 2])));
      break label$18;
     }
     $7_1 = Math_fround(HEAPF32[($3_1 + 124 | 0) >> 2]);
     $272_1 = Math_fround($7_1 * $7_1);
     $7_1 = Math_fround(HEAPF32[($3_1 + 128 | 0) >> 2]);
     $279_1 = Math_fround($272_1 + Math_fround($7_1 * $7_1));
     $7_1 = Math_fround(HEAPF32[($3_1 + 132 | 0) >> 2]);
     $7_1 = Math_fround($279_1 + Math_fround($7_1 * $7_1));
    }
    $3_1 = HEAP32[$0_1 >> 2] | 0;
    label$20 : {
     if ($6_1 > $7_1 ^ 1 | 0) {
      break label$20
     }
     HEAP32[$0_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $3_1;
     return 1 | 0;
    }
    HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
    HEAP32[$1_1 >> 2] = $3_1;
    label$21 : {
     label$22 : {
      $0_1 = HEAP32[$2_1 >> 2] | 0;
      if (!(HEAPU8[($0_1 + 111 | 0) >> 0] | 0)) {
       break label$22
      }
      $0_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
      $564($0_1 | 0);
      $6_1 = Math_fround(Math_abs(Math_fround(HEAPF32[($0_1 + 136 | 0) >> 2])));
      break label$21;
     }
     $6_1 = Math_fround(HEAPF32[($0_1 + 124 | 0) >> 2]);
     $320_1 = Math_fround($6_1 * $6_1);
     $6_1 = Math_fround(HEAPF32[($0_1 + 128 | 0) >> 2]);
     $327_1 = Math_fround($320_1 + Math_fround($6_1 * $6_1));
     $6_1 = Math_fround(HEAPF32[($0_1 + 132 | 0) >> 2]);
     $6_1 = Math_fround($327_1 + Math_fround($6_1 * $6_1));
    }
    label$23 : {
     label$24 : {
      if (!(HEAPU8[($3_1 + 111 | 0) >> 0] | 0)) {
       break label$24
      }
      $3_1 = HEAP32[($3_1 + 56 | 0) >> 2] | 0;
      $564($3_1 | 0);
      $7_1 = Math_fround(Math_abs(Math_fround(HEAPF32[($3_1 + 136 | 0) >> 2])));
      break label$23;
     }
     $7_1 = Math_fround(HEAPF32[($3_1 + 124 | 0) >> 2]);
     $350_1 = Math_fround($7_1 * $7_1);
     $7_1 = Math_fround(HEAPF32[($3_1 + 128 | 0) >> 2]);
     $357_1 = Math_fround($350_1 + Math_fround($7_1 * $7_1));
     $7_1 = Math_fround(HEAPF32[($3_1 + 132 | 0) >> 2]);
     $7_1 = Math_fround($357_1 + Math_fround($7_1 * $7_1));
    }
    $3_1 = 1;
    if ($6_1 > $7_1 ^ 1 | 0) {
     break label$5
    }
    $3_1 = HEAP32[$1_1 >> 2] | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $3_1;
   }
   $3_1 = 2;
  }
  return $3_1 | 0;
 }
 
 function $372($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $9_1 = Math_fround(0), $10_1 = Math_fround(0), $2_1 = 0, $3_1 = 0, $5_1 = 0, $7_1 = 0, $6_1 = 0, $8_1 = 0, $36_1 = Math_fround(0), $43_1 = Math_fround(0), $66_1 = Math_fround(0), $73_1 = Math_fround(0), $152_1 = Math_fround(0), $159_1 = Math_fround(0), $182_1 = Math_fround(0), $189_1 = Math_fround(0), $230_1 = Math_fround(0), $236_1 = Math_fround(0), $258_1 = Math_fround(0), $265_1 = Math_fround(0);
  $2_1 = 1;
  label$1 : {
   label$2 : {
    switch (($1_1 - $0_1 | 0) >> 2 | 0 | 0) {
    case 2:
     $2_1 = HEAP32[$0_1 >> 2] | 0;
     label$7 : {
      label$8 : {
       $3_1 = $1_1 + -4 | 0;
       $4_1 = HEAP32[$3_1 >> 2] | 0;
       if (!(HEAPU8[($4_1 + 111 | 0) >> 0] | 0)) {
        break label$8
       }
       $4_1 = HEAP32[($4_1 + 56 | 0) >> 2] | 0;
       $564($4_1 | 0);
       $9_1 = Math_fround(Math_abs(Math_fround(HEAPF32[($4_1 + 136 | 0) >> 2])));
       break label$7;
      }
      $9_1 = Math_fround(HEAPF32[($4_1 + 124 | 0) >> 2]);
      $36_1 = Math_fround($9_1 * $9_1);
      $9_1 = Math_fround(HEAPF32[($4_1 + 128 | 0) >> 2]);
      $43_1 = Math_fround($36_1 + Math_fround($9_1 * $9_1));
      $9_1 = Math_fround(HEAPF32[($4_1 + 132 | 0) >> 2]);
      $9_1 = Math_fround($43_1 + Math_fround($9_1 * $9_1));
     }
     label$9 : {
      label$10 : {
       if (!(HEAPU8[($2_1 + 111 | 0) >> 0] | 0)) {
        break label$10
       }
       $2_1 = HEAP32[($2_1 + 56 | 0) >> 2] | 0;
       $564($2_1 | 0);
       $10_1 = Math_fround(Math_abs(Math_fround(HEAPF32[($2_1 + 136 | 0) >> 2])));
       break label$9;
      }
      $10_1 = Math_fround(HEAPF32[($2_1 + 124 | 0) >> 2]);
      $66_1 = Math_fround($10_1 * $10_1);
      $10_1 = Math_fround(HEAPF32[($2_1 + 128 | 0) >> 2]);
      $73_1 = Math_fround($66_1 + Math_fround($10_1 * $10_1));
      $10_1 = Math_fround(HEAPF32[($2_1 + 132 | 0) >> 2]);
      $10_1 = Math_fround($73_1 + Math_fround($10_1 * $10_1));
     }
     $2_1 = 1;
     if ($9_1 > $10_1 ^ 1 | 0) {
      break label$1
     }
     $2_1 = HEAP32[$0_1 >> 2] | 0;
     HEAP32[$0_1 >> 2] = HEAP32[$3_1 >> 2] | 0;
     HEAP32[$3_1 >> 2] = $2_1;
     return 1 & 1 | 0 | 0;
    case 3:
     $371($0_1 | 0, $0_1 + 4 | 0 | 0, $1_1 + -4 | 0 | 0) | 0;
     return 1 & 1 | 0 | 0;
    case 4:
     $369($0_1 | 0, $0_1 + 4 | 0 | 0, $0_1 + 8 | 0 | 0, $1_1 + -4 | 0 | 0) | 0;
     return 1 & 1 | 0 | 0;
    case 5:
     $370($0_1 | 0, $0_1 + 4 | 0 | 0, $0_1 + 8 | 0 | 0, $0_1 + 12 | 0 | 0, $1_1 + -4 | 0 | 0) | 0;
     return 1 & 1 | 0 | 0;
    case 0:
    case 1:
     break label$1;
    default:
     break label$2;
    };
   }
   $5_1 = $0_1 + 8 | 0;
   $371($0_1 | 0, $0_1 + 4 | 0 | 0, $5_1 | 0) | 0;
   label$11 : {
    label$12 : {
     $4_1 = $0_1 + 12 | 0;
     if (($4_1 | 0) == ($1_1 | 0)) {
      break label$12
     }
     $6_1 = 0;
     label$13 : while (1) {
      $2_1 = HEAP32[$5_1 >> 2] | 0;
      label$14 : {
       label$15 : {
        $7_1 = $4_1;
        $4_1 = HEAP32[$4_1 >> 2] | 0;
        if (!(HEAPU8[($4_1 + 111 | 0) >> 0] | 0)) {
         break label$15
        }
        $4_1 = HEAP32[($4_1 + 56 | 0) >> 2] | 0;
        $564($4_1 | 0);
        $9_1 = Math_fround(Math_abs(Math_fround(HEAPF32[($4_1 + 136 | 0) >> 2])));
        break label$14;
       }
       $9_1 = Math_fround(HEAPF32[($4_1 + 124 | 0) >> 2]);
       $152_1 = Math_fround($9_1 * $9_1);
       $9_1 = Math_fround(HEAPF32[($4_1 + 128 | 0) >> 2]);
       $159_1 = Math_fround($152_1 + Math_fround($9_1 * $9_1));
       $9_1 = Math_fround(HEAPF32[($4_1 + 132 | 0) >> 2]);
       $9_1 = Math_fround($159_1 + Math_fround($9_1 * $9_1));
      }
      label$16 : {
       label$17 : {
        if (!(HEAPU8[($2_1 + 111 | 0) >> 0] | 0)) {
         break label$17
        }
        $2_1 = HEAP32[($2_1 + 56 | 0) >> 2] | 0;
        $564($2_1 | 0);
        $10_1 = Math_fround(Math_abs(Math_fround(HEAPF32[($2_1 + 136 | 0) >> 2])));
        break label$16;
       }
       $10_1 = Math_fround(HEAPF32[($2_1 + 124 | 0) >> 2]);
       $182_1 = Math_fround($10_1 * $10_1);
       $10_1 = Math_fround(HEAPF32[($2_1 + 128 | 0) >> 2]);
       $189_1 = Math_fround($182_1 + Math_fround($10_1 * $10_1));
       $10_1 = Math_fround(HEAPF32[($2_1 + 132 | 0) >> 2]);
       $10_1 = Math_fround($189_1 + Math_fround($10_1 * $10_1));
      }
      label$18 : {
       label$19 : {
        if ($9_1 > $10_1 ^ 1 | 0) {
         break label$19
        }
        $3_1 = HEAP32[$7_1 >> 2] | 0;
        $4_1 = $7_1;
        label$20 : {
         label$21 : while (1) {
          $2_1 = $5_1;
          HEAP32[$4_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
          label$22 : {
           if (($2_1 | 0) != ($0_1 | 0)) {
            break label$22
           }
           $2_1 = $0_1;
           break label$20;
          }
          $5_1 = $2_1 + -4 | 0;
          $4_1 = HEAP32[$5_1 >> 2] | 0;
          label$23 : {
           label$24 : {
            if (!(HEAPU8[($3_1 + 111 | 0) >> 0] | 0)) {
             break label$24
            }
            $8_1 = HEAP32[($3_1 + 56 | 0) >> 2] | 0;
            $564($8_1 | 0);
            $9_1 = Math_fround(Math_abs(Math_fround(HEAPF32[($8_1 + 136 | 0) >> 2])));
            break label$23;
           }
           $9_1 = Math_fround(HEAPF32[($3_1 + 124 | 0) >> 2]);
           $230_1 = Math_fround($9_1 * $9_1);
           $9_1 = Math_fround(HEAPF32[($3_1 + 128 | 0) >> 2]);
           $236_1 = Math_fround($230_1 + Math_fround($9_1 * $9_1));
           $9_1 = Math_fround(HEAPF32[($3_1 + 132 | 0) >> 2]);
           $9_1 = Math_fround($236_1 + Math_fround($9_1 * $9_1));
          }
          label$25 : {
           label$26 : {
            if (!(HEAPU8[($4_1 + 111 | 0) >> 0] | 0)) {
             break label$26
            }
            $4_1 = HEAP32[($4_1 + 56 | 0) >> 2] | 0;
            $564($4_1 | 0);
            $10_1 = Math_fround(Math_abs(Math_fround(HEAPF32[($4_1 + 136 | 0) >> 2])));
            break label$25;
           }
           $10_1 = Math_fround(HEAPF32[($4_1 + 124 | 0) >> 2]);
           $258_1 = Math_fround($10_1 * $10_1);
           $10_1 = Math_fround(HEAPF32[($4_1 + 128 | 0) >> 2]);
           $265_1 = Math_fround($258_1 + Math_fround($10_1 * $10_1));
           $10_1 = Math_fround(HEAPF32[($4_1 + 132 | 0) >> 2]);
           $10_1 = Math_fround($265_1 + Math_fround($10_1 * $10_1));
          }
          $4_1 = $2_1;
          if ($9_1 > $10_1) {
           continue label$21
          }
          break label$21;
         };
        }
        HEAP32[$2_1 >> 2] = $3_1;
        $6_1 = $6_1 + 1 | 0;
        if (($6_1 | 0) == (8 | 0)) {
         break label$18
        }
       }
       $5_1 = $7_1;
       $4_1 = $7_1 + 4 | 0;
       if (($4_1 | 0) == ($1_1 | 0)) {
        break label$12
       }
       continue label$13;
      }
      break label$13;
     };
     $4_1 = ($7_1 + 4 | 0 | 0) == ($1_1 | 0);
     $2_1 = 0;
     break label$11;
    }
    $2_1 = 1;
   }
   $2_1 = $2_1 | $4_1 | 0;
  }
  return $2_1 & 1 | 0 | 0;
 }
 
 function $373() {
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $0_1 = 0;
  $0_1 = global$1 + 67364 | 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  i64toi32_i32$1 = i64toi32_i32$1 + 12 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 32 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 44 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 40 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 52 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 60 | 0) >> 2] = 1065353216;
 }
 
 function $374($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$1 + 67496 | 0;
  $375($1_1 | 0, HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0);
 }
 
 function $375($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $375($0_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0);
   $375($0_1 | 0, HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0);
   $2032($1_1 | 0);
  }
 }
 
 function $376($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$1 + 67508 | 0;
  $375($1_1 | 0, HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0);
 }
 
 function $377($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$1 + 67520 | 0;
  $378($1_1 | 0, HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0);
 }
 
 function $378($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $378($0_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0);
   $378($0_1 | 0, HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0);
   $2032($1_1 | 0);
  }
 }
 
 function $379($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$1 + 67532 | 0;
  $380($1_1 | 0, HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0);
 }
 
 function $380($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $380($0_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0);
   $380($0_1 | 0, HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0);
   $2032($1_1 | 0);
  }
 }
 
 function $381($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$1 + 67544 | 0;
  $375($1_1 | 0, HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0);
 }
 
 function $382($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$1 + 67556 | 0;
  $375($1_1 | 0, HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0);
 }
 
 function $383($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $3_1 = 0;
  label$1 : {
   $1_1 = HEAP32[(global$1 + 67568 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   label$2 : {
    label$3 : {
     $2_1 = HEAP32[((global$1 + 67568 | 0) + 4 | 0) >> 2] | 0;
     if (($2_1 | 0) != ($1_1 | 0)) {
      break label$3
     }
     $2_1 = $1_1;
     break label$2;
    }
    label$4 : while (1) {
     $2_1 = $2_1 + -4 | 0;
     $3_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = 0;
     label$5 : {
      if (!$3_1) {
       break label$5
      }
      FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($3_1);
     }
     if (($2_1 | 0) != ($1_1 | 0)) {
      continue label$4
     }
     break label$4;
    };
    $2_1 = HEAP32[(global$1 + 67568 | 0) >> 2] | 0;
   }
   HEAP32[((global$1 + 67568 | 0) + 4 | 0) >> 2] = $1_1;
   $2032($2_1 | 0);
  }
 }
 
 function $384() {
  var $1_1 = 0, $2_1 = 0, $0_1 = 0, $4_1 = 0, $5_1 = 0, $30_1 = 0, $3_1 = 0;
  $0_1 = global$0 - 16 | 0;
  global$0 = $0_1;
  $1_1 = global$1;
  fimport$56(35661 | 0, $1_1 + 67580 | 0 | 0);
  fimport$56(34852 | 0, $1_1 + 67584 | 0 | 0);
  HEAP32[($1_1 + 67588 | 0) >> 2] = fimport$57(7936 | 0) | 0;
  HEAP32[($1_1 + 67592 | 0) >> 2] = fimport$57(7937 | 0) | 0;
  HEAP32[($1_1 + 67596 | 0) >> 2] = fimport$57(7938 | 0) | 0;
  $2_1 = fimport$57(35724 | 0) | 0;
  HEAP8[($1_1 + 67604 | 0) >> 0] = 1;
  HEAP32[($1_1 + 67600 | 0) >> 2] = $2_1;
  $385(1280 | 0);
  $30_1 = $1_1 + 67568 | 0;
  $1_1 = global$26;
  $2_1 = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) - (HEAP32[$1_1 >> 2] | 0) | 0;
  $1_1 = $2_1 >> 2 | 0;
  $386($30_1 | 0, $1_1 | 0);
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $3_1 = $1_1 >>> 0 > 1 >>> 0 ? $1_1 : 1;
   $1_1 = 0;
   label$2 : while (1) {
    $4_1 = global$31;
    $2_1 = $2030(16 | 0) | 0;
    $486($2_1 | 0, $1_1 | 0, HEAP32[((HEAP32[$4_1 >> 2] | 0) + ($1_1 << 2 | 0) | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($0_1 + 8 | 0) >> 2] = $2_1;
    label$3 : {
     label$4 : {
      $4_1 = global$1 + 67568 | 0;
      $5_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
      if ($5_1 >>> 0 >= (HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0) {
       break label$4
      }
      HEAP32[($0_1 + 8 | 0) >> 2] = 0;
      HEAP32[$5_1 >> 2] = $2_1;
      HEAP32[((global$1 + 67568 | 0) + 4 | 0) >> 2] = $5_1 + 4 | 0;
      break label$3;
     }
     $387(global$1 + 67568 | 0 | 0, $0_1 + 8 | 0 | 0);
    }
    $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    HEAP32[($0_1 + 8 | 0) >> 2] = 0;
    label$5 : {
     if (!$2_1) {
      break label$5
     }
     FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($2_1);
    }
    $1_1 = $1_1 + 1 | 0;
    if (($1_1 | 0) != ($3_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  label$6 : {
   if ((HEAPU8[(global$1 + 67607 | 0) >> 0] | 0 | 0) == (1 | 0)) {
    break label$6
   }
   HEAP8[(global$1 + 67607 | 0) >> 0] = 1;
   fimport$58(2929 | 0);
  }
  label$7 : {
   if ((HEAPU8[(global$1 + 67616 | 0) >> 0] | 0 | 0) == (1 | 0)) {
    break label$7
   }
   HEAP8[(global$1 + 67616 | 0) >> 0] = 1;
   fimport$58(2884 | 0);
  }
  label$8 : {
   if ((HEAP32[(global$1 + 23268 | 0) >> 2] | 0 | 0) == (6914 | 0)) {
    break label$8
   }
   HEAP32[(global$1 + 23268 | 0) >> 2] = 6914;
  }
  $385(0 | 0);
  HEAP8[(global$1 + 67605 | 0) >> 0] = 1;
  global$0 = $0_1 + 16 | 0;
 }
 
 function $385($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $1_1 = 0, $2_1 = 0, $4_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : while (1) {
   label$2 : {
    $2_1 = fimport$59() | 0;
    if (!$2_1) {
     break label$2
    }
    if (($2_1 | 0) == ($0_1 | 0)) {
     break label$2
    }
    $3_1 = global$1;
    $183(global$24 | 0, $3_1 + 3720 | 0 | 0, 14 | 0) | 0;
    label$3 : {
     label$4 : {
      switch ($2_1 + -1280 | 0 | 0) {
      case 0:
       $3_1 = global$1;
       $183(global$24 | 0, $3_1 + 3735 | 0 | 0, 15 | 0) | 0;
       break label$3;
      case 1:
       $3_1 = global$1;
       $183(global$24 | 0, $3_1 + 3751 | 0 | 0, 16 | 0) | 0;
       break label$3;
      case 2:
       $3_1 = global$1;
       $183(global$24 | 0, $3_1 + 3768 | 0 | 0, 20 | 0) | 0;
       break label$3;
      case 5:
       $3_1 = global$1;
       $183(global$24 | 0, $3_1 + 3789 | 0 | 0, 16 | 0) | 0;
       break label$3;
      case 6:
       $3_1 = global$1;
       $183(global$24 | 0, $3_1 + 3806 | 0 | 0, 32 | 0) | 0;
       break label$3;
      default:
       break label$4;
      };
     }
     $3_1 = global$1;
     $183($847($183(global$24 | 0, $3_1 + 3839 | 0 | 0, 15 | 0) | 0 | 0, $2_1 | 0) | 0 | 0, $3_1 + 3855 | 0 | 0, 1 | 0) | 0;
    }
    $3_1 = global$24;
    $774($1_1 + 8 | 0 | 0, $3_1 + (HEAP32[((HEAP32[$3_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0);
    $4_1 = $1023($1_1 + 8 | 0 | 0, global$22 | 0) | 0;
    $4_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($4_1, 10) | 0;
    $1018($1_1 + 8 | 0 | 0) | 0;
    $851($3_1 | 0, $4_1 | 0) | 0;
    $772($3_1 | 0) | 0;
   }
   if ($2_1) {
    continue label$1
   }
   break label$1;
  };
  global$0 = $1_1 + 16 | 0;
 }
 
 function $386($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0, $6_1 = 0, $5_1 = 0;
  label$1 : {
   label$2 : {
    $2_1 = HEAP32[$0_1 >> 2] | 0;
    if ((((HEAP32[($0_1 + 8 | 0) >> 2] | 0) - $2_1 | 0) >> 2 | 0) >>> 0 >= $1_1 >>> 0) {
     break label$2
    }
    if ($1_1 >>> 0 >= 1073741824 >>> 0) {
     break label$1
    }
    $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    $1_1 = $1_1 << 2 | 0;
    $4_1 = $2030($1_1 | 0) | 0;
    $5_1 = $4_1 + $1_1 | 0;
    $6_1 = $4_1 + ($3_1 - $2_1 | 0) | 0;
    label$3 : {
     label$4 : {
      if (($3_1 | 0) != ($2_1 | 0)) {
       break label$4
      }
      $1_1 = $6_1;
      break label$3;
     }
     $1_1 = $6_1;
     label$5 : while (1) {
      $3_1 = $3_1 + -4 | 0;
      $4_1 = HEAP32[$3_1 >> 2] | 0;
      HEAP32[$3_1 >> 2] = 0;
      $1_1 = $1_1 + -4 | 0;
      HEAP32[$1_1 >> 2] = $4_1;
      if (($3_1 | 0) != ($2_1 | 0)) {
       continue label$5
      }
      break label$5;
     };
     $3_1 = HEAP32[$0_1 >> 2] | 0;
     $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    }
    HEAP32[($0_1 + 8 | 0) >> 2] = $5_1;
    HEAP32[($0_1 + 4 | 0) >> 2] = $6_1;
    HEAP32[$0_1 >> 2] = $1_1;
    label$6 : {
     if (($2_1 | 0) == ($3_1 | 0)) {
      break label$6
     }
     label$7 : while (1) {
      $2_1 = $2_1 + -4 | 0;
      $1_1 = HEAP32[$2_1 >> 2] | 0;
      HEAP32[$2_1 >> 2] = 0;
      label$8 : {
       if (!$1_1) {
        break label$8
       }
       FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($1_1);
      }
      if (($2_1 | 0) != ($3_1 | 0)) {
       continue label$7
      }
      break label$7;
     };
    }
    if (!$3_1) {
     break label$2
    }
    $2032($3_1 | 0);
   }
   return;
  }
  $3(global$1 + 3857 | 0 | 0);
  abort();
 }
 
 function $387($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $2_1 = 0, $5_1 = 0, $3_1 = 0, $6_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      $2_1 = HEAP32[$0_1 >> 2] | 0;
      $3_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) - $2_1 | 0) >> 2 | 0;
      $4_1 = $3_1 + 1 | 0;
      if ($4_1 >>> 0 >= 1073741824 >>> 0) {
       break label$4
      }
      $5_1 = 0;
      label$5 : {
       $2_1 = (HEAP32[($0_1 + 8 | 0) >> 2] | 0) - $2_1 | 0;
       $6_1 = $2_1 >> 1 | 0;
       $4_1 = ($2_1 >> 2 | 0) >>> 0 < 536870911 >>> 0 ? ($6_1 >>> 0 < $4_1 >>> 0 ? $4_1 : $6_1) : 1073741823;
       if (!$4_1) {
        break label$5
       }
       if ($4_1 >>> 0 >= 1073741824 >>> 0) {
        break label$3
       }
       $5_1 = $2030($4_1 << 2 | 0 | 0) | 0;
      }
      $2_1 = HEAP32[$1_1 >> 2] | 0;
      HEAP32[$1_1 >> 2] = 0;
      $1_1 = $5_1 + ($3_1 << 2 | 0) | 0;
      HEAP32[$1_1 >> 2] = $2_1;
      $3_1 = $5_1 + ($4_1 << 2 | 0) | 0;
      $6_1 = $1_1 + 4 | 0;
      $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
      $5_1 = HEAP32[$0_1 >> 2] | 0;
      if (($4_1 | 0) == ($5_1 | 0)) {
       break label$2
      }
      label$6 : while (1) {
       $4_1 = $4_1 + -4 | 0;
       $2_1 = HEAP32[$4_1 >> 2] | 0;
       HEAP32[$4_1 >> 2] = 0;
       $1_1 = $1_1 + -4 | 0;
       HEAP32[$1_1 >> 2] = $2_1;
       if (($4_1 | 0) != ($5_1 | 0)) {
        continue label$6
       }
       break label$6;
      };
      $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
      $2_1 = HEAP32[$0_1 >> 2] | 0;
      break label$1;
     }
     $2097($0_1 | 0);
     abort();
    }
    $3(global$1 + 3857 | 0 | 0);
    abort();
   }
   $2_1 = $5_1;
  }
  HEAP32[($0_1 + 8 | 0) >> 2] = $3_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $6_1;
  HEAP32[$0_1 >> 2] = $1_1;
  label$7 : {
   if (($5_1 | 0) == ($2_1 | 0)) {
    break label$7
   }
   label$8 : while (1) {
    $5_1 = $5_1 + -4 | 0;
    $4_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = 0;
    label$9 : {
     if (!$4_1) {
      break label$9
     }
     FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($4_1);
    }
    if (($5_1 | 0) != ($2_1 | 0)) {
     continue label$8
    }
    break label$8;
   };
  }
  label$10 : {
   if (!$2_1) {
    break label$10
   }
   $2032($2_1 | 0);
  }
 }
 
 function $388($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(global$1 + 67607 | 0) >> 0] | 0 | 0) == ($0_1 | 0)) {
    break label$1
   }
   HEAP8[(global$1 + 67607 | 0) >> 0] = $0_1;
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    fimport$58(2929 | 0);
    return;
   }
   fimport$60(2929 | 0);
  }
 }
 
 function $389($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(global$1 + 67616 | 0) >> 0] | 0 | 0) == ($0_1 | 0)) {
    break label$1
   }
   HEAP8[(global$1 + 67616 | 0) >> 0] = $0_1;
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    fimport$58(2884 | 0);
    return;
   }
   fimport$60(2884 | 0);
  }
 }
 
 function $390($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAP32[(global$1 + 23268 | 0) >> 2] | 0 | 0) == ($0_1 | 0)) {
    break label$1
   }
   HEAP32[(global$1 + 23268 | 0) >> 2] = $0_1;
  }
 }
 
 function $391() {
  return HEAPU8[(global$1 + 67605 | 0) >> 0] | 0 | 0;
 }
 
 function $392() {
  return HEAPU8[(global$1 + 67606 | 0) >> 0] | 0 | 0;
 }
 
 function $393() {
  var $0_1 = 0;
  label$1 : {
   if ((HEAPU8[(global$1 + 67607 | 0) >> 0] | 0 | 0) == (1 | 0)) {
    break label$1
   }
   HEAP8[(global$1 + 67607 | 0) >> 0] = 1;
   fimport$58(2929 | 0);
  }
  label$2 : {
   if (!(HEAPU8[(global$1 + 67624 | 0) >> 0] | 0)) {
    break label$2
   }
   HEAP8[(global$1 + 67624 | 0) >> 0] = 0;
   fimport$60(34383 | 0);
  }
  label$3 : {
   if ((HEAP32[(global$1 + 23200 | 0) >> 2] | 0 | 0) == (513 | 0)) {
    break label$3
   }
   HEAP32[(global$1 + 23200 | 0) >> 2] = 513;
   fimport$61(513 | 0);
  }
  label$4 : {
   if ((HEAPU8[(global$1 + 23204 | 0) >> 0] | 0 | 0) == (1 | 0)) {
    break label$4
   }
   HEAP8[(global$1 + 23204 | 0) >> 0] = 1;
   fimport$62(1 | 0);
  }
  label$5 : {
   if (!(HEAPU8[(global$1 + 67608 | 0) >> 0] | 0)) {
    break label$5
   }
   HEAP8[(global$1 + 67608 | 0) >> 0] = 0;
   fimport$60(2960 | 0);
  }
  label$6 : {
   label$7 : {
    $0_1 = global$1;
    if ((HEAP32[($0_1 + 23208 | 0) >> 2] | 0 | 0) != (519 | 0)) {
     break label$7
    }
    if (HEAP32[($0_1 + 67612 | 0) >> 2] | 0) {
     break label$7
    }
    if ((HEAP32[($0_1 + 23212 | 0) >> 2] | 0 | 0) == (-1 | 0)) {
     break label$6
    }
   }
   $0_1 = global$1;
   HEAP32[($0_1 + 67612 | 0) >> 2] = 0;
   HEAP32[($0_1 + 23208 | 0) >> 2] = 519;
   HEAP32[($0_1 + 23212 | 0) >> 2] = -1;
   fimport$63(519 | 0, 0 | 0, -1 | 0);
  }
  label$8 : {
   label$9 : {
    $0_1 = global$1;
    if ((HEAP32[($0_1 + 23216 | 0) >> 2] | 0 | 0) != (7680 | 0)) {
     break label$9
    }
    if ((HEAP32[($0_1 + 23220 | 0) >> 2] | 0 | 0) != (7680 | 0)) {
     break label$9
    }
    if ((HEAP32[($0_1 + 23224 | 0) >> 2] | 0 | 0) != (7680 | 0)) {
     break label$9
    }
    if ((HEAP32[($0_1 + 23228 | 0) >> 2] | 0 | 0) != (7680 | 0)) {
     break label$9
    }
    if ((HEAP32[($0_1 + 23232 | 0) >> 2] | 0 | 0) != (7680 | 0)) {
     break label$9
    }
    if ((HEAP32[($0_1 + 23236 | 0) >> 2] | 0 | 0) == (7680 | 0)) {
     break label$8
    }
   }
   $0_1 = global$1;
   HEAP32[($0_1 + 23216 | 0) >> 2] = 7680;
   HEAP32[($0_1 + 23220 | 0) >> 2] = 7680;
   HEAP32[($0_1 + 23228 | 0) >> 2] = 7680;
   HEAP32[($0_1 + 23224 | 0) >> 2] = 7680;
   HEAP32[($0_1 + 23236 | 0) >> 2] = 7680;
   HEAP32[($0_1 + 23232 | 0) >> 2] = 7680;
   fimport$64(7680 | 0, 7680 | 0, 7680 | 0);
  }
  label$10 : {
   label$11 : {
    $0_1 = global$1;
    if ((HEAPU8[($0_1 + 23244 | 0) >> 0] | 0 | 0) != (1 | 0)) {
     break label$11
    }
    if (((HEAPU8[($0_1 + 23245 | 0) >> 0] | 0) & 255 | 0 | 0) != (1 | 0)) {
     break label$11
    }
    if (((HEAPU8[($0_1 + 23246 | 0) >> 0] | 0) & 255 | 0 | 0) != (1 | 0)) {
     break label$11
    }
    if (((HEAPU8[($0_1 + 23247 | 0) >> 0] | 0) & 255 | 0 | 0) == (1 | 0)) {
     break label$10
    }
   }
   $0_1 = global$1;
   HEAP8[($0_1 + 23245 | 0) >> 0] = 1;
   HEAP8[($0_1 + 23244 | 0) >> 0] = 1;
   HEAP8[($0_1 + 23246 | 0) >> 0] = 1;
   HEAP8[($0_1 + 23247 | 0) >> 0] = 1;
   fimport$65(1 | 0, 1 | 0, 1 | 0, 1 | 0);
  }
  label$12 : {
   if ((HEAPU8[(global$1 + 67616 | 0) >> 0] | 0 | 0) == (1 | 0)) {
    break label$12
   }
   HEAP8[(global$1 + 67616 | 0) >> 0] = 1;
   fimport$58(2884 | 0);
  }
  label$13 : {
   if ((HEAP32[(global$1 + 23248 | 0) >> 2] | 0 | 0) == (1029 | 0)) {
    break label$13
   }
   HEAP32[(global$1 + 23248 | 0) >> 2] = 1029;
   fimport$66(1029 | 0);
  }
  label$14 : {
   if ((HEAP32[(global$1 + 23252 | 0) >> 2] | 0 | 0) == (2305 | 0)) {
    break label$14
   }
   HEAP32[(global$1 + 23252 | 0) >> 2] = 2305;
   fimport$67(2305 | 0);
  }
  label$15 : {
   if (!(HEAPU8[(global$1 + 67617 | 0) >> 0] | 0)) {
    break label$15
   }
   HEAP8[(global$1 + 67617 | 0) >> 0] = 0;
   fimport$60(3042 | 0);
  }
  label$16 : {
   label$17 : {
    $0_1 = global$1;
    if ((HEAP32[($0_1 + 23256 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$17
    }
    if (!(HEAP32[($0_1 + 67620 | 0) >> 2] | 0)) {
     break label$16
    }
   }
   $0_1 = global$1;
   HEAP32[($0_1 + 67620 | 0) >> 2] = 0;
   HEAP32[($0_1 + 23256 | 0) >> 2] = 1;
   fimport$68(1 | 0, 0 | 0);
  }
  label$18 : {
   label$19 : {
    $0_1 = global$1;
    if ((HEAP32[($0_1 + 23260 | 0) >> 2] | 0 | 0) != (32774 | 0)) {
     break label$19
    }
    if ((HEAP32[($0_1 + 23264 | 0) >> 2] | 0 | 0) == (32774 | 0)) {
     break label$18
    }
   }
   $0_1 = global$1;
   HEAP32[($0_1 + 23260 | 0) >> 2] = 32774;
   HEAP32[($0_1 + 23264 | 0) >> 2] = 32774;
   fimport$69(32774 | 0);
  }
  label$20 : {
   if (!(HEAPU8[(global$1 + 67625 | 0) >> 0] | 0)) {
    break label$20
   }
   HEAP8[(global$1 + 67625 | 0) >> 0] = 0;
   fimport$60(32823 | 0);
  }
  label$21 : {
   label$22 : {
    $0_1 = global$1;
    if (Math_fround(HEAPF32[($0_1 + 67628 | 0) >> 2]) != Math_fround(0.0)) {
     break label$22
    }
    if (Math_fround(HEAPF32[($0_1 + 67632 | 0) >> 2]) == Math_fround(0.0)) {
     break label$21
    }
   }
   $0_1 = global$1;
   HEAP32[($0_1 + 67632 | 0) >> 2] = 0;
   HEAP32[($0_1 + 67628 | 0) >> 2] = 0;
   fimport$70(Math_fround(Math_fround(0.0)), Math_fround(Math_fround(0.0)));
  }
 }
 
 function $394($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(global$1 + 67624 | 0) >> 0] | 0 | 0) == ($0_1 | 0)) {
    break label$1
   }
   HEAP8[(global$1 + 67624 | 0) >> 0] = $0_1;
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    fimport$58(34383 | 0);
    return;
   }
   fimport$60(34383 | 0);
  }
 }
 
 function $395($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAP32[(global$1 + 23200 | 0) >> 2] | 0 | 0) == ($0_1 | 0)) {
    break label$1
   }
   HEAP32[(global$1 + 23200 | 0) >> 2] = $0_1;
   fimport$61($0_1 | 0);
  }
 }
 
 function $396($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(global$1 + 23204 | 0) >> 0] | 0 | 0) == ($0_1 | 0)) {
    break label$1
   }
   HEAP8[(global$1 + 23204 | 0) >> 0] = $0_1;
   fimport$62($0_1 | 0);
  }
 }
 
 function $397($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(global$1 + 67608 | 0) >> 0] | 0 | 0) == ($0_1 | 0)) {
    break label$1
   }
   HEAP8[(global$1 + 67608 | 0) >> 0] = $0_1;
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    fimport$58(2960 | 0);
    return;
   }
   fimport$60(2960 | 0);
  }
 }
 
 function $398($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   label$2 : {
    $3_1 = global$1;
    if ((HEAP32[($3_1 + 23208 | 0) >> 2] | 0 | 0) != ($0_1 | 0)) {
     break label$2
    }
    if ((HEAP32[($3_1 + 67612 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
     break label$2
    }
    if ((HEAP32[($3_1 + 23212 | 0) >> 2] | 0 | 0) == ($2_1 | 0)) {
     break label$1
    }
   }
   $3_1 = global$1;
   HEAP32[($3_1 + 67612 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 23208 | 0) >> 2] = $0_1;
   HEAP32[($3_1 + 23212 | 0) >> 2] = $2_1;
   fimport$63($0_1 | 0, $1_1 | 0, $2_1 | 0);
  }
 }
 
 function $399($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   label$2 : {
    $3_1 = global$1;
    if ((HEAP32[($3_1 + 23216 | 0) >> 2] | 0 | 0) != ($0_1 | 0)) {
     break label$2
    }
    if ((HEAP32[($3_1 + 23220 | 0) >> 2] | 0 | 0) != ($0_1 | 0)) {
     break label$2
    }
    if ((HEAP32[($3_1 + 23224 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
     break label$2
    }
    if ((HEAP32[($3_1 + 23228 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
     break label$2
    }
    if ((HEAP32[($3_1 + 23232 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
     break label$2
    }
    if ((HEAP32[($3_1 + 23236 | 0) >> 2] | 0 | 0) == ($2_1 | 0)) {
     break label$1
    }
   }
   $3_1 = global$1;
   HEAP32[($3_1 + 23216 | 0) >> 2] = $0_1;
   HEAP32[($3_1 + 23220 | 0) >> 2] = $0_1;
   HEAP32[($3_1 + 23228 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 23224 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 23236 | 0) >> 2] = $2_1;
   HEAP32[($3_1 + 23232 | 0) >> 2] = $2_1;
   fimport$64($0_1 | 0, $1_1 | 0, $2_1 | 0);
  }
 }
 
 function $400($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  label$1 : {
   label$2 : {
    $4_1 = global$1;
    if ((HEAPU8[($4_1 + 23244 | 0) >> 0] | 0 | 0) != ($0_1 | 0)) {
     break label$2
    }
    if (((HEAPU8[($4_1 + 23245 | 0) >> 0] | 0) & 255 | 0 | 0) != ($1_1 | 0)) {
     break label$2
    }
    if (((HEAPU8[($4_1 + 23246 | 0) >> 0] | 0) & 255 | 0 | 0) != ($2_1 | 0)) {
     break label$2
    }
    if (((HEAPU8[($4_1 + 23247 | 0) >> 0] | 0) & 255 | 0 | 0) == ($3_1 | 0)) {
     break label$1
    }
   }
   $4_1 = global$1;
   HEAP8[($4_1 + 23245 | 0) >> 0] = $1_1;
   HEAP8[($4_1 + 23244 | 0) >> 0] = $0_1;
   HEAP8[($4_1 + 23246 | 0) >> 0] = $2_1;
   HEAP8[($4_1 + 23247 | 0) >> 0] = $3_1;
   fimport$65($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
  }
 }
 
 function $401($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAP32[(global$1 + 23252 | 0) >> 2] | 0 | 0) == ($0_1 | 0)) {
    break label$1
   }
   HEAP32[(global$1 + 23252 | 0) >> 2] = $0_1;
   fimport$67($0_1 | 0);
  }
 }
 
 function $402($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(global$1 + 67617 | 0) >> 0] | 0 | 0) == ($0_1 | 0)) {
    break label$1
   }
   HEAP8[(global$1 + 67617 | 0) >> 0] = $0_1;
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    fimport$58(3042 | 0);
    return;
   }
   fimport$60(3042 | 0);
  }
 }
 
 function $403($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   label$2 : {
    $2_1 = global$1;
    if ((HEAP32[($2_1 + 23256 | 0) >> 2] | 0 | 0) != ($0_1 | 0)) {
     break label$2
    }
    if ((HEAP32[($2_1 + 67620 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
     break label$1
    }
   }
   $2_1 = global$1;
   HEAP32[($2_1 + 67620 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + 23256 | 0) >> 2] = $0_1;
   fimport$68($0_1 | 0, $1_1 | 0);
  }
 }
 
 function $404($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   label$2 : {
    $1_1 = global$1;
    if ((HEAP32[($1_1 + 23260 | 0) >> 2] | 0 | 0) != ($0_1 | 0)) {
     break label$2
    }
    if ((HEAP32[($1_1 + 23264 | 0) >> 2] | 0 | 0) == ($0_1 | 0)) {
     break label$1
    }
   }
   $1_1 = global$1;
   HEAP32[($1_1 + 23260 | 0) >> 2] = $0_1;
   HEAP32[($1_1 + 23264 | 0) >> 2] = $0_1;
   fimport$69($0_1 | 0);
  }
 }
 
 function $405($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  label$1 : {
   if ((HEAPU8[(global$1 + 67625 | 0) >> 0] | 0 | 0) == ($0_1 | 0)) {
    break label$1
   }
   HEAP8[(global$1 + 67625 | 0) >> 0] = $0_1;
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    fimport$58(32823 | 0);
    break label$1;
   }
   fimport$60(32823 | 0);
  }
  label$3 : {
   label$4 : {
    $0_1 = global$1;
    if (Math_fround(HEAPF32[($0_1 + 67628 | 0) >> 2]) != $1_1) {
     break label$4
    }
    if (Math_fround(HEAPF32[($0_1 + 67632 | 0) >> 2]) == $2_1) {
     break label$3
    }
   }
   $0_1 = global$1;
   HEAPF32[($0_1 + 67632 | 0) >> 2] = $2_1;
   HEAPF32[($0_1 + 67628 | 0) >> 2] = $1_1;
   fimport$70(Math_fround($1_1), Math_fround($2_1));
  }
 }
 
 function $406($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   label$2 : {
    $3_1 = global$1;
    if ((HEAP32[($3_1 + 23216 | 0) >> 2] | 0 | 0) != ($0_1 | 0)) {
     break label$2
    }
    if ((HEAP32[($3_1 + 23224 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
     break label$2
    }
    if ((HEAP32[($3_1 + 23232 | 0) >> 2] | 0 | 0) == ($2_1 | 0)) {
     break label$1
    }
   }
   $3_1 = global$1;
   HEAP32[($3_1 + 23224 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 23216 | 0) >> 2] = $0_1;
   HEAP32[($3_1 + 23232 | 0) >> 2] = $2_1;
   fimport$71(1028 | 0, $0_1 | 0, $1_1 | 0, $2_1 | 0);
  }
 }
 
 function $407($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   label$2 : {
    $3_1 = global$1;
    if ((HEAP32[($3_1 + 23220 | 0) >> 2] | 0 | 0) != ($0_1 | 0)) {
     break label$2
    }
    if ((HEAP32[($3_1 + 23228 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
     break label$2
    }
    if ((HEAP32[($3_1 + 23236 | 0) >> 2] | 0 | 0) == ($2_1 | 0)) {
     break label$1
    }
   }
   $3_1 = global$1;
   HEAP32[($3_1 + 23228 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 23220 | 0) >> 2] = $0_1;
   HEAP32[($3_1 + 23236 | 0) >> 2] = $2_1;
   fimport$71(1029 | 0, $0_1 | 0, $1_1 | 0, $2_1 | 0);
  }
 }
 
 function $408($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAP32[(global$1 + 23240 | 0) >> 2] | 0 | 0) == ($0_1 | 0)) {
    break label$1
   }
   HEAP32[(global$1 + 23240 | 0) >> 2] = $0_1;
   fimport$72($0_1 | 0);
  }
 }
 
 function $409($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $1_1 = 0, $30_1 = 0, $32_1 = 0, $36_1 = 0;
  label$1 : {
   label$2 : {
    if (Math_fround(HEAPF32[(global$1 + 67636 | 0) >> 2]) != Math_fround(HEAPF32[$0_1 >> 2])) {
     break label$2
    }
    if (Math_fround(HEAPF32[((global$1 + 67636 | 0) + 4 | 0) >> 2]) != Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2])) {
     break label$2
    }
    if (Math_fround(HEAPF32[((global$1 + 67636 | 0) + 8 | 0) >> 2]) != Math_fround(HEAPF32[($0_1 + 8 | 0) >> 2])) {
     break label$2
    }
    if (Math_fround(HEAPF32[((global$1 + 67636 | 0) + 12 | 0) >> 2]) == Math_fround(HEAPF32[($0_1 + 12 | 0) >> 2])) {
     break label$1
    }
   }
   $1_1 = global$1 + 67636 | 0;
   i64toi32_i32$0 = HEAP32[$0_1 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $30_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $1_1;
   HEAP32[i64toi32_i32$0 >> 2] = $30_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   $32_1 = i64toi32_i32$0 + 8 | 0;
   $1_1 = $0_1 + 8 | 0;
   i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   $36_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $32_1;
   HEAP32[i64toi32_i32$1 >> 2] = $36_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   fimport$8(Math_fround(Math_fround(HEAPF32[$0_1 >> 2])), Math_fround(Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[$1_1 >> 2])), Math_fround(Math_fround(HEAPF32[($0_1 + 12 | 0) >> 2])));
  }
 }
 
 function $410($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAP32[(global$1 + 23272 | 0) >> 2] | 0 | 0) == ($0_1 | 0)) {
    break label$1
   }
   HEAP32[(global$1 + 23272 | 0) >> 2] = $0_1;
   fimport$73($0_1 + 33984 | 0 | 0);
  }
 }
 
 function $411($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $6_1 = 0, $5_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0;
  $3_1 = global$1 + 67496 | 0;
  $4_1 = $3_1 + 4 | 0;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    if ($3_1) {
     break label$2
    }
    $3_1 = $4_1;
    break label$1;
   }
   $5_1 = $4_1;
   label$3 : {
    label$4 : {
     label$5 : while (1) {
      label$6 : {
       label$7 : {
        $6_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
        if ($6_1 >>> 0 <= $0_1 >>> 0) {
         break label$7
        }
        $6_1 = HEAP32[$3_1 >> 2] | 0;
        if ($6_1) {
         break label$6
        }
        $4_1 = $3_1;
        break label$1;
       }
       if ($6_1 >>> 0 >= $0_1 >>> 0) {
        break label$3
       }
       $5_1 = $3_1 + 4 | 0;
       $6_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
       if (!$6_1) {
        break label$4
       }
       $3_1 = $5_1;
      }
      $5_1 = $3_1;
      $3_1 = $6_1;
      continue label$5;
     };
    }
    $4_1 = $3_1;
    $3_1 = $5_1;
    break label$1;
   }
   $4_1 = $3_1;
   $3_1 = $5_1;
  }
  label$8 : {
   $6_1 = HEAP32[$3_1 >> 2] | 0;
   if ($6_1) {
    break label$8
   }
   $6_1 = $2030(24 | 0) | 0;
   HEAP32[($6_1 + 20 | 0) >> 2] = 0;
   HEAP32[($6_1 + 16 | 0) >> 2] = $0_1;
   HEAP32[($6_1 + 8 | 0) >> 2] = $4_1;
   i64toi32_i32$0 = 0;
   HEAP32[$6_1 >> 2] = 0;
   HEAP32[($6_1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[$3_1 >> 2] = $6_1;
   label$9 : {
    label$10 : {
     $5_1 = HEAP32[(HEAP32[(global$1 + 67496 | 0) >> 2] | 0) >> 2] | 0;
     if ($5_1) {
      break label$10
     }
     $5_1 = $6_1;
     break label$9;
    }
    HEAP32[(global$1 + 67496 | 0) >> 2] = $5_1;
    $5_1 = HEAP32[$3_1 >> 2] | 0;
   }
   $3_1 = global$1 + 67496 | 0;
   $412(HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0, $5_1 | 0);
   HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0;
  }
  label$11 : {
   if ((HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0) == ($2_1 | 0)) {
    break label$11
   }
   $3_1 = global$1 + 67496 | 0;
   $4_1 = $3_1 + 4 | 0;
   label$12 : {
    label$13 : {
     $3_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
     if ($3_1) {
      break label$13
     }
     $3_1 = $4_1;
     break label$12;
    }
    $5_1 = $4_1;
    label$14 : {
     label$15 : {
      label$16 : while (1) {
       label$17 : {
        label$18 : {
         $6_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
         if ($6_1 >>> 0 <= $0_1 >>> 0) {
          break label$18
         }
         $6_1 = HEAP32[$3_1 >> 2] | 0;
         if ($6_1) {
          break label$17
         }
         $4_1 = $3_1;
         break label$12;
        }
        if ($6_1 >>> 0 >= $0_1 >>> 0) {
         break label$14
        }
        $5_1 = $3_1 + 4 | 0;
        $6_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
        if (!$6_1) {
         break label$15
        }
        $3_1 = $5_1;
       }
       $5_1 = $3_1;
       $3_1 = $6_1;
       continue label$16;
      };
     }
     $4_1 = $3_1;
     $3_1 = $5_1;
     break label$12;
    }
    $4_1 = $3_1;
    $3_1 = $5_1;
   }
   label$19 : {
    $6_1 = HEAP32[$3_1 >> 2] | 0;
    if ($6_1) {
     break label$19
    }
    $6_1 = $2030(24 | 0) | 0;
    HEAP32[($6_1 + 20 | 0) >> 2] = 0;
    HEAP32[($6_1 + 16 | 0) >> 2] = $0_1;
    HEAP32[($6_1 + 8 | 0) >> 2] = $4_1;
    i64toi32_i32$0 = 0;
    HEAP32[$6_1 >> 2] = 0;
    HEAP32[($6_1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[$3_1 >> 2] = $6_1;
    label$20 : {
     label$21 : {
      $0_1 = HEAP32[(HEAP32[(global$1 + 67496 | 0) >> 2] | 0) >> 2] | 0;
      if ($0_1) {
       break label$21
      }
      $0_1 = $6_1;
      break label$20;
     }
     HEAP32[(global$1 + 67496 | 0) >> 2] = $0_1;
     $0_1 = HEAP32[$3_1 >> 2] | 0;
    }
    $3_1 = global$1 + 67496 | 0;
    $412(HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0, $0_1 | 0);
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0;
   }
   HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
   fimport$35(3553 | 0, 10242 | 0, $2_1 | 0);
  }
 }
 
 function $412($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $3_1 = 0;
  $2_1 = ($1_1 | 0) == ($0_1 | 0);
  HEAP8[($1_1 + 12 | 0) >> 0] = $2_1;
  label$1 : {
   if ($2_1) {
    break label$1
   }
   label$2 : while (1) {
    $3_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
    if (HEAPU8[($3_1 + 12 | 0) >> 0] | 0) {
     break label$1
    }
    label$3 : {
     label$4 : {
      $2_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
      $4_1 = HEAP32[$2_1 >> 2] | 0;
      if (($4_1 | 0) != ($3_1 | 0)) {
       break label$4
      }
      label$5 : {
       $4_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
       if (!$4_1) {
        break label$5
       }
       if (HEAPU8[($4_1 + 12 | 0) >> 0] | 0) {
        break label$5
       }
       $4_1 = $4_1 + 12 | 0;
       break label$3;
      }
      label$6 : {
       label$7 : {
        if ((HEAP32[$3_1 >> 2] | 0 | 0) != ($1_1 | 0)) {
         break label$7
        }
        $4_1 = $3_1;
        break label$6;
       }
       $4_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
       $1_1 = HEAP32[$4_1 >> 2] | 0;
       HEAP32[($3_1 + 4 | 0) >> 2] = $1_1;
       label$8 : {
        if (!$1_1) {
         break label$8
        }
        HEAP32[($1_1 + 8 | 0) >> 2] = $3_1;
        $2_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
       }
       HEAP32[($4_1 + 8 | 0) >> 2] = $2_1;
       $2_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
       HEAP32[($2_1 + (((HEAP32[$2_1 >> 2] | 0 | 0) != ($3_1 | 0)) << 2 | 0) | 0) >> 2] = $4_1;
       HEAP32[$4_1 >> 2] = $3_1;
       HEAP32[($3_1 + 8 | 0) >> 2] = $4_1;
       $2_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
      }
      HEAP8[($4_1 + 12 | 0) >> 0] = 1;
      HEAP8[($2_1 + 12 | 0) >> 0] = 0;
      $3_1 = HEAP32[$2_1 >> 2] | 0;
      $4_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
      HEAP32[$2_1 >> 2] = $4_1;
      label$9 : {
       if (!$4_1) {
        break label$9
       }
       HEAP32[($4_1 + 8 | 0) >> 2] = $2_1;
      }
      HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
      $4_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
      HEAP32[($4_1 + (((HEAP32[$4_1 >> 2] | 0 | 0) != ($2_1 | 0)) << 2 | 0) | 0) >> 2] = $3_1;
      HEAP32[($3_1 + 4 | 0) >> 2] = $2_1;
      HEAP32[($2_1 + 8 | 0) >> 2] = $3_1;
      return;
     }
     label$10 : {
      if (!$4_1) {
       break label$10
      }
      if (HEAPU8[($4_1 + 12 | 0) >> 0] | 0) {
       break label$10
      }
      $4_1 = $4_1 + 12 | 0;
      break label$3;
     }
     label$11 : {
      label$12 : {
       if ((HEAP32[$3_1 >> 2] | 0 | 0) == ($1_1 | 0)) {
        break label$12
       }
       $1_1 = $3_1;
       break label$11;
      }
      $4_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      HEAP32[$3_1 >> 2] = $4_1;
      label$13 : {
       if (!$4_1) {
        break label$13
       }
       HEAP32[($4_1 + 8 | 0) >> 2] = $3_1;
       $2_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
      }
      HEAP32[($1_1 + 8 | 0) >> 2] = $2_1;
      $2_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
      HEAP32[($2_1 + (((HEAP32[$2_1 >> 2] | 0 | 0) != ($3_1 | 0)) << 2 | 0) | 0) >> 2] = $1_1;
      HEAP32[($1_1 + 4 | 0) >> 2] = $3_1;
      HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
      $2_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
     }
     HEAP8[($1_1 + 12 | 0) >> 0] = 1;
     HEAP8[($2_1 + 12 | 0) >> 0] = 0;
     $3_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
     $4_1 = HEAP32[$3_1 >> 2] | 0;
     HEAP32[($2_1 + 4 | 0) >> 2] = $4_1;
     label$14 : {
      if (!$4_1) {
       break label$14
      }
      HEAP32[($4_1 + 8 | 0) >> 2] = $2_1;
     }
     HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
     $4_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
     HEAP32[($4_1 + (((HEAP32[$4_1 >> 2] | 0 | 0) != ($2_1 | 0)) << 2 | 0) | 0) >> 2] = $3_1;
     HEAP32[$3_1 >> 2] = $2_1;
     HEAP32[($2_1 + 8 | 0) >> 2] = $3_1;
     break label$1;
    }
    HEAP8[($3_1 + 12 | 0) >> 0] = 1;
    HEAP8[($2_1 + 12 | 0) >> 0] = ($2_1 | 0) == ($0_1 | 0);
    HEAP8[$4_1 >> 0] = 1;
    $1_1 = $2_1;
    if (($2_1 | 0) != ($0_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $413($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $6_1 = 0, $5_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0;
  $3_1 = global$1 + 67508 | 0;
  $4_1 = $3_1 + 4 | 0;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    if ($3_1) {
     break label$2
    }
    $3_1 = $4_1;
    break label$1;
   }
   $5_1 = $4_1;
   label$3 : {
    label$4 : {
     label$5 : while (1) {
      label$6 : {
       label$7 : {
        $6_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
        if ($6_1 >>> 0 <= $0_1 >>> 0) {
         break label$7
        }
        $6_1 = HEAP32[$3_1 >> 2] | 0;
        if ($6_1) {
         break label$6
        }
        $4_1 = $3_1;
        break label$1;
       }
       if ($6_1 >>> 0 >= $0_1 >>> 0) {
        break label$3
       }
       $5_1 = $3_1 + 4 | 0;
       $6_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
       if (!$6_1) {
        break label$4
       }
       $3_1 = $5_1;
      }
      $5_1 = $3_1;
      $3_1 = $6_1;
      continue label$5;
     };
    }
    $4_1 = $3_1;
    $3_1 = $5_1;
    break label$1;
   }
   $4_1 = $3_1;
   $3_1 = $5_1;
  }
  label$8 : {
   $6_1 = HEAP32[$3_1 >> 2] | 0;
   if ($6_1) {
    break label$8
   }
   $6_1 = $2030(24 | 0) | 0;
   HEAP32[($6_1 + 20 | 0) >> 2] = 0;
   HEAP32[($6_1 + 16 | 0) >> 2] = $0_1;
   HEAP32[($6_1 + 8 | 0) >> 2] = $4_1;
   i64toi32_i32$0 = 0;
   HEAP32[$6_1 >> 2] = 0;
   HEAP32[($6_1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[$3_1 >> 2] = $6_1;
   label$9 : {
    label$10 : {
     $5_1 = HEAP32[(HEAP32[(global$1 + 67508 | 0) >> 2] | 0) >> 2] | 0;
     if ($5_1) {
      break label$10
     }
     $5_1 = $6_1;
     break label$9;
    }
    HEAP32[(global$1 + 67508 | 0) >> 2] = $5_1;
    $5_1 = HEAP32[$3_1 >> 2] | 0;
   }
   $3_1 = global$1 + 67508 | 0;
   $412(HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0, $5_1 | 0);
   HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0;
  }
  label$11 : {
   if ((HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0) == ($2_1 | 0)) {
    break label$11
   }
   $3_1 = global$1 + 67508 | 0;
   $4_1 = $3_1 + 4 | 0;
   label$12 : {
    label$13 : {
     $3_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
     if ($3_1) {
      break label$13
     }
     $3_1 = $4_1;
     break label$12;
    }
    $5_1 = $4_1;
    label$14 : {
     label$15 : {
      label$16 : while (1) {
       label$17 : {
        label$18 : {
         $6_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
         if ($6_1 >>> 0 <= $0_1 >>> 0) {
          break label$18
         }
         $6_1 = HEAP32[$3_1 >> 2] | 0;
         if ($6_1) {
          break label$17
         }
         $4_1 = $3_1;
         break label$12;
        }
        if ($6_1 >>> 0 >= $0_1 >>> 0) {
         break label$14
        }
        $5_1 = $3_1 + 4 | 0;
        $6_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
        if (!$6_1) {
         break label$15
        }
        $3_1 = $5_1;
       }
       $5_1 = $3_1;
       $3_1 = $6_1;
       continue label$16;
      };
     }
     $4_1 = $3_1;
     $3_1 = $5_1;
     break label$12;
    }
    $4_1 = $3_1;
    $3_1 = $5_1;
   }
   label$19 : {
    $6_1 = HEAP32[$3_1 >> 2] | 0;
    if ($6_1) {
     break label$19
    }
    $6_1 = $2030(24 | 0) | 0;
    HEAP32[($6_1 + 20 | 0) >> 2] = 0;
    HEAP32[($6_1 + 16 | 0) >> 2] = $0_1;
    HEAP32[($6_1 + 8 | 0) >> 2] = $4_1;
    i64toi32_i32$0 = 0;
    HEAP32[$6_1 >> 2] = 0;
    HEAP32[($6_1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[$3_1 >> 2] = $6_1;
    label$20 : {
     label$21 : {
      $0_1 = HEAP32[(HEAP32[(global$1 + 67508 | 0) >> 2] | 0) >> 2] | 0;
      if ($0_1) {
       break label$21
      }
      $0_1 = $6_1;
      break label$20;
     }
     HEAP32[(global$1 + 67508 | 0) >> 2] = $0_1;
     $0_1 = HEAP32[$3_1 >> 2] | 0;
    }
    $3_1 = global$1 + 67508 | 0;
    $412(HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0, $0_1 | 0);
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0;
   }
   HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
   fimport$35(3553 | 0, 10243 | 0, $2_1 | 0);
  }
 }
 
 function $414($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $6_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, i64toi32_i32$1 = 0, $4_1 = 0, i64toi32_i32$2 = 0, $170_1 = 0, $175_1 = 0;
  $3_1 = global$1 + 67520 | 0;
  $4_1 = $3_1 + 4 | 0;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    if ($3_1) {
     break label$2
    }
    $3_1 = $4_1;
    break label$1;
   }
   $5_1 = $4_1;
   label$3 : {
    label$4 : {
     label$5 : while (1) {
      label$6 : {
       label$7 : {
        $6_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
        if ($6_1 >>> 0 <= $0_1 >>> 0) {
         break label$7
        }
        $6_1 = HEAP32[$3_1 >> 2] | 0;
        if ($6_1) {
         break label$6
        }
        $4_1 = $3_1;
        break label$1;
       }
       if ($6_1 >>> 0 >= $0_1 >>> 0) {
        break label$3
       }
       $5_1 = $3_1 + 4 | 0;
       $6_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
       if (!$6_1) {
        break label$4
       }
       $3_1 = $5_1;
      }
      $5_1 = $3_1;
      $3_1 = $6_1;
      continue label$5;
     };
    }
    $4_1 = $3_1;
    $3_1 = $5_1;
    break label$1;
   }
   $4_1 = $3_1;
   $3_1 = $5_1;
  }
  label$8 : {
   $6_1 = HEAP32[$3_1 >> 2] | 0;
   if ($6_1) {
    break label$8
   }
   $6_1 = $2030(36 | 0) | 0;
   i64toi32_i32$1 = $6_1;
   i64toi32_i32$0 = 0;
   HEAP32[($6_1 + 20 | 0) >> 2] = 0;
   HEAP32[($6_1 + 24 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($6_1 + 16 | 0) >> 2] = $0_1;
   HEAP32[($6_1 + 8 | 0) >> 2] = $4_1;
   i64toi32_i32$1 = $6_1;
   i64toi32_i32$0 = 0;
   HEAP32[$6_1 >> 2] = 0;
   HEAP32[($6_1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $6_1 + 28 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[$3_1 >> 2] = $6_1;
   label$9 : {
    label$10 : {
     $5_1 = HEAP32[(HEAP32[(global$1 + 67520 | 0) >> 2] | 0) >> 2] | 0;
     if ($5_1) {
      break label$10
     }
     $5_1 = $6_1;
     break label$9;
    }
    HEAP32[(global$1 + 67520 | 0) >> 2] = $5_1;
    $5_1 = HEAP32[$3_1 >> 2] | 0;
   }
   $3_1 = global$1 + 67520 | 0;
   $412(HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0, $5_1 | 0);
   HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0;
  }
  label$11 : {
   label$12 : {
    if (Math_fround(HEAPF32[($6_1 + 20 | 0) >> 2]) != Math_fround(HEAPF32[$2_1 >> 2])) {
     break label$12
    }
    if (Math_fround(HEAPF32[($6_1 + 24 | 0) >> 2]) != Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2])) {
     break label$12
    }
    if (Math_fround(HEAPF32[($6_1 + 28 | 0) >> 2]) != Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2])) {
     break label$12
    }
    if (Math_fround(HEAPF32[($6_1 + 32 | 0) >> 2]) == Math_fround(HEAPF32[($2_1 + 12 | 0) >> 2])) {
     break label$11
    }
   }
   $3_1 = global$1 + 67520 | 0;
   $4_1 = $3_1 + 4 | 0;
   label$13 : {
    label$14 : {
     $3_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
     if ($3_1) {
      break label$14
     }
     $3_1 = $4_1;
     break label$13;
    }
    $5_1 = $4_1;
    label$15 : {
     label$16 : {
      label$17 : while (1) {
       label$18 : {
        label$19 : {
         $6_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
         if ($6_1 >>> 0 <= $0_1 >>> 0) {
          break label$19
         }
         $6_1 = HEAP32[$3_1 >> 2] | 0;
         if ($6_1) {
          break label$18
         }
         $4_1 = $3_1;
         break label$13;
        }
        if ($6_1 >>> 0 >= $0_1 >>> 0) {
         break label$15
        }
        $5_1 = $3_1 + 4 | 0;
        $6_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
        if (!$6_1) {
         break label$16
        }
        $3_1 = $5_1;
       }
       $5_1 = $3_1;
       $3_1 = $6_1;
       continue label$17;
      };
     }
     $4_1 = $3_1;
     $3_1 = $5_1;
     break label$13;
    }
    $4_1 = $3_1;
    $3_1 = $5_1;
   }
   label$20 : {
    $6_1 = HEAP32[$3_1 >> 2] | 0;
    if ($6_1) {
     break label$20
    }
    $6_1 = $2030(36 | 0) | 0;
    i64toi32_i32$1 = $6_1;
    i64toi32_i32$0 = 0;
    HEAP32[($6_1 + 20 | 0) >> 2] = 0;
    HEAP32[($6_1 + 24 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($6_1 + 16 | 0) >> 2] = $0_1;
    HEAP32[($6_1 + 8 | 0) >> 2] = $4_1;
    i64toi32_i32$1 = $6_1;
    i64toi32_i32$0 = 0;
    HEAP32[$6_1 >> 2] = 0;
    HEAP32[($6_1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $6_1 + 28 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[$3_1 >> 2] = $6_1;
    label$21 : {
     label$22 : {
      $0_1 = HEAP32[(HEAP32[(global$1 + 67520 | 0) >> 2] | 0) >> 2] | 0;
      if ($0_1) {
       break label$22
      }
      $0_1 = $6_1;
      break label$21;
     }
     HEAP32[(global$1 + 67520 | 0) >> 2] = $0_1;
     $0_1 = HEAP32[$3_1 >> 2] | 0;
    }
    $3_1 = global$1 + 67520 | 0;
    $412(HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0, $0_1 | 0);
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0;
   }
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$0 = HEAP32[$2_1 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
   $170_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $6_1 + 20 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $170_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $2_1 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $175_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $6_1 + 28 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $175_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   fimport$74(3553 | 0, 4100 | 0, $2_1 | 0);
  }
 }
 
 function $415($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  var $4_1 = 0, $7_1 = 0, $6_1 = 0, $5_1 = 0, $3_1 = 0, $8_1 = 0, i64toi32_i32$0 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAPF32[($3_1 + 12 | 0) >> 2] = $2_1;
  $4_1 = global$1 + 67532 | 0;
  $5_1 = $4_1 + 4 | 0;
  label$1 : {
   label$2 : {
    $4_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
    if ($4_1) {
     break label$2
    }
    $4_1 = $5_1;
    break label$1;
   }
   $6_1 = $5_1;
   label$3 : {
    label$4 : {
     label$5 : while (1) {
      label$6 : {
       label$7 : {
        $7_1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
        if ($7_1 >>> 0 <= $0_1 >>> 0) {
         break label$7
        }
        $7_1 = HEAP32[$4_1 >> 2] | 0;
        if ($7_1) {
         break label$6
        }
        $5_1 = $4_1;
        break label$1;
       }
       if ($7_1 >>> 0 >= $0_1 >>> 0) {
        break label$3
       }
       $6_1 = $4_1 + 4 | 0;
       $7_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
       if (!$7_1) {
        break label$4
       }
       $4_1 = $6_1;
      }
      $6_1 = $4_1;
      $4_1 = $7_1;
      continue label$5;
     };
    }
    $5_1 = $4_1;
    $4_1 = $6_1;
    break label$1;
   }
   $5_1 = $4_1;
   $4_1 = $6_1;
  }
  label$8 : {
   $7_1 = HEAP32[$4_1 >> 2] | 0;
   if ($7_1) {
    break label$8
   }
   $7_1 = $2030(24 | 0) | 0;
   HEAP32[($7_1 + 20 | 0) >> 2] = 0;
   HEAP32[($7_1 + 16 | 0) >> 2] = $0_1;
   HEAP32[($7_1 + 8 | 0) >> 2] = $5_1;
   i64toi32_i32$0 = 0;
   HEAP32[$7_1 >> 2] = 0;
   HEAP32[($7_1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[$4_1 >> 2] = $7_1;
   label$9 : {
    label$10 : {
     $6_1 = HEAP32[(HEAP32[(global$1 + 67532 | 0) >> 2] | 0) >> 2] | 0;
     if ($6_1) {
      break label$10
     }
     $6_1 = $7_1;
     break label$9;
    }
    HEAP32[(global$1 + 67532 | 0) >> 2] = $6_1;
    $6_1 = HEAP32[$4_1 >> 2] | 0;
   }
   $4_1 = global$1 + 67532 | 0;
   $412(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, $6_1 | 0);
   HEAP32[($4_1 + 8 | 0) >> 2] = (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 1 | 0;
  }
  label$11 : {
   if (Math_fround(HEAPF32[($7_1 + 20 | 0) >> 2]) == $2_1) {
    break label$11
   }
   HEAP32[($3_1 + 8 | 0) >> 2] = 1065353216;
   HEAP32[($3_1 + 4 | 0) >> 2] = 1065353216;
   $4_1 = $2_1 > Math_fround(1.0) ? $3_1 + 8 | 0 : $3_1 + 12 | 0;
   $5_1 = HEAP32[(Math_fround(HEAPF32[$4_1 >> 2]) < Math_fround(1.0) ? $3_1 + 4 | 0 : $4_1) >> 2] | 0;
   HEAP32[($3_1 + 12 | 0) >> 2] = $5_1;
   $4_1 = global$1 + 67532 | 0;
   $8_1 = $4_1 + 4 | 0;
   label$12 : {
    label$13 : {
     $4_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
     if ($4_1) {
      break label$13
     }
     $4_1 = $8_1;
     break label$12;
    }
    $6_1 = $8_1;
    label$14 : {
     label$15 : {
      label$16 : while (1) {
       label$17 : {
        label$18 : {
         $7_1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
         if ($7_1 >>> 0 <= $0_1 >>> 0) {
          break label$18
         }
         $7_1 = HEAP32[$4_1 >> 2] | 0;
         if ($7_1) {
          break label$17
         }
         $8_1 = $4_1;
         break label$12;
        }
        if ($7_1 >>> 0 >= $0_1 >>> 0) {
         break label$14
        }
        $6_1 = $4_1 + 4 | 0;
        $7_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
        if (!$7_1) {
         break label$15
        }
        $4_1 = $6_1;
       }
       $6_1 = $4_1;
       $4_1 = $7_1;
       continue label$16;
      };
     }
     $8_1 = $4_1;
     $4_1 = $6_1;
     break label$12;
    }
    $8_1 = $4_1;
    $4_1 = $6_1;
   }
   label$19 : {
    $7_1 = HEAP32[$4_1 >> 2] | 0;
    if ($7_1) {
     break label$19
    }
    $7_1 = $2030(24 | 0) | 0;
    HEAP32[($7_1 + 20 | 0) >> 2] = 0;
    HEAP32[($7_1 + 16 | 0) >> 2] = $0_1;
    HEAP32[($7_1 + 8 | 0) >> 2] = $8_1;
    i64toi32_i32$0 = 0;
    HEAP32[$7_1 >> 2] = 0;
    HEAP32[($7_1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[$4_1 >> 2] = $7_1;
    label$20 : {
     label$21 : {
      $0_1 = HEAP32[(HEAP32[(global$1 + 67532 | 0) >> 2] | 0) >> 2] | 0;
      if ($0_1) {
       break label$21
      }
      $0_1 = $7_1;
      break label$20;
     }
     HEAP32[(global$1 + 67532 | 0) >> 2] = $0_1;
     $0_1 = HEAP32[$4_1 >> 2] | 0;
    }
    $4_1 = global$1 + 67532 | 0;
    $412(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, $0_1 | 0);
    HEAP32[($4_1 + 8 | 0) >> 2] = (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 1 | 0;
   }
   HEAP32[($7_1 + 20 | 0) >> 2] = $5_1;
   fimport$36(3553 | 0, 34046 | 0, Math_fround((wasm2js_scratch_store_i32(2, $5_1), wasm2js_scratch_load_f32())));
  }
  global$0 = $3_1 + 16 | 0;
 }
 
 function $416($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $8_1 = 0, $7_1 = 0, $4_1 = 0, $6_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0;
  $4_1 = $3_1 ? 9986 : 9728;
  $5_1 = $3_1 ? 9987 : 9729;
  $3_1 = global$1 + 67544 | 0;
  $6_1 = $3_1 + 4 | 0;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    if ($3_1) {
     break label$2
    }
    $3_1 = $6_1;
    break label$1;
   }
   $7_1 = $6_1;
   label$3 : {
    label$4 : {
     label$5 : while (1) {
      label$6 : {
       label$7 : {
        $8_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
        if ($8_1 >>> 0 <= $0_1 >>> 0) {
         break label$7
        }
        $8_1 = HEAP32[$3_1 >> 2] | 0;
        if ($8_1) {
         break label$6
        }
        $6_1 = $3_1;
        break label$1;
       }
       if ($8_1 >>> 0 >= $0_1 >>> 0) {
        break label$3
       }
       $7_1 = $3_1 + 4 | 0;
       $8_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
       if (!$8_1) {
        break label$4
       }
       $3_1 = $7_1;
      }
      $7_1 = $3_1;
      $3_1 = $8_1;
      continue label$5;
     };
    }
    $6_1 = $3_1;
    $3_1 = $7_1;
    break label$1;
   }
   $6_1 = $3_1;
   $3_1 = $7_1;
  }
  $4_1 = $2_1 ? $5_1 : $4_1;
  label$8 : {
   $8_1 = HEAP32[$3_1 >> 2] | 0;
   if ($8_1) {
    break label$8
   }
   $8_1 = $2030(24 | 0) | 0;
   HEAP32[($8_1 + 20 | 0) >> 2] = 0;
   HEAP32[($8_1 + 16 | 0) >> 2] = $0_1;
   HEAP32[($8_1 + 8 | 0) >> 2] = $6_1;
   i64toi32_i32$0 = 0;
   HEAP32[$8_1 >> 2] = 0;
   HEAP32[($8_1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[$3_1 >> 2] = $8_1;
   label$9 : {
    label$10 : {
     $7_1 = HEAP32[(HEAP32[(global$1 + 67544 | 0) >> 2] | 0) >> 2] | 0;
     if ($7_1) {
      break label$10
     }
     $7_1 = $8_1;
     break label$9;
    }
    HEAP32[(global$1 + 67544 | 0) >> 2] = $7_1;
    $7_1 = HEAP32[$3_1 >> 2] | 0;
   }
   $3_1 = global$1 + 67544 | 0;
   $412(HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0, $7_1 | 0);
   HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0;
  }
  label$11 : {
   if ((HEAP32[($8_1 + 20 | 0) >> 2] | 0 | 0) == ($4_1 | 0)) {
    break label$11
   }
   $3_1 = global$1 + 67544 | 0;
   $6_1 = $3_1 + 4 | 0;
   label$12 : {
    label$13 : {
     $3_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
     if ($3_1) {
      break label$13
     }
     $3_1 = $6_1;
     break label$12;
    }
    $7_1 = $6_1;
    label$14 : {
     label$15 : {
      label$16 : while (1) {
       label$17 : {
        label$18 : {
         $8_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
         if ($8_1 >>> 0 <= $0_1 >>> 0) {
          break label$18
         }
         $8_1 = HEAP32[$3_1 >> 2] | 0;
         if ($8_1) {
          break label$17
         }
         $6_1 = $3_1;
         break label$12;
        }
        if ($8_1 >>> 0 >= $0_1 >>> 0) {
         break label$14
        }
        $7_1 = $3_1 + 4 | 0;
        $8_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
        if (!$8_1) {
         break label$15
        }
        $3_1 = $7_1;
       }
       $7_1 = $3_1;
       $3_1 = $8_1;
       continue label$16;
      };
     }
     $6_1 = $3_1;
     $3_1 = $7_1;
     break label$12;
    }
    $6_1 = $3_1;
    $3_1 = $7_1;
   }
   label$19 : {
    $8_1 = HEAP32[$3_1 >> 2] | 0;
    if ($8_1) {
     break label$19
    }
    $8_1 = $2030(24 | 0) | 0;
    HEAP32[($8_1 + 20 | 0) >> 2] = 0;
    HEAP32[($8_1 + 16 | 0) >> 2] = $0_1;
    HEAP32[($8_1 + 8 | 0) >> 2] = $6_1;
    i64toi32_i32$0 = 0;
    HEAP32[$8_1 >> 2] = 0;
    HEAP32[($8_1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[$3_1 >> 2] = $8_1;
    label$20 : {
     label$21 : {
      $7_1 = HEAP32[(HEAP32[(global$1 + 67544 | 0) >> 2] | 0) >> 2] | 0;
      if ($7_1) {
       break label$21
      }
      $7_1 = $8_1;
      break label$20;
     }
     HEAP32[(global$1 + 67544 | 0) >> 2] = $7_1;
     $7_1 = HEAP32[$3_1 >> 2] | 0;
    }
    $3_1 = global$1 + 67544 | 0;
    $412(HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0, $7_1 | 0);
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0;
   }
   HEAP32[($8_1 + 20 | 0) >> 2] = $4_1;
   fimport$35(3553 | 0, 10241 | 0, $4_1 | 0);
  }
  $3_1 = global$1 + 67556 | 0;
  $4_1 = $3_1 + 4 | 0;
  label$22 : {
   label$23 : {
    $3_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    if ($3_1) {
     break label$23
    }
    $3_1 = $4_1;
    break label$22;
   }
   $7_1 = $4_1;
   label$24 : {
    label$25 : {
     label$26 : while (1) {
      label$27 : {
       label$28 : {
        $8_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
        if ($8_1 >>> 0 <= $0_1 >>> 0) {
         break label$28
        }
        $8_1 = HEAP32[$3_1 >> 2] | 0;
        if ($8_1) {
         break label$27
        }
        $4_1 = $3_1;
        break label$22;
       }
       if ($8_1 >>> 0 >= $0_1 >>> 0) {
        break label$24
       }
       $7_1 = $3_1 + 4 | 0;
       $8_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
       if (!$8_1) {
        break label$25
       }
       $3_1 = $7_1;
      }
      $7_1 = $3_1;
      $3_1 = $8_1;
      continue label$26;
     };
    }
    $4_1 = $3_1;
    $3_1 = $7_1;
    break label$22;
   }
   $4_1 = $3_1;
   $3_1 = $7_1;
  }
  $2_1 = $2_1 ? 9729 : 9728;
  label$29 : {
   $8_1 = HEAP32[$3_1 >> 2] | 0;
   if ($8_1) {
    break label$29
   }
   $8_1 = $2030(24 | 0) | 0;
   HEAP32[($8_1 + 20 | 0) >> 2] = 0;
   HEAP32[($8_1 + 16 | 0) >> 2] = $0_1;
   HEAP32[($8_1 + 8 | 0) >> 2] = $4_1;
   i64toi32_i32$0 = 0;
   HEAP32[$8_1 >> 2] = 0;
   HEAP32[($8_1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[$3_1 >> 2] = $8_1;
   label$30 : {
    label$31 : {
     $7_1 = HEAP32[(HEAP32[(global$1 + 67556 | 0) >> 2] | 0) >> 2] | 0;
     if ($7_1) {
      break label$31
     }
     $7_1 = $8_1;
     break label$30;
    }
    HEAP32[(global$1 + 67556 | 0) >> 2] = $7_1;
    $7_1 = HEAP32[$3_1 >> 2] | 0;
   }
   $3_1 = global$1 + 67556 | 0;
   $412(HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0, $7_1 | 0);
   HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0;
  }
  label$32 : {
   if ((HEAP32[($8_1 + 20 | 0) >> 2] | 0 | 0) == ($2_1 | 0)) {
    break label$32
   }
   $3_1 = global$1 + 67556 | 0;
   $4_1 = $3_1 + 4 | 0;
   label$33 : {
    label$34 : {
     $3_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
     if ($3_1) {
      break label$34
     }
     $3_1 = $4_1;
     break label$33;
    }
    $7_1 = $4_1;
    label$35 : {
     label$36 : {
      label$37 : while (1) {
       label$38 : {
        label$39 : {
         $8_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
         if ($8_1 >>> 0 <= $0_1 >>> 0) {
          break label$39
         }
         $8_1 = HEAP32[$3_1 >> 2] | 0;
         if ($8_1) {
          break label$38
         }
         $4_1 = $3_1;
         break label$33;
        }
        if ($8_1 >>> 0 >= $0_1 >>> 0) {
         break label$35
        }
        $7_1 = $3_1 + 4 | 0;
        $8_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
        if (!$8_1) {
         break label$36
        }
        $3_1 = $7_1;
       }
       $7_1 = $3_1;
       $3_1 = $8_1;
       continue label$37;
      };
     }
     $4_1 = $3_1;
     $3_1 = $7_1;
     break label$33;
    }
    $4_1 = $3_1;
    $3_1 = $7_1;
   }
   label$40 : {
    $8_1 = HEAP32[$3_1 >> 2] | 0;
    if ($8_1) {
     break label$40
    }
    $8_1 = $2030(24 | 0) | 0;
    HEAP32[($8_1 + 20 | 0) >> 2] = 0;
    HEAP32[($8_1 + 16 | 0) >> 2] = $0_1;
    HEAP32[($8_1 + 8 | 0) >> 2] = $4_1;
    i64toi32_i32$0 = 0;
    HEAP32[$8_1 >> 2] = 0;
    HEAP32[($8_1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[$3_1 >> 2] = $8_1;
    label$41 : {
     label$42 : {
      $0_1 = HEAP32[(HEAP32[(global$1 + 67556 | 0) >> 2] | 0) >> 2] | 0;
      if ($0_1) {
       break label$42
      }
      $0_1 = $8_1;
      break label$41;
     }
     HEAP32[(global$1 + 67556 | 0) >> 2] = $0_1;
     $0_1 = HEAP32[$3_1 >> 2] | 0;
    }
    $3_1 = global$1 + 67556 | 0;
    $412(HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0, $0_1 | 0);
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0;
   }
   HEAP32[($8_1 + 20 | 0) >> 2] = $2_1;
   fimport$35(3553 | 0, 10240 | 0, $2_1 | 0);
  }
 }
 
 function $417($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $4_1 = 0, $3_1 = 0, $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  $1_1 = global$1 + 67496 | 0;
  $2_1 = $1_1 + 4 | 0;
  label$1 : {
   label$2 : {
    $1_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    if ($1_1) {
     break label$2
    }
    $1_1 = $2_1;
    break label$1;
   }
   $3_1 = $2_1;
   label$3 : {
    label$4 : {
     label$5 : while (1) {
      label$6 : {
       label$7 : {
        $4_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
        if ($4_1 >>> 0 <= $0_1 >>> 0) {
         break label$7
        }
        $4_1 = HEAP32[$1_1 >> 2] | 0;
        if ($4_1) {
         break label$6
        }
        $2_1 = $1_1;
        break label$1;
       }
       if ($4_1 >>> 0 >= $0_1 >>> 0) {
        break label$3
       }
       $3_1 = $1_1 + 4 | 0;
       $4_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if (!$4_1) {
        break label$4
       }
       $1_1 = $3_1;
      }
      $3_1 = $1_1;
      $1_1 = $4_1;
      continue label$5;
     };
    }
    $2_1 = $1_1;
    $1_1 = $3_1;
    break label$1;
   }
   $2_1 = $1_1;
   $1_1 = $3_1;
  }
  label$8 : {
   $4_1 = HEAP32[$1_1 >> 2] | 0;
   if ($4_1) {
    break label$8
   }
   $4_1 = $2030(24 | 0) | 0;
   HEAP32[($4_1 + 20 | 0) >> 2] = 0;
   HEAP32[($4_1 + 16 | 0) >> 2] = $0_1;
   HEAP32[($4_1 + 8 | 0) >> 2] = $2_1;
   i64toi32_i32$1 = $4_1;
   i64toi32_i32$0 = 0;
   HEAP32[$4_1 >> 2] = 0;
   HEAP32[($4_1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[$1_1 >> 2] = $4_1;
   label$9 : {
    label$10 : {
     $3_1 = HEAP32[(HEAP32[(global$1 + 67496 | 0) >> 2] | 0) >> 2] | 0;
     if ($3_1) {
      break label$10
     }
     $3_1 = $4_1;
     break label$9;
    }
    HEAP32[(global$1 + 67496 | 0) >> 2] = $3_1;
    $3_1 = HEAP32[$1_1 >> 2] | 0;
   }
   $1_1 = global$1 + 67496 | 0;
   $412(HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0, $3_1 | 0);
   HEAP32[($1_1 + 8 | 0) >> 2] = (HEAP32[($1_1 + 8 | 0) >> 2] | 0) + 1 | 0;
  }
  HEAP32[($4_1 + 20 | 0) >> 2] = 10497;
  $1_1 = global$1 + 67508 | 0;
  $2_1 = $1_1 + 4 | 0;
  label$11 : {
   label$12 : {
    $1_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    if ($1_1) {
     break label$12
    }
    $1_1 = $2_1;
    break label$11;
   }
   $3_1 = $2_1;
   label$13 : {
    label$14 : {
     label$15 : while (1) {
      label$16 : {
       label$17 : {
        $4_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
        if ($4_1 >>> 0 <= $0_1 >>> 0) {
         break label$17
        }
        $4_1 = HEAP32[$1_1 >> 2] | 0;
        if ($4_1) {
         break label$16
        }
        $2_1 = $1_1;
        break label$11;
       }
       if ($4_1 >>> 0 >= $0_1 >>> 0) {
        break label$13
       }
       $3_1 = $1_1 + 4 | 0;
       $4_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if (!$4_1) {
        break label$14
       }
       $1_1 = $3_1;
      }
      $3_1 = $1_1;
      $1_1 = $4_1;
      continue label$15;
     };
    }
    $2_1 = $1_1;
    $1_1 = $3_1;
    break label$11;
   }
   $2_1 = $1_1;
   $1_1 = $3_1;
  }
  label$18 : {
   $4_1 = HEAP32[$1_1 >> 2] | 0;
   if ($4_1) {
    break label$18
   }
   $4_1 = $2030(24 | 0) | 0;
   HEAP32[($4_1 + 20 | 0) >> 2] = 0;
   HEAP32[($4_1 + 16 | 0) >> 2] = $0_1;
   HEAP32[($4_1 + 8 | 0) >> 2] = $2_1;
   i64toi32_i32$1 = $4_1;
   i64toi32_i32$0 = 0;
   HEAP32[$4_1 >> 2] = 0;
   HEAP32[($4_1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[$1_1 >> 2] = $4_1;
   label$19 : {
    label$20 : {
     $3_1 = HEAP32[(HEAP32[(global$1 + 67508 | 0) >> 2] | 0) >> 2] | 0;
     if ($3_1) {
      break label$20
     }
     $3_1 = $4_1;
     break label$19;
    }
    HEAP32[(global$1 + 67508 | 0) >> 2] = $3_1;
    $3_1 = HEAP32[$1_1 >> 2] | 0;
   }
   $1_1 = global$1 + 67508 | 0;
   $412(HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0, $3_1 | 0);
   HEAP32[($1_1 + 8 | 0) >> 2] = (HEAP32[($1_1 + 8 | 0) >> 2] | 0) + 1 | 0;
  }
  HEAP32[($4_1 + 20 | 0) >> 2] = 10497;
  $1_1 = global$1 + 67520 | 0;
  $2_1 = $1_1 + 4 | 0;
  label$21 : {
   label$22 : {
    $1_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    if ($1_1) {
     break label$22
    }
    $1_1 = $2_1;
    break label$21;
   }
   $3_1 = $2_1;
   label$23 : {
    label$24 : {
     label$25 : while (1) {
      label$26 : {
       label$27 : {
        $4_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
        if ($4_1 >>> 0 <= $0_1 >>> 0) {
         break label$27
        }
        $4_1 = HEAP32[$1_1 >> 2] | 0;
        if ($4_1) {
         break label$26
        }
        $2_1 = $1_1;
        break label$21;
       }
       if ($4_1 >>> 0 >= $0_1 >>> 0) {
        break label$23
       }
       $3_1 = $1_1 + 4 | 0;
       $4_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if (!$4_1) {
        break label$24
       }
       $1_1 = $3_1;
      }
      $3_1 = $1_1;
      $1_1 = $4_1;
      continue label$25;
     };
    }
    $2_1 = $1_1;
    $1_1 = $3_1;
    break label$21;
   }
   $2_1 = $1_1;
   $1_1 = $3_1;
  }
  label$28 : {
   $4_1 = HEAP32[$1_1 >> 2] | 0;
   if ($4_1) {
    break label$28
   }
   $4_1 = $2030(36 | 0) | 0;
   i64toi32_i32$1 = $4_1;
   i64toi32_i32$0 = 0;
   HEAP32[($4_1 + 20 | 0) >> 2] = 0;
   HEAP32[($4_1 + 24 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($4_1 + 16 | 0) >> 2] = $0_1;
   HEAP32[($4_1 + 8 | 0) >> 2] = $2_1;
   i64toi32_i32$1 = $4_1;
   i64toi32_i32$0 = 0;
   HEAP32[$4_1 >> 2] = 0;
   HEAP32[($4_1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $4_1 + 28 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[$1_1 >> 2] = $4_1;
   label$29 : {
    label$30 : {
     $3_1 = HEAP32[(HEAP32[(global$1 + 67520 | 0) >> 2] | 0) >> 2] | 0;
     if ($3_1) {
      break label$30
     }
     $3_1 = $4_1;
     break label$29;
    }
    HEAP32[(global$1 + 67520 | 0) >> 2] = $3_1;
    $3_1 = HEAP32[$1_1 >> 2] | 0;
   }
   $1_1 = global$1 + 67520 | 0;
   $412(HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0, $3_1 | 0);
   HEAP32[($1_1 + 8 | 0) >> 2] = (HEAP32[($1_1 + 8 | 0) >> 2] | 0) + 1 | 0;
  }
  i64toi32_i32$1 = $4_1 + 28 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $4_1 + 20 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $1_1 = global$1 + 67532 | 0;
  $2_1 = $1_1 + 4 | 0;
  label$31 : {
   label$32 : {
    $1_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    if ($1_1) {
     break label$32
    }
    $1_1 = $2_1;
    break label$31;
   }
   $3_1 = $2_1;
   label$33 : {
    label$34 : {
     label$35 : while (1) {
      label$36 : {
       label$37 : {
        $4_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
        if ($4_1 >>> 0 <= $0_1 >>> 0) {
         break label$37
        }
        $4_1 = HEAP32[$1_1 >> 2] | 0;
        if ($4_1) {
         break label$36
        }
        $2_1 = $1_1;
        break label$31;
       }
       if ($4_1 >>> 0 >= $0_1 >>> 0) {
        break label$33
       }
       $3_1 = $1_1 + 4 | 0;
       $4_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if (!$4_1) {
        break label$34
       }
       $1_1 = $3_1;
      }
      $3_1 = $1_1;
      $1_1 = $4_1;
      continue label$35;
     };
    }
    $2_1 = $1_1;
    $1_1 = $3_1;
    break label$31;
   }
   $2_1 = $1_1;
   $1_1 = $3_1;
  }
  label$38 : {
   $4_1 = HEAP32[$1_1 >> 2] | 0;
   if ($4_1) {
    break label$38
   }
   $4_1 = $2030(24 | 0) | 0;
   HEAP32[($4_1 + 20 | 0) >> 2] = 0;
   HEAP32[($4_1 + 16 | 0) >> 2] = $0_1;
   HEAP32[($4_1 + 8 | 0) >> 2] = $2_1;
   i64toi32_i32$1 = $4_1;
   i64toi32_i32$0 = 0;
   HEAP32[$4_1 >> 2] = 0;
   HEAP32[($4_1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[$1_1 >> 2] = $4_1;
   label$39 : {
    label$40 : {
     $3_1 = HEAP32[(HEAP32[(global$1 + 67532 | 0) >> 2] | 0) >> 2] | 0;
     if ($3_1) {
      break label$40
     }
     $3_1 = $4_1;
     break label$39;
    }
    HEAP32[(global$1 + 67532 | 0) >> 2] = $3_1;
    $3_1 = HEAP32[$1_1 >> 2] | 0;
   }
   $1_1 = global$1 + 67532 | 0;
   $412(HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0, $3_1 | 0);
   HEAP32[($1_1 + 8 | 0) >> 2] = (HEAP32[($1_1 + 8 | 0) >> 2] | 0) + 1 | 0;
  }
  HEAP32[($4_1 + 20 | 0) >> 2] = 1065353216;
  $1_1 = global$1 + 67544 | 0;
  $2_1 = $1_1 + 4 | 0;
  label$41 : {
   label$42 : {
    $1_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    if ($1_1) {
     break label$42
    }
    $1_1 = $2_1;
    break label$41;
   }
   $3_1 = $2_1;
   label$43 : {
    label$44 : {
     label$45 : while (1) {
      label$46 : {
       label$47 : {
        $4_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
        if ($4_1 >>> 0 <= $0_1 >>> 0) {
         break label$47
        }
        $4_1 = HEAP32[$1_1 >> 2] | 0;
        if ($4_1) {
         break label$46
        }
        $2_1 = $1_1;
        break label$41;
       }
       if ($4_1 >>> 0 >= $0_1 >>> 0) {
        break label$43
       }
       $3_1 = $1_1 + 4 | 0;
       $4_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if (!$4_1) {
        break label$44
       }
       $1_1 = $3_1;
      }
      $3_1 = $1_1;
      $1_1 = $4_1;
      continue label$45;
     };
    }
    $2_1 = $1_1;
    $1_1 = $3_1;
    break label$41;
   }
   $2_1 = $1_1;
   $1_1 = $3_1;
  }
  label$48 : {
   $4_1 = HEAP32[$1_1 >> 2] | 0;
   if ($4_1) {
    break label$48
   }
   $4_1 = $2030(24 | 0) | 0;
   HEAP32[($4_1 + 20 | 0) >> 2] = 0;
   HEAP32[($4_1 + 16 | 0) >> 2] = $0_1;
   HEAP32[($4_1 + 8 | 0) >> 2] = $2_1;
   i64toi32_i32$1 = $4_1;
   i64toi32_i32$0 = 0;
   HEAP32[$4_1 >> 2] = 0;
   HEAP32[($4_1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[$1_1 >> 2] = $4_1;
   label$49 : {
    label$50 : {
     $3_1 = HEAP32[(HEAP32[(global$1 + 67544 | 0) >> 2] | 0) >> 2] | 0;
     if ($3_1) {
      break label$50
     }
     $3_1 = $4_1;
     break label$49;
    }
    HEAP32[(global$1 + 67544 | 0) >> 2] = $3_1;
    $3_1 = HEAP32[$1_1 >> 2] | 0;
   }
   $1_1 = global$1 + 67544 | 0;
   $412(HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0, $3_1 | 0);
   HEAP32[($1_1 + 8 | 0) >> 2] = (HEAP32[($1_1 + 8 | 0) >> 2] | 0) + 1 | 0;
  }
  HEAP32[($4_1 + 20 | 0) >> 2] = 9986;
  $1_1 = global$1 + 67556 | 0;
  $2_1 = $1_1 + 4 | 0;
  label$51 : {
   label$52 : {
    $1_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    if ($1_1) {
     break label$52
    }
    $1_1 = $2_1;
    break label$51;
   }
   $3_1 = $2_1;
   label$53 : {
    label$54 : {
     label$55 : while (1) {
      label$56 : {
       label$57 : {
        $4_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
        if ($4_1 >>> 0 <= $0_1 >>> 0) {
         break label$57
        }
        $4_1 = HEAP32[$1_1 >> 2] | 0;
        if ($4_1) {
         break label$56
        }
        $2_1 = $1_1;
        break label$51;
       }
       if ($4_1 >>> 0 >= $0_1 >>> 0) {
        break label$53
       }
       $3_1 = $1_1 + 4 | 0;
       $4_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if (!$4_1) {
        break label$54
       }
       $1_1 = $3_1;
      }
      $3_1 = $1_1;
      $1_1 = $4_1;
      continue label$55;
     };
    }
    $2_1 = $1_1;
    $1_1 = $3_1;
    break label$51;
   }
   $2_1 = $1_1;
   $1_1 = $3_1;
  }
  label$58 : {
   $4_1 = HEAP32[$1_1 >> 2] | 0;
   if ($4_1) {
    break label$58
   }
   $4_1 = $2030(24 | 0) | 0;
   HEAP32[($4_1 + 20 | 0) >> 2] = 0;
   HEAP32[($4_1 + 16 | 0) >> 2] = $0_1;
   HEAP32[($4_1 + 8 | 0) >> 2] = $2_1;
   i64toi32_i32$1 = $4_1;
   i64toi32_i32$0 = 0;
   HEAP32[$4_1 >> 2] = 0;
   HEAP32[($4_1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[$1_1 >> 2] = $4_1;
   label$59 : {
    label$60 : {
     $0_1 = HEAP32[(HEAP32[(global$1 + 67556 | 0) >> 2] | 0) >> 2] | 0;
     if ($0_1) {
      break label$60
     }
     $1_1 = $4_1;
     break label$59;
    }
    HEAP32[(global$1 + 67556 | 0) >> 2] = $0_1;
    $1_1 = HEAP32[$1_1 >> 2] | 0;
   }
   $0_1 = global$1 + 67556 | 0;
   $412(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $1_1 | 0);
   HEAP32[($0_1 + 8 | 0) >> 2] = (HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 1 | 0;
  }
  HEAP32[($4_1 + 20 | 0) >> 2] = 9729;
 }
 
 function $418($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $4_1 = 0, $2_1 = 0, $5_1 = 0;
  label$1 : {
   $1_1 = global$1 + 67496 | 0;
   $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   $3_1 = $1_1 + 4 | 0;
   $1_1 = $2_1;
   label$2 : while (1) {
    $4_1 = (HEAP32[($1_1 + 16 | 0) >> 2] | 0) >>> 0 < $0_1 >>> 0;
    $3_1 = $4_1 ? $3_1 : $1_1;
    $1_1 = HEAP32[($1_1 + ($4_1 << 2 | 0) | 0) >> 2] | 0;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
   if (($3_1 | 0) == ((global$1 + 67496 | 0) + 4 | 0 | 0)) {
    break label$1
   }
   if ((HEAP32[($3_1 + 16 | 0) >> 2] | 0) >>> 0 > $0_1 >>> 0) {
    break label$1
   }
   label$3 : {
    label$4 : {
     $1_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
     if ($1_1) {
      break label$4
     }
     $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
     if ((HEAP32[$4_1 >> 2] | 0 | 0) == ($3_1 | 0)) {
      break label$3
     }
     $5_1 = $3_1 + 8 | 0;
     label$5 : while (1) {
      $1_1 = HEAP32[$5_1 >> 2] | 0;
      $5_1 = $1_1 + 8 | 0;
      $4_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
      if (($1_1 | 0) != (HEAP32[$4_1 >> 2] | 0 | 0)) {
       continue label$5
      }
      break label$3;
     };
    }
    label$6 : while (1) {
     $4_1 = $1_1;
     $1_1 = HEAP32[$1_1 >> 2] | 0;
     if ($1_1) {
      continue label$6
     }
     break label$6;
    };
   }
   label$7 : {
    if ((HEAP32[(global$1 + 67496 | 0) >> 2] | 0 | 0) != ($3_1 | 0)) {
     break label$7
    }
    HEAP32[(global$1 + 67496 | 0) >> 2] = $4_1;
   }
   $1_1 = global$1 + 67496 | 0;
   HEAP32[($1_1 + 8 | 0) >> 2] = (HEAP32[($1_1 + 8 | 0) >> 2] | 0) + -1 | 0;
   $419($2_1 | 0, $3_1 | 0);
   $2032($3_1 | 0);
  }
  label$8 : {
   $1_1 = global$1 + 67508 | 0;
   $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$8
   }
   $3_1 = $1_1 + 4 | 0;
   $1_1 = $2_1;
   label$9 : while (1) {
    $4_1 = (HEAP32[($1_1 + 16 | 0) >> 2] | 0) >>> 0 < $0_1 >>> 0;
    $3_1 = $4_1 ? $3_1 : $1_1;
    $1_1 = HEAP32[($1_1 + ($4_1 << 2 | 0) | 0) >> 2] | 0;
    if ($1_1) {
     continue label$9
    }
    break label$9;
   };
   if (($3_1 | 0) == ((global$1 + 67508 | 0) + 4 | 0 | 0)) {
    break label$8
   }
   if ((HEAP32[($3_1 + 16 | 0) >> 2] | 0) >>> 0 > $0_1 >>> 0) {
    break label$8
   }
   label$10 : {
    label$11 : {
     $1_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
     if ($1_1) {
      break label$11
     }
     $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
     if ((HEAP32[$4_1 >> 2] | 0 | 0) == ($3_1 | 0)) {
      break label$10
     }
     $5_1 = $3_1 + 8 | 0;
     label$12 : while (1) {
      $1_1 = HEAP32[$5_1 >> 2] | 0;
      $5_1 = $1_1 + 8 | 0;
      $4_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
      if (($1_1 | 0) != (HEAP32[$4_1 >> 2] | 0 | 0)) {
       continue label$12
      }
      break label$10;
     };
    }
    label$13 : while (1) {
     $4_1 = $1_1;
     $1_1 = HEAP32[$1_1 >> 2] | 0;
     if ($1_1) {
      continue label$13
     }
     break label$13;
    };
   }
   label$14 : {
    if ((HEAP32[(global$1 + 67508 | 0) >> 2] | 0 | 0) != ($3_1 | 0)) {
     break label$14
    }
    HEAP32[(global$1 + 67508 | 0) >> 2] = $4_1;
   }
   $1_1 = global$1 + 67508 | 0;
   HEAP32[($1_1 + 8 | 0) >> 2] = (HEAP32[($1_1 + 8 | 0) >> 2] | 0) + -1 | 0;
   $419($2_1 | 0, $3_1 | 0);
   $2032($3_1 | 0);
  }
  label$15 : {
   $1_1 = global$1 + 67520 | 0;
   $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$15
   }
   $3_1 = $1_1 + 4 | 0;
   $1_1 = $2_1;
   label$16 : while (1) {
    $4_1 = (HEAP32[($1_1 + 16 | 0) >> 2] | 0) >>> 0 < $0_1 >>> 0;
    $3_1 = $4_1 ? $3_1 : $1_1;
    $1_1 = HEAP32[($1_1 + ($4_1 << 2 | 0) | 0) >> 2] | 0;
    if ($1_1) {
     continue label$16
    }
    break label$16;
   };
   if (($3_1 | 0) == ((global$1 + 67520 | 0) + 4 | 0 | 0)) {
    break label$15
   }
   if ((HEAP32[($3_1 + 16 | 0) >> 2] | 0) >>> 0 > $0_1 >>> 0) {
    break label$15
   }
   label$17 : {
    label$18 : {
     $1_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
     if ($1_1) {
      break label$18
     }
     $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
     if ((HEAP32[$4_1 >> 2] | 0 | 0) == ($3_1 | 0)) {
      break label$17
     }
     $5_1 = $3_1 + 8 | 0;
     label$19 : while (1) {
      $1_1 = HEAP32[$5_1 >> 2] | 0;
      $5_1 = $1_1 + 8 | 0;
      $4_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
      if (($1_1 | 0) != (HEAP32[$4_1 >> 2] | 0 | 0)) {
       continue label$19
      }
      break label$17;
     };
    }
    label$20 : while (1) {
     $4_1 = $1_1;
     $1_1 = HEAP32[$1_1 >> 2] | 0;
     if ($1_1) {
      continue label$20
     }
     break label$20;
    };
   }
   label$21 : {
    if ((HEAP32[(global$1 + 67520 | 0) >> 2] | 0 | 0) != ($3_1 | 0)) {
     break label$21
    }
    HEAP32[(global$1 + 67520 | 0) >> 2] = $4_1;
   }
   $1_1 = global$1 + 67520 | 0;
   HEAP32[($1_1 + 8 | 0) >> 2] = (HEAP32[($1_1 + 8 | 0) >> 2] | 0) + -1 | 0;
   $419($2_1 | 0, $3_1 | 0);
   $2032($3_1 | 0);
  }
  label$22 : {
   $1_1 = global$1 + 67532 | 0;
   $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$22
   }
   $3_1 = $1_1 + 4 | 0;
   $1_1 = $2_1;
   label$23 : while (1) {
    $4_1 = (HEAP32[($1_1 + 16 | 0) >> 2] | 0) >>> 0 < $0_1 >>> 0;
    $3_1 = $4_1 ? $3_1 : $1_1;
    $1_1 = HEAP32[($1_1 + ($4_1 << 2 | 0) | 0) >> 2] | 0;
    if ($1_1) {
     continue label$23
    }
    break label$23;
   };
   if (($3_1 | 0) == ((global$1 + 67532 | 0) + 4 | 0 | 0)) {
    break label$22
   }
   if ((HEAP32[($3_1 + 16 | 0) >> 2] | 0) >>> 0 > $0_1 >>> 0) {
    break label$22
   }
   label$24 : {
    label$25 : {
     $1_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
     if ($1_1) {
      break label$25
     }
     $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
     if ((HEAP32[$4_1 >> 2] | 0 | 0) == ($3_1 | 0)) {
      break label$24
     }
     $5_1 = $3_1 + 8 | 0;
     label$26 : while (1) {
      $1_1 = HEAP32[$5_1 >> 2] | 0;
      $5_1 = $1_1 + 8 | 0;
      $4_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
      if (($1_1 | 0) != (HEAP32[$4_1 >> 2] | 0 | 0)) {
       continue label$26
      }
      break label$24;
     };
    }
    label$27 : while (1) {
     $4_1 = $1_1;
     $1_1 = HEAP32[$1_1 >> 2] | 0;
     if ($1_1) {
      continue label$27
     }
     break label$27;
    };
   }
   label$28 : {
    if ((HEAP32[(global$1 + 67532 | 0) >> 2] | 0 | 0) != ($3_1 | 0)) {
     break label$28
    }
    HEAP32[(global$1 + 67532 | 0) >> 2] = $4_1;
   }
   $1_1 = global$1 + 67532 | 0;
   HEAP32[($1_1 + 8 | 0) >> 2] = (HEAP32[($1_1 + 8 | 0) >> 2] | 0) + -1 | 0;
   $419($2_1 | 0, $3_1 | 0);
   $2032($3_1 | 0);
  }
  label$29 : {
   $1_1 = global$1 + 67544 | 0;
   $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$29
   }
   $3_1 = $1_1 + 4 | 0;
   $1_1 = $2_1;
   label$30 : while (1) {
    $4_1 = (HEAP32[($1_1 + 16 | 0) >> 2] | 0) >>> 0 < $0_1 >>> 0;
    $3_1 = $4_1 ? $3_1 : $1_1;
    $1_1 = HEAP32[($1_1 + ($4_1 << 2 | 0) | 0) >> 2] | 0;
    if ($1_1) {
     continue label$30
    }
    break label$30;
   };
   if (($3_1 | 0) == ((global$1 + 67544 | 0) + 4 | 0 | 0)) {
    break label$29
   }
   if ((HEAP32[($3_1 + 16 | 0) >> 2] | 0) >>> 0 > $0_1 >>> 0) {
    break label$29
   }
   label$31 : {
    label$32 : {
     $1_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
     if ($1_1) {
      break label$32
     }
     $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
     if ((HEAP32[$4_1 >> 2] | 0 | 0) == ($3_1 | 0)) {
      break label$31
     }
     $5_1 = $3_1 + 8 | 0;
     label$33 : while (1) {
      $1_1 = HEAP32[$5_1 >> 2] | 0;
      $5_1 = $1_1 + 8 | 0;
      $4_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
      if (($1_1 | 0) != (HEAP32[$4_1 >> 2] | 0 | 0)) {
       continue label$33
      }
      break label$31;
     };
    }
    label$34 : while (1) {
     $4_1 = $1_1;
     $1_1 = HEAP32[$1_1 >> 2] | 0;
     if ($1_1) {
      continue label$34
     }
     break label$34;
    };
   }
   label$35 : {
    if ((HEAP32[(global$1 + 67544 | 0) >> 2] | 0 | 0) != ($3_1 | 0)) {
     break label$35
    }
    HEAP32[(global$1 + 67544 | 0) >> 2] = $4_1;
   }
   $1_1 = global$1 + 67544 | 0;
   HEAP32[($1_1 + 8 | 0) >> 2] = (HEAP32[($1_1 + 8 | 0) >> 2] | 0) + -1 | 0;
   $419($2_1 | 0, $3_1 | 0);
   $2032($3_1 | 0);
  }
  label$36 : {
   $1_1 = global$1 + 67556 | 0;
   $5_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   if (!$5_1) {
    break label$36
   }
   $3_1 = $1_1 + 4 | 0;
   $1_1 = $5_1;
   label$37 : while (1) {
    $4_1 = (HEAP32[($1_1 + 16 | 0) >> 2] | 0) >>> 0 < $0_1 >>> 0;
    $3_1 = $4_1 ? $3_1 : $1_1;
    $1_1 = HEAP32[($1_1 + ($4_1 << 2 | 0) | 0) >> 2] | 0;
    if ($1_1) {
     continue label$37
    }
    break label$37;
   };
   if (($3_1 | 0) == ((global$1 + 67556 | 0) + 4 | 0 | 0)) {
    break label$36
   }
   if ((HEAP32[($3_1 + 16 | 0) >> 2] | 0) >>> 0 > $0_1 >>> 0) {
    break label$36
   }
   label$38 : {
    label$39 : {
     $0_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
     if ($0_1) {
      break label$39
     }
     $1_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
     if ((HEAP32[$1_1 >> 2] | 0 | 0) == ($3_1 | 0)) {
      break label$38
     }
     $4_1 = $3_1 + 8 | 0;
     label$40 : while (1) {
      $0_1 = HEAP32[$4_1 >> 2] | 0;
      $4_1 = $0_1 + 8 | 0;
      $1_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
      if (($0_1 | 0) != (HEAP32[$1_1 >> 2] | 0 | 0)) {
       continue label$40
      }
      break label$38;
     };
    }
    label$41 : while (1) {
     $1_1 = $0_1;
     $0_1 = HEAP32[$1_1 >> 2] | 0;
     if ($0_1) {
      continue label$41
     }
     break label$41;
    };
   }
   label$42 : {
    if ((HEAP32[(global$1 + 67556 | 0) >> 2] | 0 | 0) != ($3_1 | 0)) {
     break label$42
    }
    HEAP32[(global$1 + 67556 | 0) >> 2] = $1_1;
   }
   $0_1 = global$1 + 67556 | 0;
   HEAP32[($0_1 + 8 | 0) >> 2] = (HEAP32[($0_1 + 8 | 0) >> 2] | 0) + -1 | 0;
   $419($5_1 | 0, $3_1 | 0);
   $2032($3_1 | 0);
  }
 }
 
 function $419($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $3_1 = 0, $7_1 = 0, $6_1 = 0, $5_1 = 0;
  $2_1 = $1_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      $3_1 = HEAP32[$2_1 >> 2] | 0;
      if (!$3_1) {
       break label$4
      }
      $4_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if (!$4_1) {
       break label$3
      }
      label$5 : while (1) {
       $2_1 = $4_1;
       $4_1 = HEAP32[$2_1 >> 2] | 0;
       if ($4_1) {
        continue label$5
       }
       break label$5;
      };
     }
     $3_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
     if ($3_1) {
      break label$2
     }
     $3_1 = 0;
     $5_1 = 1;
     break label$1;
    }
    $2_1 = $1_1;
   }
   HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
   $5_1 = 0;
  }
  label$6 : {
   label$7 : {
    $6_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
    $4_1 = HEAP32[$6_1 >> 2] | 0;
    if (($4_1 | 0) != ($2_1 | 0)) {
     break label$7
    }
    HEAP32[$6_1 >> 2] = $3_1;
    label$8 : {
     if (($2_1 | 0) != ($0_1 | 0)) {
      break label$8
     }
     $4_1 = 0;
     $0_1 = $3_1;
     break label$6;
    }
    $4_1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
    break label$6;
   }
   HEAP32[($6_1 + 4 | 0) >> 2] = $3_1;
  }
  $6_1 = HEAPU8[($2_1 + 12 | 0) >> 0] | 0;
  label$9 : {
   if (($2_1 | 0) == ($1_1 | 0)) {
    break label$9
   }
   $7_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
   HEAP32[($2_1 + 8 | 0) >> 2] = $7_1;
   HEAP32[($7_1 + (((HEAP32[(HEAP32[($1_1 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0) != ($1_1 | 0)) << 2 | 0) | 0) >> 2] = $2_1;
   $7_1 = HEAP32[$1_1 >> 2] | 0;
   HEAP32[$2_1 >> 2] = $7_1;
   HEAP32[($7_1 + 8 | 0) >> 2] = $2_1;
   $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   HEAP32[($2_1 + 4 | 0) >> 2] = $7_1;
   label$10 : {
    if (!$7_1) {
     break label$10
    }
    HEAP32[($7_1 + 8 | 0) >> 2] = $2_1;
   }
   HEAP8[($2_1 + 12 | 0) >> 0] = HEAPU8[($1_1 + 12 | 0) >> 0] | 0;
   $0_1 = ($0_1 | 0) == ($1_1 | 0) ? $2_1 : $0_1;
  }
  label$11 : {
   label$12 : {
    label$13 : {
     label$14 : {
      if (!($6_1 & 255 | 0)) {
       break label$14
      }
      if (!$0_1) {
       break label$14
      }
      label$15 : {
       if (!$5_1) {
        break label$15
       }
       label$16 : while (1) {
        $1_1 = HEAPU8[($4_1 + 12 | 0) >> 0] | 0;
        label$17 : {
         label$18 : {
          $2_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
          if ((HEAP32[$2_1 >> 2] | 0 | 0) == ($4_1 | 0)) {
           break label$18
          }
          label$19 : {
           if ($1_1 & 255 | 0) {
            break label$19
           }
           HEAP8[($4_1 + 12 | 0) >> 0] = 1;
           HEAP8[($2_1 + 12 | 0) >> 0] = 0;
           $1_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
           $3_1 = HEAP32[$1_1 >> 2] | 0;
           HEAP32[($2_1 + 4 | 0) >> 2] = $3_1;
           label$20 : {
            if (!$3_1) {
             break label$20
            }
            HEAP32[($3_1 + 8 | 0) >> 2] = $2_1;
           }
           HEAP32[($1_1 + 8 | 0) >> 2] = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
           $3_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
           HEAP32[($3_1 + (((HEAP32[$3_1 >> 2] | 0 | 0) != ($2_1 | 0)) << 2 | 0) | 0) >> 2] = $1_1;
           HEAP32[$1_1 >> 2] = $2_1;
           HEAP32[($2_1 + 8 | 0) >> 2] = $1_1;
           $2_1 = HEAP32[$4_1 >> 2] | 0;
           $0_1 = ($0_1 | 0) == ($2_1 | 0) ? $4_1 : $0_1;
           $4_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
          }
          label$21 : {
           label$22 : {
            $2_1 = HEAP32[$4_1 >> 2] | 0;
            if (!$2_1) {
             break label$22
            }
            if (!(HEAPU8[($2_1 + 12 | 0) >> 0] | 0)) {
             break label$21
            }
           }
           label$23 : {
            $1_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
            if (!$1_1) {
             break label$23
            }
            if (!(HEAPU8[($1_1 + 12 | 0) >> 0] | 0)) {
             break label$13
            }
           }
           HEAP8[($4_1 + 12 | 0) >> 0] = 0;
           label$24 : {
            label$25 : {
             $4_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
             if (($4_1 | 0) != ($0_1 | 0)) {
              break label$25
             }
             $4_1 = $0_1;
             break label$24;
            }
            if (HEAPU8[($4_1 + 12 | 0) >> 0] | 0) {
             break label$17
            }
           }
           HEAP8[($4_1 + 12 | 0) >> 0] = 1;
           return;
          }
          $1_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
          if ($1_1) {
           break label$13
          }
          break label$12;
         }
         label$26 : {
          label$27 : {
           if (!($1_1 & 255 | 0)) {
            break label$27
           }
           $1_1 = $4_1;
           break label$26;
          }
          HEAP8[($4_1 + 12 | 0) >> 0] = 1;
          HEAP8[($2_1 + 12 | 0) >> 0] = 0;
          $1_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
          HEAP32[$2_1 >> 2] = $1_1;
          label$28 : {
           if (!$1_1) {
            break label$28
           }
           HEAP32[($1_1 + 8 | 0) >> 2] = $2_1;
          }
          HEAP32[($4_1 + 8 | 0) >> 2] = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
          label$29 : {
           label$30 : {
            $3_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
            if ((HEAP32[$3_1 >> 2] | 0 | 0) != ($2_1 | 0)) {
             break label$30
            }
            HEAP32[$3_1 >> 2] = $4_1;
            $1_1 = HEAP32[$2_1 >> 2] | 0;
            break label$29;
           }
           HEAP32[($3_1 + 4 | 0) >> 2] = $4_1;
          }
          HEAP32[($4_1 + 4 | 0) >> 2] = $2_1;
          HEAP32[($2_1 + 8 | 0) >> 2] = $4_1;
          $0_1 = ($0_1 | 0) == ($2_1 | 0) ? $4_1 : $0_1;
         }
         label$31 : {
          label$32 : {
           $2_1 = HEAP32[$1_1 >> 2] | 0;
           if (!$2_1) {
            break label$32
           }
           if (HEAPU8[($2_1 + 12 | 0) >> 0] | 0) {
            break label$32
           }
           $4_1 = $1_1;
           break label$31;
          }
          label$33 : {
           label$34 : {
            $4_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
            if (!$4_1) {
             break label$34
            }
            if (!(HEAPU8[($4_1 + 12 | 0) >> 0] | 0)) {
             break label$33
            }
           }
           HEAP8[($1_1 + 12 | 0) >> 0] = 0;
           label$35 : {
            $4_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
            if (($4_1 | 0) == ($0_1 | 0)) {
             break label$35
            }
            if ((HEAPU8[($4_1 + 12 | 0) >> 0] | 0) & 255 | 0) {
             break label$17
            }
           }
           HEAP8[($4_1 + 12 | 0) >> 0] = 1;
           return;
          }
          label$36 : {
           if (!$2_1) {
            break label$36
           }
           label$37 : {
            if (HEAPU8[($2_1 + 12 | 0) >> 0] | 0) {
             break label$37
            }
            $4_1 = $1_1;
            break label$31;
           }
           $4_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
          }
          HEAP8[($4_1 + 12 | 0) >> 0] = 1;
          HEAP8[($1_1 + 12 | 0) >> 0] = 0;
          $2_1 = HEAP32[$4_1 >> 2] | 0;
          HEAP32[($1_1 + 4 | 0) >> 2] = $2_1;
          label$38 : {
           if (!$2_1) {
            break label$38
           }
           HEAP32[($2_1 + 8 | 0) >> 2] = $1_1;
          }
          HEAP32[($4_1 + 8 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
          $2_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
          HEAP32[($2_1 + (((HEAP32[$2_1 >> 2] | 0 | 0) != ($1_1 | 0)) << 2 | 0) | 0) >> 2] = $4_1;
          HEAP32[$4_1 >> 2] = $1_1;
          HEAP32[($1_1 + 8 | 0) >> 2] = $4_1;
          $2_1 = $1_1;
         }
         $0_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
         HEAP8[($4_1 + 12 | 0) >> 0] = HEAPU8[($0_1 + 12 | 0) >> 0] | 0;
         HEAP8[($0_1 + 12 | 0) >> 0] = 1;
         HEAP8[($2_1 + 12 | 0) >> 0] = 1;
         $4_1 = HEAP32[$0_1 >> 2] | 0;
         $2_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
         HEAP32[$0_1 >> 2] = $2_1;
         label$39 : {
          if (!$2_1) {
           break label$39
          }
          HEAP32[($2_1 + 8 | 0) >> 2] = $0_1;
         }
         HEAP32[($4_1 + 8 | 0) >> 2] = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
         $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
         HEAP32[($2_1 + (((HEAP32[$2_1 >> 2] | 0 | 0) != ($0_1 | 0)) << 2 | 0) | 0) >> 2] = $4_1;
         HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
         HEAP32[($0_1 + 8 | 0) >> 2] = $4_1;
         return;
        }
        $2_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
        $4_1 = HEAP32[($2_1 + (((HEAP32[$2_1 >> 2] | 0 | 0) == ($4_1 | 0)) << 2 | 0) | 0) >> 2] | 0;
        continue label$16;
       };
      }
      HEAP8[($3_1 + 12 | 0) >> 0] = 1;
     }
     return;
    }
    if (HEAPU8[($1_1 + 12 | 0) >> 0] | 0) {
     break label$12
    }
    $2_1 = $4_1;
    break label$11;
   }
   HEAP8[($2_1 + 12 | 0) >> 0] = 1;
   HEAP8[($4_1 + 12 | 0) >> 0] = 0;
   $0_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
   HEAP32[$4_1 >> 2] = $0_1;
   label$40 : {
    if (!$0_1) {
     break label$40
    }
    HEAP32[($0_1 + 8 | 0) >> 2] = $4_1;
   }
   HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
   $0_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
   HEAP32[($0_1 + (((HEAP32[$0_1 >> 2] | 0 | 0) != ($4_1 | 0)) << 2 | 0) | 0) >> 2] = $2_1;
   HEAP32[($2_1 + 4 | 0) >> 2] = $4_1;
   HEAP32[($4_1 + 8 | 0) >> 2] = $2_1;
   $1_1 = $4_1;
  }
  $4_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
  HEAP8[($2_1 + 12 | 0) >> 0] = HEAPU8[($4_1 + 12 | 0) >> 0] | 0;
  HEAP8[($4_1 + 12 | 0) >> 0] = 1;
  HEAP8[($1_1 + 12 | 0) >> 0] = 1;
  $2_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  $0_1 = HEAP32[$2_1 >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
  label$41 : {
   if (!$0_1) {
    break label$41
   }
   HEAP32[($0_1 + 8 | 0) >> 2] = $4_1;
  }
  HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  $0_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[($0_1 + (((HEAP32[$0_1 >> 2] | 0 | 0) != ($4_1 | 0)) << 2 | 0) | 0) >> 2] = $2_1;
  HEAP32[$2_1 >> 2] = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $2_1;
 }
 
 function $420($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAP32[(global$1 + 67652 | 0) >> 2] | 0 | 0) == ($0_1 | 0)) {
    break label$1
   }
   HEAP32[(global$1 + 67652 | 0) >> 2] = $0_1;
   fimport$75($0_1 | 0);
  }
 }
 
 function $421($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAP32[(global$1 + 67656 | 0) >> 2] | 0 | 0) == ($0_1 | 0)) {
    break label$1
   }
   HEAP32[(global$1 + 67656 | 0) >> 2] = $0_1;
   fimport$76($0_1 | 0);
  }
 }
 
 function $422($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAP32[(global$1 + 67660 | 0) >> 2] | 0 | 0) == ($0_1 | 0)) {
    break label$1
   }
   HEAP32[(global$1 + 67660 | 0) >> 2] = $0_1;
   fimport$18(34963 | 0, $0_1 | 0);
  }
 }
 
 function $423($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   $2_1 = (global$1 + 67664 | 0) + ($1_1 << 2 | 0) | 0;
   if ((HEAP32[$2_1 >> 2] | 0 | 0) == ($0_1 | 0)) {
    break label$1
   }
   HEAP32[$2_1 >> 2] = $0_1;
   label$2 : {
    if ((HEAP32[(global$1 + 23272 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
     break label$2
    }
    HEAP32[(global$1 + 23272 | 0) >> 2] = $1_1;
    fimport$73($1_1 + 33984 | 0 | 0);
   }
   fimport$77(3553 | 0, $0_1 | 0);
  }
 }
 
 function $424($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAP32[(global$1 + 67856 | 0) >> 2] | 0 | 0) == ($0_1 | 0)) {
    break label$1
   }
   HEAP32[(global$1 + 67856 | 0) >> 2] = $0_1;
   fimport$25(36009 | 0, $0_1 | 0);
  }
  label$2 : {
   if ((HEAP32[(global$1 + 67860 | 0) >> 2] | 0 | 0) == ($0_1 | 0)) {
    break label$2
   }
   HEAP32[(global$1 + 67860 | 0) >> 2] = $0_1;
   fimport$25(36008 | 0, $0_1 | 0);
  }
 }
 
 function $425($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAP32[(global$1 + 67856 | 0) >> 2] | 0 | 0) == ($0_1 | 0)) {
    break label$1
   }
   HEAP32[(global$1 + 67856 | 0) >> 2] = $0_1;
   fimport$25(36009 | 0, $0_1 | 0);
  }
 }
 
 function $426($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAP32[(global$1 + 67860 | 0) >> 2] | 0 | 0) == ($0_1 | 0)) {
    break label$1
   }
   HEAP32[(global$1 + 67860 | 0) >> 2] = $0_1;
   fimport$25(36008 | 0, $0_1 | 0);
  }
 }
 
 function $427($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAP32[(global$1 + 67864 | 0) >> 2] | 0 | 0) == ($0_1 | 0)) {
    break label$1
   }
   HEAP32[(global$1 + 67864 | 0) >> 2] = $0_1;
   fimport$18(35051 | 0, $0_1 | 0);
  }
 }
 
 function $428($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAP32[(global$1 + 67868 | 0) >> 2] | 0 | 0) == ($0_1 | 0)) {
    break label$1
   }
   HEAP32[(global$1 + 67868 | 0) >> 2] = $0_1;
   fimport$78(36161 | 0, $0_1 | 0);
  }
 }
 
 function $429($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if ((HEAP32[(global$1 + 67872 | 0) >> 2] | 0 | 0) == ($0_1 | 0)) {
    break label$1
   }
   HEAP32[(global$1 + 67872 | 0) >> 2] = $0_1;
   fimport$79(35345 | 0, $1_1 | 0, $0_1 | 0);
  }
 }
 
 function $430($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  label$1 : {
   $1_1 = HEAPU16[$0_1 >> 1] | 0;
   if ((HEAPU16[(global$1 + 67876 | 0) >> 1] | 0 | 0) == ($1_1 | 0)) {
    break label$1
   }
   $2_1 = global$1;
   HEAP16[($2_1 + 67876 | 0) >> 1] = $1_1;
   $489(HEAP32[(HEAP32[($2_1 + 67568 | 0) >> 2] | 0) >> 2] | 0 | 0, $0_1 + 8 | 0 | 0);
  }
 }
 
 function $431($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[((HEAP32[(global$1 + 67568 | 0) >> 2] | 0) + ($0_1 << 2 | 0) | 0) >> 2] | 0 | 0;
 }
 
 function $432($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAP32[(global$1 + 67652 | 0) >> 2] | 0 | 0) != ($0_1 | 0)) {
    break label$1
   }
   HEAP32[(global$1 + 67652 | 0) >> 2] = 0;
   fimport$75(0 | 0);
  }
 }
 
 function $433($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAP32[(global$1 + 67656 | 0) >> 2] | 0 | 0) != ($0_1 | 0)) {
    break label$1
   }
   HEAP32[(global$1 + 67656 | 0) >> 2] = 0;
   fimport$76(0 | 0);
  }
 }
 
 function $434($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAP32[(global$1 + 67660 | 0) >> 2] | 0 | 0) != ($0_1 | 0)) {
    break label$1
   }
   HEAP32[(global$1 + 67660 | 0) >> 2] = 0;
   fimport$18(34963 | 0, 0 | 0);
  }
 }
 
 function $435($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   $2_1 = (global$1 + 67664 | 0) + ($1_1 << 2 | 0) | 0;
   if ((HEAP32[$2_1 >> 2] | 0 | 0) != ($0_1 | 0)) {
    break label$1
   }
   HEAP32[$2_1 >> 2] = 0;
   label$2 : {
    if ((HEAP32[(global$1 + 23272 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
     break label$2
    }
    HEAP32[(global$1 + 23272 | 0) >> 2] = $1_1;
    fimport$73($1_1 + 33984 | 0 | 0);
   }
   fimport$77(3553 | 0, 0 | 0);
  }
 }
 
 function $436($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   label$2 : {
    $1_1 = global$1;
    if ((HEAP32[($1_1 + 67856 | 0) >> 2] | 0 | 0) == ($0_1 | 0)) {
     break label$2
    }
    if ((HEAP32[($1_1 + 67860 | 0) >> 2] | 0 | 0) != ($0_1 | 0)) {
     break label$1
    }
   }
   $0_1 = global$1;
   HEAP32[($0_1 + 67860 | 0) >> 2] = 0;
   HEAP32[($0_1 + 67856 | 0) >> 2] = 0;
   fimport$25(36160 | 0, 0 | 0);
  }
 }
 
 function $437($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAP32[(global$1 + 67864 | 0) >> 2] | 0 | 0) != ($0_1 | 0)) {
    break label$1
   }
   HEAP32[(global$1 + 67864 | 0) >> 2] = 0;
   fimport$18(35051 | 0, 0 | 0);
  }
 }
 
 function $438($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if ((HEAP32[(global$1 + 67872 | 0) >> 2] | 0 | 0) != ($0_1 | 0)) {
    break label$1
   }
   HEAP32[(global$1 + 67872 | 0) >> 2] = 0;
   fimport$79(35345 | 0, $1_1 | 0, 0 | 0);
  }
 }
 
 function $439($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU16[(global$1 + 67876 | 0) >> 1] | 0 | 0) != (HEAPU16[$0_1 >> 1] | 0 | 0)) {
    break label$1
   }
   HEAP16[(global$1 + 67876 | 0) >> 1] = 0;
  }
 }
 
 function $440() {
  return HEAP32[(global$1 + 67860 | 0) >> 2] | 0 | 0;
 }
 
 function $441() {
  return HEAP32[(global$1 + 67856 | 0) >> 2] | 0 | 0;
 }
 
 function $442() {
  return HEAP32[(global$1 + 67864 | 0) >> 2] | 0 | 0;
 }
 
 function $443() {
  return HEAP32[(global$1 + 23256 | 0) >> 2] | 0 | 0;
 }
 
 function $444() {
  return HEAP32[(global$1 + 67620 | 0) >> 2] | 0 | 0;
 }
 
 function $445($0_1) {
  $0_1 = $0_1 | 0;
  HEAP8[(global$1 + 67606 | 0) >> 0] = $0_1;
 }
 
 function $446() {
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $1_1 = 0, $0_1 = 0, $2_1 = 0, $3_1 = 0;
  $0_1 = global$1;
  $1_1 = $0_1 + 67432 | 0;
  i64toi32_i32$1 = $1_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  $2_1 = $0_1 + 67496 | 0;
  i64toi32_i32$1 = $2_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1_1 + 12 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($1_1 + 20 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $1_1 + 32 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1_1 + 44 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($1_1 + 40 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $1_1 + 52 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($1_1 + 60 | 0) >> 2] = 1065353216;
  HEAP32[$2_1 >> 2] = $2_1 + 4 | 0;
  $1_1 = global$15;
  $2_1 = $0_1 + 1024 | 0;
  fimport$3($1_1 + 164 | 0 | 0, 0 | 0, $2_1 | 0) | 0;
  $3_1 = $0_1 + 67508 | 0;
  i64toi32_i32$1 = $3_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[i64toi32_i32$1 >> 2] = i64toi32_i32$1 + 4 | 0;
  fimport$3($1_1 + 165 | 0 | 0, 0 | 0, $2_1 | 0) | 0;
  $3_1 = $0_1 + 67520 | 0;
  i64toi32_i32$1 = $3_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[i64toi32_i32$1 >> 2] = i64toi32_i32$1 + 4 | 0;
  fimport$3($1_1 + 166 | 0 | 0, 0 | 0, $2_1 | 0) | 0;
  $3_1 = $0_1 + 67532 | 0;
  i64toi32_i32$1 = $3_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[i64toi32_i32$1 >> 2] = i64toi32_i32$1 + 4 | 0;
  fimport$3($1_1 + 167 | 0 | 0, 0 | 0, $2_1 | 0) | 0;
  $3_1 = $0_1 + 67544 | 0;
  i64toi32_i32$1 = $3_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[i64toi32_i32$1 >> 2] = i64toi32_i32$1 + 4 | 0;
  fimport$3($1_1 + 168 | 0 | 0, 0 | 0, $2_1 | 0) | 0;
  $3_1 = $0_1 + 67556 | 0;
  i64toi32_i32$1 = $3_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[i64toi32_i32$1 >> 2] = i64toi32_i32$1 + 4 | 0;
  fimport$3($1_1 + 169 | 0 | 0, 0 | 0, $2_1 | 0) | 0;
  $0_1 = $0_1 + 67568 | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  fimport$3($1_1 + 170 | 0 | 0, 0 | 0, $2_1 | 0) | 0;
 }
 
 function $447($0_1) {
  $0_1 = $0_1 | 0;
  $448($0_1 | 0);
  return $0_1 + 4 | 0 | 0;
 }
 
 function $448($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $1_1 = 0, i64toi32_i32$2 = 0, $3_1 = Math_fround(0), $2_1 = 0, $4_1 = Math_fround(0), $198_1 = 0, $203_1 = 0, $209_1 = 0, $215_1 = 0, $221_1 = 0, $226_1 = 0, $231_1 = 0, $234_1 = 0;
  $1_1 = global$0 - 576 | 0;
  global$0 = $1_1;
  label$1 : {
   if (!(HEAPU8[$0_1 >> 0] | 0)) {
    break label$1
   }
   $3_1 = Math_fround(HEAPF32[($0_1 + 84 | 0) >> 2]);
   i64toi32_i32$1 = ($1_1 + 512 | 0) + 12 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = ($1_1 + 512 | 0) + 24 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[(($1_1 + 512 | 0) + 20 | 0) >> 2] = 1065353216;
   i64toi32_i32$1 = ($1_1 + 512 | 0) + 32 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = ($1_1 + 512 | 0) + 40 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 516 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 520 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[(i64toi32_i32$1 + 512 | 0) >> 2] = 1065353216;
   $2_1 = HEAP32[($0_1 + 80 | 0) >> 2] | 0;
   HEAPF32[((i64toi32_i32$1 + 512 | 0) + 52 | 0) >> 2] = Math_fround(-$3_1);
   i64toi32_i32$1 = (i64toi32_i32$1 + 512 | 0) + 56 | 0;
   i64toi32_i32$0 = 1065353216;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($1_1 + 560 | 0) >> 2] = $2_1;
   $3_1 = Math_fround(HEAPF32[($0_1 + 96 | 0) >> 2]);
   i64toi32_i32$1 = ($1_1 + 448 | 0) + 12 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = ($1_1 + 448 | 0) + 24 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[(($1_1 + 448 | 0) + 20 | 0) >> 2] = 1065353216;
   i64toi32_i32$1 = ($1_1 + 448 | 0) + 32 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = ($1_1 + 448 | 0) + 40 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 452 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 456 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[(i64toi32_i32$1 + 448 | 0) >> 2] = 1065353216;
   $2_1 = HEAP32[($0_1 + 92 | 0) >> 2] | 0;
   HEAPF32[((i64toi32_i32$1 + 448 | 0) + 52 | 0) >> 2] = Math_fround(Math_fround(-1.0) - $3_1);
   i64toi32_i32$1 = (i64toi32_i32$1 + 448 | 0) + 56 | 0;
   i64toi32_i32$0 = 1065353216;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($1_1 + 496 | 0) >> 2] = $2_1;
   i64toi32_i32$1 = ($1_1 + 384 | 0) + 12 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = ($1_1 + 384 | 0) + 24 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[(($1_1 + 384 | 0) + 20 | 0) >> 2] = 1065353216;
   i64toi32_i32$1 = ($1_1 + 384 | 0) + 32 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = ($1_1 + 384 | 0) + 56 | 0;
   i64toi32_i32$0 = 1065353216;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAPF32[(($1_1 + 384 | 0) + 52 | 0) >> 2] = Math_fround($3_1 + Math_fround(1.0));
   i64toi32_i32$1 = ($1_1 + 384 | 0) + 40 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 388 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 392 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[(i64toi32_i32$1 + 384 | 0) >> 2] = 1065353216;
   HEAP32[(i64toi32_i32$1 + 432 | 0) >> 2] = $2_1 ^ -2147483648 | 0;
   $2_1 = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
   HEAP32[(i64toi32_i32$1 + 332 | 0) >> 2] = 0;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 324 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 328 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[(i64toi32_i32$1 + 320 | 0) >> 2] = $2_1;
   $2_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
   HEAP32[((i64toi32_i32$1 + 320 | 0) + 60 | 0) >> 2] = 1065353216;
   i64toi32_i32$1 = (i64toi32_i32$1 + 320 | 0) + 52 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[(($1_1 + 320 | 0) + 40 | 0) >> 2] = 1065353216;
   i64toi32_i32$1 = ($1_1 + 320 | 0) + 44 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = ($1_1 + 320 | 0) + 32 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = ($1_1 + 320 | 0) + 24 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[(($1_1 + 320 | 0) + 20 | 0) >> 2] = $2_1;
   HEAP32[($1_1 + 336 | 0) >> 2] = 0;
   $3_1 = Math_fround(HEAPF32[($0_1 + 104 | 0) >> 2]);
   i64toi32_i32$1 = ($1_1 + 256 | 0) + 24 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = ($1_1 + 256 | 0) + 32 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = ($1_1 + 256 | 0) + 44 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[(($1_1 + 256 | 0) + 40 | 0) >> 2] = 1065353216;
   i64toi32_i32$1 = ($1_1 + 256 | 0) + 52 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[(($1_1 + 256 | 0) + 60 | 0) >> 2] = 1065353216;
   $4_1 = Math_fround($594(Math_fround($3_1)));
   HEAPF32[(($1_1 + 256 | 0) + 20 | 0) >> 2] = $4_1;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 264 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 268 | 0) >> 2] = i64toi32_i32$0;
   $3_1 = Math_fround($592(Math_fround($3_1)));
   HEAPF32[(i64toi32_i32$1 + 272 | 0) >> 2] = $3_1;
   HEAPF32[(i64toi32_i32$1 + 256 | 0) >> 2] = $4_1;
   HEAPF32[(i64toi32_i32$1 + 260 | 0) >> 2] = Math_fround(-$3_1);
   $449(i64toi32_i32$1 | 0, i64toi32_i32$1 + 384 | 0 | 0, i64toi32_i32$1 + 320 | 0 | 0);
   $449(i64toi32_i32$1 + 64 | 0 | 0, i64toi32_i32$1 | 0, i64toi32_i32$1 + 256 | 0 | 0);
   $449(i64toi32_i32$1 + 128 | 0 | 0, i64toi32_i32$1 + 64 | 0 | 0, i64toi32_i32$1 + 448 | 0 | 0);
   $449(i64toi32_i32$1 + 192 | 0 | 0, i64toi32_i32$1 + 128 | 0 | 0, i64toi32_i32$1 + 512 | 0 | 0);
   i64toi32_i32$2 = (i64toi32_i32$1 + 192 | 0) + 56 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $198_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1 + 60 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $198_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $1_1 + 240 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $203_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1 + 52 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $203_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = ($1_1 + 192 | 0) + 40 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $209_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1 + 44 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $209_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = ($1_1 + 192 | 0) + 32 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $215_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1 + 36 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $215_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = ($1_1 + 192 | 0) + 24 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $221_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1 + 28 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $221_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $1_1 + 208 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $226_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1 + 20 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $226_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $1_1 + 200 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $231_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1 + 12 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $231_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = HEAP32[($1_1 + 192 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($1_1 + 196 | 0) >> 2] | 0;
   $234_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = $234_1;
   HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
   HEAP8[i64toi32_i32$1 >> 0] = 0;
  }
  global$0 = $1_1 + 576 | 0;
 }
 
 function $449($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20_1 = Math_fround(0), $21_1 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25_1 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = Math_fround(0), $30_1 = Math_fround(0), $31_1 = Math_fround(0), $32_1 = Math_fround(0), $33_1 = Math_fround(0), $34_1 = Math_fround(0), $35_1 = Math_fround(0), $3_1 = 0;
  $4_1 = Math_fround(HEAPF32[($2_1 + 28 | 0) >> 2]);
  $5_1 = Math_fround(HEAPF32[($2_1 + 20 | 0) >> 2]);
  $6_1 = Math_fround(HEAPF32[($2_1 + 24 | 0) >> 2]);
  $7_1 = Math_fround(HEAPF32[($2_1 + 44 | 0) >> 2]);
  $8_1 = Math_fround(HEAPF32[($2_1 + 36 | 0) >> 2]);
  $9_1 = Math_fround(HEAPF32[($2_1 + 40 | 0) >> 2]);
  $10_1 = Math_fround(HEAPF32[($1_1 + 52 | 0) >> 2]);
  $11_1 = Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]);
  $12_1 = Math_fround(HEAPF32[($1_1 + 36 | 0) >> 2]);
  $13_1 = Math_fround(HEAPF32[($1_1 + 56 | 0) >> 2]);
  $14_1 = Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]);
  $15_1 = Math_fround(HEAPF32[($1_1 + 40 | 0) >> 2]);
  $16_1 = Math_fround(HEAPF32[($2_1 + 60 | 0) >> 2]);
  $17_1 = Math_fround(HEAPF32[($1_1 + 60 | 0) >> 2]);
  $18_1 = Math_fround(HEAPF32[($2_1 + 52 | 0) >> 2]);
  $19_1 = Math_fround(HEAPF32[($1_1 + 28 | 0) >> 2]);
  $20_1 = Math_fround(HEAPF32[($2_1 + 56 | 0) >> 2]);
  $21_1 = Math_fround(HEAPF32[($1_1 + 44 | 0) >> 2]);
  $22_1 = Math_fround(HEAPF32[($2_1 + 16 | 0) >> 2]);
  $23_1 = Math_fround(HEAPF32[($2_1 + 32 | 0) >> 2]);
  $24_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
  $25_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
  $26_1 = Math_fround(HEAPF32[($2_1 + 48 | 0) >> 2]);
  $27_1 = Math_fround(HEAPF32[($1_1 + 12 | 0) >> 2]);
  $28_1 = Math_fround(HEAPF32[($2_1 + 12 | 0) >> 2]);
  $29_1 = Math_fround(HEAPF32[($1_1 + 48 | 0) >> 2]);
  $30_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
  $31_1 = Math_fround(HEAPF32[($1_1 + 32 | 0) >> 2]);
  $32_1 = Math_fround(HEAPF32[$2_1 >> 2]);
  $33_1 = Math_fround(HEAPF32[$1_1 >> 2]);
  $34_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
  $35_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
  $1_1 = $0_1 + 56 | 0;
  i64toi32_i32$1 = $1_1;
  i64toi32_i32$0 = 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $2_1 = $0_1 + 48 | 0;
  i64toi32_i32$1 = $2_1;
  i64toi32_i32$0 = 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $3_1 = $0_1 + 40 | 0;
  i64toi32_i32$1 = $3_1;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 32 | 0) >> 2] = 0;
  HEAP32[($0_1 + 36 | 0) >> 2] = i64toi32_i32$0;
  HEAPF32[$0_1 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($33_1 * $32_1) + Math_fround($35_1 * $34_1)) + Math_fround($31_1 * $30_1)) + Math_fround($29_1 * $28_1));
  HEAPF32[($0_1 + 60 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($27_1 * $26_1) + Math_fround($19_1 * $18_1)) + Math_fround($21_1 * $20_1)) + Math_fround($17_1 * $16_1));
  HEAPF32[$1_1 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($25_1 * $26_1) + Math_fround($14_1 * $18_1)) + Math_fround($15_1 * $20_1)) + Math_fround($13_1 * $16_1));
  HEAPF32[($0_1 + 52 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($24_1 * $26_1) + Math_fround($11_1 * $18_1)) + Math_fround($12_1 * $20_1)) + Math_fround($10_1 * $16_1));
  HEAPF32[$2_1 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($33_1 * $26_1) + Math_fround($35_1 * $18_1)) + Math_fround($31_1 * $20_1)) + Math_fround($29_1 * $16_1));
  HEAPF32[($0_1 + 44 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($27_1 * $23_1) + Math_fround($19_1 * $8_1)) + Math_fround($21_1 * $9_1)) + Math_fround($17_1 * $7_1));
  HEAPF32[$3_1 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($25_1 * $23_1) + Math_fround($14_1 * $8_1)) + Math_fround($15_1 * $9_1)) + Math_fround($13_1 * $7_1));
  HEAPF32[($0_1 + 36 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($24_1 * $23_1) + Math_fround($11_1 * $8_1)) + Math_fround($12_1 * $9_1)) + Math_fround($10_1 * $7_1));
  HEAPF32[($0_1 + 32 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($33_1 * $23_1) + Math_fround($35_1 * $8_1)) + Math_fround($31_1 * $9_1)) + Math_fround($29_1 * $7_1));
  HEAPF32[($0_1 + 28 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($27_1 * $22_1) + Math_fround($19_1 * $5_1)) + Math_fround($21_1 * $6_1)) + Math_fround($17_1 * $4_1));
  HEAPF32[($0_1 + 24 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($25_1 * $22_1) + Math_fround($14_1 * $5_1)) + Math_fround($15_1 * $6_1)) + Math_fround($13_1 * $4_1));
  HEAPF32[($0_1 + 20 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($24_1 * $22_1) + Math_fround($11_1 * $5_1)) + Math_fround($12_1 * $6_1)) + Math_fround($10_1 * $4_1));
  HEAPF32[($0_1 + 16 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($33_1 * $22_1) + Math_fround($35_1 * $5_1)) + Math_fround($31_1 * $6_1)) + Math_fround($29_1 * $4_1));
  HEAPF32[($0_1 + 12 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($27_1 * $32_1) + Math_fround($19_1 * $34_1)) + Math_fround($21_1 * $30_1)) + Math_fround($17_1 * $28_1));
  HEAPF32[($0_1 + 8 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($25_1 * $32_1) + Math_fround($14_1 * $34_1)) + Math_fround($15_1 * $30_1)) + Math_fround($13_1 * $28_1));
  HEAPF32[($0_1 + 4 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($24_1 * $32_1) + Math_fround($11_1 * $34_1)) + Math_fround($12_1 * $30_1)) + Math_fround($10_1 * $28_1));
 }
 
 function $450($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
   $3_1 = HEAP32[($0_1 + 108 | 0) >> 2] | 0;
   if (($2_1 | 0) == ($3_1 | 0)) {
    break label$1
   }
   $4_1 = 0;
   label$2 : while (1) {
    label$3 : {
     $5_1 = $3_1 + ($4_1 << 2 | 0) | 0;
     if ((HEAP32[$5_1 >> 2] | 0 | 0) != ($1_1 | 0)) {
      break label$3
     }
     label$4 : {
      $6_1 = $5_1 + 4 | 0;
      $2_1 = $2_1 - $6_1 | 0;
      if (!$2_1) {
       break label$4
      }
      $2175($5_1 | 0, $6_1 | 0, $2_1 | 0) | 0;
      $3_1 = HEAP32[($0_1 + 108 | 0) >> 2] | 0;
     }
     $2_1 = $5_1 + $2_1 | 0;
     HEAP32[($0_1 + 112 | 0) >> 2] = $2_1;
    }
    $4_1 = $4_1 + 1 | 0;
    if ($4_1 >>> 0 < (($2_1 - $3_1 | 0) >> 2 | 0) >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $451() {
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $0_1 = 0;
  $0_1 = global$1 + 67880 | 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  i64toi32_i32$1 = i64toi32_i32$1 + 12 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 32 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 44 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 40 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 52 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 60 | 0) >> 2] = 1065353216;
 }
 
 function $452() {
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $2_1 = 0, $1_1 = 0, $0_1 = 0;
  $0_1 = global$0 - 32 | 0;
  global$0 = $0_1;
  $1_1 = global$1;
  $2_1 = $1_1 + 67944 | 0;
  i64toi32_i32$1 = $2_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  i64toi32_i32$1 = i64toi32_i32$1 + 12 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $2_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($2_1 + 20 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $2_1 + 32 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $2_1 + 44 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($2_1 + 40 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $2_1 + 52 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($2_1 + 60 | 0) >> 2] = 1065353216;
  HEAP32[($0_1 + 24 | 0) >> 2] = -8388609;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = -8388609;
  HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = -8388609;
  HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = 2139095039;
  i64toi32_i32$0 = 2139095039;
  HEAP32[i64toi32_i32$1 >> 2] = 2139095039;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $528($1_1 + 68008 | 0 | 0, i64toi32_i32$1 + 16 | 0 | 0, i64toi32_i32$1 | 0) | 0;
  HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = 2139095039;
  i64toi32_i32$0 = 2139095039;
  HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = 2139095039;
  HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = -8388609;
  i64toi32_i32$0 = -8388609;
  HEAP32[i64toi32_i32$1 >> 2] = -8388609;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $528($1_1 + 68036 | 0 | 0, i64toi32_i32$1 + 16 | 0 | 0, i64toi32_i32$1 | 0) | 0;
  HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = i64toi32_i32$0;
  $534($1_1 + 68064 | 0 | 0, i64toi32_i32$1 + 16 | 0 | 0, Math_fround(Math_fround(3402823466385288598117041.0e14))) | 0;
  global$0 = i64toi32_i32$1 + 32 | 0;
 }
 
 function $453($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $3_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $2_1 = 0, $4_1 = Math_fround(0), i64toi32_i32$2 = 0, $9_1 = Math_fround(0), $38_1 = 0, $44_1 = 0;
  $1_1 = global$0 - 96 | 0;
  global$0 = $1_1;
  label$1 : {
   $2_1 = global$1;
   if (!(HEAPU8[($2_1 + 68164 | 0) >> 0] | 0 | (HEAPU8[($2_1 + 68156 | 0) >> 0] | 0) | 0)) {
    break label$1
   }
   $2_1 = global$1;
   $188(HEAP32[($2_1 + 68168 | 0) >> 2] | 0 | 0);
   HEAP32[($1_1 + 64 | 0) >> 2] = ($2_1 + 21928 | 0) + 8 | 0;
   HEAP32[(($1_1 + 64 | 0) + 12 | 0) >> 2] = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   $38_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $1_1;
   HEAP32[($1_1 + 68 | 0) >> 2] = $38_1;
   HEAP32[($1_1 + 72 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $0_1 + 16 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $44_1 = i64toi32_i32$1;
   i64toi32_i32$1 = ($1_1 + 64 | 0) + 16 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $44_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[(($1_1 + 64 | 0) + 24 | 0) >> 2] = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   $3_1 = Math_fround(1.0e4);
   label$2 : {
    label$3 : {
     $4_1 = Math_fround(HEAPF32[($1_1 + 68 | 0) >> 2]);
     if ($4_1 == Math_fround(3402823466385288598117041.0e14)) {
      break label$3
     }
     $3_1 = Math_fround(-1.0e4);
     if ($4_1 != Math_fround(-3402823466385288598117041.0e14)) {
      break label$2
     }
    }
    HEAPF32[($1_1 + 68 | 0) >> 2] = $3_1;
    $4_1 = $3_1;
   }
   $5_1 = Math_fround(1.0e4);
   label$4 : {
    label$5 : {
     $3_1 = Math_fround(HEAPF32[($1_1 + 72 | 0) >> 2]);
     if ($3_1 == Math_fround(3402823466385288598117041.0e14)) {
      break label$5
     }
     $5_1 = Math_fround(-1.0e4);
     if ($3_1 != Math_fround(-3402823466385288598117041.0e14)) {
      break label$4
     }
    }
    HEAPF32[($1_1 + 72 | 0) >> 2] = $5_1;
    $3_1 = $5_1;
   }
   $6_1 = Math_fround(1.0e4);
   label$6 : {
    label$7 : {
     $5_1 = Math_fround(HEAPF32[($1_1 + 76 | 0) >> 2]);
     if ($5_1 == Math_fround(3402823466385288598117041.0e14)) {
      break label$7
     }
     $6_1 = Math_fround(-1.0e4);
     if ($5_1 != Math_fround(-3402823466385288598117041.0e14)) {
      break label$6
     }
    }
    HEAPF32[($1_1 + 76 | 0) >> 2] = $6_1;
    $5_1 = $6_1;
   }
   $7_1 = Math_fround(1.0e4);
   label$8 : {
    label$9 : {
     $6_1 = Math_fround(HEAPF32[($1_1 + 80 | 0) >> 2]);
     if ($6_1 == Math_fround(3402823466385288598117041.0e14)) {
      break label$9
     }
     $7_1 = Math_fround(-1.0e4);
     if ($6_1 != Math_fround(-3402823466385288598117041.0e14)) {
      break label$8
     }
    }
    HEAPF32[($1_1 + 80 | 0) >> 2] = $7_1;
    $6_1 = $7_1;
   }
   $8_1 = Math_fround(1.0e4);
   label$10 : {
    label$11 : {
     $7_1 = Math_fround(HEAPF32[($1_1 + 84 | 0) >> 2]);
     if ($7_1 == Math_fround(3402823466385288598117041.0e14)) {
      break label$11
     }
     $8_1 = Math_fround(-1.0e4);
     if ($7_1 != Math_fround(-3402823466385288598117041.0e14)) {
      break label$10
     }
    }
    HEAPF32[($1_1 + 84 | 0) >> 2] = $8_1;
    $7_1 = $8_1;
   }
   $9_1 = Math_fround(1.0e4);
   label$12 : {
    label$13 : {
     $8_1 = Math_fround(HEAPF32[($1_1 + 88 | 0) >> 2]);
     if ($8_1 == Math_fround(3402823466385288598117041.0e14)) {
      break label$13
     }
     $9_1 = Math_fround(-1.0e4);
     if ($8_1 != Math_fround(-3402823466385288598117041.0e14)) {
      break label$12
     }
    }
    HEAPF32[($1_1 + 88 | 0) >> 2] = $9_1;
    $8_1 = $9_1;
   }
   HEAP32[($1_1 + 60 | 0) >> 2] = 1065353216;
   HEAP32[($1_1 + 44 | 0) >> 2] = 0;
   HEAPF32[($1_1 + 40 | 0) >> 2] = Math_fround($8_1 - $5_1);
   i64toi32_i32$1 = $1_1 + 32 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $1_1 + 24 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $1_1 + 12 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAPF32[($1_1 + 20 | 0) >> 2] = Math_fround($7_1 - $3_1);
   HEAPF32[($1_1 + 56 | 0) >> 2] = Math_fround(Math_fround($8_1 + $5_1) * Math_fround(.5));
   HEAPF32[($1_1 + 52 | 0) >> 2] = Math_fround(Math_fround($7_1 + $3_1) * Math_fround(.5));
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$0 = 0;
   HEAP32[($1_1 + 4 | 0) >> 2] = 0;
   HEAP32[($1_1 + 8 | 0) >> 2] = i64toi32_i32$0;
   HEAPF32[$1_1 >> 2] = Math_fround($6_1 - $4_1);
   HEAPF32[($1_1 + 48 | 0) >> 2] = Math_fround(Math_fround($6_1 + $4_1) * Math_fround(.5));
   label$14 : {
    label$15 : {
     $0_1 = HEAP32[(global$1 + 68168 | 0) >> 2] | 0;
     if (!(HEAP32[($0_1 + 4 | 0) >> 2] | 0)) {
      break label$15
     }
     $0_1 = HEAP32[((HEAP32[($0_1 + 56 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0;
     break label$14;
    }
    $0_1 = -1;
   }
   fimport$53($0_1 | 0, 1 | 0, 0 | 0, $1_1 | 0);
   $402(1 | 0);
   $404(32774 | 0);
   $403(770 | 0, 771 | 0);
   $388(0 | 0);
   $397(0 | 0);
   $389(0 | 0);
   $400(1 | 0, 1 | 0, 1 | 0, 1 | 0);
   $390(6913 | 0);
   $0_1 = HEAP32[(global$1 + 68160 | 0) >> 2] | 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 64 | 0) >> 2] | 0 | 0]($0_1, 4);
   $390(HEAP32[((HEAP32[(($341() | 0) + 12 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0);
  }
  global$0 = $1_1 + 96 | 0;
 }
 
 function $454($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $4$hi = 0;
  $1_1 = global$0 - 64 | 0;
  global$0 = $1_1;
  label$1 : {
   if (!(HEAPU8[(global$1 + 68149 | 0) >> 0] | 0)) {
    break label$1
   }
   $2_1 = global$1 + 68168 | 0;
   $188(HEAP32[$2_1 >> 2] | 0 | 0);
   $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   $4_1 = i64toi32_i32$0;
   $4$hi = i64toi32_i32$1;
   $0_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   HEAP32[($1_1 + 60 | 0) >> 2] = 1065353216;
   HEAP32[($1_1 + 56 | 0) >> 2] = $3_1;
   HEAP32[($1_1 + 44 | 0) >> 2] = 0;
   HEAP32[($1_1 + 40 | 0) >> 2] = $0_1;
   i64toi32_i32$0 = $1_1 + 32 | 0;
   i64toi32_i32$1 = 0;
   HEAP32[i64toi32_i32$0 >> 2] = 0;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$0 = $1_1 + 24 | 0;
   i64toi32_i32$1 = 0;
   HEAP32[i64toi32_i32$0 >> 2] = 0;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$0 = $1_1 + 12 | 0;
   i64toi32_i32$1 = 0;
   HEAP32[i64toi32_i32$0 >> 2] = 0;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[($1_1 + 20 | 0) >> 2] = $0_1;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$0 = $1_1;
   HEAP32[($1_1 + 48 | 0) >> 2] = $4_1;
   HEAP32[($1_1 + 52 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$1 = 0;
   HEAP32[($1_1 + 4 | 0) >> 2] = 0;
   HEAP32[($1_1 + 8 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[$1_1 >> 2] = $0_1;
   label$2 : {
    label$3 : {
     $0_1 = HEAP32[$2_1 >> 2] | 0;
     if (HEAP32[($0_1 + 4 | 0) >> 2] | 0) {
      break label$3
     }
     $0_1 = -1;
     break label$2;
    }
    $0_1 = HEAP32[((HEAP32[($0_1 + 56 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0;
   }
   fimport$53($0_1 | 0, 1 | 0, 0 | 0, $1_1 | 0);
   $402(1 | 0);
   $404(32774 | 0);
   $403(770 | 0, 771 | 0);
   $388(0 | 0);
   $397(0 | 0);
   $389(0 | 0);
   $400(1 | 0, 1 | 0, 1 | 0, 1 | 0);
   $390(6913 | 0);
   $0_1 = HEAP32[(global$1 + 68152 | 0) >> 2] | 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 64 | 0) >> 2] | 0 | 0]($0_1, 4);
   $390(HEAP32[((HEAP32[(($341() | 0) + 12 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0);
  }
  global$0 = $1_1 + 64 | 0;
 }
 
 function $455() {
  return HEAPU8[(global$1 + 68156 | 0) >> 0] | 0 | 0;
 }
 
 function $456() {
  return HEAPU8[(global$1 + 68164 | 0) >> 0] | 0 | 0;
 }
 
 function $457() {
  return HEAPU8[(global$1 + 68149 | 0) >> 0] | 0 | 0;
 }
 
 function $458() {
  return HEAPU8[(global$1 + 68172 | 0) >> 0] | 0 | 0;
 }
 
 function $459() {
  return HEAPU8[(global$1 + 23276 | 0) >> 0] | 0 | 0;
 }
 
 function $460() {
  return HEAPU8[(global$1 + 68148 | 0) >> 0] | 0 | 0;
 }
 
 function $461() {
  return 65535 | 0;
 }
 
 function $462() {
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $0_1 = 0;
  $0_1 = global$1 + 68084 | 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  i64toi32_i32$1 = i64toi32_i32$1 + 12 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 32 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 44 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 40 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 52 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 60 | 0) >> 2] = 1065353216;
 }
 
 function $463($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  label$1 : {
   $1_1 = HEAP32[((global$1 + 68240 | 0) + 8 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   label$2 : while (1) {
    $2_1 = HEAP32[$1_1 >> 2] | 0;
    $2032($1_1 | 0);
    $1_1 = $2_1;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
  }
  $2_1 = global$1 + 68240 | 0;
  $1_1 = HEAP32[$2_1 >> 2] | 0;
  HEAP32[$2_1 >> 2] = 0;
  label$3 : {
   if (!$1_1) {
    break label$3
   }
   $2032($1_1 | 0);
  }
 }
 
 function $464($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 80 | 0;
  global$0 = $3_1;
  $324($0_1 | 0, $1_1 | 0, $2_1 | 0);
  $3_1 = $2173($3_1 | 0, (HEAP32[($0_1 + 64 | 0) >> 2] | 0) + 8 | 0 | 0, 80 | 0) | 0;
  HEAPF32[(($3_1 + ($2_1 << 2 | 0) | 0) + 64 | 0) >> 2] = $1_1 ? Math_fround(1.0) : Math_fround(0.0);
  $465($0_1 | 0, $3_1 | 0);
  global$0 = $3_1 + 80 | 0;
 }
 
 function $465($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $4_1 = 0, $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  $2_1 = global$0 - 96 | 0;
  global$0 = $2_1;
  label$1 : {
   $3_1 = $0_1 + 60 | 0;
   if (!($466(global$1 + 68240 | 0 | 0, $3_1 | 0) | 0)) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0 | 0]($0_1);
  }
  i64toi32_i32$0 = $568($1_1 | 0, 80 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  HEAP32[$3_1 >> 2] = HEAP32[($570($2_1 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0) | 0) >> 2] | 0;
  label$2 : {
   label$3 : {
    label$4 : {
     $4_1 = $466(global$1 + 68240 | 0 | 0, $3_1 | 0) | 0;
     if (!$4_1) {
      break label$4
     }
     HEAP32[($0_1 + 64 | 0) >> 2] = $4_1 + 12 | 0;
     HEAP32[($4_1 + 16 | 0) >> 2] = (HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 1 | 0;
     break label$3;
    }
    $4_1 = global$1 + 68240 | 0;
    $467($2_1 + 88 | 0 | 0, $4_1 | 0, $3_1 | 0, $3_1 | 0, $572($2_1 | 0, $1_1 | 0) | 0 | 0);
    $3_1 = $466($4_1 | 0, $3_1 | 0) | 0;
    if (!$3_1) {
     break label$2
    }
    HEAP32[($0_1 + 64 | 0) >> 2] = $3_1 + 12 | 0;
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 44 | 0) >> 2] | 0 | 0]($0_1);
   global$0 = $2_1 + 96 | 0;
   return;
  }
  $25(global$1 + 4016 | 0 | 0);
  abort();
 }
 
 function $466($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0, $2_1 = 0, $6_1 = 0, $3_1 = 0;
  $2_1 = $575($0_1 + 12 | 0 | 0, $1_1 | 0) | 0;
  $3_1 = 0;
  label$1 : {
   $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!$4_1) {
    break label$1
   }
   label$2 : {
    label$3 : {
     $5_1 = __wasm_popcnt_i32($4_1 | 0) | 0;
     if ($5_1 >>> 0 > 1 >>> 0) {
      break label$3
     }
     $6_1 = ($4_1 + -1 | 0) & $2_1 | 0;
     break label$2;
    }
    $6_1 = $2_1;
    if ($2_1 >>> 0 < $4_1 >>> 0) {
     break label$2
    }
    $6_1 = ($2_1 >>> 0) % ($4_1 >>> 0) | 0;
   }
   $0_1 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + ($6_1 << 2 | 0) | 0) >> 2] | 0;
   if (!$0_1) {
    break label$1
   }
   $0_1 = HEAP32[$0_1 >> 2] | 0;
   if (!$0_1) {
    break label$1
   }
   label$4 : {
    label$5 : {
     if ($5_1 >>> 0 > 1 >>> 0) {
      break label$5
     }
     $4_1 = $4_1 + -1 | 0;
     label$6 : while (1) {
      label$7 : {
       label$8 : {
        $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        if (($5_1 | 0) == ($2_1 | 0)) {
         break label$8
        }
        if (($5_1 & $4_1 | 0 | 0) != ($6_1 | 0)) {
         break label$1
        }
        break label$7;
       }
       if ($571($0_1 + 8 | 0 | 0, $1_1 | 0) | 0) {
        break label$4
       }
      }
      $0_1 = HEAP32[$0_1 >> 2] | 0;
      if ($0_1) {
       continue label$6
      }
      break label$1;
     };
    }
    label$9 : while (1) {
     label$10 : {
      label$11 : {
       $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
       if (($5_1 | 0) == ($2_1 | 0)) {
        break label$11
       }
       label$12 : {
        if ($5_1 >>> 0 < $4_1 >>> 0) {
         break label$12
        }
        $5_1 = ($5_1 >>> 0) % ($4_1 >>> 0) | 0;
       }
       if (($5_1 | 0) != ($6_1 | 0)) {
        break label$1
       }
       break label$10;
      }
      if ($571($0_1 + 8 | 0 | 0, $1_1 | 0) | 0) {
       break label$4
      }
     }
     $0_1 = HEAP32[$0_1 >> 2] | 0;
     if ($0_1) {
      continue label$9
     }
     break label$1;
    };
   }
   $3_1 = $0_1;
  }
  return $3_1 | 0;
 }
 
 function $467($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $6_1 = 0, $5_1 = 0, $9_1 = 0, $7_1 = 0, $8_1 = 0, $11_1 = Math_fround(0), $12_1 = Math_fround(0), $10_1 = 0;
  $5_1 = $575($1_1 + 12 | 0 | 0, $2_1 | 0) | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $6_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     if ($6_1) {
      break label$3
     }
     break label$2;
    }
    label$4 : {
     label$5 : {
      $7_1 = __wasm_popcnt_i32($6_1 | 0) | 0;
      if ($7_1 >>> 0 < 2 >>> 0) {
       break label$5
      }
      $8_1 = $5_1;
      label$6 : {
       if ($5_1 >>> 0 < $6_1 >>> 0) {
        break label$6
       }
       $8_1 = ($5_1 >>> 0) % ($6_1 >>> 0) | 0;
      }
      $9_1 = HEAP32[((HEAP32[$1_1 >> 2] | 0) + ($8_1 << 2 | 0) | 0) >> 2] | 0;
      if (!$9_1) {
       break label$2
      }
      if ($7_1 >>> 0 <= 1 >>> 0) {
       break label$4
      }
      label$7 : while (1) {
       $9_1 = HEAP32[$9_1 >> 2] | 0;
       if (!$9_1) {
        break label$2
       }
       label$8 : {
        $7_1 = HEAP32[($9_1 + 4 | 0) >> 2] | 0;
        if (($7_1 | 0) == ($5_1 | 0)) {
         break label$8
        }
        label$9 : {
         if ($7_1 >>> 0 < $6_1 >>> 0) {
          break label$9
         }
         $7_1 = ($7_1 >>> 0) % ($6_1 >>> 0) | 0;
        }
        if (($7_1 | 0) != ($8_1 | 0)) {
         break label$2
        }
       }
       if (!($571($9_1 + 8 | 0 | 0, $2_1 | 0) | 0)) {
        continue label$7
       }
       break label$7;
      };
      $6_1 = 0;
      break label$1;
     }
     $8_1 = ($6_1 + -1 | 0) & $5_1 | 0;
     $9_1 = HEAP32[((HEAP32[$1_1 >> 2] | 0) + ($8_1 << 2 | 0) | 0) >> 2] | 0;
     if (!$9_1) {
      break label$2
     }
    }
    $10_1 = $6_1 + -1 | 0;
    label$10 : while (1) {
     $9_1 = HEAP32[$9_1 >> 2] | 0;
     if (!$9_1) {
      break label$2
     }
     label$11 : {
      $7_1 = HEAP32[($9_1 + 4 | 0) >> 2] | 0;
      if (($7_1 | 0) == ($5_1 | 0)) {
       break label$11
      }
      if (($7_1 & $10_1 | 0 | 0) != ($8_1 | 0)) {
       break label$2
      }
     }
     if (!($571($9_1 + 8 | 0 | 0, $2_1 | 0) | 0)) {
      continue label$10
     }
     break label$10;
    };
    $6_1 = 0;
    break label$1;
   }
   $9_1 = $2030(100 | 0) | 0;
   HEAP32[($9_1 + 8 | 0) >> 2] = HEAP32[$3_1 >> 2] | 0;
   $2173($9_1 + 12 | 0 | 0, $4_1 | 0, 88 | 0) | 0;
   HEAP32[$9_1 >> 2] = 0;
   HEAP32[($9_1 + 4 | 0) >> 2] = $5_1;
   $11_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
   $12_1 = Math_fround(((HEAP32[($1_1 + 12 | 0) >> 2] | 0) + 1 | 0) >>> 0);
   label$12 : {
    label$13 : {
     if (!$6_1) {
      break label$13
     }
     if (Math_fround($11_1 * Math_fround($6_1 >>> 0)) < $12_1 ^ 1 | 0) {
      break label$12
     }
    }
    $6_1 = $6_1 << 1 | 0 | ($6_1 >>> 0 < 3 >>> 0 | ($6_1 & ($6_1 + -1 | 0) | 0 | 0) != (0 | 0) | 0) | 0;
    label$14 : {
     label$15 : {
      $11_1 = Math_fround(Math_ceil(Math_fround($12_1 / $11_1)));
      if (!($11_1 < Math_fround(4294967296.0) & $11_1 >= Math_fround(0.0) | 0)) {
       break label$15
      }
      $2_1 = ~~$11_1 >>> 0;
      break label$14;
     }
     $2_1 = 0;
    }
    $483($1_1 | 0, ($6_1 >>> 0 < $2_1 >>> 0 ? $2_1 : $6_1) | 0);
    label$16 : {
     $6_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     if ($6_1 & ($6_1 + -1 | 0) | 0) {
      break label$16
     }
     $8_1 = ($6_1 + -1 | 0) & $5_1 | 0;
     break label$12;
    }
    label$17 : {
     if ($5_1 >>> 0 >= $6_1 >>> 0) {
      break label$17
     }
     $8_1 = $5_1;
     break label$12;
    }
    $8_1 = ($5_1 >>> 0) % ($6_1 >>> 0) | 0;
   }
   label$18 : {
    label$19 : {
     label$20 : {
      $2_1 = (HEAP32[$1_1 >> 2] | 0) + ($8_1 << 2 | 0) | 0;
      $5_1 = HEAP32[$2_1 >> 2] | 0;
      if ($5_1) {
       break label$20
      }
      HEAP32[$9_1 >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
      HEAP32[($1_1 + 8 | 0) >> 2] = $9_1;
      HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
      $5_1 = HEAP32[$9_1 >> 2] | 0;
      if (!$5_1) {
       break label$18
      }
      $5_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
      label$21 : {
       label$22 : {
        $2_1 = $6_1 + -1 | 0;
        if ($6_1 & $2_1 | 0) {
         break label$22
        }
        $5_1 = $5_1 & $2_1 | 0;
        break label$21;
       }
       if ($5_1 >>> 0 < $6_1 >>> 0) {
        break label$21
       }
       $5_1 = ($5_1 >>> 0) % ($6_1 >>> 0) | 0;
      }
      $5_1 = (HEAP32[$1_1 >> 2] | 0) + ($5_1 << 2 | 0) | 0;
      break label$19;
     }
     HEAP32[$9_1 >> 2] = HEAP32[$5_1 >> 2] | 0;
    }
    HEAP32[$5_1 >> 2] = $9_1;
   }
   $6_1 = 1;
   HEAP32[($1_1 + 12 | 0) >> 2] = (HEAP32[($1_1 + 12 | 0) >> 2] | 0) + 1 | 0;
  }
  HEAP8[($0_1 + 4 | 0) >> 0] = $6_1;
  HEAP32[$0_1 >> 2] = $9_1;
 }
 
 function $468($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   $0_1 = HEAP32[(HEAP32[($0_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
   if (!$0_1) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1) | 0;
  }
  return -1 | 0;
 }
 
 function $469($0_1) {
  $0_1 = $0_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0 | 0]($0_1);
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1);
 }
 
 function $470($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $2_1 = 0, $1_1 = 0, $5_1 = 0, $3_1 = 0, $4_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $50_1 = 0, $57_1 = 0, $64_1 = 0, $67_1 = 0, $71_1 = 0, $75_1 = 0, $79_1 = 0, $83_1 = 0, $115_1 = 0, $122_1 = 0, $129_1 = 0, $132_1 = 0, $136_1 = 0, $140_1 = 0, $144_1 = 0, $148_1 = 0;
  $1_1 = global$0 - 128 | 0;
  global$0 = $1_1;
  i64toi32_i32$1 = $1_1 + 104 | 0;
  i64toi32_i32$0 = 1065353216;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = ($1_1 + 48 | 0) + 40 | 0;
  i64toi32_i32$0 = 1103626240;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = ($1_1 + 48 | 0) + 24 | 0;
  i64toi32_i32$0 = 1065353216;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1_1 + 120 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 112 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 116 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 96 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 100 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 1065353216;
  HEAP32[(i64toi32_i32$1 + 80 | 0) >> 2] = 1065353216;
  HEAP32[(i64toi32_i32$1 + 84 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 1065353216;
  HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] = 1065353216;
  HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 1065353216;
  HEAP32[(i64toi32_i32$1 + 56 | 0) >> 2] = 1065353216;
  HEAP32[(i64toi32_i32$1 + 60 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 1065353216;
  HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] = 1065353216;
  HEAP32[(i64toi32_i32$1 + 52 | 0) >> 2] = i64toi32_i32$0;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (($2_1 | 0) == ($3_1 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $4_1 = ($1_1 + 8 | 0) + 32 | 0;
    $5_1 = global$13;
    HEAP32[$4_1 >> 2] = HEAP32[($5_1 + 32 | 0) >> 2] | 0;
    $6_1 = ($1_1 + 8 | 0) + 24 | 0;
    i64toi32_i32$2 = $5_1 + 24 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $50_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $6_1;
    HEAP32[i64toi32_i32$0 >> 2] = $50_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    $7_1 = ($1_1 + 8 | 0) + 16 | 0;
    i64toi32_i32$2 = $5_1 + 16 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $57_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $7_1;
    HEAP32[i64toi32_i32$1 >> 2] = $57_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $8_1 = ($1_1 + 8 | 0) + 8 | 0;
    i64toi32_i32$2 = $5_1 + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $64_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $8_1;
    HEAP32[i64toi32_i32$0 >> 2] = $64_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $67_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $1_1;
    HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $67_1;
    HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[$2_1 >> 2] = 0;
    i64toi32_i32$2 = i64toi32_i32$1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] | 0;
    $71_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $2_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = $71_1;
    HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $8_1;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $75_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $2_1 + 12 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $75_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $79_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $2_1 + 20 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $79_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $6_1;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $83_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $2_1 + 28 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $83_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP16[($2_1 + 36 | 0) >> 1] = HEAPU16[$4_1 >> 1] | 0;
    $2_1 = $2_1 + 40 | 0;
    if (($2_1 | 0) != ($3_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  label$3 : {
   $2_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $3_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   if (($2_1 | 0) == ($3_1 | 0)) {
    break label$3
   }
   label$4 : while (1) {
    $4_1 = ($1_1 + 8 | 0) + 32 | 0;
    $5_1 = global$13;
    HEAP32[$4_1 >> 2] = HEAP32[($5_1 + 32 | 0) >> 2] | 0;
    $6_1 = ($1_1 + 8 | 0) + 24 | 0;
    i64toi32_i32$2 = $5_1 + 24 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $115_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $6_1;
    HEAP32[i64toi32_i32$0 >> 2] = $115_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    $7_1 = ($1_1 + 8 | 0) + 16 | 0;
    i64toi32_i32$2 = $5_1 + 16 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $122_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $7_1;
    HEAP32[i64toi32_i32$1 >> 2] = $122_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $8_1 = ($1_1 + 8 | 0) + 8 | 0;
    i64toi32_i32$2 = $5_1 + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $129_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $8_1;
    HEAP32[i64toi32_i32$0 >> 2] = $129_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $132_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $1_1;
    HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $132_1;
    HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[$2_1 >> 2] = 0;
    i64toi32_i32$2 = i64toi32_i32$1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] | 0;
    $136_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $2_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = $136_1;
    HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $8_1;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $140_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $2_1 + 12 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $140_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $144_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $2_1 + 20 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $144_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $6_1;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $148_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $2_1 + 28 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $148_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP16[($2_1 + 36 | 0) >> 1] = HEAPU16[$4_1 >> 1] | 0;
    $2_1 = $2_1 + 40 | 0;
    if (($2_1 | 0) != ($3_1 | 0)) {
     continue label$4
    }
    break label$4;
   };
  }
  HEAP32[($0_1 + 32 | 0) >> 2] = 0;
  $465($0_1 | 0, $1_1 + 48 | 0 | 0);
  global$0 = $1_1 + 128 | 0;
 }
 
 function $471($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $3_1 = 0, i64toi32_i32$2 = 0, $4_1 = 0;
  $2_1 = global$0 - 112 | 0;
  global$0 = $2_1;
  $2173($2_1 + 32 | 0 | 0, (HEAP32[($0_1 + 64 | 0) >> 2] | 0) + 8 | 0 | 0, 80 | 0) | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($2_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  $3_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
  HEAP32[($2_1 + 12 | 0) >> 2] = 1065353216;
  HEAP32[($2_1 + 8 | 0) >> 2] = $3_1;
  $162($2_1 + 16 | 0 | 0, $2_1 | 0);
  i64toi32_i32$2 = ($2_1 + 16 | 0) + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $5_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($2_1 + 32 | 0) + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $5_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$0 = $2_1 + 56 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $5_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
  $5_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $2_1;
  HEAP32[($2_1 + 48 | 0) >> 2] = $5_1;
  HEAP32[($2_1 + 52 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $2_1;
  HEAP32[($2_1 + 32 | 0) >> 2] = $5_1;
  HEAP32[($2_1 + 36 | 0) >> 2] = i64toi32_i32$0;
  $3_1 = HEAP32[$1_1 >> 2] | 0;
  $4_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
  $1_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  HEAP32[($2_1 + 68 | 0) >> 2] = $1_1;
  HEAP32[($2_1 + 72 | 0) >> 2] = $4_1;
  HEAP32[($2_1 + 84 | 0) >> 2] = $1_1;
  HEAP32[($2_1 + 88 | 0) >> 2] = $4_1;
  HEAP32[($2_1 + 64 | 0) >> 2] = $3_1;
  HEAP32[($2_1 + 80 | 0) >> 2] = $3_1;
  $465($0_1 | 0, $2_1 + 32 | 0 | 0);
  global$0 = $2_1 + 112 | 0;
 }
 
 function $472($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $2_1 = 0;
  $2_1 = global$0 - 80 | 0;
  global$0 = $2_1;
  $2_1 = $2173($2_1 | 0, (HEAP32[($0_1 + 64 | 0) >> 2] | 0) + 8 | 0 | 0, 80 | 0) | 0;
  HEAPF32[($2_1 + 60 | 0) >> 2] = Math_fround(Math_fround(1.0) - $1_1);
  $465($0_1 | 0, $2_1 | 0);
  global$0 = $2_1 + 80 | 0;
 }
 
 function $473($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $331($0_1 | 0);
  }
  $430(HEAP32[($0_1 + 64 | 0) >> 2] | 0 | 0);
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0 | 0]($0_1);
  $332($0_1 | 0);
 }
 
 function $474($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $333($0_1 | 0);
  label$1 : {
   $1_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   if (!(HEAP32[($1_1 + 4 | 0) >> 2] | 0)) {
    break label$1
   }
   $1_1 = HEAP32[((HEAP32[($1_1 + 56 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   if (($1_1 | 0) < (0 | 0)) {
    break label$1
   }
   fimport$6($1_1 | 0, HEAPU8[($0_1 + 56 | 0) >> 0] | 0 | 0);
  }
 }
 
 function $475($0_1) {
  $0_1 = $0_1 | 0;
  $330($0_1 | 0);
  label$1 : {
   if (HEAPU8[($0_1 + 5 | 0) >> 0] | 0) {
    break label$1
   }
   HEAP8[($0_1 + 5 | 0) >> 0] = Math_fround(HEAPF32[((HEAP32[($0_1 + 64 | 0) >> 2] | 0) + 68 | 0) >> 2]) < Math_fround(1.0);
  }
 }
 
 function $476($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $3_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 64 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   $3_1 = (HEAP32[($2_1 + 4 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[($2_1 + 4 | 0) >> 2] = $3_1;
   label$2 : {
    if ($3_1) {
     break label$2
    }
    $439($2_1 | 0);
    $2_1 = $466(global$1 + 68240 | 0 | 0, $0_1 + 60 | 0 | 0) | 0;
    if (!$2_1) {
     break label$2
    }
    $477($1_1 | 0, global$1 + 68240 | 0 | 0, $2_1 | 0);
    $2_1 = HEAP32[$1_1 >> 2] | 0;
    HEAP32[$1_1 >> 2] = 0;
    if (!$2_1) {
     break label$2
    }
    $2032($2_1 | 0);
   }
   HEAP32[($0_1 + 60 | 0) >> 2] = HEAP32[($569($1_1 | 0) | 0) >> 2] | 0;
   HEAP32[($0_1 + 64 | 0) >> 2] = 0;
  }
  global$0 = $1_1 + 16 | 0;
 }
 
 function $477($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $7_1 = 0, $4_1 = 0, $6_1 = 0, $3_1 = 0, $5_1 = 0, $8_1 = 0, $9_1 = 0;
  $3_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    $4_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    $5_1 = __wasm_popcnt_i32($4_1 | 0) | 0;
    if ($5_1 >>> 0 > 1 >>> 0) {
     break label$2
    }
    $3_1 = ($4_1 + -1 | 0) & $3_1 | 0;
    break label$1;
   }
   if ($3_1 >>> 0 < $4_1 >>> 0) {
    break label$1
   }
   $3_1 = ($3_1 >>> 0) % ($4_1 >>> 0) | 0;
  }
  $6_1 = (HEAP32[$1_1 >> 2] | 0) + ($3_1 << 2 | 0) | 0;
  $7_1 = HEAP32[$6_1 >> 2] | 0;
  label$3 : while (1) {
   $8_1 = $7_1;
   $7_1 = HEAP32[$7_1 >> 2] | 0;
   if (($7_1 | 0) != ($2_1 | 0)) {
    continue label$3
   }
   break label$3;
  };
  label$4 : {
   label$5 : {
    $9_1 = $1_1 + 8 | 0;
    if (($8_1 | 0) == ($9_1 | 0)) {
     break label$5
    }
    $7_1 = HEAP32[($8_1 + 4 | 0) >> 2] | 0;
    label$6 : {
     label$7 : {
      if ($5_1 >>> 0 > 1 >>> 0) {
       break label$7
      }
      $7_1 = $7_1 & ($4_1 + -1 | 0) | 0;
      break label$6;
     }
     if ($7_1 >>> 0 < $4_1 >>> 0) {
      break label$6
     }
     $7_1 = ($7_1 >>> 0) % ($4_1 >>> 0) | 0;
    }
    if (($7_1 | 0) == ($3_1 | 0)) {
     break label$4
    }
   }
   label$8 : {
    $7_1 = HEAP32[$2_1 >> 2] | 0;
    if (!$7_1) {
     break label$8
    }
    $7_1 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
    label$9 : {
     label$10 : {
      if ($5_1 >>> 0 > 1 >>> 0) {
       break label$10
      }
      $7_1 = $7_1 & ($4_1 + -1 | 0) | 0;
      break label$9;
     }
     if ($7_1 >>> 0 < $4_1 >>> 0) {
      break label$9
     }
     $7_1 = ($7_1 >>> 0) % ($4_1 >>> 0) | 0;
    }
    if (($7_1 | 0) == ($3_1 | 0)) {
     break label$4
    }
   }
   HEAP32[$6_1 >> 2] = 0;
  }
  label$11 : {
   $7_1 = HEAP32[$2_1 >> 2] | 0;
   if (!$7_1) {
    break label$11
   }
   $6_1 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
   label$12 : {
    label$13 : {
     if ($5_1 >>> 0 > 1 >>> 0) {
      break label$13
     }
     $6_1 = $6_1 & ($4_1 + -1 | 0) | 0;
     break label$12;
    }
    if ($6_1 >>> 0 < $4_1 >>> 0) {
     break label$12
    }
    $6_1 = ($6_1 >>> 0) % ($4_1 >>> 0) | 0;
   }
   if (($6_1 | 0) == ($3_1 | 0)) {
    break label$11
   }
   HEAP32[((HEAP32[$1_1 >> 2] | 0) + ($6_1 << 2 | 0) | 0) >> 2] = $8_1;
   $7_1 = HEAP32[$2_1 >> 2] | 0;
  }
  HEAP32[$8_1 >> 2] = $7_1;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[($1_1 + 12 | 0) >> 2] = (HEAP32[($1_1 + 12 | 0) >> 2] | 0) + -1 | 0;
  HEAP8[($0_1 + 8 | 0) >> 0] = 1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $9_1;
  HEAP32[$0_1 >> 2] = $2_1;
 }
 
 function $478() {
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $1_1 = 0, $0_1 = 0, $2_1 = 0;
  $0_1 = global$0 - 80 | 0;
  global$0 = $0_1;
  $1_1 = $2030(68 | 0) | 0;
  $327($1_1 | 0) | 0;
  HEAP8[($1_1 + 56 | 0) >> 0] = 0;
  HEAP32[$1_1 >> 2] = (global$1 + 23280 | 0) + 8 | 0;
  $569($1_1 + 60 | 0 | 0) | 0;
  HEAP32[($1_1 + 64 | 0) >> 2] = 0;
  $2_1 = $2030(8 | 0) | 0;
  HEAP32[($1_1 + 36 | 0) >> 2] = $2_1;
  HEAP32[($2_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[$2_1 >> 2] = 1;
  i64toi32_i32$1 = $0_1 + 56 | 0;
  i64toi32_i32$0 = 1065353216;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 40 | 0;
  i64toi32_i32$0 = 1103626240;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 24 | 0;
  i64toi32_i32$0 = 1065353216;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 72 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 52 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 1065353216;
  HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = 1065353216;
  HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 1065353216;
  HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = 1065353216;
  HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 1065353216;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = 1065353216;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 1065353216;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $465($1_1 | 0, i64toi32_i32$1 | 0);
  $1_1 = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
  global$0 = i64toi32_i32$1 + 80 | 0;
  return $1_1 | 0;
 }
 
 function $479($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$1;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($0_1, $2_1);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $480($0_1) {
  $0_1 = $0_1 | 0;
  return 1 | 0;
 }
 
 function $481($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP8[($0_1 + 56 | 0) >> 0] = $1_1;
 }
 
 function $482($0_1) {
  $0_1 = $0_1 | 0;
  $328($0_1 | 0) | 0;
  $2032($0_1 | 0);
 }
 
 function $483($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $5_1 = Math_fround(0), $3_1 = 0;
  $2_1 = 2;
  label$1 : {
   if (($1_1 | 0) == (1 | 0)) {
    break label$1
   }
   label$2 : {
    if ($1_1 & ($1_1 + -1 | 0) | 0) {
     break label$2
    }
    $2_1 = $1_1;
    break label$1;
   }
   $2_1 = $700($1_1 | 0) | 0;
  }
  label$3 : {
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if ($2_1 >>> 0 <= $1_1 >>> 0) {
    break label$3
   }
   $484($0_1 | 0, $2_1 | 0);
   return;
  }
  label$4 : {
   if ($2_1 >>> 0 >= $1_1 >>> 0) {
    break label$4
   }
   $3_1 = $1_1 >>> 0 < 3 >>> 0;
   label$5 : {
    label$6 : {
     $5_1 = Math_fround(Math_ceil(Math_fround(Math_fround((HEAP32[($0_1 + 12 | 0) >> 2] | 0) >>> 0) / Math_fround(HEAPF32[($0_1 + 16 | 0) >> 2]))));
     if (!($5_1 < Math_fround(4294967296.0) & $5_1 >= Math_fround(0.0) | 0)) {
      break label$6
     }
     $4_1 = ~~$5_1 >>> 0;
     break label$5;
    }
    $4_1 = 0;
   }
   label$7 : {
    label$8 : {
     if ($3_1) {
      break label$8
     }
     if ((__wasm_popcnt_i32($1_1 | 0) | 0) >>> 0 > 1 >>> 0) {
      break label$8
     }
     $4_1 = $4_1 >>> 0 < 2 >>> 0 ? $4_1 : 1 << (32 - Math_clz32($4_1 + -1 | 0) | 0) | 0;
     break label$7;
    }
    $4_1 = $700($4_1 | 0) | 0;
   }
   $2_1 = $2_1 >>> 0 < $4_1 >>> 0 ? $4_1 : $2_1;
   if ($2_1 >>> 0 >= $1_1 >>> 0) {
    break label$4
   }
   $484($0_1 | 0, $2_1 | 0);
  }
 }
 
 function $484($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $5_1 = 0, $2_1 = 0, $8_1 = 0, $4_1 = 0, $7_1 = 0, $6_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!$1_1) {
      break label$3
     }
     label$4 : {
      if ($1_1 >>> 0 >= 1073741824 >>> 0) {
       break label$4
      }
      $2_1 = $2030($1_1 << 2 | 0 | 0) | 0;
      $3_1 = HEAP32[$0_1 >> 2] | 0;
      HEAP32[$0_1 >> 2] = $2_1;
      label$5 : {
       if (!$3_1) {
        break label$5
       }
       $2032($3_1 | 0);
      }
      HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
      $2_1 = $1_1 >>> 0 > 1 >>> 0 ? $1_1 : 1;
      $3_1 = 0;
      label$6 : while (1) {
       HEAP32[((HEAP32[$0_1 >> 2] | 0) + ($3_1 << 2 | 0) | 0) >> 2] = 0;
       $3_1 = $3_1 + 1 | 0;
       if (($3_1 | 0) != ($2_1 | 0)) {
        continue label$6
       }
       break label$6;
      };
      $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
      if (!$2_1) {
       break label$1
      }
      $3_1 = $0_1 + 8 | 0;
      $4_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
      label$7 : {
       label$8 : {
        $5_1 = __wasm_popcnt_i32($1_1 | 0) | 0;
        if ($5_1 >>> 0 > 1 >>> 0) {
         break label$8
        }
        $4_1 = $4_1 & ($1_1 + -1 | 0) | 0;
        break label$7;
       }
       if ($4_1 >>> 0 < $1_1 >>> 0) {
        break label$7
       }
       $4_1 = ($4_1 >>> 0) % ($1_1 >>> 0) | 0;
      }
      HEAP32[((HEAP32[$0_1 >> 2] | 0) + ($4_1 << 2 | 0) | 0) >> 2] = $3_1;
      $3_1 = HEAP32[$2_1 >> 2] | 0;
      if (!$3_1) {
       break label$1
      }
      if ($5_1 >>> 0 > 1 >>> 0) {
       break label$2
      }
      $6_1 = $1_1 + -1 | 0;
      label$9 : while (1) {
       label$10 : {
        label$11 : {
         $5_1 = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) & $6_1 | 0;
         if (($5_1 | 0) != ($4_1 | 0)) {
          break label$11
         }
         $2_1 = $3_1;
         break label$10;
        }
        label$12 : {
         label$13 : {
          label$14 : {
           $7_1 = $5_1 << 2 | 0;
           $8_1 = (HEAP32[$0_1 >> 2] | 0) + $7_1 | 0;
           if (!(HEAP32[$8_1 >> 2] | 0)) {
            break label$14
           }
           $5_1 = $3_1;
           $8_1 = HEAP32[$3_1 >> 2] | 0;
           if (!$8_1) {
            break label$12
           }
           $5_1 = $3_1;
           $1_1 = $3_1 + 8 | 0;
           if ($571($1_1 | 0, $8_1 + 8 | 0 | 0) | 0) {
            break label$13
           }
           break label$12;
          }
          HEAP32[$8_1 >> 2] = $2_1;
          $2_1 = $3_1;
          $4_1 = $5_1;
          break label$10;
         }
         label$15 : while (1) {
          $5_1 = HEAP32[$5_1 >> 2] | 0;
          $8_1 = HEAP32[$5_1 >> 2] | 0;
          if (!$8_1) {
           break label$12
          }
          if ($571($1_1 | 0, $8_1 + 8 | 0 | 0) | 0) {
           continue label$15
          }
          break label$15;
         };
        }
        HEAP32[$2_1 >> 2] = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = HEAP32[(HEAP32[((HEAP32[$0_1 >> 2] | 0) + $7_1 | 0) >> 2] | 0) >> 2] | 0;
        HEAP32[(HEAP32[((HEAP32[$0_1 >> 2] | 0) + $7_1 | 0) >> 2] | 0) >> 2] = $3_1;
       }
       $3_1 = HEAP32[$2_1 >> 2] | 0;
       if ($3_1) {
        continue label$9
       }
       break label$1;
      };
     }
     $3(global$1 + 3948 | 0 | 0);
     abort();
    }
    $3_1 = HEAP32[$0_1 >> 2] | 0;
    HEAP32[$0_1 >> 2] = 0;
    label$16 : {
     if (!$3_1) {
      break label$16
     }
     $2032($3_1 | 0);
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = 0;
    break label$1;
   }
   label$17 : while (1) {
    label$18 : {
     $5_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
     if ($5_1 >>> 0 < $1_1 >>> 0) {
      break label$18
     }
     $5_1 = ($5_1 >>> 0) % ($1_1 >>> 0) | 0;
    }
    label$19 : {
     label$20 : {
      if (($5_1 | 0) != ($4_1 | 0)) {
       break label$20
      }
      $2_1 = $3_1;
      break label$19;
     }
     label$21 : {
      label$22 : {
       label$23 : {
        $6_1 = $5_1 << 2 | 0;
        $8_1 = (HEAP32[$0_1 >> 2] | 0) + $6_1 | 0;
        if (!(HEAP32[$8_1 >> 2] | 0)) {
         break label$23
        }
        $5_1 = $3_1;
        $8_1 = HEAP32[$3_1 >> 2] | 0;
        if (!$8_1) {
         break label$21
        }
        $5_1 = $3_1;
        $7_1 = $3_1 + 8 | 0;
        if ($571($7_1 | 0, $8_1 + 8 | 0 | 0) | 0) {
         break label$22
        }
        break label$21;
       }
       HEAP32[$8_1 >> 2] = $2_1;
       $2_1 = $3_1;
       $4_1 = $5_1;
       break label$19;
      }
      label$24 : while (1) {
       $5_1 = HEAP32[$5_1 >> 2] | 0;
       $8_1 = HEAP32[$5_1 >> 2] | 0;
       if (!$8_1) {
        break label$21
       }
       if ($571($7_1 | 0, $8_1 + 8 | 0 | 0) | 0) {
        continue label$24
       }
       break label$24;
      };
     }
     HEAP32[$2_1 >> 2] = HEAP32[$5_1 >> 2] | 0;
     HEAP32[$5_1 >> 2] = HEAP32[(HEAP32[((HEAP32[$0_1 >> 2] | 0) + $6_1 | 0) >> 2] | 0) >> 2] | 0;
     HEAP32[(HEAP32[((HEAP32[$0_1 >> 2] | 0) + $6_1 | 0) >> 2] | 0) >> 2] = $3_1;
    }
    $3_1 = HEAP32[$2_1 >> 2] | 0;
    if ($3_1) {
     continue label$17
    }
    break label$17;
   };
  }
 }
 
 function $485() {
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $1_1 = 0, $0_1 = 0, $2_1 = 0;
  $0_1 = global$1;
  $1_1 = $0_1 + 68176 | 0;
  i64toi32_i32$1 = $1_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  $2_1 = $0_1 + 68240 | 0;
  i64toi32_i32$1 = $2_1;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $1_1 + 12 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($1_1 + 20 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $1_1 + 32 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1_1 + 44 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($1_1 + 40 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $1_1 + 52 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($1_1 + 60 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $2_1 + 8 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  fimport$3(global$15 + 171 | 0 | 0, 0 | 0, $0_1 + 1024 | 0 | 0) | 0;
 }
 
 function $486($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[$0_1 >> 2] = (global$1 + 23356 | 0) + 8 | 0;
  $549($0_1 | 0, 0 | 0);
  return $0_1 | 0;
 }
 
 function $487($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = (global$1 + 23356 | 0) + 8 | 0;
  $438(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0);
  return $0_1 | 0;
 }
 
 function $488($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = (global$1 + 23356 | 0) + 8 | 0;
  $438(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0);
  $2032($0_1 | 0);
 }
 
 function $489($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $429(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0);
  fimport$12(35345 | 0, HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $1_1 | 0, 35048 | 0);
 }
 
 function $490($0_1) {
  $0_1 = $0_1 | 0;
  fimport$11(1 | 0, $0_1 + 4 | 0 | 0);
 }
 
 function $491($0_1) {
  $0_1 = $0_1 | 0;
  $438(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0);
  fimport$10(1 | 0, $0_1 + 4 | 0 | 0);
 }
 
 function $492() {
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $0_1 = 0;
  $0_1 = global$1 + 68260 | 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  i64toi32_i32$1 = i64toi32_i32$1 + 12 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 32 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 44 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 40 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 52 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 60 | 0) >> 2] = 1065353216;
 }
 
 function $493($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  HEAP32[($0_1 + 40 | 0) >> 2] = $1_1;
  $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $0_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
  HEAP8[($1_1 + 209 | 0) >> 0] = 1;
  HEAPF32[($1_1 + 736 | 0) >> 2] = Math_fround(Math_fround($2_1 | 0) / Math_fround($0_1 | 0));
 }
 
 function $494($0_1) {
  $0_1 = $0_1 | 0;
  $140(HEAP32[($0_1 + 44 | 0) >> 2] | 0 | 0);
  fimport$5(0 | 0, 0 | 0, HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0);
  label$1 : {
   if (!(HEAPU8[((HEAP32[($0_1 + 40 | 0) >> 2] | 0) + 756 | 0) >> 0] | 0)) {
    break label$1
   }
   $401(2304 | 0);
  }
  $390(HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0);
 }
 
 function $495($0_1) {
  $0_1 = $0_1 | 0;
  $400(1 | 0, 1 | 0, 1 | 0, 1 | 0);
  $396(1 | 0);
  $408(-1 | 0);
  $409($0_1 + 4 | 0 | 0);
  fimport$9(17664 | 0);
 }
 
 function $496($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $1_1 = 0, $2_1 = 0;
  label$1 : {
   if (!(HEAPU8[($0_1 + 1 | 0) >> 0] | 0)) {
    break label$1
   }
   if (!(HEAPU8[$0_1 >> 0] | 0)) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   $2_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
   $3_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
   HEAP8[($3_1 + 209 | 0) >> 0] = 1;
   HEAPF32[($3_1 + 736 | 0) >> 2] = Math_fround(Math_fround($1_1 | 0) / Math_fround($2_1 | 0));
   HEAP8[$0_1 >> 0] = 0;
  }
  $304(HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0);
 }
 
 function $497($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!(HEAPU8[((HEAP32[($0_1 + 40 | 0) >> 2] | 0) + 756 | 0) >> 0] | 0)) {
    break label$1
   }
   $401(2305 | 0);
  }
  label$2 : {
   $0_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
   if (!$0_1) {
    break label$2
   }
   if (!(HEAPU8[($0_1 + 13 | 0) >> 0] | 0)) {
    break label$2
   }
   $138($0_1 | 0);
  }
 }
 
 function $498($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $1_1 = 0, $4_1 = 0, $2_1 = 0;
  label$1 : {
   if (!(HEAPU8[((HEAP32[($0_1 + 40 | 0) >> 2] | 0) + 756 | 0) >> 0] | 0)) {
    break label$1
   }
   $401(2305 | 0);
  }
  label$2 : {
   if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) != (6914 | 0)) {
    break label$2
   }
   $1_1 = HEAP32[($0_1 + 64 | 0) >> 2] | 0;
   $2_1 = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
   if (($1_1 | 0) == ($2_1 | 0)) {
    break label$2
   }
   label$3 : {
    $3_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
    if (!$3_1) {
     break label$3
    }
    $4_1 = HEAP32[$1_1 >> 2] | 0;
    HEAP32[($4_1 + 20 | 0) >> 2] = $3_1;
    HEAP32[($4_1 + 16 | 0) >> 2] = $3_1;
    HEAP32[(HEAP32[((HEAP32[(HEAP32[$4_1 >> 2] | 0) >> 2] | 0) + 40 | 0) >> 2] | 0) >> 2] = HEAP32[(HEAP32[($3_1 + 28 | 0) >> 2] | 0) >> 2] | 0;
    $3_1 = $1_1 + 4 | 0;
    if (($3_1 | 0) == ($2_1 | 0)) {
     break label$3
    }
    label$4 : while (1) {
     $1_1 = HEAP32[$3_1 >> 2] | 0;
     $4_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
     HEAP32[($1_1 + 20 | 0) >> 2] = $4_1;
     HEAP32[($1_1 + 16 | 0) >> 2] = $4_1;
     HEAP32[(HEAP32[((HEAP32[(HEAP32[$1_1 >> 2] | 0) >> 2] | 0) + 40 | 0) >> 2] | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 28 | 0) >> 2] | 0) >> 2] | 0;
     $3_1 = $3_1 + 4 | 0;
     if (($3_1 | 0) != ($2_1 | 0)) {
      continue label$4
     }
     break label$4;
    };
   }
   $3_1 = 0;
   $425(0 | 0);
   $400(1 | 0, 1 | 0, 1 | 0, 1 | 0);
   $396(1 | 0);
   $408(-1 | 0);
   $409($0_1 + 4 | 0 | 0);
   fimport$9(17664 | 0);
   $1_1 = HEAP32[($0_1 + 64 | 0) >> 2] | 0;
   if ((HEAP32[($0_1 + 68 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
    break label$2
   }
   label$5 : while (1) {
    $49(HEAP32[($1_1 + ($3_1 << 2 | 0) | 0) >> 2] | 0 | 0);
    $3_1 = $3_1 + 1 | 0;
    $1_1 = HEAP32[($0_1 + 64 | 0) >> 2] | 0;
    if ($3_1 >>> 0 < (((HEAP32[($0_1 + 68 | 0) >> 2] | 0) - $1_1 | 0) >> 2 | 0) >>> 0) {
     continue label$5
    }
    break label$5;
   };
  }
 }
 
 function $499($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) != (6914 | 0)) {
    break label$1
   }
   label$2 : {
    if (!(HEAPU8[((HEAP32[($0_1 + 40 | 0) >> 2] | 0) + 756 | 0) >> 0] | 0)) {
     break label$2
    }
    $401(2305 | 0);
   }
   label$3 : {
    $1_1 = HEAP32[($0_1 + 76 | 0) >> 2] | 0;
    if (!$1_1) {
     break label$3
    }
    label$4 : {
     $2_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
     if (!$2_1) {
      break label$4
     }
     HEAP32[($1_1 + 20 | 0) >> 2] = $2_1;
     HEAP32[($1_1 + 16 | 0) >> 2] = $2_1;
     HEAP32[(HEAP32[((HEAP32[(HEAP32[$1_1 >> 2] | 0) >> 2] | 0) + 40 | 0) >> 2] | 0) >> 2] = HEAP32[(HEAP32[($2_1 + 28 | 0) >> 2] | 0) >> 2] | 0;
    }
    $425(0 | 0);
    $400(1 | 0, 1 | 0, 1 | 0, 1 | 0);
    $396(1 | 0);
    $408(-1 | 0);
    $409($0_1 + 4 | 0 | 0);
    fimport$9(17664 | 0);
    $49(HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0);
   }
   if (!(HEAPU8[((HEAP32[($0_1 + 40 | 0) >> 2] | 0) + 756 | 0) >> 0] | 0)) {
    break label$1
   }
   $401(2304 | 0);
  }
 }
 
 function $500($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) != (6914 | 0)) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 80 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   label$2 : {
    $2_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
    if (!$2_1) {
     break label$2
    }
    HEAP32[($1_1 + 20 | 0) >> 2] = $2_1;
    HEAP32[($1_1 + 16 | 0) >> 2] = $2_1;
    HEAP32[(HEAP32[((HEAP32[(HEAP32[$1_1 >> 2] | 0) >> 2] | 0) + 40 | 0) >> 2] | 0) >> 2] = HEAP32[(HEAP32[($2_1 + 28 | 0) >> 2] | 0) >> 2] | 0;
   }
   $425(0 | 0);
   $400(1 | 0, 1 | 0, 1 | 0, 1 | 0);
   $396(1 | 0);
   $408(-1 | 0);
   $409($0_1 + 4 | 0 | 0);
   fimport$9(17664 | 0);
   $49(HEAP32[($0_1 + 80 | 0) >> 2] | 0 | 0);
  }
 }
 
 function $501($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
   $2_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   if (($1_1 | 0) == ($2_1 | 0)) {
    break label$1
   }
   $502($2_1 | 0, $1_1 | 0);
   $396(0 | 0);
   $388(0 | 0);
   $397(0 | 0);
   $402(1 | 0);
   $404(32774 | 0);
   $403(770 | 0, 771 | 0);
   $389(1 | 0);
   $400(1 | 0, 1 | 0, 1 | 0, 1 | 0);
   $390(6914 | 0);
   label$2 : {
    $1_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
    $3_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
    if (($1_1 | 0) == ($3_1 | 0)) {
     break label$2
    }
    label$3 : while (1) {
     label$4 : {
      $2_1 = HEAP32[$1_1 >> 2] | 0;
      if (!(HEAPU8[($2_1 + 4 | 0) >> 0] | 0)) {
       break label$4
      }
      $523($2_1 | 0);
     }
     $1_1 = $1_1 + 4 | 0;
     if (($1_1 | 0) != ($3_1 | 0)) {
      continue label$3
     }
     break label$3;
    };
   }
   $390(HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0);
  }
 }
 
 function $502($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0, $8_1 = 0, $6_1 = 0, $9_1 = 0, $7_1 = 0, $10_1 = 0, $2_1 = 0;
  label$1 : while (1) {
   $2_1 = $1_1 + -4 | 0;
   label$2 : while (1) {
    $3_1 = $0_1;
    label$3 : {
     label$4 : while (1) {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             $0_1 = $1_1 - $3_1 | 0;
             $4_1 = $0_1 >> 2 | 0;
             switch ($4_1 | 0) {
             case 3:
              break label$10;
             case 2:
              break label$11;
             case 0:
             case 1:
              break label$3;
             case 4:
              break label$7;
             case 5:
              break label$9;
             default:
              break label$8;
             };
            }
            $0_1 = $1_1 + -4 | 0;
            $4_1 = HEAP32[$0_1 >> 2] | 0;
            $5_1 = HEAP32[$3_1 >> 2] | 0;
            if ((HEAP32[$4_1 >> 2] | 0 | 0) >= (HEAP32[$5_1 >> 2] | 0 | 0)) {
             break label$3
            }
            HEAP32[$3_1 >> 2] = $4_1;
            HEAP32[$0_1 >> 2] = $5_1;
            return;
           }
           $5_1 = $1_1 + -4 | 0;
           $6_1 = HEAP32[$5_1 >> 2] | 0;
           $0_1 = HEAP32[$6_1 >> 2] | 0;
           label$12 : {
            $7_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
            $4_1 = HEAP32[$7_1 >> 2] | 0;
            $8_1 = HEAP32[$3_1 >> 2] | 0;
            $9_1 = HEAP32[$8_1 >> 2] | 0;
            if (($4_1 | 0) < ($9_1 | 0)) {
             break label$12
            }
            if (($0_1 | 0) >= ($4_1 | 0)) {
             break label$3
            }
            HEAP32[($3_1 + 4 | 0) >> 2] = $6_1;
            HEAP32[$5_1 >> 2] = $7_1;
            $0_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
            $4_1 = HEAP32[$3_1 >> 2] | 0;
            if ((HEAP32[$0_1 >> 2] | 0 | 0) >= (HEAP32[$4_1 >> 2] | 0 | 0)) {
             break label$3
            }
            HEAP32[($3_1 + 4 | 0) >> 2] = $4_1;
            HEAP32[$3_1 >> 2] = $0_1;
            return;
           }
           label$13 : {
            if (($0_1 | 0) >= ($4_1 | 0)) {
             break label$13
            }
            HEAP32[$3_1 >> 2] = $6_1;
            HEAP32[$5_1 >> 2] = $8_1;
            return;
           }
           HEAP32[($3_1 + 4 | 0) >> 2] = $8_1;
           HEAP32[$3_1 >> 2] = $7_1;
           $0_1 = HEAP32[$5_1 >> 2] | 0;
           if ((HEAP32[$0_1 >> 2] | 0 | 0) >= ($9_1 | 0)) {
            break label$3
           }
           HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
           HEAP32[$5_1 >> 2] = $8_1;
           return;
          }
          $7_1 = $3_1 + 4 | 0;
          $4_1 = $3_1 + 8 | 0;
          $0_1 = $3_1 + 12 | 0;
          $508($3_1 | 0, $7_1 | 0, $4_1 | 0, $0_1 | 0) | 0;
          $5_1 = $1_1 + -4 | 0;
          $8_1 = HEAP32[$5_1 >> 2] | 0;
          $6_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
          if ((HEAP32[$8_1 >> 2] | 0 | 0) >= (HEAP32[$6_1 >> 2] | 0 | 0)) {
           break label$3
          }
          HEAP32[$0_1 >> 2] = $8_1;
          HEAP32[$5_1 >> 2] = $6_1;
          $5_1 = HEAP32[$0_1 >> 2] | 0;
          $8_1 = HEAP32[$5_1 >> 2] | 0;
          $6_1 = HEAP32[$4_1 >> 2] | 0;
          if (($8_1 | 0) >= (HEAP32[$6_1 >> 2] | 0 | 0)) {
           break label$3
          }
          HEAP32[$4_1 >> 2] = $5_1;
          HEAP32[$0_1 >> 2] = $6_1;
          $0_1 = HEAP32[$7_1 >> 2] | 0;
          if (($8_1 | 0) >= (HEAP32[$0_1 >> 2] | 0 | 0)) {
           break label$3
          }
          HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
          HEAP32[($3_1 + 4 | 0) >> 2] = $5_1;
          $0_1 = HEAP32[$3_1 >> 2] | 0;
          if (($8_1 | 0) >= (HEAP32[$0_1 >> 2] | 0 | 0)) {
           break label$3
          }
          HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
          HEAP32[$3_1 >> 2] = $5_1;
          return;
         }
         label$14 : {
          if (($0_1 | 0) > (123 | 0)) {
           break label$14
          }
          $8_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
          $4_1 = HEAP32[$8_1 >> 2] | 0;
          label$15 : {
           label$16 : {
            $0_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
            $6_1 = HEAP32[$0_1 >> 2] | 0;
            $5_1 = HEAP32[$3_1 >> 2] | 0;
            $7_1 = HEAP32[$5_1 >> 2] | 0;
            if (($6_1 | 0) < ($7_1 | 0)) {
             break label$16
            }
            label$17 : {
             if (($4_1 | 0) < ($6_1 | 0)) {
              break label$17
             }
             $0_1 = $8_1;
             break label$15;
            }
            HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
            HEAP32[($3_1 + 4 | 0) >> 2] = $8_1;
            if (($4_1 | 0) >= ($7_1 | 0)) {
             break label$15
            }
            HEAP32[($3_1 + 4 | 0) >> 2] = $5_1;
            HEAP32[$3_1 >> 2] = $8_1;
            break label$15;
           }
           label$18 : {
            label$19 : {
             if (($4_1 | 0) >= ($6_1 | 0)) {
              break label$19
             }
             HEAP32[($3_1 + 8 | 0) >> 2] = $5_1;
             HEAP32[$3_1 >> 2] = $8_1;
             break label$18;
            }
            HEAP32[($3_1 + 4 | 0) >> 2] = $5_1;
            HEAP32[$3_1 >> 2] = $0_1;
            label$20 : {
             if (($4_1 | 0) < ($7_1 | 0)) {
              break label$20
             }
             $0_1 = $8_1;
             break label$15;
            }
            HEAP32[($3_1 + 8 | 0) >> 2] = $5_1;
            HEAP32[($3_1 + 4 | 0) >> 2] = $8_1;
           }
           $0_1 = $5_1;
          }
          $4_1 = $3_1 + 12 | 0;
          if (($4_1 | 0) == ($1_1 | 0)) {
           break label$3
          }
          $5_1 = $3_1 + 8 | 0;
          label$21 : while (1) {
           $6_1 = $4_1;
           label$22 : {
            $7_1 = HEAP32[$4_1 >> 2] | 0;
            $8_1 = HEAP32[$7_1 >> 2] | 0;
            if (($8_1 | 0) >= (HEAP32[$0_1 >> 2] | 0 | 0)) {
             break label$22
            }
            label$23 : {
             label$24 : while (1) {
              $0_1 = $5_1;
              HEAP32[$4_1 >> 2] = HEAP32[$0_1 >> 2] | 0;
              label$25 : {
               if (($0_1 | 0) != ($3_1 | 0)) {
                break label$25
               }
               $0_1 = $3_1;
               break label$23;
              }
              $4_1 = $0_1;
              $5_1 = $0_1 + -4 | 0;
              if (($8_1 | 0) < (HEAP32[(HEAP32[$5_1 >> 2] | 0) >> 2] | 0 | 0)) {
               continue label$24
              }
              break label$24;
             };
            }
            HEAP32[$0_1 >> 2] = $7_1;
           }
           $4_1 = $6_1 + 4 | 0;
           if (($4_1 | 0) == ($1_1 | 0)) {
            break label$3
           }
           $0_1 = HEAP32[$6_1 >> 2] | 0;
           $5_1 = $6_1;
           continue label$21;
          };
         }
         $9_1 = $3_1 + ((($4_1 | 0) / (2 | 0) | 0) << 2 | 0) | 0;
         label$26 : {
          label$27 : {
           if (($0_1 | 0) < (3997 | 0)) {
            break label$27
           }
           $0_1 = (($4_1 | 0) / (4 | 0) | 0) << 2 | 0;
           $4_1 = $3_1 + $0_1 | 0;
           $0_1 = $9_1 + $0_1 | 0;
           $10_1 = $508($3_1 | 0, $4_1 | 0, $9_1 | 0, $0_1 | 0) | 0;
           $5_1 = HEAP32[$2_1 >> 2] | 0;
           $8_1 = HEAP32[$0_1 >> 2] | 0;
           if ((HEAP32[$5_1 >> 2] | 0 | 0) >= (HEAP32[$8_1 >> 2] | 0 | 0)) {
            break label$26
           }
           HEAP32[$0_1 >> 2] = $5_1;
           HEAP32[$2_1 >> 2] = $8_1;
           label$28 : {
            $5_1 = HEAP32[$0_1 >> 2] | 0;
            $8_1 = HEAP32[$9_1 >> 2] | 0;
            if ((HEAP32[$5_1 >> 2] | 0 | 0) < (HEAP32[$8_1 >> 2] | 0 | 0)) {
             break label$28
            }
            $10_1 = $10_1 + 1 | 0;
            break label$26;
           }
           HEAP32[$9_1 >> 2] = $5_1;
           HEAP32[$0_1 >> 2] = $8_1;
           label$29 : {
            $0_1 = HEAP32[$9_1 >> 2] | 0;
            $5_1 = HEAP32[$4_1 >> 2] | 0;
            if ((HEAP32[$0_1 >> 2] | 0 | 0) < (HEAP32[$5_1 >> 2] | 0 | 0)) {
             break label$29
            }
            $10_1 = $10_1 + 2 | 0;
            break label$26;
           }
           HEAP32[$4_1 >> 2] = $0_1;
           HEAP32[$9_1 >> 2] = $5_1;
           label$30 : {
            $0_1 = HEAP32[$4_1 >> 2] | 0;
            $5_1 = HEAP32[$3_1 >> 2] | 0;
            if ((HEAP32[$0_1 >> 2] | 0 | 0) < (HEAP32[$5_1 >> 2] | 0 | 0)) {
             break label$30
            }
            $10_1 = $10_1 + 3 | 0;
            break label$26;
           }
           HEAP32[$3_1 >> 2] = $0_1;
           HEAP32[$4_1 >> 2] = $5_1;
           $10_1 = $10_1 + 4 | 0;
           break label$26;
          }
          $8_1 = HEAP32[$2_1 >> 2] | 0;
          $0_1 = HEAP32[$8_1 >> 2] | 0;
          label$31 : {
           label$32 : {
            $6_1 = HEAP32[$9_1 >> 2] | 0;
            $4_1 = HEAP32[$6_1 >> 2] | 0;
            $5_1 = HEAP32[$3_1 >> 2] | 0;
            $7_1 = HEAP32[$5_1 >> 2] | 0;
            if (($4_1 | 0) < ($7_1 | 0)) {
             break label$32
            }
            $10_1 = 0;
            if (($0_1 | 0) >= ($4_1 | 0)) {
             break label$26
            }
            HEAP32[$9_1 >> 2] = $8_1;
            HEAP32[$2_1 >> 2] = $6_1;
            $10_1 = 1;
            $0_1 = HEAP32[$9_1 >> 2] | 0;
            $4_1 = HEAP32[$3_1 >> 2] | 0;
            if ((HEAP32[$0_1 >> 2] | 0 | 0) >= (HEAP32[$4_1 >> 2] | 0 | 0)) {
             break label$26
            }
            HEAP32[$3_1 >> 2] = $0_1;
            HEAP32[$9_1 >> 2] = $4_1;
            break label$31;
           }
           label$33 : {
            if (($0_1 | 0) >= ($4_1 | 0)) {
             break label$33
            }
            HEAP32[$3_1 >> 2] = $8_1;
            HEAP32[$2_1 >> 2] = $5_1;
            $10_1 = 1;
            break label$26;
           }
           HEAP32[$3_1 >> 2] = $6_1;
           HEAP32[$9_1 >> 2] = $5_1;
           $10_1 = 1;
           $0_1 = HEAP32[$2_1 >> 2] | 0;
           if ((HEAP32[$0_1 >> 2] | 0 | 0) >= ($7_1 | 0)) {
            break label$26
           }
           HEAP32[$9_1 >> 2] = $0_1;
           HEAP32[$2_1 >> 2] = $5_1;
          }
          $10_1 = 2;
         }
         $0_1 = $2_1;
         label$34 : {
          label$35 : {
           $6_1 = HEAP32[$3_1 >> 2] | 0;
           $8_1 = HEAP32[$6_1 >> 2] | 0;
           $4_1 = HEAP32[(HEAP32[$9_1 >> 2] | 0) >> 2] | 0;
           if (($8_1 | 0) >= ($4_1 | 0)) {
            break label$35
           }
           $0_1 = $2_1;
           break label$34;
          }
          label$36 : while (1) {
           label$37 : {
            $0_1 = $0_1 + -4 | 0;
            if (($3_1 | 0) != ($0_1 | 0)) {
             break label$37
            }
            $5_1 = $3_1 + 4 | 0;
            $4_1 = HEAP32[$2_1 >> 2] | 0;
            if (($8_1 | 0) < (HEAP32[$4_1 >> 2] | 0 | 0)) {
             break label$5
            }
            if (($5_1 | 0) == ($2_1 | 0)) {
             break label$3
            }
            label$38 : while (1) {
             label$39 : {
              $0_1 = HEAP32[$5_1 >> 2] | 0;
              if (($8_1 | 0) >= (HEAP32[$0_1 >> 2] | 0 | 0)) {
               break label$39
              }
              HEAP32[$5_1 >> 2] = $4_1;
              HEAP32[$2_1 >> 2] = $0_1;
              $5_1 = $5_1 + 4 | 0;
              break label$5;
             }
             $5_1 = $5_1 + 4 | 0;
             if (($5_1 | 0) != ($2_1 | 0)) {
              continue label$38
             }
             break label$3;
            };
           }
           $5_1 = HEAP32[$0_1 >> 2] | 0;
           if ((HEAP32[$5_1 >> 2] | 0 | 0) >= ($4_1 | 0)) {
            continue label$36
           }
           break label$36;
          };
          HEAP32[$3_1 >> 2] = $5_1;
          HEAP32[$0_1 >> 2] = $6_1;
          $10_1 = $10_1 + 1 | 0;
         }
         $8_1 = $3_1 + 4 | 0;
         if ($8_1 >>> 0 >= $0_1 >>> 0) {
          break label$6
         }
         label$40 : while (1) {
          $5_1 = HEAP32[(HEAP32[$9_1 >> 2] | 0) >> 2] | 0;
          label$41 : while (1) {
           $4_1 = $8_1;
           $8_1 = $4_1 + 4 | 0;
           $6_1 = HEAP32[$4_1 >> 2] | 0;
           if ((HEAP32[$6_1 >> 2] | 0 | 0) < ($5_1 | 0)) {
            continue label$41
           }
           break label$41;
          };
          label$42 : while (1) {
           $0_1 = $0_1 + -4 | 0;
           $7_1 = HEAP32[$0_1 >> 2] | 0;
           if ((HEAP32[$7_1 >> 2] | 0 | 0) >= ($5_1 | 0)) {
            continue label$42
           }
           break label$42;
          };
          label$43 : {
           if ($4_1 >>> 0 <= $0_1 >>> 0) {
            break label$43
           }
           $8_1 = $4_1;
           break label$6;
          }
          HEAP32[$4_1 >> 2] = $7_1;
          HEAP32[$0_1 >> 2] = $6_1;
          $9_1 = ($9_1 | 0) == ($4_1 | 0) ? $0_1 : $9_1;
          $10_1 = $10_1 + 1 | 0;
          continue label$40;
         };
        }
        $508($3_1 | 0, $3_1 + 4 | 0 | 0, $3_1 + 8 | 0 | 0, $1_1 + -4 | 0 | 0) | 0;
        break label$3;
       }
       label$44 : {
        if (($8_1 | 0) == ($9_1 | 0)) {
         break label$44
        }
        $0_1 = HEAP32[$9_1 >> 2] | 0;
        $4_1 = HEAP32[$8_1 >> 2] | 0;
        if ((HEAP32[$0_1 >> 2] | 0 | 0) >= (HEAP32[$4_1 >> 2] | 0 | 0)) {
         break label$44
        }
        HEAP32[$8_1 >> 2] = $0_1;
        HEAP32[$9_1 >> 2] = $4_1;
        $10_1 = $10_1 + 1 | 0;
       }
       label$45 : {
        if ($10_1) {
         break label$45
        }
        $4_1 = $509($3_1 | 0, $8_1 | 0) | 0;
        label$46 : {
         $0_1 = $8_1 + 4 | 0;
         if (!($509($0_1 | 0, $1_1 | 0) | 0)) {
          break label$46
         }
         $1_1 = $8_1;
         $0_1 = $3_1;
         if (!$4_1) {
          continue label$1
         }
         break label$3;
        }
        if ($4_1) {
         continue label$2
        }
       }
       label$47 : {
        if (($8_1 - $3_1 | 0 | 0) >= ($1_1 - $8_1 | 0 | 0)) {
         break label$47
        }
        $502($3_1 | 0, $8_1 | 0);
        $0_1 = $8_1 + 4 | 0;
        continue label$2;
       }
       $502($8_1 + 4 | 0 | 0, $1_1 | 0);
       $1_1 = $8_1;
       $0_1 = $3_1;
       continue label$1;
      }
      $0_1 = $2_1;
      if (($5_1 | 0) == ($0_1 | 0)) {
       break label$3
      }
      label$48 : while (1) {
       $8_1 = HEAP32[(HEAP32[$3_1 >> 2] | 0) >> 2] | 0;
       label$49 : while (1) {
        $4_1 = $5_1;
        $5_1 = $4_1 + 4 | 0;
        $6_1 = HEAP32[$4_1 >> 2] | 0;
        if (($8_1 | 0) >= (HEAP32[$6_1 >> 2] | 0 | 0)) {
         continue label$49
        }
        break label$49;
       };
       label$50 : while (1) {
        $0_1 = $0_1 + -4 | 0;
        $7_1 = HEAP32[$0_1 >> 2] | 0;
        if (($8_1 | 0) < (HEAP32[$7_1 >> 2] | 0 | 0)) {
         continue label$50
        }
        break label$50;
       };
       label$51 : {
        if ($4_1 >>> 0 < $0_1 >>> 0) {
         break label$51
        }
        $3_1 = $4_1;
        continue label$4;
       }
       HEAP32[$4_1 >> 2] = $7_1;
       HEAP32[$0_1 >> 2] = $6_1;
       continue label$48;
      };
     };
    }
    break label$2;
   };
   break label$1;
  };
 }
 
 function $503($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $7_1 = 0, $12_1 = 0;
  HEAP16[$0_1 >> 1] = 257;
  i64toi32_i32$2 = global$1 + 4072 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $7_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = $7_1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $12_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + 12 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $12_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 52 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 56 | 0) >> 2] = i64toi32_i32$0;
  HEAP16[(i64toi32_i32$1 + 48 | 0) >> 1] = 257;
  HEAP32[(i64toi32_i32$1 + 44 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] = 1;
  HEAP32[(i64toi32_i32$1 + 40 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 1;
  HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = 1;
  HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = -1;
  HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = 6914;
  HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 60 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 68 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 76 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  return $0_1 | 0;
 }
 
 function $504($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $13_1 = 0;
  i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  $1_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = 1065353216;
  HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
  $13_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $13_1;
  HEAP32[($0_1 + 8 | 0) >> 2] = i64toi32_i32$1;
 }
 
 function $505($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
     break label$2
    }
    if ((HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) == ($2_1 | 0)) {
     break label$1
    }
   }
   HEAP32[($0_1 + 32 | 0) >> 2] = $2_1;
   HEAP32[($0_1 + 28 | 0) >> 2] = $1_1;
   HEAP8[$0_1 >> 0] = 1;
  }
 }
 
 function $506($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 44 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
    break label$1
   }
   HEAP32[($0_1 + 44 | 0) >> 2] = $1_1;
   if (!$1_1) {
    break label$1
   }
   $2_1 = HEAP32[($0_1 + 64 | 0) >> 2] | 0;
   $3_1 = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
   if (($2_1 | 0) == ($3_1 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $4_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[(HEAP32[((HEAP32[(HEAP32[$4_1 >> 2] | 0) >> 2] | 0) + 40 | 0) >> 2] | 0) >> 2] = HEAP32[(HEAP32[($1_1 + 28 | 0) >> 2] | 0) >> 2] | 0;
    $1_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
    HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
    $2_1 = $2_1 + 4 | 0;
    if (($2_1 | 0) != ($3_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $507($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0;
 }
 
 function $508($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $7_1 = 0, $8_1 = 0, $6_1 = 0, $9_1 = 0;
  $4_1 = HEAP32[$2_1 >> 2] | 0;
  $5_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   label$2 : {
    $6_1 = HEAP32[$1_1 >> 2] | 0;
    $7_1 = HEAP32[$6_1 >> 2] | 0;
    $8_1 = HEAP32[$0_1 >> 2] | 0;
    $9_1 = HEAP32[$8_1 >> 2] | 0;
    if (($7_1 | 0) < ($9_1 | 0)) {
     break label$2
    }
    label$3 : {
     if (($5_1 | 0) < ($7_1 | 0)) {
      break label$3
     }
     $5_1 = 0;
     break label$1;
    }
    HEAP32[$1_1 >> 2] = $4_1;
    HEAP32[$2_1 >> 2] = $6_1;
    label$4 : {
     $4_1 = HEAP32[$1_1 >> 2] | 0;
     $5_1 = HEAP32[$0_1 >> 2] | 0;
     if ((HEAP32[$4_1 >> 2] | 0 | 0) < (HEAP32[$5_1 >> 2] | 0 | 0)) {
      break label$4
     }
     $5_1 = 1;
     $4_1 = $6_1;
     break label$1;
    }
    HEAP32[$0_1 >> 2] = $4_1;
    HEAP32[$1_1 >> 2] = $5_1;
    $4_1 = HEAP32[$2_1 >> 2] | 0;
    $5_1 = 2;
    break label$1;
   }
   label$5 : {
    label$6 : {
     if (($5_1 | 0) >= ($7_1 | 0)) {
      break label$6
     }
     HEAP32[$0_1 >> 2] = $4_1;
     HEAP32[$2_1 >> 2] = $8_1;
     $5_1 = 1;
     break label$5;
    }
    HEAP32[$0_1 >> 2] = $6_1;
    HEAP32[$1_1 >> 2] = $8_1;
    $5_1 = 1;
    $4_1 = HEAP32[$2_1 >> 2] | 0;
    if ((HEAP32[$4_1 >> 2] | 0 | 0) >= ($9_1 | 0)) {
     break label$1
    }
    HEAP32[$1_1 >> 2] = $4_1;
    HEAP32[$2_1 >> 2] = $8_1;
    $5_1 = 2;
   }
   $4_1 = $8_1;
  }
  label$7 : {
   $7_1 = HEAP32[$3_1 >> 2] | 0;
   if ((HEAP32[$7_1 >> 2] | 0 | 0) >= (HEAP32[$4_1 >> 2] | 0 | 0)) {
    break label$7
   }
   HEAP32[$2_1 >> 2] = $7_1;
   HEAP32[$3_1 >> 2] = $4_1;
   label$8 : {
    $4_1 = HEAP32[$2_1 >> 2] | 0;
    $3_1 = HEAP32[$1_1 >> 2] | 0;
    if ((HEAP32[$4_1 >> 2] | 0 | 0) < (HEAP32[$3_1 >> 2] | 0 | 0)) {
     break label$8
    }
    return $5_1 + 1 | 0 | 0;
   }
   HEAP32[$1_1 >> 2] = $4_1;
   HEAP32[$2_1 >> 2] = $3_1;
   label$9 : {
    $2_1 = HEAP32[$1_1 >> 2] | 0;
    $4_1 = HEAP32[$0_1 >> 2] | 0;
    if ((HEAP32[$2_1 >> 2] | 0 | 0) < (HEAP32[$4_1 >> 2] | 0 | 0)) {
     break label$9
    }
    return $5_1 + 2 | 0 | 0;
   }
   HEAP32[$0_1 >> 2] = $2_1;
   HEAP32[$1_1 >> 2] = $4_1;
   $5_1 = $5_1 + 3 | 0;
  }
  return $5_1 | 0;
 }
 
 function $509($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $4_1 = 0, $2_1 = 0, $5_1 = 0, $7_1 = 0, $6_1 = 0, $8_1 = 0;
  $2_1 = 1;
  label$1 : {
   label$2 : {
    label$3 : {
     switch (($1_1 - $0_1 | 0) >> 2 | 0 | 0) {
     case 2:
      $2_1 = 1;
      $3_1 = $1_1 + -4 | 0;
      $4_1 = HEAP32[$3_1 >> 2] | 0;
      $5_1 = HEAP32[$0_1 >> 2] | 0;
      if ((HEAP32[$4_1 >> 2] | 0 | 0) >= (HEAP32[$5_1 >> 2] | 0 | 0)) {
       break label$2
      }
      HEAP32[$0_1 >> 2] = $4_1;
      HEAP32[$3_1 >> 2] = $5_1;
      return 1 & 1 | 0 | 0;
     case 3:
      $5_1 = $1_1 + -4 | 0;
      $1_1 = HEAP32[$5_1 >> 2] | 0;
      $3_1 = HEAP32[$1_1 >> 2] | 0;
      label$8 : {
       $6_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
       $4_1 = HEAP32[$6_1 >> 2] | 0;
       $7_1 = HEAP32[$0_1 >> 2] | 0;
       $8_1 = HEAP32[$7_1 >> 2] | 0;
       if (($4_1 | 0) < ($8_1 | 0)) {
        break label$8
       }
       $2_1 = 1;
       if (($3_1 | 0) >= ($4_1 | 0)) {
        break label$2
       }
       HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
       HEAP32[$5_1 >> 2] = $6_1;
       $2_1 = 1;
       $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
       $4_1 = HEAP32[$0_1 >> 2] | 0;
       if ((HEAP32[$3_1 >> 2] | 0 | 0) >= (HEAP32[$4_1 >> 2] | 0 | 0)) {
        break label$2
       }
       HEAP32[($0_1 + 4 | 0) >> 2] = $4_1;
       HEAP32[$0_1 >> 2] = $3_1;
       return 1 & 1 | 0 | 0;
      }
      label$9 : {
       if (($3_1 | 0) >= ($4_1 | 0)) {
        break label$9
       }
       HEAP32[$0_1 >> 2] = $1_1;
       break label$1;
      }
      HEAP32[($0_1 + 4 | 0) >> 2] = $7_1;
      HEAP32[$0_1 >> 2] = $6_1;
      $2_1 = 1;
      $3_1 = HEAP32[$5_1 >> 2] | 0;
      if ((HEAP32[$3_1 >> 2] | 0 | 0) >= ($8_1 | 0)) {
       break label$2
      }
      HEAP32[($0_1 + 4 | 0) >> 2] = $3_1;
      break label$1;
     case 4:
      $508($0_1 | 0, $0_1 + 4 | 0 | 0, $0_1 + 8 | 0 | 0, $1_1 + -4 | 0 | 0) | 0;
      return 1 & 1 | 0 | 0;
     case 5:
      $6_1 = $0_1 + 4 | 0;
      $4_1 = $0_1 + 8 | 0;
      $3_1 = $0_1 + 12 | 0;
      $508($0_1 | 0, $6_1 | 0, $4_1 | 0, $3_1 | 0) | 0;
      $2_1 = 1;
      $5_1 = $1_1 + -4 | 0;
      $7_1 = HEAP32[$5_1 >> 2] | 0;
      $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
      if ((HEAP32[$7_1 >> 2] | 0 | 0) >= (HEAP32[$1_1 >> 2] | 0 | 0)) {
       break label$2
      }
      HEAP32[$3_1 >> 2] = $7_1;
      HEAP32[$5_1 >> 2] = $1_1;
      $2_1 = 1;
      $5_1 = HEAP32[$3_1 >> 2] | 0;
      $7_1 = HEAP32[$5_1 >> 2] | 0;
      $1_1 = HEAP32[$4_1 >> 2] | 0;
      if (($7_1 | 0) >= (HEAP32[$1_1 >> 2] | 0 | 0)) {
       break label$2
      }
      HEAP32[$4_1 >> 2] = $5_1;
      HEAP32[$3_1 >> 2] = $1_1;
      $2_1 = 1;
      $3_1 = HEAP32[$6_1 >> 2] | 0;
      if (($7_1 | 0) >= (HEAP32[$3_1 >> 2] | 0 | 0)) {
       break label$2
      }
      HEAP32[($0_1 + 8 | 0) >> 2] = $3_1;
      HEAP32[($0_1 + 4 | 0) >> 2] = $5_1;
      $2_1 = 1;
      $3_1 = HEAP32[$0_1 >> 2] | 0;
      if (($7_1 | 0) >= (HEAP32[$3_1 >> 2] | 0 | 0)) {
       break label$2
      }
      HEAP32[($0_1 + 4 | 0) >> 2] = $3_1;
      HEAP32[$0_1 >> 2] = $5_1;
      return 1 & 1 | 0 | 0;
     case 0:
     case 1:
      break label$2;
     default:
      break label$3;
     };
    }
    $5_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    $3_1 = HEAP32[$5_1 >> 2] | 0;
    label$10 : {
     label$11 : {
      $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
      $7_1 = HEAP32[$2_1 >> 2] | 0;
      $4_1 = HEAP32[$0_1 >> 2] | 0;
      $6_1 = HEAP32[$4_1 >> 2] | 0;
      if (($7_1 | 0) < ($6_1 | 0)) {
       break label$11
      }
      label$12 : {
       if (($3_1 | 0) < ($7_1 | 0)) {
        break label$12
       }
       $2_1 = $5_1;
       break label$10;
      }
      HEAP32[($0_1 + 8 | 0) >> 2] = $2_1;
      HEAP32[($0_1 + 4 | 0) >> 2] = $5_1;
      if (($3_1 | 0) >= ($6_1 | 0)) {
       break label$10
      }
      HEAP32[($0_1 + 4 | 0) >> 2] = $4_1;
      HEAP32[$0_1 >> 2] = $5_1;
      break label$10;
     }
     label$13 : {
      label$14 : {
       if (($3_1 | 0) >= ($7_1 | 0)) {
        break label$14
       }
       HEAP32[($0_1 + 8 | 0) >> 2] = $4_1;
       HEAP32[$0_1 >> 2] = $5_1;
       break label$13;
      }
      HEAP32[($0_1 + 4 | 0) >> 2] = $4_1;
      HEAP32[$0_1 >> 2] = $2_1;
      label$15 : {
       if (($3_1 | 0) < ($6_1 | 0)) {
        break label$15
       }
       $2_1 = $5_1;
       break label$10;
      }
      HEAP32[($0_1 + 8 | 0) >> 2] = $4_1;
      HEAP32[($0_1 + 4 | 0) >> 2] = $5_1;
     }
     $2_1 = $4_1;
    }
    label$16 : {
     label$17 : {
      $3_1 = $0_1 + 12 | 0;
      if (($3_1 | 0) == ($1_1 | 0)) {
       break label$17
      }
      $4_1 = $0_1 + 8 | 0;
      $8_1 = 0;
      label$18 : {
       label$19 : while (1) {
        $7_1 = $3_1;
        label$20 : {
         $6_1 = HEAP32[$3_1 >> 2] | 0;
         $5_1 = HEAP32[$6_1 >> 2] | 0;
         if (($5_1 | 0) >= (HEAP32[$2_1 >> 2] | 0 | 0)) {
          break label$20
         }
         label$21 : {
          label$22 : while (1) {
           $2_1 = $4_1;
           HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2] | 0;
           label$23 : {
            if (($4_1 | 0) != ($0_1 | 0)) {
             break label$23
            }
            $2_1 = $0_1;
            break label$21;
           }
           $3_1 = $2_1;
           $4_1 = $3_1 + -4 | 0;
           if (($5_1 | 0) < (HEAP32[(HEAP32[$4_1 >> 2] | 0) >> 2] | 0 | 0)) {
            continue label$22
           }
           break label$22;
          };
         }
         HEAP32[$2_1 >> 2] = $6_1;
         $8_1 = $8_1 + 1 | 0;
         if (($8_1 | 0) == (8 | 0)) {
          break label$18
         }
        }
        $3_1 = $7_1 + 4 | 0;
        if (($3_1 | 0) == ($1_1 | 0)) {
         break label$17
        }
        $2_1 = HEAP32[$7_1 >> 2] | 0;
        $4_1 = $7_1;
        continue label$19;
       };
      }
      $3_1 = ($7_1 + 4 | 0 | 0) == ($1_1 | 0);
      $2_1 = 0;
      break label$16;
     }
     $2_1 = 1;
    }
    $2_1 = $2_1 | $3_1 | 0;
   }
   return $2_1 & 1 | 0 | 0;
  }
  HEAP32[$5_1 >> 2] = $7_1;
  return 1 & 1 | 0 | 0;
 }
 
 function $510() {
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $0_1 = 0;
  $0_1 = global$1 + 68324 | 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  i64toi32_i32$1 = i64toi32_i32$1 + 12 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 32 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 44 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 40 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 52 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 60 | 0) >> 2] = 1065353216;
 }
 
 function $511() {
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $0_1 = 0;
  $0_1 = global$1 + 68388 | 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  i64toi32_i32$1 = i64toi32_i32$1 + 12 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 32 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 44 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 40 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 52 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 60 | 0) >> 2] = 1065353216;
 }
 
 function $512($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!(HEAPU8[($0_1 + 5 | 0) >> 0] | 0)) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1);
   HEAP8[($0_1 + 5 | 0) >> 0] = 0;
  }
  return $0_1 + 8 | 0 | 0;
 }
 
 function $513($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!(HEAPU8[($0_1 + 6 | 0) >> 0] | 0)) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 44 | 0) >> 2] | 0 | 0]($0_1);
   HEAP8[($0_1 + 6 | 0) >> 0] = 0;
  }
  return $0_1 + 36 | 0 | 0;
 }
 
 function $514($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   label$2 : {
    if (!(HEAPU8[($0_1 + 5 | 0) >> 0] | 0)) {
     break label$2
    }
    if (HEAPU8[($0_1 + 6 | 0) >> 0] | 0) {
     break label$1
    }
   }
   $1_1 = 257;
   HEAP8[($0_1 + 5 | 0) >> 0] = $1_1;
   HEAP8[($0_1 + 6 | 0) >> 0] = $1_1 >>> 8 | 0;
   $0_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
   if (!$0_1) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1);
  }
 }
 
 function $515($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  HEAP8[($0_1 + 6 | 0) >> 0] = 1;
  HEAP16[($0_1 + 4 | 0) >> 1] = 257;
  $1_1 = global$1;
  HEAP32[$0_1 >> 2] = ($1_1 + 23392 | 0) + 8 | 0;
  $1_1 = $1_1 + 4088 | 0;
  $528($0_1 + 8 | 0 | 0, $1_1 | 0, $1_1 | 0) | 0;
  $534($0_1 + 36 | 0 | 0, $1_1 | 0, Math_fround(Math_fround(0.0))) | 0;
  HEAP32[($0_1 + 56 | 0) >> 2] = 0;
  return $0_1 | 0;
 }
 
 function $516($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, $3_1 = 0, i64toi32_i32$0 = 0, $2_1 = 0, i64toi32_i32$2 = 0, $1_1 = 0, $4_1 = 0, $5_1 = 0, $23_1 = 0, $29_1 = 0, $35_1 = 0;
  $1_1 = global$0 - 64 | 0;
  global$0 = $1_1;
  HEAP32[($1_1 + 24 | 0) >> 2] = 0;
  i64toi32_i32$1 = $1_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $2_1 = $0_1 + 12 | 0;
  $3_1 = $528(i64toi32_i32$1 + 32 | 0 | 0, i64toi32_i32$1 + 16 | 0 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$0 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  $23_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $2_1;
  HEAP32[i64toi32_i32$0 >> 2] = $23_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $4_1 = $0_1 + 28 | 0;
  i64toi32_i32$2 = $3_1 + 20 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $29_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $4_1;
  HEAP32[i64toi32_i32$1 >> 2] = $29_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $5_1 = $0_1 + 20 | 0;
  i64toi32_i32$2 = $3_1 + 12 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $35_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1;
  HEAP32[i64toi32_i32$0 >> 2] = $35_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  label$1 : {
   $3_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
   if (!$3_1) {
    break label$1
   }
   $564($3_1 | 0);
   HEAPF32[$2_1 >> 2] = Math_fround(Math_fround(HEAPF32[($3_1 + 128 | 0) >> 2]) + Math_fround(HEAPF32[$2_1 >> 2]));
   $2_1 = $0_1 + 16 | 0;
   HEAPF32[$2_1 >> 2] = Math_fround(Math_fround(HEAPF32[($3_1 + 132 | 0) >> 2]) + Math_fround(HEAPF32[$2_1 >> 2]));
   HEAPF32[$5_1 >> 2] = Math_fround(Math_fround(HEAPF32[($3_1 + 136 | 0) >> 2]) + Math_fround(HEAPF32[$5_1 >> 2]));
   $3_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
   $564($3_1 | 0);
   $2_1 = $0_1 + 24 | 0;
   HEAPF32[$2_1 >> 2] = Math_fround(Math_fround(HEAPF32[($3_1 + 128 | 0) >> 2]) + Math_fround(HEAPF32[$2_1 >> 2]));
   HEAPF32[$4_1 >> 2] = Math_fround(Math_fround(HEAPF32[($3_1 + 132 | 0) >> 2]) + Math_fround(HEAPF32[$4_1 >> 2]));
   $0_1 = $0_1 + 32 | 0;
   HEAPF32[$0_1 >> 2] = Math_fround(Math_fround(HEAPF32[($3_1 + 136 | 0) >> 2]) + Math_fround(HEAPF32[$0_1 >> 2]));
  }
  global$0 = $1_1 + 64 | 0;
 }
 
 function $517($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $1_1 = 0, i64toi32_i32$0 = 0, $2_1 = 0, $4_1 = 0, i64toi32_i32$1 = 0, $19_1 = 0;
  $1_1 = global$0 - 48 | 0;
  global$0 = $1_1;
  HEAP32[($1_1 + 16 | 0) >> 2] = 0;
  i64toi32_i32$1 = $1_1;
  i64toi32_i32$0 = 0;
  HEAP32[($1_1 + 8 | 0) >> 2] = 0;
  HEAP32[($1_1 + 12 | 0) >> 2] = i64toi32_i32$0;
  $2_1 = $0_1 + 40 | 0;
  $3_1 = $534($1_1 + 24 | 0 | 0, $1_1 + 8 | 0 | 0, Math_fround(Math_fround(0.0))) | 0;
  i64toi32_i32$0 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  $19_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $2_1;
  HEAP32[i64toi32_i32$0 >> 2] = $19_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $4_1 = $0_1 + 48 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($0_1 + 52 | 0) >> 2] = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
  label$1 : {
   $3_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
   if (!$3_1) {
    break label$1
   }
   $564($3_1 | 0);
   HEAPF32[$2_1 >> 2] = Math_fround(Math_fround(HEAPF32[($3_1 + 128 | 0) >> 2]) + Math_fround(HEAPF32[$2_1 >> 2]));
   $0_1 = $0_1 + 44 | 0;
   HEAPF32[$0_1 >> 2] = Math_fround(Math_fround(HEAPF32[($3_1 + 132 | 0) >> 2]) + Math_fround(HEAPF32[$0_1 >> 2]));
   HEAPF32[$4_1 >> 2] = Math_fround(Math_fround(HEAPF32[($3_1 + 136 | 0) >> 2]) + Math_fround(HEAPF32[$4_1 >> 2]));
  }
  global$0 = $1_1 + 48 | 0;
 }
 
 function $518($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (HEAPU8[($0_1 + 4 | 0) >> 0] | 0) {
    break label$1
   }
   if (!$1_1) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1);
  }
  HEAP8[($0_1 + 4 | 0) >> 0] = $1_1;
 }
 
 function $519($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $520($0_1) {
  $0_1 = $0_1 | 0;
  $2032($0_1 | 0);
 }
 
 function $521() {
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $0_1 = 0;
  $0_1 = global$1 + 68452 | 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  i64toi32_i32$1 = i64toi32_i32$1 + 12 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 32 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 44 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 40 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 52 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 60 | 0) >> 2] = 1065353216;
 }
 
 function $522($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[(global$1 + 68580 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   HEAP32[((global$1 + 68580 | 0) + 4 | 0) >> 2] = $1_1;
   $2032($1_1 | 0);
  }
 }
 
 function $523($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $1_1 = 0, $3_1 = 0, $2_1 = 0, $9_1 = Math_fround(0), $10_1 = Math_fround(0), $8_1 = 0;
  label$1 : {
   if (!(HEAPU8[($0_1 + 4 | 0) >> 0] | 0)) {
    break label$1
   }
   if (Math_fround(HEAPF32[($0_1 + 84 | 0) >> 2]) == Math_fround(0.0)) {
    break label$1
   }
   if (Math_fround(HEAPF32[($0_1 + 88 | 0) >> 2]) == Math_fround(0.0)) {
    break label$1
   }
   $1_1 = $0_1 + 76 | 0;
   $188(HEAP32[($0_1 + 72 | 0) >> 2] | 0 | 0);
   $2_1 = $443() | 0;
   $3_1 = $444() | 0;
   label$2 : {
    if (!(HEAPU8[($0_1 + 6 | 0) >> 0] | 0)) {
     break label$2
    }
    $403(1 | 0, $3_1 | 0);
   }
   $9_1 = Math_fround(HEAPF32[($0_1 + 84 | 0) >> 2]);
   $4_1 = HEAP32[((HEAP32[(($341() | 0) + 12 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0;
   $10_1 = Math_fround(HEAPF32[($0_1 + 88 | 0) >> 2]);
   $5_1 = HEAP32[((HEAP32[(($341() | 0) + 12 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0;
   HEAPF32[($0_1 + 172 | 0) >> 2] = Math_fround($9_1 * Math_fround($4_1 | 0));
   HEAPF32[($0_1 + 176 | 0) >> 2] = Math_fround($10_1 * Math_fround($5_1 | 0));
   $489($431(6 | 0) | 0 | 0, $1_1 | 0);
   label$3 : {
    $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    if (!$4_1) {
     break label$3
    }
    label$4 : {
     label$5 : {
      $5_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
      if (HEAP32[($5_1 + 4 | 0) >> 2] | 0) {
       break label$5
      }
      $5_1 = -1;
      break label$4;
     }
     $5_1 = HEAP32[(HEAP32[($5_1 + 56 | 0) >> 2] | 0) >> 2] | 0;
    }
    $287($4_1 | 0, 0 | 0);
    FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($4_1, $0_1 + 32 | 0);
    fimport$6($5_1 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
   }
   label$6 : {
    $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    if (!$4_1) {
     break label$6
    }
    label$7 : {
     label$8 : {
      $5_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
      if (HEAP32[($5_1 + 4 | 0) >> 2] | 0) {
       break label$8
      }
      $5_1 = -1;
      break label$7;
     }
     $5_1 = HEAP32[((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
    }
    $287($4_1 | 0, 1 | 0);
    FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($4_1, $0_1 + 32 | 0);
    fimport$6($5_1 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
   }
   label$9 : {
    $4_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
    if (!$4_1) {
     break label$9
    }
    label$10 : {
     label$11 : {
      $5_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
      if (HEAP32[($5_1 + 4 | 0) >> 2] | 0) {
       break label$11
      }
      $5_1 = -1;
      break label$10;
     }
     $5_1 = HEAP32[((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
    }
    $287($4_1 | 0, 2 | 0);
    FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($4_1, $0_1 + 32 | 0);
    fimport$6($5_1 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
   }
   label$12 : {
    $6_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    $7_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
    if (($6_1 | 0) == ($7_1 | 0)) {
     break label$12
    }
    $8_1 = $0_1 + 32 | 0;
    $4_1 = 0;
    label$13 : while (1) {
     label$14 : {
      $5_1 = HEAP32[($7_1 + ($4_1 << 2 | 0) | 0) >> 2] | 0;
      if (!$5_1) {
       break label$14
      }
      $7_1 = $4_1 + 3 | 0;
      label$15 : {
       label$16 : {
        $6_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
        if (HEAP32[($6_1 + 4 | 0) >> 2] | 0) {
         break label$16
        }
        $6_1 = -1;
        break label$15;
       }
       $6_1 = HEAP32[((HEAP32[($6_1 + 56 | 0) >> 2] | 0) + ($7_1 << 2 | 0) | 0) >> 2] | 0;
      }
      $287($5_1 | 0, $7_1 | 0);
      FUNCTION_TABLE[HEAP32[((HEAP32[$5_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($5_1, $8_1);
      fimport$6($6_1 | 0, HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0);
      $7_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
      $6_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     }
     $4_1 = $4_1 + 1 | 0;
     if ($4_1 >>> 0 < (($6_1 - $7_1 | 0) >> 2 | 0) >>> 0) {
      continue label$13
     }
     break label$13;
    };
   }
   label$17 : {
    $4_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
    if (!(HEAP32[($4_1 + 4 | 0) >> 2] | 0)) {
     break label$17
    }
    $4_1 = HEAP32[((HEAP32[($4_1 + 56 | 0) >> 2] | 0) + 84 | 0) >> 2] | 0;
    if (($4_1 | 0) <= (-1 | 0)) {
     break label$17
    }
    fimport$6($4_1 | 0, HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0);
   }
   $4_1 = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 64 | 0) >> 2] | 0 | 0]($4_1, 4);
   label$18 : {
    if (!(HEAPU8[($0_1 + 6 | 0) >> 0] | 0)) {
     break label$18
    }
    $403($2_1 | 0, $3_1 | 0);
   }
   if (!(HEAPU8[($0_1 + 5 | 0) >> 0] | 0)) {
    break label$1
   }
   $4_1 = $0_1 + 100 | 0;
   HEAP32[$4_1 >> 2] = 1065353216;
   $489($431(6 | 0) | 0 | 0, $1_1 | 0);
   $0_1 = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 64 | 0) >> 2] | 0 | 0]($0_1, 4);
   HEAP32[$4_1 >> 2] = 0;
  }
 }
 
 function $524() {
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $1_1 = 0, $0_1 = 0, $2_1 = 0;
  $0_1 = global$1;
  $1_1 = $0_1 + 68516 | 0;
  i64toi32_i32$1 = $1_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  $2_1 = $0_1 + 68580 | 0;
  HEAP32[($2_1 + 8 | 0) >> 2] = 0;
  i64toi32_i32$1 = $2_1;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1_1 + 12 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($1_1 + 20 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $1_1 + 32 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1_1 + 44 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($1_1 + 40 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $1_1 + 52 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($1_1 + 60 | 0) >> 2] = 1065353216;
  fimport$3(global$15 + 192 | 0 | 0, 0 | 0, $0_1 + 1024 | 0 | 0) | 0;
 }
 
 function $525() {
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $0_1 = 0;
  $0_1 = global$1 + 68592 | 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  i64toi32_i32$1 = i64toi32_i32$1 + 12 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 32 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 44 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 40 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 52 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 60 | 0) >> 2] = 1065353216;
 }
 
 function $526() {
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $0_1 = 0;
  $0_1 = global$1 + 68656 | 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  i64toi32_i32$1 = i64toi32_i32$1 + 12 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 32 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 44 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 40 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 52 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 60 | 0) >> 2] = 1065353216;
 }
 
 function $527($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  var i64toi32_i32$1 = 0;
  HEAP32[$0_1 >> 2] = (global$1 + 23168 | 0) + 8 | 0;
  i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[($0_1 + 12 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
  HEAPF32[($0_1 + 16 | 0) >> 2] = $2_1;
  return $0_1 | 0;
 }
 
 function $528($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $9_1 = 0, $18_1 = 0;
  HEAP32[$0_1 >> 2] = (global$1 + 21928 | 0) + 8 | 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $9_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $9_1;
  HEAP32[($0_1 + 8 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[($0_1 + 12 | 0) >> 2] = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $18_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + 16 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $18_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 24 | 0) >> 2] = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $529($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $9_1 = Math_fround(0), i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $3_1 = 0, $6_1 = 0, $2_1 = 0, $4_1 = 0, $8_1 = Math_fround(0), $28_1 = 0, $41_1 = 0;
  $2_1 = $0_1 + 4 | 0;
  i64toi32_i32$1 = $2_1;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $3_1 = $0_1 + 12 | 0;
  i64toi32_i32$1 = $3_1;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 20 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[$0_1 >> 2] = (global$1 + 21928 | 0) + 8 | 0;
  $4_1 = $0_1 + 16 | 0;
  $5_1 = HEAP32[$1_1 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[$5_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  $28_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $4_1;
  HEAP32[i64toi32_i32$0 >> 2] = $28_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $6_1 = $5_1 + 8 | 0;
  HEAP32[($0_1 + 24 | 0) >> 2] = HEAP32[$6_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[$5_1 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$6_1 >> 2] | 0;
  $41_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $2_1;
  HEAP32[i64toi32_i32$1 >> 2] = $41_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  label$1 : {
   $5_1 = HEAP32[$1_1 >> 2] | 0;
   if ((((HEAP32[($1_1 + 4 | 0) >> 2] | 0) - $5_1 | 0 | 0) / (12 | 0) | 0) >>> 0 < 2 >>> 0) {
    break label$1
   }
   $8_1 = Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2]);
   $6_1 = 1;
   label$2 : while (1) {
    label$3 : {
     $3_1 = Math_imul($6_1, 12);
     $9_1 = Math_fround(HEAPF32[($5_1 + $3_1 | 0) >> 2]);
     if ($9_1 < $8_1 ^ 1 | 0) {
      break label$3
     }
     HEAPF32[$2_1 >> 2] = $9_1;
     $5_1 = HEAP32[$1_1 >> 2] | 0;
     $8_1 = $9_1;
    }
    label$4 : {
     $9_1 = Math_fround(HEAPF32[(($5_1 + $3_1 | 0) + 4 | 0) >> 2]);
     if ($9_1 < Math_fround(HEAPF32[($0_1 + 8 | 0) >> 2]) ^ 1 | 0) {
      break label$4
     }
     HEAPF32[($0_1 + 8 | 0) >> 2] = $9_1;
     $5_1 = HEAP32[$1_1 >> 2] | 0;
    }
    label$5 : {
     $9_1 = Math_fround(HEAPF32[(($5_1 + $3_1 | 0) + 8 | 0) >> 2]);
     if ($9_1 < Math_fround(HEAPF32[($0_1 + 12 | 0) >> 2]) ^ 1 | 0) {
      break label$5
     }
     HEAPF32[($0_1 + 12 | 0) >> 2] = $9_1;
     $5_1 = HEAP32[$1_1 >> 2] | 0;
    }
    label$6 : {
     $9_1 = Math_fround(HEAPF32[($5_1 + $3_1 | 0) >> 2]);
     if ($9_1 > Math_fround(HEAPF32[$4_1 >> 2]) ^ 1 | 0) {
      break label$6
     }
     HEAPF32[$4_1 >> 2] = $9_1;
     $5_1 = HEAP32[$1_1 >> 2] | 0;
    }
    label$7 : {
     $9_1 = Math_fround(HEAPF32[(($5_1 + $3_1 | 0) + 4 | 0) >> 2]);
     if ($9_1 > Math_fround(HEAPF32[($0_1 + 20 | 0) >> 2]) ^ 1 | 0) {
      break label$7
     }
     HEAPF32[($0_1 + 20 | 0) >> 2] = $9_1;
     $5_1 = HEAP32[$1_1 >> 2] | 0;
    }
    label$8 : {
     $9_1 = Math_fround(HEAPF32[(($5_1 + $3_1 | 0) + 8 | 0) >> 2]);
     if ($9_1 > Math_fround(HEAPF32[($0_1 + 24 | 0) >> 2]) ^ 1 | 0) {
      break label$8
     }
     HEAPF32[($0_1 + 24 | 0) >> 2] = $9_1;
     $5_1 = HEAP32[$1_1 >> 2] | 0;
    }
    $6_1 = $6_1 + 1 | 0;
    if ($6_1 >>> 0 < (((HEAP32[($1_1 + 4 | 0) >> 2] | 0) - $5_1 | 0 | 0) / (12 | 0) | 0) >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return $0_1 | 0;
 }
 
 function $530($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  i64toi32_i32$1 = $0_1 + 4 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 12 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 20 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[$0_1 >> 2] = (global$1 + 21928 | 0) + 8 | 0;
  $531($0_1 | 0, $1_1 | 0);
  return $0_1 | 0;
 }
 
 function $531($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $8_1 = Math_fround(0), i64toi32_i32$1 = 0, $6_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, i64toi32_i32$2 = 0, $3_1 = 0, $7_1 = Math_fround(0), $13_1 = 0, $31_1 = 0, $4_1 = 0;
  $2_1 = HEAP32[$1_1 >> 2] | 0;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$0 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
  $13_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $13_1;
  HEAP32[($0_1 + 8 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[($0_1 + 12 | 0) >> 2] = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
  $2_1 = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($0_1 + 24 | 0) >> 2] = HEAP32[($2_1 + 24 | 0) >> 2] | 0;
  $3_1 = $0_1 + 16 | 0;
  i64toi32_i32$2 = $2_1 + 16 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $31_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $3_1;
  HEAP32[i64toi32_i32$1 >> 2] = $31_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  label$1 : {
   $2_1 = HEAP32[$1_1 >> 2] | 0;
   if ((((HEAP32[($1_1 + 4 | 0) >> 2] | 0) - $2_1 | 0 | 0) / (28 | 0) | 0) >>> 0 < 2 >>> 0) {
    break label$1
   }
   $4_1 = $0_1 + 4 | 0;
   $7_1 = Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2]);
   $5_1 = 1;
   label$2 : while (1) {
    label$3 : {
     $6_1 = Math_imul($5_1, 28);
     $8_1 = Math_fround(HEAPF32[(($2_1 + $6_1 | 0) + 4 | 0) >> 2]);
     if ($8_1 < $7_1 ^ 1 | 0) {
      break label$3
     }
     HEAPF32[$4_1 >> 2] = $8_1;
     $2_1 = HEAP32[$1_1 >> 2] | 0;
     $7_1 = $8_1;
    }
    label$4 : {
     $8_1 = Math_fround(HEAPF32[(($2_1 + $6_1 | 0) + 8 | 0) >> 2]);
     if ($8_1 < Math_fround(HEAPF32[($0_1 + 8 | 0) >> 2]) ^ 1 | 0) {
      break label$4
     }
     HEAPF32[($0_1 + 8 | 0) >> 2] = $8_1;
     $2_1 = HEAP32[$1_1 >> 2] | 0;
    }
    label$5 : {
     $8_1 = Math_fround(HEAPF32[(($2_1 + $6_1 | 0) + 12 | 0) >> 2]);
     if ($8_1 < Math_fround(HEAPF32[($0_1 + 12 | 0) >> 2]) ^ 1 | 0) {
      break label$5
     }
     HEAPF32[($0_1 + 12 | 0) >> 2] = $8_1;
     $2_1 = HEAP32[$1_1 >> 2] | 0;
    }
    label$6 : {
     $8_1 = Math_fround(HEAPF32[(($2_1 + $6_1 | 0) + 16 | 0) >> 2]);
     if ($8_1 > Math_fround(HEAPF32[$3_1 >> 2]) ^ 1 | 0) {
      break label$6
     }
     HEAPF32[$3_1 >> 2] = $8_1;
     $2_1 = HEAP32[$1_1 >> 2] | 0;
    }
    label$7 : {
     $8_1 = Math_fround(HEAPF32[(($2_1 + $6_1 | 0) + 20 | 0) >> 2]);
     if ($8_1 > Math_fround(HEAPF32[($0_1 + 20 | 0) >> 2]) ^ 1 | 0) {
      break label$7
     }
     HEAPF32[($0_1 + 20 | 0) >> 2] = $8_1;
     $2_1 = HEAP32[$1_1 >> 2] | 0;
    }
    label$8 : {
     $8_1 = Math_fround(HEAPF32[(($2_1 + $6_1 | 0) + 24 | 0) >> 2]);
     if ($8_1 > Math_fround(HEAPF32[($0_1 + 24 | 0) >> 2]) ^ 1 | 0) {
      break label$8
     }
     HEAPF32[($0_1 + 24 | 0) >> 2] = $8_1;
     $2_1 = HEAP32[$1_1 >> 2] | 0;
    }
    $5_1 = $5_1 + 1 | 0;
    if ($5_1 >>> 0 < (((HEAP32[($1_1 + 4 | 0) >> 2] | 0) - $2_1 | 0 | 0) / (28 | 0) | 0) >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $532($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = Math_fround(0);
  label$1 : {
   $2_1 = Math_fround(HEAPF32[$1_1 >> 2]);
   if ($2_1 < Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2]) ^ 1 | 0) {
    break label$1
   }
   HEAPF32[($0_1 + 4 | 0) >> 2] = $2_1;
  }
  label$2 : {
   $2_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
   if ($2_1 < Math_fround(HEAPF32[($0_1 + 8 | 0) >> 2]) ^ 1 | 0) {
    break label$2
   }
   HEAPF32[($0_1 + 8 | 0) >> 2] = $2_1;
  }
  label$3 : {
   $2_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
   if ($2_1 < Math_fround(HEAPF32[($0_1 + 12 | 0) >> 2]) ^ 1 | 0) {
    break label$3
   }
   HEAPF32[($0_1 + 12 | 0) >> 2] = $2_1;
  }
  label$4 : {
   $2_1 = Math_fround(HEAPF32[$1_1 >> 2]);
   if ($2_1 > Math_fround(HEAPF32[($0_1 + 16 | 0) >> 2]) ^ 1 | 0) {
    break label$4
   }
   HEAPF32[($0_1 + 16 | 0) >> 2] = $2_1;
  }
  label$5 : {
   $2_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
   if ($2_1 > Math_fround(HEAPF32[($0_1 + 20 | 0) >> 2]) ^ 1 | 0) {
    break label$5
   }
   HEAPF32[($0_1 + 20 | 0) >> 2] = $2_1;
  }
  label$6 : {
   $2_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
   if ($2_1 > Math_fround(HEAPF32[($0_1 + 24 | 0) >> 2]) ^ 1 | 0) {
    break label$6
   }
   HEAPF32[($0_1 + 24 | 0) >> 2] = $2_1;
  }
 }
 
 function $533($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $2_1 = global$0 - 96 | 0;
  global$0 = $2_1;
  $3_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
  $4_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  $5_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
  HEAP32[($2_1 + 8 | 0) >> 2] = $5_1;
  HEAP32[($2_1 + 4 | 0) >> 2] = $3_1;
  HEAP32[$2_1 >> 2] = $4_1;
  $6_1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
  HEAP32[($2_1 + 20 | 0) >> 2] = $6_1;
  HEAP32[($2_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $4_1;
  $7_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
  HEAP32[($2_1 + 32 | 0) >> 2] = $5_1;
  HEAP32[($2_1 + 28 | 0) >> 2] = $7_1;
  HEAP32[($2_1 + 24 | 0) >> 2] = $4_1;
  $1_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
  HEAP32[($2_1 + 92 | 0) >> 2] = $6_1;
  HEAP32[($2_1 + 88 | 0) >> 2] = $7_1;
  HEAP32[($2_1 + 80 | 0) >> 2] = $5_1;
  HEAP32[($2_1 + 76 | 0) >> 2] = $7_1;
  HEAP32[($2_1 + 68 | 0) >> 2] = $6_1;
  HEAP32[($2_1 + 64 | 0) >> 2] = $3_1;
  HEAP32[($2_1 + 56 | 0) >> 2] = $6_1;
  HEAP32[($2_1 + 52 | 0) >> 2] = $7_1;
  HEAP32[($2_1 + 44 | 0) >> 2] = $5_1;
  HEAP32[($2_1 + 40 | 0) >> 2] = $3_1;
  HEAP32[($2_1 + 84 | 0) >> 2] = $1_1;
  HEAP32[($2_1 + 72 | 0) >> 2] = $1_1;
  HEAP32[($2_1 + 60 | 0) >> 2] = $1_1;
  HEAP32[($2_1 + 48 | 0) >> 2] = $4_1;
  HEAP32[($2_1 + 36 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  $1_1 = $2030(96 | 0) | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  $3_1 = $1_1 + 96 | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = $3_1;
  $2173($1_1 | 0, $2_1 | 0, 96 | 0) | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $3_1;
  global$0 = $2_1 + 96 | 0;
 }
 
 function $534($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  var i64toi32_i32$1 = 0;
  HEAP32[$0_1 >> 2] = (global$1 + 22232 | 0) + 8 | 0;
  i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[($0_1 + 12 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
  HEAPF32[($0_1 + 16 | 0) >> 2] = $2_1;
  return $0_1 | 0;
 }
 
 function $535($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $9_1 = 0, $17_1 = 0;
  HEAP32[$0_1 >> 2] = (global$1 + 23456 | 0) + 8 | 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $9_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $9_1;
  HEAP32[($0_1 + 8 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[($0_1 + 12 | 0) >> 2] = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $17_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[($0_1 + 16 | 0) >> 2] = $17_1;
  HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 24 | 0) >> 2] = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $536($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $9_1 = 0, $17_1 = 0;
  HEAP32[$0_1 >> 2] = (global$1 + 23476 | 0) + 8 | 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $9_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $9_1;
  HEAP32[($0_1 + 8 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[($0_1 + 12 | 0) >> 2] = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $17_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[($0_1 + 16 | 0) >> 2] = $17_1;
  HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$0;
  return $0_1 | 0;
 }
 
 function $537($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = Math_fround(0), $16_1 = Math_fround(0), $28_1 = Math_fround(0);
  $2_1 = Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2]);
  $1_1 = $1_1 + 4 | 0;
  $16_1 = Math_fround($2_1 * Math_fround(HEAPF32[($1_1 + Math_imul($2_1 > Math_fround(0.0), 12) | 0) >> 2]));
  $2_1 = Math_fround(HEAPF32[($0_1 + 8 | 0) >> 2]);
  $28_1 = Math_fround($16_1 + Math_fround($2_1 * Math_fround(HEAPF32[(($1_1 + Math_imul($2_1 > Math_fround(0.0), 12) | 0) + 4 | 0) >> 2])));
  $2_1 = Math_fround(HEAPF32[($0_1 + 12 | 0) >> 2]);
  return Math_fround(Math_fround(HEAPF32[($0_1 + 16 | 0) >> 2]) + Math_fround($28_1 + Math_fround($2_1 * Math_fround(HEAPF32[(($1_1 + Math_imul($2_1 > Math_fround(0.0), 12) | 0) + 8 | 0) >> 2])))) >= Math_fround(0.0) | 0;
 }
 
 function $538($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $4_1 = 0, $11_1 = Math_fround(0), $8_1 = Math_fround(0), $10_1 = Math_fround(0), $12_1 = Math_fround(0), $9_1 = Math_fround(0), $13_1 = Math_fround(0);
  $4_1 = global$0 - 16 | 0;
  $5_1 = Math_fround(HEAPF32[$1_1 >> 2]);
  label$1 : {
   label$2 : {
    if (!$3_1) {
     break label$2
    }
    $5_1 = Math_fround(Math_fround(1.0) / $5_1);
    $6_1 = Math_fround(Math_fround(1.0) / Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]));
    $7_1 = Math_fround(Math_fround(1.0) / Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]));
    break label$1;
   }
   $6_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
   $7_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
  }
  $8_1 = Math_fround(HEAPF32[$0_1 >> 2]);
  $9_1 = Math_fround($5_1 * Math_fround(Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]) - $8_1));
  HEAPF32[($4_1 + 12 | 0) >> 2] = $9_1;
  $5_1 = Math_fround($5_1 * Math_fround(Math_fround(HEAPF32[($2_1 + 16 | 0) >> 2]) - $8_1));
  HEAPF32[($4_1 + 8 | 0) >> 2] = $5_1;
  $10_1 = Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2]);
  $8_1 = Math_fround($7_1 * Math_fround(Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]) - $10_1));
  HEAPF32[($4_1 + 4 | 0) >> 2] = $8_1;
  $7_1 = Math_fround($7_1 * Math_fround(Math_fround(HEAPF32[($2_1 + 20 | 0) >> 2]) - $10_1));
  HEAPF32[$4_1 >> 2] = $7_1;
  $1_1 = 0;
  label$3 : {
   $11_1 = Math_fround(HEAPF32[($0_1 + 8 | 0) >> 2]);
   $10_1 = Math_fround($6_1 * Math_fround(Math_fround(HEAPF32[($2_1 + 24 | 0) >> 2]) - $11_1));
   $6_1 = Math_fround($6_1 * Math_fround(Math_fround(HEAPF32[($2_1 + 12 | 0) >> 2]) - $11_1));
   $11_1 = $6_1 < $10_1 ? $10_1 : $6_1;
   $12_1 = Math_fround(HEAPF32[($8_1 < $7_1 ? $4_1 : $4_1 + 4 | 0) >> 2]);
   $13_1 = Math_fround(HEAPF32[($9_1 < $5_1 ? $4_1 + 8 | 0 : $4_1 + 12 | 0) >> 2]);
   $12_1 = $12_1 < $13_1 ? $12_1 : $13_1;
   $11_1 = $11_1 < $12_1 ? $11_1 : $12_1;
   if ($11_1 < Math_fround(0.0)) {
    break label$3
   }
   $6_1 = $10_1 < $6_1 ? $10_1 : $6_1;
   $7_1 = $7_1 < $8_1 ? $7_1 : $8_1;
   $5_1 = $5_1 < $9_1 ? $5_1 : $9_1;
   $5_1 = $5_1 < $7_1 ? $7_1 : $5_1;
   $1_1 = ($5_1 < $6_1 ? $6_1 : $5_1) <= $11_1;
  }
  return $1_1 | 0;
 }
 
 function $539($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = 0;
  label$1 : {
   if (Math_fround(HEAPF32[($0_1 + 16 | 0) >> 2]) < Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2])) {
    break label$1
   }
   if (Math_fround(HEAPF32[($0_1 + 20 | 0) >> 2]) < Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2])) {
    break label$1
   }
   if (Math_fround(HEAPF32[($0_1 + 24 | 0) >> 2]) < Math_fround(HEAPF32[($1_1 + 12 | 0) >> 2])) {
    break label$1
   }
   $2_1 = ((Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2]) > Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]) ^ -1 | 0) & (Math_fround(HEAPF32[($0_1 + 8 | 0) >> 2]) > Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]) ^ -1 | 0) | 0) & (Math_fround(HEAPF32[($0_1 + 12 | 0) >> 2]) > Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]) ^ 1 | 0) | 0;
  }
  return $2_1 | 0;
 }
 
 function $540($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = Math_fround(0), $3_1 = Math_fround(0), i64toi32_i32$1 = 0;
  i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[($0_1 + 8 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    $3_1 = Math_fround(HEAPF32[$0_1 >> 2]);
    $4_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
    if ($3_1 < $4_1) {
     break label$2
    }
    $4_1 = Math_fround(HEAPF32[($2_1 + 16 | 0) >> 2]);
    if ($3_1 > $4_1 ^ 1 | 0) {
     break label$1
    }
   }
   HEAPF32[$0_1 >> 2] = $4_1;
  }
  label$3 : {
   label$4 : {
    $3_1 = Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2]);
    $4_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
    if ($3_1 < $4_1) {
     break label$4
    }
    $4_1 = Math_fround(HEAPF32[($2_1 + 20 | 0) >> 2]);
    if ($3_1 > $4_1 ^ 1 | 0) {
     break label$3
    }
   }
   HEAPF32[($0_1 + 4 | 0) >> 2] = $4_1;
  }
  label$5 : {
   label$6 : {
    $3_1 = Math_fround(HEAPF32[($0_1 + 8 | 0) >> 2]);
    $4_1 = Math_fround(HEAPF32[($2_1 + 12 | 0) >> 2]);
    if ($3_1 < $4_1) {
     break label$6
    }
    $4_1 = Math_fround(HEAPF32[($2_1 + 24 | 0) >> 2]);
    if ($3_1 > $4_1 ^ 1 | 0) {
     break label$5
    }
   }
   HEAPF32[($0_1 + 8 | 0) >> 2] = $4_1;
  }
 }
 
 function $541($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = Math_fround(0), $2_1 = 0, $4_1 = Math_fround(0), $6_1 = Math_fround(0), $3_1 = 0, $8_1 = Math_fround(0), $7_1 = Math_fround(0), $9_1 = Math_fround(0), $62_1 = Math_fround(0), $71_1 = Math_fround(0);
  label$1 : {
   label$2 : {
    $2_1 = HEAP32[$1_1 >> 2] | 0;
    $3_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    if (($2_1 | 0) == ($3_1 | 0)) {
     break label$2
    }
    $4_1 = Math_fround(0.0);
    $5_1 = Math_fround(0.0);
    $6_1 = Math_fround(0.0);
    $1_1 = $2_1;
    label$3 : while (1) {
     $6_1 = Math_fround($6_1 + Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]));
     $4_1 = Math_fround($4_1 + Math_fround(HEAPF32[($1_1 + 12 | 0) >> 2]));
     $5_1 = Math_fround($5_1 + Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]));
     $1_1 = $1_1 + 20 | 0;
     if (($1_1 | 0) != ($3_1 | 0)) {
      continue label$3
     }
     break label$3;
    };
    $7_1 = Math_fround((($3_1 - $2_1 | 0 | 0) / (20 | 0) | 0) >>> 0);
    $8_1 = Math_fround($4_1 / $7_1);
    $9_1 = Math_fround($5_1 / $7_1);
    $6_1 = Math_fround($6_1 / $7_1);
    $4_1 = Math_fround(0.0);
    if (($3_1 | 0) == ($2_1 | 0)) {
     break label$1
    }
    label$4 : while (1) {
     $5_1 = Math_fround(Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]) - $6_1);
     $62_1 = Math_fround($5_1 * $5_1);
     $5_1 = Math_fround(Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]) - $9_1);
     $71_1 = Math_fround($62_1 + Math_fround($5_1 * $5_1));
     $5_1 = Math_fround(Math_fround(HEAPF32[($2_1 + 12 | 0) >> 2]) - $8_1);
     $5_1 = Math_fround(Math_fround(HEAPF32[($2_1 + 16 | 0) >> 2]) + Math_fround(Math_sqrt(Math_fround($71_1 + Math_fround($5_1 * $5_1)))));
     $4_1 = $5_1 > $4_1 ? $5_1 : $4_1;
     $2_1 = $2_1 + 20 | 0;
     if (($2_1 | 0) != ($3_1 | 0)) {
      continue label$4
     }
     break label$1;
    };
   }
   $4_1 = Math_fround(0.0);
   $8_1 = Math_fround(Math_fround(0.0) / Math_fround((($3_1 - $2_1 | 0 | 0) / (20 | 0) | 0) >>> 0));
   $9_1 = $8_1;
   $6_1 = $8_1;
  }
  HEAPF32[($0_1 + 16 | 0) >> 2] = $4_1;
  HEAPF32[($0_1 + 4 | 0) >> 2] = $6_1;
  HEAPF32[($0_1 + 12 | 0) >> 2] = $8_1;
  HEAPF32[($0_1 + 8 | 0) >> 2] = $9_1;
  HEAP32[$0_1 >> 2] = (global$1 + 22232 | 0) + 8 | 0;
 }
 
 function $542($0_1) {
  $0_1 = $0_1 | 0;
  $2032($0_1 | 0);
 }
 
 function $543($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), i64toi32_i32$1 = 0;
  $3_1 = Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]);
  $4_1 = Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]);
  $5_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
  HEAP32[$0_1 >> 2] = (global$1 + 22232 | 0) + 8 | 0;
  i64toi32_i32$1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[($0_1 + 12 | 0) >> 2] = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
  HEAPF32[($0_1 + 16 | 0) >> 2] = Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($5_1 * $5_1) + Math_fround($4_1 * $4_1)) + Math_fround($3_1 * $3_1))));
 }
 
 function $544($0_1) {
  $0_1 = $0_1 | 0;
  $2032($0_1 | 0);
 }
 
 function $545($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = Math_fround(0), $4_1 = Math_fround(0), i64toi32_i32$1 = 0;
  $3_1 = Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]);
  $4_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
  HEAP32[$0_1 >> 2] = (global$1 + 22232 | 0) + 8 | 0;
  i64toi32_i32$1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[($0_1 + 12 | 0) >> 2] = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
  HEAPF32[($0_1 + 16 | 0) >> 2] = Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($4_1 * $4_1) + Math_fround(0.0)) + Math_fround($3_1 * $3_1))));
 }
 
 function $546() {
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $0_1 = 0;
  $0_1 = global$1 + 68720 | 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  i64toi32_i32$1 = i64toi32_i32$1 + 12 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 32 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 44 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 40 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 52 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 60 | 0) >> 2] = 1065353216;
 }
 
 function $547() {
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $0_1 = 0;
  $0_1 = global$1 + 68784 | 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  i64toi32_i32$1 = i64toi32_i32$1 + 12 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 32 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 44 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 40 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 52 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 60 | 0) >> 2] = 1065353216;
 }
 
 function $548($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[(global$1 + 68912 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   HEAP32[((global$1 + 68912 | 0) + 4 | 0) >> 2] = $1_1;
   $2032($1_1 | 0);
  }
 }
 
 function $549($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $4_1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $2_1 = 0, $6_1 = 0, $5_1 = 0, $21_1 = 0, $7_1 = 0, $22_1 = 0, $17_1 = 0, $20$hi = 0, $22$hi = 0, $23_1 = 0, $65_1 = 0, $68$hi = 0, $70$hi = 0, $71_1 = 0;
  label$1 : {
   $2_1 = global$1 + 68912 | 0;
   $3_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
   $4_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
   if ($3_1 >>> 0 >= $4_1 >>> 0) {
    break label$1
   }
   $17_1 = $3_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    $21_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
    $21_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   }
   $20$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   $22$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $20$hi;
   i64toi32_i32$0 = $21_1;
   i64toi32_i32$2 = $22$hi;
   i64toi32_i32$3 = $0_1;
   i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
   $23_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
   i64toi32_i32$0 = $17_1;
   HEAP32[i64toi32_i32$0 >> 2] = $23_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
   HEAP32[((global$1 + 68912 | 0) + 4 | 0) >> 2] = $3_1 + 8 | 0;
   return;
  }
  label$2 : {
   label$3 : {
    $2_1 = HEAP32[(global$1 + 68912 | 0) >> 2] | 0;
    $5_1 = $3_1 - $2_1 | 0;
    $6_1 = $5_1 >> 3 | 0;
    $3_1 = $6_1 + 1 | 0;
    if ($3_1 >>> 0 >= 536870912 >>> 0) {
     break label$3
    }
    label$4 : {
     label$5 : {
      $4_1 = $4_1 - $2_1 | 0;
      $7_1 = $4_1 >> 2 | 0;
      $4_1 = ($4_1 >> 3 | 0) >>> 0 < 268435455 >>> 0 ? ($7_1 >>> 0 < $3_1 >>> 0 ? $3_1 : $7_1) : 536870911;
      if ($4_1) {
       break label$5
      }
      $3_1 = 0;
      break label$4;
     }
     if ($4_1 >>> 0 >= 536870912 >>> 0) {
      break label$2
     }
     $3_1 = $2030($4_1 << 3 | 0 | 0) | 0;
    }
    $6_1 = $3_1 + ($6_1 << 3 | 0) | 0;
    $65_1 = $6_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     $22_1 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
     $22_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    }
    $68$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $70$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $68$hi;
    i64toi32_i32$2 = $22_1;
    i64toi32_i32$1 = $70$hi;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $71_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    i64toi32_i32$2 = $65_1;
    HEAP32[i64toi32_i32$2 >> 2] = $71_1;
    HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
    $1_1 = $3_1 + ($4_1 << 3 | 0) | 0;
    $4_1 = $6_1 + 8 | 0;
    label$6 : {
     if (($5_1 | 0) < (1 | 0)) {
      break label$6
     }
     $2173($3_1 | 0, $2_1 | 0, $5_1 | 0) | 0;
    }
    $0_1 = global$1 + 68912 | 0;
    HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
    HEAP32[($0_1 + 4 | 0) >> 2] = $4_1;
    HEAP32[$0_1 >> 2] = $3_1;
    label$7 : {
     if (!$2_1) {
      break label$7
     }
     $2032($2_1 | 0);
    }
    return;
   }
   $2097(global$1 + 68912 | 0 | 0);
   abort();
  }
  $3(global$1 + 4163 | 0 | 0);
  abort();
 }
 
 function $550() {
  var $1_1 = 0, $0_1 = 0, $2_1 = 0, $4_1 = 0, $3_1 = 0, $5_1 = 0, $91_1 = 0;
  label$1 : {
   $0_1 = global$1 + 68912 | 0;
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $0_1 = HEAP32[$0_1 >> 2] | 0;
   if (($1_1 | 0) == ($0_1 | 0)) {
    break label$1
   }
   $2_1 = 0;
   $1_1 = $0_1;
   label$2 : while (1) {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        $3_1 = $2_1 << 3 | 0;
        $1_1 = $1_1 + $3_1 | 0;
        switch (HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) {
        case 0:
         break label$4;
        case 2:
         break label$5;
        case 1:
         break label$6;
        default:
         break label$3;
        };
       }
       $1_1 = HEAP32[$1_1 >> 2] | 0;
       FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($1_1);
       break label$3;
      }
      $1_1 = HEAP32[$1_1 >> 2] | 0;
      FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($1_1);
      $0_1 = global$1 + 68912 | 0;
      $4_1 = HEAP32[$0_1 >> 2] | 0;
      $1_1 = $4_1;
      label$7 : {
       label$8 : {
        $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        if (($1_1 | 0) == ($0_1 | 0)) {
         break label$8
        }
        $5_1 = HEAP32[($4_1 + $3_1 | 0) >> 2] | 0;
        $1_1 = $4_1;
        label$9 : while (1) {
         label$10 : {
          if (($5_1 | 0) != (HEAP32[$1_1 >> 2] | 0 | 0)) {
           break label$10
          }
          if (!(HEAP32[($1_1 + 4 | 0) >> 2] | 0)) {
           break label$8
          }
         }
         $1_1 = $1_1 + 8 | 0;
         if (($1_1 | 0) != ($0_1 | 0)) {
          continue label$9
         }
         break label$7;
        };
       }
       if (($1_1 | 0) == ($0_1 | 0)) {
        break label$7
       }
       HEAP32[$1_1 >> 2] = 0;
      }
      $1_1 = HEAP32[($4_1 + $3_1 | 0) >> 2] | 0;
      if (!$1_1) {
       break label$3
      }
      FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($1_1);
      break label$3;
     }
     $1_1 = HEAP32[$1_1 >> 2] | 0;
     if (!$1_1) {
      break label$3
     }
     FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($1_1);
    }
    $2_1 = $2_1 + 1 | 0;
    $1_1 = global$1 + 68912 | 0;
    $91_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    $1_1 = HEAP32[$1_1 >> 2] | 0;
    if ($2_1 >>> 0 < (($91_1 - $1_1 | 0) >> 3 | 0) >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
  HEAP32[((global$1 + 68912 | 0) + 4 | 0) >> 2] = $1_1;
 }
 
 function $551() {
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $1_1 = 0, $0_1 = 0, $2_1 = 0;
  $0_1 = global$1;
  $1_1 = $0_1 + 68848 | 0;
  i64toi32_i32$1 = $1_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  $2_1 = $0_1 + 68912 | 0;
  HEAP32[($2_1 + 8 | 0) >> 2] = 0;
  i64toi32_i32$1 = $2_1;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1_1 + 12 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($1_1 + 20 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $1_1 + 32 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1_1 + 44 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($1_1 + 40 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $1_1 + 52 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($1_1 + 60 | 0) >> 2] = 1065353216;
  fimport$3(global$15 + 197 | 0 | 0, 0 | 0, $0_1 + 1024 | 0 | 0) | 0;
 }
 
 function $552($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  label$1 : {
   $1_1 = HEAP32[((global$1 + 68988 | 0) + 8 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   label$2 : while (1) {
    $2_1 = HEAP32[$1_1 >> 2] | 0;
    $2032($1_1 | 0);
    $1_1 = $2_1;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
  }
  $2_1 = global$1 + 68988 | 0;
  $1_1 = HEAP32[$2_1 >> 2] | 0;
  HEAP32[$2_1 >> 2] = 0;
  label$3 : {
   if (!$1_1) {
    break label$3
   }
   $2032($1_1 | 0);
  }
 }
 
 function $553($0_1) {
  $0_1 = $0_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0 | 0]($0_1);
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1);
 }
 
 function $554() {
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $1_1 = 0, $0_1 = 0, $2_1 = 0;
  $0_1 = global$1;
  $1_1 = $0_1 + 68924 | 0;
  i64toi32_i32$1 = $1_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  $2_1 = $0_1 + 68988 | 0;
  i64toi32_i32$1 = $2_1;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $1_1 + 12 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($1_1 + 20 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $1_1 + 32 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1_1 + 44 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($1_1 + 40 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $1_1 + 52 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($1_1 + 60 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $2_1 + 8 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  fimport$3(global$15 + 198 | 0 | 0, 0 | 0, $0_1 + 1024 | 0 | 0) | 0;
 }
 
 function $555($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = (global$1 + 22452 | 0) + 8 | 0;
  $2051($0_1 + 4 | 0 | 0, $1_1 | 0) | 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = -1;
  return $0_1 | 0;
 }
 
 function $556($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  fimport$52(HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0, Math_fround($1_1));
 }
 
 function $557($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  fimport$6(HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0, $1_1 | 0);
 }
 
 function $558($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  fimport$80(HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0, 1 | 0, $1_1 | 0);
 }
 
 function $559($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  fimport$81(HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0, 1 | 0, $1_1 | 0);
 }
 
 function $560($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  fimport$82(HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0, 1 | 0, $1_1 | 0);
 }
 
 function $561($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  fimport$53(HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0, 1 | 0, 0 | 0, $1_1 | 0);
 }
 
 function $562() {
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $0_1 = 0;
  $0_1 = global$1 + 69008 | 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  i64toi32_i32$1 = i64toi32_i32$1 + 12 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 32 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 44 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 40 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 52 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 60 | 0) >> 2] = 1065353216;
 }
 
 function $563($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 56 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
    break label$1
   }
   HEAP32[($0_1 + 56 | 0) >> 2] = $1_1;
   HEAP8[($0_1 + 60 | 0) >> 0] = 1;
   $2_1 = 257;
   HEAP8[($0_1 + 5 | 0) >> 0] = $2_1;
   HEAP8[($0_1 + 6 | 0) >> 0] = $2_1 >>> 8 | 0;
  }
 }
 
 function $564($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $13_1 = Math_fround(0), i64toi32_i32$2 = 0, $1_1 = 0, $17_1 = Math_fround(0), $2_1 = 0, $11_1 = Math_fround(0), $15_1 = Math_fround(0), $14_1 = Math_fround(0), $10_1 = Math_fround(0), $12_1 = Math_fround(0), $3_1 = 0, $16_1 = Math_fround(0), $4_1 = 0, $18_1 = Math_fround(0), $19_1 = Math_fround(0), $7_1 = 0, $5_1 = 0, $6_1 = 0, $8_1 = Math_fround(0), $9_1 = Math_fround(0), $54_1 = Math_fround(0), $7$hi = 0, $290_1 = 0, $293_1 = 0, $303_1 = 0, $467_1 = 0, $473_1 = 0, $478_1 = 0, $482_1 = 0, $487_1 = 0, $492_1 = 0, $497_1 = 0, $500_1 = 0, $508_1 = 0;
  $1_1 = global$0 - 128 | 0;
  global$0 = $1_1;
  label$1 : {
   if (!(HEAPU8[($0_1 + 60 | 0) >> 0] | 0)) {
    break label$1
   }
   label$2 : {
    label$3 : {
     $2_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
     if (!$2_1) {
      break label$3
     }
     $564($2_1 | 0);
     $3_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
     $564($3_1 | 0);
     $4_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
     $564($4_1 | 0);
     $8_1 = Math_fround(HEAPF32[($2_1 + 132 | 0) >> 2]);
     $9_1 = Math_fround(HEAPF32[($2_1 + 128 | 0) >> 2]);
     $10_1 = Math_fround(Math_fround(HEAPF32[($4_1 + 164 | 0) >> 2]) * Math_fround(HEAPF32[($0_1 + 176 | 0) >> 2]));
     $54_1 = $10_1;
     $11_1 = Math_fround(HEAPF32[($3_1 + 152 | 0) >> 2]);
     $12_1 = Math_fround(Math_fround(HEAPF32[($4_1 + 160 | 0) >> 2]) * Math_fround(HEAPF32[($0_1 + 172 | 0) >> 2]));
     $13_1 = Math_fround(HEAPF32[($3_1 + 140 | 0) >> 2]);
     $14_1 = Math_fround(Math_fround(HEAPF32[($4_1 + 156 | 0) >> 2]) * Math_fround(HEAPF32[($0_1 + 168 | 0) >> 2]));
     $15_1 = Math_fround(HEAPF32[($3_1 + 144 | 0) >> 2]);
     $16_1 = Math_fround(Math_fround($12_1 * $13_1) - Math_fround($14_1 * $15_1));
     $17_1 = Math_fround(HEAPF32[($3_1 + 148 | 0) >> 2]);
     $18_1 = Math_fround(Math_fround($14_1 * $17_1) - Math_fround($13_1 * $10_1));
     $10_1 = Math_fround(Math_fround($10_1 * $15_1) - Math_fround($12_1 * $17_1));
     $19_1 = Math_fround(Math_fround($11_1 * $16_1) + Math_fround(Math_fround($13_1 * $18_1) - Math_fround($15_1 * $10_1)));
     HEAPF32[($0_1 + 136 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($2_1 + 136 | 0) >> 2]) + Math_fround($54_1 + Math_fround($19_1 + $19_1)));
     $13_1 = Math_fround(Math_fround($11_1 * $18_1) + Math_fround(Math_fround($17_1 * $10_1) - Math_fround($13_1 * $16_1)));
     HEAPF32[($0_1 + 132 | 0) >> 2] = Math_fround($8_1 + Math_fround($12_1 + Math_fround($13_1 + $13_1)));
     $13_1 = Math_fround(Math_fround($11_1 * $10_1) + Math_fround(Math_fround($15_1 * $16_1) - Math_fround($17_1 * $18_1)));
     HEAPF32[($0_1 + 128 | 0) >> 2] = Math_fround($9_1 + Math_fround($14_1 + Math_fround($13_1 + $13_1)));
     $2_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
     $564($2_1 | 0);
     $13_1 = Math_fround(HEAPF32[($2_1 + 152 | 0) >> 2]);
     $15_1 = Math_fround(HEAPF32[($0_1 + 192 | 0) >> 2]);
     $17_1 = Math_fround(HEAPF32[($2_1 + 140 | 0) >> 2]);
     $10_1 = Math_fround(HEAPF32[($0_1 + 180 | 0) >> 2]);
     $11_1 = Math_fround(HEAPF32[($2_1 + 144 | 0) >> 2]);
     $12_1 = Math_fround(HEAPF32[($0_1 + 184 | 0) >> 2]);
     $14_1 = Math_fround(HEAPF32[($2_1 + 148 | 0) >> 2]);
     $16_1 = Math_fround(HEAPF32[($0_1 + 188 | 0) >> 2]);
     HEAPF32[($0_1 + 152 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($13_1 * $15_1) - Math_fround($17_1 * $10_1)) - Math_fround($11_1 * $12_1)) - Math_fround($14_1 * $16_1));
     HEAPF32[($0_1 + 148 | 0) >> 2] = Math_fround(Math_fround(Math_fround($17_1 * $12_1) + Math_fround(Math_fround($13_1 * $16_1) + Math_fround($14_1 * $15_1))) - Math_fround($11_1 * $10_1));
     HEAPF32[($0_1 + 144 | 0) >> 2] = Math_fround(Math_fround(Math_fround($14_1 * $10_1) + Math_fround(Math_fround($13_1 * $12_1) + Math_fround($11_1 * $15_1))) - Math_fround($17_1 * $16_1));
     HEAPF32[($0_1 + 140 | 0) >> 2] = Math_fround(Math_fround(Math_fround($11_1 * $16_1) + Math_fround(Math_fround($13_1 * $10_1) + Math_fround($17_1 * $15_1))) - Math_fround($14_1 * $12_1));
     $2_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
     $564($2_1 | 0);
     $13_1 = Math_fround(HEAPF32[($2_1 + 160 | 0) >> 2]);
     $15_1 = Math_fround(HEAPF32[($2_1 + 156 | 0) >> 2]);
     $17_1 = Math_fround(Math_fround(HEAPF32[($2_1 + 164 | 0) >> 2]) * Math_fround(HEAPF32[($0_1 + 204 | 0) >> 2]));
     HEAPF32[($0_1 + 164 | 0) >> 2] = $17_1;
     $13_1 = Math_fround($13_1 * Math_fround(HEAPF32[($0_1 + 200 | 0) >> 2]));
     HEAPF32[($0_1 + 160 | 0) >> 2] = $13_1;
     $15_1 = Math_fround($15_1 * Math_fround(HEAPF32[($0_1 + 196 | 0) >> 2]));
     HEAPF32[($0_1 + 156 | 0) >> 2] = $15_1;
     $2_1 = (wasm2js_scratch_store_f32($17_1), wasm2js_scratch_load_i32(2));
     $3_1 = (wasm2js_scratch_store_f32($13_1), wasm2js_scratch_load_i32(2));
     $4_1 = (wasm2js_scratch_store_f32($15_1), wasm2js_scratch_load_i32(2));
     break label$2;
    }
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$0 = HEAP32[($0_1 + 196 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($0_1 + 200 | 0) >> 2] | 0;
    $7_1 = i64toi32_i32$0;
    $7$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $0_1;
    HEAP32[($0_1 + 156 | 0) >> 2] = $7_1;
    HEAP32[($0_1 + 160 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = HEAP32[($0_1 + 168 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($0_1 + 172 | 0) >> 2] | 0;
    $290_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1;
    HEAP32[($0_1 + 128 | 0) >> 2] = $290_1;
    HEAP32[($0_1 + 132 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$0 = HEAP32[($0_1 + 180 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($0_1 + 184 | 0) >> 2] | 0;
    $293_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1;
    HEAP32[($0_1 + 140 | 0) >> 2] = $293_1;
    HEAP32[($0_1 + 144 | 0) >> 2] = i64toi32_i32$1;
    HEAP32[($0_1 + 136 | 0) >> 2] = HEAP32[($0_1 + 176 | 0) >> 2] | 0;
    i64toi32_i32$2 = $0_1 + 188 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $303_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1 + 148 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $303_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $2_1 = HEAP32[($0_1 + 204 | 0) >> 2] | 0;
    HEAP32[($0_1 + 164 | 0) >> 2] = $2_1;
    $3_1 = HEAP32[($0_1 + 160 | 0) >> 2] | 0;
    i64toi32_i32$0 = $7$hi;
    $4_1 = $7_1;
   }
   HEAP32[($0_1 + 64 | 0) >> 2] = $4_1;
   i64toi32_i32$1 = $0_1 + 68 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $0_1 + 76 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $4_1 = $0_1 + 88 | 0;
   i64toi32_i32$1 = $4_1;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($0_1 + 84 | 0) >> 2] = $3_1;
   $3_1 = $0_1 + 96 | 0;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $0_1 + 108 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $5_1 = $0_1 + 104 | 0;
   HEAP32[$5_1 >> 2] = $2_1;
   $2_1 = $0_1 + 116 | 0;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($0_1 + 124 | 0) >> 2] = 1065353216;
   $10_1 = Math_fround(HEAPF32[($0_1 + 152 | 0) >> 2]);
   $13_1 = Math_fround(HEAPF32[($0_1 + 148 | 0) >> 2]);
   $15_1 = Math_fround(HEAPF32[($0_1 + 144 | 0) >> 2]);
   $17_1 = Math_fround(HEAPF32[($0_1 + 140 | 0) >> 2]);
   i64toi32_i32$1 = $1_1 + 44 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($1_1 + 28 | 0) >> 2] = 0;
   i64toi32_i32$1 = $1_1 + 52 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($1_1 + 60 | 0) >> 2] = 1065353216;
   $11_1 = Math_fround($15_1 * $13_1);
   $12_1 = Math_fround($17_1 * $10_1);
   $14_1 = Math_fround($11_1 - $12_1);
   HEAPF32[($1_1 + 36 | 0) >> 2] = Math_fround($14_1 + $14_1);
   $11_1 = Math_fround($11_1 + $12_1);
   HEAPF32[($1_1 + 24 | 0) >> 2] = Math_fround($11_1 + $11_1);
   $11_1 = Math_fround($17_1 * $17_1);
   $12_1 = Math_fround($15_1 * $15_1);
   $14_1 = Math_fround($11_1 + $12_1);
   HEAPF32[($1_1 + 40 | 0) >> 2] = Math_fround(Math_fround(1.0) - Math_fround($14_1 + $14_1));
   $14_1 = Math_fround($13_1 * $13_1);
   $11_1 = Math_fround($11_1 + $14_1);
   HEAPF32[($1_1 + 20 | 0) >> 2] = Math_fround(Math_fround(1.0) - Math_fround($11_1 + $11_1));
   HEAP32[($1_1 + 12 | 0) >> 2] = 0;
   $11_1 = Math_fround($17_1 * $13_1);
   $16_1 = Math_fround($15_1 * $10_1);
   $18_1 = Math_fround($11_1 + $16_1);
   HEAPF32[($1_1 + 32 | 0) >> 2] = Math_fround($18_1 + $18_1);
   $15_1 = Math_fround($17_1 * $15_1);
   $13_1 = Math_fround($13_1 * $10_1);
   $17_1 = Math_fround($15_1 - $13_1);
   HEAPF32[($1_1 + 16 | 0) >> 2] = Math_fround($17_1 + $17_1);
   $17_1 = Math_fround($11_1 - $16_1);
   HEAPF32[($1_1 + 8 | 0) >> 2] = Math_fround($17_1 + $17_1);
   $13_1 = Math_fround($15_1 + $13_1);
   HEAPF32[($1_1 + 4 | 0) >> 2] = Math_fround($13_1 + $13_1);
   $13_1 = Math_fround($12_1 + $14_1);
   HEAPF32[$1_1 >> 2] = Math_fround(Math_fround(1.0) - Math_fround($13_1 + $13_1));
   $449($1_1 + 64 | 0 | 0, $1_1 | 0, $0_1 + 64 | 0 | 0);
   i64toi32_i32$2 = $1_1 + 120 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $467_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1 + 120 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $467_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   $6_1 = $0_1 + 112 | 0;
   i64toi32_i32$2 = $1_1 + 112 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $473_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $6_1;
   HEAP32[i64toi32_i32$1 >> 2] = $473_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = ($1_1 + 64 | 0) + 40 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $478_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $5_1;
   HEAP32[i64toi32_i32$0 >> 2] = $478_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $1_1 + 96 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $482_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $3_1;
   HEAP32[i64toi32_i32$1 >> 2] = $482_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = ($1_1 + 64 | 0) + 24 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $487_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $4_1;
   HEAP32[i64toi32_i32$0 >> 2] = $487_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $1_1 + 80 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $492_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1 + 80 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $492_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $1_1 + 72 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $497_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1 + 72 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $497_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = HEAP32[($1_1 + 64 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($1_1 + 68 | 0) >> 2] | 0;
   $500_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1;
   HEAP32[($0_1 + 64 | 0) >> 2] = $500_1;
   HEAP32[($0_1 + 68 | 0) >> 2] = i64toi32_i32$0;
   HEAP8[($0_1 + 60 | 0) >> 0] = 0;
   HEAP32[$6_1 >> 2] = HEAP32[($0_1 + 128 | 0) >> 2] | 0;
   i64toi32_i32$2 = $0_1 + 132 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $508_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $2_1;
   HEAP32[i64toi32_i32$0 >> 2] = $508_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  }
  global$0 = $1_1 + 128 | 0;
 }
 
 function $565($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $1_1 = 0, $14_1 = 0, $19_1 = 0, $24_1 = 0, $29_1 = 0, $34_1 = 0, $39_1 = 0, $44_1 = 0, $49_1 = 0;
  $515($0_1 | 0) | 0;
  HEAP8[($0_1 + 60 | 0) >> 0] = 0;
  $1_1 = global$1;
  HEAP32[$0_1 >> 2] = ($1_1 + 23520 | 0) + 8 | 0;
  $1_1 = $1_1 + 69072 | 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $14_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] = $14_1;
  HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $19_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + 72 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $19_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $1_1 + 16 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $24_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1 + 80 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $24_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1 + 24 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $29_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + 88 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $29_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $1_1 + 32 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $34_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1 + 96 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $34_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1 + 40 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $39_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + 104 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $39_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $1_1 + 48 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $44_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1 + 112 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $44_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1 + 56 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $49_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + 120 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $49_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 128 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 132 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 136 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 144 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 168 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 172 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 160 | 0;
  i64toi32_i32$0 = 1065353216;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 152 | 0;
  i64toi32_i32$0 = 1065353216;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 176 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 184 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 200 | 0;
  i64toi32_i32$0 = 1065353216;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 192 | 0;
  i64toi32_i32$0 = 1065353216;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  return $0_1 | 0;
 }
 
 function $566($0_1) {
  $0_1 = $0_1 | 0;
  $2032($0_1 | 0);
 }
 
 function $567() {
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $0_1 = 0;
  $0_1 = global$1 + 69072 | 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  i64toi32_i32$1 = i64toi32_i32$1 + 12 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 32 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 44 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 40 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 52 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 60 | 0) >> 2] = 1065353216;
 }
 
 function $568($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, $5$hi = 0, $6$hi = 0, $5_1 = 0, $7$hi = 0, $6_1 = 0, $8$hi = 0, $8_1 = 0, $7_1 = 0, $9$hi = 0, $9_1 = 0, $10$hi = 0, $4_1 = 0, $3_1 = 0, $10_1 = 0, $2_1 = 0, $28_1 = 0, $28$hi = 0, $30_1 = 0, $30$hi = 0, $40_1 = 0, $40$hi = 0, $43$hi = 0, $47_1 = 0, $47$hi = 0, $50_1 = 0, $50$hi = 0, $79_1 = 0, $79$hi = 0, $84_1 = 0, $84$hi = 0, $90_1 = 0, $90$hi = 0, $95_1 = 0, $95$hi = 0, $98_1 = 0, $98$hi = 0, $101$hi = 0, $108_1 = 0, $108$hi = 0, $114_1 = 0, $114$hi = 0, $117_1 = 0, $117$hi = 0, $119$hi = 0, $125_1 = 0, $125$hi = 0, $133_1 = 0, $133$hi = 0, $135$hi = 0, $140_1 = 0, $140$hi = 0, $148_1 = 0, $148$hi = 0, $150$hi = 0, $155_1 = 0, $155$hi = 0, $163_1 = 0, $163$hi = 0, $165$hi = 0, $170_1 = 0, $170$hi = 0, $174$hi = 0, $177_1 = 0, $177$hi = 0, $179$hi = 0, $184_1 = 0, $184$hi = 0, $190_1 = 0, $190$hi = 0, $192_1 = 0, $192$hi = 0, $193_1 = 0, $193$hi = 0, $195$hi = 0, $85_1 = 0, $198_1 = 0, $198$hi = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  i64toi32_i32$0 = 908535328;
  $5_1 = 993404721;
  $5$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 640495651;
  $6_1 = 740699439;
  $6$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 825044775;
  $7_1 = 842082103;
  $7$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 775628071;
  $8_1 = 740765731;
  $8$hi = i64toi32_i32$0;
  label$1 : {
   $3_1 = $1_1 & -8 | 0;
   if (!$3_1) {
    break label$1
   }
   $4_1 = 0;
   label$2 : while (1) {
    i64toi32_i32$2 = $0_1 + $4_1 | 0;
    i64toi32_i32$0 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    $9_1 = i64toi32_i32$0;
    $9$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $5$hi;
    i64toi32_i32$1 = $9$hi;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$0 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
    $5_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
    $5$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $8$hi;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$2 = $8$hi;
    i64toi32_i32$3 = $8_1;
    i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $8_1 = i64toi32_i32$4;
    $8$hi = i64toi32_i32$5;
    $28_1 = i64toi32_i32$4;
    $28$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $6$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$1 = __wasm_rotl_i64($6_1 | 0, i64toi32_i32$5 | 0, 13 | 0, i64toi32_i32$1 | 0) | 0;
    i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
    $30_1 = i64toi32_i32$1;
    $30$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $6$hi;
    i64toi32_i32$5 = $7$hi;
    i64toi32_i32$5 = $6$hi;
    i64toi32_i32$0 = $6_1;
    i64toi32_i32$1 = $7$hi;
    i64toi32_i32$3 = $7_1;
    i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $7_1 = i64toi32_i32$2;
    $7$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $30$hi;
    i64toi32_i32$5 = $30_1;
    i64toi32_i32$0 = $7$hi;
    i64toi32_i32$3 = i64toi32_i32$2;
    i64toi32_i32$0 = i64toi32_i32$4 ^ i64toi32_i32$0 | 0;
    $6_1 = i64toi32_i32$5 ^ i64toi32_i32$2 | 0;
    $6$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $28$hi;
    i64toi32_i32$4 = $28_1;
    i64toi32_i32$5 = $6$hi;
    i64toi32_i32$3 = $6_1;
    i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
    }
    $10_1 = i64toi32_i32$1;
    $10$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $6$hi;
    i64toi32_i32$4 = 0;
    i64toi32_i32$4 = __wasm_rotl_i64($6_1 | 0, i64toi32_i32$2 | 0, 17 | 0, i64toi32_i32$4 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $40_1 = i64toi32_i32$4;
    $40$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $10$hi;
    i64toi32_i32$0 = i64toi32_i32$1;
    i64toi32_i32$4 = $40$hi;
    i64toi32_i32$3 = $40_1;
    i64toi32_i32$4 = i64toi32_i32$2 ^ i64toi32_i32$4 | 0;
    $6_1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
    $6$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $5$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$0 = __wasm_rotl_i64($5_1 | 0, i64toi32_i32$4 | 0, 16 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
    $43$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $8$hi;
    i64toi32_i32$4 = $43$hi;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = $8$hi;
    i64toi32_i32$3 = $8_1;
    i64toi32_i32$0 = i64toi32_i32$4 ^ i64toi32_i32$0 | 0;
    $5_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
    $5$hi = i64toi32_i32$0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$2 = __wasm_rotl_i64($5_1 | 0, i64toi32_i32$0 | 0, 21 | 0, i64toi32_i32$2 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $47_1 = i64toi32_i32$2;
    $47$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$0 = $7$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$2 = __wasm_rotl_i64($7_1 | 0, i64toi32_i32$0 | 0, 32 | 0, i64toi32_i32$2 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $50_1 = i64toi32_i32$2;
    $50$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$4 = $5_1;
    i64toi32_i32$2 = $50$hi;
    i64toi32_i32$3 = $50_1;
    i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
    i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $7_1 = i64toi32_i32$5;
    $7$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $47$hi;
    i64toi32_i32$0 = $47_1;
    i64toi32_i32$4 = $7$hi;
    i64toi32_i32$3 = i64toi32_i32$5;
    i64toi32_i32$4 = i64toi32_i32$1 ^ i64toi32_i32$4 | 0;
    $5_1 = i64toi32_i32$0 ^ i64toi32_i32$5 | 0;
    $5$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $10$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$0 = __wasm_rotl_i64($10_1 | 0, i64toi32_i32$4 | 0, 32 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
    $8_1 = i64toi32_i32$0;
    $8$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $7$hi;
    i64toi32_i32$4 = $9$hi;
    i64toi32_i32$4 = $7$hi;
    i64toi32_i32$1 = i64toi32_i32$5;
    i64toi32_i32$0 = $9$hi;
    i64toi32_i32$3 = $9_1;
    i64toi32_i32$0 = i64toi32_i32$4 ^ i64toi32_i32$0 | 0;
    $7_1 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
    $7$hi = i64toi32_i32$0;
    $4_1 = $4_1 + 8 | 0;
    if ($4_1 >>> 0 < $3_1 >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
  i64toi32_i32$1 = $2_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  $2173(i64toi32_i32$1 + 8 | 0 | 0, $0_1 + $3_1 | 0 | 0, $1_1 & 7 | 0 | 0) | 0;
  HEAP8[(i64toi32_i32$1 + 15 | 0) >> 0] = $1_1;
  i64toi32_i32$4 = i64toi32_i32$1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] | 0;
  $9_1 = i64toi32_i32$0;
  $9$hi = i64toi32_i32$1;
  global$0 = i64toi32_i32$4 + 16 | 0;
  $79_1 = i64toi32_i32$0;
  $79$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $5$hi;
  i64toi32_i32$1 = $9$hi;
  i64toi32_i32$4 = i64toi32_i32$0;
  i64toi32_i32$0 = $5$hi;
  i64toi32_i32$3 = $5_1;
  i64toi32_i32$0 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
  $5_1 = i64toi32_i32$4 ^ i64toi32_i32$3 | 0;
  $5$hi = i64toi32_i32$0;
  i64toi32_i32$4 = 0;
  i64toi32_i32$4 = __wasm_rotl_i64($5_1 | 0, i64toi32_i32$0 | 0, 16 | 0, i64toi32_i32$4 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $84_1 = i64toi32_i32$4;
  $84$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $5$hi;
  i64toi32_i32$0 = $8$hi;
  i64toi32_i32$0 = $5$hi;
  i64toi32_i32$1 = $5_1;
  i64toi32_i32$4 = $8$hi;
  i64toi32_i32$3 = $8_1;
  i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $5_1 = i64toi32_i32$2;
  $5$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $84$hi;
  i64toi32_i32$0 = $84_1;
  i64toi32_i32$1 = $5$hi;
  i64toi32_i32$3 = i64toi32_i32$2;
  i64toi32_i32$1 = i64toi32_i32$5 ^ i64toi32_i32$1 | 0;
  $8_1 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
  $8$hi = i64toi32_i32$1;
  $90_1 = $8_1;
  $90$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $6$hi;
  i64toi32_i32$1 = $7$hi;
  i64toi32_i32$1 = $6$hi;
  i64toi32_i32$5 = $6_1;
  i64toi32_i32$0 = $7$hi;
  i64toi32_i32$3 = $7_1;
  i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
  i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
  }
  $7_1 = i64toi32_i32$4;
  $7$hi = i64toi32_i32$2;
  i64toi32_i32$5 = 0;
  i64toi32_i32$5 = __wasm_rotl_i64(i64toi32_i32$4 | 0, i64toi32_i32$2 | 0, 32 | 0, i64toi32_i32$5 | 0) | 0;
  i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
  $95_1 = i64toi32_i32$5;
  $95$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $90$hi;
  i64toi32_i32$1 = $90_1;
  i64toi32_i32$5 = $95$hi;
  i64toi32_i32$3 = $95_1;
  i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
  if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  $10_1 = i64toi32_i32$0;
  $10$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $79$hi;
  i64toi32_i32$2 = $79_1;
  i64toi32_i32$1 = $10$hi;
  i64toi32_i32$3 = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$4 ^ i64toi32_i32$1 | 0;
  $98_1 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
  $98$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $5$hi;
  i64toi32_i32$1 = $6$hi;
  i64toi32_i32$2 = 0;
  i64toi32_i32$2 = __wasm_rotl_i64($6_1 | 0, i64toi32_i32$1 | 0, 13 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $101$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $7$hi;
  i64toi32_i32$1 = $101$hi;
  i64toi32_i32$4 = i64toi32_i32$2;
  i64toi32_i32$2 = $7$hi;
  i64toi32_i32$3 = $7_1;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  $6_1 = i64toi32_i32$4 ^ i64toi32_i32$3 | 0;
  $6$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $5$hi;
  i64toi32_i32$1 = $5_1;
  i64toi32_i32$4 = $6$hi;
  i64toi32_i32$3 = $6_1;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
  i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
  if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
  }
  $5_1 = i64toi32_i32$5;
  $5$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$1 = 0;
  i64toi32_i32$1 = __wasm_rotl_i64($6_1 | 0, i64toi32_i32$0 | 0, 17 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $108_1 = i64toi32_i32$1;
  $108$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $5$hi;
  i64toi32_i32$2 = i64toi32_i32$5;
  i64toi32_i32$1 = $108$hi;
  i64toi32_i32$3 = $108_1;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
  $6_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $6$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $98$hi;
  i64toi32_i32$0 = $98_1;
  i64toi32_i32$2 = $6$hi;
  i64toi32_i32$3 = $6_1;
  i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $7_1 = i64toi32_i32$4;
  $7$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $6$hi;
  i64toi32_i32$0 = 0;
  i64toi32_i32$0 = __wasm_rotl_i64($6_1 | 0, i64toi32_i32$5 | 0, 13 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
  $114_1 = i64toi32_i32$0;
  $114$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $7$hi;
  i64toi32_i32$1 = i64toi32_i32$4;
  i64toi32_i32$0 = $114$hi;
  i64toi32_i32$3 = $114_1;
  i64toi32_i32$0 = i64toi32_i32$5 ^ i64toi32_i32$0 | 0;
  $6_1 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  $6$hi = i64toi32_i32$0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$1 = __wasm_rotl_i64($6_1 | 0, i64toi32_i32$0 | 0, 17 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $117_1 = i64toi32_i32$1;
  $117$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $8$hi;
  i64toi32_i32$1 = 0;
  i64toi32_i32$1 = __wasm_rotl_i64($8_1 | 0, i64toi32_i32$0 | 0, 21 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $119$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $10$hi;
  i64toi32_i32$0 = $119$hi;
  i64toi32_i32$5 = i64toi32_i32$1;
  i64toi32_i32$1 = $10$hi;
  i64toi32_i32$3 = $10_1;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
  $8_1 = i64toi32_i32$5 ^ i64toi32_i32$3 | 0;
  $8$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $5$hi;
  i64toi32_i32$5 = 0;
  i64toi32_i32$5 = __wasm_rotl_i64($5_1 | 0, i64toi32_i32$1 | 0, 32 | 0, i64toi32_i32$5 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$0 = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  i64toi32_i32$3 = 255;
  i64toi32_i32$5 = i64toi32_i32$1 ^ i64toi32_i32$5 | 0;
  $125_1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  $125$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $8$hi;
  i64toi32_i32$1 = $8_1;
  i64toi32_i32$0 = $125$hi;
  i64toi32_i32$3 = $125_1;
  i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  $5_1 = i64toi32_i32$2;
  $5$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $6$hi;
  i64toi32_i32$4 = $5$hi;
  i64toi32_i32$5 = i64toi32_i32$2;
  i64toi32_i32$1 = $6$hi;
  i64toi32_i32$3 = $6_1;
  i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
  }
  $6_1 = i64toi32_i32$0;
  $6$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $117$hi;
  i64toi32_i32$4 = $117_1;
  i64toi32_i32$5 = $6$hi;
  i64toi32_i32$3 = i64toi32_i32$0;
  i64toi32_i32$5 = i64toi32_i32$2 ^ i64toi32_i32$5 | 0;
  $9_1 = i64toi32_i32$4 ^ i64toi32_i32$0 | 0;
  $9$hi = i64toi32_i32$5;
  i64toi32_i32$4 = 0;
  i64toi32_i32$4 = __wasm_rotl_i64($9_1 | 0, i64toi32_i32$5 | 0, 13 | 0, i64toi32_i32$4 | 0) | 0;
  i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
  $133_1 = i64toi32_i32$4;
  $133$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $8$hi;
  i64toi32_i32$4 = 0;
  i64toi32_i32$4 = __wasm_rotl_i64($8_1 | 0, i64toi32_i32$5 | 0, 16 | 0, i64toi32_i32$4 | 0) | 0;
  i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
  $135$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $5$hi;
  i64toi32_i32$5 = $135$hi;
  i64toi32_i32$2 = i64toi32_i32$4;
  i64toi32_i32$4 = $5$hi;
  i64toi32_i32$3 = $5_1;
  i64toi32_i32$4 = i64toi32_i32$5 ^ i64toi32_i32$4 | 0;
  $5_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $5$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $7$hi;
  i64toi32_i32$2 = 0;
  i64toi32_i32$2 = __wasm_rotl_i64($7_1 | 0, i64toi32_i32$4 | 0, 32 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $140_1 = i64toi32_i32$2;
  $140$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $5$hi;
  i64toi32_i32$5 = $5_1;
  i64toi32_i32$2 = $140$hi;
  i64toi32_i32$3 = $140_1;
  i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
  i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
  }
  $7_1 = i64toi32_i32$1;
  $7$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $9$hi;
  i64toi32_i32$0 = $7$hi;
  i64toi32_i32$4 = i64toi32_i32$1;
  i64toi32_i32$5 = $9$hi;
  i64toi32_i32$3 = $9_1;
  i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
  i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
  }
  $8_1 = i64toi32_i32$2;
  $8$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $133$hi;
  i64toi32_i32$0 = $133_1;
  i64toi32_i32$4 = $8$hi;
  i64toi32_i32$3 = i64toi32_i32$2;
  i64toi32_i32$4 = i64toi32_i32$1 ^ i64toi32_i32$4 | 0;
  $9_1 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
  $9$hi = i64toi32_i32$4;
  i64toi32_i32$0 = 0;
  i64toi32_i32$0 = __wasm_rotl_i64($9_1 | 0, i64toi32_i32$4 | 0, 17 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $148_1 = i64toi32_i32$0;
  $148$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $5$hi;
  i64toi32_i32$0 = 0;
  i64toi32_i32$0 = __wasm_rotl_i64($5_1 | 0, i64toi32_i32$4 | 0, 21 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $150$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $7$hi;
  i64toi32_i32$4 = $150$hi;
  i64toi32_i32$1 = i64toi32_i32$0;
  i64toi32_i32$0 = $7$hi;
  i64toi32_i32$3 = $7_1;
  i64toi32_i32$0 = i64toi32_i32$4 ^ i64toi32_i32$0 | 0;
  $5_1 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  $5$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$1 = 0;
  i64toi32_i32$1 = __wasm_rotl_i64($6_1 | 0, i64toi32_i32$0 | 0, 32 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $155_1 = i64toi32_i32$1;
  $155$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $5$hi;
  i64toi32_i32$4 = $5_1;
  i64toi32_i32$1 = $155$hi;
  i64toi32_i32$3 = $155_1;
  i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
  i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
  }
  $6_1 = i64toi32_i32$5;
  $6$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $9$hi;
  i64toi32_i32$2 = $6$hi;
  i64toi32_i32$0 = i64toi32_i32$5;
  i64toi32_i32$4 = $9$hi;
  i64toi32_i32$3 = $9_1;
  i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
  if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $7_1 = i64toi32_i32$1;
  $7$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $148$hi;
  i64toi32_i32$2 = $148_1;
  i64toi32_i32$0 = $7$hi;
  i64toi32_i32$3 = i64toi32_i32$1;
  i64toi32_i32$0 = i64toi32_i32$5 ^ i64toi32_i32$0 | 0;
  $9_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
  $9$hi = i64toi32_i32$0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$2 = __wasm_rotl_i64($9_1 | 0, i64toi32_i32$0 | 0, 13 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $163_1 = i64toi32_i32$2;
  $163$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $5$hi;
  i64toi32_i32$2 = 0;
  i64toi32_i32$2 = __wasm_rotl_i64($5_1 | 0, i64toi32_i32$0 | 0, 16 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $165$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$0 = $165$hi;
  i64toi32_i32$5 = i64toi32_i32$2;
  i64toi32_i32$2 = $6$hi;
  i64toi32_i32$3 = $6_1;
  i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
  $6_1 = i64toi32_i32$5 ^ i64toi32_i32$3 | 0;
  $6$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $8$hi;
  i64toi32_i32$5 = 0;
  i64toi32_i32$5 = __wasm_rotl_i64($8_1 | 0, i64toi32_i32$2 | 0, 32 | 0, i64toi32_i32$5 | 0) | 0;
  i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
  $170_1 = i64toi32_i32$5;
  $170$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $6$hi;
  i64toi32_i32$0 = $6_1;
  i64toi32_i32$5 = $170$hi;
  i64toi32_i32$3 = $170_1;
  i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
  i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
  }
  $5_1 = i64toi32_i32$4;
  $5$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $9$hi;
  i64toi32_i32$1 = $5$hi;
  i64toi32_i32$2 = i64toi32_i32$4;
  i64toi32_i32$0 = $9$hi;
  i64toi32_i32$3 = $9_1;
  i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  $174$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $163$hi;
  i64toi32_i32$1 = $163_1;
  i64toi32_i32$2 = $174$hi;
  i64toi32_i32$3 = i64toi32_i32$5;
  i64toi32_i32$2 = i64toi32_i32$4 ^ i64toi32_i32$2 | 0;
  $8_1 = i64toi32_i32$1 ^ i64toi32_i32$5 | 0;
  $8$hi = i64toi32_i32$2;
  i64toi32_i32$1 = 0;
  i64toi32_i32$1 = __wasm_rotl_i64($8_1 | 0, i64toi32_i32$2 | 0, 17 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
  $177_1 = i64toi32_i32$1;
  $177$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $6$hi;
  i64toi32_i32$1 = 0;
  i64toi32_i32$1 = __wasm_rotl_i64($6_1 | 0, i64toi32_i32$2 | 0, 21 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
  $179$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $5$hi;
  i64toi32_i32$2 = $179$hi;
  i64toi32_i32$4 = i64toi32_i32$1;
  i64toi32_i32$1 = $5$hi;
  i64toi32_i32$3 = $5_1;
  i64toi32_i32$1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
  $6_1 = i64toi32_i32$4 ^ i64toi32_i32$3 | 0;
  $6$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $7$hi;
  i64toi32_i32$4 = 0;
  i64toi32_i32$4 = __wasm_rotl_i64($7_1 | 0, i64toi32_i32$1 | 0, 32 | 0, i64toi32_i32$4 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $184_1 = i64toi32_i32$4;
  $184$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $6$hi;
  i64toi32_i32$2 = $6_1;
  i64toi32_i32$4 = $184$hi;
  i64toi32_i32$3 = $184_1;
  i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
  if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $5_1 = i64toi32_i32$0;
  $5$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $8$hi;
  i64toi32_i32$5 = $5$hi;
  i64toi32_i32$1 = i64toi32_i32$0;
  i64toi32_i32$2 = $8$hi;
  i64toi32_i32$3 = $8_1;
  i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
  i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
  }
  $7_1 = i64toi32_i32$4;
  $7$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $177$hi;
  i64toi32_i32$5 = $177_1;
  i64toi32_i32$1 = $7$hi;
  i64toi32_i32$3 = i64toi32_i32$4;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
  $190_1 = i64toi32_i32$5 ^ i64toi32_i32$4 | 0;
  $190$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $7$hi;
  i64toi32_i32$5 = 0;
  i64toi32_i32$5 = __wasm_rotl_i64(i64toi32_i32$4 | 0, i64toi32_i32$1 | 0, 32 | 0, i64toi32_i32$5 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $192_1 = i64toi32_i32$5;
  $192$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $190$hi;
  i64toi32_i32$0 = $190_1;
  i64toi32_i32$5 = $192$hi;
  i64toi32_i32$3 = $192_1;
  i64toi32_i32$5 = i64toi32_i32$1 ^ i64toi32_i32$5 | 0;
  $193_1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  $193$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $6$hi;
  i64toi32_i32$0 = 0;
  i64toi32_i32$0 = __wasm_rotl_i64($6_1 | 0, i64toi32_i32$5 | 0, 16 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
  $195$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $5$hi;
  i64toi32_i32$5 = $195$hi;
  i64toi32_i32$1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5$hi;
  i64toi32_i32$3 = $5_1;
  i64toi32_i32$0 = i64toi32_i32$5 ^ i64toi32_i32$0 | 0;
  $85_1 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$1 = __wasm_rotl_i64($85_1 | 0, i64toi32_i32$0 | 0, 21 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $198_1 = i64toi32_i32$1;
  $198$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $193$hi;
  i64toi32_i32$5 = $193_1;
  i64toi32_i32$1 = $198$hi;
  i64toi32_i32$3 = $198_1;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
  i64toi32_i32$5 = i64toi32_i32$5 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$5 | 0;
 }
 
 function $569($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 0;
  return $0_1 | 0;
 }
 
 function $570($0_1, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $571($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return (HEAP32[$0_1 >> 2] | 0 | 0) == (HEAP32[$1_1 >> 2] | 0 | 0) | 0;
 }
 
 function $572($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $282($0_1 | 0) | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 1;
  $2173($0_1 + 8 | 0 | 0, $1_1 | 0, 80 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $573($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $4_1 = 0, $1_1 = 0;
  $283($0_1 | 0) | 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 1;
  i64toi32_i32$1 = i64toi32_i32$1 + 16 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 32 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 40 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 45 | 0;
  i64toi32_i32$0 = 0;
  $4_1 = 0;
  HEAP8[i64toi32_i32$1 >> 0] = $4_1;
  HEAP8[(i64toi32_i32$1 + 1 | 0) >> 0] = $4_1 >>> 8 | 0;
  HEAP8[(i64toi32_i32$1 + 2 | 0) >> 0] = $4_1 >>> 16 | 0;
  HEAP8[(i64toi32_i32$1 + 3 | 0) >> 0] = $4_1 >>> 24 | 0;
  HEAP8[(i64toi32_i32$1 + 4 | 0) >> 0] = i64toi32_i32$0;
  HEAP8[(i64toi32_i32$1 + 5 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
  HEAP8[(i64toi32_i32$1 + 6 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
  HEAP8[(i64toi32_i32$1 + 7 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 56 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 60 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[(i64toi32_i32$1 + 53 | 0) >> 0] = 1;
  i64toi32_i32$1 = i64toi32_i32$1 + 64 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 72 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 80 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 88 | 0) >> 2] = 0;
  $1_1 = global$1 + 4256 | 0;
  $534($0_1 + 92 | 0 | 0, $1_1 | 0, Math_fround(Math_fround(0.0))) | 0;
  $528($0_1 + 112 | 0 | 0, $1_1 | 0, $1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $574($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = 1;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
  HEAP8[($0_1 + 16 | 0) >> 0] = HEAPU8[($1_1 + 53 | 0) >> 0] | 0;
  HEAP8[($0_1 + 17 | 0) >> 0] = HEAPU8[($1_1 + 84 | 0) >> 0] | 0;
  return $0_1 | 0;
 }
 
 function $575($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return HEAP32[$1_1 >> 2] | 0 | 0;
 }
 
 function $576($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ((__wasm_rotl_i32(HEAP8[($1_1 + 4 | 0) >> 0] | 0 | 0, 10 | 0) | 0) ^ (HEAP8[$1_1 >> 0] | 0) | 0) ^ (__wasm_rotl_i32(HEAP8[($1_1 + 8 | 0) >> 0] | 0 | 0, 20 | 0) | 0) | 0 | 0;
 }
 
 function $577($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ((HEAP32[($1_1 + 4 | 0) >> 2] | 0) << 2 | 0) ^ (HEAP32[$1_1 >> 2] | 0) | 0 | 0;
 }
 
 function $578() {
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $0_1 = 0;
  $0_1 = global$1 + 69136 | 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  i64toi32_i32$1 = i64toi32_i32$1 + 12 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 32 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 44 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 40 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 52 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 60 | 0) >> 2] = 1065353216;
 }
 
 function $579($0_1, $1_1, $2_1) {
  $0_1 = Math_fround($0_1);
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  var $3_1 = 0;
  $3_1 = global$1 + 69200 | 0;
  HEAPF32[($3_1 + 8 | 0) >> 2] = $2_1;
  HEAPF32[($3_1 + 4 | 0) >> 2] = $1_1;
  HEAPF32[$3_1 >> 2] = $0_1;
  return $3_1 | 0;
 }
 
 function $580($0_1, $1_1, $2_1, $3_1) {
  $0_1 = Math_fround($0_1);
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  $3_1 = Math_fround($3_1);
  var $4_1 = 0;
  $4_1 = global$1 + 69216 | 0;
  HEAPF32[($4_1 + 12 | 0) >> 2] = $3_1;
  HEAPF32[($4_1 + 8 | 0) >> 2] = $2_1;
  HEAPF32[($4_1 + 4 | 0) >> 2] = $1_1;
  HEAPF32[$4_1 >> 2] = $0_1;
  return $4_1 | 0;
 }
 
 function $581($0_1) {
  $0_1 = Math_fround($0_1);
  var $1_1 = 0;
  label$1 : {
   if ((HEAPU8[(global$1 + 69236 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($2099(global$1 + 69236 | 0 | 0) | 0)) {
    break label$1
   }
   $1_1 = global$1;
   HEAPF32[($1_1 + 69232 | 0) >> 2] = $0_1;
   $2107($1_1 + 69236 | 0 | 0);
  }
  return global$1 + 69232 | 0 | 0;
 }
 
 function $582() {
  var $0_1 = 0, $1_1 = 0, $2_1 = 0;
  $0_1 = 0;
  label$1 : while (1) {
   $1_1 = global$1 + 69248 | 0;
   $2_1 = $0_1 << 2 | 0;
   HEAP8[($1_1 + $2_1 | 0) >> 0] = (($0_1 & 65535 | 0) >>> 0) % (255 >>> 0) | 0;
   HEAP8[($1_1 + ($2_1 | 1 | 0) | 0) >> 0] = (($0_1 << 1 | 0) >>> 0) % (255 >>> 0) | 0;
   HEAP8[($1_1 + ($2_1 | 2 | 0) | 0) >> 0] = (Math_imul($0_1, $0_1) >>> 0) % (255 >>> 0) | 0;
   HEAP8[($1_1 + ($2_1 | 3 | 0) | 0) >> 0] = 255;
   $0_1 = $0_1 + 1 | 0;
   if (($0_1 | 0) != (65536 | 0)) {
    continue label$1
   }
   break label$1;
  };
  return global$1 + 69248 | 0 | 0;
 }
 
 function $583($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 64 | 0;
  global$0 = $2_1;
  fimport$83($2_1 + 8 | 0 | 0);
  i64toi32_i32$1 = $2_1 + 16 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $2_1;
  i64toi32_i32$0 = 2;
  HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 40 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 1;
  HEAP32[(i64toi32_i32$1 + 44 | 0) >> 2] = 2;
  HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = i64toi32_i32$0;
  $3_1 = global$1 + 4268 | 0;
  $4_1 = fimport$84($3_1 | 0, i64toi32_i32$1 + 8 | 0 | 0) | 0;
  fimport$85($3_1 | 0, $0_1 | 0, $1_1 | 0) | 0;
  fimport$86($4_1 | 0) | 0;
  global$0 = i64toi32_i32$1 + 64 | 0;
 }
 
 function $584() {
  return 23604 | 0;
 }
 
 function $585($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $6_1 = 0, $5_1 = 0, $7_1 = 0, $8_1 = 0;
  $4_1 = HEAP32[$1_1 >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             label$12 : {
              if (!$3_1) {
               break label$12
              }
              $5_1 = HEAP32[$3_1 >> 2] | 0;
              if (!$5_1) {
               break label$12
              }
              label$13 : {
               if ($0_1) {
                break label$13
               }
               $3_1 = $2_1;
               break label$10;
              }
              HEAP32[$3_1 >> 2] = 0;
              $3_1 = $2_1;
              break label$11;
             }
             label$14 : {
              label$15 : {
               if (HEAP32[(HEAP32[(($586() | 0) + 176 | 0) >> 2] | 0) >> 2] | 0) {
                break label$15
               }
               if (!$0_1) {
                break label$14
               }
               if (!$2_1) {
                break label$1
               }
               $5_1 = $2_1;
               label$16 : {
                label$17 : while (1) {
                 $3_1 = HEAP8[$4_1 >> 0] | 0;
                 if (!$3_1) {
                  break label$16
                 }
                 HEAP32[$0_1 >> 2] = $3_1 & 57343 | 0;
                 $0_1 = $0_1 + 4 | 0;
                 $4_1 = $4_1 + 1 | 0;
                 $5_1 = $5_1 + -1 | 0;
                 if ($5_1) {
                  continue label$17
                 }
                 break label$1;
                };
               }
               HEAP32[$0_1 >> 2] = 0;
               HEAP32[$1_1 >> 2] = 0;
               return $2_1 - $5_1 | 0 | 0;
              }
              $3_1 = $2_1;
              if (!$0_1) {
               break label$9
              }
              $3_1 = $2_1;
              $6_1 = 0;
              break label$7;
             }
             return $2181($4_1 | 0) | 0 | 0;
            }
            $6_1 = 1;
            break label$7;
           }
           $6_1 = 0;
           break label$8;
          }
          $6_1 = 1;
         }
         label$18 : while (1) {
          label$19 : {
           switch ($6_1 | 0) {
           case 0:
            $6_1 = (HEAPU8[$4_1 >> 0] | 0) >>> 3 | 0;
            if (($6_1 + -16 | 0 | (($5_1 >> 26 | 0) + $6_1 | 0) | 0) >>> 0 > 7 >>> 0) {
             break label$6
            }
            $6_1 = $4_1 + 1 | 0;
            label$21 : {
             label$22 : {
              if ($5_1 & 33554432 | 0) {
               break label$22
              }
              $4_1 = $6_1;
              break label$21;
             }
             if (((HEAPU8[$6_1 >> 0] | 0) & 192 | 0 | 0) != (128 | 0)) {
              break label$6
             }
             $6_1 = $4_1 + 2 | 0;
             label$23 : {
              if ($5_1 & 524288 | 0) {
               break label$23
              }
              $4_1 = $6_1;
              break label$21;
             }
             if (((HEAPU8[$6_1 >> 0] | 0) & 192 | 0 | 0) != (128 | 0)) {
              break label$6
             }
             $4_1 = $4_1 + 3 | 0;
            }
            $3_1 = $3_1 + -1 | 0;
            $6_1 = 1;
            continue label$18;
           default:
            break label$19;
           };
          }
          label$24 : while (1) {
           label$25 : {
            $5_1 = HEAPU8[$4_1 >> 0] | 0;
            if (($5_1 + -1 | 0) >>> 0 > 126 >>> 0) {
             break label$25
            }
            if ($4_1 & 3 | 0) {
             break label$25
            }
            $5_1 = HEAP32[$4_1 >> 2] | 0;
            if (($5_1 + -16843009 | 0 | $5_1 | 0) & -2139062144 | 0) {
             break label$25
            }
            label$26 : while (1) {
             $3_1 = $3_1 + -4 | 0;
             $5_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
             $6_1 = $4_1 + 4 | 0;
             $4_1 = $6_1;
             if (!(($5_1 | ($5_1 + -16843009 | 0) | 0) & -2139062144 | 0)) {
              continue label$26
             }
             break label$26;
            };
            $4_1 = $6_1;
           }
           label$27 : {
            $6_1 = $5_1 & 255 | 0;
            if (($6_1 + -1 | 0) >>> 0 > 126 >>> 0) {
             break label$27
            }
            $3_1 = $3_1 + -1 | 0;
            $4_1 = $4_1 + 1 | 0;
            continue label$24;
           }
           break label$24;
          };
          $6_1 = $6_1 + -194 | 0;
          if ($6_1 >>> 0 > 50 >>> 0) {
           break label$5
          }
          $4_1 = $4_1 + 1 | 0;
          $5_1 = HEAP32[(($6_1 << 2 | 0) + 4288 | 0) >> 2] | 0;
          $6_1 = 0;
          continue label$18;
         };
        }
        label$28 : while (1) {
         label$29 : {
          switch ($6_1 | 0) {
          case 0:
           if (!$3_1) {
            break label$1
           }
           label$31 : {
            label$32 : while (1) {
             label$33 : {
              label$34 : {
               label$35 : {
                $6_1 = HEAPU8[$4_1 >> 0] | 0;
                $7_1 = $6_1 + -1 | 0;
                if ($7_1 >>> 0 <= 126 >>> 0) {
                 break label$35
                }
                $5_1 = $6_1;
                break label$34;
               }
               if ($4_1 & 3 | 0) {
                break label$33
               }
               if ($3_1 >>> 0 < 5 >>> 0) {
                break label$33
               }
               label$36 : {
                label$37 : while (1) {
                 $5_1 = HEAP32[$4_1 >> 2] | 0;
                 if (($5_1 + -16843009 | 0 | $5_1 | 0) & -2139062144 | 0) {
                  break label$36
                 }
                 HEAP32[$0_1 >> 2] = $5_1 & 255 | 0;
                 HEAP32[($0_1 + 4 | 0) >> 2] = HEAPU8[($4_1 + 1 | 0) >> 0] | 0;
                 HEAP32[($0_1 + 8 | 0) >> 2] = HEAPU8[($4_1 + 2 | 0) >> 0] | 0;
                 HEAP32[($0_1 + 12 | 0) >> 2] = HEAPU8[($4_1 + 3 | 0) >> 0] | 0;
                 $0_1 = $0_1 + 16 | 0;
                 $4_1 = $4_1 + 4 | 0;
                 $3_1 = $3_1 + -4 | 0;
                 if ($3_1 >>> 0 > 4 >>> 0) {
                  continue label$37
                 }
                 break label$37;
                };
                $5_1 = HEAPU8[$4_1 >> 0] | 0;
               }
               $6_1 = $5_1 & 255 | 0;
               $7_1 = $6_1 + -1 | 0;
              }
              if ($7_1 >>> 0 > 126 >>> 0) {
               break label$31
              }
             }
             HEAP32[$0_1 >> 2] = $6_1;
             $0_1 = $0_1 + 4 | 0;
             $4_1 = $4_1 + 1 | 0;
             $3_1 = $3_1 + -1 | 0;
             if (!$3_1) {
              break label$1
             }
             continue label$32;
            };
           }
           $6_1 = $6_1 + -194 | 0;
           if ($6_1 >>> 0 > 50 >>> 0) {
            break label$5
           }
           $4_1 = $4_1 + 1 | 0;
           $5_1 = HEAP32[(($6_1 << 2 | 0) + 4288 | 0) >> 2] | 0;
           $6_1 = 1;
           continue label$28;
          default:
           break label$29;
          };
         }
         $7_1 = HEAPU8[$4_1 >> 0] | 0;
         $6_1 = $7_1 >>> 3 | 0;
         if (($6_1 + -16 | 0 | ($6_1 + ($5_1 >> 26 | 0) | 0) | 0) >>> 0 > 7 >>> 0) {
          break label$6
         }
         $8_1 = $4_1 + 1 | 0;
         label$38 : {
          label$39 : {
           label$40 : {
            label$41 : {
             $6_1 = $7_1 + -128 | 0 | ($5_1 << 6 | 0) | 0;
             if (($6_1 | 0) <= (-1 | 0)) {
              break label$41
             }
             $4_1 = $8_1;
             break label$40;
            }
            $7_1 = (HEAPU8[$8_1 >> 0] | 0) + -128 | 0;
            if ($7_1 >>> 0 > 63 >>> 0) {
             break label$39
            }
            $8_1 = $4_1 + 2 | 0;
            label$42 : {
             $6_1 = $7_1 | ($6_1 << 6 | 0) | 0;
             if (($6_1 | 0) <= (-1 | 0)) {
              break label$42
             }
             $4_1 = $8_1;
             break label$40;
            }
            $7_1 = (HEAPU8[$8_1 >> 0] | 0) + -128 | 0;
            if ($7_1 >>> 0 > 63 >>> 0) {
             break label$39
            }
            $4_1 = $4_1 + 3 | 0;
            $6_1 = $7_1 | ($6_1 << 6 | 0) | 0;
           }
           HEAP32[$0_1 >> 2] = $6_1;
           $3_1 = $3_1 + -1 | 0;
           $0_1 = $0_1 + 4 | 0;
           break label$38;
          }
          HEAP32[($587() | 0) >> 2] = 25;
          $4_1 = $4_1 + -1 | 0;
          break label$3;
         }
         $6_1 = 0;
         continue label$28;
        };
       }
       $4_1 = $4_1 + -1 | 0;
       if ($5_1) {
        break label$4
       }
       $5_1 = HEAPU8[$4_1 >> 0] | 0;
      }
      if ($5_1 & 255 | 0) {
       break label$4
      }
      label$43 : {
       if (!$0_1) {
        break label$43
       }
       HEAP32[$0_1 >> 2] = 0;
       HEAP32[$1_1 >> 2] = 0;
      }
      return $2_1 - $3_1 | 0 | 0;
     }
     HEAP32[($587() | 0) >> 2] = 25;
     if (!$0_1) {
      break label$2
     }
    }
    HEAP32[$1_1 >> 2] = $4_1;
   }
   return -1 | 0;
  }
  HEAP32[$1_1 >> 2] = $4_1;
  return $2_1 | 0;
 }
 
 function $586() {
  return $584() | 0 | 0;
 }
 
 function $587() {
  return 331456 | 0;
 }
 
 function $588($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $3_1 = 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   label$2 : {
    label$3 : while (1) {
     $4_1 = HEAPU8[$0_1 >> 0] | 0;
     $5_1 = HEAPU8[$1_1 >> 0] | 0;
     if (($4_1 | 0) != ($5_1 | 0)) {
      break label$2
     }
     $1_1 = $1_1 + 1 | 0;
     $0_1 = $0_1 + 1 | 0;
     $2_1 = $2_1 + -1 | 0;
     if ($2_1) {
      continue label$3
     }
     break label$1;
    };
   }
   $3_1 = $4_1 - $5_1 | 0;
  }
  return $3_1 | 0;
 }
 
 function $589($0_1, $1_1) {
  $0_1 = Math_fround($0_1);
  $1_1 = $1_1 | 0;
  label$1 : {
   label$2 : {
    if (($1_1 | 0) < (128 | 0)) {
     break label$2
    }
    $0_1 = Math_fround($0_1 * Math_fround(1701411834604692317316873.0e14));
    label$3 : {
     if (($1_1 | 0) >= (255 | 0)) {
      break label$3
     }
     $1_1 = $1_1 + -127 | 0;
     break label$1;
    }
    $0_1 = Math_fround($0_1 * Math_fround(1701411834604692317316873.0e14));
    $1_1 = (($1_1 | 0) < (381 | 0) ? $1_1 : 381) + -254 | 0;
    break label$1;
   }
   if (($1_1 | 0) > (-127 | 0)) {
    break label$1
   }
   $0_1 = Math_fround($0_1 * Math_fround(1.1754943508222875e-38));
   label$4 : {
    if (($1_1 | 0) <= (-253 | 0)) {
     break label$4
    }
    $1_1 = $1_1 + 126 | 0;
    break label$1;
   }
   $0_1 = Math_fround($0_1 * Math_fround(1.1754943508222875e-38));
   $1_1 = (($1_1 | 0) > (-378 | 0) ? $1_1 : -378) + 252 | 0;
  }
  return Math_fround(Math_fround($0_1 * (wasm2js_scratch_store_i32(2, ($1_1 << 23 | 0) + 1065353216 | 0), wasm2js_scratch_load_f32())));
 }
 
 function $590($0_1, $1_1) {
  $0_1 = Math_fround($0_1);
  $1_1 = Math_fround($1_1);
  var $9_1 = Math_fround(0), $4_1 = 0, $2_1 = 0, $5_1 = 0, $3_1 = 0, $11_1 = Math_fround(0), $6_1 = 0, $12_1 = Math_fround(0), $10_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = Math_fround(0), $7_1 = 0, $8_1 = 0, $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $231_1 = Math_fround(0), $265_1 = Math_fround(0), $483_1 = Math_fround(0);
  $9_1 = Math_fround(1.0);
  label$1 : {
   $2_1 = (wasm2js_scratch_store_f32($0_1), wasm2js_scratch_load_i32(2));
   if (($2_1 | 0) == (1065353216 | 0)) {
    break label$1
   }
   $3_1 = (wasm2js_scratch_store_f32($1_1), wasm2js_scratch_load_i32(2));
   $4_1 = $3_1 & 2147483647 | 0;
   if (!$4_1) {
    break label$1
   }
   label$2 : {
    label$3 : {
     $5_1 = $2_1 & 2147483647 | 0;
     if ($5_1 >>> 0 > 2139095040 >>> 0) {
      break label$3
     }
     if ($4_1 >>> 0 < 2139095041 >>> 0) {
      break label$2
     }
    }
    return Math_fround(Math_fround($0_1 + $1_1));
   }
   label$4 : {
    label$5 : {
     if (($2_1 | 0) > (-1 | 0)) {
      break label$5
     }
     $6_1 = 2;
     if ($4_1 >>> 0 > 1266679807 >>> 0) {
      break label$4
     }
     if ($4_1 >>> 0 < 1065353216 >>> 0) {
      break label$5
     }
     $6_1 = 0;
     $7_1 = 150 - ($4_1 >>> 23 | 0) | 0;
     $8_1 = $4_1 >>> $7_1 | 0;
     if (($8_1 << $7_1 | 0 | 0) != ($4_1 | 0)) {
      break label$4
     }
     $6_1 = 2 - ($8_1 & 1 | 0) | 0;
     break label$4;
    }
    $6_1 = 0;
   }
   label$6 : {
    label$7 : {
     if (($4_1 | 0) == (1065353216 | 0)) {
      break label$7
     }
     if (($4_1 | 0) != (2139095040 | 0)) {
      break label$6
     }
     if (($5_1 | 0) == (1065353216 | 0)) {
      break label$1
     }
     label$8 : {
      if ($5_1 >>> 0 < 1065353217 >>> 0) {
       break label$8
      }
      return Math_fround(($3_1 | 0) > (-1 | 0) ? $1_1 : Math_fround(0.0));
     }
     return Math_fround(($3_1 | 0) > (-1 | 0) ? Math_fround(0.0) : Math_fround(-$1_1));
    }
    return Math_fround(($3_1 | 0) > (-1 | 0) ? $0_1 : Math_fround(Math_fround(1.0) / $0_1));
   }
   label$9 : {
    if (($3_1 | 0) != (1073741824 | 0)) {
     break label$9
    }
    return Math_fround(Math_fround($0_1 * $0_1));
   }
   label$10 : {
    if (($2_1 | 0) < (0 | 0)) {
     break label$10
    }
    if (($3_1 | 0) != (1056964608 | 0)) {
     break label$10
    }
    return Math_fround(Math_fround($591(Math_fround($0_1))));
   }
   $9_1 = Math_fround($602(Math_fround($0_1)));
   label$11 : {
    label$12 : {
     if (($2_1 & 1073741823 | 0 | 0) == (1065353216 | 0)) {
      break label$12
     }
     if ($5_1) {
      break label$11
     }
    }
    $9_1 = ($3_1 | 0) < (0 | 0) ? Math_fround(Math_fround(1.0) / $9_1) : $9_1;
    if (($2_1 | 0) > (-1 | 0)) {
     break label$1
    }
    label$13 : {
     if ($6_1 | ($5_1 + -1065353216 | 0) | 0) {
      break label$13
     }
     $0_1 = Math_fround($9_1 - $9_1);
     return Math_fround(Math_fround($0_1 / $0_1));
    }
    return Math_fround(($6_1 | 0) == (1 | 0) ? Math_fround(-$9_1) : $9_1);
   }
   $10_1 = Math_fround(1.0);
   label$14 : {
    if (($2_1 | 0) > (-1 | 0)) {
     break label$14
    }
    label$15 : {
     switch ($6_1 | 0) {
     case 0:
      $0_1 = Math_fround($0_1 - $0_1);
      return Math_fround(Math_fround($0_1 / $0_1));
     case 1:
      break label$15;
     default:
      break label$14;
     };
    }
    $10_1 = Math_fround(-1.0);
   }
   label$17 : {
    label$18 : {
     if ($4_1 >>> 0 < 1291845633 >>> 0) {
      break label$18
     }
     label$19 : {
      if ($5_1 >>> 0 > 1065353207 >>> 0) {
       break label$19
      }
      return Math_fround(($3_1 | 0) < (0 | 0) ? Math_fround(Math_fround($10_1 * Math_fround(1000000015047466219876688.0e6)) * Math_fround(1000000015047466219876688.0e6)) : Math_fround(Math_fround($10_1 * Math_fround(1.0000000031710769e-30)) * Math_fround(1.0000000031710769e-30)));
     }
     label$20 : {
      if ($5_1 >>> 0 < 1065353224 >>> 0) {
       break label$20
      }
      return Math_fround(($3_1 | 0) > (0 | 0) ? Math_fround(Math_fround($10_1 * Math_fround(1000000015047466219876688.0e6)) * Math_fround(1000000015047466219876688.0e6)) : Math_fround(Math_fround($10_1 * Math_fround(1.0000000031710769e-30)) * Math_fround(1.0000000031710769e-30)));
     }
     $0_1 = Math_fround($9_1 + Math_fround(-1.0));
     $9_1 = Math_fround($0_1 * Math_fround(1.44268798828125));
     $11_1 = Math_fround(Math_fround($0_1 * Math_fround(7.052607543300837e-06)) + Math_fround(Math_fround(Math_fround($0_1 * $0_1) * Math_fround(Math_fround(.5) - Math_fround($0_1 * Math_fround(Math_fround($0_1 * Math_fround(-.25)) + Math_fround(.3333333432674408))))) * Math_fround(-1.4426950216293335)));
     $0_1 = (wasm2js_scratch_store_i32(2, (wasm2js_scratch_store_f32(Math_fround($9_1 + $11_1)), wasm2js_scratch_load_i32(2)) & -4096 | 0), wasm2js_scratch_load_f32());
     $12_1 = Math_fround($0_1 - $9_1);
     break label$17;
    }
    $4_1 = $5_1 >>> 0 < 8388608 >>> 0;
    $6_1 = $4_1 ? (wasm2js_scratch_store_f32(Math_fround($9_1 * Math_fround(16777216.0))), wasm2js_scratch_load_i32(2)) : $5_1;
    $5_1 = $6_1 & 8388607 | 0;
    $2_1 = $5_1 | 1065353216 | 0;
    $6_1 = ($4_1 ? -151 : -127) + ($6_1 >> 23 | 0) | 0;
    $4_1 = 0;
    label$21 : {
     if ($5_1 >>> 0 < 1885298 >>> 0) {
      break label$21
     }
     label$22 : {
      if ($5_1 >>> 0 >= 6140887 >>> 0) {
       break label$22
      }
      $4_1 = 1;
      break label$21;
     }
     $2_1 = $2_1 + -8388608 | 0;
     $6_1 = $6_1 + 1 | 0;
    }
    $5_1 = $4_1 << 2 | 0;
    $13_1 = Math_fround(HEAPF32[($5_1 + 4508 | 0) >> 2]);
    $11_1 = (wasm2js_scratch_store_i32(2, $2_1), wasm2js_scratch_load_f32());
    $12_1 = Math_fround(HEAPF32[($5_1 + 4492 | 0) >> 2]);
    $14_1 = Math_fround($11_1 - $12_1);
    $15_1 = Math_fround(Math_fround(1.0) / Math_fround($12_1 + $11_1));
    $9_1 = Math_fround($14_1 * $15_1);
    $0_1 = (wasm2js_scratch_store_i32(2, (wasm2js_scratch_store_f32($9_1), wasm2js_scratch_load_i32(2)) & -4096 | 0), wasm2js_scratch_load_f32());
    $231_1 = $0_1;
    $16_1 = Math_fround($0_1 * $0_1);
    $17_1 = (wasm2js_scratch_store_i32(2, ((($2_1 >> 1 | 0) & -536875008 | 0 | 536870912 | 0) + ($4_1 << 21 | 0) | 0) + 4194304 | 0), wasm2js_scratch_load_f32());
    $11_1 = Math_fround($15_1 * Math_fround(Math_fround($14_1 - Math_fround($0_1 * $17_1)) - Math_fround($0_1 * Math_fround($11_1 - Math_fround($17_1 - $12_1)))));
    $265_1 = Math_fround(Math_fround($9_1 + $0_1) * $11_1);
    $0_1 = Math_fround($9_1 * $9_1);
    $12_1 = Math_fround($265_1 + Math_fround(Math_fround($0_1 * $0_1) * Math_fround(Math_fround($0_1 * Math_fround(Math_fround($0_1 * Math_fround(Math_fround($0_1 * Math_fround(Math_fround($0_1 * Math_fround(Math_fround($0_1 * Math_fround(.20697501301765442)) + Math_fround(.23066075146198273))) + Math_fround(.2727281153202057))) + Math_fround(.3333333432674408))) + Math_fround(.4285714328289032))) + Math_fround(.6000000238418579))));
    $0_1 = (wasm2js_scratch_store_i32(2, (wasm2js_scratch_store_f32(Math_fround(Math_fround($16_1 + Math_fround(3.0)) + $12_1)), wasm2js_scratch_load_i32(2)) & -4096 | 0), wasm2js_scratch_load_f32());
    $14_1 = Math_fround($231_1 * $0_1);
    $9_1 = Math_fround(Math_fround($11_1 * $0_1) + Math_fround($9_1 * Math_fround($12_1 - Math_fround(Math_fround($0_1 + Math_fround(-3.0)) - $16_1))));
    $0_1 = (wasm2js_scratch_store_i32(2, (wasm2js_scratch_store_f32(Math_fround($14_1 + $9_1)), wasm2js_scratch_load_i32(2)) & -4096 | 0), wasm2js_scratch_load_f32());
    $12_1 = Math_fround($0_1 * Math_fround(.9619140625));
    $11_1 = Math_fround(Math_fround(HEAPF32[($5_1 + 4500 | 0) >> 2]) + Math_fround(Math_fround(Math_fround($9_1 - Math_fround($0_1 - $14_1)) * Math_fround(.9617967009544373)) + Math_fround($0_1 * Math_fround(-1.1736857413779944e-04))));
    $9_1 = Math_fround($6_1 | 0);
    $0_1 = (wasm2js_scratch_store_i32(2, (wasm2js_scratch_store_f32(Math_fround(Math_fround($13_1 + Math_fround($12_1 + $11_1)) + $9_1)), wasm2js_scratch_load_i32(2)) & -4096 | 0), wasm2js_scratch_load_f32());
    $12_1 = Math_fround(Math_fround(Math_fround($0_1 - $9_1) - $13_1) - $12_1);
   }
   label$23 : {
    $9_1 = (wasm2js_scratch_store_i32(2, $3_1 & -4096 | 0), wasm2js_scratch_load_f32());
    $13_1 = Math_fround($0_1 * $9_1);
    $0_1 = Math_fround(Math_fround(Math_fround($11_1 - $12_1) * $1_1) + Math_fround(Math_fround($1_1 - $9_1) * $0_1));
    $1_1 = Math_fround($13_1 + $0_1);
    $2_1 = (wasm2js_scratch_store_f32($1_1), wasm2js_scratch_load_i32(2));
    if (($2_1 | 0) < (1124073473 | 0)) {
     break label$23
    }
    return Math_fround(Math_fround(Math_fround($10_1 * Math_fround(1000000015047466219876688.0e6)) * Math_fround(1000000015047466219876688.0e6)));
   }
   $4_1 = 1124073472;
   label$24 : {
    label$25 : {
     label$26 : {
      if (($2_1 | 0) != (1124073472 | 0)) {
       break label$26
      }
      if (Math_fround($0_1 + Math_fround(4.299566569443414e-08)) > Math_fround($1_1 - $13_1) ^ 1 | 0) {
       break label$25
      }
      return Math_fround(Math_fround(Math_fround($10_1 * Math_fround(1000000015047466219876688.0e6)) * Math_fround(1000000015047466219876688.0e6)));
     }
     label$27 : {
      $4_1 = $2_1 & 2147483647 | 0;
      if ($4_1 >>> 0 < 1125515265 >>> 0) {
       break label$27
      }
      return Math_fround(Math_fround(Math_fround($10_1 * Math_fround(1.0000000031710769e-30)) * Math_fround(1.0000000031710769e-30)));
     }
     label$28 : {
      if (($2_1 | 0) != (-1021968384 | 0)) {
       break label$28
      }
      if ($0_1 <= Math_fround($1_1 - $13_1) ^ 1 | 0) {
       break label$28
      }
      return Math_fround(Math_fround(Math_fround($10_1 * Math_fround(1.0000000031710769e-30)) * Math_fround(1.0000000031710769e-30)));
     }
     $3_1 = 0;
     if ($4_1 >>> 0 < 1056964609 >>> 0) {
      break label$24
     }
    }
    $4_1 = (8388608 >>> (($4_1 >>> 23 | 0) + -126 | 0) | 0) + $2_1 | 0;
    $5_1 = ($4_1 >>> 23 | 0) & 255 | 0;
    $3_1 = ($4_1 & 8388607 | 0 | 8388608 | 0) >>> (150 - $5_1 | 0) | 0;
    $3_1 = ($2_1 | 0) < (0 | 0) ? 0 - $3_1 | 0 : $3_1;
    $13_1 = Math_fround($13_1 - (wasm2js_scratch_store_i32(2, (-8388608 >> ($5_1 + -127 | 0) | 0) & $4_1 | 0), wasm2js_scratch_load_f32()));
    $2_1 = (wasm2js_scratch_store_f32(Math_fround($0_1 + $13_1)), wasm2js_scratch_load_i32(2));
   }
   label$29 : {
    label$30 : {
     $1_1 = (wasm2js_scratch_store_i32(2, $2_1 & -32768 | 0), wasm2js_scratch_load_f32());
     $9_1 = Math_fround($1_1 * Math_fround(.693145751953125));
     $11_1 = Math_fround(Math_fround($1_1 * Math_fround(1.4286065379565116e-06)) + Math_fround(Math_fround($0_1 - Math_fround($1_1 - $13_1)) * Math_fround(.6931471824645996)));
     $0_1 = Math_fround($9_1 + $11_1);
     $1_1 = Math_fround($0_1 * $0_1);
     $1_1 = Math_fround($0_1 - Math_fround($1_1 * Math_fround(Math_fround($1_1 * Math_fround(Math_fround($1_1 * Math_fround(Math_fround($1_1 * Math_fround(Math_fround($1_1 * Math_fround(4.138136944220605e-08)) + Math_fround(-1.6533901998627698e-06))) + Math_fround(6.61375597701408e-05))) + Math_fround(-2.7777778450399637e-03))) + Math_fround(.1666666716337204))));
     $483_1 = Math_fround(Math_fround($0_1 * $1_1) / Math_fround($1_1 + Math_fround(-2.0)));
     $1_1 = Math_fround($11_1 - Math_fround($0_1 - $9_1));
     $0_1 = Math_fround(Math_fround($0_1 - Math_fround($483_1 - Math_fround($1_1 + Math_fround($0_1 * $1_1)))) + Math_fround(1.0));
     $2_1 = ($3_1 << 23 | 0) + (wasm2js_scratch_store_f32($0_1), wasm2js_scratch_load_i32(2)) | 0;
     if (($2_1 | 0) > (8388607 | 0)) {
      break label$30
     }
     $0_1 = Math_fround($589(Math_fround($0_1), $3_1 | 0));
     break label$29;
    }
    $0_1 = (wasm2js_scratch_store_i32(2, $2_1), wasm2js_scratch_load_f32());
   }
   $9_1 = Math_fround($10_1 * $0_1);
  }
  return Math_fround($9_1);
 }
 
 function $591($0_1) {
  $0_1 = Math_fround($0_1);
  return Math_fround(Math_fround(Math_sqrt($0_1)));
 }
 
 function $592($0_1) {
  $0_1 = Math_fround($0_1);
  var $1_1 = 0, $3_1 = 0, $4_1 = 0.0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    $2_1 = (wasm2js_scratch_store_f32($0_1), wasm2js_scratch_load_i32(2));
    $3_1 = $2_1 & 2147483647 | 0;
    if ($3_1 >>> 0 > 1061752794 >>> 0) {
     break label$2
    }
    if ($3_1 >>> 0 < 964689920 >>> 0) {
     break label$1
    }
    $0_1 = Math_fround($593(+(+$0_1)));
    break label$1;
   }
   label$3 : {
    if ($3_1 >>> 0 > 1081824209 >>> 0) {
     break label$3
    }
    $4_1 = +$0_1;
    label$4 : {
     if ($3_1 >>> 0 > 1075235811 >>> 0) {
      break label$4
     }
     label$5 : {
      if (($2_1 | 0) > (-1 | 0)) {
       break label$5
      }
      $0_1 = Math_fround(-Math_fround($595(+($4_1 + 1.5707963267948966))));
      break label$1;
     }
     $0_1 = Math_fround($595(+($4_1 + -1.5707963267948966)));
     break label$1;
    }
    $0_1 = Math_fround($593(+-((($2_1 | 0) > (-1 | 0) ? -3.141592653589793 : 3.141592653589793) + $4_1)));
    break label$1;
   }
   label$6 : {
    if ($3_1 >>> 0 > 1088565717 >>> 0) {
     break label$6
    }
    $4_1 = +$0_1;
    label$7 : {
     if ($3_1 >>> 0 > 1085271519 >>> 0) {
      break label$7
     }
     label$8 : {
      if (($2_1 | 0) > (-1 | 0)) {
       break label$8
      }
      $0_1 = Math_fround($595(+($4_1 + 4.71238898038469)));
      break label$1;
     }
     $0_1 = Math_fround(-Math_fround($595(+($4_1 + -4.71238898038469))));
     break label$1;
    }
    $0_1 = Math_fround($593(+((($2_1 | 0) > (-1 | 0) ? -6.283185307179586 : 6.283185307179586) + $4_1)));
    break label$1;
   }
   label$9 : {
    if ($3_1 >>> 0 < 2139095040 >>> 0) {
     break label$9
    }
    $0_1 = Math_fround($0_1 - $0_1);
    break label$1;
   }
   label$10 : {
    switch (($601(Math_fround($0_1), $1_1 + 8 | 0 | 0) | 0) & 3 | 0 | 0) {
    case 0:
     $0_1 = Math_fround($593(+(+HEAPF64[($1_1 + 8 | 0) >> 3])));
     break label$1;
    case 1:
     $0_1 = Math_fround($595(+(+HEAPF64[($1_1 + 8 | 0) >> 3])));
     break label$1;
    case 2:
     $0_1 = Math_fround($593(+-+HEAPF64[($1_1 + 8 | 0) >> 3]));
     break label$1;
    default:
     break label$10;
    };
   }
   $0_1 = Math_fround(-Math_fround($595(+(+HEAPF64[($1_1 + 8 | 0) >> 3]))));
  }
  global$0 = $1_1 + 16 | 0;
  return Math_fround($0_1);
 }
 
 function $593($0_1) {
  $0_1 = +$0_1;
  var $1_1 = 0.0, $2_1 = 0.0;
  $1_1 = $0_1 * $0_1;
  $2_1 = $1_1 * $0_1;
  return Math_fround(Math_fround($2_1 * ($1_1 * $1_1) * ($1_1 * 2.718311493989822e-06 + -1.9839334836096632e-04) + ($2_1 * ($1_1 * .008333329385889463 + -.16666666641626524) + $0_1)));
 }
 
 function $594($0_1) {
  $0_1 = Math_fround($0_1);
  var $4_1 = Math_fround(0), $1_1 = 0, $3_1 = 0, $2_1 = 0, $5_1 = 0.0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    $2_1 = (wasm2js_scratch_store_f32($0_1), wasm2js_scratch_load_i32(2));
    $3_1 = $2_1 & 2147483647 | 0;
    if ($3_1 >>> 0 > 1061752794 >>> 0) {
     break label$2
    }
    $4_1 = Math_fround(1.0);
    if ($3_1 >>> 0 < 964689920 >>> 0) {
     break label$1
    }
    $4_1 = Math_fround($595(+(+$0_1)));
    break label$1;
   }
   label$3 : {
    if ($3_1 >>> 0 > 1081824209 >>> 0) {
     break label$3
    }
    $5_1 = +$0_1;
    label$4 : {
     if ($3_1 >>> 0 < 1075235812 >>> 0) {
      break label$4
     }
     $4_1 = Math_fround(-Math_fround($595(+((($2_1 | 0) > (-1 | 0) ? -3.141592653589793 : 3.141592653589793) + $5_1))));
     break label$1;
    }
    label$5 : {
     if (($2_1 | 0) > (-1 | 0)) {
      break label$5
     }
     $4_1 = Math_fround($593(+($5_1 + 1.5707963267948966)));
     break label$1;
    }
    $4_1 = Math_fround($593(+(1.5707963267948966 - $5_1)));
    break label$1;
   }
   label$6 : {
    if ($3_1 >>> 0 > 1088565717 >>> 0) {
     break label$6
    }
    label$7 : {
     if ($3_1 >>> 0 < 1085271520 >>> 0) {
      break label$7
     }
     $4_1 = Math_fround($595(+((($2_1 | 0) > (-1 | 0) ? -6.283185307179586 : 6.283185307179586) + +$0_1)));
     break label$1;
    }
    label$8 : {
     if (($2_1 | 0) > (-1 | 0)) {
      break label$8
     }
     $4_1 = Math_fround($593(+(-4.71238898038469 - +$0_1)));
     break label$1;
    }
    $4_1 = Math_fround($593(+(+$0_1 + -4.71238898038469)));
    break label$1;
   }
   label$9 : {
    if ($3_1 >>> 0 < 2139095040 >>> 0) {
     break label$9
    }
    $4_1 = Math_fround($0_1 - $0_1);
    break label$1;
   }
   label$10 : {
    switch (($601(Math_fround($0_1), $1_1 + 8 | 0 | 0) | 0) & 3 | 0 | 0) {
    case 0:
     $4_1 = Math_fround($595(+(+HEAPF64[($1_1 + 8 | 0) >> 3])));
     break label$1;
    case 1:
     $4_1 = Math_fround($593(+-+HEAPF64[($1_1 + 8 | 0) >> 3]));
     break label$1;
    case 2:
     $4_1 = Math_fround(-Math_fround($595(+(+HEAPF64[($1_1 + 8 | 0) >> 3]))));
     break label$1;
    default:
     break label$10;
    };
   }
   $4_1 = Math_fround($593(+(+HEAPF64[($1_1 + 8 | 0) >> 3])));
  }
  global$0 = $1_1 + 16 | 0;
  return Math_fround($4_1);
 }
 
 function $595($0_1) {
  $0_1 = +$0_1;
  var $1_1 = 0.0;
  $0_1 = $0_1 * $0_1;
  $1_1 = $0_1 * $0_1;
  return Math_fround(Math_fround($0_1 * -.499999997251031 + 1.0 + $1_1 * .04166662332373906 + $0_1 * $1_1 * ($0_1 * 2.439044879627741e-05 + -.001388676377460993)));
 }
 
 function $596($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $22_1 = 0.0, $11_1 = 0, $6_1 = 0, $5_1 = 0, $23_1 = 0.0, $13_1 = 0, $14_1 = 0, $9_1 = 0, $20_1 = 0, $8_1 = 0, $10_1 = 0, $12_1 = 0, $18_1 = 0, $24_1 = 0.0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $7_1 = 0, $16_1 = 0, $19_1 = 0, $15_1 = 0, $17_1 = 0, $207_1 = 0, $210_1 = 0, $539_1 = 0.0, $577_1 = 0.0, $609_1 = 0, $615_1 = 0;
  $5_1 = global$0 - 560 | 0;
  global$0 = $5_1;
  $6_1 = ($2_1 + -3 | 0 | 0) / (24 | 0) | 0;
  $7_1 = ($6_1 | 0) > (0 | 0) ? $6_1 : 0;
  $8_1 = Math_imul($7_1, -24) + $2_1 | 0;
  label$1 : {
   $9_1 = HEAP32[(($4_1 << 2 | 0) + 4528 | 0) >> 2] | 0;
   $10_1 = $3_1 + -1 | 0;
   if (($9_1 + $10_1 | 0 | 0) < (0 | 0)) {
    break label$1
   }
   $11_1 = $9_1 + $3_1 | 0;
   $2_1 = $7_1 - $10_1 | 0;
   $6_1 = 0;
   label$2 : while (1) {
    label$3 : {
     label$4 : {
      if (($2_1 | 0) >= (0 | 0)) {
       break label$4
      }
      $22_1 = 0.0;
      break label$3;
     }
     $22_1 = +(HEAP32[(($2_1 << 2 | 0) + 4544 | 0) >> 2] | 0 | 0);
    }
    HEAPF64[(($5_1 + 320 | 0) + ($6_1 << 3 | 0) | 0) >> 3] = $22_1;
    $2_1 = $2_1 + 1 | 0;
    $6_1 = $6_1 + 1 | 0;
    if (($6_1 | 0) != ($11_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  $12_1 = $8_1 + -24 | 0;
  $11_1 = 0;
  $13_1 = ($9_1 | 0) > (0 | 0) ? $9_1 : 0;
  $14_1 = ($3_1 | 0) < (1 | 0);
  label$5 : while (1) {
   label$6 : {
    label$7 : {
     if (!$14_1) {
      break label$7
     }
     $22_1 = 0.0;
     break label$6;
    }
    $6_1 = $11_1 + $10_1 | 0;
    $2_1 = 0;
    $22_1 = 0.0;
    label$8 : while (1) {
     $22_1 = $22_1 + +HEAPF64[($0_1 + ($2_1 << 3 | 0) | 0) >> 3] * +HEAPF64[(($5_1 + 320 | 0) + (($6_1 - $2_1 | 0) << 3 | 0) | 0) >> 3];
     $2_1 = $2_1 + 1 | 0;
     if (($2_1 | 0) != ($3_1 | 0)) {
      continue label$8
     }
     break label$8;
    };
   }
   HEAPF64[($5_1 + ($11_1 << 3 | 0) | 0) >> 3] = $22_1;
   $2_1 = ($11_1 | 0) == ($13_1 | 0);
   $11_1 = $11_1 + 1 | 0;
   if (!$2_1) {
    continue label$5
   }
   break label$5;
  };
  $15_1 = 47 - $8_1 | 0;
  $16_1 = 48 - $8_1 | 0;
  $17_1 = $8_1 + -25 | 0;
  $11_1 = $9_1;
  label$9 : {
   label$10 : while (1) {
    $22_1 = +HEAPF64[($5_1 + ($11_1 << 3 | 0) | 0) >> 3];
    $2_1 = 0;
    $6_1 = $11_1;
    label$11 : {
     $10_1 = ($11_1 | 0) < (1 | 0);
     if ($10_1) {
      break label$11
     }
     label$12 : while (1) {
      $13_1 = $2_1 << 2 | 0;
      label$13 : {
       label$14 : {
        $23_1 = $22_1 * 5.9604644775390625e-08;
        if (!(Math_abs($23_1) < 2147483648.0)) {
         break label$14
        }
        $14_1 = ~~$23_1;
        break label$13;
       }
       $14_1 = -2147483648;
      }
      $13_1 = ($5_1 + 480 | 0) + $13_1 | 0;
      label$15 : {
       label$16 : {
        $23_1 = +($14_1 | 0);
        $22_1 = $22_1 + $23_1 * -16777216.0;
        if (!(Math_abs($22_1) < 2147483648.0)) {
         break label$16
        }
        $14_1 = ~~$22_1;
        break label$15;
       }
       $14_1 = -2147483648;
      }
      HEAP32[$13_1 >> 2] = $14_1;
      $6_1 = $6_1 + -1 | 0;
      $22_1 = +HEAPF64[($5_1 + ($6_1 << 3 | 0) | 0) >> 3] + $23_1;
      $2_1 = $2_1 + 1 | 0;
      if (($2_1 | 0) != ($11_1 | 0)) {
       continue label$12
      }
      break label$12;
     };
    }
    $22_1 = +$2171(+$22_1, $12_1 | 0);
    label$17 : {
     label$18 : {
      $22_1 = $22_1 + +$610(+($22_1 * .125)) * -8.0;
      if (!(Math_abs($22_1) < 2147483648.0)) {
       break label$18
      }
      $18_1 = ~~$22_1;
      break label$17;
     }
     $18_1 = -2147483648;
    }
    $22_1 = $22_1 - +($18_1 | 0);
    label$19 : {
     label$20 : {
      label$21 : {
       label$22 : {
        label$23 : {
         $19_1 = ($12_1 | 0) < (1 | 0);
         if ($19_1) {
          break label$23
         }
         $2_1 = (($11_1 << 2 | 0) + ($5_1 + 480 | 0) | 0) + -4 | 0;
         $207_1 = $2_1;
         $2_1 = HEAP32[$2_1 >> 2] | 0;
         $210_1 = $2_1;
         $2_1 = $2_1 >> $16_1 | 0;
         $6_1 = $210_1 - ($2_1 << $16_1 | 0) | 0;
         HEAP32[$207_1 >> 2] = $6_1;
         $20_1 = $6_1 >> $15_1 | 0;
         $18_1 = $2_1 + $18_1 | 0;
         break label$22;
        }
        if ($12_1) {
         break label$21
        }
        $20_1 = (HEAP32[((($11_1 << 2 | 0) + ($5_1 + 480 | 0) | 0) + -4 | 0) >> 2] | 0) >> 23 | 0;
       }
       if (($20_1 | 0) < (1 | 0)) {
        break label$19
       }
       break label$20;
      }
      $20_1 = 2;
      if (!($22_1 >= .5 ^ 1 | 0)) {
       break label$20
      }
      $20_1 = 0;
      break label$19;
     }
     $2_1 = 0;
     $14_1 = 0;
     label$24 : {
      if ($10_1) {
       break label$24
      }
      label$25 : while (1) {
       $10_1 = ($5_1 + 480 | 0) + ($2_1 << 2 | 0) | 0;
       $6_1 = HEAP32[$10_1 >> 2] | 0;
       $13_1 = 16777215;
       label$26 : {
        label$27 : {
         if ($14_1) {
          break label$27
         }
         $13_1 = 16777216;
         if ($6_1) {
          break label$27
         }
         $14_1 = 0;
         break label$26;
        }
        HEAP32[$10_1 >> 2] = $13_1 - $6_1 | 0;
        $14_1 = 1;
       }
       $2_1 = $2_1 + 1 | 0;
       if (($2_1 | 0) != ($11_1 | 0)) {
        continue label$25
       }
       break label$25;
      };
     }
     label$28 : {
      if ($19_1) {
       break label$28
      }
      label$29 : {
       switch ($17_1 | 0) {
       case 0:
        $2_1 = (($11_1 << 2 | 0) + ($5_1 + 480 | 0) | 0) + -4 | 0;
        HEAP32[$2_1 >> 2] = (HEAP32[$2_1 >> 2] | 0) & 8388607 | 0;
        break label$28;
       case 1:
        break label$29;
       default:
        break label$28;
       };
      }
      $2_1 = (($11_1 << 2 | 0) + ($5_1 + 480 | 0) | 0) + -4 | 0;
      HEAP32[$2_1 >> 2] = (HEAP32[$2_1 >> 2] | 0) & 4194303 | 0;
     }
     $18_1 = $18_1 + 1 | 0;
     if (($20_1 | 0) != (2 | 0)) {
      break label$19
     }
     $22_1 = 1.0 - $22_1;
     $20_1 = 2;
     if (!$14_1) {
      break label$19
     }
     $22_1 = $22_1 - +$2171(+(1.0), $12_1 | 0);
    }
    label$31 : {
     if ($22_1 != 0.0) {
      break label$31
     }
     $6_1 = 0;
     $2_1 = $11_1;
     label$32 : {
      if (($2_1 | 0) <= ($9_1 | 0)) {
       break label$32
      }
      label$33 : while (1) {
       $2_1 = $2_1 + -1 | 0;
       $6_1 = HEAP32[(($5_1 + 480 | 0) + ($2_1 << 2 | 0) | 0) >> 2] | 0 | $6_1 | 0;
       if (($2_1 | 0) > ($9_1 | 0)) {
        continue label$33
       }
       break label$33;
      };
      if (!$6_1) {
       break label$32
      }
      $8_1 = $12_1;
      label$34 : while (1) {
       $8_1 = $8_1 + -24 | 0;
       $11_1 = $11_1 + -1 | 0;
       if (!(HEAP32[(($5_1 + 480 | 0) + ($11_1 << 2 | 0) | 0) >> 2] | 0)) {
        continue label$34
       }
       break label$9;
      };
     }
     $2_1 = 1;
     label$35 : while (1) {
      $6_1 = $2_1;
      $2_1 = $2_1 + 1 | 0;
      if (!(HEAP32[(($5_1 + 480 | 0) + (($9_1 - $6_1 | 0) << 2 | 0) | 0) >> 2] | 0)) {
       continue label$35
      }
      break label$35;
     };
     $13_1 = $6_1 + $11_1 | 0;
     label$36 : while (1) {
      $6_1 = $11_1 + $3_1 | 0;
      $11_1 = $11_1 + 1 | 0;
      HEAPF64[(($5_1 + 320 | 0) + ($6_1 << 3 | 0) | 0) >> 3] = +(HEAP32[((($11_1 + $7_1 | 0) << 2 | 0) + 4544 | 0) >> 2] | 0 | 0);
      $2_1 = 0;
      $22_1 = 0.0;
      label$37 : {
       if (($3_1 | 0) < (1 | 0)) {
        break label$37
       }
       label$38 : while (1) {
        $22_1 = $22_1 + +HEAPF64[($0_1 + ($2_1 << 3 | 0) | 0) >> 3] * +HEAPF64[(($5_1 + 320 | 0) + (($6_1 - $2_1 | 0) << 3 | 0) | 0) >> 3];
        $2_1 = $2_1 + 1 | 0;
        if (($2_1 | 0) != ($3_1 | 0)) {
         continue label$38
        }
        break label$38;
       };
      }
      HEAPF64[($5_1 + ($11_1 << 3 | 0) | 0) >> 3] = $22_1;
      if (($11_1 | 0) < ($13_1 | 0)) {
       continue label$36
      }
      break label$36;
     };
     $11_1 = $13_1;
     continue label$10;
    }
    break label$10;
   };
   label$39 : {
    label$40 : {
     $22_1 = +$2171(+$22_1, 0 - $12_1 | 0 | 0);
     if ($22_1 >= 16777216.0 ^ 1 | 0) {
      break label$40
     }
     $3_1 = $11_1 << 2 | 0;
     label$41 : {
      label$42 : {
       $23_1 = $22_1 * 5.9604644775390625e-08;
       if (!(Math_abs($23_1) < 2147483648.0)) {
        break label$42
       }
       $2_1 = ~~$23_1;
       break label$41;
      }
      $2_1 = -2147483648;
     }
     $3_1 = ($5_1 + 480 | 0) + $3_1 | 0;
     label$43 : {
      label$44 : {
       $22_1 = $22_1 + +($2_1 | 0) * -16777216.0;
       if (!(Math_abs($22_1) < 2147483648.0)) {
        break label$44
       }
       $6_1 = ~~$22_1;
       break label$43;
      }
      $6_1 = -2147483648;
     }
     HEAP32[$3_1 >> 2] = $6_1;
     $11_1 = $11_1 + 1 | 0;
     break label$39;
    }
    label$45 : {
     label$46 : {
      if (!(Math_abs($22_1) < 2147483648.0)) {
       break label$46
      }
      $2_1 = ~~$22_1;
      break label$45;
     }
     $2_1 = -2147483648;
    }
    $8_1 = $12_1;
   }
   HEAP32[(($5_1 + 480 | 0) + ($11_1 << 2 | 0) | 0) >> 2] = $2_1;
  }
  $22_1 = +$2171(+(1.0), $8_1 | 0);
  label$47 : {
   if (($11_1 | 0) <= (-1 | 0)) {
    break label$47
   }
   $2_1 = $11_1;
   label$48 : while (1) {
    HEAPF64[($5_1 + ($2_1 << 3 | 0) | 0) >> 3] = $22_1 * +(HEAP32[(($5_1 + 480 | 0) + ($2_1 << 2 | 0) | 0) >> 2] | 0 | 0);
    $22_1 = $22_1 * 5.9604644775390625e-08;
    $3_1 = ($2_1 | 0) > (0 | 0);
    $2_1 = $2_1 + -1 | 0;
    if ($3_1) {
     continue label$48
    }
    break label$48;
   };
   $13_1 = 0;
   if (($11_1 | 0) < (0 | 0)) {
    break label$47
   }
   $9_1 = ($9_1 | 0) > (0 | 0) ? $9_1 : 0;
   $6_1 = $11_1;
   label$49 : while (1) {
    $0_1 = $9_1 >>> 0 < $13_1 >>> 0 ? $9_1 : $13_1;
    $14_1 = $11_1 - $6_1 | 0;
    $2_1 = 0;
    $22_1 = 0.0;
    label$50 : while (1) {
     $22_1 = $22_1 + +HEAPF64[(($2_1 << 3 | 0) + 7312 | 0) >> 3] * +HEAPF64[($5_1 + (($2_1 + $6_1 | 0) << 3 | 0) | 0) >> 3];
     $3_1 = ($2_1 | 0) != ($0_1 | 0);
     $2_1 = $2_1 + 1 | 0;
     if ($3_1) {
      continue label$50
     }
     break label$50;
    };
    HEAPF64[(($5_1 + 160 | 0) + ($14_1 << 3 | 0) | 0) >> 3] = $22_1;
    $6_1 = $6_1 + -1 | 0;
    $2_1 = ($13_1 | 0) != ($11_1 | 0);
    $13_1 = $13_1 + 1 | 0;
    if ($2_1) {
     continue label$49
    }
    break label$49;
   };
  }
  label$51 : {
   label$52 : {
    label$53 : {
     switch ($4_1 | 0) {
     case 3:
      $24_1 = 0.0;
      label$56 : {
       if (($11_1 | 0) < (1 | 0)) {
        break label$56
       }
       $22_1 = +HEAPF64[(($5_1 + 160 | 0) + ($11_1 << 3 | 0) | 0) >> 3];
       $2_1 = $11_1;
       label$57 : while (1) {
        $3_1 = $2_1 + -1 | 0;
        $6_1 = ($5_1 + 160 | 0) + ($3_1 << 3 | 0) | 0;
        $23_1 = +HEAPF64[$6_1 >> 3];
        $539_1 = $23_1;
        $23_1 = $23_1 + $22_1;
        HEAPF64[(($5_1 + 160 | 0) + ($2_1 << 3 | 0) | 0) >> 3] = $22_1 + ($539_1 - $23_1);
        HEAPF64[$6_1 >> 3] = $23_1;
        $6_1 = ($2_1 | 0) > (1 | 0);
        $22_1 = $23_1;
        $2_1 = $3_1;
        if ($6_1) {
         continue label$57
        }
        break label$57;
       };
       if (($11_1 | 0) < (2 | 0)) {
        break label$56
       }
       $22_1 = +HEAPF64[(($5_1 + 160 | 0) + ($11_1 << 3 | 0) | 0) >> 3];
       $2_1 = $11_1;
       label$58 : while (1) {
        $3_1 = $2_1 + -1 | 0;
        $6_1 = ($5_1 + 160 | 0) + ($3_1 << 3 | 0) | 0;
        $23_1 = +HEAPF64[$6_1 >> 3];
        $577_1 = $23_1;
        $23_1 = $23_1 + $22_1;
        HEAPF64[(($5_1 + 160 | 0) + ($2_1 << 3 | 0) | 0) >> 3] = $22_1 + ($577_1 - $23_1);
        HEAPF64[$6_1 >> 3] = $23_1;
        $6_1 = ($2_1 | 0) > (2 | 0);
        $22_1 = $23_1;
        $2_1 = $3_1;
        if ($6_1) {
         continue label$58
        }
        break label$58;
       };
       $24_1 = 0.0;
       if (($11_1 | 0) <= (1 | 0)) {
        break label$56
       }
       label$59 : while (1) {
        $24_1 = $24_1 + +HEAPF64[(($5_1 + 160 | 0) + ($11_1 << 3 | 0) | 0) >> 3];
        $2_1 = ($11_1 | 0) > (2 | 0);
        $11_1 = $11_1 + -1 | 0;
        if ($2_1) {
         continue label$59
        }
        break label$59;
       };
      }
      if ($20_1) {
       break label$52
      }
      i64toi32_i32$0 = HEAP32[($5_1 + 160 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($5_1 + 164 | 0) >> 2] | 0;
      $609_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $1_1;
      HEAP32[$1_1 >> 2] = $609_1;
      HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$1 = HEAP32[($5_1 + 168 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($5_1 + 172 | 0) >> 2] | 0;
      HEAPF64[($1_1 + 16 | 0) >> 3] = $24_1;
      $615_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $1_1;
      HEAP32[($1_1 + 8 | 0) >> 2] = $615_1;
      HEAP32[($1_1 + 12 | 0) >> 2] = i64toi32_i32$0;
      break label$51;
     case 0:
      $22_1 = 0.0;
      label$60 : {
       if (($11_1 | 0) < (0 | 0)) {
        break label$60
       }
       label$61 : while (1) {
        $22_1 = $22_1 + +HEAPF64[(($5_1 + 160 | 0) + ($11_1 << 3 | 0) | 0) >> 3];
        $2_1 = ($11_1 | 0) > (0 | 0);
        $11_1 = $11_1 + -1 | 0;
        if ($2_1) {
         continue label$61
        }
        break label$61;
       };
      }
      HEAPF64[$1_1 >> 3] = $20_1 ? -$22_1 : $22_1;
      break label$51;
     case 1:
     case 2:
      break label$53;
     default:
      break label$51;
     };
    }
    $22_1 = 0.0;
    label$62 : {
     if (($11_1 | 0) < (0 | 0)) {
      break label$62
     }
     $2_1 = $11_1;
     label$63 : while (1) {
      $22_1 = $22_1 + +HEAPF64[(($5_1 + 160 | 0) + ($2_1 << 3 | 0) | 0) >> 3];
      $3_1 = ($2_1 | 0) > (0 | 0);
      $2_1 = $2_1 + -1 | 0;
      if ($3_1) {
       continue label$63
      }
      break label$63;
     };
    }
    HEAPF64[$1_1 >> 3] = $20_1 ? -$22_1 : $22_1;
    $22_1 = +HEAPF64[($5_1 + 160 | 0) >> 3] - $22_1;
    $2_1 = 1;
    label$64 : {
     if (($11_1 | 0) < (1 | 0)) {
      break label$64
     }
     label$65 : while (1) {
      $22_1 = $22_1 + +HEAPF64[(($5_1 + 160 | 0) + ($2_1 << 3 | 0) | 0) >> 3];
      $3_1 = ($2_1 | 0) != ($11_1 | 0);
      $2_1 = $2_1 + 1 | 0;
      if ($3_1) {
       continue label$65
      }
      break label$65;
     };
    }
    HEAPF64[($1_1 + 8 | 0) >> 3] = $20_1 ? -$22_1 : $22_1;
    break label$51;
   }
   HEAPF64[$1_1 >> 3] = -+HEAPF64[($5_1 + 160 | 0) >> 3];
   $22_1 = +HEAPF64[($5_1 + 168 | 0) >> 3];
   HEAPF64[($1_1 + 16 | 0) >> 3] = -$24_1;
   HEAPF64[($1_1 + 8 | 0) >> 3] = -$22_1;
  }
  global$0 = $5_1 + 560 | 0;
  return $18_1 & 7 | 0 | 0;
 }
 
 function $597($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = $1_1 | 0;
  var $8_1 = 0.0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, $2_1 = 0, $4_1 = 0, $9_1 = 0.0, $7_1 = 0, $5_1 = 0, $6_1 = 0, $7$hi = 0, $10_1 = 0.0, $11_1 = 0.0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $152_1 = 0, $185_1 = 0, $290_1 = 0, $293_1 = 0;
  $2_1 = global$0 - 48 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      wasm2js_scratch_store_f64(+$0_1);
      i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
      $7_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
      $7$hi = i64toi32_i32$0;
      i64toi32_i32$2 = $7_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $22_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
       $22_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
      }
      $3_1 = $22_1;
      $4_1 = $3_1 & 2147483647 | 0;
      if ($4_1 >>> 0 > 1074752122 >>> 0) {
       break label$4
      }
      if (($3_1 & 1048575 | 0 | 0) == (598523 | 0)) {
       break label$3
      }
      label$5 : {
       if ($4_1 >>> 0 > 1073928572 >>> 0) {
        break label$5
       }
       label$6 : {
        i64toi32_i32$1 = $7$hi;
        i64toi32_i32$0 = $7_1;
        i64toi32_i32$2 = 0;
        i64toi32_i32$3 = 0;
        if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
         $23_1 = 1
        } else {
         if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
          if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
           $24_1 = 0
          } else {
           $24_1 = 1
          }
          $25_1 = $24_1;
         } else {
          $25_1 = 0
         }
         $23_1 = $25_1;
        }
        if ($23_1) {
         break label$6
        }
        $0_1 = $0_1 + -1.5707963267341256;
        $8_1 = $0_1 + -6.077100506506192e-11;
        HEAPF64[$1_1 >> 3] = $8_1;
        HEAPF64[($1_1 + 8 | 0) >> 3] = $0_1 - $8_1 + -6.077100506506192e-11;
        $3_1 = 1;
        break label$1;
       }
       $0_1 = $0_1 + 1.5707963267341256;
       $8_1 = $0_1 + 6.077100506506192e-11;
       HEAPF64[$1_1 >> 3] = $8_1;
       HEAPF64[($1_1 + 8 | 0) >> 3] = $0_1 - $8_1 + 6.077100506506192e-11;
       $3_1 = -1;
       break label$1;
      }
      label$7 : {
       i64toi32_i32$0 = $7$hi;
       i64toi32_i32$3 = $7_1;
       i64toi32_i32$1 = 0;
       i64toi32_i32$2 = 0;
       if ((i64toi32_i32$0 | 0) < (i64toi32_i32$1 | 0)) {
        $26_1 = 1
       } else {
        if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$1 | 0)) {
         if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$2 >>> 0) {
          $27_1 = 0
         } else {
          $27_1 = 1
         }
         $28_1 = $27_1;
        } else {
         $28_1 = 0
        }
        $26_1 = $28_1;
       }
       if ($26_1) {
        break label$7
       }
       $0_1 = $0_1 + -3.1415926534682512;
       $8_1 = $0_1 + -1.2154201013012384e-10;
       HEAPF64[$1_1 >> 3] = $8_1;
       HEAPF64[($1_1 + 8 | 0) >> 3] = $0_1 - $8_1 + -1.2154201013012384e-10;
       $3_1 = 2;
       break label$1;
      }
      $0_1 = $0_1 + 3.1415926534682512;
      $8_1 = $0_1 + 1.2154201013012384e-10;
      HEAPF64[$1_1 >> 3] = $8_1;
      HEAPF64[($1_1 + 8 | 0) >> 3] = $0_1 - $8_1 + 1.2154201013012384e-10;
      $3_1 = -2;
      break label$1;
     }
     label$8 : {
      if ($4_1 >>> 0 > 1075594811 >>> 0) {
       break label$8
      }
      label$9 : {
       if ($4_1 >>> 0 > 1075183036 >>> 0) {
        break label$9
       }
       if (($4_1 | 0) == (1074977148 | 0)) {
        break label$3
       }
       label$10 : {
        i64toi32_i32$3 = $7$hi;
        i64toi32_i32$2 = $7_1;
        i64toi32_i32$0 = 0;
        i64toi32_i32$1 = 0;
        if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
         $29_1 = 1
        } else {
         if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
          if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$1 >>> 0) {
           $30_1 = 0
          } else {
           $30_1 = 1
          }
          $31_1 = $30_1;
         } else {
          $31_1 = 0
         }
         $29_1 = $31_1;
        }
        if ($29_1) {
         break label$10
        }
        $0_1 = $0_1 + -4.712388980202377;
        $8_1 = $0_1 + -1.8231301519518578e-10;
        HEAPF64[$1_1 >> 3] = $8_1;
        HEAPF64[($1_1 + 8 | 0) >> 3] = $0_1 - $8_1 + -1.8231301519518578e-10;
        $3_1 = 3;
        break label$1;
       }
       $0_1 = $0_1 + 4.712388980202377;
       $8_1 = $0_1 + 1.8231301519518578e-10;
       HEAPF64[$1_1 >> 3] = $8_1;
       HEAPF64[($1_1 + 8 | 0) >> 3] = $0_1 - $8_1 + 1.8231301519518578e-10;
       $3_1 = -3;
       break label$1;
      }
      if (($4_1 | 0) == (1075388923 | 0)) {
       break label$3
      }
      label$11 : {
       i64toi32_i32$2 = $7$hi;
       i64toi32_i32$1 = $7_1;
       i64toi32_i32$3 = 0;
       i64toi32_i32$0 = 0;
       if ((i64toi32_i32$2 | 0) < (i64toi32_i32$3 | 0)) {
        $32_1 = 1
       } else {
        if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$3 | 0)) {
         if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$0 >>> 0) {
          $33_1 = 0
         } else {
          $33_1 = 1
         }
         $34_1 = $33_1;
        } else {
         $34_1 = 0
        }
        $32_1 = $34_1;
       }
       if ($32_1) {
        break label$11
       }
       $0_1 = $0_1 + -6.2831853069365025;
       $8_1 = $0_1 + -2.430840202602477e-10;
       HEAPF64[$1_1 >> 3] = $8_1;
       HEAPF64[($1_1 + 8 | 0) >> 3] = $0_1 - $8_1 + -2.430840202602477e-10;
       $3_1 = 4;
       break label$1;
      }
      $0_1 = $0_1 + 6.2831853069365025;
      $8_1 = $0_1 + 2.430840202602477e-10;
      HEAPF64[$1_1 >> 3] = $8_1;
      HEAPF64[($1_1 + 8 | 0) >> 3] = $0_1 - $8_1 + 2.430840202602477e-10;
      $3_1 = -4;
      break label$1;
     }
     if ($4_1 >>> 0 > 1094263290 >>> 0) {
      break label$2
     }
    }
    $8_1 = $0_1 * .6366197723675814 + 6755399441055744.0 + -6755399441055744.0;
    $9_1 = $0_1 + $8_1 * -1.5707963267341256;
    $10_1 = $8_1 * 6.077100506506192e-11;
    $0_1 = $9_1 - $10_1;
    HEAPF64[$1_1 >> 3] = $0_1;
    $5_1 = $4_1 >>> 20 | 0;
    $152_1 = $5_1;
    wasm2js_scratch_store_f64(+$0_1);
    i64toi32_i32$1 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$0 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 52;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $35_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $35_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $6_1 = ($152_1 - ($35_1 & 2047 | 0) | 0 | 0) < (17 | 0);
    label$12 : {
     label$13 : {
      if (!(Math_abs($8_1) < 2147483648.0)) {
       break label$13
      }
      $3_1 = ~~$8_1;
      break label$12;
     }
     $3_1 = -2147483648;
    }
    label$14 : {
     if ($6_1) {
      break label$14
     }
     $0_1 = $8_1 * 6.077100506303966e-11;
     $11_1 = $9_1 - $0_1;
     $10_1 = $8_1 * 2.0222662487959506e-21 - ($9_1 - $11_1 - $0_1);
     $0_1 = $11_1 - $10_1;
     HEAPF64[$1_1 >> 3] = $0_1;
     label$15 : {
      $185_1 = $5_1;
      wasm2js_scratch_store_f64(+$0_1);
      i64toi32_i32$2 = wasm2js_scratch_load_i32(1 | 0) | 0;
      i64toi32_i32$1 = wasm2js_scratch_load_i32(0 | 0) | 0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 52;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = 0;
       $36_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
       $36_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
      }
      if (($185_1 - ($36_1 & 2047 | 0) | 0 | 0) >= (50 | 0)) {
       break label$15
      }
      $9_1 = $11_1;
      break label$14;
     }
     $0_1 = $8_1 * 2.0222662487111665e-21;
     $9_1 = $11_1 - $0_1;
     $10_1 = $8_1 * 8.4784276603689e-32 - ($11_1 - $9_1 - $0_1);
     $0_1 = $9_1 - $10_1;
     HEAPF64[$1_1 >> 3] = $0_1;
    }
    HEAPF64[($1_1 + 8 | 0) >> 3] = $9_1 - $0_1 - $10_1;
    break label$1;
   }
   label$16 : {
    if ($4_1 >>> 0 < 2146435072 >>> 0) {
     break label$16
    }
    $0_1 = $0_1 - $0_1;
    HEAPF64[$1_1 >> 3] = $0_1;
    HEAPF64[($1_1 + 8 | 0) >> 3] = $0_1;
    $3_1 = 0;
    break label$1;
   }
   i64toi32_i32$0 = $7$hi;
   i64toi32_i32$2 = $7_1;
   i64toi32_i32$1 = 1048575;
   i64toi32_i32$3 = -1;
   i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
   i64toi32_i32$2 = 1096810496;
   i64toi32_i32$3 = 0;
   i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$2 | 0);
   $0_1 = +wasm2js_scratch_load_f64();
   $3_1 = 0;
   $6_1 = 1;
   label$17 : while (1) {
    $3_1 = ($2_1 + 16 | 0) + ($3_1 << 3 | 0) | 0;
    label$18 : {
     label$19 : {
      if (!(Math_abs($0_1) < 2147483648.0)) {
       break label$19
      }
      $5_1 = ~~$0_1;
      break label$18;
     }
     $5_1 = -2147483648;
    }
    $8_1 = +($5_1 | 0);
    HEAPF64[$3_1 >> 3] = $8_1;
    $0_1 = ($0_1 - $8_1) * 16777216.0;
    $3_1 = 1;
    $5_1 = $6_1 & 1 | 0;
    $6_1 = 0;
    if ($5_1) {
     continue label$17
    }
    break label$17;
   };
   HEAPF64[($2_1 + 32 | 0) >> 3] = $0_1;
   label$20 : {
    label$21 : {
     if ($0_1 == 0.0) {
      break label$21
     }
     $3_1 = 2;
     break label$20;
    }
    $6_1 = 1;
    label$22 : while (1) {
     $3_1 = $6_1;
     $6_1 = $3_1 + -1 | 0;
     if (+HEAPF64[(($2_1 + 16 | 0) + ($3_1 << 3 | 0) | 0) >> 3] == 0.0) {
      continue label$22
     }
     break label$22;
    };
   }
   $3_1 = $596($2_1 + 16 | 0 | 0, $2_1 | 0, ($4_1 >>> 20 | 0) + -1046 | 0 | 0, $3_1 + 1 | 0 | 0, 1 | 0) | 0;
   label$23 : {
    i64toi32_i32$2 = $7$hi;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$0 = -1;
    i64toi32_i32$3 = -1;
    if ((i64toi32_i32$2 | 0) > (i64toi32_i32$0 | 0)) {
     $37_1 = 1
    } else {
     if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$1 >>> 0 <= i64toi32_i32$3 >>> 0) {
       $38_1 = 0
      } else {
       $38_1 = 1
      }
      $39_1 = $38_1;
     } else {
      $39_1 = 0
     }
     $37_1 = $39_1;
    }
    if ($37_1) {
     break label$23
    }
    HEAPF64[$1_1 >> 3] = -+HEAPF64[$2_1 >> 3];
    HEAPF64[($1_1 + 8 | 0) >> 3] = -+HEAPF64[($2_1 + 8 | 0) >> 3];
    $3_1 = 0 - $3_1 | 0;
    break label$1;
   }
   i64toi32_i32$3 = $2_1;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
   $290_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $1_1;
   HEAP32[$1_1 >> 2] = $290_1;
   HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$2;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] | 0;
   $293_1 = i64toi32_i32$2;
   i64toi32_i32$2 = $1_1;
   HEAP32[($1_1 + 8 | 0) >> 2] = $293_1;
   HEAP32[($1_1 + 12 | 0) >> 2] = i64toi32_i32$1;
  }
  global$0 = $2_1 + 48 | 0;
  return $3_1 | 0;
 }
 
 function $598($0_1) {
  $0_1 = +$0_1;
  return +Math_sqrt($0_1);
 }
 
 function $599($0_1) {
  $0_1 = Math_fround($0_1);
  var $3_1 = 0.0, $2_1 = 0, $1_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $1_1 = (wasm2js_scratch_store_f32($0_1), wasm2js_scratch_load_i32(2));
     $2_1 = $1_1 & 2147483647 | 0;
     if ($2_1 >>> 0 < 1065353216 >>> 0) {
      break label$3
     }
     if (($2_1 | 0) != (1065353216 | 0)) {
      break label$2
     }
     return Math_fround(Math_fround(+$0_1 * 1.5707963267948966 + 7.52316384526264e-37));
    }
    label$4 : {
     if ($2_1 >>> 0 > 1056964607 >>> 0) {
      break label$4
     }
     if (($2_1 + -8388608 | 0) >>> 0 < 956301312 >>> 0) {
      break label$1
     }
     return Math_fround(Math_fround(Math_fround(Math_fround($600(Math_fround(Math_fround($0_1 * $0_1)))) * $0_1) + $0_1));
    }
    $0_1 = Math_fround(Math_fround(Math_fround(1.0) - Math_fround($602(Math_fround($0_1)))) * Math_fround(.5));
    $3_1 = +$598(+(+$0_1));
    $3_1 = $3_1 + $3_1 * +Math_fround($600(Math_fround($0_1)));
    $0_1 = Math_fround(1.5707963267948966 - ($3_1 + $3_1));
    return Math_fround(($1_1 | 0) > (-1 | 0) ? $0_1 : Math_fround(-$0_1));
   }
   $0_1 = Math_fround(Math_fround(0.0) / Math_fround($0_1 - $0_1));
  }
  return Math_fround($0_1);
 }
 
 function $600($0_1) {
  $0_1 = Math_fround($0_1);
  return Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($0_1 * Math_fround(-.008656363002955914)) + Math_fround(-.04274342209100723)) * $0_1) + Math_fround(.16666586697101593)) * $0_1) / Math_fround(Math_fround($0_1 * Math_fround(-.7066296339035034)) + Math_fround(1.0))));
 }
 
 function $601($0_1, $1_1) {
  $0_1 = Math_fround($0_1);
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $2_1 = 0, $6_1 = 0.0, $3_1 = 0, $5_1 = 0, $19_1 = 0.0, i64toi32_i32$1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    $3_1 = (wasm2js_scratch_store_f32($0_1), wasm2js_scratch_load_i32(2));
    $4_1 = $3_1 & 2147483647 | 0;
    if ($4_1 >>> 0 > 1305022426 >>> 0) {
     break label$2
    }
    $6_1 = +$0_1;
    $19_1 = $6_1;
    $6_1 = $6_1 * .6366197723675814 + 6755399441055744.0 + -6755399441055744.0;
    HEAPF64[$1_1 >> 3] = $19_1 + $6_1 * -1.5707963109016418 + $6_1 * -1.5893254773528196e-08;
    label$3 : {
     if (!(Math_abs($6_1) < 2147483648.0)) {
      break label$3
     }
     $4_1 = ~~$6_1;
     break label$1;
    }
    $4_1 = -2147483648;
    break label$1;
   }
   label$4 : {
    if ($4_1 >>> 0 < 2139095040 >>> 0) {
     break label$4
    }
    HEAPF64[$1_1 >> 3] = +Math_fround($0_1 - $0_1);
    $4_1 = 0;
    break label$1;
   }
   $5_1 = ($4_1 >>> 23 | 0) + -150 | 0;
   HEAPF64[($2_1 + 8 | 0) >> 3] = +(wasm2js_scratch_store_i32(2, $4_1 - ($5_1 << 23 | 0) | 0), wasm2js_scratch_load_f32());
   $4_1 = $596($2_1 + 8 | 0 | 0, $2_1 | 0, $5_1 | 0, 1 | 0, 0 | 0) | 0;
   label$5 : {
    if (($3_1 | 0) > (-1 | 0)) {
     break label$5
    }
    HEAPF64[$1_1 >> 3] = -+HEAPF64[$2_1 >> 3];
    $4_1 = 0 - $4_1 | 0;
    break label$1;
   }
   i64toi32_i32$1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
   HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
   HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$1;
  }
  global$0 = $2_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $602($0_1) {
  $0_1 = Math_fround($0_1);
  return Math_fround(Math_fround(Math_abs($0_1)));
 }
 
 function $603($0_1) {
  $0_1 = Math_fround($0_1);
  var $3_1 = 0, $2_1 = 0, $4_1 = 0.0, $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    $2_1 = (wasm2js_scratch_store_f32($0_1), wasm2js_scratch_load_i32(2));
    $3_1 = $2_1 & 2147483647 | 0;
    if ($3_1 >>> 0 > 1061752794 >>> 0) {
     break label$2
    }
    if ($3_1 >>> 0 < 964689920 >>> 0) {
     break label$1
    }
    $0_1 = Math_fround($611(+(+$0_1), 0 | 0));
    break label$1;
   }
   label$3 : {
    if ($3_1 >>> 0 > 1081824209 >>> 0) {
     break label$3
    }
    $4_1 = +$0_1;
    label$4 : {
     if ($3_1 >>> 0 > 1075235811 >>> 0) {
      break label$4
     }
     $0_1 = Math_fround($611(+((($2_1 | 0) > (-1 | 0) ? -1.5707963267948966 : 1.5707963267948966) + $4_1), 1 | 0));
     break label$1;
    }
    $0_1 = Math_fround($611(+((($2_1 | 0) > (-1 | 0) ? -3.141592653589793 : 3.141592653589793) + $4_1), 0 | 0));
    break label$1;
   }
   label$5 : {
    if ($3_1 >>> 0 > 1088565717 >>> 0) {
     break label$5
    }
    $4_1 = +$0_1;
    label$6 : {
     if ($3_1 >>> 0 > 1085271519 >>> 0) {
      break label$6
     }
     $0_1 = Math_fround($611(+((($2_1 | 0) > (-1 | 0) ? -4.71238898038469 : 4.71238898038469) + $4_1), 1 | 0));
     break label$1;
    }
    $0_1 = Math_fround($611(+((($2_1 | 0) > (-1 | 0) ? -6.283185307179586 : 6.283185307179586) + $4_1), 0 | 0));
    break label$1;
   }
   label$7 : {
    if ($3_1 >>> 0 < 2139095040 >>> 0) {
     break label$7
    }
    $0_1 = Math_fround($0_1 - $0_1);
    break label$1;
   }
   $3_1 = $601(Math_fround($0_1), $1_1 + 8 | 0 | 0) | 0;
   $0_1 = Math_fround($611(+(+HEAPF64[($1_1 + 8 | 0) >> 3]), $3_1 & 1 | 0 | 0));
  }
  global$0 = $1_1 + 16 | 0;
  return Math_fround($0_1);
 }
 
 function $604($0_1) {
  $0_1 = +$0_1;
  var $1_1 = 0, i64toi32_i32$4 = 0, $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $8_1 = 0, i64toi32_i32$2 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    wasm2js_scratch_store_f64(+$0_1);
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$2 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $8_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $8_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $2_1 = $8_1 & 2147483647 | 0;
    if ($2_1 >>> 0 > 1072243195 >>> 0) {
     break label$2
    }
    if ($2_1 >>> 0 < 1044381696 >>> 0) {
     break label$1
    }
    $0_1 = +$609(+$0_1, +(0.0), 0 | 0);
    break label$1;
   }
   label$3 : {
    if ($2_1 >>> 0 < 2146435072 >>> 0) {
     break label$3
    }
    $0_1 = $0_1 - $0_1;
    break label$1;
   }
   $2_1 = $597(+$0_1, $1_1 | 0) | 0;
   $0_1 = +$609(+(+HEAPF64[$1_1 >> 3]), +(+HEAPF64[($1_1 + 8 | 0) >> 3]), $2_1 & 1 | 0 | 0);
  }
  global$0 = $1_1 + 16 | 0;
  return +$0_1;
 }
 
 function $605($0_1) {
  $0_1 = Math_fround($0_1);
  var $2_1 = 0, $5_1 = Math_fround(0), $3_1 = 0, $4_1 = Math_fround(0), $1_1 = 0, $6_1 = Math_fround(0);
  label$1 : {
   $1_1 = (wasm2js_scratch_store_f32($0_1), wasm2js_scratch_load_i32(2));
   $2_1 = $1_1 & 2147483647 | 0;
   if ($2_1 >>> 0 >= 1283457024 >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     label$4 : {
      if ($2_1 >>> 0 > 1054867455 >>> 0) {
       break label$4
      }
      if ($2_1 >>> 0 < 964689920 >>> 0) {
       break label$2
      }
      $3_1 = -1;
      $2_1 = 1;
      break label$3;
     }
     $0_1 = Math_fround($602(Math_fround($0_1)));
     label$5 : {
      label$6 : {
       if ($2_1 >>> 0 > 1066926079 >>> 0) {
        break label$6
       }
       label$7 : {
        if ($2_1 >>> 0 > 1060110335 >>> 0) {
         break label$7
        }
        $0_1 = Math_fround(Math_fround(Math_fround($0_1 + $0_1) + Math_fround(-1.0)) / Math_fround($0_1 + Math_fround(2.0)));
        $2_1 = 0;
        $3_1 = 0;
        break label$3;
       }
       $0_1 = Math_fround(Math_fround($0_1 + Math_fround(-1.0)) / Math_fround($0_1 + Math_fround(1.0)));
       $3_1 = 1;
       break label$5;
      }
      label$8 : {
       if ($2_1 >>> 0 > 1075576831 >>> 0) {
        break label$8
       }
       $0_1 = Math_fround(Math_fround($0_1 + Math_fround(-1.5)) / Math_fround(Math_fround($0_1 * Math_fround(1.5)) + Math_fround(1.0)));
       $3_1 = 2;
       break label$5;
      }
      $0_1 = Math_fround(Math_fround(-1.0) / $0_1);
      $3_1 = 3;
     }
     $2_1 = 0;
    }
    $4_1 = Math_fround($0_1 * $0_1);
    $5_1 = Math_fround($4_1 * $4_1);
    $6_1 = Math_fround($5_1 * Math_fround(Math_fround($5_1 * Math_fround(-.106480173766613)) + Math_fround(-.19999158382415771)));
    $5_1 = Math_fround($4_1 * Math_fround(Math_fround($5_1 * Math_fround(Math_fround($5_1 * Math_fround(.06168760731816292)) + Math_fround(.14253635704517365))) + Math_fround(.333333283662796)));
    label$9 : {
     if (!$2_1) {
      break label$9
     }
     return Math_fround(Math_fround($0_1 - Math_fround($0_1 * Math_fround($6_1 + $5_1))));
    }
    $2_1 = $3_1 << 2 | 0;
    $0_1 = Math_fround(Math_fround(HEAPF32[($2_1 + 7376 | 0) >> 2]) - Math_fround(Math_fround(Math_fround($0_1 * Math_fround($6_1 + $5_1)) - Math_fround(HEAPF32[($2_1 + 7392 | 0) >> 2])) - $0_1));
    $0_1 = ($1_1 | 0) > (-1 | 0) ? $0_1 : Math_fround(-$0_1);
   }
   return Math_fround($0_1);
  }
  return Math_fround((($606(Math_fround($0_1)) | 0) & 2147483647 | 0) >>> 0 > 2139095040 >>> 0 ? $0_1 : (wasm2js_scratch_store_i32(2, (wasm2js_scratch_store_f32(Math_fround(1.570796251296997)), wasm2js_scratch_load_i32(2)) & 2147483647 | 0 | ((wasm2js_scratch_store_f32($0_1), wasm2js_scratch_load_i32(2)) & -2147483648 | 0) | 0), wasm2js_scratch_load_f32()));
 }
 
 function $606($0_1) {
  $0_1 = Math_fround($0_1);
  return (wasm2js_scratch_store_f32($0_1), wasm2js_scratch_load_i32(2)) | 0;
 }
 
 function $607($0_1, $1_1) {
  $0_1 = Math_fround($0_1);
  $1_1 = Math_fround($1_1);
  var $2_1 = 0, $4_1 = 0, $6_1 = Math_fround(0), $5_1 = 0, $3_1 = 0;
  label$1 : {
   label$2 : {
    if ((($608(Math_fround($1_1)) | 0) & 2147483647 | 0) >>> 0 > 2139095040 >>> 0) {
     break label$2
    }
    if ((($608(Math_fround($0_1)) | 0) & 2147483647 | 0) >>> 0 < 2139095041 >>> 0) {
     break label$1
    }
   }
   return Math_fround(Math_fround($0_1 + $1_1));
  }
  label$3 : {
   $2_1 = (wasm2js_scratch_store_f32($1_1), wasm2js_scratch_load_i32(2));
   if (($2_1 | 0) != (1065353216 | 0)) {
    break label$3
   }
   return Math_fround(Math_fround($605(Math_fround($0_1))));
  }
  $3_1 = ($2_1 >>> 30 | 0) & 2 | 0;
  $4_1 = (wasm2js_scratch_store_f32($0_1), wasm2js_scratch_load_i32(2));
  $5_1 = $3_1 | ($4_1 >>> 31 | 0) | 0;
  label$4 : {
   label$5 : {
    label$6 : {
     label$7 : {
      $4_1 = $4_1 & 2147483647 | 0;
      if ($4_1) {
       break label$7
      }
      $6_1 = $0_1;
      label$8 : {
       switch ($5_1 | 0) {
       case 2:
        break label$6;
       case 3:
        break label$8;
       default:
        break label$5;
       };
      }
      return Math_fround(Math_fround(-3.1415927410125732));
     }
     label$9 : {
      $2_1 = $2_1 & 2147483647 | 0;
      if (($2_1 | 0) == (2139095040 | 0)) {
       break label$9
      }
      label$10 : {
       if ($2_1) {
        break label$10
       }
       return Math_fround((wasm2js_scratch_store_i32(2, (wasm2js_scratch_store_f32(Math_fround(1.5707963705062866)), wasm2js_scratch_load_i32(2)) & 2147483647 | 0 | ((wasm2js_scratch_store_f32($0_1), wasm2js_scratch_load_i32(2)) & -2147483648 | 0) | 0), wasm2js_scratch_load_f32()));
      }
      label$11 : {
       label$12 : {
        if (($4_1 | 0) == (2139095040 | 0)) {
         break label$12
        }
        if (($2_1 + 218103808 | 0) >>> 0 >= $4_1 >>> 0) {
         break label$11
        }
       }
       return Math_fround((wasm2js_scratch_store_i32(2, (wasm2js_scratch_store_f32(Math_fround(1.5707963705062866)), wasm2js_scratch_load_i32(2)) & 2147483647 | 0 | ((wasm2js_scratch_store_f32($0_1), wasm2js_scratch_load_i32(2)) & -2147483648 | 0) | 0), wasm2js_scratch_load_f32()));
      }
      label$13 : {
       label$14 : {
        if (($4_1 + 218103808 | 0) >>> 0 >= $2_1 >>> 0) {
         break label$14
        }
        $6_1 = Math_fround(0.0);
        if ($3_1) {
         break label$13
        }
       }
       $6_1 = Math_fround($605(Math_fround(Math_fround($602(Math_fround(Math_fround($0_1 / $1_1)))))));
      }
      label$15 : {
       switch ($5_1 | 0) {
       case 1:
        return Math_fround(Math_fround(-$6_1));
       case 2:
        return Math_fround(Math_fround(Math_fround(3.1415927410125732) - Math_fround($6_1 + Math_fround(8.742277657347586e-08))));
       case 0:
        break label$5;
       default:
        break label$15;
       };
      }
      return Math_fround(Math_fround(Math_fround($6_1 + Math_fround(8.742277657347586e-08)) + Math_fround(-3.1415927410125732)));
     }
     if (($4_1 | 0) == (2139095040 | 0)) {
      break label$4
     }
     return Math_fround(Math_fround(HEAPF32[(($5_1 << 2 | 0) + 7424 | 0) >> 2]));
    }
    $6_1 = Math_fround(3.1415927410125732);
   }
   return Math_fround($6_1);
  }
  return Math_fround(Math_fround(HEAPF32[(($5_1 << 2 | 0) + 7408 | 0) >> 2]));
 }
 
 function $608($0_1) {
  $0_1 = Math_fround($0_1);
  return (wasm2js_scratch_store_f32($0_1), wasm2js_scratch_load_i32(2)) | 0;
 }
 
 function $609($0_1, $1_1, $2_1) {
  $0_1 = +$0_1;
  $1_1 = +$1_1;
  $2_1 = $2_1 | 0;
  var $8_1 = 0.0, i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $6_1 = 0.0, i64toi32_i32$4 = 0, $7_1 = 0.0, $4_1 = 0, $5_1 = 0, $5$hi = 0, $3_1 = 0, $17_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $16_1 = 0.0, $18_1 = 0.0;
  label$1 : {
   label$2 : {
    wasm2js_scratch_store_f64(+$0_1);
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    $5_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
    $5$hi = i64toi32_i32$0;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$1 = 2147483640;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    i64toi32_i32$2 = 1072010279;
    i64toi32_i32$3 = 1;
    $3_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
    if (!$3_1) {
     break label$2
    }
    break label$1;
   }
   $16_1 = $0_1;
   $18_1 = -$0_1;
   i64toi32_i32$0 = $5$hi;
   i64toi32_i32$3 = $5_1;
   i64toi32_i32$1 = -1;
   i64toi32_i32$2 = -1;
   if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
    $17_1 = 1
   } else {
    if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
     if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$2 >>> 0) {
      $19_1 = 0
     } else {
      $19_1 = 1
     }
     $20_1 = $19_1;
    } else {
     $20_1 = 0
    }
    $17_1 = $20_1;
   }
   $4_1 = $17_1;
   $0_1 = .7853981633974483 - ($4_1 ? $16_1 : $18_1) + (3.061616997868383e-17 - ($4_1 ? $1_1 : -$1_1));
   i64toi32_i32$3 = $5$hi;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 63;
   i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $21_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
    $21_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   $4_1 = $21_1;
   $1_1 = 0.0;
  }
  $6_1 = $0_1 * $0_1;
  $7_1 = $0_1 * $6_1;
  $8_1 = $6_1 * $6_1;
  $6_1 = $7_1 * .3333333333333341 + ($1_1 + $6_1 * ($1_1 + $7_1 * ($8_1 * ($8_1 * ($8_1 * ($8_1 * ($8_1 * -1.8558637485527546e-05 + 7.817944429395571e-05) + 5.880412408202641e-04) + 3.5920791075913124e-03) + .021869488294859542) + .13333333333320124 + $6_1 * ($8_1 * ($8_1 * ($8_1 * ($8_1 * ($8_1 * 2.590730518636337e-05 + 7.140724913826082e-05) + 2.464631348184699e-04) + 1.4562094543252903e-03) + .0088632398235993) + .05396825397622605))));
  $8_1 = $0_1 + $6_1;
  label$3 : {
   if ($3_1) {
    break label$3
   }
   $1_1 = +(1 - ($2_1 << 1 | 0) | 0 | 0);
   $8_1 = $0_1 + ($6_1 - $8_1 * $8_1 / ($8_1 + $1_1));
   $8_1 = $1_1 - ($8_1 + $8_1);
   return +($4_1 ? -$8_1 : $8_1);
  }
  label$4 : {
   if (!$2_1) {
    break label$4
   }
   $1_1 = -1.0 / $8_1;
   wasm2js_scratch_store_f64(+$8_1);
   i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
   i64toi32_i32$3 = wasm2js_scratch_load_i32(0 | 0) | 0;
   i64toi32_i32$2 = -1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$3 & i64toi32_i32$1 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$2 | 0);
   $7_1 = +wasm2js_scratch_load_f64();
   wasm2js_scratch_store_f64(+$1_1);
   i64toi32_i32$2 = wasm2js_scratch_load_i32(1 | 0) | 0;
   i64toi32_i32$0 = wasm2js_scratch_load_i32(0 | 0) | 0;
   i64toi32_i32$3 = -1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$0 & i64toi32_i32$1 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$3 | 0);
   $8_1 = +wasm2js_scratch_load_f64();
   $8_1 = $1_1 * ($7_1 * $8_1 + 1.0 + ($6_1 - ($7_1 - $0_1)) * $8_1) + $8_1;
  }
  return +$8_1;
 }
 
 function $610($0_1) {
  $0_1 = +$0_1;
  return +Math_floor($0_1);
 }
 
 function $611($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = $1_1 | 0;
  var $2_1 = 0.0, $3_1 = 0.0, $16_1 = 0.0;
  $2_1 = $0_1 * $0_1;
  $3_1 = $2_1 * $0_1;
  $16_1 = $3_1 * ($2_1 * .13339200271297674 + .3333313950307914) + $0_1;
  $0_1 = $2_1 * $2_1;
  $2_1 = $16_1 + $3_1 * $0_1 * ($2_1 * .024528318116654728 + .05338123784456704 + $0_1 * ($2_1 * .009465647849436732 + .002974357433599673));
  return Math_fround(Math_fround($1_1 ? -1.0 / $2_1 : $2_1));
 }
 
 function $612($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, $3$hi = 0, $3_1 = 0, $2_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $1_1 = 0, $28_1 = 0, $28$hi = 0, $29$hi = 0, $35_1 = 0, $35$hi = 0;
  $1_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
  $2_1 = 1;
  label$1 : {
   if (!((HEAPU8[$0_1 >> 0] | 0) & 128 | 0)) {
    break label$1
   }
   $2_1 = (HEAP32[($0_1 + 20 | 0) >> 2] | 0) >>> 0 > (HEAP32[($0_1 + 28 | 0) >> 2] | 0) >>> 0 ? 2 : 1;
  }
  label$2 : {
   i64toi32_i32$0 = 0;
   i64toi32_i32$0 = FUNCTION_TABLE[$1_1 | 0]($0_1, 0, i64toi32_i32$0, $2_1) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $3_1 = i64toi32_i32$0;
   $3$hi = i64toi32_i32$1;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
    $16_1 = 1
   } else {
    if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
     if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
      $17_1 = 0
     } else {
      $17_1 = 1
     }
     $18_1 = $17_1;
    } else {
     $18_1 = 0
    }
    $16_1 = $18_1;
   }
   if ($16_1) {
    break label$2
   }
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = (HEAP32[($0_1 + 8 | 0) >> 2] | 0) - (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
   $28_1 = i64toi32_i32$1;
   $28$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$1 = $28$hi;
   i64toi32_i32$0 = $28_1;
   i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
   i64toi32_i32$5 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) + i64toi32_i32$1 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
   $29$hi = i64toi32_i32$5;
   i64toi32_i32$3 = (HEAP32[($0_1 + 20 | 0) >> 2] | 0) - (HEAP32[($0_1 + 28 | 0) >> 2] | 0) | 0;
   i64toi32_i32$5 = i64toi32_i32$3 >> 31 | 0;
   $35_1 = i64toi32_i32$3;
   $35$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $29$hi;
   i64toi32_i32$2 = i64toi32_i32$4;
   i64toi32_i32$3 = $35$hi;
   i64toi32_i32$0 = $35_1;
   i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
   i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $3_1 = i64toi32_i32$1;
   $3$hi = i64toi32_i32$4;
  }
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$4;
  return i64toi32_i32$2 | 0;
 }
 
 function $613($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $1_1 = 0, $2_1 = 0, $2$hi = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
    break label$1
   }
   i64toi32_i32$0 = $612($0_1 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
   return i64toi32_i32$0 | 0;
  }
  $1_1 = $2179($0_1 | 0) | 0;
  i64toi32_i32$0 = $612($0_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $2_1 = i64toi32_i32$0;
  $2$hi = i64toi32_i32$1;
  label$2 : {
   if (!$1_1) {
    break label$2
   }
   $2180($0_1 | 0);
  }
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $614($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $615($0_1) {
  $0_1 = $0_1 | 0;
  var $5_1 = 0, $4_1 = 0, $3_1 = 0, $1_1 = 0, $2_1 = 0;
  $1_1 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$1
   }
   $1_1 = $2179($0_1 | 0) | 0;
  }
  $614($0_1 | 0);
  label$2 : {
   $2_1 = (HEAP32[$0_1 >> 2] | 0) & 1 | 0;
   if ($2_1) {
    break label$2
   }
   $3_1 = $658() | 0;
   label$3 : {
    $4_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
    if (!$4_1) {
     break label$3
    }
    HEAP32[($4_1 + 56 | 0) >> 2] = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
   }
   label$4 : {
    $5_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
    if (!$5_1) {
     break label$4
    }
    HEAP32[($5_1 + 52 | 0) >> 2] = $4_1;
   }
   label$5 : {
    if ((HEAP32[$3_1 >> 2] | 0 | 0) != ($0_1 | 0)) {
     break label$5
    }
    HEAP32[$3_1 >> 2] = $5_1;
   }
   $659();
  }
  $3_1 = $616($0_1 | 0) | 0;
  $4_1 = FUNCTION_TABLE[HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0]($0_1) | 0;
  label$6 : {
   $5_1 = HEAP32[($0_1 + 96 | 0) >> 2] | 0;
   if (!$5_1) {
    break label$6
   }
   $2161($5_1 | 0);
  }
  label$7 : {
   label$8 : {
    if ($2_1) {
     break label$8
    }
    $2161($0_1 | 0);
    break label$7;
   }
   if (!$1_1) {
    break label$7
   }
   $2180($0_1 | 0);
  }
  return $4_1 | $3_1 | 0 | 0;
 }
 
 function $616($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    label$3 : {
     if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
      break label$3
     }
     return $617($0_1 | 0) | 0 | 0;
    }
    $1_1 = $2179($0_1 | 0) | 0;
    $2_1 = $617($0_1 | 0) | 0;
    if (!$1_1) {
     break label$1
    }
    $2180($0_1 | 0);
    return $2_1 | 0;
   }
   $2_1 = 0;
   label$4 : {
    if (!(HEAP32[(0 + 24128 | 0) >> 2] | 0)) {
     break label$4
    }
    $2_1 = $616(HEAP32[(0 + 24128 | 0) >> 2] | 0 | 0) | 0;
   }
   label$5 : {
    $0_1 = HEAP32[($658() | 0) >> 2] | 0;
    if (!$0_1) {
     break label$5
    }
    label$6 : while (1) {
     $1_1 = 0;
     label$7 : {
      if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
       break label$7
      }
      $1_1 = $2179($0_1 | 0) | 0;
     }
     label$8 : {
      if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0) >>> 0 <= (HEAP32[($0_1 + 28 | 0) >> 2] | 0) >>> 0) {
       break label$8
      }
      $2_1 = $617($0_1 | 0) | 0 | $2_1 | 0;
     }
     label$9 : {
      if (!$1_1) {
       break label$9
      }
      $2180($0_1 | 0);
     }
     $0_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
     if ($0_1) {
      continue label$6
     }
     break label$6;
    };
   }
   $659();
  }
  return $2_1 | 0;
 }
 
 function $617($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $1_1 = 0, $2_1 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0) >>> 0 <= (HEAP32[($0_1 + 28 | 0) >> 2] | 0) >>> 0) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0]($0_1, 0, 0) | 0;
   if (HEAP32[($0_1 + 20 | 0) >> 2] | 0) {
    break label$1
   }
   return -1 | 0;
  }
  label$2 : {
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   if ($1_1 >>> 0 >= $2_1 >>> 0) {
    break label$2
   }
   i64toi32_i32$1 = $1_1 - $2_1 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
   i64toi32_i32$0 = FUNCTION_TABLE[HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0]($0_1, i64toi32_i32$1, i64toi32_i32$0, 1) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  }
  HEAP32[($0_1 + 28 | 0) >> 2] = 0;
  i64toi32_i32$0 = $0_1;
  i64toi32_i32$1 = 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$0 = $0_1;
  i64toi32_i32$1 = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = i64toi32_i32$1;
  return 0 | 0;
 }
 
 function $618($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $11_1 = 0, $11$hi = 0;
  label$1 : {
   if (($2_1 | 0) != (1 | 0)) {
    break label$1
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$1 = (HEAP32[($0_1 + 8 | 0) >> 2] | 0) - (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
   $11_1 = i64toi32_i32$1;
   $11$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = $11$hi;
   i64toi32_i32$3 = $11_1;
   i64toi32_i32$5 = (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$1 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
   $1_1 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
   $1$hi = i64toi32_i32$5;
  }
  label$2 : {
   label$3 : {
    if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0) >>> 0 <= (HEAP32[($0_1 + 28 | 0) >> 2] | 0) >>> 0) {
     break label$3
    }
    FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0]($0_1, 0, 0) | 0;
    if (!(HEAP32[($0_1 + 20 | 0) >> 2] | 0)) {
     break label$2
    }
   }
   HEAP32[($0_1 + 28 | 0) >> 2] = 0;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$5 = 0;
   HEAP32[($0_1 + 16 | 0) >> 2] = 0;
   HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$5;
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$5 = FUNCTION_TABLE[HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0]($0_1, $1_1, i64toi32_i32$5, $2_1) | 0;
   i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$2 | 0) < (i64toi32_i32$5 | 0)) {
    $12_1 = 1
   } else {
    if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$5 | 0)) {
     if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
      $13_1 = 0
     } else {
      $13_1 = 1
     }
     $14_1 = $13_1;
    } else {
     $14_1 = 0
    }
    $12_1 = $14_1;
   }
   if ($12_1) {
    break label$2
   }
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = 0;
   HEAP32[($0_1 + 4 | 0) >> 2] = 0;
   HEAP32[($0_1 + 8 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) & -17 | 0;
   return 0 | 0;
  }
  return -1 | 0;
 }
 
 function $619($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, $3_1 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
    break label$1
   }
   i64toi32_i32$0 = $1$hi;
   return $618($0_1 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0) | 0 | 0;
  }
  $3_1 = $2179($0_1 | 0) | 0;
  i64toi32_i32$0 = $1$hi;
  $2_1 = $618($0_1 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0) | 0;
  label$2 : {
   if (!$3_1) {
    break label$2
   }
   $2180($0_1 | 0);
  }
  return $2_1 | 0;
 }
 
 function $620($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  label$1 : {
   label$2 : {
    $2_1 = $1_1 & 255 | 0;
    if (!$2_1) {
     break label$2
    }
    label$3 : {
     if (!($0_1 & 3 | 0)) {
      break label$3
     }
     label$4 : while (1) {
      $3_1 = HEAPU8[$0_1 >> 0] | 0;
      if (!$3_1) {
       break label$1
      }
      if (($3_1 | 0) == ($1_1 & 255 | 0 | 0)) {
       break label$1
      }
      $0_1 = $0_1 + 1 | 0;
      if ($0_1 & 3 | 0) {
       continue label$4
      }
      break label$4;
     };
    }
    label$5 : {
     $3_1 = HEAP32[$0_1 >> 2] | 0;
     if ((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0) {
      break label$5
     }
     $2_1 = Math_imul($2_1, 16843009);
     label$6 : while (1) {
      $3_1 = $3_1 ^ $2_1 | 0;
      if ((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0) {
       break label$5
      }
      $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
      $0_1 = $0_1 + 4 | 0;
      if (!((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0)) {
       continue label$6
      }
      break label$6;
     };
    }
    label$7 : {
     label$8 : while (1) {
      $3_1 = $0_1;
      $2_1 = HEAPU8[$3_1 >> 0] | 0;
      if (!$2_1) {
       break label$7
      }
      $0_1 = $3_1 + 1 | 0;
      if (($2_1 | 0) != ($1_1 & 255 | 0 | 0)) {
       continue label$8
      }
      break label$8;
     };
    }
    return $3_1 | 0;
   }
   return $0_1 + ($2181($0_1 | 0) | 0) | 0 | 0;
  }
  return $0_1 | 0;
 }
 
 function $621($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $0_1 = $620($0_1 | 0, $1_1 | 0) | 0;
  return ((HEAPU8[$0_1 >> 0] | 0 | 0) == ($1_1 & 255 | 0 | 0) ? $0_1 : 0) | 0;
 }
 
 function $622($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ($0_1 >>> 0 < -4095 >>> 0) {
    break label$1
   }
   HEAP32[($587() | 0) >> 2] = 0 - $0_1 | 0;
   $0_1 = -1;
  }
  return $0_1 | 0;
 }
 
 function $623($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 16 | 0) >> 2] = $1_1;
  $4_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  HEAP32[($3_1 + 20 | 0) >> 2] = $2_1 - (($4_1 | 0) != (0 | 0)) | 0;
  $5_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  HEAP32[($3_1 + 28 | 0) >> 2] = $4_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $5_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if (!($682(fimport$90(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, $3_1 + 16 | 0 | 0, 2 | 0, $3_1 + 12 | 0 | 0) | 0 | 0) | 0)) {
       break label$4
      }
      $2_1 = -1;
      HEAP32[($3_1 + 12 | 0) >> 2] = -1;
      break label$3;
     }
     $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
     if (($4_1 | 0) > (0 | 0)) {
      break label$2
     }
     $2_1 = $4_1;
    }
    HEAP32[$0_1 >> 2] = ($2_1 & 48 | 0) ^ 16 | 0 | (HEAP32[$0_1 >> 2] | 0) | 0;
    break label$1;
   }
   label$5 : {
    $6_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
    if ($4_1 >>> 0 > $6_1 >>> 0) {
     break label$5
    }
    $2_1 = $4_1;
    break label$1;
   }
   $5_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
   HEAP32[($0_1 + 4 | 0) >> 2] = $5_1;
   HEAP32[($0_1 + 8 | 0) >> 2] = $5_1 + ($4_1 - $6_1 | 0) | 0;
   if (!(HEAP32[($0_1 + 48 | 0) >> 2] | 0)) {
    break label$1
   }
   HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
   HEAP8[(($2_1 + $1_1 | 0) + -1 | 0) >> 0] = HEAPU8[$5_1 >> 0] | 0;
  }
  global$0 = $3_1 + 32 | 0;
  return $2_1 | 0;
 }
 
 function $624($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if ($621(7440 | 0, HEAP8[$1_1 >> 0] | 0 | 0) | 0) {
       break label$4
      }
      HEAP32[($587() | 0) >> 2] = 28;
      break label$3;
     }
     $3_1 = $2160(1176 | 0) | 0;
     if ($3_1) {
      break label$2
     }
    }
    $3_1 = 0;
    break label$1;
   }
   $2174($3_1 | 0, 0 | 0, 144 | 0) | 0;
   label$5 : {
    if ($621($1_1 | 0, 43 | 0) | 0) {
     break label$5
    }
    HEAP32[$3_1 >> 2] = (HEAPU8[$1_1 >> 0] | 0 | 0) == (114 | 0) ? 8 : 4;
   }
   label$6 : {
    label$7 : {
     if ((HEAPU8[$1_1 >> 0] | 0 | 0) == (97 | 0)) {
      break label$7
     }
     $1_1 = HEAP32[$3_1 >> 2] | 0;
     break label$6;
    }
    label$8 : {
     $1_1 = fimport$88($0_1 | 0, 3 | 0, 0 | 0) | 0;
     if ($1_1 & 1024 | 0) {
      break label$8
     }
     HEAP32[($2_1 + 16 | 0) >> 2] = $1_1 | 1024 | 0;
     fimport$88($0_1 | 0, 4 | 0, $2_1 + 16 | 0 | 0) | 0;
    }
    $1_1 = HEAP32[$3_1 >> 2] | 0 | 128 | 0;
    HEAP32[$3_1 >> 2] = $1_1;
   }
   HEAP8[($3_1 + 75 | 0) >> 0] = 255;
   HEAP32[($3_1 + 48 | 0) >> 2] = 1024;
   HEAP32[($3_1 + 60 | 0) >> 2] = $0_1;
   HEAP32[($3_1 + 44 | 0) >> 2] = $3_1 + 152 | 0;
   label$9 : {
    if ($1_1 & 8 | 0) {
     break label$9
    }
    HEAP32[$2_1 >> 2] = $2_1 + 24 | 0;
    if (fimport$89($0_1 | 0, 21523 | 0, $2_1 | 0) | 0) {
     break label$9
    }
    HEAP8[($3_1 + 75 | 0) >> 0] = 10;
   }
   HEAP32[($3_1 + 40 | 0) >> 2] = 201;
   HEAP32[($3_1 + 36 | 0) >> 2] = 202;
   HEAP32[($3_1 + 32 | 0) >> 2] = 203;
   HEAP32[($3_1 + 12 | 0) >> 2] = 204;
   label$10 : {
    if (HEAP32[(0 + 331396 | 0) >> 2] | 0) {
     break label$10
    }
    HEAP32[($3_1 + 76 | 0) >> 2] = -1;
   }
   $3_1 = $657($3_1 | 0) | 0;
  }
  global$0 = $2_1 + 32 | 0;
  return $3_1 | 0;
 }
 
 function $625($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($621(7444 | 0, HEAP8[$1_1 >> 0] | 0 | 0) | 0) {
      break label$3
     }
     HEAP32[($587() | 0) >> 2] = 28;
     break label$2;
    }
    $3_1 = $661($1_1 | 0) | 0;
    HEAP32[$2_1 >> 2] = 438;
    $4_1 = 0;
    $0_1 = $622(fimport$87($0_1 | 0, $3_1 | 32768 | 0 | 0, $2_1 | 0) | 0 | 0) | 0;
    if (($0_1 | 0) < (0 | 0)) {
     break label$1
    }
    $4_1 = $624($0_1 | 0, $1_1 | 0) | 0;
    if ($4_1) {
     break label$1
    }
    fimport$91($0_1 | 0) | 0;
   }
   $4_1 = 0;
  }
  global$0 = $2_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $626($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $8_1 = 0, $5_1 = 0, $4_1 = 0, $7_1 = 0;
  $4_1 = 0;
  label$1 : {
   if ((HEAP32[($3_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$1
   }
   $4_1 = $2179($3_1 | 0) | 0;
  }
  $5_1 = Math_imul($2_1, $1_1);
  $6_1 = HEAPU8[($3_1 + 74 | 0) >> 0] | 0;
  HEAP8[($3_1 + 74 | 0) >> 0] = $6_1 + -1 | 0 | $6_1 | 0;
  label$2 : {
   label$3 : {
    $7_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    $6_1 = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) - $7_1 | 0;
    if (($6_1 | 0) >= (1 | 0)) {
     break label$3
    }
    $6_1 = $5_1;
    break label$2;
   }
   $8_1 = $6_1 >>> 0 < $5_1 >>> 0 ? $6_1 : $5_1;
   $2173($0_1 | 0, $7_1 | 0, $8_1 | 0) | 0;
   HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) + $8_1 | 0;
   $6_1 = $5_1 - $8_1 | 0;
   $0_1 = $0_1 + $8_1 | 0;
  }
  label$4 : {
   if (!$6_1) {
    break label$4
   }
   label$5 : while (1) {
    label$6 : {
     label$7 : {
      if ($633($3_1 | 0) | 0) {
       break label$7
      }
      $8_1 = FUNCTION_TABLE[HEAP32[($3_1 + 32 | 0) >> 2] | 0 | 0]($3_1, $0_1, $6_1) | 0;
      if (($8_1 + 1 | 0) >>> 0 > 1 >>> 0) {
       break label$6
      }
     }
     label$8 : {
      if (!$4_1) {
       break label$8
      }
      $2180($3_1 | 0);
     }
     return (($5_1 - $6_1 | 0) >>> 0) / ($1_1 >>> 0) | 0 | 0;
    }
    $0_1 = $0_1 + $8_1 | 0;
    $6_1 = $6_1 - $8_1 | 0;
    if ($6_1) {
     continue label$5
    }
    break label$5;
   };
  }
  $0_1 = $1_1 ? $2_1 : 0;
  label$9 : {
   if (!$4_1) {
    break label$9
   }
   $2180($3_1 | 0);
  }
  return $0_1 | 0;
 }
 
 function $627($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 160 | 0;
  global$0 = $4_1;
  $2173($4_1 + 8 | 0 | 0, 7448 | 0, 144 | 0) | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (($1_1 + -1 | 0) >>> 0 < 2147483647 >>> 0) {
      break label$3
     }
     if ($1_1) {
      break label$2
     }
     $0_1 = $4_1 + 159 | 0;
     $1_1 = 1;
    }
    HEAP32[($4_1 + 52 | 0) >> 2] = $0_1;
    HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
    $5_1 = -2 - $0_1 | 0;
    $1_1 = $1_1 >>> 0 > $5_1 >>> 0 ? $5_1 : $1_1;
    HEAP32[($4_1 + 56 | 0) >> 2] = $1_1;
    $0_1 = $0_1 + $1_1 | 0;
    HEAP32[($4_1 + 36 | 0) >> 2] = $0_1;
    HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
    $0_1 = $650($4_1 + 8 | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
    if (!$1_1) {
     break label$1
    }
    $1_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
    HEAP8[($1_1 - (($1_1 | 0) == (HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0)) | 0) >> 0] = 0;
    break label$1;
   }
   HEAP32[($587() | 0) >> 2] = 61;
   $0_1 = -1;
  }
  global$0 = $4_1 + 160 | 0;
  return $0_1 | 0;
 }
 
 function $628($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $6_1 = $3_1;
  $3_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) - $3_1 | 0;
  $3_1 = $3_1 >>> 0 > $2_1 >>> 0 ? $2_1 : $3_1;
  $2173($6_1 | 0, $1_1 | 0, $3_1 | 0) | 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = (HEAP32[($0_1 + 20 | 0) >> 2] | 0) + $3_1 | 0;
  return $2_1 | 0;
 }
 
 function $629($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 160 | 0;
  global$0 = $4_1;
  $2173($4_1 + 8 | 0 | 0, 7448 | 0, 144 | 0) | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (($1_1 + -1 | 0) >>> 0 < 2147483647 >>> 0) {
      break label$3
     }
     if ($1_1) {
      break label$2
     }
     $0_1 = $4_1 + 159 | 0;
     $1_1 = 1;
    }
    HEAP32[($4_1 + 52 | 0) >> 2] = $0_1;
    HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
    $5_1 = -2 - $0_1 | 0;
    $1_1 = $1_1 >>> 0 > $5_1 >>> 0 ? $5_1 : $1_1;
    HEAP32[($4_1 + 56 | 0) >> 2] = $1_1;
    $0_1 = $0_1 + $1_1 | 0;
    HEAP32[($4_1 + 36 | 0) >> 2] = $0_1;
    HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
    $0_1 = $654($4_1 + 8 | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
    if (!$1_1) {
     break label$1
    }
    $1_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
    HEAP8[($1_1 - (($1_1 | 0) == (HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0)) | 0) >> 0] = 0;
    break label$1;
   }
   HEAP32[($587() | 0) >> 2] = 61;
   $0_1 = -1;
  }
  global$0 = $4_1 + 160 | 0;
  return $0_1 | 0;
 }
 
 function $630($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $629($0_1 | 0, 2147483647 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $631($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
  $2_1 = $630($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $632($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $1$hi;
    if ($682($2196(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 & 255 | 0 | 0, $3_1 + 8 | 0 | 0) | 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$0 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
    $1_1 = i64toi32_i32$0;
    $1$hi = i64toi32_i32$1;
    break label$1;
   }
   i64toi32_i32$1 = -1;
   $1_1 = -1;
   $1$hi = i64toi32_i32$1;
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$1 = -1;
   HEAP32[($3_1 + 8 | 0) >> 2] = -1;
   HEAP32[($3_1 + 12 | 0) >> 2] = i64toi32_i32$1;
  }
  global$0 = $3_1 + 16 | 0;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$0 = $1_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $633($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = HEAPU8[($0_1 + 74 | 0) >> 0] | 0;
  HEAP8[($0_1 + 74 | 0) >> 0] = $1_1 + -1 | 0 | $1_1 | 0;
  label$1 : {
   if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0) >>> 0 <= (HEAP32[($0_1 + 28 | 0) >> 2] | 0) >>> 0) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0]($0_1, 0, 0) | 0;
  }
  HEAP32[($0_1 + 28 | 0) >> 2] = 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 0;
  label$2 : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!($1_1 & 4 | 0)) {
    break label$2
   }
   HEAP32[$0_1 >> 2] = $1_1 | 32 | 0;
   return -1 | 0;
  }
  $2_1 = (HEAP32[($0_1 + 44 | 0) >> 2] | 0) + (HEAP32[($0_1 + 48 | 0) >> 2] | 0) | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
  return ($1_1 << 27 | 0) >> 31 | 0 | 0;
 }
 
 function $634($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 + -48 | 0) >>> 0 < 10 >>> 0 | 0;
 }
 
 function $635($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $634($0_1 | 0) | 0 | 0;
 }
 
 function $636($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = ($2_1 | 0) != (0 | 0);
  label$1 : {
   label$2 : {
    label$3 : {
     if (!$2_1) {
      break label$3
     }
     if (!($0_1 & 3 | 0)) {
      break label$3
     }
     $4_1 = $1_1 & 255 | 0;
     label$4 : while (1) {
      if ((HEAPU8[$0_1 >> 0] | 0 | 0) == ($4_1 | 0)) {
       break label$2
      }
      $0_1 = $0_1 + 1 | 0;
      $2_1 = $2_1 + -1 | 0;
      $3_1 = ($2_1 | 0) != (0 | 0);
      if (!$2_1) {
       break label$3
      }
      if ($0_1 & 3 | 0) {
       continue label$4
      }
      break label$4;
     };
    }
    if (!$3_1) {
     break label$1
    }
   }
   label$5 : {
    if ((HEAPU8[$0_1 >> 0] | 0 | 0) == ($1_1 & 255 | 0 | 0)) {
     break label$5
    }
    if ($2_1 >>> 0 < 4 >>> 0) {
     break label$5
    }
    $4_1 = Math_imul($1_1 & 255 | 0, 16843009);
    label$6 : while (1) {
     $3_1 = (HEAP32[$0_1 >> 2] | 0) ^ $4_1 | 0;
     if ((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0) {
      break label$5
     }
     $0_1 = $0_1 + 4 | 0;
     $2_1 = $2_1 + -4 | 0;
     if ($2_1 >>> 0 > 3 >>> 0) {
      continue label$6
     }
     break label$6;
    };
   }
   if (!$2_1) {
    break label$1
   }
   $3_1 = $1_1 & 255 | 0;
   label$7 : while (1) {
    label$8 : {
     if ((HEAPU8[$0_1 >> 0] | 0 | 0) != ($3_1 | 0)) {
      break label$8
     }
     return $0_1 | 0;
    }
    $0_1 = $0_1 + 1 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue label$7
    }
    break label$7;
   };
  }
  return 0 | 0;
 }
 
 function $637($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = 1;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ($1_1 >>> 0 <= 127 >>> 0) {
     break label$1
    }
    label$3 : {
     label$4 : {
      if (HEAP32[(HEAP32[(($638() | 0) + 176 | 0) >> 2] | 0) >> 2] | 0) {
       break label$4
      }
      if (($1_1 & -128 | 0 | 0) == (57216 | 0)) {
       break label$1
      }
      HEAP32[($587() | 0) >> 2] = 25;
      break label$3;
     }
     label$5 : {
      if ($1_1 >>> 0 > 2047 >>> 0) {
       break label$5
      }
      HEAP8[($0_1 + 1 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
      HEAP8[$0_1 >> 0] = $1_1 >>> 6 | 0 | 192 | 0;
      return 2 | 0;
     }
     label$6 : {
      label$7 : {
       if ($1_1 >>> 0 < 55296 >>> 0) {
        break label$7
       }
       if (($1_1 & -8192 | 0 | 0) != (57344 | 0)) {
        break label$6
       }
      }
      HEAP8[($0_1 + 2 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
      HEAP8[$0_1 >> 0] = $1_1 >>> 12 | 0 | 224 | 0;
      HEAP8[($0_1 + 1 | 0) >> 0] = ($1_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
      return 3 | 0;
     }
     label$8 : {
      if (($1_1 + -65536 | 0) >>> 0 > 1048575 >>> 0) {
       break label$8
      }
      HEAP8[($0_1 + 3 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
      HEAP8[$0_1 >> 0] = $1_1 >>> 18 | 0 | 240 | 0;
      HEAP8[($0_1 + 2 | 0) >> 0] = ($1_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
      HEAP8[($0_1 + 1 | 0) >> 0] = ($1_1 >>> 12 | 0) & 63 | 0 | 128 | 0;
      return 4 | 0;
     }
     HEAP32[($587() | 0) >> 2] = 25;
    }
    $3_1 = -1;
   }
   return $3_1 | 0;
  }
  HEAP8[$0_1 >> 0] = $1_1;
  return 1 | 0;
 }
 
 function $638() {
  return $584() | 0 | 0;
 }
 
 function $639($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return 0 | 0;
  }
  return $637($0_1 | 0, $1_1 | 0, 0 | 0) | 0 | 0;
 }
 
 function $640($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $2_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, $3_1 = 0, $10_1 = 0, $3$hi = 0;
  label$1 : {
   wasm2js_scratch_store_f64(+$0_1);
   i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
   $3_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
   $3$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $3_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 52;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $10_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $10_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   $2_1 = $10_1 & 2047 | 0;
   if (($2_1 | 0) == (2047 | 0)) {
    break label$1
   }
   label$2 : {
    if ($2_1) {
     break label$2
    }
    label$3 : {
     label$4 : {
      if ($0_1 != 0.0) {
       break label$4
      }
      $2_1 = 0;
      break label$3;
     }
     $0_1 = +$640(+($0_1 * 18446744073709551615.0), $1_1 | 0);
     $2_1 = (HEAP32[$1_1 >> 2] | 0) + -64 | 0;
    }
    HEAP32[$1_1 >> 2] = $2_1;
    return +$0_1;
   }
   HEAP32[$1_1 >> 2] = $2_1 + -1022 | 0;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$2 = -2146435073;
   i64toi32_i32$3 = -1;
   i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
   i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
   i64toi32_i32$0 = 1071644672;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 | i64toi32_i32$3 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
   $0_1 = +wasm2js_scratch_load_f64();
  }
  return +$0_1;
 }
 
 function $641($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $5_1 = global$0 - 208 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 204 | 0) >> 2] = $2_1;
  $2_1 = 0;
  $2174($5_1 + 160 | 0 | 0, 0 | 0, 40 | 0) | 0;
  HEAP32[($5_1 + 200 | 0) >> 2] = HEAP32[($5_1 + 204 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (($642(0 | 0, $1_1 | 0, $5_1 + 200 | 0 | 0, $5_1 + 80 | 0 | 0, $5_1 + 160 | 0 | 0, $3_1 | 0, $4_1 | 0) | 0 | 0) >= (0 | 0)) {
     break label$2
    }
    $1_1 = -1;
    break label$1;
   }
   label$3 : {
    if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
     break label$3
    }
    $2_1 = $2179($0_1 | 0) | 0;
   }
   $6_1 = HEAP32[$0_1 >> 2] | 0;
   label$4 : {
    if ((HEAP8[($0_1 + 74 | 0) >> 0] | 0 | 0) > (0 | 0)) {
     break label$4
    }
    HEAP32[$0_1 >> 2] = $6_1 & -33 | 0;
   }
   $6_1 = $6_1 & 32 | 0;
   label$5 : {
    label$6 : {
     if (!(HEAP32[($0_1 + 48 | 0) >> 2] | 0)) {
      break label$6
     }
     $1_1 = $642($0_1 | 0, $1_1 | 0, $5_1 + 200 | 0 | 0, $5_1 + 80 | 0 | 0, $5_1 + 160 | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
     break label$5;
    }
    HEAP32[($0_1 + 48 | 0) >> 2] = 80;
    HEAP32[($0_1 + 16 | 0) >> 2] = $5_1 + 80 | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $5_1;
    HEAP32[($0_1 + 20 | 0) >> 2] = $5_1;
    $7_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
    HEAP32[($0_1 + 44 | 0) >> 2] = $5_1;
    $1_1 = $642($0_1 | 0, $1_1 | 0, $5_1 + 200 | 0 | 0, $5_1 + 80 | 0 | 0, $5_1 + 160 | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
    if (!$7_1) {
     break label$5
    }
    FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0]($0_1, 0, 0) | 0;
    HEAP32[($0_1 + 48 | 0) >> 2] = 0;
    HEAP32[($0_1 + 44 | 0) >> 2] = $7_1;
    HEAP32[($0_1 + 28 | 0) >> 2] = 0;
    HEAP32[($0_1 + 16 | 0) >> 2] = 0;
    $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
    HEAP32[($0_1 + 20 | 0) >> 2] = 0;
    $1_1 = $3_1 ? $1_1 : -1;
   }
   $3_1 = HEAP32[$0_1 >> 2] | 0;
   HEAP32[$0_1 >> 2] = $3_1 | $6_1 | 0;
   $1_1 = $3_1 & 32 | 0 ? -1 : $1_1;
   if (!$2_1) {
    break label$1
   }
   $2180($0_1 | 0);
  }
  global$0 = $5_1 + 208 | 0;
  return $1_1 | 0;
 }
 
 function $642($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $19_1 = 0, i64toi32_i32$1 = 0, $12_1 = 0, $20_1 = 0, i64toi32_i32$0 = 0, $17_1 = 0, $11_1 = 0, $18_1 = 0, i64toi32_i32$2 = 0, $16_1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, $9_1 = 0, $22_1 = 0, $22$hi = 0, $10_1 = 0, $21_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $8_1 = 0, $275_1 = 0;
  $7_1 = global$0 - 80 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
  $8_1 = $7_1 + 55 | 0;
  $9_1 = $7_1 + 56 | 0;
  $10_1 = 0;
  $11_1 = 0;
  $1_1 = 0;
  label$1 : {
   label$2 : while (1) {
    label$3 : {
     if (($11_1 | 0) < (0 | 0)) {
      break label$3
     }
     label$4 : {
      if (($1_1 | 0) <= (2147483647 - $11_1 | 0 | 0)) {
       break label$4
      }
      HEAP32[($587() | 0) >> 2] = 61;
      $11_1 = -1;
      break label$3;
     }
     $11_1 = $1_1 + $11_1 | 0;
    }
    $12_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
    $1_1 = $12_1;
    label$5 : {
     label$6 : {
      label$7 : {
       label$8 : {
        label$9 : {
         $13_1 = HEAPU8[$1_1 >> 0] | 0;
         if (!$13_1) {
          break label$9
         }
         label$10 : while (1) {
          label$11 : {
           label$12 : {
            label$13 : {
             $13_1 = $13_1 & 255 | 0;
             if ($13_1) {
              break label$13
             }
             $13_1 = $1_1;
             break label$12;
            }
            if (($13_1 | 0) != (37 | 0)) {
             break label$11
            }
            $13_1 = $1_1;
            label$14 : while (1) {
             if ((HEAPU8[($1_1 + 1 | 0) >> 0] | 0 | 0) != (37 | 0)) {
              break label$12
             }
             $14_1 = $1_1 + 2 | 0;
             HEAP32[($7_1 + 76 | 0) >> 2] = $14_1;
             $13_1 = $13_1 + 1 | 0;
             $15_1 = HEAPU8[($1_1 + 2 | 0) >> 0] | 0;
             $1_1 = $14_1;
             if (($15_1 | 0) == (37 | 0)) {
              continue label$14
             }
             break label$14;
            };
           }
           $1_1 = $13_1 - $12_1 | 0;
           label$15 : {
            if (!$0_1) {
             break label$15
            }
            $643($0_1 | 0, $12_1 | 0, $1_1 | 0);
           }
           if ($1_1) {
            continue label$2
           }
           $1_1 = $634(HEAP8[((HEAP32[($7_1 + 76 | 0) >> 2] | 0) + 1 | 0) >> 0] | 0 | 0) | 0;
           $13_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
           label$16 : {
            label$17 : {
             if (!$1_1) {
              break label$17
             }
             if ((HEAPU8[($13_1 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
              break label$17
             }
             $1_1 = $13_1 + 3 | 0;
             $16_1 = (HEAP8[($13_1 + 1 | 0) >> 0] | 0) + -48 | 0;
             $10_1 = 1;
             break label$16;
            }
            $1_1 = $13_1 + 1 | 0;
            $16_1 = -1;
           }
           HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
           $17_1 = 0;
           label$18 : {
            label$19 : {
             $15_1 = HEAP8[$1_1 >> 0] | 0;
             $14_1 = $15_1 + -32 | 0;
             if ($14_1 >>> 0 <= 31 >>> 0) {
              break label$19
             }
             $13_1 = $1_1;
             break label$18;
            }
            $17_1 = 0;
            $13_1 = $1_1;
            $14_1 = 1 << $14_1 | 0;
            if (!($14_1 & 75913 | 0)) {
             break label$18
            }
            label$20 : while (1) {
             $13_1 = $1_1 + 1 | 0;
             HEAP32[($7_1 + 76 | 0) >> 2] = $13_1;
             $17_1 = $14_1 | $17_1 | 0;
             $15_1 = HEAP8[($1_1 + 1 | 0) >> 0] | 0;
             $14_1 = $15_1 + -32 | 0;
             if ($14_1 >>> 0 >= 32 >>> 0) {
              break label$18
             }
             $1_1 = $13_1;
             $14_1 = 1 << $14_1 | 0;
             if ($14_1 & 75913 | 0) {
              continue label$20
             }
             break label$20;
            };
           }
           label$21 : {
            label$22 : {
             if (($15_1 | 0) != (42 | 0)) {
              break label$22
             }
             label$23 : {
              label$24 : {
               if (!($634(HEAP8[($13_1 + 1 | 0) >> 0] | 0 | 0) | 0)) {
                break label$24
               }
               $13_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
               if ((HEAPU8[($13_1 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
                break label$24
               }
               HEAP32[((((HEAP8[($13_1 + 1 | 0) >> 0] | 0) << 2 | 0) + $4_1 | 0) + -192 | 0) >> 2] = 10;
               $1_1 = $13_1 + 3 | 0;
               $18_1 = HEAP32[((((HEAP8[($13_1 + 1 | 0) >> 0] | 0) << 3 | 0) + $3_1 | 0) + -384 | 0) >> 2] | 0;
               $10_1 = 1;
               break label$23;
              }
              if ($10_1) {
               break label$8
              }
              $10_1 = 0;
              $18_1 = 0;
              label$25 : {
               if (!$0_1) {
                break label$25
               }
               $1_1 = HEAP32[$2_1 >> 2] | 0;
               HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
               $18_1 = HEAP32[$1_1 >> 2] | 0;
              }
              $1_1 = (HEAP32[($7_1 + 76 | 0) >> 2] | 0) + 1 | 0;
             }
             HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
             if (($18_1 | 0) > (-1 | 0)) {
              break label$21
             }
             $18_1 = 0 - $18_1 | 0;
             $17_1 = $17_1 | 8192 | 0;
             break label$21;
            }
            $18_1 = $644($7_1 + 76 | 0 | 0) | 0;
            if (($18_1 | 0) < (0 | 0)) {
             break label$8
            }
            $1_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
           }
           $19_1 = -1;
           label$26 : {
            if ((HEAPU8[$1_1 >> 0] | 0 | 0) != (46 | 0)) {
             break label$26
            }
            label$27 : {
             if ((HEAPU8[($1_1 + 1 | 0) >> 0] | 0 | 0) != (42 | 0)) {
              break label$27
             }
             label$28 : {
              if (!($634(HEAP8[($1_1 + 2 | 0) >> 0] | 0 | 0) | 0)) {
               break label$28
              }
              $1_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
              if ((HEAPU8[($1_1 + 3 | 0) >> 0] | 0 | 0) != (36 | 0)) {
               break label$28
              }
              HEAP32[((((HEAP8[($1_1 + 2 | 0) >> 0] | 0) << 2 | 0) + $4_1 | 0) + -192 | 0) >> 2] = 10;
              $19_1 = HEAP32[((((HEAP8[($1_1 + 2 | 0) >> 0] | 0) << 3 | 0) + $3_1 | 0) + -384 | 0) >> 2] | 0;
              $1_1 = $1_1 + 4 | 0;
              HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
              break label$26;
             }
             if ($10_1) {
              break label$8
             }
             label$29 : {
              label$30 : {
               if ($0_1) {
                break label$30
               }
               $19_1 = 0;
               break label$29;
              }
              $1_1 = HEAP32[$2_1 >> 2] | 0;
              HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
              $19_1 = HEAP32[$1_1 >> 2] | 0;
             }
             $1_1 = (HEAP32[($7_1 + 76 | 0) >> 2] | 0) + 2 | 0;
             HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
             break label$26;
            }
            HEAP32[($7_1 + 76 | 0) >> 2] = $1_1 + 1 | 0;
            $19_1 = $644($7_1 + 76 | 0 | 0) | 0;
            $1_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
           }
           $13_1 = 0;
           label$31 : while (1) {
            $14_1 = $13_1;
            $20_1 = -1;
            if (((HEAP8[$1_1 >> 0] | 0) + -65 | 0) >>> 0 > 57 >>> 0) {
             break label$1
            }
            $15_1 = $1_1 + 1 | 0;
            HEAP32[($7_1 + 76 | 0) >> 2] = $15_1;
            $13_1 = HEAP8[$1_1 >> 0] | 0;
            $1_1 = $15_1;
            $13_1 = HEAPU8[(($13_1 + Math_imul($14_1, 58) | 0) + 7551 | 0) >> 0] | 0;
            if (($13_1 + -1 | 0) >>> 0 < 8 >>> 0) {
             continue label$31
            }
            break label$31;
           };
           label$32 : {
            label$33 : {
             label$34 : {
              if (($13_1 | 0) == (19 | 0)) {
               break label$34
              }
              if (!$13_1) {
               break label$1
              }
              label$35 : {
               if (($16_1 | 0) < (0 | 0)) {
                break label$35
               }
               HEAP32[($4_1 + ($16_1 << 2 | 0) | 0) >> 2] = $13_1;
               i64toi32_i32$2 = $3_1 + ($16_1 << 3 | 0) | 0;
               i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
               i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
               $275_1 = i64toi32_i32$0;
               i64toi32_i32$0 = $7_1;
               HEAP32[($7_1 + 64 | 0) >> 2] = $275_1;
               HEAP32[($7_1 + 68 | 0) >> 2] = i64toi32_i32$1;
               break label$33;
              }
              if (!$0_1) {
               break label$5
              }
              $645($7_1 + 64 | 0 | 0, $13_1 | 0, $2_1 | 0, $6_1 | 0);
              $15_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
              break label$32;
             }
             $20_1 = -1;
             if (($16_1 | 0) > (-1 | 0)) {
              break label$1
             }
            }
            $1_1 = 0;
            if (!$0_1) {
             continue label$2
            }
           }
           $21_1 = $17_1 & -65537 | 0;
           $13_1 = $17_1 & 8192 | 0 ? $21_1 : $17_1;
           $20_1 = 0;
           $16_1 = 7592;
           $17_1 = $9_1;
           label$36 : {
            label$37 : {
             label$38 : {
              label$39 : {
               label$40 : {
                label$41 : {
                 label$42 : {
                  label$43 : {
                   label$44 : {
                    label$45 : {
                     label$46 : {
                      label$47 : {
                       label$48 : {
                        label$49 : {
                         label$50 : {
                          label$51 : {
                           $1_1 = HEAP8[($15_1 + -1 | 0) >> 0] | 0;
                           $1_1 = $14_1 ? (($1_1 & 15 | 0 | 0) == (3 | 0) ? $1_1 & -33 | 0 : $1_1) : $1_1;
                           switch ($1_1 + -88 | 0 | 0) {
                           case 11:
                            break label$36;
                           case 9:
                           case 13:
                           case 14:
                           case 15:
                            break label$37;
                           case 27:
                            break label$42;
                           case 12:
                           case 17:
                            break label$45;
                           case 23:
                            break label$46;
                           case 0:
                           case 32:
                            break label$47;
                           case 24:
                            break label$48;
                           case 22:
                            break label$49;
                           case 29:
                            break label$50;
                           case 1:
                           case 2:
                           case 3:
                           case 4:
                           case 5:
                           case 6:
                           case 7:
                           case 8:
                           case 10:
                           case 16:
                           case 18:
                           case 19:
                           case 20:
                           case 21:
                           case 25:
                           case 26:
                           case 28:
                           case 30:
                           case 31:
                            break label$6;
                           default:
                            break label$51;
                           };
                          }
                          $17_1 = $9_1;
                          label$52 : {
                           switch ($1_1 + -65 | 0 | 0) {
                           case 0:
                           case 4:
                           case 5:
                           case 6:
                            break label$37;
                           case 2:
                            break label$40;
                           case 1:
                           case 3:
                            break label$6;
                           default:
                            break label$52;
                           };
                          }
                          if (($1_1 | 0) == (83 | 0)) {
                           break label$41
                          }
                          break label$7;
                         }
                         $20_1 = 0;
                         $16_1 = 7592;
                         i64toi32_i32$2 = $7_1;
                         i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                         i64toi32_i32$0 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                         $22_1 = i64toi32_i32$1;
                         $22$hi = i64toi32_i32$0;
                         break label$44;
                        }
                        $1_1 = 0;
                        label$53 : {
                         switch ($14_1 & 255 | 0 | 0) {
                         case 0:
                          HEAP32[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 2] = $11_1;
                          continue label$2;
                         case 1:
                          HEAP32[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 2] = $11_1;
                          continue label$2;
                         case 2:
                          i64toi32_i32$1 = $11_1;
                          i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
                          i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                          HEAP32[i64toi32_i32$1 >> 2] = $11_1;
                          HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                          continue label$2;
                         case 3:
                          HEAP16[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 1] = $11_1;
                          continue label$2;
                         case 4:
                          HEAP8[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 0] = $11_1;
                          continue label$2;
                         case 6:
                          HEAP32[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 2] = $11_1;
                          continue label$2;
                         case 7:
                          break label$53;
                         default:
                          continue label$2;
                         };
                        }
                        i64toi32_i32$1 = $11_1;
                        i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
                        i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                        HEAP32[i64toi32_i32$1 >> 2] = $11_1;
                        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                        continue label$2;
                       }
                       $19_1 = $19_1 >>> 0 > 8 >>> 0 ? $19_1 : 8;
                       $13_1 = $13_1 | 8 | 0;
                       $1_1 = 120;
                      }
                      $20_1 = 0;
                      $16_1 = 7592;
                      i64toi32_i32$2 = $7_1;
                      i64toi32_i32$0 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                      i64toi32_i32$1 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                      $12_1 = $646(i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, $9_1 | 0, $1_1 & 32 | 0 | 0) | 0;
                      if (!($13_1 & 8 | 0)) {
                       break label$43
                      }
                      i64toi32_i32$2 = $7_1;
                      i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                      i64toi32_i32$0 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                      if (!(i64toi32_i32$1 | i64toi32_i32$0 | 0)) {
                       break label$43
                      }
                      $16_1 = ($1_1 >>> 4 | 0) + 7592 | 0;
                      $20_1 = 2;
                      break label$43;
                     }
                     $20_1 = 0;
                     $16_1 = 7592;
                     i64toi32_i32$2 = $7_1;
                     i64toi32_i32$0 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                     i64toi32_i32$1 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                     $12_1 = $647(i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, $9_1 | 0) | 0;
                     if (!($13_1 & 8 | 0)) {
                      break label$43
                     }
                     $1_1 = $9_1 - $12_1 | 0;
                     $19_1 = ($19_1 | 0) > ($1_1 | 0) ? $19_1 : $1_1 + 1 | 0;
                     break label$43;
                    }
                    label$60 : {
                     i64toi32_i32$2 = $7_1;
                     i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                     i64toi32_i32$0 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                     $22_1 = i64toi32_i32$1;
                     $22$hi = i64toi32_i32$0;
                     i64toi32_i32$2 = i64toi32_i32$1;
                     i64toi32_i32$1 = -1;
                     i64toi32_i32$3 = -1;
                     if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
                      $30_1 = 1
                     } else {
                      if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
                       if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
                        $31_1 = 0
                       } else {
                        $31_1 = 1
                       }
                       $32_1 = $31_1;
                      } else {
                       $32_1 = 0
                      }
                      $30_1 = $32_1;
                     }
                     if ($30_1) {
                      break label$60
                     }
                     i64toi32_i32$2 = $22$hi;
                     i64toi32_i32$2 = 0;
                     i64toi32_i32$3 = 0;
                     i64toi32_i32$0 = $22$hi;
                     i64toi32_i32$1 = $22_1;
                     i64toi32_i32$5 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) + i64toi32_i32$0 | 0;
                     i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
                     $22_1 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
                     $22$hi = i64toi32_i32$5;
                     i64toi32_i32$3 = $7_1;
                     HEAP32[($7_1 + 64 | 0) >> 2] = $22_1;
                     HEAP32[($7_1 + 68 | 0) >> 2] = i64toi32_i32$5;
                     $20_1 = 1;
                     $16_1 = 7592;
                     break label$44;
                    }
                    label$61 : {
                     if (!($13_1 & 2048 | 0)) {
                      break label$61
                     }
                     $20_1 = 1;
                     $16_1 = 7593;
                     break label$44;
                    }
                    $20_1 = $13_1 & 1 | 0;
                    $16_1 = $20_1 ? 7594 : 7592;
                   }
                   i64toi32_i32$5 = $22$hi;
                   $12_1 = $648($22_1 | 0, i64toi32_i32$5 | 0, $9_1 | 0) | 0;
                  }
                  $13_1 = ($19_1 | 0) > (-1 | 0) ? $13_1 & -65537 | 0 : $13_1;
                  i64toi32_i32$2 = $7_1;
                  i64toi32_i32$5 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                  i64toi32_i32$3 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                  $22_1 = i64toi32_i32$5;
                  $22$hi = i64toi32_i32$3;
                  label$62 : {
                   if ($19_1) {
                    break label$62
                   }
                   i64toi32_i32$3 = $22$hi;
                   if (!!($22_1 | i64toi32_i32$3 | 0)) {
                    break label$62
                   }
                   $19_1 = 0;
                   $12_1 = $9_1;
                   break label$7;
                  }
                  i64toi32_i32$3 = $22$hi;
                  $1_1 = ($9_1 - $12_1 | 0) + !($22_1 | i64toi32_i32$3 | 0) | 0;
                  $19_1 = ($19_1 | 0) > ($1_1 | 0) ? $19_1 : $1_1;
                  break label$7;
                 }
                 $20_1 = 0;
                 $1_1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                 $12_1 = $1_1 ? $1_1 : 7602;
                 $1_1 = $636($12_1 | 0, 0 | 0, $19_1 | 0) | 0;
                 $17_1 = $1_1 ? $1_1 : $12_1 + $19_1 | 0;
                 $13_1 = $21_1;
                 $19_1 = $1_1 ? $1_1 - $12_1 | 0 : $19_1;
                 break label$6;
                }
                label$63 : {
                 if (!$19_1) {
                  break label$63
                 }
                 $14_1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                 break label$39;
                }
                $1_1 = 0;
                $649($0_1 | 0, 32 | 0, $18_1 | 0, 0 | 0, $13_1 | 0);
                break label$38;
               }
               HEAP32[($7_1 + 12 | 0) >> 2] = 0;
               i64toi32_i32$2 = $7_1;
               i64toi32_i32$3 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
               i64toi32_i32$5 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
               HEAP32[($7_1 + 8 | 0) >> 2] = i64toi32_i32$3;
               HEAP32[($7_1 + 64 | 0) >> 2] = $7_1 + 8 | 0;
               $19_1 = -1;
               $14_1 = $7_1 + 8 | 0;
              }
              $1_1 = 0;
              label$64 : {
               label$65 : while (1) {
                $15_1 = HEAP32[$14_1 >> 2] | 0;
                if (!$15_1) {
                 break label$64
                }
                label$66 : {
                 $15_1 = $639($7_1 + 4 | 0 | 0, $15_1 | 0) | 0;
                 $12_1 = ($15_1 | 0) < (0 | 0);
                 if ($12_1) {
                  break label$66
                 }
                 if ($15_1 >>> 0 > ($19_1 - $1_1 | 0) >>> 0) {
                  break label$66
                 }
                 $14_1 = $14_1 + 4 | 0;
                 $1_1 = $15_1 + $1_1 | 0;
                 if ($19_1 >>> 0 > $1_1 >>> 0) {
                  continue label$65
                 }
                 break label$64;
                }
                break label$65;
               };
               $20_1 = -1;
               if ($12_1) {
                break label$1
               }
              }
              $649($0_1 | 0, 32 | 0, $18_1 | 0, $1_1 | 0, $13_1 | 0);
              label$67 : {
               if ($1_1) {
                break label$67
               }
               $1_1 = 0;
               break label$38;
              }
              $15_1 = 0;
              $14_1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
              label$68 : while (1) {
               $12_1 = HEAP32[$14_1 >> 2] | 0;
               if (!$12_1) {
                break label$38
               }
               $12_1 = $639($7_1 + 4 | 0 | 0, $12_1 | 0) | 0;
               $15_1 = $12_1 + $15_1 | 0;
               if (($15_1 | 0) > ($1_1 | 0)) {
                break label$38
               }
               $643($0_1 | 0, $7_1 + 4 | 0 | 0, $12_1 | 0);
               $14_1 = $14_1 + 4 | 0;
               if ($15_1 >>> 0 < $1_1 >>> 0) {
                continue label$68
               }
               break label$68;
              };
             }
             $649($0_1 | 0, 32 | 0, $18_1 | 0, $1_1 | 0, $13_1 ^ 8192 | 0 | 0);
             $1_1 = ($18_1 | 0) > ($1_1 | 0) ? $18_1 : $1_1;
             continue label$2;
            }
            $1_1 = FUNCTION_TABLE[$5_1 | 0]($0_1, +HEAPF64[($7_1 + 64 | 0) >> 3], $18_1, $19_1, $13_1, $1_1) | 0;
            continue label$2;
           }
           i64toi32_i32$2 = $7_1;
           i64toi32_i32$5 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
           i64toi32_i32$3 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
           HEAP8[($7_1 + 55 | 0) >> 0] = i64toi32_i32$5;
           $19_1 = 1;
           $12_1 = $8_1;
           $17_1 = $9_1;
           $13_1 = $21_1;
           break label$6;
          }
          $14_1 = $1_1 + 1 | 0;
          HEAP32[($7_1 + 76 | 0) >> 2] = $14_1;
          $13_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
          $1_1 = $14_1;
          continue label$10;
         };
        }
        $20_1 = $11_1;
        if ($0_1) {
         break label$1
        }
        if (!$10_1) {
         break label$5
        }
        $1_1 = 1;
        label$69 : {
         label$70 : while (1) {
          $13_1 = HEAP32[($4_1 + ($1_1 << 2 | 0) | 0) >> 2] | 0;
          if (!$13_1) {
           break label$69
          }
          $645($3_1 + ($1_1 << 3 | 0) | 0 | 0, $13_1 | 0, $2_1 | 0, $6_1 | 0);
          $20_1 = 1;
          $1_1 = $1_1 + 1 | 0;
          if (($1_1 | 0) != (10 | 0)) {
           continue label$70
          }
          break label$1;
         };
        }
        $20_1 = 1;
        if ($1_1 >>> 0 >= 10 >>> 0) {
         break label$1
        }
        label$71 : while (1) {
         if (HEAP32[($4_1 + ($1_1 << 2 | 0) | 0) >> 2] | 0) {
          break label$8
         }
         $20_1 = 1;
         $1_1 = $1_1 + 1 | 0;
         if (($1_1 | 0) == (10 | 0)) {
          break label$1
         }
         continue label$71;
        };
       }
       $20_1 = -1;
       break label$1;
      }
      $17_1 = $9_1;
     }
     $15_1 = $17_1 - $12_1 | 0;
     $17_1 = ($19_1 | 0) < ($15_1 | 0) ? $15_1 : $19_1;
     $14_1 = $20_1 + $17_1 | 0;
     $1_1 = ($18_1 | 0) < ($14_1 | 0) ? $14_1 : $18_1;
     $649($0_1 | 0, 32 | 0, $1_1 | 0, $14_1 | 0, $13_1 | 0);
     $643($0_1 | 0, $16_1 | 0, $20_1 | 0);
     $649($0_1 | 0, 48 | 0, $1_1 | 0, $14_1 | 0, $13_1 ^ 65536 | 0 | 0);
     $649($0_1 | 0, 48 | 0, $17_1 | 0, $15_1 | 0, 0 | 0);
     $643($0_1 | 0, $12_1 | 0, $15_1 | 0);
     $649($0_1 | 0, 32 | 0, $1_1 | 0, $14_1 | 0, $13_1 ^ 8192 | 0 | 0);
     continue label$2;
    }
    break label$2;
   };
   $20_1 = 0;
  }
  global$0 = $7_1 + 80 | 0;
  return $20_1 | 0;
 }
 
 function $643($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if ((HEAPU8[$0_1 >> 0] | 0) & 32 | 0) {
    break label$1
   }
   $2177($1_1 | 0, $2_1 | 0, $0_1 | 0) | 0;
  }
 }
 
 function $644($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = 0;
  label$1 : {
   if (!($634(HEAP8[(HEAP32[$0_1 >> 2] | 0) >> 0] | 0 | 0) | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $2_1 = HEAP32[$0_1 >> 2] | 0;
    $3_1 = HEAP8[$2_1 >> 0] | 0;
    HEAP32[$0_1 >> 2] = $2_1 + 1 | 0;
    $1_1 = ($3_1 + Math_imul($1_1, 10) | 0) + -48 | 0;
    if ($634(HEAP8[($2_1 + 1 | 0) >> 0] | 0 | 0) | 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return $1_1 | 0;
 }
 
 function $645($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $23_1 = 0, $31_1 = 0, $41_1 = 0, $49_1 = 0, $57_1 = 0, $65_1 = 0, $73_1 = 0, $83_1 = 0;
  label$1 : {
   if ($1_1 >>> 0 > 20 >>> 0) {
    break label$1
   }
   label$2 : {
    switch ($1_1 + -9 | 0 | 0) {
    case 0:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
     return;
    case 1:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
     $23_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[i64toi32_i32$0 >> 2] = $23_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     return;
    case 2:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$0 = 0;
     $31_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1;
     HEAP32[i64toi32_i32$1 >> 2] = $31_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     return;
    case 3:
     $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
     i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     $41_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[i64toi32_i32$0 >> 2] = $41_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     return;
    case 4:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$1 = HEAP16[$1_1 >> 1] | 0;
     i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
     $49_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1;
     HEAP32[i64toi32_i32$1 >> 2] = $49_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     return;
    case 5:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$0 = HEAPU16[$1_1 >> 1] | 0;
     i64toi32_i32$1 = 0;
     $57_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[i64toi32_i32$0 >> 2] = $57_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     return;
    case 6:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$1 = HEAP8[$1_1 >> 0] | 0;
     i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
     $65_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1;
     HEAP32[i64toi32_i32$1 >> 2] = $65_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     return;
    case 7:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$0 = HEAPU8[$1_1 >> 0] | 0;
     i64toi32_i32$1 = 0;
     $73_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[i64toi32_i32$0 >> 2] = $73_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     return;
    case 8:
     $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
     i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     $83_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1;
     HEAP32[i64toi32_i32$1 >> 2] = $83_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     return;
    case 9:
     break label$2;
    default:
     break label$1;
    };
   }
   FUNCTION_TABLE[$3_1 | 0]($0_1, $2_1);
  }
 }
 
 function $646($0_1, $0$hi, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $9_1 = 0;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   if (!($0_1 | i64toi32_i32$0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    i64toi32_i32$0 = $0$hi;
    HEAP8[$1_1 >> 0] = HEAPU8[(($0_1 & 15 | 0) + 8080 | 0) >> 0] | 0 | $2_1 | 0;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 4;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $9_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $9_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $0_1 = $9_1;
    $0$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $0_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return $1_1 | 0;
 }
 
 function $647($0_1, $0$hi, $1_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $8_1 = 0;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   if (!($0_1 | i64toi32_i32$0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    i64toi32_i32$0 = $0$hi;
    HEAP8[$1_1 >> 0] = $0_1 & 7 | 0 | 48 | 0;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 3;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $8_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $8_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $0_1 = $8_1;
    $0$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $0_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return $1_1 | 0;
 }
 
 function $648($0_1, $0$hi, $1_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $2_1 = 0, i64toi32_i32$3 = 0, $5_1 = 0, i64toi32_i32$5 = 0, $5$hi = 0, $3_1 = 0, $16_1 = 0, $16$hi = 0, $4_1 = 0;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = 1;
    i64toi32_i32$3 = 0;
    if (i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$2 = $0$hi;
    $5_1 = $0_1;
    $5$hi = i64toi32_i32$2;
    break label$1;
   }
   label$3 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$0 = __wasm_i64_udiv($0_1 | 0, i64toi32_i32$2 | 0, 10 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $5_1 = i64toi32_i32$0;
    $5$hi = i64toi32_i32$2;
    i64toi32_i32$0 = 0;
    i64toi32_i32$0 = __wasm_i64_mul($5_1 | 0, i64toi32_i32$2 | 0, 10 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $16_1 = i64toi32_i32$0;
    $16$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$0 = $16$hi;
    i64toi32_i32$1 = $16_1;
    i64toi32_i32$5 = ($0_1 >>> 0 < i64toi32_i32$1 >>> 0) + i64toi32_i32$0 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
    HEAP8[$1_1 >> 0] = $0_1 - i64toi32_i32$1 | 0 | 48 | 0;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$3 = 9;
    i64toi32_i32$1 = -1;
    $2_1 = $0$hi >>> 0 > i64toi32_i32$3 >>> 0 | (($0$hi | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
    i64toi32_i32$2 = $5$hi;
    $0_1 = $5_1;
    $0$hi = i64toi32_i32$2;
    if ($2_1) {
     continue label$3
    }
    break label$3;
   };
  }
  label$4 : {
   i64toi32_i32$2 = $5$hi;
   $2_1 = $5_1;
   if (!$2_1) {
    break label$4
   }
   label$5 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    $3_1 = ($2_1 >>> 0) / (10 >>> 0) | 0;
    HEAP8[$1_1 >> 0] = $2_1 - Math_imul($3_1, 10) | 0 | 48 | 0;
    $4_1 = $2_1 >>> 0 > 9 >>> 0;
    $2_1 = $3_1;
    if ($4_1) {
     continue label$5
    }
    break label$5;
   };
  }
  return $1_1 | 0;
 }
 
 function $649($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 256 | 0;
  global$0 = $5_1;
  label$1 : {
   if (($2_1 | 0) <= ($3_1 | 0)) {
    break label$1
   }
   if ($4_1 & 73728 | 0) {
    break label$1
   }
   $2_1 = $2_1 - $3_1 | 0;
   $3_1 = $2_1 >>> 0 < 256 >>> 0;
   $2174($5_1 | 0, $1_1 & 255 | 0 | 0, ($3_1 ? $2_1 : 256) | 0) | 0;
   label$2 : {
    if ($3_1) {
     break label$2
    }
    label$3 : while (1) {
     $643($0_1 | 0, $5_1 | 0, 256 | 0);
     $2_1 = $2_1 + -256 | 0;
     if ($2_1 >>> 0 > 255 >>> 0) {
      continue label$3
     }
     break label$3;
    };
   }
   $643($0_1 | 0, $5_1 | 0, $2_1 | 0);
  }
  global$0 = $5_1 + 256 | 0;
 }
 
 function $650($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $641($0_1 | 0, $1_1 | 0, $2_1 | 0, 206 | 0, 207 | 0) | 0 | 0;
 }
 
 function $651($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $11_1 = 0, $18_1 = 0, $17_1 = 0, $23_1 = 0, $6_1 = 0, $10_1 = 0, i64toi32_i32$1 = 0, $14_1 = 0, i64toi32_i32$0 = 0, $21_1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, $22_1 = 0, $16_1 = 0, $12_1 = 0, $19_1 = 0, $26_1 = 0.0, $24_1 = 0, $9_1 = 0, $24$hi = 0, $8_1 = 0, $13_1 = 0, $15_1 = 0, $20_1 = 0, $7_1 = 0, $44_1 = 0, $45_1 = 0, $46_1 = 0, $25$hi = 0, $47_1 = 0, $25_1 = 0, $158_1 = 0, $160$hi = 0, $162$hi = 0, $164_1 = 0, $164$hi = 0, $166$hi = 0, $170_1 = 0, $170$hi = 0, $818_1 = 0;
  $6_1 = global$0 - 560 | 0;
  global$0 = $6_1;
  $7_1 = 0;
  HEAP32[($6_1 + 44 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $653(+$1_1) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $24_1 = i64toi32_i32$0;
    $24$hi = i64toi32_i32$1;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = -1;
    i64toi32_i32$3 = -1;
    if ((i64toi32_i32$1 | 0) > (i64toi32_i32$0 | 0)) {
     $44_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
       $45_1 = 0
      } else {
       $45_1 = 1
      }
      $46_1 = $45_1;
     } else {
      $46_1 = 0
     }
     $44_1 = $46_1;
    }
    if ($44_1) {
     break label$2
    }
    $8_1 = 1;
    $9_1 = 8096;
    $1_1 = -$1_1;
    i64toi32_i32$2 = $653(+$1_1) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $24_1 = i64toi32_i32$2;
    $24$hi = i64toi32_i32$1;
    break label$1;
   }
   $8_1 = 1;
   label$3 : {
    if (!($4_1 & 2048 | 0)) {
     break label$3
    }
    $9_1 = 8099;
    break label$1;
   }
   $9_1 = 8102;
   if ($4_1 & 1 | 0) {
    break label$1
   }
   $8_1 = 0;
   $7_1 = 1;
   $9_1 = 8097;
  }
  label$4 : {
   label$5 : {
    i64toi32_i32$1 = $24$hi;
    i64toi32_i32$3 = $24_1;
    i64toi32_i32$2 = 2146435072;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
    i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
    i64toi32_i32$3 = 2146435072;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
     break label$5
    }
    $10_1 = $8_1 + 3 | 0;
    $649($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 & -65537 | 0 | 0);
    $643($0_1 | 0, $9_1 | 0, $8_1 | 0);
    $11_1 = $5_1 & 32 | 0;
    $643($0_1 | 0, ($1_1 != $1_1 ? ($11_1 ? 8123 : 8127) : $11_1 ? 8115 : 8119) | 0, 3 | 0);
    $649($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 ^ 8192 | 0 | 0);
    break label$4;
   }
   $12_1 = $6_1 + 16 | 0;
   label$6 : {
    label$7 : {
     label$8 : {
      label$9 : {
       $1_1 = +$640(+$1_1, $6_1 + 44 | 0 | 0);
       $1_1 = $1_1 + $1_1;
       if ($1_1 == 0.0) {
        break label$9
       }
       $11_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
       HEAP32[($6_1 + 44 | 0) >> 2] = $11_1 + -1 | 0;
       $13_1 = $5_1 | 32 | 0;
       if (($13_1 | 0) != (97 | 0)) {
        break label$8
       }
       break label$6;
      }
      $13_1 = $5_1 | 32 | 0;
      if (($13_1 | 0) == (97 | 0)) {
       break label$6
      }
      $14_1 = ($3_1 | 0) < (0 | 0) ? 6 : $3_1;
      $15_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
      break label$7;
     }
     $15_1 = $11_1 + -29 | 0;
     HEAP32[($6_1 + 44 | 0) >> 2] = $15_1;
     $14_1 = ($3_1 | 0) < (0 | 0) ? 6 : $3_1;
     $1_1 = $1_1 * 268435456.0;
    }
    $16_1 = ($15_1 | 0) < (0 | 0) ? $6_1 + 48 | 0 : $6_1 + 336 | 0;
    $17_1 = $16_1;
    label$10 : while (1) {
     label$11 : {
      label$12 : {
       if (!($1_1 < 4294967296.0 & $1_1 >= 0.0 | 0)) {
        break label$12
       }
       $11_1 = ~~$1_1 >>> 0;
       break label$11;
      }
      $11_1 = 0;
     }
     HEAP32[$17_1 >> 2] = $11_1;
     $17_1 = $17_1 + 4 | 0;
     $1_1 = ($1_1 - +($11_1 >>> 0)) * 1.0e9;
     if ($1_1 != 0.0) {
      continue label$10
     }
     break label$10;
    };
    label$13 : {
     label$14 : {
      if (($15_1 | 0) >= (1 | 0)) {
       break label$14
      }
      $3_1 = $15_1;
      $11_1 = $17_1;
      $18_1 = $16_1;
      break label$13;
     }
     $18_1 = $16_1;
     $3_1 = $15_1;
     label$15 : while (1) {
      $3_1 = ($3_1 | 0) < (29 | 0) ? $3_1 : 29;
      label$16 : {
       $11_1 = $17_1 + -4 | 0;
       if ($11_1 >>> 0 < $18_1 >>> 0) {
        break label$16
       }
       i64toi32_i32$1 = 0;
       $25_1 = $3_1;
       $25$hi = i64toi32_i32$1;
       i64toi32_i32$1 = 0;
       $24_1 = 0;
       $24$hi = i64toi32_i32$1;
       label$17 : while (1) {
        $158_1 = $11_1;
        i64toi32_i32$0 = $11_1;
        i64toi32_i32$1 = HEAP32[$11_1 >> 2] | 0;
        i64toi32_i32$2 = 0;
        $160$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $25$hi;
        i64toi32_i32$2 = $160$hi;
        i64toi32_i32$0 = i64toi32_i32$1;
        i64toi32_i32$1 = $25$hi;
        i64toi32_i32$3 = $25_1;
        i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
         $47_1 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
         $47_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
        }
        $162$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $24$hi;
        i64toi32_i32$2 = $24_1;
        i64toi32_i32$0 = 0;
        i64toi32_i32$3 = -1;
        i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
        $164_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
        $164$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $162$hi;
        i64toi32_i32$1 = $47_1;
        i64toi32_i32$2 = $164$hi;
        i64toi32_i32$3 = $164_1;
        i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
        i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
        }
        $24_1 = i64toi32_i32$4;
        $24$hi = i64toi32_i32$5;
        $166$hi = i64toi32_i32$5;
        i64toi32_i32$1 = 0;
        i64toi32_i32$1 = __wasm_i64_udiv(i64toi32_i32$4 | 0, i64toi32_i32$5 | 0, 1e9 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
        $24_1 = i64toi32_i32$1;
        $24$hi = i64toi32_i32$5;
        i64toi32_i32$1 = 0;
        i64toi32_i32$1 = __wasm_i64_mul($24_1 | 0, i64toi32_i32$5 | 0, 1e9 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
        $170_1 = i64toi32_i32$1;
        $170$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $166$hi;
        i64toi32_i32$0 = i64toi32_i32$4;
        i64toi32_i32$1 = $170$hi;
        i64toi32_i32$3 = $170_1;
        i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
        i64toi32_i32$4 = (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$1 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
        HEAP32[$158_1 >> 2] = i64toi32_i32$2;
        $11_1 = $11_1 + -4 | 0;
        if ($11_1 >>> 0 >= $18_1 >>> 0) {
         continue label$17
        }
        break label$17;
       };
       i64toi32_i32$4 = $24$hi;
       $11_1 = $24_1;
       if (!$11_1) {
        break label$16
       }
       $18_1 = $18_1 + -4 | 0;
       HEAP32[$18_1 >> 2] = $11_1;
      }
      label$18 : {
       label$19 : while (1) {
        $11_1 = $17_1;
        if ($11_1 >>> 0 <= $18_1 >>> 0) {
         break label$18
        }
        $17_1 = $11_1 + -4 | 0;
        if (!(HEAP32[$17_1 >> 2] | 0)) {
         continue label$19
        }
        break label$19;
       };
      }
      $3_1 = (HEAP32[($6_1 + 44 | 0) >> 2] | 0) - $3_1 | 0;
      HEAP32[($6_1 + 44 | 0) >> 2] = $3_1;
      $17_1 = $11_1;
      if (($3_1 | 0) > (0 | 0)) {
       continue label$15
      }
      break label$15;
     };
    }
    label$20 : {
     if (($3_1 | 0) > (-1 | 0)) {
      break label$20
     }
     $19_1 = (($14_1 + 25 | 0 | 0) / (9 | 0) | 0) + 1 | 0;
     $20_1 = ($13_1 | 0) == (102 | 0);
     label$21 : while (1) {
      $10_1 = ($3_1 | 0) < (-9 | 0) ? 9 : 0 - $3_1 | 0;
      label$22 : {
       label$23 : {
        if ($18_1 >>> 0 < $11_1 >>> 0) {
         break label$23
        }
        $18_1 = HEAP32[$18_1 >> 2] | 0 ? $18_1 : $18_1 + 4 | 0;
        break label$22;
       }
       $21_1 = 1e9 >>> $10_1 | 0;
       $22_1 = (-1 << $10_1 | 0) ^ -1 | 0;
       $3_1 = 0;
       $17_1 = $18_1;
       label$24 : while (1) {
        $23_1 = HEAP32[$17_1 >> 2] | 0;
        HEAP32[$17_1 >> 2] = ($23_1 >>> $10_1 | 0) + $3_1 | 0;
        $3_1 = Math_imul($23_1 & $22_1 | 0, $21_1);
        $17_1 = $17_1 + 4 | 0;
        if ($17_1 >>> 0 < $11_1 >>> 0) {
         continue label$24
        }
        break label$24;
       };
       $18_1 = HEAP32[$18_1 >> 2] | 0 ? $18_1 : $18_1 + 4 | 0;
       if (!$3_1) {
        break label$22
       }
       HEAP32[$11_1 >> 2] = $3_1;
       $11_1 = $11_1 + 4 | 0;
      }
      $3_1 = (HEAP32[($6_1 + 44 | 0) >> 2] | 0) + $10_1 | 0;
      HEAP32[($6_1 + 44 | 0) >> 2] = $3_1;
      $17_1 = $20_1 ? $16_1 : $18_1;
      $11_1 = (($11_1 - $17_1 | 0) >> 2 | 0 | 0) > ($19_1 | 0) ? $17_1 + ($19_1 << 2 | 0) | 0 : $11_1;
      if (($3_1 | 0) < (0 | 0)) {
       continue label$21
      }
      break label$21;
     };
    }
    $17_1 = 0;
    label$25 : {
     if ($18_1 >>> 0 >= $11_1 >>> 0) {
      break label$25
     }
     $17_1 = Math_imul(($16_1 - $18_1 | 0) >> 2 | 0, 9);
     $3_1 = 10;
     $23_1 = HEAP32[$18_1 >> 2] | 0;
     if ($23_1 >>> 0 < 10 >>> 0) {
      break label$25
     }
     label$26 : while (1) {
      $17_1 = $17_1 + 1 | 0;
      $3_1 = Math_imul($3_1, 10);
      if ($23_1 >>> 0 >= $3_1 >>> 0) {
       continue label$26
      }
      break label$26;
     };
    }
    label$27 : {
     $3_1 = ($14_1 - (($13_1 | 0) == (102 | 0) ? 0 : $17_1) | 0) - (($14_1 | 0) != (0 | 0) & ($13_1 | 0) == (103 | 0) | 0) | 0;
     if (($3_1 | 0) >= (Math_imul(($11_1 - $16_1 | 0) >> 2 | 0, 9) + -9 | 0 | 0)) {
      break label$27
     }
     $23_1 = $3_1 + 9216 | 0;
     $21_1 = ($23_1 | 0) / (9 | 0) | 0;
     $10_1 = (($21_1 << 2 | 0) + (($15_1 | 0) < (0 | 0) ? $6_1 + 48 | 0 | 4 | 0 : $6_1 + 340 | 0) | 0) + -4096 | 0;
     $3_1 = 10;
     label$28 : {
      $23_1 = $23_1 - Math_imul($21_1, 9) | 0;
      if (($23_1 | 0) > (7 | 0)) {
       break label$28
      }
      label$29 : while (1) {
       $3_1 = Math_imul($3_1, 10);
       $23_1 = $23_1 + 1 | 0;
       if (($23_1 | 0) != (8 | 0)) {
        continue label$29
       }
       break label$29;
      };
     }
     $21_1 = HEAP32[$10_1 >> 2] | 0;
     $22_1 = ($21_1 >>> 0) / ($3_1 >>> 0) | 0;
     $23_1 = $21_1 - Math_imul($22_1, $3_1) | 0;
     label$30 : {
      label$31 : {
       $19_1 = $10_1 + 4 | 0;
       if (($19_1 | 0) != ($11_1 | 0)) {
        break label$31
       }
       if (!$23_1) {
        break label$30
       }
      }
      $20_1 = $3_1 >>> 1 | 0;
      $26_1 = $23_1 >>> 0 < $20_1 >>> 0 ? .5 : ($19_1 | 0) == ($11_1 | 0) ? (($23_1 | 0) == ($20_1 | 0) ? 1.0 : 1.5) : 1.5;
      $1_1 = $22_1 & 1 | 0 ? 9007199254740994.0 : 9007199254740992.0;
      label$32 : {
       if ($7_1) {
        break label$32
       }
       if ((HEAPU8[$9_1 >> 0] | 0 | 0) != (45 | 0)) {
        break label$32
       }
       $26_1 = -$26_1;
       $1_1 = -$1_1;
      }
      $23_1 = $21_1 - $23_1 | 0;
      HEAP32[$10_1 >> 2] = $23_1;
      if ($1_1 + $26_1 == $1_1) {
       break label$30
      }
      $17_1 = $23_1 + $3_1 | 0;
      HEAP32[$10_1 >> 2] = $17_1;
      label$33 : {
       if ($17_1 >>> 0 < 1e9 >>> 0) {
        break label$33
       }
       label$34 : while (1) {
        HEAP32[$10_1 >> 2] = 0;
        label$35 : {
         $10_1 = $10_1 + -4 | 0;
         if ($10_1 >>> 0 >= $18_1 >>> 0) {
          break label$35
         }
         $18_1 = $18_1 + -4 | 0;
         HEAP32[$18_1 >> 2] = 0;
        }
        $17_1 = (HEAP32[$10_1 >> 2] | 0) + 1 | 0;
        HEAP32[$10_1 >> 2] = $17_1;
        if ($17_1 >>> 0 > 999999999 >>> 0) {
         continue label$34
        }
        break label$34;
       };
      }
      $17_1 = Math_imul(($16_1 - $18_1 | 0) >> 2 | 0, 9);
      $3_1 = 10;
      $23_1 = HEAP32[$18_1 >> 2] | 0;
      if ($23_1 >>> 0 < 10 >>> 0) {
       break label$30
      }
      label$36 : while (1) {
       $17_1 = $17_1 + 1 | 0;
       $3_1 = Math_imul($3_1, 10);
       if ($23_1 >>> 0 >= $3_1 >>> 0) {
        continue label$36
       }
       break label$36;
      };
     }
     $3_1 = $10_1 + 4 | 0;
     $11_1 = $11_1 >>> 0 > $3_1 >>> 0 ? $3_1 : $11_1;
    }
    label$37 : {
     label$38 : while (1) {
      $3_1 = $11_1;
      $23_1 = $11_1 >>> 0 <= $18_1 >>> 0;
      if ($23_1) {
       break label$37
      }
      $11_1 = $3_1 + -4 | 0;
      if (!(HEAP32[$11_1 >> 2] | 0)) {
       continue label$38
      }
      break label$38;
     };
    }
    label$39 : {
     label$40 : {
      if (($13_1 | 0) == (103 | 0)) {
       break label$40
      }
      $22_1 = $4_1 & 8 | 0;
      break label$39;
     }
     $11_1 = $14_1 ? $14_1 : 1;
     $10_1 = ($11_1 | 0) > ($17_1 | 0) & ($17_1 | 0) > (-5 | 0) | 0;
     $14_1 = ($10_1 ? $17_1 ^ -1 | 0 : -1) + $11_1 | 0;
     $5_1 = ($10_1 ? -1 : -2) + $5_1 | 0;
     $22_1 = $4_1 & 8 | 0;
     if ($22_1) {
      break label$39
     }
     $11_1 = -9;
     label$41 : {
      if ($23_1) {
       break label$41
      }
      $10_1 = HEAP32[($3_1 + -4 | 0) >> 2] | 0;
      if (!$10_1) {
       break label$41
      }
      $23_1 = 10;
      $11_1 = 0;
      if (($10_1 >>> 0) % (10 >>> 0) | 0) {
       break label$41
      }
      label$42 : while (1) {
       $21_1 = $11_1;
       $11_1 = $11_1 + 1 | 0;
       $23_1 = Math_imul($23_1, 10);
       if (!(($10_1 >>> 0) % ($23_1 >>> 0) | 0)) {
        continue label$42
       }
       break label$42;
      };
      $11_1 = $21_1 ^ -1 | 0;
     }
     $23_1 = Math_imul(($3_1 - $16_1 | 0) >> 2 | 0, 9);
     label$43 : {
      if (($5_1 & -33 | 0 | 0) != (70 | 0)) {
       break label$43
      }
      $22_1 = 0;
      $11_1 = ($23_1 + $11_1 | 0) + -9 | 0;
      $11_1 = ($11_1 | 0) > (0 | 0) ? $11_1 : 0;
      $14_1 = ($14_1 | 0) < ($11_1 | 0) ? $14_1 : $11_1;
      break label$39;
     }
     $22_1 = 0;
     $11_1 = (($17_1 + $23_1 | 0) + $11_1 | 0) + -9 | 0;
     $11_1 = ($11_1 | 0) > (0 | 0) ? $11_1 : 0;
     $14_1 = ($14_1 | 0) < ($11_1 | 0) ? $14_1 : $11_1;
    }
    $20_1 = $14_1 | $22_1 | 0;
    $23_1 = ($20_1 | 0) != (0 | 0);
    label$44 : {
     label$45 : {
      $21_1 = $5_1 & -33 | 0;
      if (($21_1 | 0) != (70 | 0)) {
       break label$45
      }
      $11_1 = ($17_1 | 0) > (0 | 0) ? $17_1 : 0;
      break label$44;
     }
     label$46 : {
      $11_1 = $17_1 >> 31 | 0;
      i64toi32_i32$4 = 0;
      $11_1 = $648(($17_1 + $11_1 | 0) ^ $11_1 | 0 | 0, i64toi32_i32$4 | 0, $12_1 | 0) | 0;
      if (($12_1 - $11_1 | 0 | 0) > (1 | 0)) {
       break label$46
      }
      label$47 : while (1) {
       $11_1 = $11_1 + -1 | 0;
       HEAP8[$11_1 >> 0] = 48;
       if (($12_1 - $11_1 | 0 | 0) < (2 | 0)) {
        continue label$47
       }
       break label$47;
      };
     }
     $19_1 = $11_1 + -2 | 0;
     HEAP8[$19_1 >> 0] = $5_1;
     HEAP8[($11_1 + -1 | 0) >> 0] = ($17_1 | 0) < (0 | 0) ? 45 : 43;
     $11_1 = $12_1 - $19_1 | 0;
    }
    $10_1 = ((($8_1 + $14_1 | 0) + $23_1 | 0) + $11_1 | 0) + 1 | 0;
    $649($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 | 0);
    $643($0_1 | 0, $9_1 | 0, $8_1 | 0);
    $649($0_1 | 0, 48 | 0, $2_1 | 0, $10_1 | 0, $4_1 ^ 65536 | 0 | 0);
    label$48 : {
     label$49 : {
      label$50 : {
       label$51 : {
        if (($21_1 | 0) != (70 | 0)) {
         break label$51
        }
        $21_1 = $6_1 + 16 | 0 | 8 | 0;
        $17_1 = $6_1 + 16 | 0 | 9 | 0;
        $23_1 = $18_1 >>> 0 > $16_1 >>> 0 ? $16_1 : $18_1;
        $18_1 = $23_1;
        label$52 : while (1) {
         i64toi32_i32$5 = $18_1;
         i64toi32_i32$4 = HEAP32[$18_1 >> 2] | 0;
         i64toi32_i32$0 = 0;
         $11_1 = $648(i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, $17_1 | 0) | 0;
         label$53 : {
          label$54 : {
           if (($18_1 | 0) == ($23_1 | 0)) {
            break label$54
           }
           if ($11_1 >>> 0 <= ($6_1 + 16 | 0) >>> 0) {
            break label$53
           }
           label$55 : while (1) {
            $11_1 = $11_1 + -1 | 0;
            HEAP8[$11_1 >> 0] = 48;
            if ($11_1 >>> 0 > ($6_1 + 16 | 0) >>> 0) {
             continue label$55
            }
            break label$53;
           };
          }
          if (($11_1 | 0) != ($17_1 | 0)) {
           break label$53
          }
          HEAP8[($6_1 + 24 | 0) >> 0] = 48;
          $11_1 = $21_1;
         }
         $643($0_1 | 0, $11_1 | 0, $17_1 - $11_1 | 0 | 0);
         $18_1 = $18_1 + 4 | 0;
         if ($18_1 >>> 0 <= $16_1 >>> 0) {
          continue label$52
         }
         break label$52;
        };
        label$56 : {
         if (!$20_1) {
          break label$56
         }
         $643($0_1 | 0, 8131 | 0, 1 | 0);
        }
        if ($18_1 >>> 0 >= $3_1 >>> 0) {
         break label$50
        }
        if (($14_1 | 0) < (1 | 0)) {
         break label$50
        }
        label$57 : while (1) {
         label$58 : {
          i64toi32_i32$5 = $18_1;
          i64toi32_i32$0 = HEAP32[$18_1 >> 2] | 0;
          i64toi32_i32$4 = 0;
          $11_1 = $648(i64toi32_i32$0 | 0, i64toi32_i32$4 | 0, $17_1 | 0) | 0;
          if ($11_1 >>> 0 <= ($6_1 + 16 | 0) >>> 0) {
           break label$58
          }
          label$59 : while (1) {
           $11_1 = $11_1 + -1 | 0;
           HEAP8[$11_1 >> 0] = 48;
           if ($11_1 >>> 0 > ($6_1 + 16 | 0) >>> 0) {
            continue label$59
           }
           break label$59;
          };
         }
         $643($0_1 | 0, $11_1 | 0, (($14_1 | 0) < (9 | 0) ? $14_1 : 9) | 0);
         $11_1 = $14_1 + -9 | 0;
         $18_1 = $18_1 + 4 | 0;
         if ($18_1 >>> 0 >= $3_1 >>> 0) {
          break label$49
         }
         $23_1 = ($14_1 | 0) > (9 | 0);
         $14_1 = $11_1;
         if ($23_1) {
          continue label$57
         }
         break label$49;
        };
       }
       label$60 : {
        if (($14_1 | 0) < (0 | 0)) {
         break label$60
        }
        $21_1 = $3_1 >>> 0 > $18_1 >>> 0 ? $3_1 : $18_1 + 4 | 0;
        $16_1 = $6_1 + 16 | 0 | 8 | 0;
        $3_1 = $6_1 + 16 | 0 | 9 | 0;
        $17_1 = $18_1;
        label$61 : while (1) {
         label$62 : {
          i64toi32_i32$5 = $17_1;
          i64toi32_i32$4 = HEAP32[$17_1 >> 2] | 0;
          i64toi32_i32$0 = 0;
          $11_1 = $648(i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, $3_1 | 0) | 0;
          if (($11_1 | 0) != ($3_1 | 0)) {
           break label$62
          }
          HEAP8[($6_1 + 24 | 0) >> 0] = 48;
          $11_1 = $16_1;
         }
         label$63 : {
          label$64 : {
           if (($17_1 | 0) == ($18_1 | 0)) {
            break label$64
           }
           if ($11_1 >>> 0 <= ($6_1 + 16 | 0) >>> 0) {
            break label$63
           }
           label$65 : while (1) {
            $11_1 = $11_1 + -1 | 0;
            HEAP8[$11_1 >> 0] = 48;
            if ($11_1 >>> 0 > ($6_1 + 16 | 0) >>> 0) {
             continue label$65
            }
            break label$63;
           };
          }
          $643($0_1 | 0, $11_1 | 0, 1 | 0);
          $11_1 = $11_1 + 1 | 0;
          label$66 : {
           if ($22_1) {
            break label$66
           }
           if (($14_1 | 0) < (1 | 0)) {
            break label$63
           }
          }
          $643($0_1 | 0, 8131 | 0, 1 | 0);
         }
         $23_1 = $3_1 - $11_1 | 0;
         $643($0_1 | 0, $11_1 | 0, (($14_1 | 0) > ($23_1 | 0) ? $23_1 : $14_1) | 0);
         $14_1 = $14_1 - $23_1 | 0;
         $17_1 = $17_1 + 4 | 0;
         if ($17_1 >>> 0 >= $21_1 >>> 0) {
          break label$60
         }
         if (($14_1 | 0) > (-1 | 0)) {
          continue label$61
         }
         break label$61;
        };
       }
       $649($0_1 | 0, 48 | 0, $14_1 + 18 | 0 | 0, 18 | 0, 0 | 0);
       $643($0_1 | 0, $19_1 | 0, $12_1 - $19_1 | 0 | 0);
       break label$48;
      }
      $11_1 = $14_1;
     }
     $649($0_1 | 0, 48 | 0, $11_1 + 9 | 0 | 0, 9 | 0, 0 | 0);
    }
    $649($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 ^ 8192 | 0 | 0);
    break label$4;
   }
   $17_1 = $5_1 & 32 | 0;
   $14_1 = $17_1 ? $9_1 + 9 | 0 : $9_1;
   label$67 : {
    if ($3_1 >>> 0 > 11 >>> 0) {
     break label$67
    }
    $11_1 = 12 - $3_1 | 0;
    if (!$11_1) {
     break label$67
    }
    $26_1 = 8.0;
    label$68 : while (1) {
     $26_1 = $26_1 * 16.0;
     $11_1 = $11_1 + -1 | 0;
     if ($11_1) {
      continue label$68
     }
     break label$68;
    };
    label$69 : {
     if ((HEAPU8[$14_1 >> 0] | 0 | 0) != (45 | 0)) {
      break label$69
     }
     $1_1 = -($26_1 + (-$1_1 - $26_1));
     break label$67;
    }
    $1_1 = $1_1 + $26_1 - $26_1;
   }
   label$70 : {
    $11_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
    $818_1 = $11_1;
    $11_1 = $11_1 >> 31 | 0;
    i64toi32_i32$0 = 0;
    $11_1 = $648(($818_1 + $11_1 | 0) ^ $11_1 | 0 | 0, i64toi32_i32$0 | 0, $12_1 | 0) | 0;
    if (($11_1 | 0) != ($12_1 | 0)) {
     break label$70
    }
    HEAP8[($6_1 + 15 | 0) >> 0] = 48;
    $11_1 = $6_1 + 15 | 0;
   }
   $22_1 = $8_1 | 2 | 0;
   $18_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
   $21_1 = $11_1 + -2 | 0;
   HEAP8[$21_1 >> 0] = $5_1 + 15 | 0;
   HEAP8[($11_1 + -1 | 0) >> 0] = ($18_1 | 0) < (0 | 0) ? 45 : 43;
   $23_1 = $4_1 & 8 | 0;
   $18_1 = $6_1 + 16 | 0;
   label$71 : while (1) {
    $11_1 = $18_1;
    label$72 : {
     label$73 : {
      if (!(Math_abs($1_1) < 2147483648.0)) {
       break label$73
      }
      $18_1 = ~~$1_1;
      break label$72;
     }
     $18_1 = -2147483648;
    }
    HEAP8[$11_1 >> 0] = HEAPU8[($18_1 + 8080 | 0) >> 0] | 0 | $17_1 | 0;
    $1_1 = ($1_1 - +($18_1 | 0)) * 16.0;
    label$74 : {
     $18_1 = $11_1 + 1 | 0;
     if (($18_1 - ($6_1 + 16 | 0) | 0 | 0) != (1 | 0)) {
      break label$74
     }
     label$75 : {
      if ($23_1) {
       break label$75
      }
      if (($3_1 | 0) > (0 | 0)) {
       break label$75
      }
      if ($1_1 == 0.0) {
       break label$74
      }
     }
     HEAP8[($11_1 + 1 | 0) >> 0] = 46;
     $18_1 = $11_1 + 2 | 0;
    }
    if ($1_1 != 0.0) {
     continue label$71
    }
    break label$71;
   };
   label$76 : {
    label$77 : {
     if (!$3_1) {
      break label$77
     }
     if ((($18_1 - ($6_1 + 16 | 0) | 0) + -2 | 0 | 0) >= ($3_1 | 0)) {
      break label$77
     }
     $11_1 = (($3_1 + $12_1 | 0) - $21_1 | 0) + 2 | 0;
     break label$76;
    }
    $11_1 = (($12_1 - ($6_1 + 16 | 0) | 0) - $21_1 | 0) + $18_1 | 0;
   }
   $10_1 = $11_1 + $22_1 | 0;
   $649($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 | 0);
   $643($0_1 | 0, $14_1 | 0, $22_1 | 0);
   $649($0_1 | 0, 48 | 0, $2_1 | 0, $10_1 | 0, $4_1 ^ 65536 | 0 | 0);
   $18_1 = $18_1 - ($6_1 + 16 | 0) | 0;
   $643($0_1 | 0, $6_1 + 16 | 0 | 0, $18_1 | 0);
   $17_1 = $12_1 - $21_1 | 0;
   $649($0_1 | 0, 48 | 0, $11_1 - ($18_1 + $17_1 | 0) | 0 | 0, 0 | 0, 0 | 0);
   $643($0_1 | 0, $21_1 | 0, $17_1 | 0);
   $649($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 ^ 8192 | 0 | 0);
  }
  global$0 = $6_1 + 560 | 0;
  return (($10_1 | 0) < ($2_1 | 0) ? $2_1 : $10_1) | 0;
 }
 
 function $652($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $2_1 = 0, $12_1 = 0, $12$hi = 0, $14_1 = 0, $14$hi = 0;
  $2_1 = ((HEAP32[$1_1 >> 2] | 0) + 15 | 0) & -16 | 0;
  HEAP32[$1_1 >> 2] = $2_1 + 16 | 0;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $12_1 = i64toi32_i32$0;
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $14_1 = i64toi32_i32$1;
  $14$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $12$hi;
  i64toi32_i32$1 = $14$hi;
  HEAPF64[$0_1 >> 3] = +$698($12_1 | 0, i64toi32_i32$0 | 0, $14_1 | 0, i64toi32_i32$1 | 0);
 }
 
 function $653($0_1) {
  $0_1 = +$0_1;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  wasm2js_scratch_store_f64(+$0_1);
  i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
  i64toi32_i32$1 = wasm2js_scratch_load_i32(0 | 0) | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function $654($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $641($0_1 | 0, $1_1 | 0, $2_1 | 0, 0 | 0, 0 | 0) | 0 | 0;
 }
 
 function $655($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $656($0_1) {
  $0_1 = $0_1 | 0;
  return fimport$91($655(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $657($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = $658() | 0;
  HEAP32[($0_1 + 56 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
  label$1 : {
   $2_1 = HEAP32[$1_1 >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   HEAP32[($2_1 + 52 | 0) >> 2] = $0_1;
  }
  HEAP32[$1_1 >> 2] = $0_1;
  $659();
  return $0_1 | 0;
 }
 
 function $658() {
  $680(331460 | 0);
  return 331468 | 0;
 }
 
 function $659() {
  $681(331460 | 0);
 }
 
 function $660($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $8_1 = 0, $9_1 = 0, $6_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  $4_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  HEAP32[($3_1 + 16 | 0) >> 2] = $4_1;
  $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  HEAP32[($3_1 + 28 | 0) >> 2] = $2_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $1_1;
  $1_1 = $5_1 - $4_1 | 0;
  HEAP32[($3_1 + 20 | 0) >> 2] = $1_1;
  $6_1 = $1_1 + $2_1 | 0;
  $7_1 = 2;
  $1_1 = $3_1 + 16 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if ($682(fimport$92(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, $3_1 + 16 | 0 | 0, 2 | 0, $3_1 + 12 | 0 | 0) | 0 | 0) | 0) {
       break label$4
      }
      label$5 : while (1) {
       $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
       if (($6_1 | 0) == ($4_1 | 0)) {
        break label$3
       }
       if (($4_1 | 0) <= (-1 | 0)) {
        break label$2
       }
       $8_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       $5_1 = $4_1 >>> 0 > $8_1 >>> 0;
       $9_1 = $1_1 + ($5_1 << 3 | 0) | 0;
       $8_1 = $4_1 - ($5_1 ? $8_1 : 0) | 0;
       HEAP32[$9_1 >> 2] = (HEAP32[$9_1 >> 2] | 0) + $8_1 | 0;
       $9_1 = $1_1 + ($5_1 ? 12 : 4) | 0;
       HEAP32[$9_1 >> 2] = (HEAP32[$9_1 >> 2] | 0) - $8_1 | 0;
       $6_1 = $6_1 - $4_1 | 0;
       $1_1 = $5_1 ? $1_1 + 8 | 0 : $1_1;
       $7_1 = $7_1 - $5_1 | 0;
       if (!($682(fimport$92(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, $1_1 | 0, $7_1 | 0, $3_1 + 12 | 0 | 0) | 0 | 0) | 0)) {
        continue label$5
       }
       break label$5;
      };
     }
     HEAP32[($3_1 + 12 | 0) >> 2] = -1;
     if (($6_1 | 0) != (-1 | 0)) {
      break label$2
     }
    }
    $1_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $1_1;
    HEAP32[($0_1 + 20 | 0) >> 2] = $1_1;
    HEAP32[($0_1 + 16 | 0) >> 2] = $1_1 + (HEAP32[($0_1 + 48 | 0) >> 2] | 0) | 0;
    $4_1 = $2_1;
    break label$1;
   }
   $4_1 = 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = 0;
   HEAP32[($0_1 + 16 | 0) >> 2] = 0;
   HEAP32[($0_1 + 20 | 0) >> 2] = 0;
   HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] | 0 | 32 | 0;
   if (($7_1 | 0) == (2 | 0)) {
    break label$1
   }
   $4_1 = $2_1 - (HEAP32[($1_1 + 4 | 0) >> 2] | 0) | 0;
  }
  global$0 = $3_1 + 32 | 0;
  return $4_1 | 0;
 }
 
 function $661($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 2;
  label$1 : {
   if ($621($0_1 | 0, 43 | 0) | 0) {
    break label$1
   }
   $1_1 = (HEAPU8[$0_1 >> 0] | 0 | 0) != (114 | 0);
  }
  $1_1 = $621($0_1 | 0, 120 | 0) | 0 ? $1_1 | 128 | 0 : $1_1;
  $1_1 = $621($0_1 | 0, 101 | 0) | 0 ? $1_1 | 524288 | 0 : $1_1;
  $0_1 = HEAPU8[$0_1 >> 0] | 0;
  $1_1 = ($0_1 | 0) == (114 | 0) ? $1_1 : $1_1 | 64 | 0;
  $1_1 = ($0_1 | 0) == (119 | 0) ? $1_1 | 512 | 0 : $1_1;
  return (($0_1 | 0) == (97 | 0) ? $1_1 | 1024 | 0 : $1_1) | 0;
 }
 
 function $662($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = -1;
  label$1 : {
   if ($633($0_1 | 0) | 0) {
    break label$1
   }
   if ((FUNCTION_TABLE[HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 15 | 0, 1) | 0 | 0) != (1 | 0)) {
    break label$1
   }
   $2_1 = HEAPU8[($1_1 + 15 | 0) >> 0] | 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $663($0_1, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $4$hi = 0, i64toi32_i32$2 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, i64toi32_i32$3 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 112 | 0) >> 2] = $1_1;
  HEAP32[(i64toi32_i32$1 + 116 | 0) >> 2] = $1$hi;
  $2_1 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
  $3_1 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
  i64toi32_i32$1 = $2_1 - $3_1 | 0;
  i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
  $4_1 = i64toi32_i32$1;
  $4$hi = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 120 | 0) >> 2] = $4_1;
  HEAP32[(i64toi32_i32$1 + 124 | 0) >> 2] = i64toi32_i32$0;
  label$1 : {
   i64toi32_i32$0 = $1$hi;
   if (!($1_1 | $1$hi | 0)) {
    break label$1
   }
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$3 = $1_1;
   if ((i64toi32_i32$0 | 0) < (i64toi32_i32$1 | 0)) {
    $11_1 = 1
   } else {
    if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$1 | 0)) {
     if (i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0) {
      $12_1 = 0
     } else {
      $12_1 = 1
     }
     $13_1 = $12_1;
    } else {
     $13_1 = 0
    }
    $11_1 = $13_1;
   }
   if ($11_1) {
    break label$1
   }
   i64toi32_i32$2 = $1$hi;
   HEAP32[($0_1 + 104 | 0) >> 2] = $3_1 + $1_1 | 0;
   return;
  }
  HEAP32[($0_1 + 104 | 0) >> 2] = $2_1;
 }
 
 function $664($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, $4$hi = 0, i64toi32_i32$4 = 0, $3_1 = 0, $4_1 = 0, $1_1 = 0, $2_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $28_1 = 0, $10$hi = 0, $27_1 = 0, $27$hi = 0, $35_1 = 0, $35$hi = 0, $47_1 = 0, $49_1 = 0, $49$hi = 0, $56_1 = 0, $56$hi = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$0 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
     $4_1 = i64toi32_i32$0;
     $4$hi = i64toi32_i32$1;
     if (!(i64toi32_i32$0 | i64toi32_i32$1 | 0)) {
      break label$3
     }
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$1 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
     $10$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$3 = $4_1;
     if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
      $22_1 = 1
     } else {
      if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        $23_1 = 0
       } else {
        $23_1 = 1
       }
       $24_1 = $23_1;
      } else {
       $24_1 = 0
      }
      $22_1 = $24_1;
     }
     if ($22_1) {
      break label$2
     }
    }
    $1_1 = $662($0_1 | 0) | 0;
    if (($1_1 | 0) > (-1 | 0)) {
     break label$1
    }
   }
   HEAP32[($0_1 + 104 | 0) >> 2] = 0;
   return -1 | 0;
  }
  $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  label$4 : {
   label$5 : {
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$2 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$2;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$3 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 0;
    if ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) | 0) {
     break label$5
    }
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
    i64toi32_i32$1 = i64toi32_i32$3;
    i64toi32_i32$3 = -1;
    i64toi32_i32$2 = -1;
    i64toi32_i32$3 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
    $27_1 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
    $27$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$1 = $27$hi;
    i64toi32_i32$2 = $27_1;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
    i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $4_1 = i64toi32_i32$4;
    $4$hi = i64toi32_i32$5;
    $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    i64toi32_i32$0 = $2_1 - $3_1 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 >> 31 | 0;
    $35_1 = i64toi32_i32$0;
    $35$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$3 = i64toi32_i32$4;
    i64toi32_i32$0 = $35$hi;
    i64toi32_i32$2 = $35_1;
    if ((i64toi32_i32$5 | 0) > (i64toi32_i32$0 | 0)) {
     $25_1 = 1
    } else {
     if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
       $26_1 = 0
      } else {
       $26_1 = 1
      }
      $28_1 = $26_1;
     } else {
      $28_1 = 0
     }
     $25_1 = $28_1;
    }
    if ($25_1) {
     break label$5
    }
    i64toi32_i32$3 = $4$hi;
    HEAP32[($0_1 + 104 | 0) >> 2] = $3_1 + $4_1 | 0;
    break label$4;
   }
   HEAP32[($0_1 + 104 | 0) >> 2] = $2_1;
  }
  label$6 : {
   label$7 : {
    if ($2_1) {
     break label$7
    }
    $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    break label$6;
   }
   $47_1 = $0_1;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$3 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
   i64toi32_i32$5 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
   $49_1 = i64toi32_i32$3;
   $49$hi = i64toi32_i32$5;
   $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   i64toi32_i32$3 = ($2_1 - $3_1 | 0) + 1 | 0;
   i64toi32_i32$5 = i64toi32_i32$3 >> 31 | 0;
   $56_1 = i64toi32_i32$3;
   $56$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $49$hi;
   i64toi32_i32$2 = $49_1;
   i64toi32_i32$3 = $56$hi;
   i64toi32_i32$0 = $56_1;
   i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   i64toi32_i32$2 = $47_1;
   HEAP32[(i64toi32_i32$2 + 120 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[(i64toi32_i32$2 + 124 | 0) >> 2] = i64toi32_i32$4;
  }
  label$8 : {
   $0_1 = $3_1 + -1 | 0;
   if (($1_1 | 0) == (HEAPU8[$0_1 >> 0] | 0 | 0)) {
    break label$8
   }
   HEAP8[$0_1 >> 0] = $1_1;
  }
  return $1_1 | 0;
 }
 
 function $665($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 | 0) == (32 | 0) | ($0_1 + -9 | 0) >>> 0 < 5 >>> 0 | 0 | 0;
 }
 
 function $666($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $7_1 = 0, $11_1 = 0, $18$hi = 0, $20_1 = 0, $20$hi = 0, $21_1 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $7_1 = i64toi32_i32$1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $22_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $22_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $11_1 = $22_1 & 32768 | 0;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $23_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $23_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $11_1 | ($23_1 & 32767 | 0) | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $24_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $24_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $18$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $20_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $20$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $18$hi;
  i64toi32_i32$0 = $24_1;
  i64toi32_i32$2 = $20$hi;
  i64toi32_i32$3 = $20_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  $21_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
  i64toi32_i32$0 = $7_1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $21_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function $667($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $4_1 = 0, i64toi32_i32$4 = 0, $20_1 = 0, $70_1 = 0, $71_1 = 0, $71$hi = 0, $72_1 = 0, $72$hi = 0, $76$hi = 0, $80_1 = 0, $83_1 = 0;
  $4_1 = global$0 - 80 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    if (($3_1 | 0) < (16384 | 0)) {
     break label$2
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 2147352576;
    $693($4_1 + 32 | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$1 = ($4_1 + 32 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] | 0;
    $1_1 = i64toi32_i32$2;
    $1$hi = i64toi32_i32$3;
    label$3 : {
     if (($3_1 | 0) >= (32767 | 0)) {
      break label$3
     }
     $3_1 = $3_1 + -16383 | 0;
     break label$1;
    }
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 2147352576;
    $693($4_1 + 16 | 0 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0);
    $3_1 = (($3_1 | 0) < (49149 | 0) ? $3_1 : 49149) + -32766 | 0;
    i64toi32_i32$2 = ($4_1 + 16 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
    $1_1 = i64toi32_i32$1;
    $1$hi = i64toi32_i32$0;
    break label$1;
   }
   if (($3_1 | 0) > (-16383 | 0)) {
    break label$1
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 65536;
   $693($4_1 + 64 | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$1 = ($4_1 + 64 | 0) + 8 | 0;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $2_1 = i64toi32_i32$3;
   $2$hi = i64toi32_i32$2;
   i64toi32_i32$1 = $4_1;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] | 0;
   $1_1 = i64toi32_i32$2;
   $1$hi = i64toi32_i32$3;
   label$4 : {
    if (($3_1 | 0) <= (-32765 | 0)) {
     break label$4
    }
    $3_1 = $3_1 + 16382 | 0;
    break label$1;
   }
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 65536;
   $693($4_1 + 48 | 0 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0);
   $3_1 = (($3_1 | 0) > (-49146 | 0) ? $3_1 : -49146) + 32764 | 0;
   i64toi32_i32$2 = ($4_1 + 48 | 0) + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $2_1 = i64toi32_i32$0;
   $2$hi = i64toi32_i32$1;
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
   $1_1 = i64toi32_i32$1;
   $1$hi = i64toi32_i32$0;
  }
  $70_1 = $4_1;
  i64toi32_i32$0 = $1$hi;
  $71_1 = $1_1;
  $71$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  $72_1 = $2_1;
  $72$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $3_1 + 16383 | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $20_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $20_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $76$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $71$hi;
  i64toi32_i32$2 = $72$hi;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = $76$hi;
  $693($70_1 | 0, $71_1 | 0, i64toi32_i32$1 | 0, $72_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, $20_1 | 0, i64toi32_i32$3 | 0);
  i64toi32_i32$2 = $4_1 + 8 | 0;
  i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $80_1 = i64toi32_i32$3;
  i64toi32_i32$3 = $0_1;
  HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] = $80_1;
  HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $83_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $83_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$3;
  global$0 = i64toi32_i32$2 + 80 | 0;
 }
 
 function $668($0_1, $1_1, $1$hi, $2_1, $2$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $5_1 = 0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = 2147483647;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $5_1 = i64toi32_i32$2 & -1 | 0;
  i64toi32_i32$2 = $0_1;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $5_1;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $1$hi;
  HEAP32[i64toi32_i32$2 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
 }
 
 function $669($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $9_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $8_1 = 0, $11_1 = 0, $11$hi = 0, $10_1 = 0, $10$hi = 0, $6_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  i64toi32_i32$0 = 0;
  $10_1 = 0;
  $10$hi = i64toi32_i32$0;
  label$1 : {
   label$2 : {
    if ($2_1 >>> 0 > 2 >>> 0) {
     break label$2
    }
    $5_1 = $1_1 + 4 | 0;
    $2_1 = $2_1 << 2 | 0;
    $6_1 = HEAP32[($2_1 + 8220 | 0) >> 2] | 0;
    $7_1 = HEAP32[($2_1 + 8208 | 0) >> 2] | 0;
    label$3 : while (1) {
     label$4 : {
      label$5 : {
       $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$5
       }
       HEAP32[$5_1 >> 2] = $2_1 + 1 | 0;
       $2_1 = HEAPU8[$2_1 >> 0] | 0;
       break label$4;
      }
      $2_1 = $664($1_1 | 0) | 0;
     }
     if ($665($2_1 | 0) | 0) {
      continue label$3
     }
     break label$3;
    };
    $8_1 = 1;
    label$6 : {
     label$7 : {
      switch ($2_1 + -43 | 0 | 0) {
      case 0:
      case 2:
       break label$7;
      default:
       break label$6;
      };
     }
     $8_1 = ($2_1 | 0) == (45 | 0) ? -1 : 1;
     label$8 : {
      $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
       break label$8
      }
      HEAP32[$5_1 >> 2] = $2_1 + 1 | 0;
      $2_1 = HEAPU8[$2_1 >> 0] | 0;
      break label$6;
     }
     $2_1 = $664($1_1 | 0) | 0;
    }
    $9_1 = 0;
    label$9 : {
     label$10 : {
      label$11 : {
       label$12 : while (1) {
        if (($2_1 | 32 | 0 | 0) != (HEAP8[($9_1 + 8133 | 0) >> 0] | 0 | 0)) {
         break label$11
        }
        label$13 : {
         if ($9_1 >>> 0 > 6 >>> 0) {
          break label$13
         }
         label$14 : {
          $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
          if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
           break label$14
          }
          HEAP32[$5_1 >> 2] = $2_1 + 1 | 0;
          $2_1 = HEAPU8[$2_1 >> 0] | 0;
          break label$13;
         }
         $2_1 = $664($1_1 | 0) | 0;
        }
        $9_1 = $9_1 + 1 | 0;
        if (($9_1 | 0) != (8 | 0)) {
         continue label$12
        }
        break label$10;
       };
      }
      label$15 : {
       if (($9_1 | 0) == (3 | 0)) {
        break label$15
       }
       if (($9_1 | 0) == (8 | 0)) {
        break label$10
       }
       if (!$3_1) {
        break label$9
       }
       if ($9_1 >>> 0 < 4 >>> 0) {
        break label$9
       }
       if (($9_1 | 0) == (8 | 0)) {
        break label$10
       }
      }
      label$16 : {
       $1_1 = HEAP32[($1_1 + 104 | 0) >> 2] | 0;
       if (!$1_1) {
        break label$16
       }
       HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
      }
      if (!$3_1) {
       break label$10
      }
      if ($9_1 >>> 0 < 4 >>> 0) {
       break label$10
      }
      label$17 : while (1) {
       label$18 : {
        if (!$1_1) {
         break label$18
        }
        HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
       }
       $9_1 = $9_1 + -1 | 0;
       if ($9_1 >>> 0 > 3 >>> 0) {
        continue label$17
       }
       break label$17;
      };
     }
     $689($4_1 | 0, Math_fround(Math_fround(Math_fround($8_1 | 0) * Math_fround(infinity))));
     i64toi32_i32$2 = $4_1 + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $11_1 = i64toi32_i32$0;
     $11$hi = i64toi32_i32$1;
     i64toi32_i32$2 = $4_1;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $10_1 = i64toi32_i32$1;
     $10$hi = i64toi32_i32$0;
     break label$1;
    }
    label$19 : {
     label$20 : {
      label$21 : {
       if ($9_1) {
        break label$21
       }
       $9_1 = 0;
       label$22 : while (1) {
        if (($2_1 | 32 | 0 | 0) != (HEAP8[($9_1 + 8142 | 0) >> 0] | 0 | 0)) {
         break label$21
        }
        label$23 : {
         if ($9_1 >>> 0 > 1 >>> 0) {
          break label$23
         }
         label$24 : {
          $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
          if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
           break label$24
          }
          HEAP32[$5_1 >> 2] = $2_1 + 1 | 0;
          $2_1 = HEAPU8[$2_1 >> 0] | 0;
          break label$23;
         }
         $2_1 = $664($1_1 | 0) | 0;
        }
        $9_1 = $9_1 + 1 | 0;
        if (($9_1 | 0) != (3 | 0)) {
         continue label$22
        }
        break label$20;
       };
      }
      label$25 : {
       switch ($9_1 | 0) {
       case 0:
        label$27 : {
         if (($2_1 | 0) != (48 | 0)) {
          break label$27
         }
         label$28 : {
          label$29 : {
           $9_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
           if ($9_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
            break label$29
           }
           HEAP32[$5_1 >> 2] = $9_1 + 1 | 0;
           $9_1 = HEAPU8[$9_1 >> 0] | 0;
           break label$28;
          }
          $9_1 = $664($1_1 | 0) | 0;
         }
         label$30 : {
          if (($9_1 & -33 | 0 | 0) != (88 | 0)) {
           break label$30
          }
          $670($4_1 + 16 | 0 | 0, $1_1 | 0, $7_1 | 0, $6_1 | 0, $8_1 | 0, $3_1 | 0);
          i64toi32_i32$2 = $4_1;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] | 0;
          $11_1 = i64toi32_i32$0;
          $11$hi = i64toi32_i32$1;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
          $10_1 = i64toi32_i32$1;
          $10$hi = i64toi32_i32$0;
          break label$1;
         }
         if (!(HEAP32[($1_1 + 104 | 0) >> 2] | 0)) {
          break label$27
         }
         HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
        }
        $671($4_1 + 32 | 0 | 0, $1_1 | 0, $2_1 | 0, $7_1 | 0, $6_1 | 0, $8_1 | 0, $3_1 | 0);
        i64toi32_i32$2 = $4_1;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 40 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 44 | 0) >> 2] | 0;
        $11_1 = i64toi32_i32$0;
        $11$hi = i64toi32_i32$1;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
        $10_1 = i64toi32_i32$1;
        $10$hi = i64toi32_i32$0;
        break label$1;
       case 3:
        break label$20;
       default:
        break label$25;
       };
      }
      label$31 : {
       if (!(HEAP32[($1_1 + 104 | 0) >> 2] | 0)) {
        break label$31
       }
       HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
      }
      HEAP32[($587() | 0) >> 2] = 28;
      break label$19;
     }
     label$32 : {
      label$33 : {
       $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$33
       }
       HEAP32[$5_1 >> 2] = $2_1 + 1 | 0;
       $2_1 = HEAPU8[$2_1 >> 0] | 0;
       break label$32;
      }
      $2_1 = $664($1_1 | 0) | 0;
     }
     label$34 : {
      label$35 : {
       if (($2_1 | 0) != (40 | 0)) {
        break label$35
       }
       $9_1 = 1;
       break label$34;
      }
      i64toi32_i32$0 = 2147450880;
      $11_1 = 0;
      $11$hi = i64toi32_i32$0;
      if (!(HEAP32[($1_1 + 104 | 0) >> 2] | 0)) {
       break label$1
      }
      HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
      break label$1;
     }
     label$36 : while (1) {
      label$37 : {
       label$38 : {
        $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
        if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
         break label$38
        }
        HEAP32[$5_1 >> 2] = $2_1 + 1 | 0;
        $2_1 = HEAPU8[$2_1 >> 0] | 0;
        break label$37;
       }
       $2_1 = $664($1_1 | 0) | 0;
      }
      $8_1 = $2_1 + -65 | 0;
      label$39 : {
       label$40 : {
        if (($2_1 + -48 | 0) >>> 0 < 10 >>> 0) {
         break label$40
        }
        if ($8_1 >>> 0 < 26 >>> 0) {
         break label$40
        }
        $8_1 = $2_1 + -97 | 0;
        if (($2_1 | 0) == (95 | 0)) {
         break label$40
        }
        if ($8_1 >>> 0 >= 26 >>> 0) {
         break label$39
        }
       }
       $9_1 = $9_1 + 1 | 0;
       continue label$36;
      }
      break label$36;
     };
     i64toi32_i32$0 = 2147450880;
     $11_1 = 0;
     $11$hi = i64toi32_i32$0;
     if (($2_1 | 0) == (41 | 0)) {
      break label$1
     }
     label$41 : {
      $2_1 = HEAP32[($1_1 + 104 | 0) >> 2] | 0;
      if (!$2_1) {
       break label$41
      }
      HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
     }
     label$42 : {
      if (!$3_1) {
       break label$42
      }
      if (!$9_1) {
       break label$1
      }
      label$43 : while (1) {
       $9_1 = $9_1 + -1 | 0;
       label$44 : {
        if (!$2_1) {
         break label$44
        }
        HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
       }
       if ($9_1) {
        continue label$43
       }
       break label$1;
      };
     }
     HEAP32[($587() | 0) >> 2] = 28;
    }
    i64toi32_i32$0 = 0;
    $10_1 = 0;
    $10$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $663($1_1 | 0, 0 | 0, i64toi32_i32$0 | 0);
   }
   i64toi32_i32$0 = 0;
   $11_1 = 0;
   $11$hi = i64toi32_i32$0;
  }
  i64toi32_i32$0 = $10$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $10_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $11$hi;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $11_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $4_1 + 48 | 0;
 }
 
 function $670($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $6_1 = 0, i64toi32_i32$4 = 0, $7_1 = 0, $16$hi = 0, $19$hi = 0, $16_1 = 0, $19_1 = 0, $15$hi = 0, $17$hi = 0, $14$hi = 0, $15_1 = 0, $17_1 = 0, $18$hi = 0, $14_1 = 0, $10_1 = 0, $18_1 = 0, $8_1 = 0, $9_1 = 0, $20$hi = 0, $20_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $106_1 = 0, $107_1 = 0, $108_1 = 0, $109_1 = 0, $110_1 = 0, $111_1 = 0, $112_1 = 0, $113_1 = 0, $114_1 = 0, $115_1 = 0, $116_1 = 0, $117_1 = 0, $118_1 = 0, $119_1 = 0, $120_1 = 0, $121_1 = 0, $122_1 = 0, $123_1 = 0, $124_1 = 0, $133_1 = 0, $133$hi = 0, $137_1 = 0, $137$hi = 0, $142_1 = 0, $142$hi = 0, $146_1 = 0, $146$hi = 0, $164_1 = 0, $164$hi = 0, $168_1 = 0, $168$hi = 0, $258$hi = 0, $265$hi = 0, $274_1 = 0, $274$hi = 0, $278_1 = 0, $278$hi = 0, $282_1 = 0, $282$hi = 0, $286_1 = 0, $286$hi = 0, $296_1 = 0, $296$hi = 0, $313_1 = 0, $313$hi = 0, $317_1 = 0, $317$hi = 0, $322_1 = 0, $322$hi = 0, $324_1 = 0, $324$hi = 0, $342$hi = 0, $350_1 = 0, $351_1 = 0, $354$hi = 0, $378_1 = 0, $378$hi = 0, $382_1 = 0, $382$hi = 0, $416_1 = 0, $416$hi = 0, $420_1 = 0, $420$hi = 0, $424_1 = 0, $424$hi = 0, $428_1 = 0, $428$hi = 0, $435_1 = 0, $435$hi = 0, $438_1 = 0, $438$hi = 0, $444_1 = 0, $444$hi = 0, $448_1 = 0, $448$hi = 0, $450_1 = 0, $450$hi = 0, $454_1 = 0, $454$hi = 0, $458_1 = 0, $458$hi = 0, $462_1 = 0, $462$hi = 0, $492_1 = 0, $492$hi = 0, $496_1 = 0, $496$hi = 0, $500_1 = 0, $500$hi = 0, $504_1 = 0, $504$hi = 0;
  $6_1 = global$0 - 432 | 0;
  global$0 = $6_1;
  label$1 : {
   label$2 : {
    $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    if ($7_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
     break label$2
    }
    HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
    $7_1 = HEAPU8[$7_1 >> 0] | 0;
    break label$1;
   }
   $7_1 = $664($1_1 | 0) | 0;
  }
  $8_1 = 0;
  i64toi32_i32$0 = 0;
  $14_1 = 0;
  $14$hi = i64toi32_i32$0;
  $9_1 = 0;
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : while (1) {
      label$7 : {
       if (($7_1 | 0) == (48 | 0)) {
        break label$7
       }
       if (($7_1 | 0) != (46 | 0)) {
        break label$3
       }
       $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if ($7_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$5
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
       $7_1 = HEAPU8[$7_1 >> 0] | 0;
       break label$4;
      }
      label$8 : {
       $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if ($7_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$8
       }
       $9_1 = 1;
       HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
       $7_1 = HEAPU8[$7_1 >> 0] | 0;
       continue label$6;
      }
      $9_1 = 1;
      $7_1 = $664($1_1 | 0) | 0;
      continue label$6;
     };
    }
    $7_1 = $664($1_1 | 0) | 0;
   }
   $8_1 = 1;
   i64toi32_i32$0 = 0;
   $14_1 = 0;
   $14$hi = i64toi32_i32$0;
   if (($7_1 | 0) != (48 | 0)) {
    break label$3
   }
   label$9 : while (1) {
    label$10 : {
     label$11 : {
      $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if ($7_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
       break label$11
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
      $7_1 = HEAPU8[$7_1 >> 0] | 0;
      break label$10;
     }
     $7_1 = $664($1_1 | 0) | 0;
    }
    i64toi32_i32$0 = $14$hi;
    i64toi32_i32$2 = $14_1;
    i64toi32_i32$1 = -1;
    i64toi32_i32$3 = -1;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $14_1 = i64toi32_i32$4;
    $14$hi = i64toi32_i32$5;
    if (($7_1 | 0) == (48 | 0)) {
     continue label$9
    }
    break label$9;
   };
   $8_1 = 1;
   $9_1 = 1;
  }
  i64toi32_i32$5 = 1073676288;
  $15_1 = 0;
  $15$hi = i64toi32_i32$5;
  $10_1 = 0;
  i64toi32_i32$5 = 0;
  $16_1 = 0;
  $16$hi = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  $17_1 = 0;
  $17$hi = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  $18_1 = 0;
  $18$hi = i64toi32_i32$5;
  $11_1 = 0;
  i64toi32_i32$5 = 0;
  $19_1 = 0;
  $19$hi = i64toi32_i32$5;
  label$12 : {
   label$13 : while (1) {
    $12_1 = $7_1 | 32 | 0;
    label$14 : {
     label$15 : {
      $13_1 = $7_1 + -48 | 0;
      if ($13_1 >>> 0 < 10 >>> 0) {
       break label$15
      }
      label$16 : {
       if (($7_1 | 0) == (46 | 0)) {
        break label$16
       }
       if (($12_1 + -97 | 0) >>> 0 > 5 >>> 0) {
        break label$12
       }
      }
      if (($7_1 | 0) != (46 | 0)) {
       break label$15
      }
      if ($8_1) {
       break label$12
      }
      $8_1 = 1;
      i64toi32_i32$5 = $19$hi;
      $14_1 = $19_1;
      $14$hi = i64toi32_i32$5;
      break label$14;
     }
     $7_1 = ($7_1 | 0) > (57 | 0) ? $12_1 + -87 | 0 : $13_1;
     label$17 : {
      label$18 : {
       i64toi32_i32$5 = $19$hi;
       i64toi32_i32$0 = $19_1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$3 = 7;
       if ((i64toi32_i32$5 | 0) > (i64toi32_i32$2 | 0)) {
        $106_1 = 1
       } else {
        if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$2 | 0)) {
         if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
          $107_1 = 0
         } else {
          $107_1 = 1
         }
         $108_1 = $107_1;
        } else {
         $108_1 = 0
        }
        $106_1 = $108_1;
       }
       if ($106_1) {
        break label$18
       }
       $10_1 = $7_1 + ($10_1 << 4 | 0) | 0;
       break label$17;
      }
      label$19 : {
       i64toi32_i32$0 = $19$hi;
       i64toi32_i32$3 = $19_1;
       i64toi32_i32$5 = 0;
       i64toi32_i32$2 = 28;
       if ((i64toi32_i32$0 | 0) > (i64toi32_i32$5 | 0)) {
        $109_1 = 1
       } else {
        if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$5 | 0)) {
         if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$2 >>> 0) {
          $110_1 = 0
         } else {
          $110_1 = 1
         }
         $111_1 = $110_1;
        } else {
         $111_1 = 0
        }
        $109_1 = $111_1;
       }
       if ($109_1) {
        break label$19
       }
       $695($6_1 + 48 | 0 | 0, $7_1 | 0);
       i64toi32_i32$3 = $18$hi;
       i64toi32_i32$3 = $15$hi;
       i64toi32_i32$3 = $18$hi;
       i64toi32_i32$0 = $15$hi;
       i64toi32_i32$2 = 0;
       i64toi32_i32$5 = 1073414144;
       $693($6_1 + 32 | 0 | 0, $18_1 | 0, i64toi32_i32$3 | 0, $15_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0);
       i64toi32_i32$0 = $6_1;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
       $18_1 = i64toi32_i32$5;
       $18$hi = i64toi32_i32$2;
       i64toi32_i32$0 = (i64toi32_i32$0 + 32 | 0) + 8 | 0;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
       $15_1 = i64toi32_i32$2;
       $15$hi = i64toi32_i32$5;
       i64toi32_i32$0 = $6_1;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 52 | 0) >> 2] | 0;
       $133_1 = i64toi32_i32$5;
       $133$hi = i64toi32_i32$2;
       i64toi32_i32$0 = (i64toi32_i32$0 + 48 | 0) + 8 | 0;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
       $137_1 = i64toi32_i32$2;
       $137$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $18$hi;
       i64toi32_i32$2 = $15$hi;
       i64toi32_i32$0 = $133$hi;
       i64toi32_i32$3 = $137$hi;
       $693($6_1 + 16 | 0 | 0, $18_1 | 0, i64toi32_i32$5 | 0, $15_1 | 0, i64toi32_i32$2 | 0, $133_1 | 0, i64toi32_i32$0 | 0, $137_1 | 0, i64toi32_i32$3 | 0);
       i64toi32_i32$3 = $16$hi;
       i64toi32_i32$3 = $17$hi;
       i64toi32_i32$2 = $6_1;
       i64toi32_i32$3 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
       $142_1 = i64toi32_i32$3;
       $142$hi = i64toi32_i32$0;
       i64toi32_i32$2 = ($6_1 + 16 | 0) + 8 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $146_1 = i64toi32_i32$0;
       $146$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $16$hi;
       i64toi32_i32$0 = $17$hi;
       i64toi32_i32$2 = $142$hi;
       i64toi32_i32$5 = $146$hi;
       $688($6_1 | 0, $16_1 | 0, i64toi32_i32$3 | 0, $17_1 | 0, i64toi32_i32$0 | 0, $142_1 | 0, i64toi32_i32$2 | 0, $146_1 | 0, i64toi32_i32$5 | 0);
       i64toi32_i32$0 = $6_1 + 8 | 0;
       i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
       $17_1 = i64toi32_i32$5;
       $17$hi = i64toi32_i32$2;
       i64toi32_i32$0 = $6_1;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
       $16_1 = i64toi32_i32$2;
       $16$hi = i64toi32_i32$5;
       break label$17;
      }
      if ($11_1) {
       break label$17
      }
      if (!$7_1) {
       break label$17
      }
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$5 = $15$hi;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$2 = $15$hi;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 1073610752;
      $693($6_1 + 80 | 0 | 0, $18_1 | 0, i64toi32_i32$5 | 0, $15_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$3 = $16$hi;
      i64toi32_i32$3 = $17$hi;
      i64toi32_i32$2 = $6_1;
      i64toi32_i32$3 = HEAP32[($6_1 + 80 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($6_1 + 84 | 0) >> 2] | 0;
      $164_1 = i64toi32_i32$3;
      $164$hi = i64toi32_i32$0;
      i64toi32_i32$2 = ($6_1 + 80 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $168_1 = i64toi32_i32$0;
      $168$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $16$hi;
      i64toi32_i32$0 = $17$hi;
      i64toi32_i32$2 = $164$hi;
      i64toi32_i32$5 = $168$hi;
      $688($6_1 + 64 | 0 | 0, $16_1 | 0, i64toi32_i32$3 | 0, $17_1 | 0, i64toi32_i32$0 | 0, $164_1 | 0, i64toi32_i32$2 | 0, $168_1 | 0, i64toi32_i32$5 | 0);
      i64toi32_i32$0 = ($6_1 + 64 | 0) + 8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $17_1 = i64toi32_i32$5;
      $17$hi = i64toi32_i32$2;
      $11_1 = 1;
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] | 0;
      $16_1 = i64toi32_i32$2;
      $16$hi = i64toi32_i32$5;
     }
     i64toi32_i32$5 = $19$hi;
     i64toi32_i32$0 = $19_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 1;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $19_1 = i64toi32_i32$1;
     $19$hi = i64toi32_i32$4;
     $9_1 = 1;
    }
    label$20 : {
     $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     if ($7_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
      break label$20
     }
     HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
     $7_1 = HEAPU8[$7_1 >> 0] | 0;
     continue label$13;
    }
    $7_1 = $664($1_1 | 0) | 0;
    continue label$13;
   };
  }
  label$21 : {
   label$22 : {
    label$23 : {
     label$24 : {
      if ($9_1) {
       break label$24
      }
      label$25 : {
       if (HEAP32[($1_1 + 104 | 0) >> 2] | 0) {
        break label$25
       }
       if ($5_1) {
        break label$22
       }
       break label$23;
      }
      $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + -1 | 0;
      if (!$5_1) {
       break label$23
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + -2 | 0;
      if (!$8_1) {
       break label$22
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + -3 | 0;
      break label$22;
     }
     label$26 : {
      i64toi32_i32$4 = $19$hi;
      i64toi32_i32$5 = $19_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 7;
      if ((i64toi32_i32$4 | 0) > (i64toi32_i32$0 | 0)) {
       $112_1 = 1
      } else {
       if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$0 | 0)) {
        if (i64toi32_i32$5 >>> 0 <= i64toi32_i32$3 >>> 0) {
         $113_1 = 0
        } else {
         $113_1 = 1
        }
        $114_1 = $113_1;
       } else {
        $114_1 = 0
       }
       $112_1 = $114_1;
      }
      if ($112_1) {
       break label$26
      }
      i64toi32_i32$5 = $19$hi;
      $15_1 = $19_1;
      $15$hi = i64toi32_i32$5;
      label$27 : while (1) {
       $10_1 = $10_1 << 4 | 0;
       i64toi32_i32$5 = $15$hi;
       i64toi32_i32$3 = $15_1;
       i64toi32_i32$4 = 0;
       i64toi32_i32$0 = 1;
       i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
       i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $15_1 = i64toi32_i32$2;
       $15$hi = i64toi32_i32$1;
       i64toi32_i32$5 = i64toi32_i32$2;
       i64toi32_i32$3 = 0;
       i64toi32_i32$0 = 8;
       if ((i64toi32_i32$5 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | 0) {
        continue label$27
       }
       break label$27;
      };
     }
     label$28 : {
      label$29 : {
       if (($7_1 & -33 | 0 | 0) != (80 | 0)) {
        break label$29
       }
       i64toi32_i32$5 = $672($1_1 | 0, $5_1 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $15_1 = i64toi32_i32$5;
       $15$hi = i64toi32_i32$1;
       i64toi32_i32$0 = i64toi32_i32$5;
       i64toi32_i32$5 = -2147483648;
       i64toi32_i32$3 = 0;
       if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | 0) {
        break label$28
       }
       label$30 : {
        if (!$5_1) {
         break label$30
        }
        i64toi32_i32$0 = 0;
        $15_1 = 0;
        $15$hi = i64toi32_i32$0;
        if (!(HEAP32[($1_1 + 104 | 0) >> 2] | 0)) {
         break label$28
        }
        HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
        break label$28;
       }
       i64toi32_i32$0 = 0;
       $16_1 = 0;
       $16$hi = i64toi32_i32$0;
       i64toi32_i32$0 = 0;
       $663($1_1 | 0, 0 | 0, i64toi32_i32$0 | 0);
       i64toi32_i32$0 = 0;
       $19_1 = 0;
       $19$hi = i64toi32_i32$0;
       break label$21;
      }
      i64toi32_i32$0 = 0;
      $15_1 = 0;
      $15$hi = i64toi32_i32$0;
      if (!(HEAP32[($1_1 + 104 | 0) >> 2] | 0)) {
       break label$28
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
     }
     label$31 : {
      if ($10_1) {
       break label$31
      }
      $692($6_1 + 112 | 0 | 0, +(+($4_1 | 0) * 0.0));
      i64toi32_i32$3 = $6_1 + 120 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
      $19_1 = i64toi32_i32$0;
      $19$hi = i64toi32_i32$1;
      i64toi32_i32$3 = $6_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 112 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 116 | 0) >> 2] | 0;
      $16_1 = i64toi32_i32$1;
      $16$hi = i64toi32_i32$0;
      break label$21;
     }
     label$32 : {
      i64toi32_i32$0 = $14$hi;
      i64toi32_i32$0 = $19$hi;
      i64toi32_i32$4 = $8_1;
      i64toi32_i32$0 = $14$hi;
      i64toi32_i32$1 = $19$hi;
      i64toi32_i32$5 = i64toi32_i32$4 ? $14_1 : $19_1;
      i64toi32_i32$3 = i64toi32_i32$4 ? i64toi32_i32$0 : i64toi32_i32$1;
      i64toi32_i32$4 = i64toi32_i32$5;
      i64toi32_i32$5 = 0;
      i64toi32_i32$0 = 2;
      i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
       $115_1 = 0;
      } else {
       i64toi32_i32$5 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$1 | 0) | 0;
       $115_1 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
      }
      $258$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $15$hi;
      i64toi32_i32$5 = $258$hi;
      i64toi32_i32$3 = $115_1;
      i64toi32_i32$4 = $15$hi;
      i64toi32_i32$0 = $15_1;
      i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      i64toi32_i32$5 = i64toi32_i32$1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$0 = -32;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $19_1 = i64toi32_i32$4;
      $19$hi = i64toi32_i32$1;
      i64toi32_i32$1 = 0;
      $265$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $19$hi;
      i64toi32_i32$2 = i64toi32_i32$4;
      i64toi32_i32$5 = $265$hi;
      i64toi32_i32$0 = 0 - $3_1 | 0;
      if ((i64toi32_i32$1 | 0) < (i64toi32_i32$5 | 0)) {
       $116_1 = 1
      } else {
       if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$5 | 0)) {
        if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0) {
         $117_1 = 0
        } else {
         $117_1 = 1
        }
        $118_1 = $117_1;
       } else {
        $118_1 = 0
       }
       $116_1 = $118_1;
      }
      if ($116_1) {
       break label$32
      }
      HEAP32[($587() | 0) >> 2] = 68;
      $695($6_1 + 160 | 0 | 0, $4_1 | 0);
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 160 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 164 | 0) >> 2] | 0;
      $274_1 = i64toi32_i32$2;
      $274$hi = i64toi32_i32$1;
      i64toi32_i32$0 = (i64toi32_i32$0 + 160 | 0) + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $278_1 = i64toi32_i32$1;
      $278$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $274$hi;
      i64toi32_i32$1 = $278$hi;
      i64toi32_i32$0 = -1;
      i64toi32_i32$5 = 2147418111;
      $693($6_1 + 144 | 0 | 0, $274_1 | 0, i64toi32_i32$2 | 0, $278_1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$0 | 0, -1 | 0, i64toi32_i32$5 | 0);
      i64toi32_i32$1 = $6_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 144 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 148 | 0) >> 2] | 0;
      $282_1 = i64toi32_i32$5;
      $282$hi = i64toi32_i32$0;
      i64toi32_i32$1 = (i64toi32_i32$1 + 144 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $286_1 = i64toi32_i32$0;
      $286$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $282$hi;
      i64toi32_i32$0 = $286$hi;
      i64toi32_i32$1 = -1;
      i64toi32_i32$2 = 2147418111;
      $693($6_1 + 128 | 0 | 0, $282_1 | 0, i64toi32_i32$5 | 0, $286_1 | 0, i64toi32_i32$0 | 0, -1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$2 | 0);
      i64toi32_i32$0 = ($6_1 + 128 | 0) + 8 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $19_1 = i64toi32_i32$2;
      $19$hi = i64toi32_i32$1;
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 128 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 132 | 0) >> 2] | 0;
      $16_1 = i64toi32_i32$1;
      $16$hi = i64toi32_i32$2;
      break label$21;
     }
     label$33 : {
      i64toi32_i32$2 = $19$hi;
      i64toi32_i32$1 = $3_1 + -226 | 0;
      i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
      $296_1 = i64toi32_i32$1;
      $296$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $19$hi;
      i64toi32_i32$0 = $19_1;
      i64toi32_i32$1 = $296$hi;
      i64toi32_i32$5 = $296_1;
      if ((i64toi32_i32$2 | 0) < (i64toi32_i32$1 | 0)) {
       $119_1 = 1
      } else {
       if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$1 | 0)) {
        if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$5 >>> 0) {
         $120_1 = 0
        } else {
         $120_1 = 1
        }
        $121_1 = $120_1;
       } else {
        $121_1 = 0
       }
       $119_1 = $121_1;
      }
      if ($119_1) {
       break label$33
      }
      label$34 : {
       if (($10_1 | 0) <= (-1 | 0)) {
        break label$34
       }
       label$35 : while (1) {
        i64toi32_i32$0 = $16$hi;
        i64toi32_i32$0 = $17$hi;
        i64toi32_i32$0 = $16$hi;
        i64toi32_i32$2 = $17$hi;
        i64toi32_i32$5 = 0;
        i64toi32_i32$1 = -1073807360;
        $688($6_1 + 416 | 0 | 0, $16_1 | 0, i64toi32_i32$0 | 0, $17_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$1 | 0);
        i64toi32_i32$1 = i64toi32_i32$0;
        i64toi32_i32$1 = i64toi32_i32$2;
        i64toi32_i32$1 = i64toi32_i32$0;
        i64toi32_i32$5 = i64toi32_i32$2;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 1073610752;
        $7_1 = $684($16_1 | 0, i64toi32_i32$1 | 0, $17_1 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$0 = i64toi32_i32$1;
        i64toi32_i32$0 = i64toi32_i32$5;
        i64toi32_i32$0 = i64toi32_i32$1;
        i64toi32_i32$5 = $6_1;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 416 | 0) >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 420 | 0) >> 2] | 0;
        $313_1 = i64toi32_i32$0;
        $313$hi = i64toi32_i32$2;
        $1_1 = ($7_1 | 0) < (0 | 0);
        i64toi32_i32$3 = $1_1;
        i64toi32_i32$2 = i64toi32_i32$1;
        i64toi32_i32$0 = $313$hi;
        i64toi32_i32$1 = i64toi32_i32$3 ? $16_1 : $313_1;
        i64toi32_i32$5 = i64toi32_i32$3 ? i64toi32_i32$2 : i64toi32_i32$0;
        $317_1 = i64toi32_i32$1;
        $317$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $17$hi;
        i64toi32_i32$3 = ($6_1 + 416 | 0) + 8 | 0;
        i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
        $322_1 = i64toi32_i32$5;
        $322$hi = i64toi32_i32$1;
        i64toi32_i32$0 = $1_1;
        i64toi32_i32$1 = $17$hi;
        i64toi32_i32$5 = $322$hi;
        i64toi32_i32$2 = i64toi32_i32$0 ? $17_1 : $322_1;
        i64toi32_i32$3 = i64toi32_i32$0 ? i64toi32_i32$1 : i64toi32_i32$5;
        $324_1 = i64toi32_i32$2;
        $324$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $16$hi;
        i64toi32_i32$2 = i64toi32_i32$1;
        i64toi32_i32$0 = $317$hi;
        i64toi32_i32$1 = $324$hi;
        $688($6_1 + 400 | 0 | 0, $16_1 | 0, i64toi32_i32$3 | 0, $17_1 | 0, i64toi32_i32$2 | 0, $317_1 | 0, i64toi32_i32$0 | 0, $324_1 | 0, i64toi32_i32$1 | 0);
        i64toi32_i32$1 = $19$hi;
        i64toi32_i32$2 = $19_1;
        i64toi32_i32$0 = -1;
        i64toi32_i32$3 = -1;
        i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
        i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
        if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
        }
        $19_1 = i64toi32_i32$5;
        $19$hi = i64toi32_i32$4;
        i64toi32_i32$1 = ($6_1 + 400 | 0) + 8 | 0;
        i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
        $17_1 = i64toi32_i32$4;
        $17$hi = i64toi32_i32$2;
        i64toi32_i32$1 = $6_1;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 400 | 0) >> 2] | 0;
        i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 404 | 0) >> 2] | 0;
        $16_1 = i64toi32_i32$2;
        $16$hi = i64toi32_i32$4;
        $10_1 = $10_1 << 1 | 0 | ($7_1 | 0) > (-1 | 0) | 0;
        if (($10_1 | 0) > (-1 | 0)) {
         continue label$35
        }
        break label$35;
       };
      }
      label$36 : {
       label$37 : {
        i64toi32_i32$4 = $19$hi;
        i64toi32_i32$2 = $3_1;
        i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
        $342$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $19$hi;
        i64toi32_i32$1 = $19_1;
        i64toi32_i32$2 = $342$hi;
        i64toi32_i32$3 = $3_1;
        i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
        i64toi32_i32$5 = (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$2 | 0;
        i64toi32_i32$5 = i64toi32_i32$4 - i64toi32_i32$5 | 0;
        i64toi32_i32$4 = i64toi32_i32$0;
        i64toi32_i32$1 = 0;
        i64toi32_i32$3 = 32;
        i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
        i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
        if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
        }
        $14_1 = i64toi32_i32$2;
        $14$hi = i64toi32_i32$0;
        $7_1 = i64toi32_i32$2;
        $350_1 = (i64toi32_i32$2 | 0) > (0 | 0) ? i64toi32_i32$2 : 0;
        $351_1 = $2_1;
        i64toi32_i32$0 = 0;
        $354$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $14$hi;
        i64toi32_i32$5 = i64toi32_i32$2;
        i64toi32_i32$4 = $354$hi;
        i64toi32_i32$3 = $2_1;
        if ((i64toi32_i32$0 | 0) < (i64toi32_i32$4 | 0)) {
         $122_1 = 1
        } else {
         if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$4 | 0)) {
          if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0) {
           $123_1 = 0
          } else {
           $123_1 = 1
          }
          $124_1 = $123_1;
         } else {
          $124_1 = 0
         }
         $122_1 = $124_1;
        }
        $7_1 = $122_1 ? $350_1 : $351_1;
        if (($7_1 | 0) < (113 | 0)) {
         break label$37
        }
        $695($6_1 + 384 | 0 | 0, $4_1 | 0);
        i64toi32_i32$3 = $6_1 + 392 | 0;
        i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
        $14_1 = i64toi32_i32$5;
        $14$hi = i64toi32_i32$0;
        i64toi32_i32$0 = 0;
        $15_1 = 0;
        $15$hi = i64toi32_i32$0;
        i64toi32_i32$3 = $6_1;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 384 | 0) >> 2] | 0;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 388 | 0) >> 2] | 0;
        $18_1 = i64toi32_i32$0;
        $18$hi = i64toi32_i32$5;
        i64toi32_i32$5 = 0;
        $20_1 = 0;
        $20$hi = i64toi32_i32$5;
        break label$36;
       }
       $692($6_1 + 352 | 0 | 0, +(+$2171(+(1.0), 144 - $7_1 | 0 | 0)));
       $695($6_1 + 336 | 0 | 0, $4_1 | 0);
       i64toi32_i32$3 = $6_1;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 352 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 356 | 0) >> 2] | 0;
       $378_1 = i64toi32_i32$5;
       $378$hi = i64toi32_i32$0;
       i64toi32_i32$3 = (i64toi32_i32$3 + 352 | 0) + 8 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
       $382_1 = i64toi32_i32$0;
       $382$hi = i64toi32_i32$5;
       i64toi32_i32$3 = $6_1;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 336 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 340 | 0) >> 2] | 0;
       $18_1 = i64toi32_i32$5;
       $18$hi = i64toi32_i32$0;
       i64toi32_i32$3 = (i64toi32_i32$3 + 336 | 0) + 8 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
       $14_1 = i64toi32_i32$0;
       $14$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $378$hi;
       i64toi32_i32$0 = $382$hi;
       i64toi32_i32$3 = $18$hi;
       i64toi32_i32$4 = $14$hi;
       $666($6_1 + 368 | 0 | 0, $378_1 | 0, i64toi32_i32$5 | 0, $382_1 | 0, i64toi32_i32$0 | 0, $18_1 | 0, i64toi32_i32$3 | 0, $14_1 | 0, i64toi32_i32$4 | 0);
       i64toi32_i32$0 = $6_1;
       i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 376 | 0) >> 2] | 0;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 380 | 0) >> 2] | 0;
       $20_1 = i64toi32_i32$4;
       $20$hi = i64toi32_i32$3;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 368 | 0) >> 2] | 0;
       i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 372 | 0) >> 2] | 0;
       $15_1 = i64toi32_i32$3;
       $15$hi = i64toi32_i32$4;
      }
      i64toi32_i32$4 = $16$hi;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$4 = $16$hi;
      i64toi32_i32$3 = $17$hi;
      i64toi32_i32$0 = 0;
      i64toi32_i32$5 = 0;
      $7_1 = !($10_1 & 1 | 0) & (($683($16_1 | 0, i64toi32_i32$4 | 0, $17_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0) | 0 | 0) != (0 | 0) & ($7_1 | 0) < (32 | 0) | 0) | 0;
      $699($6_1 + 320 | 0 | 0, $10_1 + $7_1 | 0 | 0);
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$5 = $14$hi;
      i64toi32_i32$3 = $6_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 320 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 324 | 0) >> 2] | 0;
      $416_1 = i64toi32_i32$5;
      $416$hi = i64toi32_i32$0;
      i64toi32_i32$3 = (i64toi32_i32$3 + 320 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
      $420_1 = i64toi32_i32$0;
      $420$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$0 = $14$hi;
      i64toi32_i32$3 = $416$hi;
      i64toi32_i32$4 = $420$hi;
      $693($6_1 + 304 | 0 | 0, $18_1 | 0, i64toi32_i32$5 | 0, $14_1 | 0, i64toi32_i32$0 | 0, $416_1 | 0, i64toi32_i32$3 | 0, $420_1 | 0, i64toi32_i32$4 | 0);
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 304 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 308 | 0) >> 2] | 0;
      $424_1 = i64toi32_i32$4;
      $424$hi = i64toi32_i32$3;
      i64toi32_i32$0 = (i64toi32_i32$0 + 304 | 0) + 8 | 0;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $428_1 = i64toi32_i32$3;
      $428$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $15$hi;
      i64toi32_i32$4 = $20$hi;
      i64toi32_i32$4 = $424$hi;
      i64toi32_i32$3 = $428$hi;
      i64toi32_i32$0 = $15$hi;
      i64toi32_i32$5 = $20$hi;
      $688($6_1 + 272 | 0 | 0, $424_1 | 0, i64toi32_i32$4 | 0, $428_1 | 0, i64toi32_i32$3 | 0, $15_1 | 0, i64toi32_i32$0 | 0, $20_1 | 0, i64toi32_i32$5 | 0);
      i64toi32_i32$5 = $16$hi;
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$4 = i64toi32_i32$1 ? 0 : $16_1;
      i64toi32_i32$3 = i64toi32_i32$1 ? i64toi32_i32$5 : i64toi32_i32$0;
      $435_1 = i64toi32_i32$4;
      $435$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $17$hi;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$5 = i64toi32_i32$0 ? 0 : $17_1;
      i64toi32_i32$1 = i64toi32_i32$0 ? i64toi32_i32$3 : i64toi32_i32$4;
      $438_1 = i64toi32_i32$5;
      $438$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$1 = $14$hi;
      i64toi32_i32$1 = $435$hi;
      i64toi32_i32$5 = $438$hi;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$3 = $14$hi;
      $693($6_1 + 288 | 0 | 0, $435_1 | 0, i64toi32_i32$1 | 0, $438_1 | 0, i64toi32_i32$5 | 0, $18_1 | 0, i64toi32_i32$0 | 0, $14_1 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$5 = $6_1;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 288 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 292 | 0) >> 2] | 0;
      $444_1 = i64toi32_i32$3;
      $444$hi = i64toi32_i32$0;
      i64toi32_i32$5 = (i64toi32_i32$5 + 288 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $448_1 = i64toi32_i32$0;
      $448$hi = i64toi32_i32$3;
      i64toi32_i32$5 = $6_1;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 272 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 276 | 0) >> 2] | 0;
      $450_1 = i64toi32_i32$3;
      $450$hi = i64toi32_i32$0;
      i64toi32_i32$5 = (i64toi32_i32$5 + 272 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $454_1 = i64toi32_i32$0;
      $454$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $444$hi;
      i64toi32_i32$0 = $448$hi;
      i64toi32_i32$5 = $450$hi;
      i64toi32_i32$1 = $454$hi;
      $688($6_1 + 256 | 0 | 0, $444_1 | 0, i64toi32_i32$3 | 0, $448_1 | 0, i64toi32_i32$0 | 0, $450_1 | 0, i64toi32_i32$5 | 0, $454_1 | 0, i64toi32_i32$1 | 0);
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 256 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 260 | 0) >> 2] | 0;
      $458_1 = i64toi32_i32$1;
      $458$hi = i64toi32_i32$5;
      i64toi32_i32$0 = (i64toi32_i32$0 + 256 | 0) + 8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $462_1 = i64toi32_i32$5;
      $462$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $15$hi;
      i64toi32_i32$1 = $20$hi;
      i64toi32_i32$1 = $458$hi;
      i64toi32_i32$5 = $462$hi;
      i64toi32_i32$0 = $15$hi;
      i64toi32_i32$3 = $20$hi;
      $694($6_1 + 240 | 0 | 0, $458_1 | 0, i64toi32_i32$1 | 0, $462_1 | 0, i64toi32_i32$5 | 0, $15_1 | 0, i64toi32_i32$0 | 0, $20_1 | 0, i64toi32_i32$3 | 0);
      label$38 : {
       i64toi32_i32$5 = $6_1;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 240 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 244 | 0) >> 2] | 0;
       $16_1 = i64toi32_i32$3;
       $16$hi = i64toi32_i32$0;
       i64toi32_i32$5 = (i64toi32_i32$5 + 240 | 0) + 8 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
       $17_1 = i64toi32_i32$0;
       $17$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $16$hi;
       i64toi32_i32$0 = $17$hi;
       i64toi32_i32$5 = 0;
       i64toi32_i32$1 = 0;
       if ($683($16_1 | 0, i64toi32_i32$3 | 0, $17_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$1 | 0) | 0) {
        break label$38
       }
       HEAP32[($587() | 0) >> 2] = 68;
      }
      i64toi32_i32$1 = $16$hi;
      i64toi32_i32$1 = $17$hi;
      i64toi32_i32$1 = $19$hi;
      i64toi32_i32$1 = $16$hi;
      i64toi32_i32$5 = $17$hi;
      $667($6_1 + 224 | 0 | 0, $16_1 | 0, i64toi32_i32$1 | 0, $17_1 | 0, i64toi32_i32$5 | 0, $19_1 | 0);
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 232 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 236 | 0) >> 2] | 0;
      $19_1 = i64toi32_i32$5;
      $19$hi = i64toi32_i32$1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 224 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 228 | 0) >> 2] | 0;
      $16_1 = i64toi32_i32$1;
      $16$hi = i64toi32_i32$5;
      break label$21;
     }
     HEAP32[($587() | 0) >> 2] = 68;
     $695($6_1 + 208 | 0 | 0, $4_1 | 0);
     i64toi32_i32$0 = $6_1;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 208 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 212 | 0) >> 2] | 0;
     $492_1 = i64toi32_i32$5;
     $492$hi = i64toi32_i32$1;
     i64toi32_i32$0 = (i64toi32_i32$0 + 208 | 0) + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $496_1 = i64toi32_i32$1;
     $496$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $492$hi;
     i64toi32_i32$1 = $496$hi;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 65536;
     $693($6_1 + 192 | 0 | 0, $492_1 | 0, i64toi32_i32$5 | 0, $496_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$3 | 0);
     i64toi32_i32$1 = $6_1;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 192 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 196 | 0) >> 2] | 0;
     $500_1 = i64toi32_i32$3;
     $500$hi = i64toi32_i32$0;
     i64toi32_i32$1 = (i64toi32_i32$1 + 192 | 0) + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $504_1 = i64toi32_i32$0;
     $504$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $500$hi;
     i64toi32_i32$0 = $504$hi;
     i64toi32_i32$1 = 0;
     i64toi32_i32$5 = 65536;
     $693($6_1 + 176 | 0 | 0, $500_1 | 0, i64toi32_i32$3 | 0, $504_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0);
     i64toi32_i32$0 = ($6_1 + 176 | 0) + 8 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $19_1 = i64toi32_i32$5;
     $19$hi = i64toi32_i32$1;
     i64toi32_i32$0 = $6_1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 176 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 180 | 0) >> 2] | 0;
     $16_1 = i64toi32_i32$1;
     $16$hi = i64toi32_i32$5;
     break label$21;
    }
    i64toi32_i32$5 = 0;
    $663($1_1 | 0, 0 | 0, i64toi32_i32$5 | 0);
   }
   $692($6_1 + 96 | 0 | 0, +(+($4_1 | 0) * 0.0));
   i64toi32_i32$0 = $6_1 + 104 | 0;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   $19_1 = i64toi32_i32$5;
   $19$hi = i64toi32_i32$1;
   i64toi32_i32$0 = $6_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 96 | 0) >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 100 | 0) >> 2] | 0;
   $16_1 = i64toi32_i32$1;
   $16$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $16$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $16_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$5;
  i64toi32_i32$5 = $19$hi;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $19_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$5;
  global$0 = $6_1 + 432 | 0;
 }
 
 function $671($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, i64toi32_i32$1 = 0, $7_1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $19$hi = 0, $11_1 = 0, $19_1 = 0, $20$hi = 0, $14_1 = 0, i64toi32_i32$0 = 0, $20_1 = 0, $8_1 = 0, $13_1 = 0, $15_1 = 0, $22$hi = 0, $16_1 = 0, $21$hi = 0, $22_1 = 0, $21_1 = 0, $12_1 = 0, $17_1 = 0, $23$hi = 0, $24$hi = 0, $23_1 = 0, $24_1 = 0, $9_1 = 0, $168_1 = 0, $169_1 = 0, $170_1 = 0, $171_1 = 0, $172_1 = 0, $173_1 = 0, $174_1 = 0, $175_1 = 0, $176_1 = 0, $177_1 = 0, $18_1 = 0, $25_1 = 0.0, $10_1 = 0, $127_1 = 0, $235_1 = 0, $235$hi = 0, $239_1 = 0, $239$hi = 0, $241_1 = 0, $241$hi = 0, $245_1 = 0, $245$hi = 0, $255$hi = 0, $264_1 = 0, $264$hi = 0, $268_1 = 0, $268$hi = 0, $272_1 = 0, $272$hi = 0, $276_1 = 0, $276$hi = 0, $286_1 = 0, $286$hi = 0, $295_1 = 0, $295$hi = 0, $299_1 = 0, $299$hi = 0, $303_1 = 0, $303$hi = 0, $307_1 = 0, $307$hi = 0, $356_1 = 0, $356$hi = 0, $360_1 = 0, $360$hi = 0, $362_1 = 0, $362$hi = 0, $366_1 = 0, $366$hi = 0, $385_1 = 0, $385$hi = 0, $389_1 = 0, $389$hi = 0, $391_1 = 0, $391$hi = 0, $395_1 = 0, $395$hi = 0, $406_1 = 0, $406$hi = 0, $410_1 = 0, $410$hi = 0, $412_1 = 0, $412$hi = 0, $416_1 = 0, $416$hi = 0, $444_1 = 0, $444$hi = 0, $448_1 = 0, $448$hi = 0, $450_1 = 0, $450$hi = 0, $454_1 = 0, $454$hi = 0, $464_1 = 0, $464$hi = 0, $468_1 = 0, $468$hi = 0, $470_1 = 0, $470$hi = 0, $474_1 = 0, $474$hi = 0, $513_1 = 0, $591$hi = 0, $593$hi = 0, $601_1 = 0, $601$hi = 0, $742_1 = 0, $742$hi = 0, $746_1 = 0, $746$hi = 0, $748_1 = 0, $748$hi = 0, $752_1 = 0, $752$hi = 0, $771_1 = 0, $771$hi = 0, $775_1 = 0, $775$hi = 0, $817_1 = 0, $879_1 = 0, $879$hi = 0, $883_1 = 0, $883$hi = 0, $900_1 = 0, $900$hi = 0, $904_1 = 0, $904$hi = 0, $920_1 = 0, $920$hi = 0, $924_1 = 0, $924$hi = 0, $961_1 = 0, $961$hi = 0, $965_1 = 0, $965$hi = 0, $984_1 = 0, $984$hi = 0, $988_1 = 0, $988$hi = 0, $1011_1 = 0, $1011$hi = 0, $1015_1 = 0, $1015$hi = 0, $1031_1 = 0, $1031$hi = 0, $1035_1 = 0, $1035$hi = 0, $1049_1 = 0, $1049$hi = 0, $1051_1 = 0, $1051$hi = 0, $1071_1 = 0, $1071$hi = 0, $1075_1 = 0, $1075$hi = 0, $1098_1 = 0, $1098$hi = 0, $1100_1 = 0, $1100$hi = 0, $1106_1 = 0, $1106$hi = 0, $1113_1 = 0, $1113$hi = 0;
  $7_1 = global$0 - 8976 | 0;
  global$0 = $7_1;
  $8_1 = 0;
  $9_1 = $4_1 + $3_1 | 0;
  $10_1 = 0 - $9_1 | 0;
  i64toi32_i32$0 = 0;
  $19_1 = 0;
  $19$hi = i64toi32_i32$0;
  $11_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : while (1) {
      label$5 : {
       if (($2_1 | 0) == (48 | 0)) {
        break label$5
       }
       if (($2_1 | 0) != (46 | 0)) {
        break label$1
       }
       $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$3
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
       $2_1 = HEAPU8[$2_1 >> 0] | 0;
       break label$2;
      }
      label$6 : {
       $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$6
       }
       $11_1 = 1;
       HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
       $2_1 = HEAPU8[$2_1 >> 0] | 0;
       continue label$4;
      }
      $11_1 = 1;
      $2_1 = $664($1_1 | 0) | 0;
      continue label$4;
     };
    }
    $2_1 = $664($1_1 | 0) | 0;
   }
   $8_1 = 1;
   i64toi32_i32$0 = 0;
   $19_1 = 0;
   $19$hi = i64toi32_i32$0;
   if (($2_1 | 0) != (48 | 0)) {
    break label$1
   }
   label$7 : while (1) {
    label$8 : {
     label$9 : {
      $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
       break label$9
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
      $2_1 = HEAPU8[$2_1 >> 0] | 0;
      break label$8;
     }
     $2_1 = $664($1_1 | 0) | 0;
    }
    i64toi32_i32$0 = $19$hi;
    i64toi32_i32$2 = $19_1;
    i64toi32_i32$1 = -1;
    i64toi32_i32$3 = -1;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $19_1 = i64toi32_i32$4;
    $19$hi = i64toi32_i32$5;
    if (($2_1 | 0) == (48 | 0)) {
     continue label$7
    }
    break label$7;
   };
   $11_1 = 1;
   $8_1 = 1;
  }
  $12_1 = 0;
  HEAP32[($7_1 + 784 | 0) >> 2] = 0;
  $13_1 = $2_1 + -48 | 0;
  label$10 : {
   label$11 : {
    label$12 : {
     label$13 : {
      label$14 : {
       label$15 : {
        label$16 : {
         label$17 : {
          $14_1 = ($2_1 | 0) == (46 | 0);
          if ($14_1) {
           break label$17
          }
          i64toi32_i32$5 = 0;
          $20_1 = 0;
          $20$hi = i64toi32_i32$5;
          if ($13_1 >>> 0 <= 9 >>> 0) {
           break label$17
          }
          $15_1 = 0;
          $16_1 = 0;
          break label$16;
         }
         i64toi32_i32$5 = 0;
         $20_1 = 0;
         $20$hi = i64toi32_i32$5;
         $16_1 = 0;
         $15_1 = 0;
         $12_1 = 0;
         label$18 : while (1) {
          label$19 : {
           label$20 : {
            if (!($14_1 & 1 | 0)) {
             break label$20
            }
            label$21 : {
             if ($8_1) {
              break label$21
             }
             i64toi32_i32$5 = $20$hi;
             $19_1 = $20_1;
             $19$hi = i64toi32_i32$5;
             $8_1 = 1;
             break label$19;
            }
            $11_1 = !$11_1;
            break label$15;
           }
           i64toi32_i32$5 = $20$hi;
           i64toi32_i32$0 = $20_1;
           i64toi32_i32$2 = 0;
           i64toi32_i32$3 = 1;
           i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
           i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
           if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
            i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
           }
           $20_1 = i64toi32_i32$1;
           $20$hi = i64toi32_i32$4;
           label$22 : {
            if (($15_1 | 0) > (2044 | 0)) {
             break label$22
            }
            $14_1 = ($2_1 | 0) == (48 | 0);
            i64toi32_i32$4 = $20$hi;
            $17_1 = $20_1;
            $11_1 = ($7_1 + 784 | 0) + ($15_1 << 2 | 0) | 0;
            label$23 : {
             if (!$16_1) {
              break label$23
             }
             $13_1 = ($2_1 + Math_imul(HEAP32[$11_1 >> 2] | 0, 10) | 0) + -48 | 0;
            }
            $12_1 = $14_1 ? $12_1 : $17_1;
            HEAP32[$11_1 >> 2] = $13_1;
            $11_1 = 1;
            $2_1 = $16_1 + 1 | 0;
            $127_1 = $2_1;
            $2_1 = ($2_1 | 0) == (9 | 0);
            $16_1 = $2_1 ? 0 : $127_1;
            $15_1 = $15_1 + $2_1 | 0;
            break label$19;
           }
           if (($2_1 | 0) == (48 | 0)) {
            break label$19
           }
           HEAP32[($7_1 + 8960 | 0) >> 2] = HEAP32[($7_1 + 8960 | 0) >> 2] | 0 | 1 | 0;
           $12_1 = 18396;
          }
          label$24 : {
           label$25 : {
            $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
            if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
             break label$25
            }
            HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
            $2_1 = HEAPU8[$2_1 >> 0] | 0;
            break label$24;
           }
           $2_1 = $664($1_1 | 0) | 0;
          }
          $13_1 = $2_1 + -48 | 0;
          $14_1 = ($2_1 | 0) == (46 | 0);
          if ($14_1) {
           continue label$18
          }
          if ($13_1 >>> 0 < 10 >>> 0) {
           continue label$18
          }
          break label$18;
         };
        }
        i64toi32_i32$4 = $19$hi;
        i64toi32_i32$4 = $20$hi;
        i64toi32_i32$2 = $8_1;
        i64toi32_i32$4 = $19$hi;
        i64toi32_i32$0 = $20$hi;
        i64toi32_i32$3 = i64toi32_i32$2 ? $19_1 : $20_1;
        i64toi32_i32$5 = i64toi32_i32$2 ? i64toi32_i32$4 : i64toi32_i32$0;
        $19_1 = i64toi32_i32$3;
        $19$hi = i64toi32_i32$5;
        label$26 : {
         if (($2_1 & -33 | 0 | 0) != (69 | 0)) {
          break label$26
         }
         if (!$11_1) {
          break label$26
         }
         label$27 : {
          i64toi32_i32$5 = $672($1_1 | 0, $6_1 | 0) | 0;
          i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
          $21_1 = i64toi32_i32$5;
          $21$hi = i64toi32_i32$3;
          i64toi32_i32$2 = i64toi32_i32$5;
          i64toi32_i32$5 = -2147483648;
          i64toi32_i32$4 = 0;
          if ((i64toi32_i32$2 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$5 | 0) | 0) {
           break label$27
          }
          if (!$6_1) {
           break label$12
          }
          i64toi32_i32$2 = 0;
          $21_1 = 0;
          $21$hi = i64toi32_i32$2;
          if (!(HEAP32[($1_1 + 104 | 0) >> 2] | 0)) {
           break label$27
          }
          HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
         }
         if (!$11_1) {
          break label$13
         }
         i64toi32_i32$2 = $21$hi;
         i64toi32_i32$2 = $19$hi;
         i64toi32_i32$2 = $21$hi;
         i64toi32_i32$4 = $21_1;
         i64toi32_i32$3 = $19$hi;
         i64toi32_i32$5 = $19_1;
         i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
         i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
         if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
          i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
         }
         $19_1 = i64toi32_i32$0;
         $19$hi = i64toi32_i32$1;
         break label$11;
        }
        $11_1 = !$11_1;
        if (($2_1 | 0) < (0 | 0)) {
         break label$14
        }
       }
       if (!(HEAP32[($1_1 + 104 | 0) >> 2] | 0)) {
        break label$14
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
      }
      if (!$11_1) {
       break label$11
      }
     }
     HEAP32[($587() | 0) >> 2] = 28;
    }
    i64toi32_i32$1 = 0;
    $20_1 = 0;
    $20$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $663($1_1 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$1 = 0;
    $19_1 = 0;
    $19$hi = i64toi32_i32$1;
    break label$10;
   }
   label$28 : {
    $1_1 = HEAP32[($7_1 + 784 | 0) >> 2] | 0;
    if ($1_1) {
     break label$28
    }
    $692($7_1 | 0, +(+($5_1 | 0) * 0.0));
    i64toi32_i32$2 = $7_1 + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$1;
    $19$hi = i64toi32_i32$4;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$4 = HEAP32[$7_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
    $20_1 = i64toi32_i32$4;
    $20$hi = i64toi32_i32$1;
    break label$10;
   }
   label$29 : {
    i64toi32_i32$1 = $20$hi;
    i64toi32_i32$2 = $20_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 9;
    if ((i64toi32_i32$1 | 0) > (i64toi32_i32$4 | 0)) {
     $168_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$4 | 0)) {
      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$5 >>> 0) {
       $169_1 = 0
      } else {
       $169_1 = 1
      }
      $170_1 = $169_1;
     } else {
      $170_1 = 0
     }
     $168_1 = $170_1;
    }
    if ($168_1) {
     break label$29
    }
    i64toi32_i32$2 = $19$hi;
    i64toi32_i32$2 = $20$hi;
    i64toi32_i32$2 = $19$hi;
    i64toi32_i32$5 = $19_1;
    i64toi32_i32$1 = $20$hi;
    i64toi32_i32$4 = $20_1;
    if ((i64toi32_i32$5 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | 0) {
     break label$29
    }
    label$30 : {
     if (($3_1 | 0) > (30 | 0)) {
      break label$30
     }
     if ($1_1 >>> $3_1 | 0) {
      break label$29
     }
    }
    $695($7_1 + 48 | 0 | 0, $5_1 | 0);
    $699($7_1 + 32 | 0 | 0, $1_1 | 0);
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 48 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 52 | 0) >> 2] | 0;
    $235_1 = i64toi32_i32$5;
    $235$hi = i64toi32_i32$2;
    i64toi32_i32$4 = (i64toi32_i32$4 + 48 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $239_1 = i64toi32_i32$2;
    $239$hi = i64toi32_i32$5;
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 32 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 36 | 0) >> 2] | 0;
    $241_1 = i64toi32_i32$5;
    $241$hi = i64toi32_i32$2;
    i64toi32_i32$4 = (i64toi32_i32$4 + 32 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $245_1 = i64toi32_i32$2;
    $245$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $235$hi;
    i64toi32_i32$2 = $239$hi;
    i64toi32_i32$4 = $241$hi;
    i64toi32_i32$1 = $245$hi;
    $693($7_1 + 16 | 0 | 0, $235_1 | 0, i64toi32_i32$5 | 0, $239_1 | 0, i64toi32_i32$2 | 0, $241_1 | 0, i64toi32_i32$4 | 0, $245_1 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$2 = ($7_1 + 16 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$1;
    $19$hi = i64toi32_i32$4;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$4 = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
    $20_1 = i64toi32_i32$4;
    $20$hi = i64toi32_i32$1;
    break label$10;
   }
   label$31 : {
    i64toi32_i32$1 = $19$hi;
    i64toi32_i32$1 = 0;
    $255$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $19$hi;
    i64toi32_i32$2 = $19_1;
    i64toi32_i32$4 = $255$hi;
    i64toi32_i32$5 = ($4_1 | 0) / (-2 | 0) | 0;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$4 | 0)) {
     $171_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$4 | 0)) {
      if (i64toi32_i32$2 >>> 0 > i64toi32_i32$5 >>> 0) {
       $172_1 = 0
      } else {
       $172_1 = 1
      }
      $173_1 = $172_1;
     } else {
      $173_1 = 0
     }
     $171_1 = $173_1;
    }
    if ($171_1) {
     break label$31
    }
    HEAP32[($587() | 0) >> 2] = 68;
    $695($7_1 + 96 | 0 | 0, $5_1 | 0);
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 96 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 100 | 0) >> 2] | 0;
    $264_1 = i64toi32_i32$2;
    $264$hi = i64toi32_i32$1;
    i64toi32_i32$5 = (i64toi32_i32$5 + 96 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $268_1 = i64toi32_i32$1;
    $268$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $264$hi;
    i64toi32_i32$1 = $268$hi;
    i64toi32_i32$5 = -1;
    i64toi32_i32$4 = 2147418111;
    $693($7_1 + 80 | 0 | 0, $264_1 | 0, i64toi32_i32$2 | 0, $268_1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$5 | 0, -1 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 80 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 84 | 0) >> 2] | 0;
    $272_1 = i64toi32_i32$4;
    $272$hi = i64toi32_i32$5;
    i64toi32_i32$1 = (i64toi32_i32$1 + 80 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $276_1 = i64toi32_i32$5;
    $276$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $272$hi;
    i64toi32_i32$5 = $276$hi;
    i64toi32_i32$1 = -1;
    i64toi32_i32$2 = 2147418111;
    $693($7_1 + 64 | 0 | 0, $272_1 | 0, i64toi32_i32$4 | 0, $276_1 | 0, i64toi32_i32$5 | 0, -1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$2 | 0);
    i64toi32_i32$5 = ($7_1 + 64 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$2;
    $19$hi = i64toi32_i32$1;
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 64 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 68 | 0) >> 2] | 0;
    $20_1 = i64toi32_i32$1;
    $20$hi = i64toi32_i32$2;
    break label$10;
   }
   label$32 : {
    i64toi32_i32$2 = $19$hi;
    i64toi32_i32$1 = $4_1 + -226 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
    $286_1 = i64toi32_i32$1;
    $286$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $19$hi;
    i64toi32_i32$5 = $19_1;
    i64toi32_i32$1 = $286$hi;
    i64toi32_i32$4 = $286_1;
    if ((i64toi32_i32$2 | 0) > (i64toi32_i32$1 | 0)) {
     $174_1 = 1
    } else {
     if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$1 | 0)) {
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
       $175_1 = 0
      } else {
       $175_1 = 1
      }
      $176_1 = $175_1;
     } else {
      $176_1 = 0
     }
     $174_1 = $176_1;
    }
    if ($174_1) {
     break label$32
    }
    HEAP32[($587() | 0) >> 2] = 68;
    $695($7_1 + 144 | 0 | 0, $5_1 | 0);
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 144 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 148 | 0) >> 2] | 0;
    $295_1 = i64toi32_i32$5;
    $295$hi = i64toi32_i32$2;
    i64toi32_i32$4 = (i64toi32_i32$4 + 144 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $299_1 = i64toi32_i32$2;
    $299$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $295$hi;
    i64toi32_i32$2 = $299$hi;
    i64toi32_i32$4 = 0;
    i64toi32_i32$1 = 65536;
    $693($7_1 + 128 | 0 | 0, $295_1 | 0, i64toi32_i32$5 | 0, $299_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$1 = HEAP32[($7_1 + 128 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 132 | 0) >> 2] | 0;
    $303_1 = i64toi32_i32$1;
    $303$hi = i64toi32_i32$4;
    i64toi32_i32$2 = ($7_1 + 128 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $307_1 = i64toi32_i32$4;
    $307$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $303$hi;
    i64toi32_i32$4 = $307$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 65536;
    $693($7_1 + 112 | 0 | 0, $303_1 | 0, i64toi32_i32$1 | 0, $307_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$4 = ($7_1 + 112 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$5;
    $19$hi = i64toi32_i32$2;
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 112 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 116 | 0) >> 2] | 0;
    $20_1 = i64toi32_i32$2;
    $20$hi = i64toi32_i32$5;
    break label$10;
   }
   label$33 : {
    if (!$16_1) {
     break label$33
    }
    label$34 : {
     if (($16_1 | 0) > (8 | 0)) {
      break label$34
     }
     $2_1 = ($7_1 + 784 | 0) + ($15_1 << 2 | 0) | 0;
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     label$35 : while (1) {
      $1_1 = Math_imul($1_1, 10);
      $16_1 = $16_1 + 1 | 0;
      if (($16_1 | 0) != (9 | 0)) {
       continue label$35
      }
      break label$35;
     };
     HEAP32[$2_1 >> 2] = $1_1;
    }
    $15_1 = $15_1 + 1 | 0;
   }
   i64toi32_i32$5 = $19$hi;
   $8_1 = $19_1;
   label$36 : {
    if (($12_1 | 0) >= (9 | 0)) {
     break label$36
    }
    if (($12_1 | 0) > ($8_1 | 0)) {
     break label$36
    }
    if (($8_1 | 0) > (17 | 0)) {
     break label$36
    }
    label$37 : {
     if (($8_1 | 0) != (9 | 0)) {
      break label$37
     }
     $695($7_1 + 192 | 0 | 0, $5_1 | 0);
     $699($7_1 + 176 | 0 | 0, HEAP32[($7_1 + 784 | 0) >> 2] | 0 | 0);
     i64toi32_i32$4 = $7_1;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 192 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 196 | 0) >> 2] | 0;
     $356_1 = i64toi32_i32$5;
     $356$hi = i64toi32_i32$2;
     i64toi32_i32$4 = (i64toi32_i32$4 + 192 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $360_1 = i64toi32_i32$2;
     $360$hi = i64toi32_i32$5;
     i64toi32_i32$4 = $7_1;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 176 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 180 | 0) >> 2] | 0;
     $362_1 = i64toi32_i32$5;
     $362$hi = i64toi32_i32$2;
     i64toi32_i32$4 = (i64toi32_i32$4 + 176 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $366_1 = i64toi32_i32$2;
     $366$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $356$hi;
     i64toi32_i32$2 = $360$hi;
     i64toi32_i32$4 = $362$hi;
     i64toi32_i32$1 = $366$hi;
     $693($7_1 + 160 | 0 | 0, $356_1 | 0, i64toi32_i32$5 | 0, $360_1 | 0, i64toi32_i32$2 | 0, $362_1 | 0, i64toi32_i32$4 | 0, $366_1 | 0, i64toi32_i32$1 | 0);
     i64toi32_i32$2 = ($7_1 + 160 | 0) + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $19_1 = i64toi32_i32$1;
     $19$hi = i64toi32_i32$4;
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$4 = HEAP32[($7_1 + 160 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($7_1 + 164 | 0) >> 2] | 0;
     $20_1 = i64toi32_i32$4;
     $20$hi = i64toi32_i32$1;
     break label$10;
    }
    label$38 : {
     if (($8_1 | 0) > (8 | 0)) {
      break label$38
     }
     $695($7_1 + 272 | 0 | 0, $5_1 | 0);
     $699($7_1 + 256 | 0 | 0, HEAP32[($7_1 + 784 | 0) >> 2] | 0 | 0);
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$1 = HEAP32[($7_1 + 272 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[($7_1 + 276 | 0) >> 2] | 0;
     $385_1 = i64toi32_i32$1;
     $385$hi = i64toi32_i32$4;
     i64toi32_i32$2 = ($7_1 + 272 | 0) + 8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $389_1 = i64toi32_i32$4;
     $389$hi = i64toi32_i32$1;
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$1 = HEAP32[($7_1 + 256 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[($7_1 + 260 | 0) >> 2] | 0;
     $391_1 = i64toi32_i32$1;
     $391$hi = i64toi32_i32$4;
     i64toi32_i32$2 = ($7_1 + 256 | 0) + 8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $395_1 = i64toi32_i32$4;
     $395$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $385$hi;
     i64toi32_i32$4 = $389$hi;
     i64toi32_i32$2 = $391$hi;
     i64toi32_i32$5 = $395$hi;
     $693($7_1 + 240 | 0 | 0, $385_1 | 0, i64toi32_i32$1 | 0, $389_1 | 0, i64toi32_i32$4 | 0, $391_1 | 0, i64toi32_i32$2 | 0, $395_1 | 0, i64toi32_i32$5 | 0);
     $695($7_1 + 224 | 0 | 0, HEAP32[(((8 - $8_1 | 0) << 2 | 0) + 8176 | 0) >> 2] | 0 | 0);
     i64toi32_i32$4 = $7_1;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 240 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 244 | 0) >> 2] | 0;
     $406_1 = i64toi32_i32$5;
     $406$hi = i64toi32_i32$2;
     i64toi32_i32$4 = (i64toi32_i32$4 + 240 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $410_1 = i64toi32_i32$2;
     $410$hi = i64toi32_i32$5;
     i64toi32_i32$4 = $7_1;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 224 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 228 | 0) >> 2] | 0;
     $412_1 = i64toi32_i32$5;
     $412$hi = i64toi32_i32$2;
     i64toi32_i32$4 = (i64toi32_i32$4 + 224 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $416_1 = i64toi32_i32$2;
     $416$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $406$hi;
     i64toi32_i32$2 = $410$hi;
     i64toi32_i32$4 = $412$hi;
     i64toi32_i32$1 = $416$hi;
     $697($7_1 + 208 | 0 | 0, $406_1 | 0, i64toi32_i32$5 | 0, $410_1 | 0, i64toi32_i32$2 | 0, $412_1 | 0, i64toi32_i32$4 | 0, $416_1 | 0, i64toi32_i32$1 | 0);
     i64toi32_i32$2 = ($7_1 + 208 | 0) + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $19_1 = i64toi32_i32$1;
     $19$hi = i64toi32_i32$4;
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$4 = HEAP32[($7_1 + 208 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($7_1 + 212 | 0) >> 2] | 0;
     $20_1 = i64toi32_i32$4;
     $20$hi = i64toi32_i32$1;
     break label$10;
    }
    $1_1 = HEAP32[($7_1 + 784 | 0) >> 2] | 0;
    label$39 : {
     $2_1 = ($3_1 + Math_imul($8_1, -3) | 0) + 27 | 0;
     if (($2_1 | 0) > (30 | 0)) {
      break label$39
     }
     if ($1_1 >>> $2_1 | 0) {
      break label$36
     }
    }
    $695($7_1 + 352 | 0 | 0, $5_1 | 0);
    $699($7_1 + 336 | 0 | 0, $1_1 | 0);
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$1 = HEAP32[($7_1 + 352 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 356 | 0) >> 2] | 0;
    $444_1 = i64toi32_i32$1;
    $444$hi = i64toi32_i32$4;
    i64toi32_i32$2 = ($7_1 + 352 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $448_1 = i64toi32_i32$4;
    $448$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$1 = HEAP32[($7_1 + 336 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 340 | 0) >> 2] | 0;
    $450_1 = i64toi32_i32$1;
    $450$hi = i64toi32_i32$4;
    i64toi32_i32$2 = ($7_1 + 336 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $454_1 = i64toi32_i32$4;
    $454$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $444$hi;
    i64toi32_i32$4 = $448$hi;
    i64toi32_i32$2 = $450$hi;
    i64toi32_i32$5 = $454$hi;
    $693($7_1 + 320 | 0 | 0, $444_1 | 0, i64toi32_i32$1 | 0, $448_1 | 0, i64toi32_i32$4 | 0, $450_1 | 0, i64toi32_i32$2 | 0, $454_1 | 0, i64toi32_i32$5 | 0);
    $695($7_1 + 304 | 0 | 0, HEAP32[(($8_1 << 2 | 0) + 8136 | 0) >> 2] | 0 | 0);
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 320 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 324 | 0) >> 2] | 0;
    $464_1 = i64toi32_i32$5;
    $464$hi = i64toi32_i32$2;
    i64toi32_i32$4 = (i64toi32_i32$4 + 320 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $468_1 = i64toi32_i32$2;
    $468$hi = i64toi32_i32$5;
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 304 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 308 | 0) >> 2] | 0;
    $470_1 = i64toi32_i32$5;
    $470$hi = i64toi32_i32$2;
    i64toi32_i32$4 = (i64toi32_i32$4 + 304 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $474_1 = i64toi32_i32$2;
    $474$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $464$hi;
    i64toi32_i32$2 = $468$hi;
    i64toi32_i32$4 = $470$hi;
    i64toi32_i32$1 = $474$hi;
    $693($7_1 + 288 | 0 | 0, $464_1 | 0, i64toi32_i32$5 | 0, $468_1 | 0, i64toi32_i32$2 | 0, $470_1 | 0, i64toi32_i32$4 | 0, $474_1 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$2 = ($7_1 + 288 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$1;
    $19$hi = i64toi32_i32$4;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$4 = HEAP32[($7_1 + 288 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7_1 + 292 | 0) >> 2] | 0;
    $20_1 = i64toi32_i32$4;
    $20$hi = i64toi32_i32$1;
    break label$10;
   }
   label$40 : while (1) {
    $2_1 = $15_1;
    $15_1 = $2_1 + -1 | 0;
    if (!(HEAP32[(($7_1 + 784 | 0) + ($15_1 << 2 | 0) | 0) >> 2] | 0)) {
     continue label$40
    }
    break label$40;
   };
   $16_1 = 0;
   label$41 : {
    label$42 : {
     $1_1 = ($8_1 | 0) % (9 | 0) | 0;
     if ($1_1) {
      break label$42
     }
     $11_1 = 0;
     break label$41;
    }
    $6_1 = ($8_1 | 0) > (-1 | 0) ? $1_1 : $1_1 + 9 | 0;
    label$43 : {
     label$44 : {
      if ($2_1) {
       break label$44
      }
      $11_1 = 0;
      $2_1 = 0;
      break label$43;
     }
     $13_1 = HEAP32[(((8 - $6_1 | 0) << 2 | 0) + 8176 | 0) >> 2] | 0;
     $17_1 = (1e9 | 0) / ($13_1 | 0) | 0;
     $14_1 = 0;
     $1_1 = 0;
     $11_1 = 0;
     label$45 : while (1) {
      $15_1 = ($7_1 + 784 | 0) + ($1_1 << 2 | 0) | 0;
      $513_1 = $15_1;
      $15_1 = HEAP32[$15_1 >> 2] | 0;
      $12_1 = ($15_1 >>> 0) / ($13_1 >>> 0) | 0;
      $14_1 = $12_1 + $14_1 | 0;
      HEAP32[$513_1 >> 2] = $14_1;
      $14_1 = ($1_1 | 0) == ($11_1 | 0) & !$14_1 | 0;
      $11_1 = $14_1 ? ($11_1 + 1 | 0) & 2047 | 0 : $11_1;
      $8_1 = $14_1 ? $8_1 + -9 | 0 : $8_1;
      $14_1 = Math_imul($17_1, $15_1 - Math_imul($12_1, $13_1) | 0);
      $1_1 = $1_1 + 1 | 0;
      if (($1_1 | 0) != ($2_1 | 0)) {
       continue label$45
      }
      break label$45;
     };
     if (!$14_1) {
      break label$43
     }
     HEAP32[(($7_1 + 784 | 0) + ($2_1 << 2 | 0) | 0) >> 2] = $14_1;
     $2_1 = $2_1 + 1 | 0;
    }
    $8_1 = ($8_1 - $6_1 | 0) + 9 | 0;
   }
   label$46 : while (1) {
    $12_1 = ($7_1 + 784 | 0) + ($11_1 << 2 | 0) | 0;
    label$47 : {
     label$48 : while (1) {
      label$49 : {
       if (($8_1 | 0) < (36 | 0)) {
        break label$49
       }
       if (($8_1 | 0) != (36 | 0)) {
        break label$47
       }
       if ((HEAP32[$12_1 >> 2] | 0) >>> 0 >= 10384593 >>> 0) {
        break label$47
       }
      }
      $15_1 = $2_1 + 2047 | 0;
      $14_1 = 0;
      $13_1 = $2_1;
      label$50 : while (1) {
       $2_1 = $13_1;
       label$51 : {
        label$52 : {
         $1_1 = $15_1 & 2047 | 0;
         $13_1 = ($7_1 + 784 | 0) + ($1_1 << 2 | 0) | 0;
         i64toi32_i32$2 = $13_1;
         i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
         i64toi32_i32$4 = 0;
         i64toi32_i32$2 = i64toi32_i32$1;
         i64toi32_i32$1 = 0;
         i64toi32_i32$5 = 29;
         i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
          i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
          $177_1 = 0;
         } else {
          i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
          $177_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
         }
         $591$hi = i64toi32_i32$1;
         i64toi32_i32$1 = 0;
         $593$hi = i64toi32_i32$1;
         i64toi32_i32$1 = $591$hi;
         i64toi32_i32$4 = $177_1;
         i64toi32_i32$2 = $593$hi;
         i64toi32_i32$5 = $14_1;
         i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
         i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
         if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
          i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
         }
         $19_1 = i64toi32_i32$3;
         $19$hi = i64toi32_i32$0;
         i64toi32_i32$1 = i64toi32_i32$3;
         i64toi32_i32$4 = 0;
         i64toi32_i32$5 = 1000000001;
         if (i64toi32_i32$0 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 >= i64toi32_i32$5 >>> 0 | 0) | 0) {
          break label$52
         }
         $14_1 = 0;
         break label$51;
        }
        i64toi32_i32$1 = $19$hi;
        i64toi32_i32$0 = 0;
        i64toi32_i32$0 = __wasm_i64_udiv($19_1 | 0, i64toi32_i32$1 | 0, 1e9 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $20_1 = i64toi32_i32$0;
        $20$hi = i64toi32_i32$1;
        i64toi32_i32$0 = 0;
        i64toi32_i32$0 = __wasm_i64_mul($20_1 | 0, i64toi32_i32$1 | 0, 1e9 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $601_1 = i64toi32_i32$0;
        $601$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $19$hi;
        i64toi32_i32$5 = $19_1;
        i64toi32_i32$0 = $601$hi;
        i64toi32_i32$4 = $601_1;
        i64toi32_i32$2 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
        i64toi32_i32$3 = (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) + i64toi32_i32$0 | 0;
        i64toi32_i32$3 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
        $19_1 = i64toi32_i32$2;
        $19$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $20$hi;
        $14_1 = $20_1;
       }
       i64toi32_i32$3 = $19$hi;
       $15_1 = $19_1;
       HEAP32[$13_1 >> 2] = $19_1;
       $13_1 = ($1_1 | 0) != (($2_1 + -1 | 0) & 2047 | 0 | 0) ? $2_1 : ($1_1 | 0) == ($11_1 | 0) ? $2_1 : $19_1 ? $2_1 : $1_1;
       $15_1 = $1_1 + -1 | 0;
       if (($1_1 | 0) != ($11_1 | 0)) {
        continue label$50
       }
       break label$50;
      };
      $16_1 = $16_1 + -29 | 0;
      if (!$14_1) {
       continue label$48
      }
      break label$48;
     };
     label$53 : {
      $11_1 = ($11_1 + -1 | 0) & 2047 | 0;
      if (($11_1 | 0) != ($13_1 | 0)) {
       break label$53
      }
      $1_1 = ($7_1 + 784 | 0) + ((($13_1 + 2046 | 0) & 2047 | 0) << 2 | 0) | 0;
      $2_1 = ($13_1 + -1 | 0) & 2047 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] | 0 | (HEAP32[(($7_1 + 784 | 0) + ($2_1 << 2 | 0) | 0) >> 2] | 0) | 0;
     }
     $8_1 = $8_1 + 9 | 0;
     HEAP32[(($7_1 + 784 | 0) + ($11_1 << 2 | 0) | 0) >> 2] = $14_1;
     continue label$46;
    }
    break label$46;
   };
   label$54 : {
    label$55 : while (1) {
     $6_1 = ($2_1 + 1 | 0) & 2047 | 0;
     $18_1 = ($7_1 + 784 | 0) + ((($2_1 + -1 | 0) & 2047 | 0) << 2 | 0) | 0;
     label$56 : while (1) {
      $15_1 = ($8_1 | 0) > (45 | 0) ? 9 : 1;
      label$57 : {
       label$58 : while (1) {
        $13_1 = $11_1;
        $1_1 = 0;
        label$59 : {
         label$60 : {
          label$61 : while (1) {
           $11_1 = ($1_1 + $13_1 | 0) & 2047 | 0;
           if (($11_1 | 0) == ($2_1 | 0)) {
            break label$60
           }
           $11_1 = HEAP32[(($7_1 + 784 | 0) + ($11_1 << 2 | 0) | 0) >> 2] | 0;
           $14_1 = HEAP32[(($1_1 << 2 | 0) + 8160 | 0) >> 2] | 0;
           if ($11_1 >>> 0 < $14_1 >>> 0) {
            break label$60
           }
           if ($11_1 >>> 0 > $14_1 >>> 0) {
            break label$59
           }
           $1_1 = $1_1 + 1 | 0;
           if (($1_1 | 0) != (4 | 0)) {
            continue label$61
           }
           break label$61;
          };
         }
         if (($8_1 | 0) != (36 | 0)) {
          break label$59
         }
         i64toi32_i32$3 = 0;
         $19_1 = 0;
         $19$hi = i64toi32_i32$3;
         $1_1 = 0;
         i64toi32_i32$3 = 0;
         $20_1 = 0;
         $20$hi = i64toi32_i32$3;
         label$62 : while (1) {
          label$63 : {
           $11_1 = ($1_1 + $13_1 | 0) & 2047 | 0;
           if (($11_1 | 0) != ($2_1 | 0)) {
            break label$63
           }
           $2_1 = ($2_1 + 1 | 0) & 2047 | 0;
           HEAP32[((($2_1 << 2 | 0) + ($7_1 + 784 | 0) | 0) + -4 | 0) >> 2] = 0;
          }
          i64toi32_i32$3 = $19$hi;
          i64toi32_i32$3 = $20$hi;
          i64toi32_i32$3 = $19$hi;
          i64toi32_i32$5 = $20$hi;
          i64toi32_i32$1 = 0;
          i64toi32_i32$4 = 1075633366;
          $693($7_1 + 768 | 0 | 0, $19_1 | 0, i64toi32_i32$3 | 0, $20_1 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$1 | 0, 1342177280 | 0, i64toi32_i32$4 | 0);
          $699($7_1 + 752 | 0 | 0, HEAP32[(($7_1 + 784 | 0) + ($11_1 << 2 | 0) | 0) >> 2] | 0 | 0);
          i64toi32_i32$5 = $7_1;
          i64toi32_i32$4 = HEAP32[($7_1 + 768 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[($7_1 + 772 | 0) >> 2] | 0;
          $742_1 = i64toi32_i32$4;
          $742$hi = i64toi32_i32$1;
          i64toi32_i32$5 = ($7_1 + 768 | 0) + 8 | 0;
          i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
          i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
          $746_1 = i64toi32_i32$1;
          $746$hi = i64toi32_i32$4;
          i64toi32_i32$5 = $7_1;
          i64toi32_i32$4 = HEAP32[($7_1 + 752 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[($7_1 + 756 | 0) >> 2] | 0;
          $748_1 = i64toi32_i32$4;
          $748$hi = i64toi32_i32$1;
          i64toi32_i32$5 = ($7_1 + 752 | 0) + 8 | 0;
          i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
          i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
          $752_1 = i64toi32_i32$1;
          $752$hi = i64toi32_i32$4;
          i64toi32_i32$4 = $742$hi;
          i64toi32_i32$1 = $746$hi;
          i64toi32_i32$5 = $748$hi;
          i64toi32_i32$3 = $752$hi;
          $688($7_1 + 736 | 0 | 0, $742_1 | 0, i64toi32_i32$4 | 0, $746_1 | 0, i64toi32_i32$1 | 0, $748_1 | 0, i64toi32_i32$5 | 0, $752_1 | 0, i64toi32_i32$3 | 0);
          i64toi32_i32$1 = ($7_1 + 736 | 0) + 8 | 0;
          i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
          i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
          $20_1 = i64toi32_i32$3;
          $20$hi = i64toi32_i32$5;
          i64toi32_i32$1 = $7_1;
          i64toi32_i32$5 = HEAP32[($7_1 + 736 | 0) >> 2] | 0;
          i64toi32_i32$3 = HEAP32[($7_1 + 740 | 0) >> 2] | 0;
          $19_1 = i64toi32_i32$5;
          $19$hi = i64toi32_i32$3;
          $1_1 = $1_1 + 1 | 0;
          if (($1_1 | 0) != (4 | 0)) {
           continue label$62
          }
          break label$62;
         };
         $695($7_1 + 720 | 0 | 0, $5_1 | 0);
         i64toi32_i32$3 = $19$hi;
         i64toi32_i32$3 = $20$hi;
         i64toi32_i32$1 = $7_1;
         i64toi32_i32$3 = HEAP32[($7_1 + 720 | 0) >> 2] | 0;
         i64toi32_i32$5 = HEAP32[($7_1 + 724 | 0) >> 2] | 0;
         $771_1 = i64toi32_i32$3;
         $771$hi = i64toi32_i32$5;
         i64toi32_i32$1 = ($7_1 + 720 | 0) + 8 | 0;
         i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
         i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
         $775_1 = i64toi32_i32$5;
         $775$hi = i64toi32_i32$3;
         i64toi32_i32$3 = $19$hi;
         i64toi32_i32$5 = $20$hi;
         i64toi32_i32$1 = $771$hi;
         i64toi32_i32$4 = $775$hi;
         $693($7_1 + 704 | 0 | 0, $19_1 | 0, i64toi32_i32$3 | 0, $20_1 | 0, i64toi32_i32$5 | 0, $771_1 | 0, i64toi32_i32$1 | 0, $775_1 | 0, i64toi32_i32$4 | 0);
         i64toi32_i32$5 = ($7_1 + 704 | 0) + 8 | 0;
         i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
         i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
         $20_1 = i64toi32_i32$4;
         $20$hi = i64toi32_i32$1;
         i64toi32_i32$1 = 0;
         $19_1 = 0;
         $19$hi = i64toi32_i32$1;
         i64toi32_i32$5 = $7_1;
         i64toi32_i32$1 = HEAP32[($7_1 + 704 | 0) >> 2] | 0;
         i64toi32_i32$4 = HEAP32[($7_1 + 708 | 0) >> 2] | 0;
         $21_1 = i64toi32_i32$1;
         $21$hi = i64toi32_i32$4;
         $14_1 = $16_1 + 113 | 0;
         $1_1 = $14_1 - $4_1 | 0;
         $15_1 = ($1_1 | 0) < ($3_1 | 0);
         $11_1 = $15_1 ? (($1_1 | 0) > (0 | 0) ? $1_1 : 0) : $3_1;
         if (($11_1 | 0) <= (112 | 0)) {
          break label$57
         }
         i64toi32_i32$4 = 0;
         $22_1 = 0;
         $22$hi = i64toi32_i32$4;
         i64toi32_i32$4 = 0;
         $23_1 = 0;
         $23$hi = i64toi32_i32$4;
         i64toi32_i32$4 = 0;
         $24_1 = 0;
         $24$hi = i64toi32_i32$4;
         break label$54;
        }
        $16_1 = $15_1 + $16_1 | 0;
        $11_1 = $2_1;
        if (($13_1 | 0) == ($2_1 | 0)) {
         continue label$58
        }
        break label$58;
       };
       $12_1 = 1e9 >>> $15_1 | 0;
       $17_1 = (-1 << $15_1 | 0) ^ -1 | 0;
       $1_1 = 0;
       $11_1 = $13_1;
       label$64 : while (1) {
        $14_1 = ($7_1 + 784 | 0) + ($13_1 << 2 | 0) | 0;
        $817_1 = $14_1;
        $14_1 = HEAP32[$14_1 >> 2] | 0;
        $1_1 = ($14_1 >>> $15_1 | 0) + $1_1 | 0;
        HEAP32[$817_1 >> 2] = $1_1;
        $1_1 = ($13_1 | 0) == ($11_1 | 0) & !$1_1 | 0;
        $11_1 = $1_1 ? ($11_1 + 1 | 0) & 2047 | 0 : $11_1;
        $8_1 = $1_1 ? $8_1 + -9 | 0 : $8_1;
        $1_1 = Math_imul($14_1 & $17_1 | 0, $12_1);
        $13_1 = ($13_1 + 1 | 0) & 2047 | 0;
        if (($13_1 | 0) != ($2_1 | 0)) {
         continue label$64
        }
        break label$64;
       };
       if (!$1_1) {
        continue label$56
       }
       label$65 : {
        if (($6_1 | 0) == ($11_1 | 0)) {
         break label$65
        }
        HEAP32[(($7_1 + 784 | 0) + ($2_1 << 2 | 0) | 0) >> 2] = $1_1;
        $2_1 = $6_1;
        continue label$55;
       }
       HEAP32[$18_1 >> 2] = HEAP32[$18_1 >> 2] | 0 | 1 | 0;
       $11_1 = $6_1;
       continue label$56;
      }
      break label$56;
     };
     break label$55;
    };
    $692($7_1 + 656 | 0 | 0, +(+$2171(+(1.0), 225 - $11_1 | 0 | 0)));
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$4 = HEAP32[($7_1 + 656 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7_1 + 660 | 0) >> 2] | 0;
    $879_1 = i64toi32_i32$4;
    $879$hi = i64toi32_i32$1;
    i64toi32_i32$5 = ($7_1 + 656 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $883_1 = i64toi32_i32$1;
    $883$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $21$hi;
    i64toi32_i32$4 = $20$hi;
    i64toi32_i32$4 = $879$hi;
    i64toi32_i32$1 = $883$hi;
    i64toi32_i32$5 = $21$hi;
    i64toi32_i32$3 = $20$hi;
    $666($7_1 + 688 | 0 | 0, $879_1 | 0, i64toi32_i32$4 | 0, $883_1 | 0, i64toi32_i32$1 | 0, $21_1 | 0, i64toi32_i32$5 | 0, $20_1 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$3 = HEAP32[($7_1 + 696 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7_1 + 700 | 0) >> 2] | 0;
    $24_1 = i64toi32_i32$3;
    $24$hi = i64toi32_i32$5;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 688 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[($7_1 + 692 | 0) >> 2] | 0;
    $23_1 = i64toi32_i32$5;
    $23$hi = i64toi32_i32$3;
    $692($7_1 + 640 | 0 | 0, +(+$2171(+(1.0), 113 - $11_1 | 0 | 0)));
    i64toi32_i32$3 = $21$hi;
    i64toi32_i32$3 = $20$hi;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$3 = HEAP32[($7_1 + 640 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7_1 + 644 | 0) >> 2] | 0;
    $900_1 = i64toi32_i32$3;
    $900$hi = i64toi32_i32$5;
    i64toi32_i32$1 = ($7_1 + 640 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $904_1 = i64toi32_i32$5;
    $904$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $21$hi;
    i64toi32_i32$5 = $20$hi;
    i64toi32_i32$1 = $900$hi;
    i64toi32_i32$4 = $904$hi;
    $2170($7_1 + 672 | 0 | 0, $21_1 | 0, i64toi32_i32$3 | 0, $20_1 | 0, i64toi32_i32$5 | 0, $900_1 | 0, i64toi32_i32$1 | 0, $904_1 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$4 = i64toi32_i32$3;
    i64toi32_i32$4 = i64toi32_i32$5;
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$4 = HEAP32[($7_1 + 672 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7_1 + 676 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$4;
    $19$hi = i64toi32_i32$1;
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$1 = HEAP32[($7_1 + 680 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 684 | 0) >> 2] | 0;
    $22_1 = i64toi32_i32$1;
    $22$hi = i64toi32_i32$4;
    i64toi32_i32$4 = i64toi32_i32$3;
    i64toi32_i32$1 = $20$hi;
    i64toi32_i32$5 = $19$hi;
    i64toi32_i32$3 = $22$hi;
    $694($7_1 + 624 | 0 | 0, $21_1 | 0, i64toi32_i32$4 | 0, $20_1 | 0, i64toi32_i32$1 | 0, $19_1 | 0, i64toi32_i32$5 | 0, $22_1 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$3 = $23$hi;
    i64toi32_i32$3 = $24$hi;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$3 = HEAP32[($7_1 + 624 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7_1 + 628 | 0) >> 2] | 0;
    $920_1 = i64toi32_i32$3;
    $920$hi = i64toi32_i32$5;
    i64toi32_i32$1 = ($7_1 + 624 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $924_1 = i64toi32_i32$5;
    $924$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $23$hi;
    i64toi32_i32$5 = $24$hi;
    i64toi32_i32$1 = $920$hi;
    i64toi32_i32$4 = $924$hi;
    $688($7_1 + 608 | 0 | 0, $23_1 | 0, i64toi32_i32$3 | 0, $24_1 | 0, i64toi32_i32$5 | 0, $920_1 | 0, i64toi32_i32$1 | 0, $924_1 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$5 = ($7_1 + 608 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $20_1 = i64toi32_i32$4;
    $20$hi = i64toi32_i32$1;
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$1 = HEAP32[($7_1 + 608 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 612 | 0) >> 2] | 0;
    $21_1 = i64toi32_i32$1;
    $21$hi = i64toi32_i32$4;
   }
   label$66 : {
    $8_1 = ($13_1 + 4 | 0) & 2047 | 0;
    if (($8_1 | 0) == ($2_1 | 0)) {
     break label$66
    }
    label$67 : {
     label$68 : {
      $8_1 = HEAP32[(($7_1 + 784 | 0) + ($8_1 << 2 | 0) | 0) >> 2] | 0;
      if ($8_1 >>> 0 > 499999999 >>> 0) {
       break label$68
      }
      label$69 : {
       if ($8_1) {
        break label$69
       }
       if ((($13_1 + 5 | 0) & 2047 | 0 | 0) == ($2_1 | 0)) {
        break label$67
       }
      }
      $692($7_1 + 496 | 0 | 0, +(+($5_1 | 0) * .25));
      i64toi32_i32$4 = $19$hi;
      i64toi32_i32$4 = $22$hi;
      i64toi32_i32$5 = $7_1;
      i64toi32_i32$4 = HEAP32[($7_1 + 496 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($7_1 + 500 | 0) >> 2] | 0;
      $961_1 = i64toi32_i32$4;
      $961$hi = i64toi32_i32$1;
      i64toi32_i32$5 = ($7_1 + 496 | 0) + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $965_1 = i64toi32_i32$1;
      $965$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $19$hi;
      i64toi32_i32$1 = $22$hi;
      i64toi32_i32$5 = $961$hi;
      i64toi32_i32$3 = $965$hi;
      $688($7_1 + 480 | 0 | 0, $19_1 | 0, i64toi32_i32$4 | 0, $22_1 | 0, i64toi32_i32$1 | 0, $961_1 | 0, i64toi32_i32$5 | 0, $965_1 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$1 = ($7_1 + 480 | 0) + 8 | 0;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $22_1 = i64toi32_i32$3;
      $22$hi = i64toi32_i32$5;
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$5 = HEAP32[($7_1 + 480 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[($7_1 + 484 | 0) >> 2] | 0;
      $19_1 = i64toi32_i32$5;
      $19$hi = i64toi32_i32$3;
      break label$67;
     }
     label$70 : {
      if (($8_1 | 0) == (5e8 | 0)) {
       break label$70
      }
      $692($7_1 + 592 | 0 | 0, +(+($5_1 | 0) * .75));
      i64toi32_i32$3 = $19$hi;
      i64toi32_i32$3 = $22$hi;
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$3 = HEAP32[($7_1 + 592 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[($7_1 + 596 | 0) >> 2] | 0;
      $984_1 = i64toi32_i32$3;
      $984$hi = i64toi32_i32$5;
      i64toi32_i32$1 = ($7_1 + 592 | 0) + 8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $988_1 = i64toi32_i32$5;
      $988$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $19$hi;
      i64toi32_i32$5 = $22$hi;
      i64toi32_i32$1 = $984$hi;
      i64toi32_i32$4 = $988$hi;
      $688($7_1 + 576 | 0 | 0, $19_1 | 0, i64toi32_i32$3 | 0, $22_1 | 0, i64toi32_i32$5 | 0, $984_1 | 0, i64toi32_i32$1 | 0, $988_1 | 0, i64toi32_i32$4 | 0);
      i64toi32_i32$5 = ($7_1 + 576 | 0) + 8 | 0;
      i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $22_1 = i64toi32_i32$4;
      $22$hi = i64toi32_i32$1;
      i64toi32_i32$5 = $7_1;
      i64toi32_i32$1 = HEAP32[($7_1 + 576 | 0) >> 2] | 0;
      i64toi32_i32$4 = HEAP32[($7_1 + 580 | 0) >> 2] | 0;
      $19_1 = i64toi32_i32$1;
      $19$hi = i64toi32_i32$4;
      break label$67;
     }
     $25_1 = +($5_1 | 0);
     label$71 : {
      if ((($13_1 + 5 | 0) & 2047 | 0 | 0) != ($2_1 | 0)) {
       break label$71
      }
      $692($7_1 + 528 | 0 | 0, +($25_1 * .5));
      i64toi32_i32$4 = $19$hi;
      i64toi32_i32$4 = $22$hi;
      i64toi32_i32$5 = $7_1;
      i64toi32_i32$4 = HEAP32[($7_1 + 528 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($7_1 + 532 | 0) >> 2] | 0;
      $1011_1 = i64toi32_i32$4;
      $1011$hi = i64toi32_i32$1;
      i64toi32_i32$5 = ($7_1 + 528 | 0) + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $1015_1 = i64toi32_i32$1;
      $1015$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $19$hi;
      i64toi32_i32$1 = $22$hi;
      i64toi32_i32$5 = $1011$hi;
      i64toi32_i32$3 = $1015$hi;
      $688($7_1 + 512 | 0 | 0, $19_1 | 0, i64toi32_i32$4 | 0, $22_1 | 0, i64toi32_i32$1 | 0, $1011_1 | 0, i64toi32_i32$5 | 0, $1015_1 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$1 = ($7_1 + 512 | 0) + 8 | 0;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $22_1 = i64toi32_i32$3;
      $22$hi = i64toi32_i32$5;
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$5 = HEAP32[($7_1 + 512 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[($7_1 + 516 | 0) >> 2] | 0;
      $19_1 = i64toi32_i32$5;
      $19$hi = i64toi32_i32$3;
      break label$67;
     }
     $692($7_1 + 560 | 0 | 0, +($25_1 * .75));
     i64toi32_i32$3 = $19$hi;
     i64toi32_i32$3 = $22$hi;
     i64toi32_i32$1 = $7_1;
     i64toi32_i32$3 = HEAP32[($7_1 + 560 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[($7_1 + 564 | 0) >> 2] | 0;
     $1031_1 = i64toi32_i32$3;
     $1031$hi = i64toi32_i32$5;
     i64toi32_i32$1 = ($7_1 + 560 | 0) + 8 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $1035_1 = i64toi32_i32$5;
     $1035$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $19$hi;
     i64toi32_i32$5 = $22$hi;
     i64toi32_i32$1 = $1031$hi;
     i64toi32_i32$4 = $1035$hi;
     $688($7_1 + 544 | 0 | 0, $19_1 | 0, i64toi32_i32$3 | 0, $22_1 | 0, i64toi32_i32$5 | 0, $1031_1 | 0, i64toi32_i32$1 | 0, $1035_1 | 0, i64toi32_i32$4 | 0);
     i64toi32_i32$5 = ($7_1 + 544 | 0) + 8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $22_1 = i64toi32_i32$4;
     $22$hi = i64toi32_i32$1;
     i64toi32_i32$5 = $7_1;
     i64toi32_i32$1 = HEAP32[($7_1 + 544 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[($7_1 + 548 | 0) >> 2] | 0;
     $19_1 = i64toi32_i32$1;
     $19$hi = i64toi32_i32$4;
    }
    if (($11_1 | 0) > (111 | 0)) {
     break label$66
    }
    i64toi32_i32$4 = $19$hi;
    i64toi32_i32$4 = $22$hi;
    i64toi32_i32$4 = $19$hi;
    i64toi32_i32$1 = $22$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 1073676288;
    $2170($7_1 + 464 | 0 | 0, $19_1 | 0, i64toi32_i32$4 | 0, $22_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$3 = HEAP32[($7_1 + 464 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7_1 + 468 | 0) >> 2] | 0;
    $1049_1 = i64toi32_i32$3;
    $1049$hi = i64toi32_i32$5;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 472 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[($7_1 + 476 | 0) >> 2] | 0;
    $1051_1 = i64toi32_i32$5;
    $1051$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $1049$hi;
    i64toi32_i32$5 = $1051$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$4 = 0;
    if ($683($1049_1 | 0, i64toi32_i32$3 | 0, $1051_1 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$4 | 0) | 0) {
     break label$66
    }
    i64toi32_i32$4 = $19$hi;
    i64toi32_i32$4 = $22$hi;
    i64toi32_i32$4 = $19$hi;
    i64toi32_i32$1 = $22$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 1073676288;
    $688($7_1 + 448 | 0 | 0, $19_1 | 0, i64toi32_i32$4 | 0, $22_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$1 = $7_1 + 456 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $22_1 = i64toi32_i32$3;
    $22$hi = i64toi32_i32$5;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 448 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[($7_1 + 452 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$5;
    $19$hi = i64toi32_i32$3;
   }
   i64toi32_i32$3 = $21$hi;
   i64toi32_i32$3 = $20$hi;
   i64toi32_i32$3 = $19$hi;
   i64toi32_i32$3 = $22$hi;
   i64toi32_i32$3 = $21$hi;
   i64toi32_i32$5 = $20$hi;
   i64toi32_i32$1 = $19$hi;
   i64toi32_i32$4 = $22$hi;
   $688($7_1 + 432 | 0 | 0, $21_1 | 0, i64toi32_i32$3 | 0, $20_1 | 0, i64toi32_i32$5 | 0, $19_1 | 0, i64toi32_i32$1 | 0, $22_1 | 0, i64toi32_i32$4 | 0);
   i64toi32_i32$5 = $7_1;
   i64toi32_i32$4 = HEAP32[($7_1 + 432 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($7_1 + 436 | 0) >> 2] | 0;
   $1071_1 = i64toi32_i32$4;
   $1071$hi = i64toi32_i32$1;
   i64toi32_i32$5 = ($7_1 + 432 | 0) + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $1075_1 = i64toi32_i32$1;
   $1075$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $23$hi;
   i64toi32_i32$4 = $24$hi;
   i64toi32_i32$4 = $1071$hi;
   i64toi32_i32$1 = $1075$hi;
   i64toi32_i32$5 = $23$hi;
   i64toi32_i32$3 = $24$hi;
   $694($7_1 + 416 | 0 | 0, $1071_1 | 0, i64toi32_i32$4 | 0, $1075_1 | 0, i64toi32_i32$1 | 0, $23_1 | 0, i64toi32_i32$5 | 0, $24_1 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$1 = ($7_1 + 416 | 0) + 8 | 0;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $20_1 = i64toi32_i32$3;
   $20$hi = i64toi32_i32$5;
   i64toi32_i32$1 = $7_1;
   i64toi32_i32$5 = HEAP32[($7_1 + 416 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[($7_1 + 420 | 0) >> 2] | 0;
   $21_1 = i64toi32_i32$5;
   $21$hi = i64toi32_i32$3;
   label$72 : {
    if (($14_1 & 2147483647 | 0 | 0) <= (-2 - $9_1 | 0 | 0)) {
     break label$72
    }
    i64toi32_i32$3 = $21$hi;
    i64toi32_i32$3 = $20$hi;
    i64toi32_i32$3 = $21$hi;
    i64toi32_i32$5 = $20$hi;
    $668($7_1 + 400 | 0 | 0, $21_1 | 0, i64toi32_i32$3 | 0, $20_1 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$5 = i64toi32_i32$3;
    i64toi32_i32$5 = $20$hi;
    i64toi32_i32$5 = i64toi32_i32$3;
    i64toi32_i32$3 = $20$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$4 = 1073610752;
    $693($7_1 + 384 | 0 | 0, $21_1 | 0, i64toi32_i32$5 | 0, $20_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$3 = $7_1;
    i64toi32_i32$4 = HEAP32[($7_1 + 400 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7_1 + 404 | 0) >> 2] | 0;
    $1098_1 = i64toi32_i32$4;
    $1098$hi = i64toi32_i32$1;
    i64toi32_i32$3 = $7_1;
    i64toi32_i32$1 = HEAP32[($7_1 + 408 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 412 | 0) >> 2] | 0;
    $1100_1 = i64toi32_i32$1;
    $1100$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $1098$hi;
    i64toi32_i32$1 = $1100$hi;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 1081081856;
    $2_1 = $684($1098_1 | 0, i64toi32_i32$4 | 0, $1100_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$5 | 0) | 0;
    i64toi32_i32$5 = $20$hi;
    i64toi32_i32$1 = ($7_1 + 384 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $1106_1 = i64toi32_i32$5;
    $1106$hi = i64toi32_i32$3;
    $14_1 = ($2_1 | 0) < (0 | 0);
    i64toi32_i32$0 = $14_1;
    i64toi32_i32$3 = $20$hi;
    i64toi32_i32$5 = $1106$hi;
    i64toi32_i32$4 = i64toi32_i32$0 ? $20_1 : $1106_1;
    i64toi32_i32$1 = i64toi32_i32$0 ? i64toi32_i32$3 : i64toi32_i32$5;
    $20_1 = i64toi32_i32$4;
    $20$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $21$hi;
    i64toi32_i32$0 = $7_1;
    i64toi32_i32$1 = HEAP32[($7_1 + 384 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 388 | 0) >> 2] | 0;
    $1113_1 = i64toi32_i32$1;
    $1113$hi = i64toi32_i32$4;
    i64toi32_i32$5 = $14_1;
    i64toi32_i32$4 = $21$hi;
    i64toi32_i32$1 = $1113$hi;
    i64toi32_i32$3 = i64toi32_i32$5 ? $21_1 : $1113_1;
    i64toi32_i32$0 = i64toi32_i32$5 ? i64toi32_i32$4 : i64toi32_i32$1;
    $21_1 = i64toi32_i32$3;
    $21$hi = i64toi32_i32$0;
    $16_1 = $16_1 + (($2_1 | 0) > (-1 | 0)) | 0;
    label$73 : {
     i64toi32_i32$0 = $19$hi;
     i64toi32_i32$0 = $22$hi;
     i64toi32_i32$0 = $19$hi;
     i64toi32_i32$3 = $22$hi;
     i64toi32_i32$5 = 0;
     i64toi32_i32$4 = 0;
     if (($683($19_1 | 0, $19$hi | 0, $22_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$4 | 0) | 0 | 0) != (0 | 0) & ($15_1 & ($14_1 | ($11_1 | 0) != ($1_1 | 0) | 0) | 0) | 0) {
      break label$73
     }
     if (($16_1 + 110 | 0 | 0) <= ($10_1 | 0)) {
      break label$72
     }
    }
    HEAP32[($587() | 0) >> 2] = 68;
   }
   i64toi32_i32$4 = $21$hi;
   i64toi32_i32$4 = $20$hi;
   i64toi32_i32$4 = $21$hi;
   i64toi32_i32$5 = $20$hi;
   $667($7_1 + 368 | 0 | 0, $21_1 | 0, i64toi32_i32$4 | 0, $20_1 | 0, i64toi32_i32$5 | 0, $16_1 | 0);
   i64toi32_i32$3 = $7_1;
   i64toi32_i32$5 = HEAP32[($7_1 + 376 | 0) >> 2] | 0;
   i64toi32_i32$4 = HEAP32[($7_1 + 380 | 0) >> 2] | 0;
   $19_1 = i64toi32_i32$5;
   $19$hi = i64toi32_i32$4;
   i64toi32_i32$3 = $7_1;
   i64toi32_i32$4 = HEAP32[($7_1 + 368 | 0) >> 2] | 0;
   i64toi32_i32$5 = HEAP32[($7_1 + 372 | 0) >> 2] | 0;
   $20_1 = i64toi32_i32$4;
   $20$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $20$hi;
  i64toi32_i32$4 = $0_1;
  HEAP32[i64toi32_i32$4 >> 2] = $20_1;
  HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$5;
  i64toi32_i32$5 = $19$hi;
  HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = $19_1;
  HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$5;
  global$0 = $7_1 + 8976 | 0;
 }
 
 function $672($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $3_1 = 0, i64toi32_i32$3 = 0, $6$hi = 0, $5_1 = 0, $6_1 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $85$hi = 0, $87_1 = 0, $87$hi = 0, $136$hi = 0;
  label$1 : {
   label$2 : {
    $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if ($2_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
     break label$2
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
    $2_1 = HEAPU8[$2_1 >> 0] | 0;
    break label$1;
   }
   $2_1 = $664($0_1 | 0) | 0;
  }
  label$3 : {
   label$4 : {
    switch ($2_1 + -43 | 0 | 0) {
    default:
     $3_1 = $2_1 + -48 | 0;
     $4_1 = 0;
     break label$3;
    case 0:
    case 2:
     break label$4;
    };
   }
   label$6 : {
    label$7 : {
     $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     if ($3_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
      break label$7
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 + 1 | 0;
     $5_1 = HEAPU8[$3_1 >> 0] | 0;
     break label$6;
    }
    $5_1 = $664($0_1 | 0) | 0;
   }
   $4_1 = ($2_1 | 0) == (45 | 0);
   $3_1 = $5_1 + -48 | 0;
   label$8 : {
    if (!$1_1) {
     break label$8
    }
    if ($3_1 >>> 0 < 10 >>> 0) {
     break label$8
    }
    if (!(HEAP32[($0_1 + 104 | 0) >> 2] | 0)) {
     break label$8
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
   }
   $2_1 = $5_1;
  }
  label$9 : {
   label$10 : {
    if ($3_1 >>> 0 >= 10 >>> 0) {
     break label$10
    }
    $3_1 = 0;
    label$11 : while (1) {
     $3_1 = $2_1 + Math_imul($3_1, 10) | 0;
     label$12 : {
      label$13 : {
       $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
       if ($2_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$13
       }
       HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
       $2_1 = HEAPU8[$2_1 >> 0] | 0;
       break label$12;
      }
      $2_1 = $664($0_1 | 0) | 0;
     }
     $3_1 = $3_1 + -48 | 0;
     label$14 : {
      $5_1 = $2_1 + -48 | 0;
      if ($5_1 >>> 0 > 9 >>> 0) {
       break label$14
      }
      if (($3_1 | 0) < (214748364 | 0)) {
       continue label$11
      }
     }
     break label$11;
    };
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $6_1 = i64toi32_i32$1;
    $6$hi = i64toi32_i32$0;
    label$15 : {
     if ($5_1 >>> 0 >= 10 >>> 0) {
      break label$15
     }
     label$16 : while (1) {
      i64toi32_i32$0 = 0;
      $85$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $6$hi;
      i64toi32_i32$1 = 0;
      i64toi32_i32$1 = __wasm_i64_mul($6_1 | 0, i64toi32_i32$0 | 0, 10 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $87_1 = i64toi32_i32$1;
      $87$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $85$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$1 = $87$hi;
      i64toi32_i32$3 = $87_1;
      i64toi32_i32$4 = $2_1 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $6_1 = i64toi32_i32$4;
      $6$hi = i64toi32_i32$5;
      label$17 : {
       label$18 : {
        $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        if ($2_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
         break label$18
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
        $2_1 = HEAPU8[$2_1 >> 0] | 0;
        break label$17;
       }
       $2_1 = $664($0_1 | 0) | 0;
      }
      i64toi32_i32$5 = $6$hi;
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$2 = -1;
      i64toi32_i32$3 = -48;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $6_1 = i64toi32_i32$1;
      $6$hi = i64toi32_i32$4;
      $5_1 = $2_1 + -48 | 0;
      if ($5_1 >>> 0 > 9 >>> 0) {
       break label$15
      }
      i64toi32_i32$4 = $6$hi;
      i64toi32_i32$5 = $6_1;
      i64toi32_i32$0 = 21474836;
      i64toi32_i32$3 = 2061584302;
      if ((i64toi32_i32$4 | 0) < (i64toi32_i32$0 | 0)) {
       $18_1 = 1
      } else {
       if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$0 | 0)) {
        if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0) {
         $19_1 = 0
        } else {
         $19_1 = 1
        }
        $20_1 = $19_1;
       } else {
        $20_1 = 0
       }
       $18_1 = $20_1;
      }
      if ($18_1) {
       continue label$16
      }
      break label$16;
     };
    }
    label$19 : {
     if ($5_1 >>> 0 >= 10 >>> 0) {
      break label$19
     }
     label$20 : while (1) {
      label$21 : {
       label$22 : {
        $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        if ($2_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
         break label$22
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
        $2_1 = HEAPU8[$2_1 >> 0] | 0;
        break label$21;
       }
       $2_1 = $664($0_1 | 0) | 0;
      }
      if (($2_1 + -48 | 0) >>> 0 < 10 >>> 0) {
       continue label$20
      }
      break label$20;
     };
    }
    label$23 : {
     if (!(HEAP32[($0_1 + 104 | 0) >> 2] | 0)) {
      break label$23
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
    }
    i64toi32_i32$5 = $6$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = $6$hi;
    i64toi32_i32$0 = $6_1;
    i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
    i64toi32_i32$1 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) + i64toi32_i32$4 | 0;
    i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$1 | 0;
    $136$hi = i64toi32_i32$1;
    i64toi32_i32$1 = i64toi32_i32$4;
    i64toi32_i32$4 = $4_1;
    i64toi32_i32$1 = $136$hi;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$0 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$0;
    i64toi32_i32$5 = i64toi32_i32$4 ? i64toi32_i32$1 : i64toi32_i32$3;
    $6_1 = i64toi32_i32$0;
    $6$hi = i64toi32_i32$5;
    break label$9;
   }
   i64toi32_i32$5 = -2147483648;
   $6_1 = 0;
   $6$hi = i64toi32_i32$5;
   if (!(HEAP32[($0_1 + 104 | 0) >> 2] | 0)) {
    break label$9
   }
   HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
   i64toi32_i32$5 = -2147483648;
   i64toi32_i32$0 = 0;
   i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
   return i64toi32_i32$0 | 0;
  }
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$5 = $6_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$5 | 0;
 }
 
 function $673($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $11_1 = 0, $11$hi = 0, $13_1 = 0, $13$hi = 0, $3_1 = Math_fround(0);
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $674($2_1 | 0, $0_1 | 0, $1_1 | 0, 0 | 0);
  i64toi32_i32$0 = HEAP32[$2_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
  $11_1 = i64toi32_i32$0;
  $11$hi = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
  $13_1 = i64toi32_i32$1;
  $13$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $11$hi;
  i64toi32_i32$1 = $13$hi;
  $3_1 = Math_fround($691($11_1 | 0, i64toi32_i32$0 | 0, $13_1 | 0, i64toi32_i32$1 | 0));
  global$0 = $2_1 + 16 | 0;
  return Math_fround($3_1);
 }
 
 function $674($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $5_1 = 0, $5$hi = 0, $6_1 = 0, $6$hi = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $36_1 = 0, $36$hi = 0, $42_1 = 0, $42$hi = 0;
  $4_1 = global$0 - 160 | 0;
  global$0 = $4_1;
  $2174($4_1 + 16 | 0 | 0, 0 | 0, 144 | 0) | 0;
  HEAP32[($4_1 + 92 | 0) >> 2] = -1;
  HEAP32[($4_1 + 60 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = -1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  i64toi32_i32$0 = 0;
  $663($4_1 + 16 | 0 | 0, 0 | 0, i64toi32_i32$0 | 0);
  $669($4_1 | 0, $4_1 + 16 | 0 | 0, $3_1 | 0, 1 | 0);
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$0 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $5_1 = i64toi32_i32$0;
  $5$hi = i64toi32_i32$1;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = HEAP32[$4_1 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  $6_1 = i64toi32_i32$1;
  $6$hi = i64toi32_i32$0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $32_1 = $2_1;
   $33_1 = $1_1;
   $34_1 = $1_1;
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$0 = HEAP32[($4_1 + 136 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($4_1 + 140 | 0) >> 2] | 0;
   $36_1 = i64toi32_i32$0;
   $36$hi = i64toi32_i32$1;
   i64toi32_i32$0 = (HEAP32[($4_1 + 20 | 0) >> 2] | 0) - (HEAP32[($4_1 + 24 | 0) >> 2] | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
   $42_1 = i64toi32_i32$0;
   $42$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $36$hi;
   i64toi32_i32$2 = $36_1;
   i64toi32_i32$0 = $42$hi;
   i64toi32_i32$3 = $42_1;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   HEAP32[$32_1 >> 2] = !(i64toi32_i32$4 | i64toi32_i32$5 | 0) ? $33_1 : $34_1 + i64toi32_i32$4 | 0;
  }
  i64toi32_i32$5 = $6$hi;
  i64toi32_i32$2 = $0_1;
  HEAP32[i64toi32_i32$2 >> 2] = $6_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
  i64toi32_i32$5 = $5$hi;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $5_1;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$5;
  global$0 = $4_1 + 160 | 0;
 }
 
 function $675($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $11_1 = 0, $11$hi = 0, $13_1 = 0, $13$hi = 0, $3_1 = 0.0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $674($2_1 | 0, $0_1 | 0, $1_1 | 0, 1 | 0);
  i64toi32_i32$0 = HEAP32[$2_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
  $11_1 = i64toi32_i32$0;
  $11$hi = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
  $13_1 = i64toi32_i32$1;
  $13$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $11$hi;
  i64toi32_i32$1 = $13$hi;
  $3_1 = +$698($11_1 | 0, i64toi32_i32$0 | 0, $13_1 | 0, i64toi32_i32$1 | 0);
  global$0 = $2_1 + 16 | 0;
  return +$3_1;
 }
 
 function $676($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $12_1 = 0, $15_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $674($3_1 | 0, $1_1 | 0, $2_1 | 0, 2 | 0);
  i64toi32_i32$0 = HEAP32[$3_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  $12_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $12_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $15_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $15_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $677($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return Math_fround(Math_fround($673($0_1 | 0, $1_1 | 0)));
 }
 
 function $678($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return +(+$675($0_1 | 0, $1_1 | 0));
 }
 
 function $679($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $13_1 = 0, $16_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $676($4_1 | 0, $1_1 | 0, $2_1 | 0);
  i64toi32_i32$0 = HEAP32[$4_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  $13_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $13_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $16_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $16_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $4_1 + 16 | 0;
 }
 
 function $680($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $681($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $682($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return 0 | 0;
  }
  HEAP32[($587() | 0) >> 2] = $0_1;
  return -1 | 0;
 }
 
 function $683($0_1, $0$hi, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $5$hi = 0, $6$hi = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, $8_1 = 0, $12_1 = 0, $17_1 = 0, $21_1 = 0, $27_1 = 0, $27$hi = 0, $30_1 = 0, $30$hi = 0, $40_1 = 0, $50_1 = 0, $50$hi = 0, $53_1 = 0, $53$hi = 0, $58_1 = 0, $68_1 = 0, $68$hi = 0, $71_1 = 0, $71$hi = 0;
  $4_1 = 1;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 0;
   $8_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$0 = 2147483647;
   i64toi32_i32$1 = -1;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
   $5_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$3 = 2147418112;
   i64toi32_i32$1 = 0;
   $12_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$1 = $5_1;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0 ? $8_1 : $12_1) {
    break label$1
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$3 = $2_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = 0;
   $17_1 = (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$1 = 2147483647;
   i64toi32_i32$2 = -1;
   i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $6_1 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   $6$hi = i64toi32_i32$1;
   i64toi32_i32$3 = $6_1;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$2 = 0;
   $21_1 = i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$2 = $6_1;
   i64toi32_i32$1 = 2147418112;
   i64toi32_i32$0 = 0;
   if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) | 0 ? $17_1 : $21_1) {
    break label$1
   }
   label$2 : {
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $27_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $27$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$3 = $5$hi;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$2 = $6_1;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $30_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $30$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $27$hi;
    i64toi32_i32$3 = $27_1;
    i64toi32_i32$2 = $30$hi;
    i64toi32_i32$1 = $30_1;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    if (!!(i64toi32_i32$3 | i64toi32_i32$1 | 0 | i64toi32_i32$2 | 0)) {
     break label$2
    }
    return 0 | 0;
   }
   label$3 : {
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $3_1;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
     $35_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$1 >>> 0) {
       $36_1 = 0
      } else {
       $36_1 = 1
      }
      $37_1 = $36_1;
     } else {
      $37_1 = 0
     }
     $35_1 = $37_1;
    }
    if ($35_1) {
     break label$3
    }
    $4_1 = -1;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$0 = $2_1;
    $40_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$3 = $3_1;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
     $38_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $39_1 = 0
      } else {
       $39_1 = 1
      }
      $41_1 = $39_1;
     } else {
      $41_1 = 0
     }
     $38_1 = $41_1;
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$2 = $3_1;
    if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $40_1 : $38_1) {
     break label$1
    }
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = $2_1;
    i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
    $50_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
    $50$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
    $53_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
    $53$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $50$hi;
    i64toi32_i32$0 = $50_1;
    i64toi32_i32$3 = $53$hi;
    i64toi32_i32$1 = $53_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    return (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0 | 0;
   }
   $4_1 = -1;
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$1 = $0_1;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$0 = $2_1;
   $58_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$3 = $3_1;
   if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
    $42_1 = 1
   } else {
    if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
     if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
      $43_1 = 0
     } else {
      $43_1 = 1
     }
     $44_1 = $43_1;
    } else {
     $44_1 = 0
    }
    $42_1 = $44_1;
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $3_1;
   if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $58_1 : $42_1) {
    break label$1
   }
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
   $68_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
   $68$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
   $71_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $71$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $68$hi;
   i64toi32_i32$0 = $68_1;
   i64toi32_i32$3 = $71$hi;
   i64toi32_i32$1 = $71_1;
   i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 0;
   $4_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0;
  }
  return $4_1 | 0;
 }
 
 function $684($0_1, $0$hi, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $6_1 = 0, $4_1 = 0, $5$hi = 0, $6$hi = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, $8_1 = 0, $12_1 = 0, $17_1 = 0, $21_1 = 0, $27_1 = 0, $27$hi = 0, $30_1 = 0, $30$hi = 0, $40_1 = 0, $50_1 = 0, $50$hi = 0, $53_1 = 0, $53$hi = 0, $58_1 = 0, $68_1 = 0, $68$hi = 0, $71_1 = 0, $71$hi = 0;
  $4_1 = -1;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 0;
   $8_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$0 = 2147483647;
   i64toi32_i32$1 = -1;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
   $5_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$3 = 2147418112;
   i64toi32_i32$1 = 0;
   $12_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$1 = $5_1;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0 ? $8_1 : $12_1) {
    break label$1
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$3 = $2_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = 0;
   $17_1 = (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$1 = 2147483647;
   i64toi32_i32$2 = -1;
   i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $6_1 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   $6$hi = i64toi32_i32$1;
   i64toi32_i32$3 = $6_1;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$2 = 0;
   $21_1 = i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$2 = $6_1;
   i64toi32_i32$1 = 2147418112;
   i64toi32_i32$0 = 0;
   if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) | 0 ? $17_1 : $21_1) {
    break label$1
   }
   label$2 : {
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $27_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $27$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$3 = $5$hi;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$2 = $6_1;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $30_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $30$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $27$hi;
    i64toi32_i32$3 = $27_1;
    i64toi32_i32$2 = $30$hi;
    i64toi32_i32$1 = $30_1;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    if (!!(i64toi32_i32$3 | i64toi32_i32$1 | 0 | i64toi32_i32$2 | 0)) {
     break label$2
    }
    return 0 | 0;
   }
   label$3 : {
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $3_1;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
     $35_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$1 >>> 0) {
       $36_1 = 0
      } else {
       $36_1 = 1
      }
      $37_1 = $36_1;
     } else {
      $37_1 = 0
     }
     $35_1 = $37_1;
    }
    if ($35_1) {
     break label$3
    }
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$0 = $2_1;
    $40_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$3 = $3_1;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
     $38_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $39_1 = 0
      } else {
       $39_1 = 1
      }
      $41_1 = $39_1;
     } else {
      $41_1 = 0
     }
     $38_1 = $41_1;
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$2 = $3_1;
    if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $40_1 : $38_1) {
     break label$1
    }
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = $2_1;
    i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
    $50_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
    $50$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
    $53_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
    $53$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $50$hi;
    i64toi32_i32$0 = $50_1;
    i64toi32_i32$3 = $53$hi;
    i64toi32_i32$1 = $53_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    return (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0 | 0;
   }
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$1 = $0_1;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$0 = $2_1;
   $58_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$3 = $3_1;
   if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
    $42_1 = 1
   } else {
    if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
     if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
      $43_1 = 0
     } else {
      $43_1 = 1
     }
     $44_1 = $43_1;
    } else {
     $44_1 = 0
    }
    $42_1 = $44_1;
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $3_1;
   if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $58_1 : $42_1) {
    break label$1
   }
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
   $68_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
   $68$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
   $71_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $71$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $68$hi;
   i64toi32_i32$0 = $68_1;
   i64toi32_i32$3 = $71$hi;
   i64toi32_i32$1 = $71_1;
   i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 0;
   $4_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0;
  }
  return $4_1 | 0;
 }
 
 function $685($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $4$hi = 0, $18_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $11$hi = 0, $18$hi = 0, $19_1 = 0, $19$hi = 0, $4_1 = 0, $24$hi = 0;
  label$1 : {
   label$2 : {
    if (!($3_1 & 64 | 0)) {
     break label$2
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = 0;
    $11$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$3 = $3_1 + -64 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $18_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $18_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $2_1 = $18_1;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $1_1 = 0;
    $1$hi = i64toi32_i32$1;
    break label$1;
   }
   if (!$3_1) {
    break label$1
   }
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = 0;
   $18$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$2 = $18$hi;
   i64toi32_i32$3 = 64 - $3_1 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $20_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $20_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   $19_1 = $20_1;
   $19$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = 0;
   $4_1 = $3_1;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    $21_1 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
    $21_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   }
   $24$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $19$hi;
   i64toi32_i32$2 = $19_1;
   i64toi32_i32$1 = $24$hi;
   i64toi32_i32$3 = $21_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $2_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $2$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$3 = $4_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $22_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $22_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $1_1 = $22_1;
   $1$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $2$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $2_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function $686() {
  return 0 | 0;
 }
 
 function $687() {
  return 0 | 0;
 }
 
 function $688($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $6_1 = 0, $7_1 = 0, $5_1 = 0, $9$hi = 0, $9_1 = 0, $10$hi = 0, $11$hi = 0, $10_1 = 0, $11_1 = 0, i64toi32_i32$6 = 0, $12$hi = 0, $8_1 = 0, $135_1 = 0, $136_1 = 0, $137_1 = 0, $138_1 = 0, $139_1 = 0, $140_1 = 0, $141_1 = 0, $142_1 = 0, $143_1 = 0, $12_1 = 0, $144_1 = 0, $145_1 = 0, $146_1 = 0, $147_1 = 0, $148_1 = 0, $149_1 = 0, $150_1 = 0, $154_1 = 0, $155_1 = 0, $156_1 = 0, $157_1 = 0, $158_1 = 0, $21_1 = 0, $27_1 = 0, $28$hi = 0, $32_1 = 0, $39_1 = 0, $43_1 = 0, $44$hi = 0, $48_1 = 0, $53_1 = 0, $55_1 = 0, $63_1 = 0, $65_1 = 0, $73_1 = 0, $73$hi = 0, $79_1 = 0, $79$hi = 0, $83_1 = 0, $83$hi = 0, $93_1 = 0, $93$hi = 0, $121_1 = 0, $124_1 = 0, $151_1 = 0, $152_1 = 0, $152$hi = 0, $153_1 = 0, $153$hi = 0, $160$hi = 0, $163$hi = 0, $183_1 = 0, $184_1 = 0, $184$hi = 0, $185_1 = 0, $185$hi = 0, $192$hi = 0, $195$hi = 0, $208_1 = 0, $208$hi = 0, $210$hi = 0, $214_1 = 0, $214$hi = 0, $216$hi = 0, $242_1 = 0, $242$hi = 0, $244_1 = 0, $244$hi = 0, $248_1 = 0, $248$hi = 0, $250_1 = 0, $251$hi = 0, $269$hi = 0, $272_1 = 0, $273$hi = 0, $282_1 = 0, $283_1 = 0, $283$hi = 0, $284_1 = 0, $284$hi = 0, $291$hi = 0, $294$hi = 0, $309_1 = 0, $309$hi = 0, $315_1 = 0, $316$hi = 0, $322_1 = 0, $322$hi = 0, $324$hi = 0, $325_1 = 0, $325$hi = 0, $327_1 = 0, $327$hi = 0, $354_1 = 0, $354$hi = 0, $356_1 = 0, $356$hi = 0, $360_1 = 0, $360$hi = 0, $362_1 = 0, $363$hi = 0, $369_1 = 0, $369$hi = 0, $371$hi = 0, $375$hi = 0, $377_1 = 0, $377$hi = 0, $380$hi = 0, $386_1 = 0, $386$hi = 0, $390$hi = 0, $394_1 = 0, $395$hi = 0, $400_1 = 0, $400$hi = 0, $408_1 = 0, $409$hi = 0, $411_1 = 0, $411$hi = 0, $417_1 = 0, $418$hi = 0, $422_1 = 0, $423$hi = 0, $426_1 = 0, $426$hi = 0, $432_1 = 0, $433$hi = 0, $437_1 = 0, $438$hi = 0;
  $5_1 = global$0 - 112 | 0;
  global$0 = $5_1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 2147483647;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $9_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $9$hi = i64toi32_i32$1;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$2 = -1;
     i64toi32_i32$3 = -1;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $10_1 = i64toi32_i32$4;
     $10$hi = i64toi32_i32$5;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$0 = -1;
     i64toi32_i32$3 = -1;
     $21_1 = (i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$3 = $2_1;
     i64toi32_i32$5 = 2147483647;
     i64toi32_i32$0 = -1;
     i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
     $11_1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
     $11$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $10$hi;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$5 = $10$hi;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$0 = $1_1;
     $27_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $28$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$0 = $11_1;
     i64toi32_i32$5 = $28$hi;
     i64toi32_i32$3 = $27_1;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     i64toi32_i32$1 = i64toi32_i32$2;
     i64toi32_i32$0 = -1;
     i64toi32_i32$3 = -1;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $10_1 = i64toi32_i32$5;
     $10$hi = i64toi32_i32$2;
     i64toi32_i32$4 = i64toi32_i32$5;
     i64toi32_i32$1 = 2147418111;
     i64toi32_i32$3 = -1;
     $32_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$3 = i64toi32_i32$5;
     i64toi32_i32$2 = 2147418111;
     i64toi32_i32$1 = -1;
     if ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) | 0 ? $21_1 : $32_1) {
      break label$3
     }
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$1 = $3_1;
     i64toi32_i32$4 = -1;
     i64toi32_i32$2 = -1;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $10_1 = i64toi32_i32$0;
     $10$hi = i64toi32_i32$5;
     i64toi32_i32$3 = i64toi32_i32$0;
     i64toi32_i32$1 = -1;
     i64toi32_i32$2 = -1;
     $39_1 = (i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$3 = i64toi32_i32$5;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = i64toi32_i32$5;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$1 = $3_1;
     $43_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $44$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$1 = $9_1;
     i64toi32_i32$3 = $44$hi;
     i64toi32_i32$5 = $43_1;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     i64toi32_i32$2 = i64toi32_i32$4;
     i64toi32_i32$1 = -1;
     i64toi32_i32$5 = -1;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $10_1 = i64toi32_i32$3;
     $10$hi = i64toi32_i32$4;
     i64toi32_i32$0 = i64toi32_i32$3;
     i64toi32_i32$2 = 2147418111;
     i64toi32_i32$5 = -1;
     $48_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$5 = i64toi32_i32$3;
     i64toi32_i32$4 = 2147418111;
     i64toi32_i32$2 = -1;
     if ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) | 0 ? $39_1 : $48_1) {
      break label$2
     }
    }
    label$4 : {
     i64toi32_i32$5 = $1$hi;
     $53_1 = !($1_1 | i64toi32_i32$5 | 0);
     i64toi32_i32$5 = $11$hi;
     i64toi32_i32$2 = $11_1;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$4 = 0;
     $55_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$5;
     i64toi32_i32$2 = i64toi32_i32$5;
     i64toi32_i32$4 = $11_1;
     i64toi32_i32$5 = 2147418112;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) | 0 ? $53_1 : $55_1) {
      break label$4
     }
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$2 = 32768;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
     $4_1 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
     $4$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $1$hi;
     $3_1 = $1_1;
     $3$hi = i64toi32_i32$2;
     break label$1;
    }
    label$5 : {
     i64toi32_i32$2 = $3$hi;
     $63_1 = !($3_1 | i64toi32_i32$2 | 0);
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$4 = $9_1;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$5 = 0;
     $65_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$5 = $9_1;
     i64toi32_i32$2 = 2147418112;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) | 0 ? $63_1 : $65_1) {
      break label$5
     }
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$0 = $4_1;
     i64toi32_i32$4 = 32768;
     i64toi32_i32$2 = 0;
     i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
     $4_1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $4$hi = i64toi32_i32$4;
     break label$1;
    }
    label$6 : {
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$4 = $11$hi;
     i64toi32_i32$5 = $11_1;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = i64toi32_i32$4 ^ i64toi32_i32$0 | 0;
     $73_1 = i64toi32_i32$5 ^ i64toi32_i32$2 | 0;
     $73$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$4 = $1_1;
     i64toi32_i32$5 = $73$hi;
     i64toi32_i32$2 = $73_1;
     i64toi32_i32$5 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
     i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$4 | 0) | 0) {
      break label$6
     }
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$2 = $3_1;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$4 = $1_1;
     i64toi32_i32$5 = i64toi32_i32$0 ^ i64toi32_i32$5 | 0;
     $79_1 = i64toi32_i32$2 ^ i64toi32_i32$4 | 0;
     $79$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$0 = $4_1;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$4 = $2_1;
     i64toi32_i32$2 = i64toi32_i32$5 ^ i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$0 ^ i64toi32_i32$4 | 0;
     i64toi32_i32$0 = -2147483648;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
     $83_1 = i64toi32_i32$5 ^ i64toi32_i32$4 | 0;
     $83$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $79$hi;
     i64toi32_i32$2 = $79_1;
     i64toi32_i32$5 = $83$hi;
     i64toi32_i32$4 = $83_1;
     i64toi32_i32$5 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
     $6_1 = !(i64toi32_i32$2 | i64toi32_i32$4 | 0 | i64toi32_i32$5 | 0);
     i64toi32_i32$1 = $6_1;
     i64toi32_i32$5 = 2147450880;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$4 = i64toi32_i32$1 ? 0 : $2_1;
     i64toi32_i32$0 = i64toi32_i32$1 ? i64toi32_i32$5 : i64toi32_i32$2;
     $4_1 = i64toi32_i32$4;
     $4$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$5 = i64toi32_i32$1 ? 0 : $1_1;
     i64toi32_i32$1 = i64toi32_i32$1 ? i64toi32_i32$0 : i64toi32_i32$4;
     $3_1 = i64toi32_i32$5;
     $3$hi = i64toi32_i32$1;
     break label$1;
    }
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $9$hi;
    i64toi32_i32$2 = $9_1;
    i64toi32_i32$5 = 2147418112;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = i64toi32_i32$1 ^ i64toi32_i32$5 | 0;
    $93_1 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
    $93$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$2 = $93$hi;
    i64toi32_i32$0 = $93_1;
    i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    if (!(i64toi32_i32$1 | i64toi32_i32$0 | 0 | i64toi32_i32$2 | 0)) {
     break label$1
    }
    label$7 : {
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $11$hi;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$5 = $1_1;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$0 = $11_1;
     i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
     i64toi32_i32$5 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | 0) {
      break label$7
     }
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$0 = $3_1;
     i64toi32_i32$1 = $9$hi;
     i64toi32_i32$5 = $9_1;
     i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$5 = 0;
     if ((i64toi32_i32$2 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break label$1
     }
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$5 = $3_1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
     $3_1 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
     $3$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$2 = $4_1;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
     $4_1 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
     $4$hi = i64toi32_i32$5;
     break label$1;
    }
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $9$hi;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$2 = $9$hi;
    i64toi32_i32$0 = $9_1;
    i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    if (!!(i64toi32_i32$1 | i64toi32_i32$0 | 0 | i64toi32_i32$2 | 0)) {
     break label$2
    }
    i64toi32_i32$2 = $1$hi;
    $3_1 = $1_1;
    $3$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    $4_1 = $2_1;
    $4$hi = i64toi32_i32$2;
    break label$1;
   }
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$5 = $3_1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   $121_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$5 = $9$hi;
   i64toi32_i32$5 = $11$hi;
   i64toi32_i32$5 = $9$hi;
   i64toi32_i32$0 = $9_1;
   i64toi32_i32$2 = $11$hi;
   i64toi32_i32$1 = $11_1;
   $124_1 = i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$1 = $9_1;
   i64toi32_i32$5 = i64toi32_i32$2;
   i64toi32_i32$2 = $11_1;
   $7_1 = (i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) | 0 ? $121_1 : $124_1;
   i64toi32_i32$4 = $7_1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$5 = i64toi32_i32$4 ? $3_1 : $1_1;
   i64toi32_i32$2 = i64toi32_i32$4 ? i64toi32_i32$1 : i64toi32_i32$0;
   $9_1 = i64toi32_i32$5;
   $9$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$0 = i64toi32_i32$4;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$1 = i64toi32_i32$4 ? $4_1 : $2_1;
   i64toi32_i32$4 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$5;
   $11_1 = i64toi32_i32$1;
   $11$hi = i64toi32_i32$4;
   i64toi32_i32$0 = i64toi32_i32$1;
   i64toi32_i32$1 = 65535;
   i64toi32_i32$2 = -1;
   i64toi32_i32$1 = i64toi32_i32$4 & i64toi32_i32$1 | 0;
   $10_1 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   $10$hi = i64toi32_i32$1;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$5 = $7_1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$2 = i64toi32_i32$5 ? $2_1 : $4_1;
   i64toi32_i32$4 = i64toi32_i32$5 ? i64toi32_i32$1 : i64toi32_i32$0;
   $2_1 = i64toi32_i32$2;
   $2$hi = i64toi32_i32$4;
   i64toi32_i32$5 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = 48;
   i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $135_1 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
    $135_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
   }
   $8_1 = $135_1 & 32767 | 0;
   label$8 : {
    i64toi32_i32$2 = $11$hi;
    i64toi32_i32$4 = $11_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = 48;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $136_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     $136_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
    }
    $6_1 = $136_1 & 32767 | 0;
    if ($6_1) {
     break label$8
    }
    $151_1 = $5_1 + 96 | 0;
    i64toi32_i32$5 = $9$hi;
    $152_1 = $9_1;
    $152$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $10$hi;
    $153_1 = $10_1;
    $153$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $9$hi;
    i64toi32_i32$5 = $10$hi;
    $6_1 = !($10_1 | i64toi32_i32$5 | 0);
    i64toi32_i32$0 = $6_1;
    i64toi32_i32$5 = $9$hi;
    i64toi32_i32$4 = $10$hi;
    i64toi32_i32$1 = i64toi32_i32$0 ? $9_1 : $10_1;
    i64toi32_i32$2 = i64toi32_i32$0 ? i64toi32_i32$5 : i64toi32_i32$4;
    i64toi32_i32$5 = Math_clz32(i64toi32_i32$2);
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$5 | 0) == (32 | 0)) {
     $137_1 = Math_clz32(i64toi32_i32$1) + 32 | 0
    } else {
     $137_1 = i64toi32_i32$5
    }
    $160$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $163$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $160$hi;
    i64toi32_i32$1 = $137_1;
    i64toi32_i32$2 = $163$hi;
    i64toi32_i32$5 = $6_1 << 6 | 0;
    i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
    i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
    }
    $6_1 = i64toi32_i32$4;
    i64toi32_i32$3 = $152$hi;
    i64toi32_i32$1 = $153$hi;
    $685($151_1 | 0, $152_1 | 0, i64toi32_i32$3 | 0, $153_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$4 + -15 | 0 | 0);
    $6_1 = 16 - i64toi32_i32$4 | 0;
    i64toi32_i32$0 = $5_1 + 104 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $10_1 = i64toi32_i32$1;
    $10$hi = i64toi32_i32$3;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 96 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 100 | 0) >> 2] | 0;
    $9_1 = i64toi32_i32$3;
    $9$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $7_1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$5 = i64toi32_i32$2 ? $1_1 : $3_1;
   i64toi32_i32$0 = i64toi32_i32$2 ? i64toi32_i32$1 : i64toi32_i32$3;
   $3_1 = i64toi32_i32$5;
   $3$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$5 = 65535;
   i64toi32_i32$1 = -1;
   i64toi32_i32$5 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
   $4_1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
   $4$hi = i64toi32_i32$5;
   label$9 : {
    if ($8_1) {
     break label$9
    }
    $183_1 = $5_1 + 80 | 0;
    i64toi32_i32$5 = $3$hi;
    $184_1 = $3_1;
    $184$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    $185_1 = $4_1;
    $185$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $4$hi;
    $7_1 = !($4_1 | i64toi32_i32$5 | 0);
    i64toi32_i32$3 = $7_1;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$1 = i64toi32_i32$3 ? $3_1 : $4_1;
    i64toi32_i32$0 = i64toi32_i32$3 ? i64toi32_i32$5 : i64toi32_i32$2;
    i64toi32_i32$5 = Math_clz32(i64toi32_i32$0);
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$5 | 0) == (32 | 0)) {
     $138_1 = Math_clz32(i64toi32_i32$1) + 32 | 0
    } else {
     $138_1 = i64toi32_i32$5
    }
    $192$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $195$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $192$hi;
    i64toi32_i32$1 = $138_1;
    i64toi32_i32$0 = $195$hi;
    i64toi32_i32$5 = $7_1 << 6 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $7_1 = i64toi32_i32$2;
    i64toi32_i32$4 = $184$hi;
    i64toi32_i32$1 = $185$hi;
    $685($183_1 | 0, $184_1 | 0, i64toi32_i32$4 | 0, $185_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$2 + -15 | 0 | 0);
    $8_1 = 16 - i64toi32_i32$2 | 0;
    i64toi32_i32$3 = $5_1 + 88 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$4;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 80 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 84 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$4;
    $3$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$3 = $4_1;
   i64toi32_i32$4 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
    $139_1 = 0;
   } else {
    i64toi32_i32$4 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
    $139_1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
   }
   $208_1 = $139_1;
   $208$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 61;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = 0;
    $140_1 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$3 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
    $140_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
   }
   $210$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $208$hi;
   i64toi32_i32$4 = $208_1;
   i64toi32_i32$1 = $210$hi;
   i64toi32_i32$5 = $140_1;
   i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
   i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
   i64toi32_i32$4 = 524288;
   i64toi32_i32$5 = 0;
   i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
   $4_1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   $4$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $10$hi;
   i64toi32_i32$1 = $10_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
    $141_1 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$0 | 0) | 0;
    $141_1 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
   }
   $214_1 = $141_1;
   $214$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $9$hi;
   i64toi32_i32$4 = $9_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 61;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $142_1 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
    $142_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
   }
   $216$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $214$hi;
   i64toi32_i32$3 = $214_1;
   i64toi32_i32$4 = $216$hi;
   i64toi32_i32$5 = $142_1;
   i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
   $1_1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   $1$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
    $143_1 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$0 | 0) | 0;
    $143_1 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
   }
   $3_1 = $143_1;
   $3$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $11$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $11$hi;
   i64toi32_i32$4 = $11_1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$5 = $2_1;
   i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $10_1 = i64toi32_i32$4 ^ i64toi32_i32$5 | 0;
   $10$hi = i64toi32_i32$1;
   label$10 : {
    $7_1 = $6_1 - $8_1 | 0;
    if (!$7_1) {
     break label$10
    }
    label$11 : {
     if ($7_1 >>> 0 <= 127 >>> 0) {
      break label$11
     }
     i64toi32_i32$1 = 0;
     $4_1 = 0;
     $4$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     $3_1 = 1;
     $3$hi = i64toi32_i32$1;
     break label$10;
    }
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$4 = $4$hi;
    $685($5_1 + 64 | 0 | 0, $3_1 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$4 | 0, 128 - $7_1 | 0 | 0);
    i64toi32_i32$4 = i64toi32_i32$1;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$4 = i64toi32_i32$1;
    i64toi32_i32$1 = $4$hi;
    $690($5_1 + 48 | 0 | 0, $3_1 | 0, i64toi32_i32$4 | 0, $4_1 | 0, i64toi32_i32$1 | 0, $7_1 | 0);
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 48 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 52 | 0) >> 2] | 0;
    $242_1 = i64toi32_i32$1;
    $242$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 64 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 68 | 0) >> 2] | 0;
    $244_1 = i64toi32_i32$4;
    $244$hi = i64toi32_i32$1;
    i64toi32_i32$3 = (i64toi32_i32$3 + 64 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $248_1 = i64toi32_i32$1;
    $248$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $244$hi;
    i64toi32_i32$3 = $244_1;
    i64toi32_i32$1 = $248$hi;
    i64toi32_i32$5 = $248_1;
    i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 0;
    $250_1 = (i64toi32_i32$4 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | 0;
    i64toi32_i32$4 = 0;
    $251$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $242$hi;
    i64toi32_i32$5 = $242_1;
    i64toi32_i32$1 = $251$hi;
    i64toi32_i32$3 = $250_1;
    i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    $3_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $3$hi = i64toi32_i32$1;
    i64toi32_i32$4 = ($5_1 + 48 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$5;
   }
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$4 = $1_1;
   i64toi32_i32$1 = 524288;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
   $12_1 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
   $12$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $9$hi;
   i64toi32_i32$5 = $9_1;
   i64toi32_i32$4 = 0;
   i64toi32_i32$3 = 3;
   i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
    $144_1 = 0;
   } else {
    i64toi32_i32$4 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
    $144_1 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
   }
   $2_1 = $144_1;
   $2$hi = i64toi32_i32$4;
   label$12 : {
    label$13 : {
     i64toi32_i32$4 = $10$hi;
     i64toi32_i32$1 = $10_1;
     i64toi32_i32$5 = -1;
     i64toi32_i32$3 = -1;
     if ((i64toi32_i32$4 | 0) > (i64toi32_i32$5 | 0)) {
      $145_1 = 1
     } else {
      if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$5 | 0)) {
       if (i64toi32_i32$1 >>> 0 <= i64toi32_i32$3 >>> 0) {
        $146_1 = 0
       } else {
        $146_1 = 1
       }
       $147_1 = $146_1;
      } else {
       $147_1 = 0
      }
      $145_1 = $147_1;
     }
     if ($145_1) {
      break label$13
     }
     label$14 : {
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$3 = $2_1;
      i64toi32_i32$4 = $3$hi;
      i64toi32_i32$5 = $3_1;
      i64toi32_i32$0 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
      i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0;
      i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
      i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
      $1_1 = i64toi32_i32$0;
      $1$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $12$hi;
      i64toi32_i32$2 = $4$hi;
      i64toi32_i32$2 = $12$hi;
      i64toi32_i32$1 = $12_1;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$5 = $4_1;
      i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
      i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0;
      i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
      $269$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$0 = $3$hi;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$5 = $3_1;
      $272_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$2 = 0;
      $273$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $269$hi;
      i64toi32_i32$5 = i64toi32_i32$4;
      i64toi32_i32$0 = $273$hi;
      i64toi32_i32$1 = $272_1;
      i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$1 | 0;
      i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0;
      i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
      i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
      $4_1 = i64toi32_i32$3;
      $4$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $1$hi;
      i64toi32_i32$2 = $1_1;
      i64toi32_i32$5 = $4$hi;
      i64toi32_i32$1 = i64toi32_i32$3;
      i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
      if (!!(i64toi32_i32$2 | i64toi32_i32$1 | 0 | i64toi32_i32$5 | 0)) {
       break label$14
      }
      i64toi32_i32$5 = 0;
      $3_1 = 0;
      $3$hi = i64toi32_i32$5;
      i64toi32_i32$5 = 0;
      $4_1 = 0;
      $4$hi = i64toi32_i32$5;
      break label$1;
     }
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$4 = $4_1;
     i64toi32_i32$2 = 524287;
     i64toi32_i32$1 = -1;
     if (i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
      break label$12
     }
     $282_1 = $5_1 + 32 | 0;
     i64toi32_i32$4 = $1$hi;
     $283_1 = $1_1;
     $283$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $4$hi;
     $284_1 = $4_1;
     $284$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$4 = $4$hi;
     $7_1 = !($4_1 | i64toi32_i32$4 | 0);
     i64toi32_i32$0 = $7_1;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$2 = i64toi32_i32$0 ? $1_1 : $4_1;
     i64toi32_i32$1 = i64toi32_i32$0 ? i64toi32_i32$4 : i64toi32_i32$5;
     i64toi32_i32$4 = Math_clz32(i64toi32_i32$1);
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$4 | 0) == (32 | 0)) {
      $148_1 = Math_clz32(i64toi32_i32$2) + 32 | 0
     } else {
      $148_1 = i64toi32_i32$4
     }
     $291$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     $294$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $291$hi;
     i64toi32_i32$2 = $148_1;
     i64toi32_i32$1 = $294$hi;
     i64toi32_i32$4 = $7_1 << 6 | 0;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $7_1 = i64toi32_i32$5 + -12 | 0;
     i64toi32_i32$3 = $283$hi;
     i64toi32_i32$2 = $284$hi;
     $685($282_1 | 0, $283_1 | 0, i64toi32_i32$3 | 0, $284_1 | 0, i64toi32_i32$2 | 0, $7_1 | 0);
     $6_1 = $6_1 - $7_1 | 0;
     i64toi32_i32$0 = $5_1 + 40 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $4_1 = i64toi32_i32$2;
     $4$hi = i64toi32_i32$3;
     i64toi32_i32$0 = $5_1;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
     $1_1 = i64toi32_i32$3;
     $1$hi = i64toi32_i32$2;
     break label$12;
    }
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$2 = $12$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$3 = $12$hi;
    i64toi32_i32$4 = $12_1;
    i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $309_1 = i64toi32_i32$1;
    $309$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $2$hi;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$2 = $3_1;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$4 = $2_1;
    i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
    i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $1_1 = i64toi32_i32$3;
    $1$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$5 = i64toi32_i32$3;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$4 = $3_1;
    $315_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
    i64toi32_i32$5 = 0;
    $316$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $309$hi;
    i64toi32_i32$4 = $309_1;
    i64toi32_i32$1 = $316$hi;
    i64toi32_i32$2 = $315_1;
    i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
    i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
    }
    $4_1 = i64toi32_i32$0;
    $4$hi = i64toi32_i32$3;
    i64toi32_i32$5 = i64toi32_i32$0;
    i64toi32_i32$4 = 1048576;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
    if (!(i64toi32_i32$5 & i64toi32_i32$2 | 0 | i64toi32_i32$4 | 0)) {
     break label$12
    }
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $149_1 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
     $149_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
    }
    $322_1 = $149_1;
    $322$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$4 = $4_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = 63;
    i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
     $150_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$1 | 0) | 0;
     $150_1 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
    }
    $324$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $322$hi;
    i64toi32_i32$5 = $322_1;
    i64toi32_i32$4 = $324$hi;
    i64toi32_i32$2 = $150_1;
    i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
    $325_1 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    $325$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$5 = i64toi32_i32$4 & i64toi32_i32$5 | 0;
    $327_1 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
    $327$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $325$hi;
    i64toi32_i32$4 = $325_1;
    i64toi32_i32$3 = $327$hi;
    i64toi32_i32$2 = $327_1;
    i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $1_1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
    $1$hi = i64toi32_i32$3;
    $6_1 = $6_1 + 1 | 0;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$5 = $4_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = 0;
     $154_1 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
    } else {
     i64toi32_i32$4 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
     $154_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
    }
    $4_1 = $154_1;
    $4$hi = i64toi32_i32$4;
   }
   i64toi32_i32$4 = $11$hi;
   i64toi32_i32$3 = $11_1;
   i64toi32_i32$5 = -2147483648;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = i64toi32_i32$4 & i64toi32_i32$5 | 0;
   $2_1 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
   $2$hi = i64toi32_i32$5;
   label$15 : {
    if (($6_1 | 0) < (32767 | 0)) {
     break label$15
    }
    i64toi32_i32$5 = $2$hi;
    i64toi32_i32$4 = $2_1;
    i64toi32_i32$3 = 2147418112;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $4_1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
    $4$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $3_1 = 0;
    $3$hi = i64toi32_i32$3;
    break label$1;
   }
   $7_1 = 0;
   label$16 : {
    label$17 : {
     if (($6_1 | 0) <= (0 | 0)) {
      break label$17
     }
     $7_1 = $6_1;
     break label$16;
    }
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$4 = $4$hi;
    $685($5_1 + 16 | 0 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$4 | 0, $6_1 + 127 | 0 | 0);
    i64toi32_i32$4 = i64toi32_i32$3;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$4 = i64toi32_i32$3;
    i64toi32_i32$3 = $4$hi;
    $690($5_1 | 0, $1_1 | 0, i64toi32_i32$4 | 0, $4_1 | 0, i64toi32_i32$3 | 0, 1 - $6_1 | 0 | 0);
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $354_1 = i64toi32_i32$3;
    $354$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 16 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 20 | 0) >> 2] | 0;
    $356_1 = i64toi32_i32$4;
    $356$hi = i64toi32_i32$3;
    i64toi32_i32$5 = (i64toi32_i32$5 + 16 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $360_1 = i64toi32_i32$3;
    $360$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $356$hi;
    i64toi32_i32$5 = $356_1;
    i64toi32_i32$3 = $360$hi;
    i64toi32_i32$2 = $360_1;
    i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 0;
    $362_1 = (i64toi32_i32$4 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$5 | 0) | 0;
    i64toi32_i32$4 = 0;
    $363$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $354$hi;
    i64toi32_i32$2 = $354_1;
    i64toi32_i32$3 = $363$hi;
    i64toi32_i32$5 = $362_1;
    i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
    $1_1 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
    $1$hi = i64toi32_i32$3;
    i64toi32_i32$4 = $5_1 + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$3;
    $4$hi = i64toi32_i32$2;
   }
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$4 = $1_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = 0;
    $155_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
    $155_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
   }
   $369_1 = $155_1;
   $369$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$4 = 0;
   i64toi32_i32$5 = 61;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
    $156_1 = 0;
   } else {
    i64toi32_i32$4 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$1 | 0) | 0;
    $156_1 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
   }
   $371$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $369$hi;
   i64toi32_i32$3 = $369_1;
   i64toi32_i32$2 = $371$hi;
   i64toi32_i32$5 = $156_1;
   i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
   $3_1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   $3$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$4 = $4_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = 0;
    $157_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
    $157_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
   }
   i64toi32_i32$2 = $157_1;
   i64toi32_i32$4 = 65535;
   i64toi32_i32$5 = -1;
   i64toi32_i32$4 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
   $375$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$4 = $375$hi;
   i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$5 = $2_1;
   i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
   $377_1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   $377$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$4 = $7_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 48;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
    $158_1 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$1 | 0) | 0;
    $158_1 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
   }
   $380$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $377$hi;
   i64toi32_i32$2 = $377_1;
   i64toi32_i32$4 = $380$hi;
   i64toi32_i32$5 = $158_1;
   i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
   $4_1 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
   $4$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $1$hi;
   $6_1 = $1_1 & 7 | 0;
   label$18 : {
    label$19 : {
     label$20 : {
      switch ($686() | 0 | 0) {
      case 0:
       i64toi32_i32$4 = $4$hi;
       $386_1 = $4_1;
       $386$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $3$hi;
       i64toi32_i32$4 = 0;
       $390$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $3$hi;
       i64toi32_i32$3 = $3_1;
       i64toi32_i32$2 = $390$hi;
       i64toi32_i32$5 = $6_1 >>> 0 > 4 >>> 0;
       i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
       i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $1_1 = i64toi32_i32$1;
       $1$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $3$hi;
       i64toi32_i32$0 = $1$hi;
       i64toi32_i32$4 = i64toi32_i32$1;
       i64toi32_i32$3 = $3$hi;
       i64toi32_i32$5 = $3_1;
       $394_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
       i64toi32_i32$4 = 0;
       $395$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $386$hi;
       i64toi32_i32$5 = $386_1;
       i64toi32_i32$0 = $395$hi;
       i64toi32_i32$3 = $394_1;
       i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
       i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $4_1 = i64toi32_i32$2;
       $4$hi = i64toi32_i32$1;
       label$23 : {
        if (($6_1 | 0) == (4 | 0)) {
         break label$23
        }
        i64toi32_i32$1 = $1$hi;
        $3_1 = $1_1;
        $3$hi = i64toi32_i32$1;
        break label$19;
       }
       i64toi32_i32$1 = $4$hi;
       $400_1 = $4_1;
       $400$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $1$hi;
       i64toi32_i32$4 = $1_1;
       i64toi32_i32$5 = 0;
       i64toi32_i32$3 = 1;
       i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
       $2_1 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
       $2$hi = i64toi32_i32$5;
       i64toi32_i32$5 = i64toi32_i32$1;
       i64toi32_i32$5 = $2$hi;
       i64toi32_i32$1 = $2_1;
       i64toi32_i32$4 = $1$hi;
       i64toi32_i32$3 = $1_1;
       i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $3_1 = i64toi32_i32$0;
       $3$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $2$hi;
       i64toi32_i32$2 = $3$hi;
       i64toi32_i32$5 = i64toi32_i32$0;
       i64toi32_i32$1 = $2$hi;
       i64toi32_i32$3 = $2_1;
       $408_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
       i64toi32_i32$5 = 0;
       $409$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $400$hi;
       i64toi32_i32$3 = $400_1;
       i64toi32_i32$2 = $409$hi;
       i64toi32_i32$1 = $408_1;
       i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
       i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $4_1 = i64toi32_i32$4;
       $4$hi = i64toi32_i32$0;
       break label$18;
      case 1:
       i64toi32_i32$0 = $4$hi;
       $411_1 = $4_1;
       $411$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $3$hi;
       i64toi32_i32$0 = $2$hi;
       i64toi32_i32$5 = $2_1;
       i64toi32_i32$3 = 0;
       i64toi32_i32$1 = 0;
       $417_1 = ((i64toi32_i32$5 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | 0) & ($6_1 | 0) != (0 | 0) | 0;
       i64toi32_i32$5 = 0;
       $418$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $3$hi;
       i64toi32_i32$1 = $3_1;
       i64toi32_i32$0 = $418$hi;
       i64toi32_i32$3 = $417_1;
       i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $1_1 = i64toi32_i32$2;
       $1$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $3$hi;
       i64toi32_i32$4 = $1$hi;
       i64toi32_i32$5 = i64toi32_i32$2;
       i64toi32_i32$1 = $3$hi;
       i64toi32_i32$3 = $3_1;
       $422_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
       i64toi32_i32$5 = 0;
       $423$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $411$hi;
       i64toi32_i32$3 = $411_1;
       i64toi32_i32$4 = $423$hi;
       i64toi32_i32$1 = $422_1;
       i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
       i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $4_1 = i64toi32_i32$0;
       $4$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $1$hi;
       $3_1 = $1_1;
       $3$hi = i64toi32_i32$2;
       break label$19;
      case 2:
       break label$20;
      default:
       break label$19;
      };
     }
     i64toi32_i32$2 = $4$hi;
     $426_1 = $4_1;
     $426$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $2$hi;
     $432_1 = !($2_1 | i64toi32_i32$2 | 0) & ($6_1 | 0) != (0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $433$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$5 = $3_1;
     i64toi32_i32$3 = $433$hi;
     i64toi32_i32$1 = $432_1;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $1_1 = i64toi32_i32$4;
     $1$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$2 = i64toi32_i32$4;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$1 = $3_1;
     $437_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $438$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $426$hi;
     i64toi32_i32$1 = $426_1;
     i64toi32_i32$0 = $438$hi;
     i64toi32_i32$5 = $437_1;
     i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $4_1 = i64toi32_i32$3;
     $4$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $1$hi;
     $3_1 = $1_1;
     $3$hi = i64toi32_i32$4;
    }
    if (!$6_1) {
     break label$1
    }
   }
   $687() | 0;
  }
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $3_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$4;
  i64toi32_i32$4 = $4$hi;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $4_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$4;
  global$0 = $5_1 + 112 | 0;
 }
 
 function $689($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $4_1 = 0, i64toi32_i32$4 = 0, $2_1 = 0, $5_1 = 0, $5$hi = 0, $6_1 = 0, $6$hi = 0, $3_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $30_1 = 0, $38_1 = 0, $38$hi = 0, $42$hi = 0, $48_1 = 0, $49_1 = 0, $49$hi = 0, $53$hi = 0, $54_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    $3_1 = (wasm2js_scratch_store_f32($1_1), wasm2js_scratch_load_i32(2));
    $4_1 = $3_1 & 2147483647 | 0;
    if (($4_1 + -8388608 | 0) >>> 0 > 2130706431 >>> 0) {
     break label$2
    }
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 25;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $24_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $24_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    i64toi32_i32$0 = $24_1;
    i64toi32_i32$2 = 1065353216;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $5_1 = i64toi32_i32$4;
    $5$hi = i64toi32_i32$5;
    i64toi32_i32$5 = 0;
    $6_1 = 0;
    $6$hi = i64toi32_i32$5;
    break label$1;
   }
   label$3 : {
    if ($4_1 >>> 0 < 2139095040 >>> 0) {
     break label$3
    }
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 25;
    i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
     $25_1 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
     $25_1 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
    }
    i64toi32_i32$5 = $25_1;
    i64toi32_i32$1 = 2147418112;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $5_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $5$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $6_1 = 0;
    $6$hi = i64toi32_i32$1;
    break label$1;
   }
   label$4 : {
    if ($4_1) {
     break label$4
    }
    i64toi32_i32$1 = 0;
    $6_1 = 0;
    $6$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $5_1 = 0;
    $5$hi = i64toi32_i32$1;
    break label$1;
   }
   i64toi32_i32$1 = 0;
   $30_1 = $4_1;
   $4_1 = Math_clz32($4_1);
   i64toi32_i32$5 = 0;
   $685($2_1 | 0, $30_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, $4_1 + 81 | 0 | 0);
   i64toi32_i32$0 = $2_1 + 8 | 0;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = i64toi32_i32$1 ^ i64toi32_i32$5 | 0;
   $38_1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
   $38$hi = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = 16265 - $4_1 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 48;
   i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
    $26_1 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
    $26_1 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
   }
   $42$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $38$hi;
   i64toi32_i32$5 = $38_1;
   i64toi32_i32$1 = $42$hi;
   i64toi32_i32$3 = $26_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $5_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $5$hi = i64toi32_i32$1;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   $6_1 = i64toi32_i32$1;
   $6$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $6$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $6_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$5;
  $48_1 = i64toi32_i32$1;
  i64toi32_i32$5 = $5$hi;
  $49_1 = $5_1;
  $49$hi = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  i64toi32_i32$0 = $3_1 & -2147483648 | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
   $27_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
   $27_1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
  }
  $53$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $49$hi;
  i64toi32_i32$5 = $49_1;
  i64toi32_i32$0 = $53$hi;
  i64toi32_i32$3 = $27_1;
  i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
  $54_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
  i64toi32_i32$5 = $48_1;
  HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $54_1;
  HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $690($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $4$hi = 0, $18_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $11$hi = 0, $18$hi = 0, $19_1 = 0, $19$hi = 0, $4_1 = 0, $24$hi = 0;
  label$1 : {
   label$2 : {
    if (!($3_1 & 64 | 0)) {
     break label$2
    }
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = 0;
    $11$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$3 = $3_1 + -64 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $18_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $18_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $1_1 = $18_1;
    $1$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $2_1 = 0;
    $2$hi = i64toi32_i32$1;
    break label$1;
   }
   if (!$3_1) {
    break label$1
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = 0;
   $18$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$2 = $18$hi;
   i64toi32_i32$3 = 64 - $3_1 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $20_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $20_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $19_1 = $20_1;
   $19$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = 0;
   $4_1 = $3_1;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $21_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    $21_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
   }
   $24$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $19$hi;
   i64toi32_i32$2 = $19_1;
   i64toi32_i32$1 = $24$hi;
   i64toi32_i32$3 = $21_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $1_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $1$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$3 = $4_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $22_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $22_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   $2_1 = $22_1;
   $2$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $2$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $2_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function $691($0_1, $0$hi, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $3_1 = 0, $5$hi = 0, $2_1 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $12_1 = 0, $12$hi = 0, $14$hi = 0, $20_1 = 0, $24_1 = 0, $34_1 = 0, $34$hi = 0, $42_1 = 0, $44_1 = 0, $81_1 = 0, $81$hi = 0, $83_1 = 0, $83$hi = 0, $87_1 = 0, $87$hi = 0, $89_1 = 0, $90$hi = 0, $93_1 = 0, $97_1 = 0, $105_1 = 0, $105$hi = 0, $114_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $5_1 = $1_1 & i64toi32_i32$3 | 0;
    $5$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$2 = -1065418752;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $12_1 = i64toi32_i32$4;
    $12$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $5$hi;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = -1082064896;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $14$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $12$hi;
    i64toi32_i32$5 = $12_1;
    i64toi32_i32$1 = $14$hi;
    i64toi32_i32$3 = i64toi32_i32$2;
    if (i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$1 = 25;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = 0;
     $37_1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     $37_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
    }
    $3_1 = $37_1;
    label$3 : {
     i64toi32_i32$4 = $0$hi;
     $20_1 = !($0_1 | i64toi32_i32$4 | 0);
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$5 = $1_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$1 = 33554431;
     i64toi32_i32$3 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
     $5_1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
     $5$hi = i64toi32_i32$3;
     i64toi32_i32$4 = $5_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$1 = 16777216;
     $24_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$1 = $5_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 16777216;
     if ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) | 0 ? $20_1 : $24_1) {
      break label$3
     }
     $3_1 = $3_1 + 1073741825 | 0;
     break label$1;
    }
    $3_1 = $3_1 + 1073741824 | 0;
    i64toi32_i32$1 = $0$hi;
    i64toi32_i32$1 = $5$hi;
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$3 = 16777216;
    i64toi32_i32$4 = i64toi32_i32$1 ^ i64toi32_i32$4 | 0;
    $34_1 = i64toi32_i32$5 ^ i64toi32_i32$3 | 0;
    $34$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$5 = $34$hi;
    i64toi32_i32$3 = $34_1;
    i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$4 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$1 | 0) | 0) {
     break label$1
    }
    $3_1 = ($3_1 & 1 | 0) + $3_1 | 0;
    break label$1;
   }
   label$4 : {
    i64toi32_i32$4 = $0$hi;
    $42_1 = !($0_1 | i64toi32_i32$4 | 0);
    i64toi32_i32$4 = $5$hi;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$5 = 2147418112;
    i64toi32_i32$1 = 0;
    $44_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
    i64toi32_i32$3 = i64toi32_i32$4;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$4 = 2147418112;
    i64toi32_i32$5 = 0;
    if ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) | 0 ? $42_1 : $44_1) {
     break label$4
    }
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$5 = $1_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = 25;
    i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $38_1 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
     $38_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
    }
    $3_1 = $38_1 & 4194303 | 0 | 2143289344 | 0;
    break label$1;
   }
   $3_1 = 2139095040;
   i64toi32_i32$3 = $5$hi;
   i64toi32_i32$1 = $5_1;
   i64toi32_i32$5 = 1082064895;
   i64toi32_i32$4 = -1;
   if (i64toi32_i32$3 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
    break label$1
   }
   $3_1 = 0;
   i64toi32_i32$1 = $5$hi;
   i64toi32_i32$4 = $5_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 48;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = 0;
    $39_1 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
    $39_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
   }
   $4_1 = $39_1;
   if ($4_1 >>> 0 < 16145 >>> 0) {
    break label$1
   }
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$4 = 65535;
   i64toi32_i32$5 = -1;
   i64toi32_i32$4 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
   i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
   i64toi32_i32$1 = 65536;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
   $5_1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   $5$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $0$hi;
   i64toi32_i32$3 = $5$hi;
   $685($2_1 + 16 | 0 | 0, $0_1 | 0, i64toi32_i32$1 | 0, $5_1 | 0, i64toi32_i32$3 | 0, $4_1 + -16129 | 0 | 0);
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$3 = $5$hi;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$1 = $5$hi;
   $690($2_1 | 0, $0_1 | 0, i64toi32_i32$3 | 0, $5_1 | 0, i64toi32_i32$1 | 0, 16257 - $4_1 | 0 | 0);
   i64toi32_i32$4 = $2_1 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
   $5_1 = i64toi32_i32$1;
   $5$hi = i64toi32_i32$3;
   i64toi32_i32$4 = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 25;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $40_1 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
    $40_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
   }
   $3_1 = $40_1;
   label$5 : {
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $81_1 = i64toi32_i32$1;
    $81$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 16 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 20 | 0) >> 2] | 0;
    $83_1 = i64toi32_i32$4;
    $83$hi = i64toi32_i32$1;
    i64toi32_i32$3 = (i64toi32_i32$3 + 16 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $87_1 = i64toi32_i32$1;
    $87$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $83$hi;
    i64toi32_i32$3 = $83_1;
    i64toi32_i32$1 = $87$hi;
    i64toi32_i32$5 = $87_1;
    i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 0;
    $89_1 = (i64toi32_i32$4 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | 0;
    i64toi32_i32$4 = 0;
    $90$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $81$hi;
    i64toi32_i32$5 = $81_1;
    i64toi32_i32$1 = $90$hi;
    i64toi32_i32$3 = $89_1;
    i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    $0_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $0$hi = i64toi32_i32$1;
    $93_1 = !($0_1 | i64toi32_i32$1 | 0);
    i64toi32_i32$1 = $5$hi;
    i64toi32_i32$4 = $5_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 33554431;
    i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
    $5_1 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
    $5$hi = i64toi32_i32$5;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$3 = 16777216;
    $97_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
    i64toi32_i32$1 = i64toi32_i32$5;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = 16777216;
    if ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) | 0 ? $93_1 : $97_1) {
     break label$5
    }
    $3_1 = $3_1 + 1 | 0;
    break label$1;
   }
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$3 = $5$hi;
   i64toi32_i32$4 = $5_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 16777216;
   i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $105_1 = i64toi32_i32$4 ^ i64toi32_i32$5 | 0;
   $105$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $0$hi;
   i64toi32_i32$3 = $0_1;
   i64toi32_i32$4 = $105$hi;
   i64toi32_i32$5 = $105_1;
   i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
   i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 0;
   if ((i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$4 | 0) != (i64toi32_i32$3 | 0) | 0) {
    break label$1
   }
   $3_1 = ($3_1 & 1 | 0) + $3_1 | 0;
  }
  global$0 = $2_1 + 32 | 0;
  $114_1 = $3_1;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$5 = $1_1;
  i64toi32_i32$4 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$4 = 0;
   $41_1 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
  } else {
   i64toi32_i32$4 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
   $41_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
  }
  return Math_fround((wasm2js_scratch_store_i32(2, $114_1 | ($41_1 & -2147483648 | 0) | 0), wasm2js_scratch_load_f32()));
 }
 
 function $692($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  var i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $5_1 = 0, $5$hi = 0, $2_1 = 0, $4_1 = 0, $4$hi = 0, $6_1 = 0, $6$hi = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $3_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $33$hi = 0, $37_1 = 0, $50_1 = 0, $50$hi = 0, $54$hi = 0, $63_1 = 0, $63$hi = 0, $64_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    wasm2js_scratch_store_f64(+$1_1);
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    $4_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $5_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $5$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$2 = -1048576;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    i64toi32_i32$1 = i64toi32_i32$4;
    i64toi32_i32$0 = 2145386495;
    i64toi32_i32$3 = -1;
    if (i64toi32_i32$5 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$4 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$1 = $5$hi;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = 60;
    i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
     $26_1 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$2 | 0) | 0;
     $26_1 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
    }
    $6_1 = $26_1;
    $6$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $5$hi;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = 4;
    i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $27_1 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
     $27_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
    }
    i64toi32_i32$5 = $27_1;
    i64toi32_i32$1 = 1006632960;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $5_1 = i64toi32_i32$2;
    $5$hi = i64toi32_i32$4;
    break label$1;
   }
   label$3 : {
    i64toi32_i32$4 = $5$hi;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$5 = 2146435072;
    i64toi32_i32$0 = 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0) {
     break label$3
    }
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 60;
    i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
     $28_1 = 0;
    } else {
     i64toi32_i32$4 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$1 | 0) | 0;
     $28_1 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
    }
    $6_1 = $28_1;
    $6$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$3 = $4_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = 4;
    i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $29_1 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
     $29_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
    }
    i64toi32_i32$4 = $29_1;
    i64toi32_i32$3 = 2147418112;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
    $5_1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    $5$hi = i64toi32_i32$3;
    break label$1;
   }
   label$4 : {
    i64toi32_i32$3 = $5$hi;
    if (!!($5_1 | i64toi32_i32$3 | 0)) {
     break label$4
    }
    i64toi32_i32$3 = 0;
    $6_1 = 0;
    $6$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $5_1 = 0;
    $5$hi = i64toi32_i32$3;
    break label$1;
   }
   $32_1 = $2_1;
   i64toi32_i32$3 = $5$hi;
   $33_1 = $5_1;
   $33$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $4$hi;
   $37_1 = Math_clz32($4_1) + 32 | 0;
   i64toi32_i32$3 = $5$hi;
   i64toi32_i32$0 = $5_1;
   i64toi32_i32$4 = 0;
   i64toi32_i32$5 = 32;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = 0;
    $30_1 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$4 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
    $30_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
   }
   i64toi32_i32$4 = $5$hi;
   i64toi32_i32$3 = $5_1;
   i64toi32_i32$0 = 1;
   i64toi32_i32$5 = 0;
   $3_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0 ? $37_1 : Math_clz32($30_1);
   i64toi32_i32$3 = $33$hi;
   i64toi32_i32$4 = 0;
   $685($32_1 | 0, $33_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$4 | 0, $3_1 + 49 | 0 | 0);
   i64toi32_i32$5 = $2_1 + 8 | 0;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   i64toi32_i32$5 = i64toi32_i32$4;
   i64toi32_i32$4 = 65536;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = i64toi32_i32$3 ^ i64toi32_i32$4 | 0;
   $50_1 = i64toi32_i32$5 ^ i64toi32_i32$0 | 0;
   $50$hi = i64toi32_i32$4;
   i64toi32_i32$4 = 0;
   i64toi32_i32$3 = 15372 - $3_1 | 0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$0 = 48;
   i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
    $31_1 = 0;
   } else {
    i64toi32_i32$5 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
    $31_1 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
   }
   $54$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $50$hi;
   i64toi32_i32$4 = $50_1;
   i64toi32_i32$3 = $54$hi;
   i64toi32_i32$0 = $31_1;
   i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $5_1 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
   $5$hi = i64toi32_i32$3;
   i64toi32_i32$5 = $2_1;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $6_1 = i64toi32_i32$3;
   $6$hi = i64toi32_i32$4;
  }
  i64toi32_i32$4 = $6$hi;
  i64toi32_i32$3 = $0_1;
  HEAP32[i64toi32_i32$3 >> 2] = $6_1;
  HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$4;
  i64toi32_i32$4 = $5$hi;
  i64toi32_i32$4 = $4$hi;
  i64toi32_i32$5 = $4_1;
  i64toi32_i32$3 = -2147483648;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
  $63_1 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
  $63$hi = i64toi32_i32$3;
  i64toi32_i32$3 = $5$hi;
  i64toi32_i32$4 = $5_1;
  i64toi32_i32$5 = $63$hi;
  i64toi32_i32$0 = $63_1;
  i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
  $64_1 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
  i64toi32_i32$4 = $0_1;
  HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = $64_1;
  HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$5;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $693($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $5_1 = 0, $14$hi = 0, $14_1 = 0, $12$hi = 0, $11$hi = 0, $10$hi = 0, $15$hi = 0, $12_1 = 0, $6_1 = 0, $15_1 = 0, $11_1 = 0, $10_1 = 0, $18$hi = 0, $8_1 = 0, $18_1 = 0, $13$hi = 0, $16$hi = 0, $17$hi = 0, $7_1 = 0, $13_1 = 0, $16_1 = 0, $17_1 = 0, $19$hi = 0, $22$hi = 0, $19_1 = 0, $9_1 = 0, $20$hi = 0, $21$hi = 0, $23$hi = 0, $24$hi = 0, $228_1 = 0, $229_1 = 0, $230_1 = 0, $231_1 = 0, $232_1 = 0, $233_1 = 0, $234_1 = 0, $235_1 = 0, $237_1 = 0, $238_1 = 0, $239_1 = 0, $240_1 = 0, $241_1 = 0, $242_1 = 0, $244_1 = 0, $246_1 = 0, $248_1 = 0, $249_1 = 0, $251_1 = 0, $252_1 = 0, $254_1 = 0, $256_1 = 0, $20_1 = 0, $257_1 = 0, $258_1 = 0, $21_1 = 0, $22_1 = 0, $259_1 = 0, $24_1 = 0, $260_1 = 0, $261_1 = 0, $262_1 = 0, $263_1 = 0, $265_1 = 0, $266_1 = 0, $267_1 = 0, $268_1 = 0, $270_1 = 0, $271_1 = 0, $272_1 = 0, $273_1 = 0, $274_1 = 0, $275_1 = 0, $276_1 = 0, $278_1 = 0, $29_1 = 0, $29$hi = 0, $31$hi = 0, $34_1 = 0, $34$hi = 0, $36$hi = 0, $39_1 = 0, $39$hi = 0, $43$hi = 0, $70_1 = 0, $74_1 = 0, $81_1 = 0, $85_1 = 0, $94_1 = 0, $94$hi = 0, $106_1 = 0, $106$hi = 0, $128_1 = 0, $129_1 = 0, $129$hi = 0, $130_1 = 0, $130$hi = 0, $137$hi = 0, $140$hi = 0, $150_1 = 0, $150$hi = 0, $155$hi = 0, $162_1 = 0, $163_1 = 0, $163$hi = 0, $164_1 = 0, $164$hi = 0, $171$hi = 0, $174$hi = 0, $186_1 = 0, $186$hi = 0, $191$hi = 0, $194_1 = 0, $194$hi = 0, $196$hi = 0, $207_1 = 0, $207$hi = 0, $215_1 = 0, $215$hi = 0, $222_1 = 0, $222$hi = 0, $227_1 = 0, $227$hi = 0, $236_1 = 0, $236$hi = 0, $243_1 = 0, $243$hi = 0, $245_1 = 0, $245$hi = 0, $247_1 = 0, $247$hi = 0, $250_1 = 0, $252$hi = 0, $253_1 = 0, $253$hi = 0, $255_1 = 0, $255$hi = 0, $264_1 = 0, $264$hi = 0, $269_1 = 0, $269$hi = 0, $277_1 = 0, $277$hi = 0, $280$hi = 0, $23_1 = 0, $296_1 = 0, $296$hi = 0, $300_1 = 0, $301_1 = 0, $301$hi = 0, $305_1 = 0, $305$hi = 0, $309_1 = 0, $310$hi = 0, $311_1 = 0, $311$hi = 0, $312_1 = 0, $312$hi = 0, $315_1 = 0, $316$hi = 0, $319_1 = 0, $320$hi = 0, $321$hi = 0, $325_1 = 0, $326$hi = 0, $327$hi = 0, $330_1 = 0, $330$hi = 0, $331_1 = 0, $331$hi = 0, $338_1 = 0, $338$hi = 0, $344_1 = 0, $344$hi = 0, $346$hi = 0, $347_1 = 0, $347$hi = 0, $348_1 = 0, $348$hi = 0, $349_1 = 0, $349$hi = 0, $351$hi = 0, $355_1 = 0, $356$hi = 0, $357_1 = 0, $357$hi = 0, $358_1 = 0, $358$hi = 0, $360_1 = 0, $360$hi = 0, $363_1 = 0, $364$hi = 0, $367_1 = 0, $368$hi = 0, $369$hi = 0, $372_1 = 0, $373$hi = 0, $375$hi = 0, $376_1 = 0, $376$hi = 0, $380_1 = 0, $381$hi = 0, $382_1 = 0, $382$hi = 0, $383_1 = 0, $383$hi = 0, $386_1 = 0, $387$hi = 0, $390_1 = 0, $391$hi = 0, $392$hi = 0, $396_1 = 0, $397$hi = 0, $407_1 = 0, $407$hi = 0, $409$hi = 0, $412_1 = 0, $412$hi = 0, $414$hi = 0, $418_1 = 0, $418$hi = 0, $420$hi = 0, $454_1 = 0, $454$hi = 0, $456_1 = 0, $456$hi = 0, $457_1 = 0, $457$hi = 0, $459_1 = 0, $459$hi = 0, $463_1 = 0, $463$hi = 0, $465_1 = 0, $466$hi = 0, $471_1 = 0, $471$hi = 0, $475_1 = 0, $475$hi = 0, $484$hi = 0, $486_1 = 0, $486$hi = 0, $492_1 = 0, $498_1 = 0, $498$hi = 0, $503_1 = 0, $504$hi = 0, $508_1 = 0, $508$hi = 0, $512_1 = 0, $512$hi = 0, $515_1 = 0, $515$hi = 0, $519_1 = 0, $520$hi = 0;
  $5_1 = global$0 - 96 | 0;
  global$0 = $5_1;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $228_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $228_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $29_1 = $228_1;
  $29$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   $229_1 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
   $229_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
  }
  $31$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $29$hi;
  i64toi32_i32$1 = $29_1;
  i64toi32_i32$0 = $31$hi;
  i64toi32_i32$3 = $229_1;
  i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
  $10_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
  $10$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 17;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $230_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $230_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $34_1 = $230_1;
  $34$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 47;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   $231_1 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
   $231_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
  }
  $36$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $34$hi;
  i64toi32_i32$1 = $34_1;
  i64toi32_i32$0 = $36$hi;
  i64toi32_i32$3 = $231_1;
  i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
  $11_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
  $11$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 49;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $232_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $232_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $39_1 = $232_1;
  $39$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
  $12_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $12$hi = i64toi32_i32$2;
  i64toi32_i32$1 = $12_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 15;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $233_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $233_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $43$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $39$hi;
  i64toi32_i32$2 = $39_1;
  i64toi32_i32$1 = $43$hi;
  i64toi32_i32$3 = $233_1;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  $13_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  $13$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$3 = $2_1;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$0 = -2147483648;
  i64toi32_i32$3 = 0;
  i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
  $14_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
  $14$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $15_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $15$hi = i64toi32_i32$1;
  i64toi32_i32$0 = $15_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $234_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $234_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $16_1 = $234_1;
  $16$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $12$hi;
  i64toi32_i32$1 = $12_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 17;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $235_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   $235_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
  }
  $17_1 = $235_1;
  $17$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $237_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $237_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $6_1 = $237_1 & 32767 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 48;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $238_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      $238_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
     }
     $7_1 = $238_1 & 32767 | 0;
     if (($7_1 + -1 | 0) >>> 0 > 32765 >>> 0) {
      break label$3
     }
     $8_1 = 0;
     if (($6_1 + -1 | 0) >>> 0 < 32766 >>> 0) {
      break label$2
     }
    }
    label$4 : {
     i64toi32_i32$2 = $1$hi;
     $70_1 = !($1_1 | i64toi32_i32$2 | 0);
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$0 = 2147483647;
     i64toi32_i32$3 = -1;
     i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
     $18_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
     $18$hi = i64toi32_i32$0;
     i64toi32_i32$2 = $18_1;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$3 = 0;
     $74_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$3 = $18_1;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0 ? $70_1 : $74_1) {
      break label$4
     }
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$2 = 32768;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     $14_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $14$hi = i64toi32_i32$2;
     break label$1;
    }
    label$5 : {
     i64toi32_i32$2 = $3$hi;
     $81_1 = !($3_1 | i64toi32_i32$2 | 0);
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$1 = 2147483647;
     i64toi32_i32$0 = -1;
     i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
     $2_1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
     $2$hi = i64toi32_i32$1;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$0 = 0;
     $85_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) | 0 ? $81_1 : $85_1) {
      break label$5
     }
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$2 = 32768;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $14_1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $14$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $3$hi;
     $1_1 = $3_1;
     $1$hi = i64toi32_i32$2;
     break label$1;
    }
    label$6 : {
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $18$hi;
     i64toi32_i32$0 = $18_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
     $94_1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
     $94$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$2 = $1_1;
     i64toi32_i32$0 = $94$hi;
     i64toi32_i32$1 = $94_1;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | 0) {
      break label$6
     }
     label$7 : {
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$1 = $3_1;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      if (!!(i64toi32_i32$1 | i64toi32_i32$2 | 0 | i64toi32_i32$0 | 0)) {
       break label$7
      }
      i64toi32_i32$0 = 2147450880;
      $14_1 = 0;
      $14$hi = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$0;
      break label$1;
     }
     i64toi32_i32$0 = $14$hi;
     i64toi32_i32$3 = $14_1;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
     $14_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     $14$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$1;
     break label$1;
    }
    label$8 : {
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
     $106_1 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
     $106$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$1 = $3_1;
     i64toi32_i32$0 = $106$hi;
     i64toi32_i32$2 = $106_1;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0) {
      break label$8
     }
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$2 = $1_1;
     i64toi32_i32$0 = $18$hi;
     i64toi32_i32$1 = $18_1;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     $2_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $2$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$0;
     label$9 : {
      i64toi32_i32$0 = $2$hi;
      if (!!($2_1 | i64toi32_i32$0 | 0)) {
       break label$9
      }
      i64toi32_i32$0 = 2147450880;
      $14_1 = 0;
      $14$hi = i64toi32_i32$0;
      break label$1;
     }
     i64toi32_i32$0 = $14$hi;
     i64toi32_i32$3 = $14_1;
     i64toi32_i32$2 = 2147418112;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $14_1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $14$hi = i64toi32_i32$2;
     break label$1;
    }
    label$10 : {
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $18$hi;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$1 = $18_1;
     i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break label$10
     }
     i64toi32_i32$2 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$2;
     break label$1;
    }
    label$11 : {
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$1 = $3_1;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | 0) {
      break label$11
     }
     i64toi32_i32$2 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$2;
     break label$1;
    }
    $8_1 = 0;
    label$12 : {
     i64toi32_i32$2 = $18$hi;
     i64toi32_i32$0 = $18_1;
     i64toi32_i32$3 = 65535;
     i64toi32_i32$1 = -1;
     if (i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
      break label$12
     }
     $128_1 = $5_1 + 80 | 0;
     i64toi32_i32$0 = $1$hi;
     $129_1 = $1_1;
     $129$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $15$hi;
     $130_1 = $15_1;
     $130$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $15$hi;
     $8_1 = !($15_1 | i64toi32_i32$0 | 0);
     i64toi32_i32$4 = $8_1;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$2 = $15$hi;
     i64toi32_i32$3 = i64toi32_i32$4 ? $1_1 : $15_1;
     i64toi32_i32$1 = i64toi32_i32$4 ? i64toi32_i32$0 : i64toi32_i32$2;
     i64toi32_i32$0 = Math_clz32(i64toi32_i32$1);
     i64toi32_i32$4 = 0;
     if ((i64toi32_i32$0 | 0) == (32 | 0)) {
      $239_1 = Math_clz32(i64toi32_i32$3) + 32 | 0
     } else {
      $239_1 = i64toi32_i32$0
     }
     $137$hi = i64toi32_i32$4;
     i64toi32_i32$4 = 0;
     $140$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $137$hi;
     i64toi32_i32$3 = $239_1;
     i64toi32_i32$1 = $140$hi;
     i64toi32_i32$0 = $8_1 << 6 | 0;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $8_1 = i64toi32_i32$2;
     i64toi32_i32$5 = $129$hi;
     i64toi32_i32$3 = $130$hi;
     $685($128_1 | 0, $129_1 | 0, i64toi32_i32$5 | 0, $130_1 | 0, i64toi32_i32$3 | 0, i64toi32_i32$2 + -15 | 0 | 0);
     $8_1 = 16 - i64toi32_i32$2 | 0;
     i64toi32_i32$4 = $5_1;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 80 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 84 | 0) >> 2] | 0;
     $1_1 = i64toi32_i32$3;
     $1$hi = i64toi32_i32$5;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $240_1 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
      $240_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
     }
     $150_1 = $240_1;
     $150$hi = i64toi32_i32$3;
     i64toi32_i32$5 = $5_1 + 88 | 0;
     i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $15_1 = i64toi32_i32$3;
     $15$hi = i64toi32_i32$4;
     i64toi32_i32$5 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
      $241_1 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
      $241_1 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
     }
     $155$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $150$hi;
     i64toi32_i32$4 = $150_1;
     i64toi32_i32$5 = $155$hi;
     i64toi32_i32$0 = $241_1;
     i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
     $10_1 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
     $10$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $15$hi;
     i64toi32_i32$3 = $15_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $242_1 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
      $242_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
     }
     $16_1 = $242_1;
     $16$hi = i64toi32_i32$4;
    }
    i64toi32_i32$4 = $2$hi;
    i64toi32_i32$5 = $2_1;
    i64toi32_i32$3 = 65535;
    i64toi32_i32$0 = -1;
    if (i64toi32_i32$4 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0) {
     break label$2
    }
    $162_1 = $5_1 + 64 | 0;
    i64toi32_i32$5 = $3$hi;
    $163_1 = $3_1;
    $163$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $12$hi;
    $164_1 = $12_1;
    $164$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $12$hi;
    $9_1 = !($12_1 | i64toi32_i32$5 | 0);
    i64toi32_i32$1 = $9_1;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$4 = $12$hi;
    i64toi32_i32$3 = i64toi32_i32$1 ? $3_1 : $12_1;
    i64toi32_i32$0 = i64toi32_i32$1 ? i64toi32_i32$5 : i64toi32_i32$4;
    i64toi32_i32$5 = Math_clz32(i64toi32_i32$0);
    i64toi32_i32$1 = 0;
    if ((i64toi32_i32$5 | 0) == (32 | 0)) {
     $244_1 = Math_clz32(i64toi32_i32$3) + 32 | 0
    } else {
     $244_1 = i64toi32_i32$5
    }
    $171$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $174$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $171$hi;
    i64toi32_i32$3 = $244_1;
    i64toi32_i32$0 = $174$hi;
    i64toi32_i32$5 = $9_1 << 6 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
    }
    $9_1 = i64toi32_i32$4;
    i64toi32_i32$2 = $163$hi;
    i64toi32_i32$3 = $164$hi;
    $685($162_1 | 0, $163_1 | 0, i64toi32_i32$2 | 0, $164_1 | 0, i64toi32_i32$3 | 0, i64toi32_i32$4 + -15 | 0 | 0);
    $8_1 = ($8_1 - i64toi32_i32$4 | 0) + 16 | 0;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$3;
    $3$hi = i64toi32_i32$2;
    i64toi32_i32$1 = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 49;
    i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $246_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     $246_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
    }
    $186_1 = $246_1;
    $186$hi = i64toi32_i32$3;
    i64toi32_i32$2 = $5_1 + 72 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$2 = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 15;
    i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
     $248_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
     $248_1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
    }
    $191$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $186$hi;
    i64toi32_i32$1 = $186_1;
    i64toi32_i32$2 = $191$hi;
    i64toi32_i32$5 = $248_1;
    i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
    $13_1 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
    $13$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$3 = $3_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$5 = 17;
    i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $249_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     $249_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
    }
    $194_1 = $249_1;
    $194$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 47;
    i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
     $251_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
     $251_1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
    }
    $196$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $194$hi;
    i64toi32_i32$1 = $194_1;
    i64toi32_i32$2 = $196$hi;
    i64toi32_i32$5 = $251_1;
    i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
    $11_1 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
    $11$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$5 = 17;
    i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $252_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     $252_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
    }
    $17_1 = $252_1;
    $17$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $11$hi;
   i64toi32_i32$2 = $11_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = -1;
   i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
   $2_1 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
   $2$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = -1;
   i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
   $4_1 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
   $19_1 = i64toi32_i32$1;
   $19$hi = i64toi32_i32$2;
   $207_1 = i64toi32_i32$1;
   $207$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 15;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
    $254_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$0 | 0) | 0;
    $254_1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
   }
   i64toi32_i32$2 = $254_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = -32768;
   i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
   $1_1 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
   $1$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $10$hi;
   i64toi32_i32$1 = $10_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = -1;
   i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
   $3_1 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
   $3$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$2 | 0, $3_1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
   $215_1 = i64toi32_i32$1;
   $215$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $207$hi;
   i64toi32_i32$3 = $207_1;
   i64toi32_i32$1 = $215$hi;
   i64toi32_i32$5 = $215_1;
   i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $10_1 = i64toi32_i32$0;
   $10$hi = i64toi32_i32$4;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 32;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
    $256_1 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
    $256_1 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
   }
   $12_1 = $256_1;
   $12$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$2 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $222_1 = i64toi32_i32$2;
   $222$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $12$hi;
   i64toi32_i32$4 = $12_1;
   i64toi32_i32$2 = $222$hi;
   i64toi32_i32$5 = $222_1;
   i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
   i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $11_1 = i64toi32_i32$1;
   $11$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $12$hi;
   i64toi32_i32$0 = $11$hi;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$4 = $12$hi;
   i64toi32_i32$5 = $12_1;
   i64toi32_i32$3 = 0;
   $227_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
   $227$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$3 | 0, $3_1 | 0, i64toi32_i32$0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $20_1 = i64toi32_i32$0;
   $20$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = $15$hi;
   i64toi32_i32$5 = $15_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = -1;
   i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
   $12_1 = i64toi32_i32$5 & i64toi32_i32$4 | 0;
   $12$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$5 = $12$hi;
   i64toi32_i32$5 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$0 | 0, $12_1 | 0, i64toi32_i32$5 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $236_1 = i64toi32_i32$5;
   $236$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $20$hi;
   i64toi32_i32$3 = $20_1;
   i64toi32_i32$5 = $236$hi;
   i64toi32_i32$4 = $236_1;
   i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
   i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
   }
   $18_1 = i64toi32_i32$2;
   $18$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $13$hi;
   i64toi32_i32$0 = $13_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$4 = -1;
   i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
   $15_1 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
   $15$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$3 = $15$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $243_1 = i64toi32_i32$0;
   $243$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $18$hi;
   i64toi32_i32$1 = i64toi32_i32$2;
   i64toi32_i32$0 = $243$hi;
   i64toi32_i32$4 = $243_1;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
   i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $13_1 = i64toi32_i32$5;
   $13$hi = i64toi32_i32$2;
   $245_1 = i64toi32_i32$5;
   $245$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $10$hi;
   i64toi32_i32$3 = $10_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = 32;
   i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $257_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    $257_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
   }
   $247_1 = $257_1;
   $247$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$1 = $19$hi;
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$2 = $10_1;
   i64toi32_i32$3 = $19$hi;
   i64toi32_i32$4 = $19_1;
   $250_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$4 = $250_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$4 << i64toi32_i32$0 | 0;
    $258_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$0 | 0) | 0;
    $258_1 = i64toi32_i32$4 << i64toi32_i32$0 | 0;
   }
   $252$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $247$hi;
   i64toi32_i32$2 = $247_1;
   i64toi32_i32$4 = $252$hi;
   i64toi32_i32$3 = $258_1;
   i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
   $253_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $253$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $245$hi;
   i64toi32_i32$1 = $245_1;
   i64toi32_i32$2 = $253$hi;
   i64toi32_i32$3 = $253_1;
   i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $19_1 = i64toi32_i32$0;
   $19$hi = i64toi32_i32$5;
   $255_1 = i64toi32_i32$0;
   $255$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$5 = $12$hi;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$1 = $12$hi;
   i64toi32_i32$1 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$5 | 0, $12_1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
   $21_1 = i64toi32_i32$1;
   $21$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$5 = $16$hi;
   i64toi32_i32$4 = $16_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 65536;
   i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
   $10_1 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
   $10$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$4 = $10$hi;
   i64toi32_i32$4 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$1 | 0, $10_1 | 0, i64toi32_i32$4 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $264_1 = i64toi32_i32$4;
   $264$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $21$hi;
   i64toi32_i32$5 = $21_1;
   i64toi32_i32$4 = $264$hi;
   i64toi32_i32$3 = $264_1;
   i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $16_1 = i64toi32_i32$2;
   $16$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $15$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $15$hi;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$5 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$5 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $269_1 = i64toi32_i32$5;
   $269$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $16$hi;
   i64toi32_i32$1 = i64toi32_i32$2;
   i64toi32_i32$5 = $269$hi;
   i64toi32_i32$3 = $269_1;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $22_1 = i64toi32_i32$4;
   $22$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $17$hi;
   i64toi32_i32$0 = $17_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 2147483647;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = -2147483648;
   i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
   $1_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $1$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$2 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $277_1 = i64toi32_i32$2;
   $277$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $22$hi;
   i64toi32_i32$1 = i64toi32_i32$4;
   i64toi32_i32$2 = $277$hi;
   i64toi32_i32$3 = $277_1;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $17_1 = i64toi32_i32$5;
   $17$hi = i64toi32_i32$4;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
    $259_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$2 | 0) | 0;
    $259_1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
   }
   $280$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $255$hi;
   i64toi32_i32$4 = $255_1;
   i64toi32_i32$0 = $280$hi;
   i64toi32_i32$3 = $259_1;
   i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $23_1 = i64toi32_i32$2;
   $23$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $227$hi;
   i64toi32_i32$1 = $227_1;
   i64toi32_i32$4 = $23$hi;
   i64toi32_i32$3 = i64toi32_i32$2;
   i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
   i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $4_1 = i64toi32_i32$0;
   $4$hi = i64toi32_i32$2;
   $6_1 = (($7_1 + $6_1 | 0) + $8_1 | 0) + -16383 | 0;
   label$13 : {
    label$14 : {
     i64toi32_i32$2 = $15$hi;
     i64toi32_i32$2 = $12$hi;
     i64toi32_i32$2 = $15$hi;
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$1 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$2 | 0, $12_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $24_1 = i64toi32_i32$1;
     $24$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$1 = $10$hi;
     i64toi32_i32$1 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$2 | 0, $10_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $296_1 = i64toi32_i32$1;
     $296$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $24$hi;
     i64toi32_i32$5 = $24_1;
     i64toi32_i32$1 = $296$hi;
     i64toi32_i32$3 = $296_1;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $2_1 = i64toi32_i32$4;
     $2$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $24$hi;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$2 = i64toi32_i32$4;
     i64toi32_i32$5 = $24$hi;
     i64toi32_i32$3 = $24_1;
     $300_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $301_1 = $300_1;
     $301$hi = i64toi32_i32$2;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$2 | 0, $3_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $305_1 = i64toi32_i32$0;
     $305$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$3 = i64toi32_i32$4;
     i64toi32_i32$0 = $305$hi;
     i64toi32_i32$5 = $305_1;
     i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $3_1 = i64toi32_i32$1;
     $3$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$5 = $2_1;
     $309_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $310$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $301$hi;
     i64toi32_i32$5 = $301_1;
     i64toi32_i32$4 = $310$hi;
     i64toi32_i32$3 = $309_1;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $311_1 = i64toi32_i32$0;
     $311$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $3$hi;
     $312_1 = $3_1;
     $312$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $18$hi;
     i64toi32_i32$1 = $20$hi;
     i64toi32_i32$1 = $18$hi;
     i64toi32_i32$2 = $18_1;
     i64toi32_i32$5 = $20$hi;
     i64toi32_i32$3 = $20_1;
     $315_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $316$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$3 = $13_1;
     i64toi32_i32$5 = $18_1;
     $319_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $320$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $316$hi;
     i64toi32_i32$5 = $315_1;
     i64toi32_i32$2 = $320$hi;
     i64toi32_i32$1 = $319_1;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $321$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $312$hi;
     i64toi32_i32$3 = $312_1;
     i64toi32_i32$5 = $321$hi;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $2_1 = i64toi32_i32$2;
     $2$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$1 = $3_1;
     $325_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $326$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $311$hi;
     i64toi32_i32$1 = $311_1;
     i64toi32_i32$4 = $326$hi;
     i64toi32_i32$3 = $325_1;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $327$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$1 = $10$hi;
     i64toi32_i32$1 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$2 | 0, $10_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $330_1 = i64toi32_i32$1;
     $330$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $327$hi;
     i64toi32_i32$0 = i64toi32_i32$5;
     i64toi32_i32$1 = $330$hi;
     i64toi32_i32$3 = $330_1;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $331_1 = i64toi32_i32$4;
     $331$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$5 = $12$hi;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$0 = $12$hi;
     i64toi32_i32$0 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$5 | 0, $12_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $3_1 = i64toi32_i32$0;
     $3$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $15$hi;
     i64toi32_i32$5 = $10$hi;
     i64toi32_i32$5 = $15$hi;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$0 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$5 | 0, $10_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $338_1 = i64toi32_i32$0;
     $338$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$2 = $3_1;
     i64toi32_i32$0 = $338$hi;
     i64toi32_i32$3 = $338_1;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $1_1 = i64toi32_i32$1;
     $1$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$5 = i64toi32_i32$1;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$3 = $3_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$3 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 32;
     i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
      $260_1 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
      $260_1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
     }
     $344_1 = $260_1;
     $344$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$5 = $1_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 32;
     i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $261_1 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
      $261_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
     }
     $346$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $344$hi;
     i64toi32_i32$4 = $344_1;
     i64toi32_i32$5 = $346$hi;
     i64toi32_i32$2 = $261_1;
     i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
     $347_1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
     $347$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $331$hi;
     i64toi32_i32$3 = $331_1;
     i64toi32_i32$4 = $347$hi;
     i64toi32_i32$2 = $347_1;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $348_1 = i64toi32_i32$0;
     $348$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $2$hi;
     $349_1 = $2_1;
     $349$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$5 = $1_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 32;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
      $262_1 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
      $262_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     }
     $351$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $349$hi;
     i64toi32_i32$1 = $349_1;
     i64toi32_i32$5 = $351$hi;
     i64toi32_i32$2 = $262_1;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $1_1 = i64toi32_i32$4;
     $1$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$3 = i64toi32_i32$4;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$2 = $2_1;
     $355_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $356$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $348$hi;
     i64toi32_i32$2 = $348_1;
     i64toi32_i32$0 = $356$hi;
     i64toi32_i32$1 = $355_1;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $357_1 = i64toi32_i32$5;
     $357$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $1$hi;
     $358_1 = $1_1;
     $358$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $17$hi;
     i64toi32_i32$3 = $17_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = 32;
     i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $263_1 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$2 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
      $263_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
     }
     $360_1 = $263_1;
     $360$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $16$hi;
     i64toi32_i32$2 = $21$hi;
     i64toi32_i32$2 = $16$hi;
     i64toi32_i32$4 = $16_1;
     i64toi32_i32$3 = $21$hi;
     i64toi32_i32$1 = $21_1;
     $363_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $364$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $22$hi;
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$4 = $22$hi;
     i64toi32_i32$1 = $22_1;
     i64toi32_i32$3 = $16_1;
     $367_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $368$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $364$hi;
     i64toi32_i32$3 = $363_1;
     i64toi32_i32$4 = $368$hi;
     i64toi32_i32$2 = $367_1;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $369$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $17$hi;
     i64toi32_i32$5 = $22$hi;
     i64toi32_i32$5 = $17$hi;
     i64toi32_i32$1 = $17_1;
     i64toi32_i32$3 = $22$hi;
     i64toi32_i32$2 = $22_1;
     $372_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $373$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $369$hi;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$5 = $373$hi;
     i64toi32_i32$3 = $372_1;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 32;
     i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
      $265_1 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$5 | 0) | 0;
      $265_1 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
     }
     $375$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $360$hi;
     i64toi32_i32$0 = $360_1;
     i64toi32_i32$1 = $375$hi;
     i64toi32_i32$3 = $265_1;
     i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $376_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
     $376$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $358$hi;
     i64toi32_i32$2 = $358_1;
     i64toi32_i32$0 = $376$hi;
     i64toi32_i32$3 = $376_1;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $3_1 = i64toi32_i32$5;
     $3$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$3 = $1_1;
     $380_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $381$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $357$hi;
     i64toi32_i32$3 = $357_1;
     i64toi32_i32$4 = $381$hi;
     i64toi32_i32$2 = $380_1;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $382_1 = i64toi32_i32$0;
     $382$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $3$hi;
     $383_1 = $3_1;
     $383$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $19$hi;
     i64toi32_i32$5 = $13$hi;
     i64toi32_i32$5 = $19$hi;
     i64toi32_i32$1 = $19_1;
     i64toi32_i32$3 = $13$hi;
     i64toi32_i32$2 = $13_1;
     $386_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $387$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $23$hi;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$1 = $23$hi;
     i64toi32_i32$2 = $23_1;
     i64toi32_i32$3 = $19_1;
     $390_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $391$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $387$hi;
     i64toi32_i32$3 = $386_1;
     i64toi32_i32$1 = $391$hi;
     i64toi32_i32$5 = $390_1;
     i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $392$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $383$hi;
     i64toi32_i32$2 = $383_1;
     i64toi32_i32$3 = $392$hi;
     i64toi32_i32$5 = i64toi32_i32$4;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $2_1 = i64toi32_i32$1;
     $2$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$5 = $3_1;
     $396_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $397$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $382$hi;
     i64toi32_i32$5 = $382_1;
     i64toi32_i32$4 = $397$hi;
     i64toi32_i32$2 = $396_1;
     i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $1_1 = i64toi32_i32$3;
     $1$hi = i64toi32_i32$1;
     i64toi32_i32$0 = i64toi32_i32$3;
     i64toi32_i32$5 = 65536;
     i64toi32_i32$2 = 0;
     i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
     if (!(i64toi32_i32$0 & i64toi32_i32$2 | 0 | i64toi32_i32$5 | 0)) {
      break label$14
     }
     $6_1 = $6_1 + 1 | 0;
     break label$13;
    }
    i64toi32_i32$5 = $11$hi;
    i64toi32_i32$1 = $11_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 63;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $266_1 = i64toi32_i32$5 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$4 | 0;
     $266_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
    }
    $3_1 = $266_1;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$5 = $1_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     $267_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $267_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
    }
    $407_1 = $267_1;
    $407$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 63;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $268_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $268_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $409$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $407$hi;
    i64toi32_i32$1 = $407_1;
    i64toi32_i32$0 = $409$hi;
    i64toi32_i32$2 = $268_1;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    $1_1 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
    $1$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$5 = $4_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$2 = 63;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $270_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $270_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$4 | 0) | 0;
    }
    $412_1 = $270_1;
    $412$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     $271_1 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $271_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $414$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $412$hi;
    i64toi32_i32$1 = $412_1;
    i64toi32_i32$0 = $414$hi;
    i64toi32_i32$2 = $271_1;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    $2_1 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
    $2$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $11$hi;
    i64toi32_i32$5 = $11_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     $272_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $272_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
    }
    $11_1 = $272_1;
    $11$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $3$hi;
    $418_1 = $3_1;
    $418$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     $273_1 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $273_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $420$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $418$hi;
    i64toi32_i32$1 = $418_1;
    i64toi32_i32$0 = $420$hi;
    i64toi32_i32$2 = $273_1;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    $4_1 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
    $4$hi = i64toi32_i32$0;
   }
   label$15 : {
    if (($6_1 | 0) < (32767 | 0)) {
     break label$15
    }
    i64toi32_i32$0 = $14$hi;
    i64toi32_i32$5 = $14_1;
    i64toi32_i32$1 = 2147418112;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $14_1 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    $14$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $1_1 = 0;
    $1$hi = i64toi32_i32$1;
    break label$1;
   }
   label$16 : {
    label$17 : {
     if (($6_1 | 0) > (0 | 0)) {
      break label$17
     }
     label$18 : {
      $7_1 = 1 - $6_1 | 0;
      if ($7_1 >>> 0 < 128 >>> 0) {
       break label$18
      }
      i64toi32_i32$1 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$1;
      break label$1;
     }
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$1 = $4$hi;
     $6_1 = $6_1 + 127 | 0;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$5 = $4$hi;
     $685($5_1 + 48 | 0 | 0, $11_1 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$5 | 0, $6_1 | 0);
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$1 = $1$hi;
     $685($5_1 + 32 | 0 | 0, $2_1 | 0, i64toi32_i32$5 | 0, $1_1 | 0, i64toi32_i32$1 | 0, $6_1 | 0);
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$5 = $4$hi;
     $690($5_1 + 16 | 0 | 0, $11_1 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$5 | 0, $7_1 | 0);
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$1 = $1$hi;
     $690($5_1 | 0, $2_1 | 0, i64toi32_i32$5 | 0, $1_1 | 0, i64toi32_i32$1 | 0, $7_1 | 0);
     i64toi32_i32$0 = $5_1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
     $454_1 = i64toi32_i32$1;
     $454$hi = i64toi32_i32$5;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
     $456_1 = i64toi32_i32$5;
     $456$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $454$hi;
     i64toi32_i32$0 = $454_1;
     i64toi32_i32$5 = $456$hi;
     i64toi32_i32$2 = $456_1;
     i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
     $457_1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $457$hi = i64toi32_i32$5;
     i64toi32_i32$1 = $5_1;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 52 | 0) >> 2] | 0;
     $459_1 = i64toi32_i32$5;
     $459$hi = i64toi32_i32$0;
     i64toi32_i32$1 = (i64toi32_i32$1 + 48 | 0) + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $463_1 = i64toi32_i32$0;
     $463$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $459$hi;
     i64toi32_i32$1 = $459_1;
     i64toi32_i32$0 = $463$hi;
     i64toi32_i32$2 = $463_1;
     i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = 0;
     $465_1 = (i64toi32_i32$5 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$5 = 0;
     $466$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $457$hi;
     i64toi32_i32$2 = $457_1;
     i64toi32_i32$0 = $466$hi;
     i64toi32_i32$1 = $465_1;
     i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
     $11_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $11$hi = i64toi32_i32$0;
     i64toi32_i32$5 = ($5_1 + 32 | 0) + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $471_1 = i64toi32_i32$0;
     $471$hi = i64toi32_i32$2;
     i64toi32_i32$5 = ($5_1 + 16 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $475_1 = i64toi32_i32$2;
     $475$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $471$hi;
     i64toi32_i32$5 = $471_1;
     i64toi32_i32$2 = $475$hi;
     i64toi32_i32$1 = $475_1;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $4_1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
     $4$hi = i64toi32_i32$2;
     i64toi32_i32$0 = $5_1 + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $1_1 = i64toi32_i32$2;
     $1$hi = i64toi32_i32$5;
     i64toi32_i32$0 = $5_1;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $2_1 = i64toi32_i32$5;
     $2$hi = i64toi32_i32$2;
     break label$16;
    }
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = $6_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = 48;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     $274_1 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
     $274_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $484$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$0 = 65535;
    i64toi32_i32$1 = -1;
    i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
    $486_1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
    $486$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $484$hi;
    i64toi32_i32$5 = $274_1;
    i64toi32_i32$2 = $486$hi;
    i64toi32_i32$1 = $486_1;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    $1_1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    $1$hi = i64toi32_i32$2;
   }
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = $14$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$5 = $14$hi;
   i64toi32_i32$1 = $14_1;
   i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
   $14_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $14$hi = i64toi32_i32$5;
   label$19 : {
    i64toi32_i32$5 = $11$hi;
    $492_1 = !($11_1 | i64toi32_i32$5 | 0);
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$0 = -1;
    i64toi32_i32$1 = -1;
    if ((i64toi32_i32$5 | 0) > (i64toi32_i32$0 | 0)) {
     $275_1 = 1
    } else {
     if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$1 >>> 0) {
       $276_1 = 0
      } else {
       $276_1 = 1
      }
      $278_1 = $276_1;
     } else {
      $278_1 = 0
     }
     $275_1 = $278_1;
    }
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$5 = -2147483648;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) | 0 ? $492_1 : $275_1) {
     break label$19
    }
    i64toi32_i32$1 = $14$hi;
    $498_1 = $14_1;
    $498$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 1;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
    i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
    }
    $1_1 = i64toi32_i32$4;
    $1$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = i64toi32_i32$4;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$5 = $2_1;
    $503_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
    i64toi32_i32$1 = 0;
    $504$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $498$hi;
    i64toi32_i32$5 = $498_1;
    i64toi32_i32$3 = $504$hi;
    i64toi32_i32$0 = $503_1;
    i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $14_1 = i64toi32_i32$2;
    $14$hi = i64toi32_i32$4;
    break label$1;
   }
   label$20 : {
    i64toi32_i32$4 = $11$hi;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$5 = -2147483648;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = i64toi32_i32$4 ^ i64toi32_i32$5 | 0;
    $508_1 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
    $508$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $11$hi;
    i64toi32_i32$4 = $11_1;
    i64toi32_i32$1 = $508$hi;
    i64toi32_i32$0 = $508_1;
    i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
    i64toi32_i32$4 = 0;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$4 | 0) | 0) {
     break label$20
    }
    i64toi32_i32$5 = $2$hi;
    $1_1 = $2_1;
    $1$hi = i64toi32_i32$5;
    break label$1;
   }
   i64toi32_i32$5 = $14$hi;
   $512_1 = $14_1;
   $512$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = 1;
   i64toi32_i32$1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
   $515_1 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
   $515$hi = i64toi32_i32$1;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$5 = i64toi32_i32$0;
   i64toi32_i32$0 = $515$hi;
   i64toi32_i32$4 = $515_1;
   i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
   i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $1_1 = i64toi32_i32$3;
   $1$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$1 = i64toi32_i32$3;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$4 = $2_1;
   $519_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$1 = 0;
   $520$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $512$hi;
   i64toi32_i32$4 = $512_1;
   i64toi32_i32$2 = $520$hi;
   i64toi32_i32$5 = $519_1;
   i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
   i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $14_1 = i64toi32_i32$0;
   $14$hi = i64toi32_i32$3;
  }
  i64toi32_i32$3 = $1$hi;
  i64toi32_i32$4 = $0_1;
  HEAP32[i64toi32_i32$4 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$3;
  i64toi32_i32$3 = $14$hi;
  HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = $14_1;
  HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$3;
  global$0 = $5_1 + 96 | 0;
 }
 
 function $694($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $14_1 = 0, $14$hi = 0, $17_1 = 0, $20_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = -2147483648;
  i64toi32_i32$3 = 0;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
  $14_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $14$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$3 = $14$hi;
  $688($5_1 | 0, $1_1 | 0, i64toi32_i32$1 | 0, $2_1 | 0, i64toi32_i32$2 | 0, $3_1 | 0, i64toi32_i32$0 | 0, $14_1 | 0, i64toi32_i32$3 | 0);
  i64toi32_i32$2 = $5_1;
  i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $17_1 = i64toi32_i32$3;
  i64toi32_i32$3 = $0_1;
  HEAP32[i64toi32_i32$3 >> 2] = $17_1;
  HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $20_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $20_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$3;
  global$0 = i64toi32_i32$2 + 16 | 0;
 }
 
 function $695($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, $3_1 = 0, i64toi32_i32$4 = 0, $2_1 = 0, $4_1 = 0, $4$hi = 0, $5_1 = 0, $5$hi = 0, $21_1 = 0, $22_1 = 0, $19_1 = 0, $27_1 = 0, $27$hi = 0, $31$hi = 0, $32_1 = 0, $32$hi = 0, $36$hi = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if ($1_1) {
     break label$2
    }
    i64toi32_i32$0 = 0;
    $4_1 = 0;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $5_1 = 0;
    $5$hi = i64toi32_i32$0;
    break label$1;
   }
   $3_1 = $1_1 >> 31 | 0;
   $3_1 = ($1_1 + $3_1 | 0) ^ $3_1 | 0;
   i64toi32_i32$0 = 0;
   $19_1 = $3_1;
   $3_1 = Math_clz32($3_1);
   i64toi32_i32$1 = 0;
   $685($2_1 | 0, $19_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, $3_1 + 81 | 0 | 0);
   i64toi32_i32$2 = $2_1 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
   $27_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
   $27$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 16414 - $3_1 | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 48;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $21_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $21_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $31$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $27$hi;
   i64toi32_i32$1 = $27_1;
   i64toi32_i32$0 = $31$hi;
   i64toi32_i32$3 = $21_1;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $32_1 = i64toi32_i32$4;
   $32$hi = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = $1_1 & -2147483648 | 0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
    $22_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
    $22_1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
   }
   $36$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $32$hi;
   i64toi32_i32$5 = $32_1;
   i64toi32_i32$2 = $36$hi;
   i64toi32_i32$3 = $22_1;
   i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
   $5_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $5$hi = i64toi32_i32$2;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $4_1 = i64toi32_i32$2;
   $4$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $4$hi;
  i64toi32_i32$2 = $0_1;
  HEAP32[i64toi32_i32$2 >> 2] = $4_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
  i64toi32_i32$5 = $5$hi;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $5_1;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$5;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $696($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $46_1 = 0, $48_1 = 0, $49_1 = 0, $50_1 = 0, $53_1 = 0, $54_1 = 0, $6_1 = 0, $9_1 = 0, $9$hi = 0, $12_1 = 0, $12$hi = 0, $13_1 = 0, $13$hi = 0, $16_1 = 0, $16$hi = 0, $20_1 = 0, $20$hi = 0, $21_1 = 0, $21$hi = 0, $5_1 = 0, $5$hi = 0, $30$hi = 0, $33_1 = 0, $33$hi = 0, $36$hi = 0, $37_1 = 0, $37$hi = 0, $39_1 = 0, $39$hi = 0, $42_1 = 0, $42$hi = 0, $45$hi = 0, $47_1 = 0, $49$hi = 0, $51_1 = 0, $51$hi = 0, $52_1 = 0;
  $6_1 = $0_1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$1 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$0 | 0, $1_1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $9_1 = i64toi32_i32$1;
  $9$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$1 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $12_1 = i64toi32_i32$1;
  $12$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $9$hi;
  i64toi32_i32$2 = $9_1;
  i64toi32_i32$1 = $12$hi;
  i64toi32_i32$3 = $12_1;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $13_1 = i64toi32_i32$4;
  $13$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $46_1 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
   $46_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
  }
  $4_1 = $46_1;
  $4$hi = i64toi32_i32$2;
  $16_1 = $4_1;
  $16$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$5 = $1_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $48_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
   $48_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
  }
  $2_1 = $48_1;
  $2$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $16$hi;
  i64toi32_i32$5 = $2$hi;
  i64toi32_i32$5 = __wasm_i64_mul($16_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$5 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $20_1 = i64toi32_i32$5;
  $20$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $13$hi;
  i64toi32_i32$2 = $13_1;
  i64toi32_i32$5 = $20$hi;
  i64toi32_i32$3 = $20_1;
  i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
  if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  $21_1 = i64toi32_i32$1;
  $21$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$2 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
  $3_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $3$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$4 = $1_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
  $1_1 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
  $1$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$4 = $1$hi;
  i64toi32_i32$4 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$0 | 0, $1_1 | 0, i64toi32_i32$4 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $5_1 = i64toi32_i32$4;
  $5$hi = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$4;
  i64toi32_i32$4 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$4 = 0;
   $49_1 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
  } else {
   i64toi32_i32$4 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
   $49_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
  }
  $30$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$4 = $2$hi;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$2 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$4 | 0, $2_1 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $33_1 = i64toi32_i32$2;
  $33$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $30$hi;
  i64toi32_i32$0 = $49_1;
  i64toi32_i32$2 = $33$hi;
  i64toi32_i32$3 = $33_1;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
  i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
  }
  $3_1 = i64toi32_i32$5;
  $3$hi = i64toi32_i32$1;
  i64toi32_i32$4 = i64toi32_i32$5;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $50_1 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
   $50_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$2 | 0) | 0;
  }
  $36$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $21$hi;
  i64toi32_i32$1 = $21_1;
  i64toi32_i32$4 = $36$hi;
  i64toi32_i32$3 = $50_1;
  i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $37_1 = i64toi32_i32$2;
  $37$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
  $39_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $39$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$1 | 0, $1_1 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $42_1 = i64toi32_i32$0;
  $42$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $39$hi;
  i64toi32_i32$5 = $39_1;
  i64toi32_i32$0 = $42$hi;
  i64toi32_i32$3 = $42_1;
  i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
  i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
  }
  $3_1 = i64toi32_i32$4;
  $3$hi = i64toi32_i32$2;
  i64toi32_i32$1 = i64toi32_i32$4;
  i64toi32_i32$5 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$5 = 0;
   $53_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
  } else {
   i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
   $53_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
  }
  $45$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $37$hi;
  i64toi32_i32$2 = $37_1;
  i64toi32_i32$1 = $45$hi;
  i64toi32_i32$3 = $53_1;
  i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  i64toi32_i32$2 = $6_1;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$4;
  $47_1 = $0_1;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$5 = $3_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
   $54_1 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
   $54_1 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
  }
  $49$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $5$hi;
  i64toi32_i32$4 = $5_1;
  i64toi32_i32$5 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
  $51_1 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
  $51$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $49$hi;
  i64toi32_i32$2 = $54_1;
  i64toi32_i32$4 = $51$hi;
  i64toi32_i32$3 = $51_1;
  i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
  $52_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  i64toi32_i32$2 = $47_1;
  HEAP32[i64toi32_i32$2 >> 2] = $52_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$4;
 }
 
 function $697($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $15$hi = 0, $13$hi = 0, $15_1 = 0, $16$hi = 0, $13_1 = 0, i64toi32_i32$6 = 0, $5_1 = 0, $18$hi = 0, $19$hi = 0, $17$hi = 0, $16_1 = 0, $18_1 = 0, $19_1 = 0, $11$hi = 0, $17_1 = 0, $12$hi = 0, $20$hi = 0, $11_1 = 0, $12_1 = 0, $20_1 = 0, $10$hi = 0, $10_1 = 0, $8_1 = 0, $6_1 = 0, $14_1 = 0, $14$hi = 0, $7_1 = 0, $21$hi = 0, $9_1 = 0, $470_1 = 0, $471_1 = 0, $475_1 = 0, $476_1 = 0, $478_1 = 0, $479_1 = 0, $480_1 = 0, $481_1 = 0, $482_1 = 0, $484_1 = 0, $485_1 = 0, $486_1 = 0, $488_1 = 0, $489_1 = 0, $490_1 = 0, $491_1 = 0, $494_1 = 0, $495_1 = 0, $496_1 = 0, $497_1 = 0, $498_1 = 0, $499_1 = 0, $501_1 = 0, $502_1 = 0, $503_1 = 0, $504_1 = 0, $505_1 = 0, $507_1 = 0, $508_1 = 0, $512_1 = 0, $513_1 = 0, $514_1 = 0, $515_1 = 0, $516_1 = 0, $518_1 = 0, $521_1 = 0, $522_1 = 0, $523_1 = 0, $524_1 = 0, $525_1 = 0, $526_1 = 0, $527_1 = 0, $528_1 = 0, $530_1 = 0, $21_1 = 0, $531_1 = 0, $532_1 = 0, $533_1 = 0, $537_1 = 0, $538_1 = 0, $539_1 = 0, $540_1 = 0, $542_1 = 0, $543_1 = 0, $544_1 = 0, $546_1 = 0, $547_1 = 0, $548_1 = 0, $549_1 = 0, $550_1 = 0, $552_1 = 0, $555_1 = 0, $556_1 = 0, $557_1 = 0, $558_1 = 0, $559_1 = 0, $560_1 = 0, $562_1 = 0, $563_1 = 0, $564_1 = 0, $565_1 = 0, $567_1 = 0, $568_1 = 0, $569_1 = 0, $570_1 = 0, $572_1 = 0, $573_1 = 0, $575_1 = 0, $576_1 = 0, $48_1 = 0, $52_1 = 0, $59_1 = 0, $63_1 = 0, $72_1 = 0, $72$hi = 0, $77_1 = 0, $77$hi = 0, $85_1 = 0, $85$hi = 0, $101_1 = 0, $102_1 = 0, $102$hi = 0, $103_1 = 0, $103$hi = 0, $110$hi = 0, $113$hi = 0, $128_1 = 0, $129_1 = 0, $129$hi = 0, $130_1 = 0, $130$hi = 0, $137$hi = 0, $140$hi = 0, $155_1 = 0, $157_1 = 0, $157$hi = 0, $161$hi = 0, $172_1 = 0, $172$hi = 0, $173$hi = 0, $176_1 = 0, $179_1 = 0, $179$hi = 0, $184$hi = 0, $194_1 = 0, $194$hi = 0, $195$hi = 0, $197_1 = 0, $200_1 = 0, $200$hi = 0, $205$hi = 0, $215_1 = 0, $215$hi = 0, $216$hi = 0, $218_1 = 0, $221_1 = 0, $221$hi = 0, $226$hi = 0, $236_1 = 0, $236$hi = 0, $237$hi = 0, $239_1 = 0, $242_1 = 0, $242$hi = 0, $247$hi = 0, $256_1 = 0, $256$hi = 0, $257$hi = 0, $265_1 = 0, $265$hi = 0, $269$hi = 0, $274_1 = 0, $274$hi = 0, $279_1 = 0, $279$hi = 0, $286_1 = 0, $286$hi = 0, $289_1 = 0, $289$hi = 0, $292_1 = 0, $294$hi = 0, $295_1 = 0, $295$hi = 0, $298_1 = 0, $298$hi = 0, $299_1 = 0, $299$hi = 0, $305_1 = 0, $305$hi = 0, $309_1 = 0, $310$hi = 0, $311_1 = 0, $311$hi = 0, $312_1 = 0, $312$hi = 0, $313_1 = 0, $313$hi = 0, $319_1 = 0, $319$hi = 0, $320_1 = 0, $320$hi = 0, $325_1 = 0, $325$hi = 0, $332_1 = 0, $332$hi = 0, $333$hi = 0, $335_1 = 0, $336_1 = 0, $336$hi = 0, $338_1 = 0, $338$hi = 0, $341_1 = 0, $343$hi = 0, $344_1 = 0, $344$hi = 0, $347_1 = 0, $347$hi = 0, $348$hi = 0, $349$hi = 0, $353_1 = 0, $354$hi = 0, $355$hi = 0, $357_1 = 0, $358$hi = 0, $359$hi = 0, $366_1 = 0, $366$hi = 0, $370_1 = 0, $370$hi = 0, $371_1 = 0, $371$hi = 0, $375_1 = 0, $375$hi = 0, $378$hi = 0, $383_1 = 0, $383$hi = 0, $385_1 = 0, $385$hi = 0, $388_1 = 0, $390$hi = 0, $391_1 = 0, $391$hi = 0, $394_1 = 0, $394$hi = 0, $395$hi = 0, $396_1 = 0, $396$hi = 0, $397_1 = 0, $397$hi = 0, $410_1 = 0, $410$hi = 0, $417_1 = 0, $417$hi = 0, $418$hi = 0, $420_1 = 0, $421_1 = 0, $421$hi = 0, $423_1 = 0, $423$hi = 0, $426_1 = 0, $428$hi = 0, $429_1 = 0, $429$hi = 0, $432_1 = 0, $432$hi = 0, $433$hi = 0, $434$hi = 0, $438_1 = 0, $439$hi = 0, $440_1 = 0, $440$hi = 0, $445_1 = 0, $446$hi = 0, $451_1 = 0, $451$hi = 0, $453_1 = 0, $453$hi = 0, $455$hi = 0, $460_1 = 0, $460$hi = 0, $464_1 = 0, $464$hi = 0, $468_1 = 0, $468$hi = 0, $472_1 = 0, $473_1 = 0, $473$hi = 0, $474_1 = 0, $474$hi = 0, $477_1 = 0, $477$hi = 0, $483_1 = 0, $483$hi = 0, $487_1 = 0, $488$hi = 0, $489$hi = 0, $492_1 = 0, $492$hi = 0, $493_1 = 0, $493$hi = 0, $500_1 = 0, $500$hi = 0, $506_1 = 0, $506$hi = 0, $508$hi = 0, $509_1 = 0, $509$hi = 0, $510_1 = 0, $510$hi = 0, $511_1 = 0, $511$hi = 0, $513$hi = 0, $517_1 = 0, $518$hi = 0, $519_1 = 0, $519$hi = 0, $520_1 = 0, $520$hi = 0, $529_1 = 0, $529$hi = 0, $534_1 = 0, $534$hi = 0, $535_1 = 0, $535$hi = 0, $536_1 = 0, $536$hi = 0, $541_1 = 0, $541$hi = 0, $545_1 = 0, $546$hi = 0, $547$hi = 0, $551_1 = 0, $552$hi = 0, $553_1 = 0, $553$hi = 0, $554_1 = 0, $554$hi = 0, $561_1 = 0, $561$hi = 0, $566_1 = 0, $566$hi = 0, $571_1 = 0, $571$hi = 0, $574_1 = 0, $574$hi = 0, $577_1 = 0, $578$hi = 0, $581_1 = 0, $582$hi = 0, $583$hi = 0, $586_1 = 0, $587$hi = 0, $589$hi = 0, $590_1 = 0, $590$hi = 0, $594_1 = 0, $595$hi = 0, $596_1 = 0, $596$hi = 0, $597_1 = 0, $597$hi = 0, $598_1 = 0, $598$hi = 0, $605_1 = 0, $605$hi = 0, $608_1 = 0, $608$hi = 0, $611_1 = 0, $613$hi = 0, $614_1 = 0, $614$hi = 0, $618_1 = 0, $619_1 = 0, $619$hi = 0, $620_1 = 0, $620$hi = 0, $622$hi = 0, $623$hi = 0, $625_1 = 0, $626$hi = 0, $627$hi = 0, $631_1 = 0, $632$hi = 0, $637$hi = 0, $646_1 = 0, $647$hi = 0, $648_1 = 0, $648$hi = 0, $651_1 = 0, $651$hi = 0, $657_1 = 0, $657$hi = 0, $658_1 = 0, $658$hi = 0, $662_1 = 0, $662$hi = 0, $667_1 = 0, $668$hi = 0, $669_1 = 0, $669$hi = 0, $670_1 = 0, $670$hi = 0, $672$hi = 0, $673_1 = 0, $673$hi = 0, $674_1 = 0, $674$hi = 0, $676$hi = 0, $677_1 = 0, $677$hi = 0, $678$hi = 0, $681_1 = 0, $681$hi = 0, $682$hi = 0, $685_1 = 0, $685$hi = 0, $687_1 = 0, $687$hi = 0, $689$hi = 0, $578_1 = 0, $691_1 = 0, $691$hi = 0, $694_1 = 0, $694$hi = 0, $695_1 = 0, $695$hi = 0, $696$hi = 0, $699_1 = 0, $699$hi = 0, $700_1 = 0, $700$hi = 0, $702_1 = 0, $702$hi = 0, $705_1 = 0, $707$hi = 0, $708_1 = 0, $708$hi = 0, $709$hi = 0, $710$hi = 0, $720_1 = 0, $720$hi = 0, $722_1 = 0, $722$hi = 0, $724$hi = 0, $734_1 = 0, $735$hi = 0, $736_1 = 0, $736$hi = 0, $739_1 = 0, $739$hi = 0, $740_1 = 0, $740$hi = 0, $745_1 = 0, $745$hi = 0, $746_1 = 0, $746$hi = 0, $748$hi = 0, $754_1 = 0, $754$hi = 0, $759_1 = 0, $760$hi = 0, $761_1 = 0, $761$hi = 0, $762_1 = 0, $762$hi = 0, $764$hi = 0, $765_1 = 0, $765$hi = 0, $766_1 = 0, $766$hi = 0, $768$hi = 0, $769_1 = 0, $769$hi = 0, $770_1 = 0, $770$hi = 0, $775_1 = 0, $775$hi = 0, $776$hi = 0, $779_1 = 0, $779$hi = 0, $781_1 = 0, $781$hi = 0, $784_1 = 0, $784$hi = 0, $786$hi = 0, $579_1 = 0, $788_1 = 0, $788$hi = 0, $789$hi = 0, $792_1 = 0, $792$hi = 0, $793_1 = 0, $793$hi = 0, $794_1 = 0, $794$hi = 0, $796_1 = 0, $796$hi = 0, $799_1 = 0, $801$hi = 0, $802_1 = 0, $802$hi = 0, $803$hi = 0, $804$hi = 0, $820_1 = 0, $820$hi = 0, $821_1 = 0, $821$hi = 0, $823$hi = 0, $825_1 = 0, $827_1 = 0, $827$hi = 0, $829$hi = 0, $833_1 = 0, $837_1 = 0, $838$hi = 0, $842_1 = 0, $843$hi = 0, $853$hi = 0, $855_1 = 0, $855$hi = 0, $856_1 = 0, $856$hi = 0, $857_1 = 0, $857$hi = 0, $859$hi = 0, $861_1 = 0, $863_1 = 0, $863$hi = 0, $865$hi = 0, $869_1 = 0, $873_1 = 0, $874$hi = 0, $878_1 = 0, $879$hi = 0, $880$hi = 0, $896_1 = 0;
  $5_1 = global$0 - 192 | 0;
  global$0 = $5_1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $10_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $10$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$2 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
  $11_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $11$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$1 = $4_1;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$3 = $2_1;
  i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$1 = -2147483648;
  i64toi32_i32$3 = 0;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $12_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $470_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $470_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $6_1 = $470_1 & 32767 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$1 = $2_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 48;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = 0;
       $471_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
       $471_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
      }
      $7_1 = $471_1 & 32767 | 0;
      if (($7_1 + -1 | 0) >>> 0 > 32765 >>> 0) {
       break label$4
      }
      $8_1 = 0;
      if (($6_1 + -1 | 0) >>> 0 < 32766 >>> 0) {
       break label$3
      }
     }
     label$5 : {
      i64toi32_i32$0 = $1$hi;
      $48_1 = !($1_1 | i64toi32_i32$0 | 0);
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$1 = 2147483647;
      i64toi32_i32$3 = -1;
      i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
      $13_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
      $13$hi = i64toi32_i32$1;
      i64toi32_i32$0 = $13_1;
      i64toi32_i32$2 = 2147418112;
      i64toi32_i32$3 = 0;
      $52_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$3 = $13_1;
      i64toi32_i32$1 = 2147418112;
      i64toi32_i32$2 = 0;
      if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $48_1 : $52_1) {
       break label$5
      }
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$0 = 32768;
      i64toi32_i32$1 = 0;
      i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      $12_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
      $12$hi = i64toi32_i32$0;
      break label$2;
     }
     label$6 : {
      i64toi32_i32$0 = $3$hi;
      $59_1 = !($3_1 | i64toi32_i32$0 | 0);
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$3 = $4_1;
      i64toi32_i32$2 = 2147483647;
      i64toi32_i32$1 = -1;
      i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
      $2_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
      $2$hi = i64toi32_i32$2;
      i64toi32_i32$0 = $2_1;
      i64toi32_i32$3 = 2147418112;
      i64toi32_i32$1 = 0;
      $63_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$2;
      i64toi32_i32$1 = $2_1;
      i64toi32_i32$2 = 2147418112;
      i64toi32_i32$3 = 0;
      if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) | 0 ? $59_1 : $63_1) {
       break label$6
      }
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$3 = $4_1;
      i64toi32_i32$0 = 32768;
      i64toi32_i32$2 = 0;
      i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
      $12_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
      $12$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $3$hi;
      $1_1 = $3_1;
      $1$hi = i64toi32_i32$0;
      break label$2;
     }
     label$7 : {
      i64toi32_i32$0 = $1$hi;
      i64toi32_i32$0 = $13$hi;
      i64toi32_i32$1 = $13_1;
      i64toi32_i32$3 = 2147418112;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
      $72_1 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
      $72$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $1$hi;
      i64toi32_i32$0 = $1_1;
      i64toi32_i32$1 = $72$hi;
      i64toi32_i32$2 = $72_1;
      i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
      i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$2 = 0;
      if ((i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0) {
       break label$7
      }
      label$8 : {
       i64toi32_i32$3 = $3$hi;
       i64toi32_i32$3 = $2$hi;
       i64toi32_i32$2 = $2_1;
       i64toi32_i32$1 = 2147418112;
       i64toi32_i32$0 = 0;
       i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
       $77_1 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
       $77$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $3$hi;
       i64toi32_i32$3 = $3_1;
       i64toi32_i32$2 = $77$hi;
       i64toi32_i32$0 = $77_1;
       i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
       if (!!(i64toi32_i32$3 | i64toi32_i32$0 | 0 | i64toi32_i32$2 | 0)) {
        break label$8
       }
       i64toi32_i32$2 = 0;
       $1_1 = 0;
       $1$hi = i64toi32_i32$2;
       i64toi32_i32$2 = 2147450880;
       $12_1 = 0;
       $12$hi = i64toi32_i32$2;
       break label$2;
      }
      i64toi32_i32$2 = $12$hi;
      i64toi32_i32$1 = $12_1;
      i64toi32_i32$3 = 2147418112;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
      $12_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
      $12$hi = i64toi32_i32$3;
      i64toi32_i32$3 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$3;
      break label$2;
     }
     label$9 : {
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$1 = 2147418112;
      i64toi32_i32$0 = 0;
      i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
      $85_1 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
      $85$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$3 = $3_1;
      i64toi32_i32$2 = $85$hi;
      i64toi32_i32$0 = $85_1;
      i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
      i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = 0;
      if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
       break label$9
      }
      i64toi32_i32$1 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$1;
      break label$2;
     }
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $13$hi;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$3 = $13_1;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0) {
      break label$1
     }
     label$10 : {
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$3 = $3_1;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$0 = $2_1;
      i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
      i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = 0;
      if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
       break label$10
      }
      i64toi32_i32$1 = $12$hi;
      i64toi32_i32$0 = $12_1;
      i64toi32_i32$2 = 2147418112;
      i64toi32_i32$3 = 0;
      i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
      $12_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
      $12$hi = i64toi32_i32$2;
      i64toi32_i32$2 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$2;
      break label$2;
     }
     $8_1 = 0;
     label$11 : {
      i64toi32_i32$2 = $13$hi;
      i64toi32_i32$1 = $13_1;
      i64toi32_i32$0 = 65535;
      i64toi32_i32$3 = -1;
      if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
       break label$11
      }
      $101_1 = $5_1 + 176 | 0;
      i64toi32_i32$1 = $1$hi;
      $102_1 = $1_1;
      $102$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $11$hi;
      $103_1 = $11_1;
      $103$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$1 = $11$hi;
      $8_1 = !($11_1 | i64toi32_i32$1 | 0);
      i64toi32_i32$4 = $8_1;
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$2 = $11$hi;
      i64toi32_i32$0 = i64toi32_i32$4 ? $1_1 : $11_1;
      i64toi32_i32$3 = i64toi32_i32$4 ? i64toi32_i32$1 : i64toi32_i32$2;
      i64toi32_i32$1 = Math_clz32(i64toi32_i32$3);
      i64toi32_i32$4 = 0;
      if ((i64toi32_i32$1 | 0) == (32 | 0)) {
       $475_1 = Math_clz32(i64toi32_i32$0) + 32 | 0
      } else {
       $475_1 = i64toi32_i32$1
      }
      $110$hi = i64toi32_i32$4;
      i64toi32_i32$4 = 0;
      $113$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $110$hi;
      i64toi32_i32$0 = $475_1;
      i64toi32_i32$3 = $113$hi;
      i64toi32_i32$1 = $8_1 << 6 | 0;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $8_1 = i64toi32_i32$2;
      i64toi32_i32$5 = $102$hi;
      i64toi32_i32$0 = $103$hi;
      $685($101_1 | 0, $102_1 | 0, i64toi32_i32$5 | 0, $103_1 | 0, i64toi32_i32$0 | 0, i64toi32_i32$2 + -15 | 0 | 0);
      $8_1 = 16 - i64toi32_i32$2 | 0;
      i64toi32_i32$4 = $5_1 + 184 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$4 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
      $11_1 = i64toi32_i32$0;
      $11$hi = i64toi32_i32$5;
      i64toi32_i32$4 = $5_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 176 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 180 | 0) >> 2] | 0;
      $1_1 = i64toi32_i32$5;
      $1$hi = i64toi32_i32$0;
     }
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$4 = $2_1;
     i64toi32_i32$5 = 65535;
     i64toi32_i32$1 = -1;
     if (i64toi32_i32$0 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
      break label$3
     }
     $128_1 = $5_1 + 160 | 0;
     i64toi32_i32$4 = $3$hi;
     $129_1 = $3_1;
     $129$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $10$hi;
     $130_1 = $10_1;
     $130$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$4 = $10$hi;
     $9_1 = !($10_1 | i64toi32_i32$4 | 0);
     i64toi32_i32$3 = $9_1;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$5 = i64toi32_i32$3 ? $3_1 : $10_1;
     i64toi32_i32$1 = i64toi32_i32$3 ? i64toi32_i32$4 : i64toi32_i32$0;
     i64toi32_i32$4 = Math_clz32(i64toi32_i32$1);
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$4 | 0) == (32 | 0)) {
      $476_1 = Math_clz32(i64toi32_i32$5) + 32 | 0
     } else {
      $476_1 = i64toi32_i32$4
     }
     $137$hi = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     $140$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $137$hi;
     i64toi32_i32$5 = $476_1;
     i64toi32_i32$1 = $140$hi;
     i64toi32_i32$4 = $9_1 << 6 | 0;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $9_1 = i64toi32_i32$0;
     i64toi32_i32$2 = $129$hi;
     i64toi32_i32$5 = $130$hi;
     $685($128_1 | 0, $129_1 | 0, i64toi32_i32$2 | 0, $130_1 | 0, i64toi32_i32$5 | 0, i64toi32_i32$0 + -15 | 0 | 0);
     $8_1 = (i64toi32_i32$0 + $8_1 | 0) + -16 | 0;
     i64toi32_i32$3 = $5_1 + 168 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
     $10_1 = i64toi32_i32$5;
     $10$hi = i64toi32_i32$2;
     i64toi32_i32$3 = $5_1;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 160 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 164 | 0) >> 2] | 0;
     $3_1 = i64toi32_i32$2;
     $3$hi = i64toi32_i32$5;
    }
    $155_1 = $5_1 + 144 | 0;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$3 = $3_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = 49;
    i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $478_1 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
     $478_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
    }
    $157_1 = $478_1;
    $157$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $10$hi;
    i64toi32_i32$5 = $10_1;
    i64toi32_i32$3 = 65536;
    i64toi32_i32$4 = 0;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $14_1 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
    $14$hi = i64toi32_i32$3;
    i64toi32_i32$2 = $14_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = 15;
    i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
     $479_1 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$1 | 0) | 0;
     $479_1 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
    }
    $161$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $157$hi;
    i64toi32_i32$3 = $157_1;
    i64toi32_i32$2 = $161$hi;
    i64toi32_i32$4 = $479_1;
    i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    $2_1 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 1963258675;
    i64toi32_i32$5 = -102865788;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$4 = $2_1;
    i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
    i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0;
    i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
    $4_1 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$0 = i64toi32_i32$3;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$4 = 0;
    $696($155_1 | 0, $2_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$5 = ($5_1 + 144 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $172_1 = i64toi32_i32$4;
    $172$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = $172$hi;
    i64toi32_i32$0 = $172_1;
    i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
    i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0;
    i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
    i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$1 | 0;
    $173$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$1 = $173$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$0 = 0;
    $696($5_1 + 128 | 0 | 0, i64toi32_i32$3 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, $4_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
    $176_1 = $5_1 + 112 | 0;
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 128 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 132 | 0) >> 2] | 0;
    i64toi32_i32$5 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 63;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $480_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $480_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$4 | 0) | 0;
    }
    $179_1 = $480_1;
    $179$hi = i64toi32_i32$0;
    i64toi32_i32$2 = ($5_1 + 128 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 1;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $481_1 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$4 | 0) | 0;
     $481_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $184$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $179$hi;
    i64toi32_i32$5 = $179_1;
    i64toi32_i32$2 = $184$hi;
    i64toi32_i32$1 = $481_1;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    $4_1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    $4$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = 0;
    $696($176_1 | 0, $4_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$1 = i64toi32_i32$2;
    i64toi32_i32$5 = ($5_1 + 112 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $194_1 = i64toi32_i32$1;
    $194$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = $194$hi;
    i64toi32_i32$2 = $194_1;
    i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
    i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0;
    i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
    i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
    $195$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = $195$hi;
    i64toi32_i32$2 = 0;
    $696($5_1 + 96 | 0 | 0, $4_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0);
    $197_1 = $5_1 + 80 | 0;
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 96 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 100 | 0) >> 2] | 0;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 63;
    i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $482_1 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
     $482_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
    }
    $200_1 = $482_1;
    $200$hi = i64toi32_i32$2;
    i64toi32_i32$0 = ($5_1 + 96 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 1;
    i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
     $484_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$1 | 0) | 0;
     $484_1 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
    }
    $205$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $200$hi;
    i64toi32_i32$5 = $200_1;
    i64toi32_i32$0 = $205$hi;
    i64toi32_i32$3 = $484_1;
    i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $4_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$3 = 0;
    $696($197_1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$3 = i64toi32_i32$0;
    i64toi32_i32$5 = ($5_1 + 80 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $215_1 = i64toi32_i32$3;
    $215$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = $215$hi;
    i64toi32_i32$0 = $215_1;
    i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
    i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0;
    i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
    $216$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = $216$hi;
    i64toi32_i32$0 = 0;
    $696($5_1 + 64 | 0 | 0, $4_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
    $218_1 = $5_1 + 48 | 0;
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 64 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 68 | 0) >> 2] | 0;
    i64toi32_i32$5 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 63;
    i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $485_1 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
     $485_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
    }
    $221_1 = $485_1;
    $221$hi = i64toi32_i32$0;
    i64toi32_i32$2 = ($5_1 + 64 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 1;
    i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
     $486_1 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
     $486_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
    }
    $226$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $221$hi;
    i64toi32_i32$5 = $221_1;
    i64toi32_i32$2 = $226$hi;
    i64toi32_i32$4 = $486_1;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    $4_1 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
    $4$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$4 = 0;
    $696($218_1 | 0, $4_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$4 = i64toi32_i32$2;
    i64toi32_i32$5 = ($5_1 + 48 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $236_1 = i64toi32_i32$4;
    $236$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = $236$hi;
    i64toi32_i32$2 = $236_1;
    i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
    i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0;
    i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
    i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$1 | 0;
    $237$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = $237$hi;
    i64toi32_i32$2 = 0;
    $696($5_1 + 32 | 0 | 0, $4_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$3 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0);
    $239_1 = $5_1 + 16 | 0;
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 32 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 36 | 0) >> 2] | 0;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 63;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $488_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $488_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$4 | 0) | 0;
    }
    $242_1 = $488_1;
    $242$hi = i64toi32_i32$2;
    i64toi32_i32$0 = ($5_1 + 32 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 1;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     $489_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$4 | 0) | 0;
     $489_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $247$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $242$hi;
    i64toi32_i32$5 = $242_1;
    i64toi32_i32$0 = $247$hi;
    i64toi32_i32$1 = $489_1;
    i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $4_1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$1 = 0;
    $696($239_1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$5 = ($5_1 + 16 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $256_1 = i64toi32_i32$1;
    $256$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = $256$hi;
    i64toi32_i32$0 = $256_1;
    i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
    i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0;
    i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
    i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
    $257$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = $257$hi;
    i64toi32_i32$0 = 0;
    $696($5_1 | 0, $4_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$4 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
    $6_1 = $8_1 + ($7_1 - $6_1 | 0) | 0;
    label$12 : {
     label$13 : {
      i64toi32_i32$5 = $5_1;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      i64toi32_i32$5 = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 63;
      i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = 0;
       $490_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
       $490_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
      }
      $265_1 = $490_1;
      $265$hi = i64toi32_i32$0;
      i64toi32_i32$2 = $5_1 + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 1;
      i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
       $491_1 = 0;
      } else {
       i64toi32_i32$0 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$1 | 0) | 0;
       $491_1 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
      }
      $269$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $265$hi;
      i64toi32_i32$5 = $265_1;
      i64toi32_i32$2 = $269$hi;
      i64toi32_i32$3 = $491_1;
      i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
      i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
      i64toi32_i32$5 = -1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $13_1 = i64toi32_i32$1;
      $13$hi = i64toi32_i32$4;
      i64toi32_i32$2 = i64toi32_i32$1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = -1;
      i64toi32_i32$0 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
      $4_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
      $4$hi = i64toi32_i32$0;
      $274_1 = $4_1;
      $274$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$4 = $2_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = 0;
       $494_1 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
      } else {
       i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
       $494_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$5 | 0) | 0;
      }
      $15_1 = $494_1;
      $15$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $274$hi;
      i64toi32_i32$4 = $15$hi;
      i64toi32_i32$4 = __wasm_i64_mul($274_1 | 0, i64toi32_i32$2 | 0, $15_1 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $16_1 = i64toi32_i32$4;
      $16$hi = i64toi32_i32$2;
      $279_1 = i64toi32_i32$4;
      $279$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $13$hi;
      i64toi32_i32$0 = $13_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = 0;
       $495_1 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
      } else {
       i64toi32_i32$4 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
       $495_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$5 | 0) | 0;
      }
      $13_1 = $495_1;
      $13$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = -1;
      i64toi32_i32$0 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
      $17_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
      $17$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $13$hi;
      i64toi32_i32$2 = $17$hi;
      i64toi32_i32$2 = __wasm_i64_mul($13_1 | 0, i64toi32_i32$0 | 0, $17_1 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $286_1 = i64toi32_i32$2;
      $286$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $279$hi;
      i64toi32_i32$4 = $279_1;
      i64toi32_i32$2 = $286$hi;
      i64toi32_i32$3 = $286_1;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $2_1 = i64toi32_i32$5;
      $2$hi = i64toi32_i32$1;
      i64toi32_i32$0 = i64toi32_i32$5;
      i64toi32_i32$4 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = 0;
       $496_1 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
      } else {
       i64toi32_i32$4 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
       $496_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$2 | 0) | 0;
      }
      $289_1 = $496_1;
      $289$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$4 = $16$hi;
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$1 = $2_1;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$3 = $16_1;
      $292_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = $292_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$0 = 32;
      i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
       $497_1 = 0;
      } else {
       i64toi32_i32$4 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$2 | 0) | 0;
       $497_1 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
      }
      $294$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $289$hi;
      i64toi32_i32$1 = $289_1;
      i64toi32_i32$3 = $294$hi;
      i64toi32_i32$0 = $497_1;
      i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
      $295_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
      $295$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $13$hi;
      i64toi32_i32$3 = $15$hi;
      i64toi32_i32$3 = $13$hi;
      i64toi32_i32$1 = $15$hi;
      i64toi32_i32$1 = __wasm_i64_mul($13_1 | 0, i64toi32_i32$3 | 0, $15_1 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $298_1 = i64toi32_i32$1;
      $298$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $295$hi;
      i64toi32_i32$4 = $295_1;
      i64toi32_i32$1 = $298$hi;
      i64toi32_i32$0 = $298_1;
      i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
      i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $299_1 = i64toi32_i32$2;
      $299$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$3 = $2_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$0 = 32;
      i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
       $498_1 = 0;
      } else {
       i64toi32_i32$4 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$1 | 0) | 0;
       $498_1 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
      }
      $15_1 = $498_1;
      $15$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $4$hi;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$4 = $4$hi;
      i64toi32_i32$3 = $17$hi;
      i64toi32_i32$3 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$4 | 0, $17_1 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $305_1 = i64toi32_i32$3;
      $305$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $15$hi;
      i64toi32_i32$5 = $15_1;
      i64toi32_i32$3 = $305$hi;
      i64toi32_i32$0 = $305_1;
      i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
      i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $2_1 = i64toi32_i32$1;
      $2$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $15$hi;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$4 = i64toi32_i32$1;
      i64toi32_i32$5 = $15$hi;
      i64toi32_i32$0 = $15_1;
      $309_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
      i64toi32_i32$4 = 0;
      $310$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $299$hi;
      i64toi32_i32$0 = $299_1;
      i64toi32_i32$2 = $310$hi;
      i64toi32_i32$5 = $309_1;
      i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $311_1 = i64toi32_i32$3;
      $311$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $2$hi;
      $312_1 = $2_1;
      $312$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $4$hi;
      $313_1 = $4_1;
      $313$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$4 = $3_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$5 = 17;
      i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = 0;
       $499_1 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
       $499_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$2 | 0) | 0;
      }
      i64toi32_i32$1 = $499_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$5 = -1;
      i64toi32_i32$4 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
      $16_1 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
      $16$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $313$hi;
      i64toi32_i32$1 = $16$hi;
      i64toi32_i32$1 = __wasm_i64_mul($313_1 | 0, i64toi32_i32$4 | 0, $16_1 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $17_1 = i64toi32_i32$1;
      $17$hi = i64toi32_i32$4;
      $319_1 = i64toi32_i32$1;
      $319$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $13$hi;
      $320_1 = $13_1;
      $320$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $3$hi;
      i64toi32_i32$0 = $3_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$5 = 15;
      i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
       $501_1 = 0;
      } else {
       i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$2 | 0) | 0;
       $501_1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
      }
      i64toi32_i32$4 = $501_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$5 = -32768;
      i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
      $18_1 = i64toi32_i32$4 & i64toi32_i32$5 | 0;
      $18$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $320$hi;
      i64toi32_i32$4 = $18$hi;
      i64toi32_i32$4 = __wasm_i64_mul($320_1 | 0, i64toi32_i32$0 | 0, $18_1 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $325_1 = i64toi32_i32$4;
      $325$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $319$hi;
      i64toi32_i32$1 = $319_1;
      i64toi32_i32$4 = $325$hi;
      i64toi32_i32$5 = $325_1;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $15_1 = i64toi32_i32$2;
      $15$hi = i64toi32_i32$3;
      i64toi32_i32$0 = i64toi32_i32$2;
      i64toi32_i32$1 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
       $502_1 = 0;
      } else {
       i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
       $502_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
      }
      $19_1 = $502_1;
      $19$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$0 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$1 | 0, $18_1 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $332_1 = i64toi32_i32$0;
      $332$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $19$hi;
      i64toi32_i32$3 = $19_1;
      i64toi32_i32$0 = $332$hi;
      i64toi32_i32$5 = $332_1;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $333$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $19$hi;
      i64toi32_i32$2 = $333$hi;
      i64toi32_i32$1 = i64toi32_i32$4;
      i64toi32_i32$3 = $19$hi;
      i64toi32_i32$5 = $19_1;
      $335_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      $336_1 = $335_1;
      $336$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $15$hi;
      i64toi32_i32$5 = $15_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = 0;
       $503_1 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
      } else {
       i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
       $503_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
      }
      $338_1 = $503_1;
      $338$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $15$hi;
      i64toi32_i32$2 = $17$hi;
      i64toi32_i32$2 = $15$hi;
      i64toi32_i32$1 = $15_1;
      i64toi32_i32$5 = $17$hi;
      i64toi32_i32$3 = $17_1;
      $341_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = $341_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
       $504_1 = 0;
      } else {
       i64toi32_i32$2 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
       $504_1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
      }
      $343$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $338$hi;
      i64toi32_i32$1 = $338_1;
      i64toi32_i32$3 = $343$hi;
      i64toi32_i32$5 = $504_1;
      i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
      $344_1 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
      $344$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $13$hi;
      i64toi32_i32$3 = $16$hi;
      i64toi32_i32$3 = $13$hi;
      i64toi32_i32$1 = $16$hi;
      i64toi32_i32$1 = __wasm_i64_mul($13_1 | 0, i64toi32_i32$3 | 0, $16_1 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $347_1 = i64toi32_i32$1;
      $347$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $344$hi;
      i64toi32_i32$2 = $344_1;
      i64toi32_i32$1 = $347$hi;
      i64toi32_i32$5 = $347_1;
      i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $348$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $336$hi;
      i64toi32_i32$3 = $336_1;
      i64toi32_i32$2 = $348$hi;
      i64toi32_i32$5 = i64toi32_i32$0;
      i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
      i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $349$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $312$hi;
      i64toi32_i32$4 = $312_1;
      i64toi32_i32$3 = $349$hi;
      i64toi32_i32$5 = i64toi32_i32$1;
      i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $15_1 = i64toi32_i32$2;
      $15$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$1 = $15$hi;
      i64toi32_i32$0 = i64toi32_i32$2;
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$5 = $2_1;
      $353_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$0 = 0;
      $354$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $311$hi;
      i64toi32_i32$5 = $311_1;
      i64toi32_i32$1 = $354$hi;
      i64toi32_i32$4 = $353_1;
      i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $355$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $15$hi;
      i64toi32_i32$0 = $15_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$4 = 0;
      $357_1 = (i64toi32_i32$0 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$0 = 0;
      $358$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $355$hi;
      i64toi32_i32$4 = i64toi32_i32$3;
      i64toi32_i32$2 = $358$hi;
      i64toi32_i32$5 = $357_1;
      i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
      i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $359$hi = i64toi32_i32$3;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$4 = $359$hi;
      i64toi32_i32$5 = i64toi32_i32$1;
      i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$1 | 0;
      i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0;
      i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
      i64toi32_i32$1 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
      $2_1 = i64toi32_i32$2;
      $2$hi = i64toi32_i32$1;
      i64toi32_i32$3 = i64toi32_i32$2;
      i64toi32_i32$0 = 0;
      i64toi32_i32$5 = -1;
      i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
      $16_1 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
      $16$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$3 = __wasm_i64_mul($16_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $17_1 = i64toi32_i32$3;
      $17$hi = i64toi32_i32$0;
      $366_1 = i64toi32_i32$3;
      $366$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$0 = $13$hi;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$3 = $13$hi;
      i64toi32_i32$3 = __wasm_i64_mul($16_1 | 0, i64toi32_i32$0 | 0, $13_1 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $18_1 = i64toi32_i32$3;
      $18$hi = i64toi32_i32$0;
      $370_1 = i64toi32_i32$3;
      $370$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $4$hi;
      $371_1 = $4_1;
      $371$hi = i64toi32_i32$0;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$1 = i64toi32_i32$2;
      i64toi32_i32$3 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = 0;
       $505_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
       $505_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
      }
      $19_1 = $505_1;
      $19$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $371$hi;
      i64toi32_i32$1 = $19$hi;
      i64toi32_i32$1 = __wasm_i64_mul($371_1 | 0, i64toi32_i32$3 | 0, $19_1 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $375_1 = i64toi32_i32$1;
      $375$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $370$hi;
      i64toi32_i32$0 = $370_1;
      i64toi32_i32$1 = $375$hi;
      i64toi32_i32$5 = $375_1;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
      i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $2_1 = i64toi32_i32$4;
      $2$hi = i64toi32_i32$2;
      i64toi32_i32$3 = i64toi32_i32$4;
      i64toi32_i32$0 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
       $507_1 = 0;
      } else {
       i64toi32_i32$0 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$1 | 0) | 0;
       $507_1 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
      }
      $378$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $366$hi;
      i64toi32_i32$2 = $366_1;
      i64toi32_i32$3 = $378$hi;
      i64toi32_i32$5 = $507_1;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $16_1 = i64toi32_i32$1;
      $16$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$4 = $16$hi;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$2 = $17$hi;
      i64toi32_i32$5 = $17_1;
      i64toi32_i32$0 = 0;
      $383_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      $383$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$5 = $2_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$2 = 32;
      i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = 0;
       $508_1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
      } else {
       i64toi32_i32$4 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
       $508_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
      }
      $385_1 = $508_1;
      $385$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$4 = $18$hi;
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$0 = $2_1;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$2 = $18_1;
      $388_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$2 = $388_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
       $512_1 = 0;
      } else {
       i64toi32_i32$4 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$3 | 0) | 0;
       $512_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
      }
      $390$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $385$hi;
      i64toi32_i32$0 = $385_1;
      i64toi32_i32$2 = $390$hi;
      i64toi32_i32$5 = $512_1;
      i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
      $391_1 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
      $391$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $13$hi;
      i64toi32_i32$2 = $19$hi;
      i64toi32_i32$2 = $13$hi;
      i64toi32_i32$0 = $19$hi;
      i64toi32_i32$0 = __wasm_i64_mul($13_1 | 0, i64toi32_i32$2 | 0, $19_1 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $394_1 = i64toi32_i32$0;
      $394$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $391$hi;
      i64toi32_i32$4 = $391_1;
      i64toi32_i32$0 = $394$hi;
      i64toi32_i32$5 = $394_1;
      i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $395$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $383$hi;
      i64toi32_i32$2 = $383_1;
      i64toi32_i32$4 = $395$hi;
      i64toi32_i32$5 = i64toi32_i32$3;
      i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $396_1 = i64toi32_i32$0;
      $396$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $16$hi;
      $397_1 = $16_1;
      $397$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $15$hi;
      i64toi32_i32$3 = 0;
      i64toi32_i32$1 = 0;
      i64toi32_i32$2 = $15$hi;
      i64toi32_i32$5 = $15_1;
      i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
      i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0;
      i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
      i64toi32_i32$0 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
      $2_1 = i64toi32_i32$4;
      $2$hi = i64toi32_i32$0;
      i64toi32_i32$3 = i64toi32_i32$4;
      i64toi32_i32$1 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $513_1 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
       $513_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$2 | 0) | 0;
      }
      $15_1 = $513_1;
      $15$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$1 = $15$hi;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$3 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $17_1 = i64toi32_i32$3;
      $17$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$0 = $2_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$5 = -1;
      i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
      $18_1 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
      $18$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $13$hi;
      i64toi32_i32$3 = $18$hi;
      i64toi32_i32$0 = $13$hi;
      i64toi32_i32$0 = __wasm_i64_mul($18_1 | 0, i64toi32_i32$3 | 0, $13_1 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $410_1 = i64toi32_i32$0;
      $410$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $17$hi;
      i64toi32_i32$1 = $17_1;
      i64toi32_i32$0 = $410$hi;
      i64toi32_i32$5 = $410_1;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $2_1 = i64toi32_i32$2;
      $2$hi = i64toi32_i32$4;
      i64toi32_i32$3 = i64toi32_i32$2;
      i64toi32_i32$1 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
       $514_1 = 0;
      } else {
       i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$0 | 0) | 0;
       $514_1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
      }
      $19_1 = $514_1;
      $19$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$3 = __wasm_i64_mul($18_1 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $417_1 = i64toi32_i32$3;
      $417$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $19$hi;
      i64toi32_i32$4 = $19_1;
      i64toi32_i32$3 = $417$hi;
      i64toi32_i32$5 = $417_1;
      i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $418$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $19$hi;
      i64toi32_i32$2 = $418$hi;
      i64toi32_i32$1 = i64toi32_i32$0;
      i64toi32_i32$4 = $19$hi;
      i64toi32_i32$5 = $19_1;
      $420_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      $421_1 = $420_1;
      $421$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$5 = $2_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$4 = 32;
      i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = 0;
       $515_1 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
      } else {
       i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
       $515_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
      }
      $423_1 = $515_1;
      $423$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$2 = $17$hi;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$1 = $2_1;
      i64toi32_i32$5 = $17$hi;
      i64toi32_i32$4 = $17_1;
      $426_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      i64toi32_i32$4 = $426_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$4 << i64toi32_i32$3 | 0;
       $516_1 = 0;
      } else {
       i64toi32_i32$2 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$3 | 0) | 0;
       $516_1 = i64toi32_i32$4 << i64toi32_i32$3 | 0;
      }
      $428$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $423$hi;
      i64toi32_i32$1 = $423_1;
      i64toi32_i32$4 = $428$hi;
      i64toi32_i32$5 = $516_1;
      i64toi32_i32$4 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
      $429_1 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
      $429$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $15$hi;
      i64toi32_i32$4 = $13$hi;
      i64toi32_i32$4 = $15$hi;
      i64toi32_i32$1 = $13$hi;
      i64toi32_i32$1 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$4 | 0, $13_1 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $432_1 = i64toi32_i32$1;
      $432$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $429$hi;
      i64toi32_i32$2 = $429_1;
      i64toi32_i32$1 = $432$hi;
      i64toi32_i32$5 = $432_1;
      i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $433$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $421$hi;
      i64toi32_i32$4 = $421_1;
      i64toi32_i32$2 = $433$hi;
      i64toi32_i32$5 = i64toi32_i32$3;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $434$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $397$hi;
      i64toi32_i32$0 = $397_1;
      i64toi32_i32$4 = $434$hi;
      i64toi32_i32$5 = i64toi32_i32$1;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $2_1 = i64toi32_i32$2;
      $2$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $16$hi;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$3 = i64toi32_i32$2;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$5 = $16_1;
      $438_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$3 = 0;
      $439$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $396$hi;
      i64toi32_i32$5 = $396_1;
      i64toi32_i32$1 = $439$hi;
      i64toi32_i32$0 = $438_1;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
      i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $440_1 = i64toi32_i32$4;
      $440$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$3 = $2_1;
      i64toi32_i32$5 = -1;
      i64toi32_i32$0 = -2;
      i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $17_1 = i64toi32_i32$1;
      $17$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$2 = i64toi32_i32$1;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$0 = $2_1;
      $445_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
      i64toi32_i32$2 = 0;
      $446$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $440$hi;
      i64toi32_i32$0 = $440_1;
      i64toi32_i32$4 = $446$hi;
      i64toi32_i32$3 = $445_1;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      i64toi32_i32$2 = i64toi32_i32$5;
      i64toi32_i32$0 = -1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $15_1 = i64toi32_i32$4;
      $15$hi = i64toi32_i32$5;
      i64toi32_i32$1 = i64toi32_i32$4;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = -1;
      i64toi32_i32$2 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
      $2_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
      $2$hi = i64toi32_i32$2;
      $451_1 = $2_1;
      $451$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $1$hi;
      i64toi32_i32$5 = $1_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 62;
      i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $518_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
       $518_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
      }
      $453_1 = $518_1;
      $453$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $11$hi;
      i64toi32_i32$2 = $11_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$3 = 2;
      i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
       $521_1 = 0;
      } else {
       i64toi32_i32$5 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
       $521_1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
      }
      $455$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $453$hi;
      i64toi32_i32$1 = $453_1;
      i64toi32_i32$2 = $455$hi;
      i64toi32_i32$3 = $521_1;
      i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
      i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = -1;
      i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
      $4_1 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
      $4$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $451$hi;
      i64toi32_i32$5 = $4$hi;
      i64toi32_i32$5 = __wasm_i64_mul($451_1 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $16_1 = i64toi32_i32$5;
      $16$hi = i64toi32_i32$1;
      $460_1 = i64toi32_i32$5;
      $460$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$2 = $1_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$3 = 30;
      i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = 0;
       $522_1 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
      } else {
       i64toi32_i32$5 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
       $522_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$0 | 0) | 0;
      }
      i64toi32_i32$1 = $522_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = -1;
      i64toi32_i32$2 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
      $13_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
      $13$hi = i64toi32_i32$2;
      $464_1 = $13_1;
      $464$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $15$hi;
      i64toi32_i32$5 = $15_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $523_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
       $523_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
      }
      $15_1 = $523_1;
      $15$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $464$hi;
      i64toi32_i32$5 = $15$hi;
      i64toi32_i32$5 = __wasm_i64_mul($464_1 | 0, i64toi32_i32$1 | 0, $15_1 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $468_1 = i64toi32_i32$5;
      $468$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $460$hi;
      i64toi32_i32$2 = $460_1;
      i64toi32_i32$5 = $468$hi;
      i64toi32_i32$3 = $468_1;
      i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $18_1 = i64toi32_i32$0;
      $18$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $16$hi;
      i64toi32_i32$4 = $18$hi;
      i64toi32_i32$1 = i64toi32_i32$0;
      i64toi32_i32$2 = $16$hi;
      i64toi32_i32$3 = $16_1;
      $472_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      $473_1 = $472_1;
      $473$hi = i64toi32_i32$1;
      i64toi32_i32$1 = i64toi32_i32$4;
      $474_1 = i64toi32_i32$0;
      $474$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $17$hi;
      i64toi32_i32$3 = $17_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$2 = 32;
      i64toi32_i32$5 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = 0;
       $524_1 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
      } else {
       i64toi32_i32$4 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
       $524_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$5 | 0) | 0;
      }
      $16_1 = $524_1;
      $16$hi = i64toi32_i32$4;
      $477_1 = $16_1;
      $477$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $11$hi;
      i64toi32_i32$1 = $11_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$2 = 30;
      i64toi32_i32$5 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = 0;
       $525_1 = i64toi32_i32$4 >>> i64toi32_i32$5 | 0;
      } else {
       i64toi32_i32$3 = i64toi32_i32$4 >>> i64toi32_i32$5 | 0;
       $525_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$5 | 0) | 0;
      }
      i64toi32_i32$4 = $525_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$2 = -262145;
      i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
      i64toi32_i32$3 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
      i64toi32_i32$4 = 0;
      i64toi32_i32$2 = 262144;
      i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
      $11_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
      $11$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $477$hi;
      i64toi32_i32$3 = $11$hi;
      i64toi32_i32$3 = __wasm_i64_mul($477_1 | 0, i64toi32_i32$4 | 0, $11_1 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $483_1 = i64toi32_i32$3;
      $483$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $474$hi;
      i64toi32_i32$1 = $474_1;
      i64toi32_i32$3 = $483$hi;
      i64toi32_i32$2 = $483_1;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
      i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $19_1 = i64toi32_i32$5;
      $19$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$0 = $19$hi;
      i64toi32_i32$4 = i64toi32_i32$5;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$2 = $18_1;
      $487_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
      i64toi32_i32$4 = 0;
      $488$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $473$hi;
      i64toi32_i32$2 = $473_1;
      i64toi32_i32$0 = $488$hi;
      i64toi32_i32$1 = $487_1;
      i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $489$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $11$hi;
      i64toi32_i32$5 = $15$hi;
      i64toi32_i32$5 = $11$hi;
      i64toi32_i32$2 = $15$hi;
      i64toi32_i32$2 = __wasm_i64_mul($11_1 | 0, i64toi32_i32$5 | 0, $15_1 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $492_1 = i64toi32_i32$2;
      $492$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $489$hi;
      i64toi32_i32$4 = i64toi32_i32$3;
      i64toi32_i32$2 = $492$hi;
      i64toi32_i32$1 = $492_1;
      i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
      i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $493_1 = i64toi32_i32$0;
      $493$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$3 = $11$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$4 = $11$hi;
      i64toi32_i32$4 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$3 | 0, $11_1 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $20_1 = i64toi32_i32$4;
      $20$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$3 = $15$hi;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$4 = $15$hi;
      i64toi32_i32$4 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$3 | 0, $15_1 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $500_1 = i64toi32_i32$4;
      $500$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $20$hi;
      i64toi32_i32$5 = $20_1;
      i64toi32_i32$4 = $500$hi;
      i64toi32_i32$1 = $500_1;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
      i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $18_1 = i64toi32_i32$2;
      $18$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $20$hi;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$3 = i64toi32_i32$2;
      i64toi32_i32$5 = $20$hi;
      i64toi32_i32$1 = $20_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
       $526_1 = 0;
      } else {
       i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
       $526_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      }
      $506_1 = $526_1;
      $506$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$3 = $18_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $527_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
       $527_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
      }
      $508$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $506$hi;
      i64toi32_i32$0 = $506_1;
      i64toi32_i32$3 = $508$hi;
      i64toi32_i32$5 = $527_1;
      i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
      $509_1 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
      $509$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $493$hi;
      i64toi32_i32$1 = $493_1;
      i64toi32_i32$0 = $509$hi;
      i64toi32_i32$5 = $509_1;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $510_1 = i64toi32_i32$4;
      $510$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $19$hi;
      $511_1 = $19_1;
      $511$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $18$hi;
      i64toi32_i32$3 = $18_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
       $528_1 = 0;
      } else {
       i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$0 | 0) | 0;
       $528_1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
      }
      $513$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $511$hi;
      i64toi32_i32$2 = $511_1;
      i64toi32_i32$3 = $513$hi;
      i64toi32_i32$5 = $528_1;
      i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $18_1 = i64toi32_i32$0;
      $18$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $19$hi;
      i64toi32_i32$4 = $18$hi;
      i64toi32_i32$1 = i64toi32_i32$0;
      i64toi32_i32$2 = $19$hi;
      i64toi32_i32$5 = $19_1;
      $517_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      $518$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $510$hi;
      i64toi32_i32$5 = $510_1;
      i64toi32_i32$4 = $518$hi;
      i64toi32_i32$2 = $517_1;
      i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $519_1 = i64toi32_i32$3;
      $519$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $18$hi;
      $520_1 = $18_1;
      $520$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$0 = $13$hi;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$5 = $13$hi;
      i64toi32_i32$5 = __wasm_i64_mul($16_1 | 0, i64toi32_i32$0 | 0, $13_1 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $20_1 = i64toi32_i32$5;
      $20$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $17$hi;
      i64toi32_i32$1 = $17_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$2 = -1;
      i64toi32_i32$5 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
      $17_1 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
      $17$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $4$hi;
      i64toi32_i32$5 = $17$hi;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$1 = __wasm_i64_mul($17_1 | 0, i64toi32_i32$5 | 0, $4_1 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $529_1 = i64toi32_i32$1;
      $529$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $20$hi;
      i64toi32_i32$0 = $20_1;
      i64toi32_i32$1 = $529$hi;
      i64toi32_i32$2 = $529_1;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $19_1 = i64toi32_i32$4;
      $19$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $20$hi;
      i64toi32_i32$3 = $19$hi;
      i64toi32_i32$5 = i64toi32_i32$4;
      i64toi32_i32$0 = $20$hi;
      i64toi32_i32$2 = $20_1;
      i64toi32_i32$5 = 0;
      $534_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
      $534$hi = i64toi32_i32$5;
      i64toi32_i32$5 = i64toi32_i32$3;
      $535_1 = i64toi32_i32$4;
      $535$hi = i64toi32_i32$3;
      i64toi32_i32$5 = $2$hi;
      $536_1 = $2_1;
      $536$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $1$hi;
      i64toi32_i32$2 = $1_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = 2;
      i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
       $530_1 = 0;
      } else {
       i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$1 | 0) | 0;
       $530_1 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
      }
      i64toi32_i32$5 = $530_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$0 = -4;
      i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
      $20_1 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
      $20$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $536$hi;
      i64toi32_i32$5 = $20$hi;
      i64toi32_i32$5 = __wasm_i64_mul($536_1 | 0, i64toi32_i32$2 | 0, $20_1 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $541_1 = i64toi32_i32$5;
      $541$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $535$hi;
      i64toi32_i32$3 = $535_1;
      i64toi32_i32$5 = $541$hi;
      i64toi32_i32$0 = $541_1;
      i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $21_1 = i64toi32_i32$1;
      $21$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $19$hi;
      i64toi32_i32$4 = $21$hi;
      i64toi32_i32$2 = i64toi32_i32$1;
      i64toi32_i32$3 = $19$hi;
      i64toi32_i32$0 = $19_1;
      $545_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
      i64toi32_i32$2 = 0;
      $546$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $534$hi;
      i64toi32_i32$0 = $534_1;
      i64toi32_i32$4 = $546$hi;
      i64toi32_i32$3 = $545_1;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $547$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $520$hi;
      i64toi32_i32$2 = $520_1;
      i64toi32_i32$0 = $547$hi;
      i64toi32_i32$3 = i64toi32_i32$5;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $19_1 = i64toi32_i32$4;
      $19$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$5 = $19$hi;
      i64toi32_i32$1 = i64toi32_i32$4;
      i64toi32_i32$2 = $18$hi;
      i64toi32_i32$3 = $18_1;
      $551_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      $552$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $519$hi;
      i64toi32_i32$3 = $519_1;
      i64toi32_i32$5 = $552$hi;
      i64toi32_i32$2 = $551_1;
      i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $553_1 = i64toi32_i32$0;
      $553$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $19$hi;
      $554_1 = $19_1;
      $554$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $20$hi;
      i64toi32_i32$4 = $15$hi;
      i64toi32_i32$4 = $20$hi;
      i64toi32_i32$3 = $15$hi;
      i64toi32_i32$3 = __wasm_i64_mul($20_1 | 0, i64toi32_i32$4 | 0, $15_1 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $18_1 = i64toi32_i32$3;
      $18$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$4 = $11$hi;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$3 = $11$hi;
      i64toi32_i32$3 = __wasm_i64_mul($17_1 | 0, i64toi32_i32$4 | 0, $11_1 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $561_1 = i64toi32_i32$3;
      $561$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $18$hi;
      i64toi32_i32$1 = $18_1;
      i64toi32_i32$3 = $561$hi;
      i64toi32_i32$2 = $561_1;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
      i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $15_1 = i64toi32_i32$5;
      $15$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$1 = __wasm_i64_mul($16_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $566_1 = i64toi32_i32$1;
      $566$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $15$hi;
      i64toi32_i32$4 = i64toi32_i32$5;
      i64toi32_i32$1 = $566$hi;
      i64toi32_i32$2 = $566_1;
      i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $4_1 = i64toi32_i32$3;
      $4$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$5 = $13$hi;
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$4 = $13$hi;
      i64toi32_i32$4 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$5 | 0, $13_1 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $571_1 = i64toi32_i32$4;
      $571$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $4$hi;
      i64toi32_i32$0 = i64toi32_i32$3;
      i64toi32_i32$4 = $571$hi;
      i64toi32_i32$2 = $571_1;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $2_1 = i64toi32_i32$1;
      $2$hi = i64toi32_i32$3;
      i64toi32_i32$5 = i64toi32_i32$1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$2 = 32;
      i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = 0;
       $531_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
       $531_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$4 | 0) | 0;
      }
      $574_1 = $531_1;
      $574$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $15$hi;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$0 = $15$hi;
      i64toi32_i32$3 = $15_1;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$2 = $18_1;
      $577_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
      i64toi32_i32$3 = 0;
      $578$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$3 = i64toi32_i32$0;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$2 = $4_1;
      i64toi32_i32$5 = $15_1;
      $581_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$2 = 0;
      $582$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $578$hi;
      i64toi32_i32$5 = $577_1;
      i64toi32_i32$3 = $582$hi;
      i64toi32_i32$0 = $581_1;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $583$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$5 = $4$hi;
      i64toi32_i32$0 = $4_1;
      $586_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
      i64toi32_i32$2 = 0;
      $587$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $583$hi;
      i64toi32_i32$0 = i64toi32_i32$4;
      i64toi32_i32$1 = $587$hi;
      i64toi32_i32$5 = $586_1;
      i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      i64toi32_i32$2 = i64toi32_i32$3;
      i64toi32_i32$0 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
       $532_1 = 0;
      } else {
       i64toi32_i32$0 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
       $532_1 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
      }
      $589$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $574$hi;
      i64toi32_i32$4 = $574_1;
      i64toi32_i32$2 = $589$hi;
      i64toi32_i32$5 = $532_1;
      i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
      $590_1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
      $590$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $554$hi;
      i64toi32_i32$0 = $554_1;
      i64toi32_i32$4 = $590$hi;
      i64toi32_i32$5 = $590_1;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
      i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $15_1 = i64toi32_i32$1;
      $15$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $19$hi;
      i64toi32_i32$3 = $15$hi;
      i64toi32_i32$2 = i64toi32_i32$1;
      i64toi32_i32$0 = $19$hi;
      i64toi32_i32$5 = $19_1;
      $594_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$2 = 0;
      $595$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $553$hi;
      i64toi32_i32$5 = $553_1;
      i64toi32_i32$3 = $595$hi;
      i64toi32_i32$0 = $594_1;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $596_1 = i64toi32_i32$4;
      $596$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $15$hi;
      $597_1 = $15_1;
      $597$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $21$hi;
      $598_1 = $21_1;
      $598$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $16$hi;
      i64toi32_i32$1 = $20$hi;
      i64toi32_i32$1 = $16$hi;
      i64toi32_i32$5 = $20$hi;
      i64toi32_i32$5 = __wasm_i64_mul($16_1 | 0, i64toi32_i32$1 | 0, $20_1 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $4_1 = i64toi32_i32$5;
      $4$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $17$hi;
      i64toi32_i32$1 = $13$hi;
      i64toi32_i32$1 = $17$hi;
      i64toi32_i32$5 = $13$hi;
      i64toi32_i32$5 = __wasm_i64_mul($17_1 | 0, i64toi32_i32$1 | 0, $13_1 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $605_1 = i64toi32_i32$5;
      $605$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$2 = $4_1;
      i64toi32_i32$5 = $605$hi;
      i64toi32_i32$0 = $605_1;
      i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $13_1 = i64toi32_i32$3;
      $13$hi = i64toi32_i32$4;
      i64toi32_i32$1 = i64toi32_i32$3;
      i64toi32_i32$2 = 0;
      i64toi32_i32$0 = 32;
      i64toi32_i32$5 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = 0;
       $533_1 = i64toi32_i32$4 >>> i64toi32_i32$5 | 0;
      } else {
       i64toi32_i32$2 = i64toi32_i32$4 >>> i64toi32_i32$5 | 0;
       $533_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$5 | 0) | 0;
      }
      $608_1 = $533_1;
      $608$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $13$hi;
      i64toi32_i32$2 = $4$hi;
      i64toi32_i32$2 = $13$hi;
      i64toi32_i32$4 = $13_1;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$0 = $4_1;
      $611_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
      i64toi32_i32$4 = 0;
      i64toi32_i32$0 = $611_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$1 = 32;
      i64toi32_i32$5 = i64toi32_i32$1 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
       $537_1 = 0;
      } else {
       i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$5 | 0) | 0;
       $537_1 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
      }
      $613$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $608$hi;
      i64toi32_i32$4 = $608_1;
      i64toi32_i32$0 = $613$hi;
      i64toi32_i32$1 = $537_1;
      i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
      $614_1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
      $614$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $598$hi;
      i64toi32_i32$2 = $598_1;
      i64toi32_i32$4 = $614$hi;
      i64toi32_i32$1 = $614_1;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
      i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $4_1 = i64toi32_i32$5;
      $4$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $21$hi;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$0 = i64toi32_i32$5;
      i64toi32_i32$2 = $21$hi;
      i64toi32_i32$1 = $21_1;
      $618_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
      i64toi32_i32$0 = 0;
      $619_1 = $618_1;
      $619$hi = i64toi32_i32$0;
      i64toi32_i32$0 = i64toi32_i32$3;
      $620_1 = i64toi32_i32$5;
      $620$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$1 = $2_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$2 = 32;
      i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
       $538_1 = 0;
      } else {
       i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
       $538_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      }
      $622$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $620$hi;
      i64toi32_i32$0 = $620_1;
      i64toi32_i32$1 = $622$hi;
      i64toi32_i32$2 = $538_1;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $623$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $4$hi;
      i64toi32_i32$5 = $623$hi;
      i64toi32_i32$3 = i64toi32_i32$4;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$2 = $4_1;
      $625_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
      i64toi32_i32$3 = 0;
      $626$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $619$hi;
      i64toi32_i32$2 = $619_1;
      i64toi32_i32$5 = $626$hi;
      i64toi32_i32$0 = $625_1;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $627$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $597$hi;
      i64toi32_i32$3 = $597_1;
      i64toi32_i32$2 = $627$hi;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $4_1 = i64toi32_i32$5;
      $4$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $15$hi;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$4 = i64toi32_i32$5;
      i64toi32_i32$3 = $15$hi;
      i64toi32_i32$0 = $15_1;
      $631_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
      i64toi32_i32$4 = 0;
      $632$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $596$hi;
      i64toi32_i32$0 = $596_1;
      i64toi32_i32$1 = $632$hi;
      i64toi32_i32$3 = $631_1;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $2_1 = i64toi32_i32$2;
      $2$hi = i64toi32_i32$5;
      i64toi32_i32$4 = i64toi32_i32$2;
      i64toi32_i32$0 = 131071;
      i64toi32_i32$3 = -1;
      if (i64toi32_i32$5 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
       break label$13
      }
      i64toi32_i32$4 = $1$hi;
      i64toi32_i32$3 = $1_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$0 = 49;
      i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
       $539_1 = 0;
      } else {
       i64toi32_i32$5 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
       $539_1 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
      }
      $637$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $4$hi;
      i64toi32_i32$4 = $4_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = -1;
      i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
      $1_1 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
      $1$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$5 = $3_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$0 = -1;
      i64toi32_i32$4 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
      $13_1 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
      $13$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $1$hi;
      i64toi32_i32$5 = $13$hi;
      i64toi32_i32$5 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$4 | 0, $13_1 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $15_1 = i64toi32_i32$5;
      $15$hi = i64toi32_i32$4;
      i64toi32_i32$3 = i64toi32_i32$5;
      i64toi32_i32$5 = 0;
      i64toi32_i32$0 = 0;
      $646_1 = (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$4 | 0) != (i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$3 = 0;
      $647$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $637$hi;
      i64toi32_i32$0 = $539_1;
      i64toi32_i32$4 = $647$hi;
      i64toi32_i32$5 = $646_1;
      i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
      i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0;
      i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
      i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
      $648_1 = i64toi32_i32$1;
      $648$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $15$hi;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = $15$hi;
      i64toi32_i32$5 = $15_1;
      i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
      i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0;
      i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$1 | 0;
      $17_1 = i64toi32_i32$4;
      $17$hi = i64toi32_i32$1;
      $651_1 = i64toi32_i32$4;
      $651$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$2 = $4_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = 0;
       $540_1 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
      } else {
       i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
       $540_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$0 | 0) | 0;
      }
      $15_1 = $540_1;
      $15$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $13$hi;
      i64toi32_i32$3 = $15$hi;
      i64toi32_i32$2 = $13$hi;
      i64toi32_i32$2 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$3 | 0, $13_1 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $18_1 = i64toi32_i32$2;
      $18$hi = i64toi32_i32$3;
      $657_1 = i64toi32_i32$2;
      $657$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $1$hi;
      $658_1 = $1_1;
      $658$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$1 = $3_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = 0;
       $542_1 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
      } else {
       i64toi32_i32$2 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
       $542_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
      }
      $16_1 = $542_1;
      $16$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $658$hi;
      i64toi32_i32$1 = $16$hi;
      i64toi32_i32$1 = __wasm_i64_mul($658_1 | 0, i64toi32_i32$2 | 0, $16_1 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $662_1 = i64toi32_i32$1;
      $662$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $657$hi;
      i64toi32_i32$3 = $657_1;
      i64toi32_i32$1 = $662$hi;
      i64toi32_i32$5 = $662_1;
      i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $11_1 = i64toi32_i32$0;
      $11$hi = i64toi32_i32$4;
      i64toi32_i32$2 = i64toi32_i32$0;
      i64toi32_i32$3 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
       $543_1 = 0;
      } else {
       i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
       $543_1 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
      }
      $19_1 = $543_1;
      $19$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $651$hi;
      i64toi32_i32$4 = $651_1;
      i64toi32_i32$2 = $19$hi;
      i64toi32_i32$5 = $19_1;
      $667_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$4 = 0;
      $668$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $648$hi;
      i64toi32_i32$5 = $648_1;
      i64toi32_i32$3 = $668$hi;
      i64toi32_i32$2 = $667_1;
      i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
      i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0;
      i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$4 - i64toi32_i32$0 | 0;
      $669_1 = i64toi32_i32$1;
      $669$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $4$hi;
      $670_1 = $4_1;
      $670$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $14$hi;
      i64toi32_i32$4 = $14_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$2 = 32;
      i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = 0;
       $544_1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
      } else {
       i64toi32_i32$5 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
       $544_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
      }
      $672$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $670$hi;
      i64toi32_i32$4 = $672$hi;
      i64toi32_i32$4 = __wasm_i64_mul($670_1 | 0, i64toi32_i32$5 | 0, $544_1 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $673_1 = i64toi32_i32$4;
      $673$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $3$hi;
      $674_1 = $3_1;
      $674$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$0 = $2_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$2 = 32;
      i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = 0;
       $546_1 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
      } else {
       i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
       $546_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
      }
      $676$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $674$hi;
      i64toi32_i32$0 = $676$hi;
      i64toi32_i32$0 = __wasm_i64_mul($674_1 | 0, i64toi32_i32$4 | 0, $546_1 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $677_1 = i64toi32_i32$0;
      $677$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $673$hi;
      i64toi32_i32$5 = $673_1;
      i64toi32_i32$0 = $677$hi;
      i64toi32_i32$2 = $677_1;
      i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $678$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$1 = $16$hi;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$5 = $16$hi;
      i64toi32_i32$5 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$1 | 0, $16_1 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $681_1 = i64toi32_i32$5;
      $681$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $678$hi;
      i64toi32_i32$4 = i64toi32_i32$3;
      i64toi32_i32$5 = $681$hi;
      i64toi32_i32$2 = $681_1;
      i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
      i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $682$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $15$hi;
      i64toi32_i32$3 = $10$hi;
      i64toi32_i32$3 = $15$hi;
      i64toi32_i32$4 = $10$hi;
      i64toi32_i32$4 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $685_1 = i64toi32_i32$4;
      $685$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $682$hi;
      i64toi32_i32$1 = i64toi32_i32$0;
      i64toi32_i32$4 = $685$hi;
      i64toi32_i32$2 = $685_1;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
      i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      i64toi32_i32$3 = i64toi32_i32$5;
      i64toi32_i32$1 = 0;
      i64toi32_i32$2 = 32;
      i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
       $547_1 = 0;
      } else {
       i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
       $547_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
      }
      $687_1 = $547_1;
      $687$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$0 = $2_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$2 = -1;
      i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
      $689$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $13$hi;
      i64toi32_i32$3 = $689$hi;
      $578_1 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
      i64toi32_i32$0 = $13$hi;
      i64toi32_i32$0 = __wasm_i64_mul($578_1 | 0, i64toi32_i32$3 | 0, $13_1 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $691_1 = i64toi32_i32$0;
      $691$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $1$hi;
      i64toi32_i32$3 = $10$hi;
      i64toi32_i32$1 = $10_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$2 = -1;
      i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
      $694_1 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
      $694$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $1$hi;
      i64toi32_i32$1 = $694$hi;
      i64toi32_i32$1 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$0 | 0, $694_1 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $695_1 = i64toi32_i32$1;
      $695$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $691$hi;
      i64toi32_i32$3 = $691_1;
      i64toi32_i32$1 = $695$hi;
      i64toi32_i32$2 = $695_1;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $696$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $15$hi;
      i64toi32_i32$5 = $16$hi;
      i64toi32_i32$5 = $15$hi;
      i64toi32_i32$3 = $16$hi;
      i64toi32_i32$3 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$5 | 0, $16_1 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $699_1 = i64toi32_i32$3;
      $699$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $696$hi;
      i64toi32_i32$0 = i64toi32_i32$4;
      i64toi32_i32$3 = $699$hi;
      i64toi32_i32$2 = $699_1;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $700_1 = i64toi32_i32$1;
      $700$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $11$hi;
      i64toi32_i32$5 = $11_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$2 = 32;
      i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = 0;
       $548_1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
       $548_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
      }
      $702_1 = $548_1;
      $702$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $11$hi;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$0 = $11$hi;
      i64toi32_i32$4 = $11_1;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$2 = $18_1;
      $705_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
      i64toi32_i32$4 = 0;
      i64toi32_i32$2 = $705_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
       $549_1 = 0;
      } else {
       i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
       $549_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
      }
      $707$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $702$hi;
      i64toi32_i32$4 = $702_1;
      i64toi32_i32$2 = $707$hi;
      i64toi32_i32$5 = $549_1;
      i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
      $708_1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
      $708$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $700$hi;
      i64toi32_i32$0 = $700_1;
      i64toi32_i32$4 = $708$hi;
      i64toi32_i32$5 = $708_1;
      i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $709$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $687$hi;
      i64toi32_i32$2 = $687_1;
      i64toi32_i32$0 = $709$hi;
      i64toi32_i32$5 = i64toi32_i32$3;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $710$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $669$hi;
      i64toi32_i32$1 = $669_1;
      i64toi32_i32$2 = $710$hi;
      i64toi32_i32$5 = i64toi32_i32$4;
      i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
      i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0;
      i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
      i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$4 | 0;
      $13_1 = i64toi32_i32$0;
      $13$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$4 = $19$hi;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$3 = $17_1;
      i64toi32_i32$1 = $19$hi;
      i64toi32_i32$5 = $19_1;
      i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
      i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0;
      i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
      i64toi32_i32$0 = i64toi32_i32$4 - i64toi32_i32$0 | 0;
      $1_1 = i64toi32_i32$2;
      $1$hi = i64toi32_i32$0;
      $6_1 = $6_1 + -1 | 0;
      break label$12;
     }
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$4 = $4_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 33;
     i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $550_1 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
      $550_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
     }
     $16_1 = $550_1;
     $16$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 48;
     i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
      $552_1 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$1 | 0) | 0;
      $552_1 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
     }
     $720_1 = $552_1;
     $720$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $555_1 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$0 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
      $555_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
     }
     $722_1 = $555_1;
     $722$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$4 = $2_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 63;
     i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
      $556_1 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$1 | 0) | 0;
      $556_1 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
     }
     $724$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $722$hi;
     i64toi32_i32$0 = $722_1;
     i64toi32_i32$4 = $724$hi;
     i64toi32_i32$5 = $556_1;
     i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
     $4_1 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
     $4$hi = i64toi32_i32$4;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$5 = -1;
     i64toi32_i32$0 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
     $1_1 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
     $1$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$4 = $3_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = -1;
     i64toi32_i32$3 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
     $13_1 = i64toi32_i32$4 & i64toi32_i32$5 | 0;
     $13$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$4 = $13$hi;
     i64toi32_i32$4 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$3 | 0, $13_1 | 0, i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $15_1 = i64toi32_i32$4;
     $15$hi = i64toi32_i32$3;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 0;
     $734_1 = (i64toi32_i32$0 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$0 = 0;
     $735$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $720$hi;
     i64toi32_i32$5 = $720_1;
     i64toi32_i32$3 = $735$hi;
     i64toi32_i32$4 = $734_1;
     i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
     i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0;
     i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
     $736_1 = i64toi32_i32$1;
     $736$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $15$hi;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$5 = $15$hi;
     i64toi32_i32$4 = $15_1;
     i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
     i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0;
     i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
     i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$1 | 0;
     $11_1 = i64toi32_i32$3;
     $11$hi = i64toi32_i32$1;
     $739_1 = i64toi32_i32$3;
     $739$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     $740_1 = $1_1;
     $740$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$2 = $3_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$4 = 32;
     i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $557_1 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
     } else {
      i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
      $557_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
     }
     $15_1 = $557_1;
     $15$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $740$hi;
     i64toi32_i32$2 = $15$hi;
     i64toi32_i32$2 = __wasm_i64_mul($740_1 | 0, i64toi32_i32$0 | 0, $15_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $17_1 = i64toi32_i32$2;
     $17$hi = i64toi32_i32$0;
     $745_1 = i64toi32_i32$2;
     $745$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $16$hi;
     $746_1 = $16_1;
     $746$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$4 = 31;
     i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
      $558_1 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$5 | 0) | 0;
      $558_1 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
     }
     $748$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $746$hi;
     i64toi32_i32$0 = $746_1;
     i64toi32_i32$1 = $748$hi;
     i64toi32_i32$4 = $558_1;
     i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $18_1 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
     $18$hi = i64toi32_i32$1;
     i64toi32_i32$2 = $18_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$4 = -1;
     i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
     $19_1 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
     $19$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $13$hi;
     i64toi32_i32$0 = $19$hi;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$2 = __wasm_i64_mul($19_1 | 0, i64toi32_i32$0 | 0, $13_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $754_1 = i64toi32_i32$2;
     $754$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $745$hi;
     i64toi32_i32$1 = $745_1;
     i64toi32_i32$2 = $754$hi;
     i64toi32_i32$4 = $754_1;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $16_1 = i64toi32_i32$5;
     $16$hi = i64toi32_i32$3;
     i64toi32_i32$0 = i64toi32_i32$5;
     i64toi32_i32$1 = 0;
     i64toi32_i32$4 = 32;
     i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
      $559_1 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$2 | 0) | 0;
      $559_1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
     }
     $20_1 = $559_1;
     $20$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $739$hi;
     i64toi32_i32$3 = $739_1;
     i64toi32_i32$0 = $20$hi;
     i64toi32_i32$4 = $20_1;
     $759_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $760$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $736$hi;
     i64toi32_i32$4 = $736_1;
     i64toi32_i32$1 = $760$hi;
     i64toi32_i32$0 = $759_1;
     i64toi32_i32$2 = i64toi32_i32$4 - i64toi32_i32$0 | 0;
     i64toi32_i32$6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0;
     i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
     $761_1 = i64toi32_i32$2;
     $761$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $4$hi;
     $762_1 = $4_1;
     $762$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $14$hi;
     i64toi32_i32$3 = $14_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $560_1 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
      $560_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
     }
     $764$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $762$hi;
     i64toi32_i32$3 = $764$hi;
     i64toi32_i32$3 = __wasm_i64_mul($762_1 | 0, i64toi32_i32$4 | 0, $560_1 | 0, i64toi32_i32$3 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $765_1 = i64toi32_i32$3;
     $765$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $3$hi;
     $766_1 = $3_1;
     $766$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$5 = $2_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 33;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $562_1 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
      $562_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
     }
     $768$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $766$hi;
     i64toi32_i32$5 = $768$hi;
     i64toi32_i32$5 = __wasm_i64_mul($766_1 | 0, i64toi32_i32$3 | 0, $562_1 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $769_1 = i64toi32_i32$5;
     $769$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $765$hi;
     i64toi32_i32$4 = $765_1;
     i64toi32_i32$5 = $769$hi;
     i64toi32_i32$0 = $769_1;
     i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $770_1 = i64toi32_i32$1;
     $770$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$3 = $2_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = 1;
     i64toi32_i32$5 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $563_1 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
      $563_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$5 | 0) | 0;
     }
     $2_1 = $563_1;
     $2$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $15$hi;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$3 = $15$hi;
     i64toi32_i32$3 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$4 | 0, $15_1 | 0, i64toi32_i32$3 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $775_1 = i64toi32_i32$3;
     $775$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $770$hi;
     i64toi32_i32$2 = $770_1;
     i64toi32_i32$3 = $775$hi;
     i64toi32_i32$0 = $775_1;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $776$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $18$hi;
     i64toi32_i32$1 = $10$hi;
     i64toi32_i32$1 = $18$hi;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$2 = __wasm_i64_mul($18_1 | 0, i64toi32_i32$1 | 0, $10_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $779_1 = i64toi32_i32$2;
     $779$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $776$hi;
     i64toi32_i32$4 = i64toi32_i32$5;
     i64toi32_i32$2 = $779$hi;
     i64toi32_i32$0 = $779_1;
     i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     i64toi32_i32$1 = i64toi32_i32$3;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
      $564_1 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
      $564_1 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
     }
     $781_1 = $564_1;
     $781$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $19$hi;
     i64toi32_i32$4 = $15$hi;
     i64toi32_i32$4 = $19$hi;
     i64toi32_i32$1 = $15$hi;
     i64toi32_i32$1 = __wasm_i64_mul($19_1 | 0, i64toi32_i32$4 | 0, $15_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $784_1 = i64toi32_i32$1;
     $784$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$5 = $2_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = -1;
     i64toi32_i32$1 = i64toi32_i32$4 & i64toi32_i32$1 | 0;
     $786$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $13$hi;
     i64toi32_i32$1 = $786$hi;
     $579_1 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
     i64toi32_i32$5 = $13$hi;
     i64toi32_i32$5 = __wasm_i64_mul($579_1 | 0, i64toi32_i32$1 | 0, $13_1 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $788_1 = i64toi32_i32$5;
     $788$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $784$hi;
     i64toi32_i32$4 = $784_1;
     i64toi32_i32$5 = $788$hi;
     i64toi32_i32$0 = $788_1;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $789$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$3 = $10$hi;
     i64toi32_i32$1 = $10_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = -1;
     i64toi32_i32$4 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
     $792_1 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
     $792$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$1 = $792$hi;
     i64toi32_i32$1 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$4 | 0, $792_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $793_1 = i64toi32_i32$1;
     $793$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $789$hi;
     i64toi32_i32$3 = i64toi32_i32$2;
     i64toi32_i32$1 = $793$hi;
     i64toi32_i32$0 = $793_1;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $794_1 = i64toi32_i32$5;
     $794$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $16$hi;
     i64toi32_i32$4 = $16_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $565_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
      $565_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
     }
     $796_1 = $565_1;
     $796$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $16$hi;
     i64toi32_i32$3 = $17$hi;
     i64toi32_i32$3 = $16$hi;
     i64toi32_i32$2 = $16_1;
     i64toi32_i32$4 = $17$hi;
     i64toi32_i32$0 = $17_1;
     $799_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = $799_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$4 = 32;
     i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
      $567_1 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$1 | 0) | 0;
      $567_1 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
     }
     $801$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $796$hi;
     i64toi32_i32$2 = $796_1;
     i64toi32_i32$0 = $801$hi;
     i64toi32_i32$4 = $567_1;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     $802_1 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
     $802$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $794$hi;
     i64toi32_i32$3 = $794_1;
     i64toi32_i32$2 = $802$hi;
     i64toi32_i32$4 = $802_1;
     i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $803$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $781$hi;
     i64toi32_i32$0 = $781_1;
     i64toi32_i32$3 = $803$hi;
     i64toi32_i32$4 = i64toi32_i32$1;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $804$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $761$hi;
     i64toi32_i32$5 = $761_1;
     i64toi32_i32$0 = $804$hi;
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
     i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0;
     i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
     i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
     $13_1 = i64toi32_i32$3;
     $13$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $11$hi;
     i64toi32_i32$2 = $20$hi;
     i64toi32_i32$2 = $11$hi;
     i64toi32_i32$1 = $11_1;
     i64toi32_i32$5 = $20$hi;
     i64toi32_i32$4 = $20_1;
     i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$4 | 0;
     i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0;
     i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
     i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
     $1_1 = i64toi32_i32$0;
     $1$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $2$hi;
     $2$hi = i64toi32_i32$3;
    }
    label$14 : {
     if (($6_1 | 0) < (16384 | 0)) {
      break label$14
     }
     i64toi32_i32$3 = $12$hi;
     i64toi32_i32$2 = $12_1;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$4 = 0;
     i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $12_1 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
     $12$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$1;
     break label$2;
    }
    $7_1 = $6_1 + 16383 | 0;
    label$15 : {
     if (($6_1 | 0) > (-16383 | 0)) {
      break label$15
     }
     label$16 : {
      if ($7_1) {
       break label$16
      }
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$3 = $2_1;
      i64toi32_i32$2 = 65535;
      i64toi32_i32$4 = -1;
      i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
      $820_1 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
      $820$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $4$hi;
      $821_1 = $4_1;
      $821$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $1$hi;
      i64toi32_i32$1 = $1_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$4 = 1;
      i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
       $568_1 = 0;
      } else {
       i64toi32_i32$3 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$5 | 0) | 0;
       $568_1 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
      }
      $823$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$3 = $823$hi;
      i64toi32_i32$2 = $568_1;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$4 = $3_1;
      $825_1 = i64toi32_i32$3 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0;
      i64toi32_i32$2 = $13$hi;
      i64toi32_i32$4 = $13_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$1 = 1;
      i64toi32_i32$5 = i64toi32_i32$1 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$5 | 0;
       $569_1 = 0;
      } else {
       i64toi32_i32$3 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$5 | 0) | 0;
       $569_1 = i64toi32_i32$4 << i64toi32_i32$5 | 0;
      }
      $827_1 = $569_1;
      $827$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $1$hi;
      i64toi32_i32$2 = $1_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$1 = 63;
      i64toi32_i32$5 = i64toi32_i32$1 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = 0;
       $570_1 = i64toi32_i32$3 >>> i64toi32_i32$5 | 0;
      } else {
       i64toi32_i32$4 = i64toi32_i32$3 >>> i64toi32_i32$5 | 0;
       $570_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
      }
      $829$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $827$hi;
      i64toi32_i32$3 = $827_1;
      i64toi32_i32$2 = $829$hi;
      i64toi32_i32$1 = $570_1;
      i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
      $1_1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
      $1$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $14$hi;
      i64toi32_i32$2 = $1$hi;
      i64toi32_i32$4 = $1_1;
      i64toi32_i32$3 = $14$hi;
      i64toi32_i32$1 = $14_1;
      $833_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$2;
      i64toi32_i32$4 = i64toi32_i32$3;
      i64toi32_i32$4 = i64toi32_i32$2;
      i64toi32_i32$1 = $1_1;
      i64toi32_i32$2 = i64toi32_i32$3;
      i64toi32_i32$3 = $14_1;
      $837_1 = (i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) | 0 ? $825_1 : $833_1;
      i64toi32_i32$1 = 0;
      $838$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $821$hi;
      i64toi32_i32$3 = $821_1;
      i64toi32_i32$4 = $838$hi;
      i64toi32_i32$2 = $837_1;
      i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $1_1 = i64toi32_i32$5;
      $1$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$0 = $1$hi;
      i64toi32_i32$1 = i64toi32_i32$5;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$2 = $4_1;
      $842_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      $843$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $820$hi;
      i64toi32_i32$2 = $820_1;
      i64toi32_i32$0 = $843$hi;
      i64toi32_i32$3 = $842_1;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $3_1 = i64toi32_i32$4;
      $3$hi = i64toi32_i32$5;
      i64toi32_i32$1 = i64toi32_i32$4;
      i64toi32_i32$2 = 65536;
      i64toi32_i32$3 = 0;
      i64toi32_i32$2 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
      if (!(i64toi32_i32$1 & i64toi32_i32$3 | 0 | i64toi32_i32$2 | 0)) {
       break label$16
      }
      i64toi32_i32$2 = $3$hi;
      i64toi32_i32$2 = $12$hi;
      i64toi32_i32$2 = $3$hi;
      i64toi32_i32$5 = $3_1;
      i64toi32_i32$1 = $12$hi;
      i64toi32_i32$3 = $12_1;
      i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
      $12_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
      $12$hi = i64toi32_i32$1;
      break label$2;
     }
     i64toi32_i32$1 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$1;
     break label$2;
    }
    i64toi32_i32$1 = 0;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
     $572_1 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
     $572_1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
    }
    $853$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $2$hi;
    i64toi32_i32$1 = $2_1;
    i64toi32_i32$2 = 65535;
    i64toi32_i32$3 = -1;
    i64toi32_i32$2 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
    $855_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
    $855$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $853$hi;
    i64toi32_i32$5 = $572_1;
    i64toi32_i32$1 = $855$hi;
    i64toi32_i32$3 = $855_1;
    i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $856_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $856$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $4$hi;
    $857_1 = $4_1;
    $857$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 1;
    i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
     $573_1 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
     $573_1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
    }
    $859$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $859$hi;
    i64toi32_i32$1 = $573_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$3 = $3_1;
    $861_1 = i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0;
    i64toi32_i32$1 = $13$hi;
    i64toi32_i32$3 = $13_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
     $575_1 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
     $575_1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
    }
    $863_1 = $575_1;
    $863$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = 63;
    i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $576_1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     $576_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
    }
    $865$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $863$hi;
    i64toi32_i32$5 = $863_1;
    i64toi32_i32$1 = $865$hi;
    i64toi32_i32$2 = $576_1;
    i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
    $1_1 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    $1$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $14$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$5 = $14$hi;
    i64toi32_i32$2 = $14_1;
    $869_1 = i64toi32_i32$1 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 >= i64toi32_i32$2 >>> 0 | 0) | 0;
    i64toi32_i32$3 = i64toi32_i32$1;
    i64toi32_i32$3 = i64toi32_i32$5;
    i64toi32_i32$3 = i64toi32_i32$1;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$1 = i64toi32_i32$5;
    i64toi32_i32$5 = $14_1;
    $873_1 = (i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) | 0 ? $861_1 : $869_1;
    i64toi32_i32$2 = 0;
    $874$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $857$hi;
    i64toi32_i32$5 = $857_1;
    i64toi32_i32$3 = $874$hi;
    i64toi32_i32$1 = $873_1;
    i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $1_1 = i64toi32_i32$0;
    $1$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$1 = $4_1;
    $878_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
    i64toi32_i32$2 = 0;
    $879$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $856$hi;
    i64toi32_i32$1 = $856_1;
    i64toi32_i32$4 = $879$hi;
    i64toi32_i32$5 = $878_1;
    i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $880$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $12$hi;
    i64toi32_i32$0 = $880$hi;
    i64toi32_i32$2 = i64toi32_i32$3;
    i64toi32_i32$1 = $12$hi;
    i64toi32_i32$5 = $12_1;
    i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $12_1 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
    $12$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$2 = $0_1;
   HEAP32[i64toi32_i32$2 >> 2] = $1_1;
   HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$1 = $12$hi;
   HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $12_1;
   HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$1;
   global$0 = $5_1 + 192 | 0;
   return;
  }
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = 0;
  HEAP32[i64toi32_i32$2 >> 2] = 0;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $12$hi;
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$5 = $2_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  i64toi32_i32$4 = !(i64toi32_i32$0 | i64toi32_i32$5 | 0 | i64toi32_i32$2 | 0);
  i64toi32_i32$2 = 2147450880;
  i64toi32_i32$0 = $12$hi;
  i64toi32_i32$5 = i64toi32_i32$4 ? 0 : $12_1;
  i64toi32_i32$1 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$0;
  $896_1 = i64toi32_i32$5;
  i64toi32_i32$5 = $0_1;
  HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $896_1;
  HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$1;
  global$0 = $5_1 + 192 | 0;
 }
 
 function $698($0_1, $0$hi, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $4_1 = 0, $4$hi = 0, $5$hi = 0, $5_1 = 0, $2_1 = 0, $3_1 = 0, $42_1 = 0, $43_1 = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, $49_1 = 0, $12_1 = 0, $12$hi = 0, $14$hi = 0, $17_1 = 0, $17$hi = 0, $19$hi = 0, $33$hi = 0, $37_1 = 0, $39_1 = 0, $44_1 = 0, $44$hi = 0, $46$hi = 0, $74_1 = 0, $74$hi = 0, $78$hi = 0, $81_1 = 0, $81$hi = 0, $83_1 = 0, $83$hi = 0, $87_1 = 0, $87$hi = 0, $89_1 = 0, $90$hi = 0, $100$hi = 0, $107_1 = 0, $107$hi = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $4_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $4$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$2 = -1006698496;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $12_1 = i64toi32_i32$4;
    $12$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$0 = -1140785152;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $14$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $12$hi;
    i64toi32_i32$5 = $12_1;
    i64toi32_i32$1 = $14$hi;
    i64toi32_i32$3 = i64toi32_i32$2;
    if (i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$5 = $0$hi;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$1 = 60;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = 0;
     $42_1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     $42_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
    }
    $17_1 = $42_1;
    $17$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$5 = $1_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = 4;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
     $43_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$0 | 0) | 0;
     $43_1 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
    }
    $19$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $17$hi;
    i64toi32_i32$4 = $17_1;
    i64toi32_i32$5 = $19$hi;
    i64toi32_i32$1 = $43_1;
    i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
    $4_1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    $4$hi = i64toi32_i32$5;
    label$3 : {
     i64toi32_i32$5 = $0$hi;
     i64toi32_i32$3 = $0_1;
     i64toi32_i32$4 = 268435455;
     i64toi32_i32$1 = -1;
     i64toi32_i32$4 = i64toi32_i32$5 & i64toi32_i32$4 | 0;
     $0_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
     $0$hi = i64toi32_i32$4;
     i64toi32_i32$5 = $0_1;
     i64toi32_i32$3 = 134217728;
     i64toi32_i32$1 = 1;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0) {
      break label$3
     }
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$1 = $4_1;
     i64toi32_i32$4 = 1073741824;
     i64toi32_i32$3 = 1;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $5_1 = i64toi32_i32$0;
     $5$hi = i64toi32_i32$2;
     break label$1;
    }
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$5 = $4_1;
    i64toi32_i32$1 = 1073741824;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $5_1 = i64toi32_i32$4;
    $5$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$5 = 134217728;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = i64toi32_i32$0 ^ i64toi32_i32$5 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$2 | 0) | 0) {
     break label$1
    }
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$5 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
    $33$hi = i64toi32_i32$5;
    i64toi32_i32$5 = i64toi32_i32$0;
    i64toi32_i32$5 = $33$hi;
    i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
    i64toi32_i32$3 = $5$hi;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $5_1 = i64toi32_i32$1;
    $5$hi = i64toi32_i32$4;
    break label$1;
   }
   label$4 : {
    i64toi32_i32$4 = $0$hi;
    $37_1 = !($0_1 | i64toi32_i32$4 | 0);
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$5 = $4_1;
    i64toi32_i32$0 = 2147418112;
    i64toi32_i32$2 = 0;
    $39_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
    i64toi32_i32$5 = i64toi32_i32$4;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$4 = 2147418112;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) | 0 ? $37_1 : $39_1) {
     break label$4
    }
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$0 = $0_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = 60;
    i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $45_1 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
     $45_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
    }
    $44_1 = $45_1;
    $44$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 4;
    i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
     $46_1 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
     $46_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
    }
    $46$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $44$hi;
    i64toi32_i32$5 = $44_1;
    i64toi32_i32$2 = $46$hi;
    i64toi32_i32$4 = $46_1;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
    i64toi32_i32$5 = 524287;
    i64toi32_i32$4 = -1;
    i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
    i64toi32_i32$0 = 2146959360;
    i64toi32_i32$4 = 0;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    $5_1 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
    $5$hi = i64toi32_i32$0;
    break label$1;
   }
   i64toi32_i32$0 = 2146435072;
   $5_1 = 0;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$5 = $4_1;
   i64toi32_i32$2 = 1140785151;
   i64toi32_i32$4 = -1;
   if (i64toi32_i32$0 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
    break label$1
   }
   i64toi32_i32$5 = 0;
   $5_1 = 0;
   $5$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$4 = $4_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$2 = 48;
   i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $47_1 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
    $47_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
   }
   $3_1 = $47_1;
   if ($3_1 >>> 0 < 15249 >>> 0) {
    break label$1
   }
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$5 = $1_1;
   i64toi32_i32$4 = 65535;
   i64toi32_i32$2 = -1;
   i64toi32_i32$4 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
   i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
   i64toi32_i32$5 = 65536;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
   $4_1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   $4$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $0$hi;
   i64toi32_i32$0 = $4$hi;
   $685($2_1 + 16 | 0 | 0, $0_1 | 0, i64toi32_i32$5 | 0, $4_1 | 0, i64toi32_i32$0 | 0, $3_1 + -15233 | 0 | 0);
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = $4$hi;
   $690($2_1 | 0, $0_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$5 | 0, 15361 - $3_1 | 0 | 0);
   i64toi32_i32$4 = $2_1;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
   $4_1 = i64toi32_i32$5;
   $4$hi = i64toi32_i32$0;
   i64toi32_i32$4 = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = 60;
   i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = 0;
    $48_1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$5 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
    $48_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
   }
   $74_1 = $48_1;
   $74$hi = i64toi32_i32$5;
   i64toi32_i32$0 = $2_1 + 8 | 0;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = 4;
   i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
    $49_1 = 0;
   } else {
    i64toi32_i32$5 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
    $49_1 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
   }
   $78$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $74$hi;
   i64toi32_i32$4 = $74_1;
   i64toi32_i32$0 = $78$hi;
   i64toi32_i32$2 = $49_1;
   i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
   $5_1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
   $5$hi = i64toi32_i32$0;
   label$5 : {
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$5 = $4_1;
    i64toi32_i32$4 = 268435455;
    i64toi32_i32$2 = -1;
    i64toi32_i32$4 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
    $81_1 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
    $81$hi = i64toi32_i32$4;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
    $83_1 = i64toi32_i32$4;
    $83$hi = i64toi32_i32$5;
    i64toi32_i32$0 = (i64toi32_i32$0 + 16 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $87_1 = i64toi32_i32$5;
    $87$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $83$hi;
    i64toi32_i32$0 = $83_1;
    i64toi32_i32$5 = $87$hi;
    i64toi32_i32$2 = $87_1;
    i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 0;
    $89_1 = (i64toi32_i32$4 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$4 = 0;
    $90$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $81$hi;
    i64toi32_i32$2 = $81_1;
    i64toi32_i32$5 = $90$hi;
    i64toi32_i32$0 = $89_1;
    i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    $4_1 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $4$hi = i64toi32_i32$5;
    i64toi32_i32$4 = $4_1;
    i64toi32_i32$2 = 134217728;
    i64toi32_i32$0 = 1;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0) {
     break label$5
    }
    i64toi32_i32$4 = $5$hi;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
    i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $5_1 = i64toi32_i32$3;
    $5$hi = i64toi32_i32$1;
    break label$1;
   }
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$4 = $4_1;
   i64toi32_i32$0 = 134217728;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
   i64toi32_i32$1 = i64toi32_i32$4 ^ i64toi32_i32$2 | 0;
   i64toi32_i32$4 = 0;
   i64toi32_i32$2 = 0;
   if ((i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$4 | 0) | 0) {
    break label$1
   }
   i64toi32_i32$1 = $5$hi;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = 1;
   i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
   $100$hi = i64toi32_i32$0;
   i64toi32_i32$0 = i64toi32_i32$1;
   i64toi32_i32$0 = $100$hi;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
   i64toi32_i32$2 = $5$hi;
   i64toi32_i32$4 = $5_1;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
   i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $5_1 = i64toi32_i32$5;
   $5$hi = i64toi32_i32$3;
  }
  global$0 = $2_1 + 32 | 0;
  i64toi32_i32$3 = $5$hi;
  i64toi32_i32$3 = $1$hi;
  i64toi32_i32$0 = $1_1;
  i64toi32_i32$1 = -2147483648;
  i64toi32_i32$4 = 0;
  i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
  $107_1 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
  $107$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $5$hi;
  i64toi32_i32$3 = $5_1;
  i64toi32_i32$0 = $107$hi;
  i64toi32_i32$4 = $107_1;
  i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
  wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$3 | i64toi32_i32$4 | 0 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
  return +(+wasm2js_scratch_load_f64());
 }
 
 function $699($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $2_1 = 0, $3_1 = 0, $3$hi = 0, $4_1 = 0, $4$hi = 0, $17_1 = 0, $11_1 = 0, $20_1 = 0, $20$hi = 0, $24$hi = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if ($1_1) {
     break label$2
    }
    i64toi32_i32$0 = 0;
    $3_1 = 0;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $4_1 = 0;
    $4$hi = i64toi32_i32$0;
    break label$1;
   }
   i64toi32_i32$0 = 0;
   $11_1 = $1_1;
   $1_1 = Math_clz32($1_1) ^ 31 | 0;
   i64toi32_i32$1 = 0;
   $685($2_1 | 0, $11_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, 112 - $1_1 | 0 | 0);
   i64toi32_i32$2 = $2_1 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
   $20_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
   $20$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = $1_1 + 16383 | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 48;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $17_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $17_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $24$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $20$hi;
   i64toi32_i32$1 = $20_1;
   i64toi32_i32$0 = $24$hi;
   i64toi32_i32$3 = $17_1;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $4_1 = i64toi32_i32$4;
   $4$hi = i64toi32_i32$5;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $3_1 = i64toi32_i32$5;
   $3$hi = i64toi32_i32$1;
  }
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$5 = $0_1;
  HEAP32[i64toi32_i32$5 >> 2] = $3_1;
  HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $4_1;
  HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$1;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $700($0_1) {
  $0_1 = $0_1 | 0;
  var $5_1 = 0, $7_1 = 0, $3_1 = 0, $1_1 = 0, $2_1 = 0, $4_1 = 0, $6_1 = 0, $8_1 = 0, $697_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
  label$1 : {
   label$2 : {
    if ($0_1 >>> 0 > 211 >>> 0) {
     break label$2
    }
    $0_1 = HEAP32[($701(8240 | 0, 8432 | 0, $1_1 + 12 | 0 | 0) | 0) >> 2] | 0;
    break label$1;
   }
   $702($0_1 | 0);
   $2_1 = ($0_1 >>> 0) / (210 >>> 0) | 0;
   $3_1 = Math_imul($2_1, 210);
   HEAP32[($1_1 + 8 | 0) >> 2] = $0_1 - $3_1 | 0;
   $4_1 = (($701(8432 | 0, 8624 | 0, $1_1 + 8 | 0 | 0) | 0) - 8432 | 0) >> 2 | 0;
   label$3 : {
    label$4 : while (1) {
     $0_1 = (HEAP32[(($4_1 << 2 | 0) + 8432 | 0) >> 2] | 0) + $3_1 | 0;
     $3_1 = 5;
     $5_1 = $6_1;
     label$5 : {
      label$6 : {
       label$7 : while (1) {
        $6_1 = $5_1;
        label$8 : {
         if (($3_1 | 0) != (47 | 0)) {
          break label$8
         }
         $3_1 = 211;
         label$9 : while (1) {
          $5_1 = ($0_1 >>> 0) / ($3_1 >>> 0) | 0;
          if ($5_1 >>> 0 < $3_1 >>> 0) {
           break label$5
          }
          if (($0_1 | 0) == (Math_imul($5_1, $3_1) | 0)) {
           break label$6
          }
          $5_1 = $3_1 + 10 | 0;
          $7_1 = ($0_1 >>> 0) / ($5_1 >>> 0) | 0;
          if ($7_1 >>> 0 < $5_1 >>> 0) {
           break label$5
          }
          if (($0_1 | 0) == (Math_imul($7_1, $5_1) | 0)) {
           break label$6
          }
          $5_1 = $3_1 + 12 | 0;
          $7_1 = ($0_1 >>> 0) / ($5_1 >>> 0) | 0;
          if ($7_1 >>> 0 < $5_1 >>> 0) {
           break label$5
          }
          if (($0_1 | 0) == (Math_imul($7_1, $5_1) | 0)) {
           break label$6
          }
          $5_1 = $3_1 + 16 | 0;
          $7_1 = ($0_1 >>> 0) / ($5_1 >>> 0) | 0;
          if ($7_1 >>> 0 < $5_1 >>> 0) {
           break label$5
          }
          if (($0_1 | 0) == (Math_imul($7_1, $5_1) | 0)) {
           break label$6
          }
          $5_1 = $3_1 + 18 | 0;
          $7_1 = ($0_1 >>> 0) / ($5_1 >>> 0) | 0;
          if ($7_1 >>> 0 < $5_1 >>> 0) {
           break label$5
          }
          if (($0_1 | 0) == (Math_imul($7_1, $5_1) | 0)) {
           break label$6
          }
          $5_1 = $3_1 + 22 | 0;
          $7_1 = ($0_1 >>> 0) / ($5_1 >>> 0) | 0;
          if ($7_1 >>> 0 < $5_1 >>> 0) {
           break label$5
          }
          if (($0_1 | 0) == (Math_imul($7_1, $5_1) | 0)) {
           break label$6
          }
          $5_1 = $3_1 + 28 | 0;
          $7_1 = ($0_1 >>> 0) / ($5_1 >>> 0) | 0;
          if ($7_1 >>> 0 < $5_1 >>> 0) {
           break label$5
          }
          if (($0_1 | 0) == (Math_imul($7_1, $5_1) | 0)) {
           break label$6
          }
          $5_1 = $3_1 + 30 | 0;
          $7_1 = ($0_1 >>> 0) / ($5_1 >>> 0) | 0;
          if ($7_1 >>> 0 < $5_1 >>> 0) {
           break label$5
          }
          if (($0_1 | 0) == (Math_imul($7_1, $5_1) | 0)) {
           break label$6
          }
          $5_1 = $3_1 + 36 | 0;
          $7_1 = ($0_1 >>> 0) / ($5_1 >>> 0) | 0;
          if ($7_1 >>> 0 < $5_1 >>> 0) {
           break label$5
          }
          if (($0_1 | 0) == (Math_imul($7_1, $5_1) | 0)) {
           break label$6
          }
          $5_1 = $3_1 + 40 | 0;
          $7_1 = ($0_1 >>> 0) / ($5_1 >>> 0) | 0;
          if ($7_1 >>> 0 < $5_1 >>> 0) {
           break label$5
          }
          if (($0_1 | 0) == (Math_imul($7_1, $5_1) | 0)) {
           break label$6
          }
          $5_1 = $3_1 + 42 | 0;
          $7_1 = ($0_1 >>> 0) / ($5_1 >>> 0) | 0;
          if ($7_1 >>> 0 < $5_1 >>> 0) {
           break label$5
          }
          if (($0_1 | 0) == (Math_imul($7_1, $5_1) | 0)) {
           break label$6
          }
          $5_1 = $3_1 + 46 | 0;
          $7_1 = ($0_1 >>> 0) / ($5_1 >>> 0) | 0;
          if ($7_1 >>> 0 < $5_1 >>> 0) {
           break label$5
          }
          if (($0_1 | 0) == (Math_imul($7_1, $5_1) | 0)) {
           break label$6
          }
          $5_1 = $3_1 + 52 | 0;
          $7_1 = ($0_1 >>> 0) / ($5_1 >>> 0) | 0;
          if ($7_1 >>> 0 < $5_1 >>> 0) {
           break label$5
          }
          if (($0_1 | 0) == (Math_imul($7_1, $5_1) | 0)) {
           break label$6
          }
          $5_1 = $3_1 + 58 | 0;
          $7_1 = ($0_1 >>> 0) / ($5_1 >>> 0) | 0;
          if ($7_1 >>> 0 < $5_1 >>> 0) {
           break label$5
          }
          if (($0_1 | 0) == (Math_imul($7_1, $5_1) | 0)) {
           break label$6
          }
          $5_1 = $3_1 + 60 | 0;
          $7_1 = ($0_1 >>> 0) / ($5_1 >>> 0) | 0;
          if ($7_1 >>> 0 < $5_1 >>> 0) {
           break label$5
          }
          if (($0_1 | 0) == (Math_imul($7_1, $5_1) | 0)) {
           break label$6
          }
          $5_1 = $3_1 + 66 | 0;
          $7_1 = ($0_1 >>> 0) / ($5_1 >>> 0) | 0;
          if ($7_1 >>> 0 < $5_1 >>> 0) {
           break label$5
          }
          if (($0_1 | 0) == (Math_imul($7_1, $5_1) | 0)) {
           break label$6
          }
          $5_1 = $3_1 + 70 | 0;
          $7_1 = ($0_1 >>> 0) / ($5_1 >>> 0) | 0;
          if ($7_1 >>> 0 < $5_1 >>> 0) {
           break label$5
          }
          if (($0_1 | 0) == (Math_imul($7_1, $5_1) | 0)) {
           break label$6
          }
          $5_1 = $3_1 + 72 | 0;
          $7_1 = ($0_1 >>> 0) / ($5_1 >>> 0) | 0;
          if ($7_1 >>> 0 < $5_1 >>> 0) {
           break label$5
          }
          if (($0_1 | 0) == (Math_imul($7_1, $5_1) | 0)) {
           break label$6
          }
          $5_1 = $3_1 + 78 | 0;
          $7_1 = ($0_1 >>> 0) / ($5_1 >>> 0) | 0;
          if ($7_1 >>> 0 < $5_1 >>> 0) {
           break label$5
          }
          if (($0_1 | 0) == (Math_imul($7_1, $5_1) | 0)) {
           break label$6
          }
          $5_1 = $3_1 + 82 | 0;
          $7_1 = ($0_1 >>> 0) / ($5_1 >>> 0) | 0;
          if ($7_1 >>> 0 < $5_1 >>> 0) {
           break label$5
          }
          if (($0_1 | 0) == (Math_imul($7_1, $5_1) | 0)) {
           break label$6
          }
          $5_1 = $3_1 + 88 | 0;
          $7_1 = ($0_1 >>> 0) / ($5_1 >>> 0) | 0;
          if ($7_1 >>> 0 < $5_1 >>> 0) {
           break label$5
          }
          if (($0_1 | 0) == (Math_imul($7_1, $5_1) | 0)) {
           break label$6
          }
          $5_1 = $3_1 + 96 | 0;
          $7_1 = ($0_1 >>> 0) / ($5_1 >>> 0) | 0;
          if ($7_1 >>> 0 < $5_1 >>> 0) {
           break label$5
          }
          if (($0_1 | 0) == (Math_imul($7_1, $5_1) | 0)) {
           break label$6
          }
          $5_1 = $3_1 + 100 | 0;
          $7_1 = ($0_1 >>> 0) / ($5_1 >>> 0) | 0;
          if ($7_1 >>> 0 < $5_1 >>> 0) {
           break label$5
          }
          if (($0_1 | 0) == (Math_imul($7_1, $5_1) | 0)) {
           break label$6
          }
          $5_1 = $3_1 + 102 | 0;
          $7_1 = ($0_1 >>> 0) / ($5_1 >>> 0) | 0;
          if ($7_1 >>> 0 < $5_1 >>> 0) {
           break label$5
          }
          if (($0_1 | 0) == (Math_imul($7_1, $5_1) | 0)) {
           break label$6
          }
          $5_1 = $3_1 + 106 | 0;
          $7_1 = ($0_1 >>> 0) / ($5_1 >>> 0) | 0;
          if ($7_1 >>> 0 < $5_1 >>> 0) {
           break label$5
          }
          if (($0_1 | 0) == (Math_imul($7_1, $5_1) | 0)) {
           break label$6
          }
          $5_1 = $3_1 + 108 | 0;
          $7_1 = ($0_1 >>> 0) / ($5_1 >>> 0) | 0;
          if ($7_1 >>> 0 < $5_1 >>> 0) {
           break label$5
          }
          if (($0_1 | 0) == (Math_imul($7_1, $5_1) | 0)) {
           break label$6
          }
          $5_1 = $3_1 + 112 | 0;
          $7_1 = ($0_1 >>> 0) / ($5_1 >>> 0) | 0;
          if ($7_1 >>> 0 < $5_1 >>> 0) {
           break label$5
          }
          if (($0_1 | 0) == (Math_imul($7_1, $5_1) | 0)) {
           break label$6
          }
          $5_1 = $3_1 + 120 | 0;
          $7_1 = ($0_1 >>> 0) / ($5_1 >>> 0) | 0;
          if ($7_1 >>> 0 < $5_1 >>> 0) {
           break label$5
          }
          if (($0_1 | 0) == (Math_imul($7_1, $5_1) | 0)) {
           break label$6
          }
          $5_1 = $3_1 + 126 | 0;
          $7_1 = ($0_1 >>> 0) / ($5_1 >>> 0) | 0;
          if ($7_1 >>> 0 < $5_1 >>> 0) {
           break label$5
          }
          if (($0_1 | 0) == (Math_imul($7_1, $5_1) | 0)) {
           break label$6
          }
          $5_1 = $3_1 + 130 | 0;
          $7_1 = ($0_1 >>> 0) / ($5_1 >>> 0) | 0;
          if ($7_1 >>> 0 < $5_1 >>> 0) {
           break label$5
          }
          if (($0_1 | 0) == (Math_imul($7_1, $5_1) | 0)) {
           break label$6
          }
          $5_1 = $3_1 + 136 | 0;
          $7_1 = ($0_1 >>> 0) / ($5_1 >>> 0) | 0;
          if ($7_1 >>> 0 < $5_1 >>> 0) {
           break label$5
          }
          if (($0_1 | 0) == (Math_imul($7_1, $5_1) | 0)) {
           break label$6
          }
          $5_1 = $3_1 + 138 | 0;
          $7_1 = ($0_1 >>> 0) / ($5_1 >>> 0) | 0;
          if ($7_1 >>> 0 < $5_1 >>> 0) {
           break label$5
          }
          if (($0_1 | 0) == (Math_imul($7_1, $5_1) | 0)) {
           break label$6
          }
          $5_1 = $3_1 + 142 | 0;
          $7_1 = ($0_1 >>> 0) / ($5_1 >>> 0) | 0;
          if ($7_1 >>> 0 < $5_1 >>> 0) {
           break label$5
          }
          if (($0_1 | 0) == (Math_imul($7_1, $5_1) | 0)) {
           break label$6
          }
          $5_1 = $3_1 + 148 | 0;
          $7_1 = ($0_1 >>> 0) / ($5_1 >>> 0) | 0;
          if ($7_1 >>> 0 < $5_1 >>> 0) {
           break label$5
          }
          if (($0_1 | 0) == (Math_imul($7_1, $5_1) | 0)) {
           break label$6
          }
          $5_1 = $3_1 + 150 | 0;
          $7_1 = ($0_1 >>> 0) / ($5_1 >>> 0) | 0;
          if ($7_1 >>> 0 < $5_1 >>> 0) {
           break label$5
          }
          if (($0_1 | 0) == (Math_imul($7_1, $5_1) | 0)) {
           break label$6
          }
          $5_1 = $3_1 + 156 | 0;
          $7_1 = ($0_1 >>> 0) / ($5_1 >>> 0) | 0;
          if ($7_1 >>> 0 < $5_1 >>> 0) {
           break label$5
          }
          if (($0_1 | 0) == (Math_imul($7_1, $5_1) | 0)) {
           break label$6
          }
          $5_1 = $3_1 + 162 | 0;
          $7_1 = ($0_1 >>> 0) / ($5_1 >>> 0) | 0;
          if ($7_1 >>> 0 < $5_1 >>> 0) {
           break label$5
          }
          if (($0_1 | 0) == (Math_imul($7_1, $5_1) | 0)) {
           break label$6
          }
          $5_1 = $3_1 + 166 | 0;
          $7_1 = ($0_1 >>> 0) / ($5_1 >>> 0) | 0;
          if ($7_1 >>> 0 < $5_1 >>> 0) {
           break label$5
          }
          if (($0_1 | 0) == (Math_imul($7_1, $5_1) | 0)) {
           break label$6
          }
          $5_1 = $3_1 + 168 | 0;
          $7_1 = ($0_1 >>> 0) / ($5_1 >>> 0) | 0;
          if ($7_1 >>> 0 < $5_1 >>> 0) {
           break label$5
          }
          if (($0_1 | 0) == (Math_imul($7_1, $5_1) | 0)) {
           break label$6
          }
          $5_1 = $3_1 + 172 | 0;
          $7_1 = ($0_1 >>> 0) / ($5_1 >>> 0) | 0;
          if ($7_1 >>> 0 < $5_1 >>> 0) {
           break label$5
          }
          if (($0_1 | 0) == (Math_imul($7_1, $5_1) | 0)) {
           break label$6
          }
          $5_1 = $3_1 + 178 | 0;
          $7_1 = ($0_1 >>> 0) / ($5_1 >>> 0) | 0;
          if ($7_1 >>> 0 < $5_1 >>> 0) {
           break label$5
          }
          if (($0_1 | 0) == (Math_imul($7_1, $5_1) | 0)) {
           break label$6
          }
          $5_1 = $3_1 + 180 | 0;
          $7_1 = ($0_1 >>> 0) / ($5_1 >>> 0) | 0;
          if ($7_1 >>> 0 < $5_1 >>> 0) {
           break label$5
          }
          if (($0_1 | 0) == (Math_imul($7_1, $5_1) | 0)) {
           break label$6
          }
          $5_1 = $3_1 + 186 | 0;
          $7_1 = ($0_1 >>> 0) / ($5_1 >>> 0) | 0;
          if ($7_1 >>> 0 < $5_1 >>> 0) {
           break label$5
          }
          if (($0_1 | 0) == (Math_imul($7_1, $5_1) | 0)) {
           break label$6
          }
          $5_1 = $3_1 + 190 | 0;
          $7_1 = ($0_1 >>> 0) / ($5_1 >>> 0) | 0;
          if ($7_1 >>> 0 < $5_1 >>> 0) {
           break label$5
          }
          if (($0_1 | 0) == (Math_imul($7_1, $5_1) | 0)) {
           break label$6
          }
          $5_1 = $3_1 + 192 | 0;
          $7_1 = ($0_1 >>> 0) / ($5_1 >>> 0) | 0;
          if ($7_1 >>> 0 < $5_1 >>> 0) {
           break label$5
          }
          if (($0_1 | 0) == (Math_imul($7_1, $5_1) | 0)) {
           break label$6
          }
          $5_1 = $3_1 + 196 | 0;
          $7_1 = ($0_1 >>> 0) / ($5_1 >>> 0) | 0;
          if ($7_1 >>> 0 < $5_1 >>> 0) {
           break label$5
          }
          if (($0_1 | 0) == (Math_imul($7_1, $5_1) | 0)) {
           break label$6
          }
          $5_1 = $3_1 + 198 | 0;
          $7_1 = ($0_1 >>> 0) / ($5_1 >>> 0) | 0;
          if ($7_1 >>> 0 < $5_1 >>> 0) {
           break label$5
          }
          if (($0_1 | 0) == (Math_imul($7_1, $5_1) | 0)) {
           break label$6
          }
          $5_1 = $3_1 + 208 | 0;
          $7_1 = ($0_1 >>> 0) / ($5_1 >>> 0) | 0;
          if ($7_1 >>> 0 < $5_1 >>> 0) {
           break label$5
          }
          $3_1 = $3_1 + 210 | 0;
          if (($0_1 | 0) != (Math_imul($7_1, $5_1) | 0)) {
           continue label$9
          }
          break label$6;
         };
        }
        $5_1 = HEAP32[(($3_1 << 2 | 0) + 8240 | 0) >> 2] | 0;
        $7_1 = ($0_1 >>> 0) / ($5_1 >>> 0) | 0;
        $8_1 = Math_imul($7_1, $5_1);
        label$10 : {
         $7_1 = $7_1 >>> 0 < $5_1 >>> 0;
         if ($7_1) {
          break label$10
         }
         $5_1 = $7_1 ? $0_1 : $6_1;
         $3_1 = $3_1 + 1 | 0;
         if (($0_1 | 0) != ($8_1 | 0)) {
          continue label$7
         }
        }
        break label$7;
       };
       if ($7_1) {
        break label$3
       }
       if (($0_1 | 0) != ($8_1 | 0)) {
        break label$3
       }
      }
      $0_1 = $4_1 + 1 | 0;
      $697_1 = $0_1;
      $0_1 = ($0_1 | 0) == (48 | 0);
      $4_1 = $0_1 ? 0 : $697_1;
      $2_1 = $2_1 + $0_1 | 0;
      $3_1 = Math_imul($2_1, 210);
      continue label$4;
     }
     break label$4;
    };
    HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
    break label$1;
   }
   HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
   $0_1 = $7_1 ? $0_1 : $6_1;
  }
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $701($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $703($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $702($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ($0_1 >>> 0 < -4 >>> 0) {
    break label$1
   }
   $704(8624 | 0);
   abort();
  }
 }
 
 function $703($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $0_1 = $705($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $704($0_1) {
  $0_1 = $0_1 | 0;
  fimport$93();
  abort();
 }
 
 function $705($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $1_1 = $706($0_1 | 0, $1_1 | 0) | 0;
  label$1 : {
   label$2 : while (1) {
    if (!$1_1) {
     break label$1
    }
    $5_1 = $707($1_1 | 0) | 0;
    HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
    $708($4_1 + 12 | 0 | 0, $5_1 | 0);
    label$3 : {
     if ($709($3_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, $2_1 | 0) | 0) {
      break label$3
     }
     $1_1 = $5_1;
     continue label$2;
    }
    $0_1 = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 4 | 0;
    HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
    $1_1 = $1_1 + ($5_1 ^ -1 | 0) | 0;
    continue label$2;
   };
  }
  global$0 = $4_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $706($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $710($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $707($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 >>> 1 | 0 | 0;
 }
 
 function $708($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $711($0_1 | 0, $1_1 | 0);
 }
 
 function $709($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return (HEAP32[$1_1 >> 2] | 0) >>> 0 < (HEAP32[$2_1 >> 2] | 0) >>> 0 | 0;
 }
 
 function $710($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1_1 - $0_1 | 0) >> 2 | 0 | 0;
 }
 
 function $711($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + ($1_1 << 2 | 0) | 0;
 }
 
 function $712($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $3_1 = $0_1;
   label$2 : while (1) {
    HEAP32[$3_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
    $3_1 = $3_1 + 4 | 0;
    $1_1 = $1_1 + 4 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue label$2
    }
    break label$2;
   };
  }
  return $0_1 | 0;
 }
 
 function $713() {
  return ($714() | 0 | 0) > (0 | 0) | 0;
 }
 
 function $714() {
  return $2159() | 0 | 0;
 }
 
 function $715($0_1) {
  $0_1 = $0_1 | 0;
  $716($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $716($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 8976;
  $717($0_1 | 0, 0 | 0);
  $1018($0_1 + 28 | 0 | 0) | 0;
  $2161(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0);
  $2161(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0);
  $2161(HEAP32[($0_1 + 48 | 0) >> 2] | 0 | 0);
  $2161(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0);
  return $0_1 | 0;
 }
 
 function $717($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
  label$1 : while (1) {
   label$2 : {
    if ($2_1) {
     break label$2
    }
    return;
   }
   $2_1 = $2_1 + -1 | 0;
   $3_1 = $2_1 << 2 | 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 32 | 0) >> 2] | 0) + $3_1 | 0) >> 2] | 0 | 0]($1_1, $0_1, HEAP32[((HEAP32[($0_1 + 36 | 0) >> 2] | 0) + $3_1 | 0) >> 2] | 0);
   continue label$1;
  };
 }
 
 function $718($0_1) {
  $0_1 = $0_1 | 0;
  $2032($715($0_1 | 0) | 0 | 0);
 }
 
 function $719($0_1) {
  $0_1 = $0_1 | 0;
  $716($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $720($0_1) {
  $0_1 = $0_1 | 0;
  $2032($719($0_1 | 0) | 0 | 0);
 }
 
 function $721($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 8656;
  $1018($0_1 + 4 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $722($0_1) {
  $0_1 = $0_1 | 0;
  $2032($721($0_1 | 0) | 0 | 0);
 }
 
 function $723($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  HEAP32[$0_1 >> 2] = 8656;
  $1620($0_1 + 4 | 0 | 0) | 0;
  i64toi32_i32$1 = $0_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 16 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = i64toi32_i32$0;
  return $0_1 | 0;
 }
 
 function $724($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $725($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $0_1 | 0;
 }
 
 function $726($0_1, $1_1, $2_1, $2$hi, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $727($0_1 | 0, -1 | 0, -1 | 0) | 0;
 }
 
 function $727($0_1, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $1_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function $728($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $727($0_1 | 0, -1 | 0, -1 | 0) | 0;
 }
 
 function $729($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $730($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $731($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $3_1 = 0, $4_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($4_1 | 0) >= ($2_1 | 0)) {
     break label$1
    }
    label$3 : {
     label$4 : {
      $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
      $6_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
      if ($5_1 >>> 0 >= $6_1 >>> 0) {
       break label$4
      }
      HEAP32[($3_1 + 12 | 0) >> 2] = 2147483647;
      HEAP32[($3_1 + 8 | 0) >> 2] = $6_1 - $5_1 | 0;
      HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 - $4_1 | 0;
      $5_1 = $732($3_1 + 12 | 0 | 0, $732($3_1 + 8 | 0 | 0, $3_1 + 4 | 0 | 0) | 0 | 0) | 0;
      $5_1 = HEAP32[$5_1 >> 2] | 0;
      $733($1_1 | 0, HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0;
      $734($0_1 | 0, $5_1 | 0);
      break label$3;
     }
     $5_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1) | 0;
     if (($5_1 | 0) == (-1 | 0)) {
      break label$1
     }
     HEAP8[$1_1 >> 0] = $735($5_1 | 0) | 0;
     $5_1 = 1;
    }
    $1_1 = $1_1 + $5_1 | 0;
    $4_1 = $5_1 + $4_1 | 0;
    continue label$2;
   };
  }
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $732($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $736($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $733($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $2173($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  }
  return $0_1 | 0;
 }
 
 function $734($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + $1_1 | 0;
 }
 
 function $735($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 << 24 | 0) >> 24 | 0 | 0;
 }
 
 function $736($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = $872($2_1 + 8 | 0 | 0, $1_1 | 0, $0_1 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return ($3_1 ? $1_1 : $0_1) | 0;
 }
 
 function $737($0_1) {
  $0_1 = $0_1 | 0;
  return $738() | 0 | 0;
 }
 
 function $738() {
  return -1 | 0;
 }
 
 function $739($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   if ((FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0) != ($738() | 0 | 0)) {
    break label$1
   }
   return $738() | 0 | 0;
  }
  $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = $1_1 + 1 | 0;
  return $740(HEAP8[$1_1 >> 0] | 0 | 0) | 0 | 0;
 }
 
 function $740($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 & 255 | 0 | 0;
 }
 
 function $741($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $738() | 0 | 0;
 }
 
 function $742($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $6_1 = 0, $4_1 = 0, $3_1 = 0, $7_1 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = 0;
  $5_1 = $738() | 0;
  label$1 : {
   label$2 : while (1) {
    if (($4_1 | 0) >= ($2_1 | 0)) {
     break label$1
    }
    label$3 : {
     $6_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     $7_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
     if ($6_1 >>> 0 < $7_1 >>> 0) {
      break label$3
     }
     if (((((wasm2js_i32$1 = $0_1, wasm2js_i32$2 = $740(HEAP8[$1_1 >> 0] | 0 | 0) | 0), wasm2js_i32$0 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0 | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) | 0) == ($5_1 | 0)) {
      break label$1
     }
     $4_1 = $4_1 + 1 | 0;
     $1_1 = $1_1 + 1 | 0;
     continue label$2;
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = $7_1 - $6_1 | 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = $2_1 - $4_1 | 0;
    $6_1 = $732($3_1 + 12 | 0 | 0, $3_1 + 8 | 0 | 0) | 0;
    $6_1 = HEAP32[$6_1 >> 2] | 0;
    $733(HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0, $1_1 | 0, $6_1 | 0) | 0;
    HEAP32[($0_1 + 24 | 0) >> 2] = $6_1 + (HEAP32[($0_1 + 24 | 0) >> 2] | 0) | 0;
    $4_1 = $6_1 + $4_1 | 0;
    $1_1 = $1_1 + $6_1 | 0;
    continue label$2;
   };
  }
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $743($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $738() | 0 | 0;
 }
 
 function $744($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 8720;
  $1018($0_1 + 4 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $745($0_1) {
  $0_1 = $0_1 | 0;
  $2032($744($0_1 | 0) | 0 | 0);
 }
 
 function $746($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  HEAP32[$0_1 >> 2] = 8720;
  $1620($0_1 + 4 | 0 | 0) | 0;
  i64toi32_i32$1 = $0_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 16 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = i64toi32_i32$0;
  return $0_1 | 0;
 }
 
 function $747($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $748($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $0_1 | 0;
 }
 
 function $749($0_1, $1_1, $2_1, $2$hi, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $727($0_1 | 0, -1 | 0, -1 | 0) | 0;
 }
 
 function $750($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $727($0_1 | 0, -1 | 0, -1 | 0) | 0;
 }
 
 function $751($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $752($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $753($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $3_1 = 0, $4_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($4_1 | 0) >= ($2_1 | 0)) {
     break label$1
    }
    label$3 : {
     label$4 : {
      $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
      $6_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
      if ($5_1 >>> 0 >= $6_1 >>> 0) {
       break label$4
      }
      HEAP32[($3_1 + 12 | 0) >> 2] = 2147483647;
      HEAP32[($3_1 + 8 | 0) >> 2] = ($6_1 - $5_1 | 0) >> 2 | 0;
      HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 - $4_1 | 0;
      $5_1 = $732($3_1 + 12 | 0 | 0, $732($3_1 + 8 | 0 | 0, $3_1 + 4 | 0 | 0) | 0 | 0) | 0;
      $5_1 = HEAP32[$5_1 >> 2] | 0;
      $754($1_1 | 0, HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0;
      $755($0_1 | 0, $5_1 | 0);
      $1_1 = $1_1 + ($5_1 << 2 | 0) | 0;
      break label$3;
     }
     $5_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1) | 0;
     if (($5_1 | 0) == (-1 | 0)) {
      break label$1
     }
     HEAP32[$1_1 >> 2] = $756($5_1 | 0) | 0;
     $1_1 = $1_1 + 4 | 0;
     $5_1 = 1;
    }
    $4_1 = $5_1 + $4_1 | 0;
    continue label$2;
   };
  }
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $754($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $0_1 = $712($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  }
  return $0_1 | 0;
 }
 
 function $755($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($1_1 << 2 | 0) | 0;
 }
 
 function $756($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $757($0_1) {
  $0_1 = $0_1 | 0;
  return $758() | 0 | 0;
 }
 
 function $758() {
  return -1 | 0;
 }
 
 function $759($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   if ((FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0) != ($758() | 0 | 0)) {
    break label$1
   }
   return $758() | 0 | 0;
  }
  $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = $1_1 + 4 | 0;
  return $760(HEAP32[$1_1 >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $760($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $761($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $758() | 0 | 0;
 }
 
 function $762($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $6_1 = 0, $4_1 = 0, $3_1 = 0, $7_1 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = 0;
  $5_1 = $758() | 0;
  label$1 : {
   label$2 : while (1) {
    if (($4_1 | 0) >= ($2_1 | 0)) {
     break label$1
    }
    label$3 : {
     $6_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     $7_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
     if ($6_1 >>> 0 < $7_1 >>> 0) {
      break label$3
     }
     if (((((wasm2js_i32$1 = $0_1, wasm2js_i32$2 = $760(HEAP32[$1_1 >> 2] | 0 | 0) | 0), wasm2js_i32$0 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0 | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) | 0) == ($5_1 | 0)) {
      break label$1
     }
     $4_1 = $4_1 + 1 | 0;
     $1_1 = $1_1 + 4 | 0;
     continue label$2;
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = ($7_1 - $6_1 | 0) >> 2 | 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = $2_1 - $4_1 | 0;
    $6_1 = $732($3_1 + 12 | 0 | 0, $3_1 + 8 | 0 | 0) | 0;
    $6_1 = HEAP32[$6_1 >> 2] | 0;
    $754(HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0, $1_1 | 0, $6_1 | 0) | 0;
    $7_1 = $6_1 << 2 | 0;
    HEAP32[($0_1 + 24 | 0) >> 2] = (HEAP32[($0_1 + 24 | 0) >> 2] | 0) + $7_1 | 0;
    $4_1 = $6_1 + $4_1 | 0;
    $1_1 = $1_1 + $7_1 | 0;
    continue label$2;
   };
  }
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $763($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $758() | 0 | 0;
 }
 
 function $764($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $0_1 | 0;
 }
 
 function $765($0_1) {
  $0_1 = $0_1 | 0;
  $0_1 = $764($0_1 | 0, 8816 | 0) | 0;
  $715($0_1 + 8 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $766($0_1) {
  $0_1 = $0_1 | 0;
  return $765($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0;
 }
 
 function $767($0_1) {
  $0_1 = $0_1 | 0;
  $2032($765($0_1 | 0) | 0 | 0);
 }
 
 function $768($0_1) {
  $0_1 = $0_1 | 0;
  $767($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0);
 }
 
 function $769($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP8[$0_1 >> 0] = 0;
  $4_1 = $770($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0;
  $5_1 = $1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0;
  label$1 : {
   label$2 : {
    if (!$4_1) {
     break label$2
    }
    label$3 : {
     if (!($771($5_1 | 0) | 0)) {
      break label$3
     }
     $772($771($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0) | 0;
    }
    label$4 : {
     if ($2_1) {
      break label$4
     }
     if (!(($773($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0) & 4096 | 0)) {
      break label$4
     }
     $774($3_1 + 24 | 0 | 0, $1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0);
     $2_1 = $775($3_1 + 24 | 0 | 0) | 0;
     $1018($3_1 + 24 | 0 | 0) | 0;
     $4_1 = $776($3_1 + 16 | 0 | 0, $1_1 | 0) | 0;
     $5_1 = $777($3_1 + 8 | 0 | 0) | 0;
     label$5 : {
      label$6 : while (1) {
       if (!($778($4_1 | 0, $5_1 | 0) | 0)) {
        break label$5
       }
       if (!($780($2_1 | 0, 8192 | 0, $779($4_1 | 0) | 0 | 0) | 0)) {
        break label$5
       }
       $781($4_1 | 0) | 0;
       continue label$6;
      };
     }
     if (!($782($4_1 | 0, $5_1 | 0) | 0)) {
      break label$4
     }
     $783($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, 6 | 0);
    }
    HEAP8[$0_1 >> 0] = $770($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0;
    break label$1;
   }
   $783($5_1 | 0, 4 | 0);
  }
  global$0 = $3_1 + 32 | 0;
  return $0_1 | 0;
 }
 
 function $770($0_1) {
  $0_1 = $0_1 | 0;
  return $784($0_1 | 0) | 0 | 0;
 }
 
 function $771($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 72 | 0) >> 2] | 0 | 0;
 }
 
 function $772($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   if (!($785($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
    break label$1
   }
   label$2 : {
    $2_1 = $786($1_1 + 8 | 0 | 0, $0_1 | 0) | 0;
    if (!($787($2_1 | 0) | 0)) {
     break label$2
    }
    if (($788($785($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0) | 0 | 0) != (-1 | 0)) {
     break label$2
    }
    $783($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, 1 | 0);
   }
   $789($2_1 | 0) | 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $773($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $774($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1618($0_1 | 0, $1_1 + 28 | 0 | 0) | 0;
 }
 
 function $775($0_1) {
  $0_1 = $0_1 | 0;
  return $1023($0_1 | 0, 334824 | 0) | 0 | 0;
 }
 
 function $776($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $785($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $777($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 0;
  return $0_1 | 0;
 }
 
 function $778($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($790($0_1 | 0, $1_1 | 0) | 0) ^ 1 | 0 | 0;
 }
 
 function $779($0_1) {
  $0_1 = $0_1 | 0;
  return (($791(HEAP32[$0_1 >> 2] | 0 | 0) | 0) << 24 | 0) >> 24 | 0 | 0;
 }
 
 function $780($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = 0;
  label$1 : {
   if (($2_1 | 0) < (0 | 0)) {
    break label$1
   }
   $3_1 = ((HEAPU16[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + (($2_1 & 255 | 0) << 1 | 0) | 0) >> 1] | 0) & $1_1 | 0 | 0) != (0 | 0);
  }
  return $3_1 | 0;
 }
 
 function $781($0_1) {
  $0_1 = $0_1 | 0;
  $792(HEAP32[$0_1 >> 2] | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $782($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $790($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $783($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $793($0_1 | 0, $1_1 | 0);
 }
 
 function $784($0_1) {
  $0_1 = $0_1 | 0;
  return !(HEAP32[($0_1 + 16 | 0) >> 2] | 0) | 0;
 }
 
 function $785($0_1) {
  $0_1 = $0_1 | 0;
  return $797($0_1 | 0) | 0 | 0;
 }
 
 function $786($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
  HEAP8[$0_1 >> 0] = 0;
  label$1 : {
   if (!($770($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
    break label$1
   }
   label$2 : {
    if (!($771($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
     break label$2
    }
    $772($771($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0) | 0;
   }
   HEAP8[$0_1 >> 0] = 1;
  }
  return $0_1 | 0;
 }
 
 function $787($0_1) {
  $0_1 = $0_1 | 0;
  return HEAPU8[$0_1 >> 0] | 0 | 0;
 }
 
 function $788($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $789($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!($785($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!($770($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!(($773($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0) & 8192 | 0)) {
    break label$1
   }
   if ($713() | 0) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (($788($785($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0) | 0 | 0) != (-1 | 0)) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $783($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, 1 | 0);
  }
  return $0_1 | 0;
 }
 
 function $790($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return (($874($0_1 | 0) | 0) ^ ($874($1_1 | 0) | 0) | 0) ^ 1 | 0 | 0;
 }
 
 function $791($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (($1_1 | 0) != (HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
  }
  return $740(HEAP8[$1_1 >> 0] | 0 | 0) | 0 | 0;
 }
 
 function $792($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (($1_1 | 0) != (HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
  }
  HEAP32[($0_1 + 12 | 0) >> 2] = $1_1 + 1 | 0;
  return $740(HEAP8[$1_1 >> 0] | 0 | 0) | 0 | 0;
 }
 
 function $793($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $805($0_1 | 0, HEAP32[($0_1 + 16 | 0) >> 2] | 0 | $1_1 | 0 | 0);
 }
 
 function $794($0_1) {
  $0_1 = $0_1 | 0;
  return HEAPU8[$0_1 >> 0] | 0 | 0;
 }
 
 function $795($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($0_1 | 0) == ($1_1 | 0) | 0;
 }
 
 function $796($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   if (($2_1 | 0) != (HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   return (((wasm2js_i32$1 = $0_1, wasm2js_i32$2 = $740($1_1 | 0) | 0), wasm2js_i32$0 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0 | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) | 0;
  }
  HEAP32[($0_1 + 24 | 0) >> 2] = $2_1 + 1 | 0;
  HEAP8[$2_1 >> 0] = $1_1;
  return $740($1_1 | 0) | 0 | 0;
 }
 
 function $797($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0;
 }
 
 function $798() {
  return $799() | 0 | 0;
 }
 
 function $799() {
  return 2147483647 | 0;
 }
 
 function $800($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    if ($794($769($3_1 + 8 | 0 | 0, $0_1 | 0, 1 | 0) | 0 | 0) | 0) {
     break label$2
    }
    $2_1 = 4;
    break label$1;
   }
   $1_1 = $801($785($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
   HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
   $2_1 = ($1_1 | 0) == ($2_1 | 0) ? 0 : 6;
  }
  $783($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, $2_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $801($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1) | 0 | 0;
 }
 
 function $802($0_1) {
  $0_1 = $0_1 | 0;
  return $804($0_1 | 0) | 0 | 0;
 }
 
 function $803($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $805($0_1 | 0, $1_1 | 0);
 }
 
 function $804($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0;
 }
 
 function $805($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = !(HEAP32[($0_1 + 24 | 0) >> 2] | 0) | $1_1 | 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = $1_1;
  label$1 : {
   if (!((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $1_1 | 0)) {
    break label$1
   }
   $867(8984 | 0);
   abort();
  }
 }
 
 function $806($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, $2_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $28_1 = 0, $31_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  i64toi32_i32$0 = -1;
  $0_1 = $727($0_1 | 0, -1 | 0, i64toi32_i32$0 | 0) | 0;
  label$1 : {
   if (!($794($769($2_1 + 24 | 0 | 0, $1_1 | 0, 1 | 0) | 0 | 0) | 0)) {
    break label$1
   }
   i64toi32_i32$0 = 0;
   $807($2_1 + 8 | 0 | 0, $785($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0, 0 | 0, i64toi32_i32$0 | 0, 1 | 0, 8 | 0);
   i64toi32_i32$2 = ($2_1 + 8 | 0) + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $28_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1 + 8 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $28_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
   $31_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1;
   HEAP32[i64toi32_i32$1 >> 2] = $31_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $783($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, 0 | 0);
  }
  global$0 = $2_1 + 32 | 0;
 }
 
 function $807($0_1, $1_1, $2_1, $2$hi, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $2$hi;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, i64toi32_i32$0, $3_1, $4_1);
 }
 
 function $808($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $3_1 = 0, $3$hi = 0, $5_1 = 0, $5$hi = 0;
  i64toi32_i32$0 = $809($0_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $3_1 = i64toi32_i32$0;
  $3$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $809($1_1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $5_1 = i64toi32_i32$1;
  $5$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$1 = $5$hi;
  return ($3_1 | 0) == ($5_1 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 | 0;
 }
 
 function $809($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $810($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0;
  $3_1 = global$0 - 48 | 0;
  global$0 = $3_1;
  $4_1 = $802($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0;
  $4_1 = $4_1 & -3 | 0;
  $803($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, $4_1 | 0);
  label$1 : {
   if (!($794($769($3_1 + 40 | 0 | 0, $0_1 | 0, 1 | 0) | 0 | 0) | 0)) {
    break label$1
   }
   i64toi32_i32$0 = $1$hi;
   $807($3_1 + 24 | 0 | 0, $785($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, 8 | 0);
   i64toi32_i32$0 = -1;
   $2_1 = $808($3_1 + 24 | 0 | 0, $727($3_1 + 8 | 0 | 0, -1 | 0, i64toi32_i32$0 | 0) | 0 | 0) | 0;
   $783($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, ($2_1 ? $4_1 | 4 | 0 : $4_1) | 0);
  }
  global$0 = $3_1 + 48 | 0;
  return $0_1 | 0;
 }
 
 function $811($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $0_1 | 0;
 }
 
 function $812($0_1) {
  $0_1 = $0_1 | 0;
  $0_1 = $811($0_1 | 0, 8864 | 0) | 0;
  $719($0_1 + 8 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $813($0_1) {
  $0_1 = $0_1 | 0;
  return $812($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0;
 }
 
 function $814($0_1) {
  $0_1 = $0_1 | 0;
  $2032($812($0_1 | 0) | 0 | 0);
 }
 
 function $815($0_1) {
  $0_1 = $0_1 | 0;
  $814($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0);
 }
 
 function $816($0_1) {
  $0_1 = $0_1 | 0;
  return $784($0_1 | 0) | 0 | 0;
 }
 
 function $817($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 72 | 0) >> 2] | 0 | 0;
 }
 
 function $818($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   if (!($826($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
    break label$1
   }
   label$2 : {
    $2_1 = $827($1_1 + 8 | 0 | 0, $0_1 | 0) | 0;
    if (!($828($2_1 | 0) | 0)) {
     break label$2
    }
    if (($829($826($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0) | 0 | 0) != (-1 | 0)) {
     break label$2
    }
    $825($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, 1 | 0);
   }
   $830($2_1 | 0) | 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $819($0_1) {
  $0_1 = $0_1 | 0;
  return $1023($0_1 | 0, 334816 | 0) | 0 | 0;
 }
 
 function $820($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($831($0_1 | 0, $1_1 | 0) | 0) ^ 1 | 0 | 0;
 }
 
 function $821($0_1) {
  $0_1 = $0_1 | 0;
  return $832(HEAP32[$0_1 >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $822($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1) | 0 | 0;
 }
 
 function $823($0_1) {
  $0_1 = $0_1 | 0;
  $833(HEAP32[$0_1 >> 2] | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $824($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $831($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $825($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $793($0_1 | 0, $1_1 | 0);
 }
 
 function $826($0_1) {
  $0_1 = $0_1 | 0;
  return $797($0_1 | 0) | 0 | 0;
 }
 
 function $827($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
  HEAP8[$0_1 >> 0] = 0;
  label$1 : {
   if (!($816($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
    break label$1
   }
   label$2 : {
    if (!($817($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
     break label$2
    }
    $818($817($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0) | 0;
   }
   HEAP8[$0_1 >> 0] = 1;
  }
  return $0_1 | 0;
 }
 
 function $828($0_1) {
  $0_1 = $0_1 | 0;
  return HEAPU8[$0_1 >> 0] | 0 | 0;
 }
 
 function $829($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $830($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!($826($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!($816($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!(($773($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0) & 8192 | 0)) {
    break label$1
   }
   if ($713() | 0) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (($829($826($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0) | 0 | 0) != (-1 | 0)) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $825($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, 1 | 0);
  }
  return $0_1 | 0;
 }
 
 function $831($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return (($875($0_1 | 0) | 0) ^ ($875($1_1 | 0) | 0) | 0) ^ 1 | 0 | 0;
 }
 
 function $832($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (($1_1 | 0) != (HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
  }
  return $760(HEAP32[$1_1 >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $833($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (($1_1 | 0) != (HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
  }
  HEAP32[($0_1 + 12 | 0) >> 2] = $1_1 + 4 | 0;
  return $760(HEAP32[$1_1 >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $834($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($0_1 | 0) == ($1_1 | 0) | 0;
 }
 
 function $835($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   if (($2_1 | 0) != (HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   return (((wasm2js_i32$1 = $0_1, wasm2js_i32$2 = $760($1_1 | 0) | 0), wasm2js_i32$0 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0 | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) | 0;
  }
  HEAP32[($0_1 + 24 | 0) >> 2] = $2_1 + 4 | 0;
  HEAP32[$2_1 >> 2] = $1_1;
  return $760($1_1 | 0) | 0 | 0;
 }
 
 function $836($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $0_1 | 0;
 }
 
 function $837($0_1) {
  $0_1 = $0_1 | 0;
  $0_1 = $836($0_1 | 0, 8912 | 0) | 0;
  $715($0_1 + 4 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $838($0_1) {
  $0_1 = $0_1 | 0;
  return $837($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0;
 }
 
 function $839($0_1) {
  $0_1 = $0_1 | 0;
  $2032($837($0_1 | 0) | 0 | 0);
 }
 
 function $840($0_1) {
  $0_1 = $0_1 | 0;
  $839($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0);
 }
 
 function $841($0_1) {
  $0_1 = $0_1 | 0;
  return $1023($0_1 | 0, 334652 | 0) | 0 | 0;
 }
 
 function $842($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $785($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $843($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   label$2 : {
    if ($795($738() | 0 | 0, HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) | 0) {
     break label$2
    }
    $1_1 = HEAP32[($0_1 + 76 | 0) >> 2] | 0;
    break label$1;
   }
   $1_1 = $845($0_1 | 0, 32 | 0) | 0;
   HEAP32[($0_1 + 76 | 0) >> 2] = $1_1;
  }
  return ($1_1 << 24 | 0) >> 24 | 0 | 0;
 }
 
 function $844($0_1) {
  $0_1 = $0_1 | 0;
  return !(HEAP32[$0_1 >> 2] | 0) | 0;
 }
 
 function $845($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $774($2_1 + 8 | 0 | 0, $0_1 | 0);
  $1_1 = $876($775($2_1 + 8 | 0 | 0) | 0 | 0, $1_1 | 0) | 0;
  $1018($2_1 + 8 | 0 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $846($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1) | 0 | 0;
 }
 
 function $847($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $6_1 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   $3_1 = $786($2_1 + 24 | 0 | 0, $0_1 | 0) | 0;
   if (!($787($3_1 | 0) | 0)) {
    break label$1
   }
   $773($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0;
   $774($2_1 + 16 | 0 | 0, $0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0);
   $4_1 = $841($2_1 + 16 | 0 | 0) | 0;
   $1018($2_1 + 16 | 0 | 0) | 0;
   $5_1 = $842($2_1 + 8 | 0 | 0, $0_1 | 0) | 0;
   $6_1 = $0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0;
   $7_1 = $843($6_1 | 0) | 0;
   HEAP32[($2_1 + 16 | 0) >> 2] = $846($4_1 | 0, HEAP32[$5_1 >> 2] | 0 | 0, $6_1 | 0, $7_1 | 0, $1_1 | 0) | 0;
   if (!($844($2_1 + 16 | 0 | 0) | 0)) {
    break label$1
   }
   $783($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, 5 | 0);
  }
  $789($3_1 | 0) | 0;
  global$0 = $2_1 + 32 | 0;
  return $0_1 | 0;
 }
 
 function $848($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $849($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   $2_1 = HEAP32[$0_1 >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   if (!($795($796($2_1 | 0, $1_1 | 0) | 0 | 0, $738() | 0 | 0) | 0)) {
    break label$1
   }
   HEAP32[$0_1 >> 2] = 0;
  }
  return $0_1 | 0;
 }
 
 function $850($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $851($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   $3_1 = $786($2_1 + 8 | 0 | 0, $0_1 | 0) | 0;
   if (!($787($3_1 | 0) | 0)) {
    break label$1
   }
   $4_1 = $842($2_1 | 0, $0_1 | 0) | 0;
   $849($848($4_1 | 0) | 0 | 0, $1_1 | 0) | 0;
   if (!($844($4_1 | 0) | 0)) {
    break label$1
   }
   $783($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, 1 | 0);
  }
  $789($3_1 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $852($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $0_1 | 0;
 }
 
 function $853($0_1) {
  $0_1 = $0_1 | 0;
  $0_1 = $852($0_1 | 0, 8960 | 0) | 0;
  $719($0_1 + 4 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $854($0_1) {
  $0_1 = $0_1 | 0;
  return $853($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0;
 }
 
 function $855($0_1) {
  $0_1 = $0_1 | 0;
  $2032($853($0_1 | 0) | 0 | 0);
 }
 
 function $856($0_1) {
  $0_1 = $0_1 | 0;
  $855($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0);
 }
 
 function $857($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $858($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   $2_1 = HEAP32[$0_1 >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   if (!($834($835($2_1 | 0, $1_1 | 0) | 0 | 0, $758() | 0 | 0) | 0)) {
    break label$1
   }
   HEAP32[$0_1 >> 2] = 0;
  }
  return $0_1 | 0;
 }
 
 function $859($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $860($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1) | 0 | 0;
 }
 
 function $861($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $862($0_1 | 0, $2_1 + 8 | 0 | 0, $2_1 | 0) | 0;
  $2054($0_1 | 0, $1_1 | 0, $863($1_1 | 0) | 0 | 0);
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $862($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $878($1_1 | 0) | 0;
  $879($0_1 | 0) | 0;
  $878($2_1 | 0) | 0;
  $880($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $863($0_1) {
  $0_1 = $0_1 | 0;
  return $2181($0_1 | 0) | 0 | 0;
 }
 
 function $864($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $865($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $865($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = $873($2_1 + 8 | 0 | 0, $0_1 | 0, $1_1 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return ($3_1 ? $1_1 : $0_1) | 0;
 }
 
 function $866($0_1) {
  $0_1 = $0_1 | 0;
  $2032($716($0_1 | 0) | 0 | 0);
 }
 
 function $867($0_1) {
  $0_1 = $0_1 | 0;
  fimport$93();
  abort();
 }
 
 function $868($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 0;
  HEAP32[($0_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 12 | 0) >> 2] = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 4098;
  HEAP32[($0_1 + 8 | 0) >> 2] = 6;
  HEAP32[($0_1 + 16 | 0) >> 2] = !$1_1;
  $2174($0_1 + 32 | 0 | 0, 0 | 0, 40 | 0) | 0;
  $1620($0_1 + 28 | 0 | 0) | 0;
 }
 
 function $869($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $870($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[($871($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[$0_1 >> 2] = HEAP32[($871($1_1 | 0) | 0) >> 2] | 0;
  HEAP32[$1_1 >> 2] = HEAP32[($871($2_1 + 12 | 0 | 0) | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $871($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $872($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return (HEAP32[$1_1 >> 2] | 0 | 0) < (HEAP32[$2_1 >> 2] | 0 | 0) | 0;
 }
 
 function $873($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return (HEAP32[$1_1 >> 2] | 0) >>> 0 < (HEAP32[$2_1 >> 2] | 0) >>> 0 | 0;
 }
 
 function $874($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   label$2 : {
    if ($795($791($1_1 | 0) | 0 | 0, $738() | 0 | 0) | 0) {
     break label$2
    }
    return !(HEAP32[$0_1 >> 2] | 0) | 0;
   }
   HEAP32[$0_1 >> 2] = 0;
  }
  return 1 | 0;
 }
 
 function $875($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   label$2 : {
    if ($834($832($1_1 | 0) | 0 | 0, $758() | 0 | 0) | 0) {
     break label$2
    }
    return !(HEAP32[$0_1 >> 2] | 0) | 0;
   }
   HEAP32[$0_1 >> 2] = 0;
  }
  return 1 | 0;
 }
 
 function $876($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1) | 0 | 0;
 }
 
 function $877($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 44 | 0) >> 2] | 0 | 0]($0_1, $1_1) | 0 | 0;
 }
 
 function $878($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $879($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $880($0_1) {
  $0_1 = $0_1 | 0;
  $881($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $881($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $882($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $883($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[($882($1_1 | 0) | 0) >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $884($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $885($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $886($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  i64toi32_i32$HIGH_BITS = 0;
  return 0 | 0;
 }
 
 function $887($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $3_1 = 0;
  $2_1 = -1;
  label$1 : {
   if (($0_1 | 0) == (-1 | 0)) {
    break label$1
   }
   $3_1 = 0;
   label$2 : {
    if ((HEAP32[($1_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
     break label$2
    }
    $3_1 = $2179($1_1 | 0) | 0;
   }
   label$3 : {
    label$4 : {
     label$5 : {
      $4_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if ($4_1) {
       break label$5
      }
      $633($1_1 | 0) | 0;
      $4_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if (!$4_1) {
       break label$4
      }
     }
     if ($4_1 >>> 0 > ((HEAP32[($1_1 + 44 | 0) >> 2] | 0) + -8 | 0) >>> 0) {
      break label$3
     }
    }
    if (!$3_1) {
     break label$1
    }
    $2180($1_1 | 0);
    return -1 | 0;
   }
   $2_1 = $4_1 + -1 | 0;
   HEAP32[($1_1 + 4 | 0) >> 2] = $2_1;
   HEAP8[$2_1 >> 0] = $0_1;
   HEAP32[$1_1 >> 2] = (HEAP32[$1_1 >> 2] | 0) & -17 | 0;
   label$6 : {
    if (!$3_1) {
     break label$6
    }
    $2180($1_1 | 0);
   }
   $2_1 = $0_1;
  }
  return $2_1 | 0;
 }
 
 function $888($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
     break label$2
    }
    if ($2179($0_1 | 0) | 0) {
     break label$1
    }
   }
   label$3 : {
    $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if ($1_1 >>> 0 >= (HEAP32[($0_1 + 8 | 0) >> 2] | 0) >>> 0) {
     break label$3
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
    return HEAPU8[$1_1 >> 0] | 0 | 0;
   }
   return $662($0_1 | 0) | 0 | 0;
  }
  label$4 : {
   label$5 : {
    $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if ($1_1 >>> 0 >= (HEAP32[($0_1 + 8 | 0) >> 2] | 0) >>> 0) {
     break label$5
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
    $1_1 = HEAPU8[$1_1 >> 0] | 0;
    break label$4;
   }
   $1_1 = $662($0_1 | 0) | 0;
  }
  $2180($0_1 | 0);
  return $1_1 | 0;
 }
 
 function $889() {
  $890(334232 | 0) | 0;
 }
 
 function $890($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(0 + 334592 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($2099(334592 | 0) | 0)) {
    break label$1
   }
   $891(334588 | 0) | 0;
   fimport$3(252 | 0, 0 | 0, 1024 | 0) | 0;
   $2107(334592 | 0);
  }
  return $0_1 | 0;
 }
 
 function $891($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[(0 + 9580 | 0) >> 2] | 0;
  $892(334236 | 0, $1_1 | 0, 334292 | 0) | 0;
  $893(333552 | 0, 334236 | 0) | 0;
  $894(334300 | 0, $1_1 | 0, 334356 | 0) | 0;
  $895(333640 | 0, 334300 | 0) | 0;
  $1_1 = HEAP32[(0 + 9584 | 0) >> 2] | 0;
  $896(334364 | 0, $1_1 | 0, 334412 | 0) | 0;
  $897(333728 | 0, 334364 | 0) | 0;
  $898(334420 | 0, $1_1 | 0, 334468 | 0) | 0;
  $899(333812 | 0, 334420 | 0) | 0;
  $1_1 = HEAP32[(0 + 9588 | 0) >> 2] | 0;
  $896(334476 | 0, $1_1 | 0, 334524 | 0) | 0;
  $897(333896 | 0, 334476 | 0) | 0;
  $897(334064 | 0, $785((HEAP32[((HEAP32[(0 + 333896 | 0) >> 2] | 0) + -12 | 0) >> 2] | 0) + 333896 | 0 | 0) | 0 | 0) | 0;
  $898(334532 | 0, $1_1 | 0, 334580 | 0) | 0;
  $899(333980 | 0, 334532 | 0) | 0;
  $899(334148 | 0, $826((HEAP32[((HEAP32[(0 + 333980 | 0) >> 2] | 0) + -12 | 0) >> 2] | 0) + 333980 | 0 | 0) | 0 | 0) | 0;
  $900((HEAP32[((HEAP32[(0 + 333552 | 0) >> 2] | 0) + -12 | 0) >> 2] | 0) + 333552 | 0 | 0, 333728 | 0) | 0;
  $901((HEAP32[((HEAP32[(0 + 333640 | 0) >> 2] | 0) + -12 | 0) >> 2] | 0) + 333640 | 0 | 0, 333812 | 0) | 0;
  $902((HEAP32[((HEAP32[(0 + 333896 | 0) >> 2] | 0) + -12 | 0) >> 2] | 0) + 333896 | 0 | 0) | 0;
  $902((HEAP32[((HEAP32[(0 + 333980 | 0) >> 2] | 0) + -12 | 0) >> 2] | 0) + 333980 | 0 | 0) | 0;
  $900((HEAP32[((HEAP32[(0 + 333896 | 0) >> 2] | 0) + -12 | 0) >> 2] | 0) + 333896 | 0 | 0, 333728 | 0) | 0;
  $901((HEAP32[((HEAP32[(0 + 333980 | 0) >> 2] | 0) + -12 | 0) >> 2] | 0) + 333980 | 0 | 0, 333812 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $892($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = $723($0_1 | 0) | 0;
  HEAP32[($0_1 + 40 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 32 | 0) >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = 9600;
  $1_1 = $738() | 0;
  HEAP8[($0_1 + 52 | 0) >> 0] = 0;
  HEAP32[($0_1 + 48 | 0) >> 2] = $1_1;
  $903($3_1 + 8 | 0 | 0, $4_1 | 0);
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($0_1, $3_1 + 8 | 0);
  $1018($3_1 + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $893($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = $904($0_1 + 8 | 0 | 0) | 0;
  HEAP32[$0_1 >> 2] = 8788;
  HEAP32[$2_1 >> 2] = 8808;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  $905($0_1 + (HEAP32[(0 + 8776 | 0) >> 2] | 0) | 0 | 0, $1_1 | 0);
  return $0_1 | 0;
 }
 
 function $894($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = $746($0_1 | 0) | 0;
  HEAP32[($0_1 + 40 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 32 | 0) >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = 9740;
  $1_1 = $758() | 0;
  HEAP8[($0_1 + 52 | 0) >> 0] = 0;
  HEAP32[($0_1 + 48 | 0) >> 2] = $1_1;
  $906($3_1 + 8 | 0 | 0, $4_1 | 0);
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($0_1, $3_1 + 8 | 0);
  $1018($3_1 + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $895($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = $907($0_1 + 8 | 0 | 0) | 0;
  HEAP32[$0_1 >> 2] = 8836;
  HEAP32[$2_1 >> 2] = 8856;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  $908($0_1 + (HEAP32[(0 + 8824 | 0) >> 2] | 0) | 0 | 0, $1_1 | 0);
  return $0_1 | 0;
 }
 
 function $896($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = $723($0_1 | 0) | 0;
  HEAP32[($0_1 + 32 | 0) >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = 9840;
  $903($3_1 + 8 | 0 | 0, $4_1 | 0);
  $1_1 = $909($3_1 + 8 | 0 | 0) | 0;
  $1018($3_1 + 8 | 0 | 0) | 0;
  HEAP32[($0_1 + 40 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 36 | 0) >> 2] = $1_1;
  HEAP8[($0_1 + 44 | 0) >> 0] = $910($1_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $897($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = $904($0_1 + 4 | 0 | 0) | 0;
  HEAP32[$0_1 >> 2] = 8884;
  HEAP32[$2_1 >> 2] = 8904;
  $905($0_1 + (HEAP32[(0 + 8872 | 0) >> 2] | 0) | 0 | 0, $1_1 | 0);
  return $0_1 | 0;
 }
 
 function $898($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = $746($0_1 | 0) | 0;
  HEAP32[($0_1 + 32 | 0) >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = 9944;
  $906($3_1 + 8 | 0 | 0, $4_1 | 0);
  $1_1 = $911($3_1 + 8 | 0 | 0) | 0;
  $1018($3_1 + 8 | 0 | 0) | 0;
  HEAP32[($0_1 + 40 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 36 | 0) >> 2] = $1_1;
  HEAP8[($0_1 + 44 | 0) >> 0] = $912($1_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $899($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = $907($0_1 + 4 | 0 | 0) | 0;
  HEAP32[$0_1 >> 2] = 8932;
  HEAP32[$2_1 >> 2] = 8952;
  $908($0_1 + (HEAP32[(0 + 8920 | 0) >> 2] | 0) | 0 | 0, $1_1 | 0);
  return $0_1 | 0;
 }
 
 function $900($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
  HEAP32[($0_1 + 72 | 0) >> 2] = $1_1;
  return $2_1 | 0;
 }
 
 function $901($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
  HEAP32[($0_1 + 72 | 0) >> 2] = $1_1;
  return $2_1 | 0;
 }
 
 function $902($0_1) {
  $0_1 = $0_1 | 0;
  $913($0_1 | 0, 8192 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $903($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1618($0_1 | 0, $1_1 + 4 | 0 | 0) | 0;
 }
 
 function $904($0_1) {
  $0_1 = $0_1 | 0;
  $928($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 9036;
  return $0_1 | 0;
 }
 
 function $905($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $868($0_1 | 0, $1_1 | 0);
  HEAP32[($0_1 + 72 | 0) >> 2] = 0;
  HEAP32[($0_1 + 76 | 0) >> 2] = $738() | 0;
 }
 
 function $906($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1618($0_1 | 0, $1_1 + 4 | 0 | 0) | 0;
 }
 
 function $907($0_1) {
  $0_1 = $0_1 | 0;
  $928($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 9108;
  return $0_1 | 0;
 }
 
 function $908($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $868($0_1 | 0, $1_1 | 0);
  HEAP32[($0_1 + 72 | 0) >> 2] = 0;
  HEAP32[($0_1 + 76 | 0) >> 2] = $758() | 0;
 }
 
 function $909($0_1) {
  $0_1 = $0_1 | 0;
  return $1023($0_1 | 0, 334832 | 0) | 0 | 0;
 }
 
 function $910($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $911($0_1) {
  $0_1 = $0_1 | 0;
  return $1023($0_1 | 0, 334840 | 0) | 0 | 0;
 }
 
 function $912($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $913($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 | $1_1 | 0;
  return $2_1 | 0;
 }
 
 function $914($0_1) {
  $0_1 = $0_1 | 0;
  $772(333728 | 0) | 0;
  $818(333812 | 0) | 0;
  $772(334064 | 0) | 0;
  $818(334148 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $915($0_1) {
  $0_1 = $0_1 | 0;
  $914(334588 | 0) | 0;
 }
 
 function $916($0_1) {
  $0_1 = $0_1 | 0;
  $721($0_1 | 0) | 0;
  $2032($0_1 | 0);
 }
 
 function $917($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $909($1_1 | 0) | 0;
  HEAP32[($0_1 + 36 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 44 | 0) >> 2] = $918($1_1 | 0) | 0;
  HEAP8[($0_1 + 53 | 0) >> 0] = $910(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   if ((HEAP32[($0_1 + 44 | 0) >> 2] | 0 | 0) < (9 | 0)) {
    break label$1
   }
   $1266(9692 | 0);
   abort();
  }
 }
 
 function $918($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $919($0_1) {
  $0_1 = $0_1 | 0;
  return $920($0_1 | 0, 0 | 0) | 0 | 0;
 }
 
 function $920($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $5_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, $6_1 = 0, i64toi32_i32$1 = 0, $7_1 = 0, $7$hi = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if (!(HEAPU8[($0_1 + 52 | 0) >> 0] | 0)) {
     break label$2
    }
    $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
    if (!$1_1) {
     break label$1
    }
    $4_1 = $738() | 0;
    HEAP8[($0_1 + 52 | 0) >> 0] = 0;
    HEAP32[($0_1 + 48 | 0) >> 2] = $4_1;
    break label$1;
   }
   HEAP32[($2_1 + 24 | 0) >> 2] = 1;
   $3_1 = 0;
   $5_1 = HEAP32[($924($2_1 + 24 | 0 | 0, $0_1 + 44 | 0 | 0) | 0) >> 2] | 0;
   $6_1 = ($5_1 | 0) > (0 | 0) ? $5_1 : 0;
   label$3 : {
    label$4 : {
     label$5 : while (1) {
      if (($3_1 | 0) == ($6_1 | 0)) {
       break label$4
      }
      $4_1 = $888(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0;
      if (($4_1 | 0) == (-1 | 0)) {
       break label$3
      }
      HEAP8[(($2_1 + 24 | 0) + $3_1 | 0) >> 0] = $4_1;
      $3_1 = $3_1 + 1 | 0;
      continue label$5;
     };
    }
    label$6 : {
     label$7 : {
      if (!(HEAPU8[($0_1 + 53 | 0) >> 0] | 0)) {
       break label$7
      }
      HEAP8[($2_1 + 23 | 0) >> 0] = HEAPU8[($2_1 + 24 | 0) >> 0] | 0;
      break label$6;
     }
     $6_1 = ($2_1 + 23 | 0) + 1 | 0;
     label$8 : {
      label$9 : while (1) {
       $3_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[$3_1 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
       $7_1 = i64toi32_i32$0;
       $7$hi = i64toi32_i32$1;
       label$10 : {
        $4_1 = ($2_1 + 24 | 0) + $5_1 | 0;
        switch (($925(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, $3_1 | 0, $2_1 + 24 | 0 | 0, $4_1 | 0, $2_1 + 16 | 0 | 0, $2_1 + 23 | 0 | 0, $6_1 | 0, $2_1 + 12 | 0 | 0) | 0) + -1 | 0 | 0) {
        case 0:
         break label$10;
        case 1:
         break label$3;
        case 2:
         break label$8;
        default:
         break label$6;
        };
       }
       i64toi32_i32$1 = $7$hi;
       i64toi32_i32$0 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $7_1;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       if (($5_1 | 0) == (8 | 0)) {
        break label$3
       }
       $3_1 = $888(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0;
       if (($3_1 | 0) == (-1 | 0)) {
        break label$3
       }
       HEAP8[$4_1 >> 0] = $3_1;
       $5_1 = $5_1 + 1 | 0;
       continue label$9;
      };
     }
     HEAP8[($2_1 + 23 | 0) >> 0] = HEAPU8[($2_1 + 24 | 0) >> 0] | 0;
    }
    label$11 : {
     label$12 : {
      if ($1_1) {
       break label$12
      }
      label$13 : while (1) {
       if (($5_1 | 0) < (1 | 0)) {
        break label$11
       }
       $5_1 = $5_1 + -1 | 0;
       if (($887($740(HEAP8[(($2_1 + 24 | 0) + $5_1 | 0) >> 0] | 0 | 0) | 0 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) == (-1 | 0)) {
        break label$3
       }
       continue label$13;
      };
     }
     HEAP32[($0_1 + 48 | 0) >> 2] = $740(HEAP8[($2_1 + 23 | 0) >> 0] | 0 | 0) | 0;
    }
    $3_1 = $740(HEAP8[($2_1 + 23 | 0) >> 0] | 0 | 0) | 0;
    break label$1;
   }
   $3_1 = $738() | 0;
  }
  global$0 = $2_1 + 32 | 0;
  return $3_1 | 0;
 }
 
 function $921($0_1) {
  $0_1 = $0_1 | 0;
  return $920($0_1 | 0, 1 | 0) | 0 | 0;
 }
 
 function $922($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  $3_1 = $795($1_1 | 0, $738() | 0 | 0) | 0;
  $4_1 = HEAPU8[($0_1 + 52 | 0) >> 0] | 0;
  label$1 : {
   label$2 : {
    if (!$3_1) {
     break label$2
    }
    $3_1 = $1_1;
    if ($4_1 & 255 | 0) {
     break label$1
    }
    $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
    HEAP8[($0_1 + 52 | 0) >> 0] = ($795($3_1 | 0, $738() | 0 | 0) | 0) ^ 1 | 0;
    break label$1;
   }
   label$3 : {
    if (!($4_1 & 255 | 0)) {
     break label$3
    }
    HEAP8[($2_1 + 19 | 0) >> 0] = $735(HEAP32[($0_1 + 48 | 0) >> 2] | 0 | 0) | 0;
    label$4 : {
     label$5 : {
      switch (($923(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0, $2_1 + 19 | 0 | 0, ($2_1 + 19 | 0) + 1 | 0 | 0, $2_1 + 12 | 0 | 0, $2_1 + 24 | 0 | 0, $2_1 + 32 | 0 | 0, $2_1 + 20 | 0 | 0) | 0) + -1 | 0 | 0) {
      case 2:
       $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
       HEAP32[($2_1 + 20 | 0) >> 2] = ($2_1 + 24 | 0) + 1 | 0;
       HEAP8[($2_1 + 24 | 0) >> 0] = $3_1;
      default:
       label$8 : while (1) {
        label$9 : {
         $3_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
         if ($3_1 >>> 0 > ($2_1 + 24 | 0) >>> 0) {
          break label$9
         }
         $4_1 = 1;
         break label$4;
        }
        $3_1 = $3_1 + -1 | 0;
        HEAP32[($2_1 + 20 | 0) >> 2] = $3_1;
        if (($887(HEAP8[$3_1 >> 0] | 0 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) != (-1 | 0)) {
         continue label$8
        }
        break label$8;
       };
       break;
      case 0:
      case 1:
       break label$5;
      };
     }
     $4_1 = 0;
     $3_1 = $738() | 0;
    }
    if (!$4_1) {
     break label$1
    }
   }
   HEAP8[($0_1 + 52 | 0) >> 0] = 1;
   HEAP32[($0_1 + 48 | 0) >> 2] = $1_1;
   $3_1 = $1_1;
  }
  global$0 = $2_1 + 32 | 0;
  return $3_1 | 0;
 }
 
 function $923($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) | 0 | 0;
 }
 
 function $924($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $926($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $925($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) | 0 | 0;
 }
 
 function $926($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = $927($2_1 + 8 | 0 | 0, $0_1 | 0, $1_1 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return ($3_1 ? $1_1 : $0_1) | 0;
 }
 
 function $927($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return (HEAP32[$1_1 >> 2] | 0 | 0) < (HEAP32[$2_1 >> 2] | 0 | 0) | 0;
 }
 
 function $928($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 8976;
  return $0_1 | 0;
 }
 
 function $929($0_1) {
  $0_1 = $0_1 | 0;
  $744($0_1 | 0) | 0;
  $2032($0_1 | 0);
 }
 
 function $930($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $911($1_1 | 0) | 0;
  HEAP32[($0_1 + 36 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 44 | 0) >> 2] = $931($1_1 | 0) | 0;
  HEAP8[($0_1 + 53 | 0) >> 0] = $912(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   if ((HEAP32[($0_1 + 44 | 0) >> 2] | 0 | 0) < (9 | 0)) {
    break label$1
   }
   $1266(9692 | 0);
   abort();
  }
 }
 
 function $931($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $932($0_1) {
  $0_1 = $0_1 | 0;
  return $933($0_1 | 0, 0 | 0) | 0 | 0;
 }
 
 function $933($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $5_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, $6_1 = 0, i64toi32_i32$1 = 0, $7_1 = 0, $7$hi = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if (!(HEAPU8[($0_1 + 52 | 0) >> 0] | 0)) {
     break label$2
    }
    $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
    if (!$1_1) {
     break label$1
    }
    $4_1 = $758() | 0;
    HEAP8[($0_1 + 52 | 0) >> 0] = 0;
    HEAP32[($0_1 + 48 | 0) >> 2] = $4_1;
    break label$1;
   }
   HEAP32[($2_1 + 24 | 0) >> 2] = 1;
   $3_1 = 0;
   $5_1 = HEAP32[($924($2_1 + 24 | 0 | 0, $0_1 + 44 | 0 | 0) | 0) >> 2] | 0;
   $6_1 = ($5_1 | 0) > (0 | 0) ? $5_1 : 0;
   label$3 : {
    label$4 : {
     label$5 : while (1) {
      if (($3_1 | 0) == ($6_1 | 0)) {
       break label$4
      }
      $4_1 = $888(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0;
      if (($4_1 | 0) == (-1 | 0)) {
       break label$3
      }
      HEAP8[(($2_1 + 24 | 0) + $3_1 | 0) >> 0] = $4_1;
      $3_1 = $3_1 + 1 | 0;
      continue label$5;
     };
    }
    label$6 : {
     label$7 : {
      if (!(HEAPU8[($0_1 + 53 | 0) >> 0] | 0)) {
       break label$7
      }
      HEAP32[($2_1 + 20 | 0) >> 2] = HEAP8[($2_1 + 24 | 0) >> 0] | 0;
      break label$6;
     }
     $6_1 = $2_1 + 24 | 0;
     label$8 : {
      label$9 : while (1) {
       $3_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[$3_1 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
       $7_1 = i64toi32_i32$0;
       $7$hi = i64toi32_i32$1;
       label$10 : {
        $4_1 = ($2_1 + 24 | 0) + $5_1 | 0;
        switch (($937(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, $3_1 | 0, $2_1 + 24 | 0 | 0, $4_1 | 0, $2_1 + 16 | 0 | 0, $2_1 + 20 | 0 | 0, $6_1 | 0, $2_1 + 12 | 0 | 0) | 0) + -1 | 0 | 0) {
        case 0:
         break label$10;
        case 1:
         break label$3;
        case 2:
         break label$8;
        default:
         break label$6;
        };
       }
       i64toi32_i32$1 = $7$hi;
       i64toi32_i32$0 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $7_1;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       if (($5_1 | 0) == (8 | 0)) {
        break label$3
       }
       $3_1 = $888(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0;
       if (($3_1 | 0) == (-1 | 0)) {
        break label$3
       }
       HEAP8[$4_1 >> 0] = $3_1;
       $5_1 = $5_1 + 1 | 0;
       continue label$9;
      };
     }
     HEAP32[($2_1 + 20 | 0) >> 2] = HEAP8[($2_1 + 24 | 0) >> 0] | 0;
    }
    label$11 : {
     label$12 : {
      if ($1_1) {
       break label$12
      }
      label$13 : while (1) {
       if (($5_1 | 0) < (1 | 0)) {
        break label$11
       }
       $5_1 = $5_1 + -1 | 0;
       if (($887($760(HEAP8[(($2_1 + 24 | 0) + $5_1 | 0) >> 0] | 0 | 0) | 0 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) == (-1 | 0)) {
        break label$3
       }
       continue label$13;
      };
     }
     HEAP32[($0_1 + 48 | 0) >> 2] = $760(HEAP32[($2_1 + 20 | 0) >> 2] | 0 | 0) | 0;
    }
    $3_1 = $760(HEAP32[($2_1 + 20 | 0) >> 2] | 0 | 0) | 0;
    break label$1;
   }
   $3_1 = $758() | 0;
  }
  global$0 = $2_1 + 32 | 0;
  return $3_1 | 0;
 }
 
 function $934($0_1) {
  $0_1 = $0_1 | 0;
  return $933($0_1 | 0, 1 | 0) | 0 | 0;
 }
 
 function $935($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  $3_1 = $834($1_1 | 0, $758() | 0 | 0) | 0;
  $4_1 = HEAPU8[($0_1 + 52 | 0) >> 0] | 0;
  label$1 : {
   label$2 : {
    if (!$3_1) {
     break label$2
    }
    $3_1 = $1_1;
    if ($4_1 & 255 | 0) {
     break label$1
    }
    $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
    HEAP8[($0_1 + 52 | 0) >> 0] = ($834($3_1 | 0, $758() | 0 | 0) | 0) ^ 1 | 0;
    break label$1;
   }
   label$3 : {
    if (!($4_1 & 255 | 0)) {
     break label$3
    }
    HEAP32[($2_1 + 16 | 0) >> 2] = $756(HEAP32[($0_1 + 48 | 0) >> 2] | 0 | 0) | 0;
    label$4 : {
     label$5 : {
      switch (($936(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0, $2_1 + 16 | 0 | 0, $2_1 + 20 | 0 | 0, $2_1 + 12 | 0 | 0, $2_1 + 24 | 0 | 0, $2_1 + 32 | 0 | 0, $2_1 + 20 | 0 | 0) | 0) + -1 | 0 | 0) {
      case 2:
       $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
       HEAP32[($2_1 + 20 | 0) >> 2] = $2_1 + 25 | 0;
       HEAP8[($2_1 + 24 | 0) >> 0] = $3_1;
      default:
       label$8 : while (1) {
        label$9 : {
         $3_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
         if ($3_1 >>> 0 > ($2_1 + 24 | 0) >>> 0) {
          break label$9
         }
         $4_1 = 1;
         break label$4;
        }
        $3_1 = $3_1 + -1 | 0;
        HEAP32[($2_1 + 20 | 0) >> 2] = $3_1;
        if (($887(HEAP8[$3_1 >> 0] | 0 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) != (-1 | 0)) {
         continue label$8
        }
        break label$8;
       };
       break;
      case 0:
      case 1:
       break label$5;
      };
     }
     $4_1 = 0;
     $3_1 = $758() | 0;
    }
    if (!$4_1) {
     break label$1
    }
   }
   HEAP8[($0_1 + 52 | 0) >> 0] = 1;
   HEAP32[($0_1 + 48 | 0) >> 2] = $1_1;
   $3_1 = $1_1;
  }
  global$0 = $2_1 + 32 | 0;
  return $3_1 | 0;
 }
 
 function $936($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) | 0 | 0;
 }
 
 function $937($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) | 0 | 0;
 }
 
 function $938($0_1) {
  $0_1 = $0_1 | 0;
  $721($0_1 | 0) | 0;
  $2032($0_1 | 0);
 }
 
 function $939($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1) | 0;
  $1_1 = $909($1_1 | 0) | 0;
  HEAP32[($0_1 + 36 | 0) >> 2] = $1_1;
  HEAP8[($0_1 + 44 | 0) >> 0] = $910($1_1 | 0) | 0;
 }
 
 function $940($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $4_1 = 0, $5_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = $1_1 + 16 | 0;
  label$1 : {
   label$2 : while (1) {
    $3_1 = $941(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0, $1_1 + 8 | 0 | 0, $2_1 | 0, $1_1 + 4 | 0 | 0) | 0;
    $4_1 = -1;
    $5_1 = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) - ($1_1 + 8 | 0) | 0;
    if (($2178($1_1 + 8 | 0 | 0, 1 | 0, $5_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) != ($5_1 | 0)) {
     break label$1
    }
    label$3 : {
     switch ($3_1 + -1 | 0 | 0) {
     case 1:
      break label$1;
     case 0:
      continue label$2;
     default:
      break label$3;
     };
    }
    break label$2;
   };
   $4_1 = $616(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 ? -1 : 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $941($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1) | 0 | 0;
 }
 
 function $942($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  label$1 : {
   label$2 : {
    if (HEAPU8[($0_1 + 44 | 0) >> 0] | 0) {
     break label$2
    }
    $3_1 = 0;
    $2_1 = ($2_1 | 0) > (0 | 0) ? $2_1 : 0;
    label$3 : while (1) {
     if (($3_1 | 0) == ($2_1 | 0)) {
      break label$1
     }
     label$4 : {
      if (((((wasm2js_i32$1 = $0_1, wasm2js_i32$2 = $740(HEAP8[$1_1 >> 0] | 0 | 0) | 0), wasm2js_i32$0 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0 | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) | 0) != ($738() | 0 | 0)) {
       break label$4
      }
      return $3_1 | 0;
     }
     $1_1 = $1_1 + 1 | 0;
     $3_1 = $3_1 + 1 | 0;
     continue label$3;
    };
   }
   $2_1 = $2178($1_1 | 0, 1 | 0, $2_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0;
  }
  return $2_1 | 0;
 }
 
 function $943($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $5_1 = 0, $6_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($795($1_1 | 0, $738() | 0 | 0) | 0) {
      break label$3
     }
     HEAP8[($2_1 + 23 | 0) >> 0] = $735($1_1 | 0) | 0;
     label$4 : {
      if (!(HEAPU8[($0_1 + 44 | 0) >> 0] | 0)) {
       break label$4
      }
      if (($2178($2_1 + 23 | 0 | 0, 1 | 0, 1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) != (1 | 0)) {
       break label$2
      }
      break label$3;
     }
     HEAP32[($2_1 + 16 | 0) >> 2] = $2_1 + 24 | 0;
     $3_1 = $2_1 + 32 | 0;
     $4_1 = ($2_1 + 23 | 0) + 1 | 0;
     $5_1 = $2_1 + 23 | 0;
     label$5 : while (1) {
      $6_1 = $923(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0, $5_1 | 0, $4_1 | 0, $2_1 + 12 | 0 | 0, $2_1 + 24 | 0 | 0, $3_1 | 0, $2_1 + 16 | 0 | 0) | 0;
      if ((HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0) == ($5_1 | 0)) {
       break label$2
      }
      label$6 : {
       if (($6_1 | 0) != (3 | 0)) {
        break label$6
       }
       if (($2178($5_1 | 0, 1 | 0, 1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) == (1 | 0)) {
        break label$3
       }
       break label$2;
      }
      if ($6_1 >>> 0 > 1 >>> 0) {
       break label$2
      }
      $5_1 = (HEAP32[($2_1 + 16 | 0) >> 2] | 0) - ($2_1 + 24 | 0) | 0;
      if (($2178($2_1 + 24 | 0 | 0, 1 | 0, $5_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) != ($5_1 | 0)) {
       break label$2
      }
      $5_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
      if (($6_1 | 0) == (1 | 0)) {
       continue label$5
      }
      break label$5;
     };
    }
    $0_1 = $944($1_1 | 0) | 0;
    break label$1;
   }
   $0_1 = $738() | 0;
  }
  global$0 = $2_1 + 32 | 0;
  return $0_1 | 0;
 }
 
 function $944($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!($795($0_1 | 0, $738() | 0 | 0) | 0)) {
    break label$1
   }
   $0_1 = ($738() | 0) ^ -1 | 0;
  }
  return $0_1 | 0;
 }
 
 function $945($0_1) {
  $0_1 = $0_1 | 0;
  $744($0_1 | 0) | 0;
  $2032($0_1 | 0);
 }
 
 function $946($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1) | 0;
  $1_1 = $911($1_1 | 0) | 0;
  HEAP32[($0_1 + 36 | 0) >> 2] = $1_1;
  HEAP8[($0_1 + 44 | 0) >> 0] = $912($1_1 | 0) | 0;
 }
 
 function $947($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $4_1 = 0, $5_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = $1_1 + 16 | 0;
  label$1 : {
   label$2 : while (1) {
    $3_1 = $948(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0, $1_1 + 8 | 0 | 0, $2_1 | 0, $1_1 + 4 | 0 | 0) | 0;
    $4_1 = -1;
    $5_1 = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) - ($1_1 + 8 | 0) | 0;
    if (($2178($1_1 + 8 | 0 | 0, 1 | 0, $5_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) != ($5_1 | 0)) {
     break label$1
    }
    label$3 : {
     switch ($3_1 + -1 | 0 | 0) {
     case 1:
      break label$1;
     case 0:
      continue label$2;
     default:
      break label$3;
     };
    }
    break label$2;
   };
   $4_1 = $616(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 ? -1 : 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $948($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1) | 0 | 0;
 }
 
 function $949($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  label$1 : {
   label$2 : {
    if (HEAPU8[($0_1 + 44 | 0) >> 0] | 0) {
     break label$2
    }
    $3_1 = 0;
    $2_1 = ($2_1 | 0) > (0 | 0) ? $2_1 : 0;
    label$3 : while (1) {
     if (($3_1 | 0) == ($2_1 | 0)) {
      break label$1
     }
     label$4 : {
      if (((((wasm2js_i32$1 = $0_1, wasm2js_i32$2 = $760(HEAP32[$1_1 >> 2] | 0 | 0) | 0), wasm2js_i32$0 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0 | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) | 0) != ($758() | 0 | 0)) {
       break label$4
      }
      return $3_1 | 0;
     }
     $1_1 = $1_1 + 4 | 0;
     $3_1 = $3_1 + 1 | 0;
     continue label$3;
    };
   }
   $2_1 = $2178($1_1 | 0, 4 | 0, $2_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0;
  }
  return $2_1 | 0;
 }
 
 function $950($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $5_1 = 0, $6_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($834($1_1 | 0, $758() | 0 | 0) | 0) {
      break label$3
     }
     HEAP32[($2_1 + 20 | 0) >> 2] = $756($1_1 | 0) | 0;
     label$4 : {
      if (!(HEAPU8[($0_1 + 44 | 0) >> 0] | 0)) {
       break label$4
      }
      if (($2178($2_1 + 20 | 0 | 0, 4 | 0, 1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) != (1 | 0)) {
       break label$2
      }
      break label$3;
     }
     HEAP32[($2_1 + 16 | 0) >> 2] = $2_1 + 24 | 0;
     $3_1 = $2_1 + 32 | 0;
     $4_1 = $2_1 + 24 | 0;
     $5_1 = $2_1 + 20 | 0;
     label$5 : while (1) {
      $6_1 = $936(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0, $5_1 | 0, $4_1 | 0, $2_1 + 12 | 0 | 0, $2_1 + 24 | 0 | 0, $3_1 | 0, $2_1 + 16 | 0 | 0) | 0;
      if ((HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0) == ($5_1 | 0)) {
       break label$2
      }
      label$6 : {
       if (($6_1 | 0) != (3 | 0)) {
        break label$6
       }
       if (($2178($5_1 | 0, 1 | 0, 1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) == (1 | 0)) {
        break label$3
       }
       break label$2;
      }
      if ($6_1 >>> 0 > 1 >>> 0) {
       break label$2
      }
      $5_1 = (HEAP32[($2_1 + 16 | 0) >> 2] | 0) - ($2_1 + 24 | 0) | 0;
      if (($2178($2_1 + 24 | 0 | 0, 1 | 0, $5_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) != ($5_1 | 0)) {
       break label$2
      }
      $5_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
      if (($6_1 | 0) == (1 | 0)) {
       continue label$5
      }
      break label$5;
     };
    }
    $0_1 = $951($1_1 | 0) | 0;
    break label$1;
   }
   $0_1 = $758() | 0;
  }
  global$0 = $2_1 + 32 | 0;
  return $0_1 | 0;
 }
 
 function $951($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!($834($0_1 | 0, $758() | 0 | 0) | 0)) {
    break label$1
   }
   $0_1 = ($758() | 0) ^ -1 | 0;
  }
  return $0_1 | 0;
 }
 
 function $952() {
  $889();
 }
 
 function $953() {
  
 }
 
 function $954($0_1, $1_1, $2_1, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$0 = 0, $5_1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, $9$hi = 0, i64toi32_i32$1 = 0, $9_1 = 0, $10$hi = 0, $11$hi = 0, $10_1 = 0, $7_1 = 0, $11_1 = 0, $6_1 = 0, $4_1 = 0, $12_1 = 0, $12$hi = 0, $8_1 = 0, $32_1 = 0, $33_1 = 0, $185_1 = 0, $185$hi = 0, $242_1 = 0, $242$hi = 0, $324$hi = 0, $327_1 = 0, $327$hi = 0, $406$hi = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         if ($1_1 >>> 0 > 36 >>> 0) {
          break label$7
         }
         label$8 : while (1) {
          label$9 : {
           label$10 : {
            $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
            if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
             break label$10
            }
            HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
            $5_1 = HEAPU8[$5_1 >> 0] | 0;
            break label$9;
           }
           $5_1 = $664($0_1 | 0) | 0;
          }
          if ($665($5_1 | 0) | 0) {
           continue label$8
          }
          break label$8;
         };
         $6_1 = 0;
         label$11 : {
          label$12 : {
           switch ($5_1 + -43 | 0 | 0) {
           case 0:
           case 2:
            break label$12;
           default:
            break label$11;
           };
          }
          $6_1 = ($5_1 | 0) == (45 | 0) ? -1 : 0;
          label$13 : {
           $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
           if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
            break label$13
           }
           HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
           $5_1 = HEAPU8[$5_1 >> 0] | 0;
           break label$11;
          }
          $5_1 = $664($0_1 | 0) | 0;
         }
         label$14 : {
          label$15 : {
           if ($1_1 & -17 | 0) {
            break label$15
           }
           if (($5_1 | 0) != (48 | 0)) {
            break label$15
           }
           label$16 : {
            label$17 : {
             $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
             if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
              break label$17
             }
             HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
             $5_1 = HEAPU8[$5_1 >> 0] | 0;
             break label$16;
            }
            $5_1 = $664($0_1 | 0) | 0;
           }
           label$18 : {
            if (($5_1 & -33 | 0 | 0) != (88 | 0)) {
             break label$18
            }
            label$19 : {
             label$20 : {
              $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
              if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
               break label$20
              }
              HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
              $5_1 = HEAPU8[$5_1 >> 0] | 0;
              break label$19;
             }
             $5_1 = $664($0_1 | 0) | 0;
            }
            $1_1 = 16;
            if ((HEAPU8[($5_1 + 10049 | 0) >> 0] | 0) >>> 0 < 16 >>> 0) {
             break label$5
            }
            label$21 : {
             if (HEAP32[($0_1 + 104 | 0) >> 2] | 0) {
              break label$21
             }
             i64toi32_i32$0 = 0;
             $3_1 = 0;
             $3$hi = i64toi32_i32$0;
             if ($2_1) {
              break label$1
             }
             break label$2;
            }
            $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
            HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + -1 | 0;
            if (!$2_1) {
             break label$2
            }
            HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + -2 | 0;
            i64toi32_i32$0 = 0;
            $3_1 = 0;
            $3$hi = i64toi32_i32$0;
            break label$1;
           }
           if ($1_1) {
            break label$14
           }
           $1_1 = 8;
           break label$5;
          }
          $1_1 = $1_1 ? $1_1 : 10;
          if ($1_1 >>> 0 > (HEAPU8[($5_1 + 10049 | 0) >> 0] | 0) >>> 0) {
           break label$14
          }
          label$22 : {
           if (!(HEAP32[($0_1 + 104 | 0) >> 2] | 0)) {
            break label$22
           }
           HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
          }
          i64toi32_i32$0 = 0;
          $3_1 = 0;
          $3$hi = i64toi32_i32$0;
          i64toi32_i32$0 = 0;
          $663($0_1 | 0, 0 | 0, i64toi32_i32$0 | 0);
          HEAP32[($587() | 0) >> 2] = 28;
          break label$1;
         }
         if (($1_1 | 0) != (10 | 0)) {
          break label$5
         }
         i64toi32_i32$0 = 0;
         $9_1 = 0;
         $9$hi = i64toi32_i32$0;
         label$23 : {
          $2_1 = $5_1 + -48 | 0;
          if ($2_1 >>> 0 > 9 >>> 0) {
           break label$23
          }
          $1_1 = 0;
          label$24 : while (1) {
           $1_1 = Math_imul($1_1, 10);
           label$25 : {
            label$26 : {
             $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
             if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
              break label$26
             }
             HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
             $5_1 = HEAPU8[$5_1 >> 0] | 0;
             break label$25;
            }
            $5_1 = $664($0_1 | 0) | 0;
           }
           $1_1 = $1_1 + $2_1 | 0;
           label$27 : {
            $2_1 = $5_1 + -48 | 0;
            if ($2_1 >>> 0 > 9 >>> 0) {
             break label$27
            }
            if ($1_1 >>> 0 < 429496729 >>> 0) {
             continue label$24
            }
           }
           break label$24;
          };
          i64toi32_i32$0 = 0;
          $9_1 = $1_1;
          $9$hi = i64toi32_i32$0;
         }
         if ($2_1 >>> 0 > 9 >>> 0) {
          break label$6
         }
         i64toi32_i32$0 = $9$hi;
         i64toi32_i32$1 = 0;
         i64toi32_i32$1 = __wasm_i64_mul($9_1 | 0, i64toi32_i32$0 | 0, 10 | 0, i64toi32_i32$1 | 0) | 0;
         i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
         $10_1 = i64toi32_i32$1;
         $10$hi = i64toi32_i32$0;
         i64toi32_i32$0 = 0;
         $11_1 = $2_1;
         $11$hi = i64toi32_i32$0;
         label$28 : while (1) {
          label$29 : {
           label$30 : {
            $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
            if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
             break label$30
            }
            HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
            $5_1 = HEAPU8[$5_1 >> 0] | 0;
            break label$29;
           }
           $5_1 = $664($0_1 | 0) | 0;
          }
          i64toi32_i32$0 = $10$hi;
          i64toi32_i32$0 = $11$hi;
          i64toi32_i32$0 = $10$hi;
          i64toi32_i32$2 = $10_1;
          i64toi32_i32$1 = $11$hi;
          i64toi32_i32$3 = $11_1;
          i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
          i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
          if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
           i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
          }
          $9_1 = i64toi32_i32$4;
          $9$hi = i64toi32_i32$5;
          $2_1 = $5_1 + -48 | 0;
          if ($2_1 >>> 0 > 9 >>> 0) {
           break label$6
          }
          i64toi32_i32$5 = $9$hi;
          i64toi32_i32$0 = $9_1;
          i64toi32_i32$2 = 429496729;
          i64toi32_i32$3 = -1717986918;
          if (i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
           break label$6
          }
          i64toi32_i32$0 = $9$hi;
          i64toi32_i32$5 = 0;
          i64toi32_i32$5 = __wasm_i64_mul($9_1 | 0, i64toi32_i32$0 | 0, 10 | 0, i64toi32_i32$5 | 0) | 0;
          i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
          $10_1 = i64toi32_i32$5;
          $10$hi = i64toi32_i32$0;
          i64toi32_i32$0 = 0;
          $11_1 = $2_1;
          $11$hi = i64toi32_i32$0;
          i64toi32_i32$3 = $2_1;
          i64toi32_i32$5 = -1;
          i64toi32_i32$2 = -1;
          i64toi32_i32$5 = i64toi32_i32$0 ^ i64toi32_i32$5 | 0;
          $185_1 = i64toi32_i32$3 ^ i64toi32_i32$2 | 0;
          $185$hi = i64toi32_i32$5;
          i64toi32_i32$5 = $10$hi;
          i64toi32_i32$0 = $10_1;
          i64toi32_i32$3 = $185$hi;
          i64toi32_i32$2 = $185_1;
          if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 <= i64toi32_i32$2 >>> 0 | 0) | 0) {
           continue label$28
          }
          break label$28;
         };
         $1_1 = 10;
         break label$4;
        }
        HEAP32[($587() | 0) >> 2] = 28;
        i64toi32_i32$0 = 0;
        $3_1 = 0;
        $3$hi = i64toi32_i32$0;
        break label$1;
       }
       $1_1 = 10;
       if ($2_1 >>> 0 <= 9 >>> 0) {
        break label$4
       }
       break label$3;
      }
      label$31 : {
       if (!($1_1 & ($1_1 + -1 | 0) | 0)) {
        break label$31
       }
       i64toi32_i32$0 = 0;
       $9_1 = 0;
       $9$hi = i64toi32_i32$0;
       label$32 : {
        $2_1 = HEAPU8[($5_1 + 10049 | 0) >> 0] | 0;
        if ($1_1 >>> 0 <= $2_1 >>> 0) {
         break label$32
        }
        $7_1 = 0;
        label$33 : while (1) {
         $7_1 = $2_1 + Math_imul($7_1, $1_1) | 0;
         label$34 : {
          label$35 : {
           $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
           if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
            break label$35
           }
           HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
           $5_1 = HEAPU8[$5_1 >> 0] | 0;
           break label$34;
          }
          $5_1 = $664($0_1 | 0) | 0;
         }
         $2_1 = HEAPU8[($5_1 + 10049 | 0) >> 0] | 0;
         label$36 : {
          if ($7_1 >>> 0 > 119304646 >>> 0) {
           break label$36
          }
          if ($1_1 >>> 0 > $2_1 >>> 0) {
           continue label$33
          }
         }
         break label$33;
        };
        i64toi32_i32$0 = 0;
        $9_1 = $7_1;
        $9$hi = i64toi32_i32$0;
       }
       if ($1_1 >>> 0 <= $2_1 >>> 0) {
        break label$4
       }
       i64toi32_i32$0 = 0;
       $10_1 = $1_1;
       $10$hi = i64toi32_i32$0;
       label$37 : while (1) {
        i64toi32_i32$0 = $9$hi;
        i64toi32_i32$0 = $10$hi;
        i64toi32_i32$0 = $9$hi;
        i64toi32_i32$5 = $10$hi;
        i64toi32_i32$5 = __wasm_i64_mul($9_1 | 0, i64toi32_i32$0 | 0, $10_1 | 0, i64toi32_i32$5 | 0) | 0;
        i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
        $11_1 = i64toi32_i32$5;
        $11$hi = i64toi32_i32$0;
        i64toi32_i32$0 = 0;
        i64toi32_i32$2 = $2_1;
        i64toi32_i32$5 = 0;
        i64toi32_i32$3 = 255;
        i64toi32_i32$5 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
        $12_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
        $12$hi = i64toi32_i32$5;
        i64toi32_i32$0 = $12_1;
        i64toi32_i32$2 = -1;
        i64toi32_i32$3 = -1;
        i64toi32_i32$2 = i64toi32_i32$5 ^ i64toi32_i32$2 | 0;
        $242_1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
        $242$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $11$hi;
        i64toi32_i32$5 = $11_1;
        i64toi32_i32$0 = $242$hi;
        i64toi32_i32$3 = $242_1;
        if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
         break label$4
        }
        label$38 : {
         label$39 : {
          $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
          if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
           break label$39
          }
          HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
          $5_1 = HEAPU8[$5_1 >> 0] | 0;
          break label$38;
         }
         $5_1 = $664($0_1 | 0) | 0;
        }
        i64toi32_i32$5 = $11$hi;
        i64toi32_i32$5 = $12$hi;
        i64toi32_i32$5 = $11$hi;
        i64toi32_i32$3 = $11_1;
        i64toi32_i32$2 = $12$hi;
        i64toi32_i32$0 = $12_1;
        i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
        if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
         i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
        }
        $9_1 = i64toi32_i32$1;
        $9$hi = i64toi32_i32$4;
        $2_1 = HEAPU8[($5_1 + 10049 | 0) >> 0] | 0;
        if ($1_1 >>> 0 <= $2_1 >>> 0) {
         break label$4
        }
        i64toi32_i32$4 = $10$hi;
        i64toi32_i32$4 = $9$hi;
        i64toi32_i32$4 = $10$hi;
        i64toi32_i32$3 = 0;
        i64toi32_i32$5 = $9$hi;
        i64toi32_i32$0 = 0;
        $696($4_1 | 0, $10_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$3 | 0, $9_1 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$0 | 0);
        i64toi32_i32$3 = $4_1;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] | 0;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] | 0;
        i64toi32_i32$3 = i64toi32_i32$0;
        i64toi32_i32$0 = 0;
        i64toi32_i32$4 = 0;
        if ((i64toi32_i32$3 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$0 | 0) | 0) {
         break label$4
        }
        continue label$37;
       };
      }
      $8_1 = HEAP8[(((Math_imul($1_1, 23) >>> 5 | 0) & 7 | 0) + 10305 | 0) >> 0] | 0;
      i64toi32_i32$3 = 0;
      $9_1 = 0;
      $9$hi = i64toi32_i32$3;
      label$40 : {
       $2_1 = HEAPU8[($5_1 + 10049 | 0) >> 0] | 0;
       if ($1_1 >>> 0 <= $2_1 >>> 0) {
        break label$40
       }
       $7_1 = 0;
       label$41 : while (1) {
        $7_1 = $2_1 | ($7_1 << $8_1 | 0) | 0;
        label$42 : {
         label$43 : {
          $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
          if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
           break label$43
          }
          HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
          $5_1 = HEAPU8[$5_1 >> 0] | 0;
          break label$42;
         }
         $5_1 = $664($0_1 | 0) | 0;
        }
        $2_1 = HEAPU8[($5_1 + 10049 | 0) >> 0] | 0;
        label$44 : {
         if ($7_1 >>> 0 > 134217727 >>> 0) {
          break label$44
         }
         if ($1_1 >>> 0 > $2_1 >>> 0) {
          continue label$41
         }
        }
        break label$41;
       };
       i64toi32_i32$3 = 0;
       $9_1 = $7_1;
       $9$hi = i64toi32_i32$3;
      }
      i64toi32_i32$3 = 0;
      $10_1 = $8_1;
      $10$hi = i64toi32_i32$3;
      i64toi32_i32$3 = -1;
      i64toi32_i32$4 = -1;
      i64toi32_i32$5 = $10$hi;
      i64toi32_i32$0 = $10_1;
      i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = 0;
       $32_1 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
      } else {
       i64toi32_i32$5 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
       $32_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$2 | 0) | 0;
      }
      $11_1 = $32_1;
      $11$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $9$hi;
      i64toi32_i32$5 = $11$hi;
      i64toi32_i32$3 = $11_1;
      i64toi32_i32$4 = $9$hi;
      i64toi32_i32$0 = $9_1;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0) {
       break label$4
      }
      if ($1_1 >>> 0 <= $2_1 >>> 0) {
       break label$4
      }
      label$45 : while (1) {
       i64toi32_i32$3 = $9$hi;
       i64toi32_i32$3 = $10$hi;
       i64toi32_i32$3 = $9$hi;
       i64toi32_i32$0 = $9_1;
       i64toi32_i32$5 = $10$hi;
       i64toi32_i32$4 = $10_1;
       i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
        $33_1 = 0;
       } else {
        i64toi32_i32$5 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$2 | 0) | 0;
        $33_1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
       }
       $324$hi = i64toi32_i32$5;
       i64toi32_i32$5 = 0;
       i64toi32_i32$3 = $2_1;
       i64toi32_i32$0 = 0;
       i64toi32_i32$4 = 255;
       i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
       $327_1 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
       $327$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $324$hi;
       i64toi32_i32$5 = $33_1;
       i64toi32_i32$3 = $327$hi;
       i64toi32_i32$4 = $327_1;
       i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
       $9_1 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
       $9$hi = i64toi32_i32$3;
       label$46 : {
        label$47 : {
         $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
         if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
          break label$47
         }
         HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
         $5_1 = HEAPU8[$5_1 >> 0] | 0;
         break label$46;
        }
        $5_1 = $664($0_1 | 0) | 0;
       }
       i64toi32_i32$3 = $9$hi;
       i64toi32_i32$3 = $11$hi;
       i64toi32_i32$3 = $9$hi;
       i64toi32_i32$0 = $9_1;
       i64toi32_i32$5 = $11$hi;
       i64toi32_i32$4 = $11_1;
       if (i64toi32_i32$3 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
        break label$4
       }
       $2_1 = HEAPU8[($5_1 + 10049 | 0) >> 0] | 0;
       if ($1_1 >>> 0 > $2_1 >>> 0) {
        continue label$45
       }
       break label$45;
      };
     }
     if ($1_1 >>> 0 <= (HEAPU8[($5_1 + 10049 | 0) >> 0] | 0) >>> 0) {
      break label$3
     }
     label$48 : while (1) {
      label$49 : {
       label$50 : {
        $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
         break label$50
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
        $5_1 = HEAPU8[$5_1 >> 0] | 0;
        break label$49;
       }
       $5_1 = $664($0_1 | 0) | 0;
      }
      if ($1_1 >>> 0 > (HEAPU8[($5_1 + 10049 | 0) >> 0] | 0) >>> 0) {
       continue label$48
      }
      break label$48;
     };
     HEAP32[($587() | 0) >> 2] = 68;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$4 = $3_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$3 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
     $6_1 = !(i64toi32_i32$4 & i64toi32_i32$5 | 0 | i64toi32_i32$3 | 0) ? $6_1 : 0;
     i64toi32_i32$3 = i64toi32_i32$0;
     i64toi32_i32$3 = i64toi32_i32$0;
     $9_1 = i64toi32_i32$4;
     $9$hi = i64toi32_i32$0;
    }
    label$51 : {
     if (!(HEAP32[($0_1 + 104 | 0) >> 2] | 0)) {
      break label$51
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
    }
    label$52 : {
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$0 = $9_1;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$5 = $3_1;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0) {
      break label$52
     }
     label$53 : {
      i64toi32_i32$0 = $3$hi;
      if ($3_1 & 1 | 0) {
       break label$53
      }
      if ($6_1) {
       break label$53
      }
      HEAP32[($587() | 0) >> 2] = 68;
      i64toi32_i32$0 = $3$hi;
      i64toi32_i32$5 = $3_1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$4 = -1;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $3_1 = i64toi32_i32$2;
      $3$hi = i64toi32_i32$1;
      break label$1;
     }
     i64toi32_i32$1 = $9$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $9$hi;
     i64toi32_i32$0 = $9_1;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$4 = $3_1;
     if ($9$hi >>> 0 < i64toi32_i32$5 >>> 0 | (($9$hi | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 <= i64toi32_i32$4 >>> 0 | 0) | 0) {
      break label$52
     }
     HEAP32[($587() | 0) >> 2] = 68;
     break label$1;
    }
    i64toi32_i32$0 = $9$hi;
    i64toi32_i32$1 = $6_1;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $3_1 = i64toi32_i32$1;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $9$hi;
    i64toi32_i32$4 = $9_1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$5 = $3_1;
    i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
    $406$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $406$hi;
    i64toi32_i32$0 = i64toi32_i32$4 ^ i64toi32_i32$5 | 0;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
    i64toi32_i32$2 = (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) + i64toi32_i32$4 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
    $3_1 = i64toi32_i32$3;
    $3$hi = i64toi32_i32$2;
    break label$1;
   }
   i64toi32_i32$2 = 0;
   $3_1 = 0;
   $3$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   $663($0_1 | 0, 0 | 0, i64toi32_i32$2 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  i64toi32_i32$2 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$2;
  return i64toi32_i32$0 | 0;
 }
 
 function $955($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $5_1 = 0, $8_1 = 0, $4_1 = 0, $7_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $5_1 = $3_1 ? $3_1 : 334596;
  $3_1 = HEAP32[$5_1 >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if ($1_1) {
       break label$4
      }
      if ($3_1) {
       break label$3
      }
      $6_1 = 0;
      break label$1;
     }
     $6_1 = -2;
     if (!$2_1) {
      break label$1
     }
     $7_1 = $0_1 ? $0_1 : $4_1 + 12 | 0;
     label$5 : {
      label$6 : {
       if (!$3_1) {
        break label$6
       }
       $0_1 = $2_1;
       break label$5;
      }
      label$7 : {
       $3_1 = HEAPU8[$1_1 >> 0] | 0;
       $0_1 = ($3_1 << 24 | 0) >> 24 | 0;
       if (($0_1 | 0) < (0 | 0)) {
        break label$7
       }
       HEAP32[$7_1 >> 2] = $3_1;
       $6_1 = ($0_1 | 0) != (0 | 0);
       break label$1;
      }
      $3_1 = HEAP32[(HEAP32[(($956() | 0) + 176 | 0) >> 2] | 0) >> 2] | 0;
      $0_1 = HEAP8[$1_1 >> 0] | 0;
      label$8 : {
       if ($3_1) {
        break label$8
       }
       HEAP32[$7_1 >> 2] = $0_1 & 57343 | 0;
       $6_1 = 1;
       break label$1;
      }
      $3_1 = ($0_1 & 255 | 0) + -194 | 0;
      if ($3_1 >>> 0 > 50 >>> 0) {
       break label$3
      }
      $3_1 = HEAP32[(($3_1 << 2 | 0) + 4288 | 0) >> 2] | 0;
      $0_1 = $2_1 + -1 | 0;
      if (!$0_1) {
       break label$2
      }
      $1_1 = $1_1 + 1 | 0;
     }
     $8_1 = HEAPU8[$1_1 >> 0] | 0;
     $9_1 = $8_1 >>> 3 | 0;
     if (($9_1 + -16 | 0 | (($3_1 >> 26 | 0) + $9_1 | 0) | 0) >>> 0 > 7 >>> 0) {
      break label$3
     }
     label$9 : while (1) {
      $0_1 = $0_1 + -1 | 0;
      label$10 : {
       $3_1 = ($8_1 & 255 | 0) + -128 | 0 | ($3_1 << 6 | 0) | 0;
       if (($3_1 | 0) < (0 | 0)) {
        break label$10
       }
       HEAP32[$5_1 >> 2] = 0;
       HEAP32[$7_1 >> 2] = $3_1;
       $6_1 = $2_1 - $0_1 | 0;
       break label$1;
      }
      if (!$0_1) {
       break label$2
      }
      $1_1 = $1_1 + 1 | 0;
      $8_1 = HEAPU8[$1_1 >> 0] | 0;
      if (($8_1 & 192 | 0 | 0) == (128 | 0)) {
       continue label$9
      }
      break label$9;
     };
    }
    HEAP32[$5_1 >> 2] = 0;
    HEAP32[($587() | 0) >> 2] = 25;
    $6_1 = -1;
    break label$1;
   }
   HEAP32[$5_1 >> 2] = $3_1;
  }
  global$0 = $4_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $956() {
  return $584() | 0 | 0;
 }
 
 function $957($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return 1 | 0;
  }
  return !(HEAP32[$0_1 >> 2] | 0) | 0;
 }
 
 function $958($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $8_1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, $6_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $14_1 = 0, $3_1 = 0, $7_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $18$hi = 0, $16_1 = 0, $19$hi = 0, $18_1 = 0, $19_1 = 0, $20$hi = 0, $4_1 = 0, $9_1 = 0, $17_1 = 0, $15_1 = 0, $20_1 = 0, i64toi32_i32$6 = 0, $5_1 = 0, $59_1 = 0, $71$hi = 0, $73$hi = 0, $78_1 = 0, $78$hi = 0, $177_1 = 0, $187_1 = 0, $249$hi = 0, $251$hi = 0, $256_1 = 0, $256$hi = 0, $297_1 = 0, $297$hi = 0, $303_1 = 0, $303$hi = 0, $304$hi = 0, $410_1 = 0, $410$hi = 0, $416_1 = 0, $416$hi = 0, $417$hi = 0, $622_1 = 0, $622$hi = 0, $627_1 = 0, $627$hi = 0, $654$hi = 0, $656$hi = 0, $662_1 = 0, $662$hi = 0;
  $3_1 = global$0 - 304 | 0;
  global$0 = $3_1;
  $4_1 = 0;
  $5_1 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$1
   }
   $5_1 = $2179($0_1 | 0) | 0;
  }
  label$2 : {
   $6_1 = HEAPU8[$1_1 >> 0] | 0;
   if (!$6_1) {
    break label$2
   }
   $7_1 = $0_1 + 4 | 0;
   i64toi32_i32$0 = 0;
   $18_1 = 0;
   $18$hi = i64toi32_i32$0;
   $4_1 = 0;
   label$3 : {
    label$4 : {
     label$5 : {
      label$6 : {
       label$7 : while (1) {
        label$8 : {
         label$9 : {
          if (!($665($6_1 & 255 | 0 | 0) | 0)) {
           break label$9
          }
          label$10 : while (1) {
           $6_1 = $1_1;
           $1_1 = $1_1 + 1 | 0;
           if ($665(HEAPU8[($6_1 + 1 | 0) >> 0] | 0 | 0) | 0) {
            continue label$10
           }
           break label$10;
          };
          i64toi32_i32$0 = 0;
          $663($0_1 | 0, 0 | 0, i64toi32_i32$0 | 0);
          label$11 : while (1) {
           label$12 : {
            label$13 : {
             $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
             if ($1_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
              break label$13
             }
             HEAP32[$7_1 >> 2] = $1_1 + 1 | 0;
             $1_1 = HEAPU8[$1_1 >> 0] | 0;
             break label$12;
            }
            $1_1 = $664($0_1 | 0) | 0;
           }
           if ($665($1_1 | 0) | 0) {
            continue label$11
           }
           break label$11;
          };
          label$14 : {
           label$15 : {
            if (HEAP32[($0_1 + 104 | 0) >> 2] | 0) {
             break label$15
            }
            $1_1 = HEAP32[$7_1 >> 2] | 0;
            break label$14;
           }
           $1_1 = (HEAP32[$7_1 >> 2] | 0) + -1 | 0;
           HEAP32[$7_1 >> 2] = $1_1;
          }
          i64toi32_i32$2 = $0_1;
          i64toi32_i32$0 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
          $71$hi = i64toi32_i32$1;
          i64toi32_i32$1 = $18$hi;
          i64toi32_i32$1 = $71$hi;
          i64toi32_i32$2 = i64toi32_i32$0;
          i64toi32_i32$0 = $18$hi;
          i64toi32_i32$3 = $18_1;
          i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
          i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
          if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
           i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
          }
          $73$hi = i64toi32_i32$5;
          i64toi32_i32$2 = $1_1 - (HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
          i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
          $78_1 = i64toi32_i32$2;
          $78$hi = i64toi32_i32$5;
          i64toi32_i32$5 = $73$hi;
          i64toi32_i32$1 = i64toi32_i32$4;
          i64toi32_i32$2 = $78$hi;
          i64toi32_i32$3 = $78_1;
          i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
          i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
          if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
           i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
          }
          $18_1 = i64toi32_i32$0;
          $18$hi = i64toi32_i32$4;
          break label$8;
         }
         label$16 : {
          label$17 : {
           label$18 : {
            label$19 : {
             $6_1 = HEAPU8[$1_1 >> 0] | 0;
             if (($6_1 | 0) != (37 | 0)) {
              break label$19
             }
             $8_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
             if (($8_1 | 0) == (42 | 0)) {
              break label$18
             }
             if (($8_1 | 0) != (37 | 0)) {
              break label$17
             }
            }
            i64toi32_i32$4 = 0;
            $663($0_1 | 0, 0 | 0, i64toi32_i32$4 | 0);
            $6_1 = $1_1 + (($6_1 | 0) == (37 | 0)) | 0;
            label$20 : {
             label$21 : {
              $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
              if ($1_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
               break label$21
              }
              HEAP32[$7_1 >> 2] = $1_1 + 1 | 0;
              $1_1 = HEAPU8[$1_1 >> 0] | 0;
              break label$20;
             }
             $1_1 = $664($0_1 | 0) | 0;
            }
            label$22 : {
             if (($1_1 | 0) == (HEAPU8[$6_1 >> 0] | 0 | 0)) {
              break label$22
             }
             label$23 : {
              if (!(HEAP32[($0_1 + 104 | 0) >> 2] | 0)) {
               break label$23
              }
              HEAP32[$7_1 >> 2] = (HEAP32[$7_1 >> 2] | 0) + -1 | 0;
             }
             $9_1 = 0;
             if (($1_1 | 0) >= (0 | 0)) {
              break label$2
             }
             break label$4;
            }
            i64toi32_i32$4 = $18$hi;
            i64toi32_i32$5 = $18_1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$3 = 1;
            i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
            i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
            if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
             i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
            }
            $18_1 = i64toi32_i32$2;
            $18$hi = i64toi32_i32$0;
            break label$8;
           }
           $6_1 = $1_1 + 2 | 0;
           $10_1 = 0;
           break label$16;
          }
          label$24 : {
           if (!($634($8_1 | 0) | 0)) {
            break label$24
           }
           if ((HEAPU8[($1_1 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
            break label$24
           }
           $6_1 = $1_1 + 3 | 0;
           $10_1 = $959($2_1 | 0, (HEAPU8[($1_1 + 1 | 0) >> 0] | 0) + -48 | 0 | 0) | 0;
           break label$16;
          }
          $6_1 = $1_1 + 1 | 0;
          $10_1 = HEAP32[$2_1 >> 2] | 0;
          $2_1 = $2_1 + 4 | 0;
         }
         $9_1 = 0;
         $1_1 = 0;
         label$25 : {
          if (!($634(HEAPU8[$6_1 >> 0] | 0 | 0) | 0)) {
           break label$25
          }
          label$26 : while (1) {
           $1_1 = (Math_imul($1_1, 10) + (HEAPU8[$6_1 >> 0] | 0) | 0) + -48 | 0;
           $8_1 = HEAPU8[($6_1 + 1 | 0) >> 0] | 0;
           $6_1 = $6_1 + 1 | 0;
           if ($634($8_1 | 0) | 0) {
            continue label$26
           }
           break label$26;
          };
         }
         label$27 : {
          label$28 : {
           $11_1 = HEAPU8[$6_1 >> 0] | 0;
           if (($11_1 | 0) == (109 | 0)) {
            break label$28
           }
           $8_1 = $6_1;
           break label$27;
          }
          $8_1 = $6_1 + 1 | 0;
          $12_1 = 0;
          $9_1 = ($10_1 | 0) != (0 | 0);
          $11_1 = HEAPU8[($6_1 + 1 | 0) >> 0] | 0;
          $13_1 = 0;
         }
         $6_1 = $8_1 + 1 | 0;
         $14_1 = 3;
         label$29 : {
          label$30 : {
           switch (($11_1 & 255 | 0) + -65 | 0 | 0) {
           case 39:
            $177_1 = $8_1 + 2 | 0;
            $8_1 = (HEAPU8[($8_1 + 1 | 0) >> 0] | 0 | 0) == (104 | 0);
            $6_1 = $8_1 ? $177_1 : $6_1;
            $14_1 = $8_1 ? -2 : -1;
            break label$29;
           case 43:
            $187_1 = $8_1 + 2 | 0;
            $8_1 = (HEAPU8[($8_1 + 1 | 0) >> 0] | 0 | 0) == (108 | 0);
            $6_1 = $8_1 ? $187_1 : $6_1;
            $14_1 = $8_1 ? 3 : 1;
            break label$29;
           case 51:
           case 57:
            $14_1 = 1;
            break label$29;
           case 11:
            $14_1 = 2;
            break label$29;
           case 41:
            break label$29;
           case 0:
           case 2:
           case 4:
           case 5:
           case 6:
           case 18:
           case 23:
           case 26:
           case 32:
           case 34:
           case 35:
           case 36:
           case 37:
           case 38:
           case 40:
           case 45:
           case 46:
           case 47:
           case 50:
           case 52:
           case 55:
            break label$30;
           default:
            break label$4;
           };
          }
          $14_1 = 0;
          $6_1 = $8_1;
         }
         $8_1 = HEAPU8[$6_1 >> 0] | 0;
         $11_1 = ($8_1 & 47 | 0 | 0) == (3 | 0);
         $15_1 = $11_1 ? 1 : $14_1;
         label$35 : {
          $16_1 = $11_1 ? $8_1 | 32 | 0 : $8_1;
          if (($16_1 | 0) == (91 | 0)) {
           break label$35
          }
          label$36 : {
           label$37 : {
            if (($16_1 | 0) == (110 | 0)) {
             break label$37
            }
            if (($16_1 | 0) != (99 | 0)) {
             break label$36
            }
            $1_1 = ($1_1 | 0) > (1 | 0) ? $1_1 : 1;
            break label$35;
           }
           i64toi32_i32$0 = $18$hi;
           $960($10_1 | 0, $15_1 | 0, $18_1 | 0, i64toi32_i32$0 | 0);
           break label$8;
          }
          i64toi32_i32$0 = 0;
          $663($0_1 | 0, 0 | 0, i64toi32_i32$0 | 0);
          label$38 : while (1) {
           label$39 : {
            label$40 : {
             $8_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
             if ($8_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
              break label$40
             }
             HEAP32[$7_1 >> 2] = $8_1 + 1 | 0;
             $8_1 = HEAPU8[$8_1 >> 0] | 0;
             break label$39;
            }
            $8_1 = $664($0_1 | 0) | 0;
           }
           if ($665($8_1 | 0) | 0) {
            continue label$38
           }
           break label$38;
          };
          label$41 : {
           label$42 : {
            if (HEAP32[($0_1 + 104 | 0) >> 2] | 0) {
             break label$42
            }
            $8_1 = HEAP32[$7_1 >> 2] | 0;
            break label$41;
           }
           $8_1 = (HEAP32[$7_1 >> 2] | 0) + -1 | 0;
           HEAP32[$7_1 >> 2] = $8_1;
          }
          i64toi32_i32$4 = $0_1;
          i64toi32_i32$0 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
          i64toi32_i32$5 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
          $249$hi = i64toi32_i32$5;
          i64toi32_i32$5 = $18$hi;
          i64toi32_i32$5 = $249$hi;
          i64toi32_i32$4 = i64toi32_i32$0;
          i64toi32_i32$0 = $18$hi;
          i64toi32_i32$3 = $18_1;
          i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
          i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
          if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
           i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
          }
          $251$hi = i64toi32_i32$2;
          i64toi32_i32$4 = $8_1 - (HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
          i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
          $256_1 = i64toi32_i32$4;
          $256$hi = i64toi32_i32$2;
          i64toi32_i32$2 = $251$hi;
          i64toi32_i32$5 = i64toi32_i32$1;
          i64toi32_i32$4 = $256$hi;
          i64toi32_i32$3 = $256_1;
          i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
          i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
          if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
           i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
          }
          $18_1 = i64toi32_i32$0;
          $18$hi = i64toi32_i32$1;
         }
         i64toi32_i32$5 = $1_1;
         i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
         $19_1 = i64toi32_i32$5;
         $19$hi = i64toi32_i32$1;
         $663($0_1 | 0, i64toi32_i32$5 | 0, i64toi32_i32$1 | 0);
         label$43 : {
          label$44 : {
           $14_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
           $8_1 = HEAP32[($0_1 + 104 | 0) >> 2] | 0;
           if ($14_1 >>> 0 >= $8_1 >>> 0) {
            break label$44
           }
           HEAP32[$7_1 >> 2] = $14_1 + 1 | 0;
           break label$43;
          }
          if (($664($0_1 | 0) | 0 | 0) < (0 | 0)) {
           break label$4
          }
          $8_1 = HEAP32[($0_1 + 104 | 0) >> 2] | 0;
         }
         label$45 : {
          if (!$8_1) {
           break label$45
          }
          HEAP32[$7_1 >> 2] = (HEAP32[$7_1 >> 2] | 0) + -1 | 0;
         }
         $8_1 = 16;
         label$46 : {
          label$47 : {
           label$48 : {
            label$49 : {
             label$50 : {
              label$51 : {
               label$52 : {
                switch ($16_1 + -88 | 0 | 0) {
                default:
                 $1_1 = $16_1 + -65 | 0;
                 if ($1_1 >>> 0 > 6 >>> 0) {
                  break label$46
                 }
                 if (!((1 << $1_1 | 0) & 113 | 0)) {
                  break label$46
                 }
                case 9:
                case 13:
                case 14:
                case 15:
                 $669($3_1 | 0, $0_1 | 0, $15_1 | 0, 0 | 0);
                 i64toi32_i32$2 = $0_1;
                 i64toi32_i32$1 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
                 i64toi32_i32$5 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
                 $297_1 = i64toi32_i32$1;
                 $297$hi = i64toi32_i32$5;
                 i64toi32_i32$1 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) - (HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
                 i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
                 $303_1 = i64toi32_i32$1;
                 $303$hi = i64toi32_i32$5;
                 i64toi32_i32$5 = 0;
                 i64toi32_i32$2 = 0;
                 i64toi32_i32$1 = $303$hi;
                 i64toi32_i32$3 = $303_1;
                 i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
                 i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0;
                 i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
                 i64toi32_i32$0 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
                 $304$hi = i64toi32_i32$0;
                 i64toi32_i32$0 = $297$hi;
                 i64toi32_i32$5 = $297_1;
                 i64toi32_i32$2 = $304$hi;
                 i64toi32_i32$3 = i64toi32_i32$4;
                 if ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) | 0) {
                  break label$3
                 }
                 if (!$10_1) {
                  break label$46
                 }
                 i64toi32_i32$3 = $3_1;
                 i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] | 0;
                 i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] | 0;
                 $19_1 = i64toi32_i32$5;
                 $19$hi = i64toi32_i32$0;
                 i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
                 i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
                 $20_1 = i64toi32_i32$0;
                 $20$hi = i64toi32_i32$5;
                 switch ($15_1 | 0) {
                 case 2:
                  break label$48;
                 case 1:
                  break label$49;
                 case 0:
                  break label$50;
                 default:
                  break label$46;
                 };
                case 3:
                case 11:
                case 27:
                 label$58 : {
                  if (($16_1 & 239 | 0 | 0) != (99 | 0)) {
                   break label$58
                  }
                  $2174($3_1 + 32 | 0 | 0, -1 | 0, 257 | 0) | 0;
                  HEAP8[($3_1 + 32 | 0) >> 0] = 0;
                  if (($16_1 | 0) != (115 | 0)) {
                   break label$47
                  }
                  HEAP8[($3_1 + 65 | 0) >> 0] = 0;
                  HEAP8[($3_1 + 46 | 0) >> 0] = 0;
                  $59_1 = 0;
                  HEAP16[($3_1 + 42 | 0) >> 1] = $59_1;
                  HEAP16[($3_1 + 44 | 0) >> 1] = $59_1 >>> 16 | 0;
                  break label$47;
                 }
                 $14_1 = HEAPU8[($6_1 + 1 | 0) >> 0] | 0;
                 $8_1 = ($14_1 | 0) == (94 | 0);
                 $2174($3_1 + 32 | 0 | 0, $8_1 | 0, 257 | 0) | 0;
                 HEAP8[($3_1 + 32 | 0) >> 0] = 0;
                 $11_1 = $8_1 ? $6_1 + 2 | 0 : $6_1 + 1 | 0;
                 label$59 : {
                  label$60 : {
                   label$61 : {
                    label$62 : {
                     $6_1 = HEAPU8[($6_1 + ($8_1 ? 2 : 1) | 0) >> 0] | 0;
                     if (($6_1 | 0) == (45 | 0)) {
                      break label$62
                     }
                     if (($6_1 | 0) == (93 | 0)) {
                      break label$61
                     }
                     $14_1 = ($14_1 | 0) != (94 | 0);
                     $6_1 = $11_1;
                     break label$59;
                    }
                    $14_1 = ($14_1 | 0) != (94 | 0);
                    HEAP8[($3_1 + 78 | 0) >> 0] = $14_1;
                    break label$60;
                   }
                   $14_1 = ($14_1 | 0) != (94 | 0);
                   HEAP8[($3_1 + 126 | 0) >> 0] = $14_1;
                  }
                  $6_1 = $11_1 + 1 | 0;
                 }
                 label$63 : while (1) {
                  label$64 : {
                   label$65 : {
                    $8_1 = HEAPU8[$6_1 >> 0] | 0;
                    if (($8_1 | 0) == (45 | 0)) {
                     break label$65
                    }
                    if (!$8_1) {
                     break label$4
                    }
                    if (($8_1 | 0) != (93 | 0)) {
                     break label$64
                    }
                    break label$47;
                   }
                   $8_1 = 45;
                   $17_1 = HEAPU8[($6_1 + 1 | 0) >> 0] | 0;
                   if (!$17_1) {
                    break label$64
                   }
                   if (($17_1 | 0) == (93 | 0)) {
                    break label$64
                   }
                   $11_1 = $6_1 + 1 | 0;
                   label$66 : {
                    label$67 : {
                     $6_1 = HEAPU8[($6_1 + -1 | 0) >> 0] | 0;
                     if ($6_1 >>> 0 < $17_1 >>> 0) {
                      break label$67
                     }
                     $8_1 = $17_1;
                     break label$66;
                    }
                    label$68 : while (1) {
                     $6_1 = $6_1 + 1 | 0;
                     HEAP8[(($3_1 + 32 | 0) + $6_1 | 0) >> 0] = $14_1;
                     $8_1 = HEAPU8[$11_1 >> 0] | 0;
                     if ($6_1 >>> 0 < $8_1 >>> 0) {
                      continue label$68
                     }
                     break label$68;
                    };
                   }
                   $6_1 = $11_1;
                  }
                  HEAP8[(($8_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] = $14_1;
                  $6_1 = $6_1 + 1 | 0;
                  continue label$63;
                 };
                case 23:
                 $8_1 = 8;
                 break label$51;
                case 12:
                case 29:
                 $8_1 = 10;
                 break label$51;
                case 1:
                case 2:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 10:
                case 16:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 25:
                case 26:
                case 28:
                case 30:
                case 31:
                 break label$46;
                case 0:
                case 24:
                case 32:
                 break label$51;
                case 17:
                 break label$52;
                };
               }
               $8_1 = 0;
              }
              i64toi32_i32$5 = -1;
              i64toi32_i32$5 = $954($0_1 | 0, $8_1 | 0, 0 | 0, -1 | 0, i64toi32_i32$5 | 0) | 0;
              i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
              $19_1 = i64toi32_i32$5;
              $19$hi = i64toi32_i32$0;
              i64toi32_i32$3 = $0_1;
              i64toi32_i32$0 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
              i64toi32_i32$5 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
              $410_1 = i64toi32_i32$0;
              $410$hi = i64toi32_i32$5;
              i64toi32_i32$0 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) - (HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
              i64toi32_i32$5 = i64toi32_i32$0 >> 31 | 0;
              $416_1 = i64toi32_i32$0;
              $416$hi = i64toi32_i32$5;
              i64toi32_i32$5 = 0;
              i64toi32_i32$3 = 0;
              i64toi32_i32$0 = $416$hi;
              i64toi32_i32$2 = $416_1;
              i64toi32_i32$1 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
              i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0;
              i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
              i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
              $417$hi = i64toi32_i32$4;
              i64toi32_i32$4 = $410$hi;
              i64toi32_i32$5 = $410_1;
              i64toi32_i32$3 = $417$hi;
              i64toi32_i32$2 = i64toi32_i32$1;
              if ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) | 0) {
               break label$3
              }
              label$69 : {
               if (!$10_1) {
                break label$69
               }
               if (($16_1 | 0) != (112 | 0)) {
                break label$69
               }
               i64toi32_i32$5 = $19$hi;
               HEAP32[$10_1 >> 2] = $19_1;
               break label$46;
              }
              i64toi32_i32$5 = $19$hi;
              $960($10_1 | 0, $15_1 | 0, $19_1 | 0, i64toi32_i32$5 | 0);
              break label$46;
             }
             i64toi32_i32$5 = $20$hi;
             i64toi32_i32$5 = $19$hi;
             i64toi32_i32$5 = $20$hi;
             i64toi32_i32$4 = $19$hi;
             HEAPF32[$10_1 >> 2] = Math_fround($691($20_1 | 0, i64toi32_i32$5 | 0, $19_1 | 0, i64toi32_i32$4 | 0));
             break label$46;
            }
            i64toi32_i32$4 = $20$hi;
            i64toi32_i32$4 = $19$hi;
            i64toi32_i32$4 = $20$hi;
            i64toi32_i32$5 = $19$hi;
            HEAPF64[$10_1 >> 3] = +$698($20_1 | 0, i64toi32_i32$4 | 0, $19_1 | 0, i64toi32_i32$5 | 0);
            break label$46;
           }
           i64toi32_i32$5 = $20$hi;
           i64toi32_i32$4 = $10_1;
           HEAP32[i64toi32_i32$4 >> 2] = $20_1;
           HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$5;
           i64toi32_i32$5 = $19$hi;
           HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = $19_1;
           HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$5;
           break label$46;
          }
          $11_1 = ($16_1 | 0) == (99 | 0);
          $14_1 = $11_1 ? $1_1 + 1 | 0 : 31;
          label$70 : {
           label$71 : {
            $16_1 = ($15_1 | 0) != (1 | 0);
            if ($16_1) {
             break label$71
            }
            $8_1 = $10_1;
            label$72 : {
             if (!$9_1) {
              break label$72
             }
             $8_1 = $2160($14_1 << 2 | 0 | 0) | 0;
             if (!$8_1) {
              break label$5
             }
            }
            i64toi32_i32$4 = $3_1;
            i64toi32_i32$5 = 0;
            HEAP32[(i64toi32_i32$4 + 296 | 0) >> 2] = 0;
            HEAP32[(i64toi32_i32$4 + 300 | 0) >> 2] = i64toi32_i32$5;
            $1_1 = 0;
            $17_1 = ($9_1 | 0) != (0 | 0);
            label$73 : while (1) {
             $13_1 = $8_1;
             label$74 : {
              label$75 : while (1) {
               label$76 : {
                label$77 : {
                 $8_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                 if ($8_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
                  break label$77
                 }
                 HEAP32[$7_1 >> 2] = $8_1 + 1 | 0;
                 $8_1 = HEAPU8[$8_1 >> 0] | 0;
                 break label$76;
                }
                $8_1 = $664($0_1 | 0) | 0;
               }
               if (!(HEAPU8[(($8_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] | 0)) {
                break label$74
               }
               HEAP8[($3_1 + 27 | 0) >> 0] = $8_1;
               $8_1 = $955($3_1 + 28 | 0 | 0, $3_1 + 27 | 0 | 0, 1 | 0, $3_1 + 296 | 0 | 0) | 0;
               if (($8_1 | 0) == (-2 | 0)) {
                continue label$75
               }
               if (($8_1 | 0) == (-1 | 0)) {
                break label$6
               }
               label$78 : {
                if (!$13_1) {
                 break label$78
                }
                HEAP32[($13_1 + ($1_1 << 2 | 0) | 0) >> 2] = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
                $1_1 = $1_1 + 1 | 0;
               }
               if (($1_1 | 0) != ($14_1 | 0) | ($17_1 ^ 1 | 0) | 0) {
                continue label$75
               }
               break label$75;
              };
              $14_1 = $14_1 << 1 | 0 | 1 | 0;
              $8_1 = $2162($13_1 | 0, $14_1 << 2 | 0 | 0) | 0;
              if ($8_1) {
               continue label$73
              }
              break label$6;
             }
             break label$73;
            };
            if (!($957($3_1 + 296 | 0 | 0) | 0)) {
             break label$6
            }
            $12_1 = 0;
            break label$70;
           }
           label$79 : {
            if (!$9_1) {
             break label$79
            }
            $1_1 = 0;
            $8_1 = $2160($14_1 | 0) | 0;
            if (!$8_1) {
             break label$5
            }
            label$80 : while (1) {
             $12_1 = $8_1;
             label$81 : while (1) {
              label$82 : {
               label$83 : {
                $8_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                if ($8_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
                 break label$83
                }
                HEAP32[$7_1 >> 2] = $8_1 + 1 | 0;
                $8_1 = HEAPU8[$8_1 >> 0] | 0;
                break label$82;
               }
               $8_1 = $664($0_1 | 0) | 0;
              }
              label$84 : {
               if (HEAPU8[(($8_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] | 0) {
                break label$84
               }
               $13_1 = 0;
               break label$70;
              }
              HEAP8[($12_1 + $1_1 | 0) >> 0] = $8_1;
              $1_1 = $1_1 + 1 | 0;
              if (($1_1 | 0) != ($14_1 | 0)) {
               continue label$81
              }
              break label$81;
             };
             $13_1 = 0;
             $14_1 = $14_1 << 1 | 0 | 1 | 0;
             $8_1 = $2162($12_1 | 0, $14_1 | 0) | 0;
             if (!$8_1) {
              break label$4
             }
             continue label$80;
            };
           }
           $1_1 = 0;
           label$85 : {
            if (!$10_1) {
             break label$85
            }
            label$86 : while (1) {
             label$87 : {
              label$88 : {
               $8_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
               if ($8_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
                break label$88
               }
               HEAP32[$7_1 >> 2] = $8_1 + 1 | 0;
               $8_1 = HEAPU8[$8_1 >> 0] | 0;
               break label$87;
              }
              $8_1 = $664($0_1 | 0) | 0;
             }
             label$89 : {
              if (HEAPU8[(($8_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] | 0) {
               break label$89
              }
              $13_1 = 0;
              $12_1 = $10_1;
              break label$70;
             }
             HEAP8[($10_1 + $1_1 | 0) >> 0] = $8_1;
             $1_1 = $1_1 + 1 | 0;
             continue label$86;
            };
           }
           label$90 : while (1) {
            label$91 : {
             label$92 : {
              $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
              if ($1_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
               break label$92
              }
              HEAP32[$7_1 >> 2] = $1_1 + 1 | 0;
              $1_1 = HEAPU8[$1_1 >> 0] | 0;
              break label$91;
             }
             $1_1 = $664($0_1 | 0) | 0;
            }
            if (HEAPU8[(($1_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] | 0) {
             continue label$90
            }
            break label$90;
           };
           $12_1 = 0;
           $13_1 = 0;
           $1_1 = 0;
          }
          label$93 : {
           label$94 : {
            if (HEAP32[($0_1 + 104 | 0) >> 2] | 0) {
             break label$94
            }
            $8_1 = HEAP32[$7_1 >> 2] | 0;
            break label$93;
           }
           $8_1 = (HEAP32[$7_1 >> 2] | 0) + -1 | 0;
           HEAP32[$7_1 >> 2] = $8_1;
          }
          i64toi32_i32$2 = $0_1;
          i64toi32_i32$5 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
          i64toi32_i32$4 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
          $622_1 = i64toi32_i32$5;
          $622$hi = i64toi32_i32$4;
          i64toi32_i32$5 = $8_1 - (HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
          i64toi32_i32$4 = i64toi32_i32$5 >> 31 | 0;
          $627_1 = i64toi32_i32$5;
          $627$hi = i64toi32_i32$4;
          i64toi32_i32$4 = $622$hi;
          i64toi32_i32$2 = $622_1;
          i64toi32_i32$5 = $627$hi;
          i64toi32_i32$3 = $627_1;
          i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
          i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
          if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
           i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
          }
          $20_1 = i64toi32_i32$0;
          $20$hi = i64toi32_i32$1;
          if (!(i64toi32_i32$0 | i64toi32_i32$1 | 0)) {
           break label$3
          }
          label$95 : {
           i64toi32_i32$1 = $20$hi;
           i64toi32_i32$1 = $19$hi;
           i64toi32_i32$1 = $20$hi;
           i64toi32_i32$4 = $20_1;
           i64toi32_i32$2 = $19$hi;
           i64toi32_i32$3 = $19_1;
           if ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) | 0) {
            break label$95
           }
           if ($11_1) {
            break label$3
           }
          }
          label$96 : {
           if (!$9_1) {
            break label$96
           }
           label$97 : {
            if ($16_1) {
             break label$97
            }
            HEAP32[$10_1 >> 2] = $13_1;
            break label$96;
           }
           HEAP32[$10_1 >> 2] = $12_1;
          }
          if ($11_1) {
           break label$46
          }
          label$98 : {
           if (!$13_1) {
            break label$98
           }
           HEAP32[($13_1 + ($1_1 << 2 | 0) | 0) >> 2] = 0;
          }
          label$99 : {
           if ($12_1) {
            break label$99
           }
           $12_1 = 0;
           break label$46;
          }
          HEAP8[($12_1 + $1_1 | 0) >> 0] = 0;
         }
         i64toi32_i32$3 = $0_1;
         i64toi32_i32$4 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
         i64toi32_i32$1 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
         $654$hi = i64toi32_i32$1;
         i64toi32_i32$1 = $18$hi;
         i64toi32_i32$1 = $654$hi;
         i64toi32_i32$3 = i64toi32_i32$4;
         i64toi32_i32$4 = $18$hi;
         i64toi32_i32$2 = $18_1;
         i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
         i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
         if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
          i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
         }
         $656$hi = i64toi32_i32$0;
         i64toi32_i32$3 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) - (HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
         i64toi32_i32$0 = i64toi32_i32$3 >> 31 | 0;
         $662_1 = i64toi32_i32$3;
         $662$hi = i64toi32_i32$0;
         i64toi32_i32$0 = $656$hi;
         i64toi32_i32$1 = i64toi32_i32$5;
         i64toi32_i32$3 = $662$hi;
         i64toi32_i32$2 = $662_1;
         i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
         i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
         if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
          i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
         }
         $18_1 = i64toi32_i32$4;
         $18$hi = i64toi32_i32$5;
         $4_1 = $4_1 + (($10_1 | 0) != (0 | 0)) | 0;
        }
        $1_1 = $6_1 + 1 | 0;
        $6_1 = HEAPU8[($6_1 + 1 | 0) >> 0] | 0;
        if ($6_1) {
         continue label$7
        }
        break label$2;
       };
      }
      $12_1 = 0;
      break label$4;
     }
     $12_1 = 0;
     $13_1 = 0;
    }
    $4_1 = $4_1 ? $4_1 : -1;
   }
   if (!$9_1) {
    break label$2
   }
   $2161($12_1 | 0);
   $2161($13_1 | 0);
  }
  label$100 : {
   if (!$5_1) {
    break label$100
   }
   $2180($0_1 | 0);
  }
  global$0 = $3_1 + 304 | 0;
  return $4_1 | 0;
 }
 
 function $959($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  HEAP32[($2_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($2_1 + 8 | 0) >> 2] = $0_1;
  label$1 : {
   if ($1_1 >>> 0 < 2 >>> 0) {
    break label$1
   }
   $0_1 = (($1_1 << 2 | 0) + $0_1 | 0) + -4 | 0;
   HEAP32[($2_1 + 8 | 0) >> 2] = $0_1;
  }
  HEAP32[($2_1 + 8 | 0) >> 2] = $0_1 + 4 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $960($0_1, $1_1, $2_1, $2$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  var i64toi32_i32$0 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    switch ($1_1 + 2 | 0 | 0) {
    case 0:
     i64toi32_i32$0 = $2$hi;
     HEAP8[$0_1 >> 0] = $2_1;
     return;
    case 1:
     i64toi32_i32$0 = $2$hi;
     HEAP16[$0_1 >> 1] = $2_1;
     return;
    case 2:
    case 3:
     i64toi32_i32$0 = $2$hi;
     HEAP32[$0_1 >> 2] = $2_1;
     return;
    case 5:
     break label$2;
    default:
     break label$1;
    };
   }
   i64toi32_i32$0 = $2$hi;
   HEAP32[$0_1 >> 2] = $2_1;
   HEAP32[($0_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  }
 }
 
 function $961($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  $3_1 = HEAP32[($0_1 + 84 | 0) >> 2] | 0;
  $4_1 = $2_1 + 256 | 0;
  $5_1 = $636($3_1 | 0, 0 | 0, $4_1 | 0) | 0;
  $4_1 = $5_1 ? $5_1 - $3_1 | 0 : $4_1;
  $2_1 = $4_1 >>> 0 < $2_1 >>> 0 ? $4_1 : $2_1;
  $2173($1_1 | 0, $3_1 | 0, $2_1 | 0) | 0;
  $4_1 = $3_1 + $4_1 | 0;
  HEAP32[($0_1 + 84 | 0) >> 2] = $4_1;
  HEAP32[($0_1 + 8 | 0) >> 2] = $4_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 + $2_1 | 0;
  return $2_1 | 0;
 }
 
 function $962($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 144 | 0;
  global$0 = $3_1;
  $3_1 = $2174($3_1 | 0, 0 | 0, 144 | 0) | 0;
  HEAP32[($3_1 + 76 | 0) >> 2] = -1;
  HEAP32[($3_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 32 | 0) >> 2] = 273;
  HEAP32[($3_1 + 84 | 0) >> 2] = $0_1;
  $0_1 = $958($3_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  global$0 = $3_1 + 144 | 0;
  return $0_1 | 0;
 }
 
 function $963($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $961($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $964($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  $2_1 = HEAPU8[$1_1 >> 0] | 0;
  label$1 : {
   $3_1 = HEAPU8[$0_1 >> 0] | 0;
   if (!$3_1) {
    break label$1
   }
   if (($3_1 | 0) != ($2_1 & 255 | 0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $2_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    $3_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
    if (!$3_1) {
     break label$1
    }
    $1_1 = $1_1 + 1 | 0;
    $0_1 = $0_1 + 1 | 0;
    if (($3_1 | 0) == ($2_1 & 255 | 0 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  return $3_1 - ($2_1 & 255 | 0) | 0 | 0;
 }
 
 function $965() {
  var $0_1 = 0, $1_1 = 0, $2_1 = 0;
  $0_1 = global$0 - 16 | 0;
  global$0 = $0_1;
  label$1 : {
   if (fimport$94($0_1 + 12 | 0 | 0, $0_1 + 8 | 0 | 0) | 0) {
    break label$1
   }
   $1_1 = $2160(((HEAP32[($0_1 + 12 | 0) >> 2] | 0) << 2 | 0) + 4 | 0 | 0) | 0;
   HEAP32[(0 + 334600 | 0) >> 2] = $1_1;
   if (!$1_1) {
    break label$1
   }
   label$2 : {
    label$3 : {
     $1_1 = $2160(HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
     if (!$1_1) {
      break label$3
     }
     $2_1 = HEAP32[(0 + 334600 | 0) >> 2] | 0;
     if ($2_1) {
      break label$2
     }
    }
    HEAP32[(0 + 334600 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($2_1 + ((HEAP32[($0_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = 0;
   if (!(fimport$95(HEAP32[(0 + 334600 | 0) >> 2] | 0 | 0, $1_1 | 0) | 0)) {
    break label$1
   }
   HEAP32[(0 + 334600 | 0) >> 2] = 0;
  }
  global$0 = $0_1 + 16 | 0;
 }
 
 function $966($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  label$1 : {
   if ($2_1) {
    break label$1
   }
   return 0 | 0;
  }
  $3_1 = 0;
  label$2 : {
   $4_1 = HEAPU8[$0_1 >> 0] | 0;
   if (!$4_1) {
    break label$2
   }
   label$3 : {
    label$4 : while (1) {
     $5_1 = HEAPU8[$1_1 >> 0] | 0;
     if (($4_1 & 255 | 0 | 0) != ($5_1 | 0)) {
      break label$3
     }
     $2_1 = $2_1 + -1 | 0;
     if (!$2_1) {
      break label$3
     }
     if (!$5_1) {
      break label$3
     }
     $1_1 = $1_1 + 1 | 0;
     $4_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
     $0_1 = $0_1 + 1 | 0;
     if ($4_1) {
      continue label$4
     }
     break label$2;
    };
   }
   $3_1 = $4_1;
  }
  return ($3_1 & 255 | 0) - (HEAPU8[$1_1 >> 0] | 0) | 0 | 0;
 }
 
 function $967($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $4_1 = 0, $2_1 = 0;
  $1_1 = 0;
  $2_1 = $2181($0_1 | 0) | 0;
  label$1 : {
   if (!(HEAP32[(0 + 334600 | 0) >> 2] | 0)) {
    break label$1
   }
   if (!(HEAPU8[$0_1 >> 0] | 0)) {
    break label$1
   }
   if ($621($0_1 | 0, 61 | 0) | 0) {
    break label$1
   }
   $1_1 = 0;
   $3_1 = HEAP32[(HEAP32[(0 + 334600 | 0) >> 2] | 0) >> 2] | 0;
   if (!$3_1) {
    break label$1
   }
   label$2 : {
    label$3 : while (1) {
     $4_1 = $966($0_1 | 0, $3_1 | 0, $2_1 | 0) | 0;
     $3_1 = HEAP32[(0 + 334600 | 0) >> 2] | 0;
     label$4 : {
      if ($4_1) {
       break label$4
      }
      $4_1 = (HEAP32[($3_1 + ($1_1 << 2 | 0) | 0) >> 2] | 0) + $2_1 | 0;
      if ((HEAPU8[$4_1 >> 0] | 0 | 0) == (61 | 0)) {
       break label$2
      }
     }
     $1_1 = $1_1 + 1 | 0;
     $3_1 = HEAP32[($3_1 + ($1_1 << 2 | 0) | 0) >> 2] | 0;
     if ($3_1) {
      continue label$3
     }
     break label$3;
    };
    return 0 | 0;
   }
   $1_1 = $4_1 + 1 | 0;
  }
  return $1_1 | 0;
 }
 
 function $968() {
  
 }
 
 function $969($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $968();
  return $622(fimport$97($0_1 | 0, $1_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $970($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $2_1 = 0, $6_1 = 0, $10_1 = 0, $9_1 = 0, i64toi32_i32$2 = 0, $7_1 = 0, $8_1 = 0, i64toi32_i32$1 = 0;
  $2_1 = global$0 - 272 | 0;
  global$0 = $2_1;
  label$1 : {
   if (HEAPU8[$1_1 >> 0] | 0) {
    break label$1
   }
   label$2 : {
    $1_1 = $967(10416 | 0) | 0;
    if (!$1_1) {
     break label$2
    }
    if (HEAPU8[$1_1 >> 0] | 0) {
     break label$1
    }
   }
   label$3 : {
    $1_1 = $967(Math_imul($0_1, 12) + 10432 | 0 | 0) | 0;
    if (!$1_1) {
     break label$3
    }
    if (HEAPU8[$1_1 >> 0] | 0) {
     break label$1
    }
   }
   label$4 : {
    $1_1 = $967(10504 | 0) | 0;
    if (!$1_1) {
     break label$4
    }
    if (HEAPU8[$1_1 >> 0] | 0) {
     break label$1
    }
   }
   $1_1 = 10509;
  }
  $3_1 = 0;
  label$5 : {
   label$6 : {
    label$7 : while (1) {
     $4_1 = HEAPU8[($1_1 + $3_1 | 0) >> 0] | 0;
     if (!$4_1) {
      break label$6
     }
     if (($4_1 | 0) == (47 | 0)) {
      break label$6
     }
     $4_1 = 15;
     $3_1 = $3_1 + 1 | 0;
     if (($3_1 | 0) != (15 | 0)) {
      continue label$7
     }
     break label$5;
    };
   }
   $4_1 = $3_1;
  }
  $5_1 = 10509;
  label$8 : {
   label$9 : {
    label$10 : {
     label$11 : {
      label$12 : {
       $3_1 = HEAPU8[$1_1 >> 0] | 0;
       if (($3_1 | 0) == (46 | 0)) {
        break label$12
       }
       if (HEAPU8[($1_1 + $4_1 | 0) >> 0] | 0) {
        break label$12
       }
       $5_1 = $1_1;
       if (($3_1 | 0) != (67 | 0)) {
        break label$11
       }
      }
      if (!(HEAPU8[($5_1 + 1 | 0) >> 0] | 0)) {
       break label$10
      }
     }
     if (!($964($5_1 | 0, 10509 | 0) | 0)) {
      break label$10
     }
     if ($964($5_1 | 0, 10517 | 0) | 0) {
      break label$9
     }
    }
    label$13 : {
     if ($0_1) {
      break label$13
     }
     $3_1 = 10340;
     if ((HEAPU8[($5_1 + 1 | 0) >> 0] | 0 | 0) == (46 | 0)) {
      break label$8
     }
    }
    $3_1 = 0;
    break label$8;
   }
   label$14 : {
    $3_1 = HEAP32[(0 + 334612 | 0) >> 2] | 0;
    if (!$3_1) {
     break label$14
    }
    label$15 : while (1) {
     if (!($964($5_1 | 0, $3_1 + 8 | 0 | 0) | 0)) {
      break label$8
     }
     $3_1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
     if ($3_1) {
      continue label$15
     }
     break label$15;
    };
   }
   $680(334604 | 0);
   label$16 : {
    $3_1 = HEAP32[(0 + 334612 | 0) >> 2] | 0;
    if (!$3_1) {
     break label$16
    }
    label$17 : while (1) {
     label$18 : {
      if ($964($5_1 | 0, $3_1 + 8 | 0 | 0) | 0) {
       break label$18
      }
      $681(334604 | 0);
      break label$8;
     }
     $3_1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
     if ($3_1) {
      continue label$17
     }
     break label$17;
    };
   }
   $6_1 = 0;
   label$19 : {
    label$20 : {
     label$21 : {
      if (HEAP32[(0 + 331400 | 0) >> 2] | 0) {
       break label$21
      }
      $3_1 = $967(10523 | 0) | 0;
      if (!$3_1) {
       break label$21
      }
      if (!(HEAPU8[$3_1 >> 0] | 0)) {
       break label$21
      }
      $7_1 = $4_1 + 1 | 0;
      $8_1 = 254 - $4_1 | 0;
      label$22 : while (1) {
       label$23 : {
        $1_1 = $620($3_1 | 0, 58 | 0) | 0;
        $9_1 = HEAPU8[$1_1 >> 0] | 0;
        $10_1 = ($1_1 - $3_1 | 0) - (($9_1 | 0) != (0 | 0)) | 0;
        if ($10_1 >>> 0 >= $8_1 >>> 0) {
         break label$23
        }
        $2173($2_1 + 16 | 0 | 0, $3_1 | 0, $10_1 | 0) | 0;
        $3_1 = ($2_1 + 16 | 0) + $10_1 | 0;
        HEAP8[$3_1 >> 0] = 47;
        $2173($3_1 + 1 | 0 | 0, $5_1 | 0, $4_1 | 0) | 0;
        HEAP8[(($2_1 + 16 | 0) + ($7_1 + $10_1 | 0) | 0) >> 0] = 0;
        label$24 : {
         $3_1 = fimport$96($2_1 + 16 | 0 | 0, $2_1 + 12 | 0 | 0) | 0;
         if (!$3_1) {
          break label$24
         }
         $1_1 = $2160(28 | 0) | 0;
         if ($1_1) {
          break label$20
         }
         $969($3_1 | 0, HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0) | 0;
         break label$21;
        }
        $9_1 = HEAPU8[$1_1 >> 0] | 0;
       }
       $3_1 = $1_1 + (($9_1 & 255 | 0 | 0) != (0 | 0)) | 0;
       if (HEAPU8[$3_1 >> 0] | 0) {
        continue label$22
       }
       break label$22;
      };
     }
     $3_1 = $2160(28 | 0) | 0;
     if (!$3_1) {
      break label$19
     }
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 10344 | 0) >> 2] | 0;
     HEAP32[$3_1 >> 2] = HEAP32[(i64toi32_i32$2 + 10340 | 0) >> 2] | 0;
     HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$1;
     $1_1 = $3_1 + 8 | 0;
     $2173($1_1 | 0, $5_1 | 0, $4_1 | 0) | 0;
     HEAP8[($1_1 + $4_1 | 0) >> 0] = 0;
     HEAP32[($3_1 + 24 | 0) >> 2] = HEAP32[(0 + 334612 | 0) >> 2] | 0;
     HEAP32[(0 + 334612 | 0) >> 2] = $3_1;
     $6_1 = $3_1;
     break label$19;
    }
    HEAP32[$1_1 >> 2] = $3_1;
    HEAP32[($1_1 + 4 | 0) >> 2] = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
    $3_1 = $1_1 + 8 | 0;
    $2173($3_1 | 0, $5_1 | 0, $4_1 | 0) | 0;
    HEAP8[($3_1 + $4_1 | 0) >> 0] = 0;
    HEAP32[($1_1 + 24 | 0) >> 2] = HEAP32[(0 + 334612 | 0) >> 2] | 0;
    HEAP32[(0 + 334612 | 0) >> 2] = $1_1;
    $6_1 = $1_1;
   }
   $681(334604 | 0);
   $3_1 = $0_1 | $6_1 | 0 ? $6_1 : 10340;
  }
  global$0 = $2_1 + 272 | 0;
  return $3_1 | 0;
 }
 
 function $971($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 | 0) != (10392 | 0) & (($0_1 | 0) != (0 | 0) & ($0_1 | 0) != (10368 | 0) | 0) | 0 | 0;
 }
 
 function $972($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $6_1 = 0, $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!($971($2_1 | 0) | 0)) {
      break label$3
     }
     $4_1 = 0;
     label$4 : while (1) {
      label$5 : {
       if (!(($0_1 >>> $4_1 | 0) & 1 | 0)) {
        break label$5
       }
       HEAP32[($2_1 + ($4_1 << 2 | 0) | 0) >> 2] = $970($4_1 | 0, $1_1 | 0) | 0;
      }
      $4_1 = $4_1 + 1 | 0;
      if (($4_1 | 0) != (6 | 0)) {
       continue label$4
      }
      break label$2;
     };
    }
    $5_1 = 0;
    $4_1 = 0;
    label$6 : while (1) {
     $6_1 = (1 << $4_1 | 0) & $0_1 | 0;
     label$7 : {
      label$8 : {
       if (!$2_1) {
        break label$8
       }
       if ($6_1) {
        break label$8
       }
       $6_1 = HEAP32[($2_1 + ($4_1 << 2 | 0) | 0) >> 2] | 0;
       break label$7;
      }
      $6_1 = $970($4_1 | 0, ($6_1 ? $1_1 : 10536) | 0) | 0;
     }
     HEAP32[(($3_1 + 8 | 0) + ($4_1 << 2 | 0) | 0) >> 2] = $6_1;
     $5_1 = $5_1 + (($6_1 | 0) != (0 | 0)) | 0;
     $4_1 = $4_1 + 1 | 0;
     if (($4_1 | 0) != (6 | 0)) {
      continue label$6
     }
     break label$6;
    };
    $4_1 = 10368;
    label$9 : {
     switch ($5_1 | 0) {
     case 0:
      break label$1;
     case 1:
      break label$9;
     default:
      break label$2;
     };
    }
    if ((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) != (10340 | 0)) {
     break label$2
    }
    $4_1 = 10392;
    break label$1;
   }
   $4_1 = $2_1;
  }
  global$0 = $3_1 + 32 | 0;
  return $4_1 | 0;
 }
 
 function $973($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $2_1;
  $4_1 = -1;
  label$1 : {
   $2_1 = $627(0 | 0, 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
   if (($2_1 | 0) < (0 | 0)) {
    break label$1
   }
   $5_1 = $2_1 + 1 | 0;
   $2_1 = $2160($5_1 | 0) | 0;
   HEAP32[$0_1 >> 2] = $2_1;
   if (!$2_1) {
    break label$1
   }
   $4_1 = $627($2_1 | 0, $5_1 | 0, $1_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  }
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $974($0_1) {
  $0_1 = $0_1 | 0;
  return (($0_1 | 32 | 0) + -97 | 0) >>> 0 < 6 >>> 0 | ($634($0_1 | 0) | 0 | 0) != (0 | 0) | 0 | 0;
 }
 
 function $975($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $974($0_1 | 0) | 0 | 0;
 }
 
 function $976($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
  $2_1 = $962($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $977($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
  $3_1 = $627($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $978($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return -1 | 0;
 }
 
 function $979($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  return $3_1 | 0;
 }
 
 function $980($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $981($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!($971($0_1 | 0) | 0)) {
    break label$1
   }
   $2161($0_1 | 0);
  }
 }
 
 function $982($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0;
  $1_1 = $0_1;
  label$1 : while (1) {
   $2_1 = $1_1;
   $1_1 = $2_1 + 4 | 0;
   if (HEAP32[$2_1 >> 2] | 0) {
    continue label$1
   }
   break label$1;
  };
  return ($2_1 - $0_1 | 0) >> 2 | 0 | 0;
 }
 
 function $983() {
  return 10540 | 0;
 }
 
 function $984() {
  return 11312 | 0;
 }
 
 function $985() {
  return 12864 | 0;
 }
 
 function $986($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $5_1 = 0, $8_1 = 0, $7_1 = 0, $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       if (!$0_1) {
        break label$5
       }
       if ($2_1 >>> 0 >= 4 >>> 0) {
        break label$4
       }
       $5_1 = $2_1;
       break label$3;
      }
      $6_1 = 0;
      label$6 : {
       $0_1 = HEAP32[$1_1 >> 2] | 0;
       $5_1 = HEAP32[$0_1 >> 2] | 0;
       if ($5_1) {
        break label$6
       }
       $7_1 = 0;
       break label$1;
      }
      label$7 : while (1) {
       $8_1 = 1;
       label$8 : {
        if ($5_1 >>> 0 < 128 >>> 0) {
         break label$8
        }
        $7_1 = -1;
        $8_1 = $637($4_1 + 12 | 0 | 0, $5_1 | 0, 0 | 0) | 0;
        if (($8_1 | 0) == (-1 | 0)) {
         break label$1
        }
       }
       $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
       $0_1 = $0_1 + 4 | 0;
       $6_1 = $8_1 + $6_1 | 0;
       $7_1 = $6_1;
       if ($5_1) {
        continue label$7
       }
       break label$1;
      };
     }
     $8_1 = HEAP32[$1_1 >> 2] | 0;
     $5_1 = $2_1;
     label$9 : while (1) {
      label$10 : {
       label$11 : {
        $6_1 = HEAP32[$8_1 >> 2] | 0;
        if (($6_1 + -1 | 0) >>> 0 < 127 >>> 0) {
         break label$11
        }
        label$12 : {
         if ($6_1) {
          break label$12
         }
         HEAP8[$0_1 >> 0] = 0;
         HEAP32[$1_1 >> 2] = 0;
         break label$2;
        }
        $7_1 = -1;
        $6_1 = $637($0_1 | 0, $6_1 | 0, 0 | 0) | 0;
        if (($6_1 | 0) == (-1 | 0)) {
         break label$1
        }
        $5_1 = $5_1 - $6_1 | 0;
        $0_1 = $0_1 + $6_1 | 0;
        break label$10;
       }
       HEAP8[$0_1 >> 0] = $6_1;
       $5_1 = $5_1 + -1 | 0;
       $0_1 = $0_1 + 1 | 0;
       $8_1 = HEAP32[$1_1 >> 2] | 0;
      }
      $8_1 = $8_1 + 4 | 0;
      HEAP32[$1_1 >> 2] = $8_1;
      if ($5_1 >>> 0 > 3 >>> 0) {
       continue label$9
      }
      break label$9;
     };
    }
    label$13 : {
     if (!$5_1) {
      break label$13
     }
     $8_1 = HEAP32[$1_1 >> 2] | 0;
     label$14 : while (1) {
      label$15 : {
       label$16 : {
        $6_1 = HEAP32[$8_1 >> 2] | 0;
        if (($6_1 + -1 | 0) >>> 0 < 127 >>> 0) {
         break label$16
        }
        label$17 : {
         if ($6_1) {
          break label$17
         }
         HEAP8[$0_1 >> 0] = 0;
         HEAP32[$1_1 >> 2] = 0;
         break label$2;
        }
        $7_1 = -1;
        $6_1 = $637($4_1 + 12 | 0 | 0, $6_1 | 0, 0 | 0) | 0;
        if (($6_1 | 0) == (-1 | 0)) {
         break label$1
        }
        if ($5_1 >>> 0 < $6_1 >>> 0) {
         break label$2
        }
        $637($0_1 | 0, HEAP32[$8_1 >> 2] | 0 | 0, 0 | 0) | 0;
        $5_1 = $5_1 - $6_1 | 0;
        $0_1 = $0_1 + $6_1 | 0;
        break label$15;
       }
       HEAP8[$0_1 >> 0] = $6_1;
       $5_1 = $5_1 + -1 | 0;
       $0_1 = $0_1 + 1 | 0;
       $8_1 = HEAP32[$1_1 >> 2] | 0;
      }
      $8_1 = $8_1 + 4 | 0;
      HEAP32[$1_1 >> 2] = $8_1;
      if ($5_1) {
       continue label$14
      }
      break label$14;
     };
    }
    $7_1 = $2_1;
    break label$1;
   }
   $7_1 = $2_1 - $5_1 | 0;
  }
  global$0 = $4_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $987($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $9_1 = 0, $5_1 = 0, $8_1 = 0, $6_1 = 0, $7_1 = 0, $10_1 = 0;
  $5_1 = global$0 - 272 | 0;
  global$0 = $5_1;
  $6_1 = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $6_1;
  $7_1 = $0_1 ? $0_1 : $5_1 + 16 | 0;
  $8_1 = 0;
  label$1 : {
   $3_1 = $0_1 ? $3_1 : 256;
   if (!$3_1) {
    break label$1
   }
   if (!$6_1) {
    break label$1
   }
   $9_1 = $3_1 >>> 0 > $2_1 >>> 0;
   label$2 : {
    label$3 : {
     if ($2_1 >>> 0 <= 32 >>> 0) {
      break label$3
     }
     $8_1 = 0;
     break label$2;
    }
    $8_1 = 0;
    if ($3_1 >>> 0 <= $2_1 >>> 0) {
     break label$2
    }
    $8_1 = 0;
    break label$1;
   }
   label$4 : while (1) {
    $9_1 = $9_1 & 1 | 0 ? $2_1 : $3_1;
    $2_1 = $2_1 - $9_1 | 0;
    label$5 : {
     $9_1 = $986($7_1 | 0, $5_1 + 12 | 0 | 0, $9_1 | 0, 0 | 0) | 0;
     if (($9_1 | 0) != (-1 | 0)) {
      break label$5
     }
     $3_1 = 0;
     $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
     $8_1 = -1;
     break label$1;
    }
    $10_1 = ($7_1 | 0) == ($5_1 + 16 | 0 | 0);
    $7_1 = $10_1 ? $7_1 : $7_1 + $9_1 | 0;
    $8_1 = $9_1 + $8_1 | 0;
    $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
    $3_1 = $3_1 - ($10_1 ? 0 : $9_1) | 0;
    if (!$3_1) {
     break label$1
    }
    if (!$6_1) {
     break label$1
    }
    $9_1 = $2_1 >>> 0 < $3_1 >>> 0;
    if ($2_1 >>> 0 > 32 >>> 0) {
     continue label$4
    }
    if ($2_1 >>> 0 >= $3_1 >>> 0) {
     continue label$4
    }
    break label$4;
   };
  }
  label$6 : {
   label$7 : {
    if (!$6_1) {
     break label$7
    }
    if (!$3_1) {
     break label$7
    }
    if (!$2_1) {
     break label$7
    }
    label$8 : while (1) {
     label$9 : {
      $9_1 = $637($7_1 | 0, HEAP32[$6_1 >> 2] | 0 | 0, 0 | 0) | 0;
      if (($9_1 + 1 | 0) >>> 0 > 1 >>> 0) {
       break label$9
      }
      $10_1 = -1;
      if ($9_1) {
       break label$6
      }
      HEAP32[($5_1 + 12 | 0) >> 2] = 0;
      break label$7;
     }
     $6_1 = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 4 | 0;
     HEAP32[($5_1 + 12 | 0) >> 2] = $6_1;
     $8_1 = $9_1 + $8_1 | 0;
     $3_1 = $3_1 - $9_1 | 0;
     if (!$3_1) {
      break label$7
     }
     $7_1 = $7_1 + $9_1 | 0;
     $10_1 = $8_1;
     $2_1 = $2_1 + -1 | 0;
     if ($2_1) {
      continue label$8
     }
     break label$6;
    };
   }
   $10_1 = $8_1;
  }
  label$10 : {
   if (!$0_1) {
    break label$10
   }
   HEAP32[$1_1 >> 2] = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  }
  global$0 = $5_1 + 272 | 0;
  return $10_1 | 0;
 }
 
 function $988($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $9_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $10_1 = 0;
  $5_1 = global$0 - 1040 | 0;
  global$0 = $5_1;
  $6_1 = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $6_1;
  $7_1 = $0_1 ? $0_1 : $5_1 + 16 | 0;
  $8_1 = 0;
  label$1 : {
   $3_1 = $0_1 ? $3_1 : 256;
   if (!$3_1) {
    break label$1
   }
   if (!$6_1) {
    break label$1
   }
   $9_1 = $2_1 >>> 2 | 0;
   $10_1 = $9_1 >>> 0 < $3_1 >>> 0;
   $8_1 = 0;
   label$2 : {
    if ($2_1 >>> 0 > 131 >>> 0) {
     break label$2
    }
    if ($9_1 >>> 0 < $3_1 >>> 0) {
     break label$1
    }
   }
   label$3 : while (1) {
    $9_1 = $10_1 & 1 | 0 ? $9_1 : $3_1;
    $2_1 = $2_1 - $9_1 | 0;
    label$4 : {
     $9_1 = $585($7_1 | 0, $5_1 + 12 | 0 | 0, $9_1 | 0, $4_1 | 0) | 0;
     if (($9_1 | 0) != (-1 | 0)) {
      break label$4
     }
     $3_1 = 0;
     $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
     $8_1 = -1;
     break label$1;
    }
    $10_1 = ($7_1 | 0) == ($5_1 + 16 | 0 | 0);
    $7_1 = $10_1 ? $7_1 : $7_1 + ($9_1 << 2 | 0) | 0;
    $8_1 = $9_1 + $8_1 | 0;
    $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
    $3_1 = $3_1 - ($10_1 ? 0 : $9_1) | 0;
    if (!$3_1) {
     break label$1
    }
    if (!$6_1) {
     break label$1
    }
    $9_1 = $2_1 >>> 2 | 0;
    $10_1 = $9_1 >>> 0 < $3_1 >>> 0;
    if ($2_1 >>> 0 > 131 >>> 0) {
     continue label$3
    }
    if ($9_1 >>> 0 >= $3_1 >>> 0) {
     continue label$3
    }
    break label$3;
   };
  }
  label$5 : {
   label$6 : {
    if (!$6_1) {
     break label$6
    }
    if (!$3_1) {
     break label$6
    }
    if (!$2_1) {
     break label$6
    }
    label$7 : while (1) {
     label$8 : {
      $9_1 = $955($7_1 | 0, $6_1 | 0, $2_1 | 0, $4_1 | 0) | 0;
      if (($9_1 + 2 | 0) >>> 0 > 2 >>> 0) {
       break label$8
      }
      label$9 : {
       switch ($9_1 + 1 | 0 | 0) {
       case 1:
        HEAP32[($5_1 + 12 | 0) >> 2] = 0;
        break label$6;
       case 0:
        break label$5;
       default:
        break label$9;
       };
      }
      HEAP32[$4_1 >> 2] = 0;
      break label$6;
     }
     $6_1 = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + $9_1 | 0;
     HEAP32[($5_1 + 12 | 0) >> 2] = $6_1;
     $8_1 = $8_1 + 1 | 0;
     $3_1 = $3_1 + -1 | 0;
     if (!$3_1) {
      break label$6
     }
     $7_1 = $7_1 + 4 | 0;
     $2_1 = $2_1 - $9_1 | 0;
     $9_1 = $8_1;
     if ($2_1) {
      continue label$7
     }
     break label$5;
    };
   }
   $9_1 = $8_1;
  }
  label$11 : {
   if (!$0_1) {
    break label$11
   }
   HEAP32[$1_1 >> 2] = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  }
  global$0 = $5_1 + 1040 | 0;
  return $9_1 | 0;
 }
 
 function $989($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $5_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    if ($1_1) {
     break label$2
    }
    $1_1 = 0;
    break label$1;
   }
   label$3 : {
    if (!$2_1) {
     break label$3
    }
    $0_1 = $0_1 ? $0_1 : $3_1 + 12 | 0;
    label$4 : {
     $4_1 = HEAPU8[$1_1 >> 0] | 0;
     $5_1 = ($4_1 << 24 | 0) >> 24 | 0;
     if (($5_1 | 0) < (0 | 0)) {
      break label$4
     }
     HEAP32[$0_1 >> 2] = $4_1;
     $1_1 = ($5_1 | 0) != (0 | 0);
     break label$1;
    }
    $4_1 = HEAP32[(HEAP32[(($990() | 0) + 176 | 0) >> 2] | 0) >> 2] | 0;
    $5_1 = HEAP8[$1_1 >> 0] | 0;
    label$5 : {
     if ($4_1) {
      break label$5
     }
     HEAP32[$0_1 >> 2] = $5_1 & 57343 | 0;
     $1_1 = 1;
     break label$1;
    }
    $4_1 = ($5_1 & 255 | 0) + -194 | 0;
    if ($4_1 >>> 0 > 50 >>> 0) {
     break label$3
    }
    $4_1 = HEAP32[(($4_1 << 2 | 0) + 4288 | 0) >> 2] | 0;
    label$6 : {
     if ($2_1 >>> 0 > 3 >>> 0) {
      break label$6
     }
     if (($4_1 << (Math_imul($2_1, 6) + -6 | 0) | 0 | 0) < (0 | 0)) {
      break label$3
     }
    }
    $5_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    $2_1 = $5_1 >>> 3 | 0;
    if (($2_1 + -16 | 0 | ($2_1 + ($4_1 >> 26 | 0) | 0) | 0) >>> 0 > 7 >>> 0) {
     break label$3
    }
    label$7 : {
     $2_1 = $5_1 + -128 | 0 | ($4_1 << 6 | 0) | 0;
     if (($2_1 | 0) < (0 | 0)) {
      break label$7
     }
     HEAP32[$0_1 >> 2] = $2_1;
     $1_1 = 2;
     break label$1;
    }
    $4_1 = (HEAPU8[($1_1 + 2 | 0) >> 0] | 0) + -128 | 0;
    if ($4_1 >>> 0 > 63 >>> 0) {
     break label$3
    }
    label$8 : {
     $2_1 = $4_1 | ($2_1 << 6 | 0) | 0;
     if (($2_1 | 0) < (0 | 0)) {
      break label$8
     }
     HEAP32[$0_1 >> 2] = $2_1;
     $1_1 = 3;
     break label$1;
    }
    $1_1 = (HEAPU8[($1_1 + 3 | 0) >> 0] | 0) + -128 | 0;
    if ($1_1 >>> 0 > 63 >>> 0) {
     break label$3
    }
    HEAP32[$0_1 >> 2] = $1_1 | ($2_1 << 6 | 0) | 0;
    $1_1 = 4;
    break label$1;
   }
   HEAP32[($587() | 0) >> 2] = 25;
   $1_1 = -1;
  }
  global$0 = $3_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $990() {
  return $584() | 0 | 0;
 }
 
 function $991() {
  return (HEAP32[(HEAP32[(($992() | 0) + 176 | 0) >> 2] | 0) >> 2] | 0 ? 4 : 1) | 0;
 }
 
 function $992() {
  return $584() | 0 | 0;
 }
 
 function $993($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $955(0 | 0, $0_1 | 0, $1_1 | 0, ($2_1 ? $2_1 : 334616) | 0) | 0 | 0;
 }
 
 function $994($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = $995() | 0;
  $2_1 = HEAP32[($1_1 + 176 | 0) >> 2] | 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   HEAP32[($1_1 + 176 | 0) >> 2] = ($0_1 | 0) == (-1 | 0) ? 331432 : $0_1;
  }
  return (($2_1 | 0) == (331432 | 0) ? -1 : $2_1) | 0;
 }
 
 function $995() {
  return $584() | 0 | 0;
 }
 
 function $996($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = -1;
  i64toi32_i32$0 = $997($0_1 | 0, $1_1 | 0, $2_1 | 0, -1 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $997($0_1, $1_1, $2_1, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  $4_1 = global$0 - 144 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[($4_1 + 76 | 0) >> 2] = -1;
  HEAP32[($4_1 + 8 | 0) >> 2] = ($0_1 | 0) < (0 | 0) ? -1 : $0_1 + 2147483647 | 0;
  i64toi32_i32$0 = 0;
  $663($4_1 | 0, 0 | 0, i64toi32_i32$0 | 0);
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$0 = $954($4_1 | 0, $2_1 | 0, 1 | 0, $3_1 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $3_1 = i64toi32_i32$0;
  $3$hi = i64toi32_i32$1;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $0_1 + (((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + (HEAP32[($4_1 + 120 | 0) >> 2] | 0) | 0) - (HEAP32[($4_1 + 8 | 0) >> 2] | 0) | 0) | 0;
  }
  global$0 = $4_1 + 144 | 0;
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $998($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = -2147483648;
  i64toi32_i32$0 = $997($0_1 | 0, $1_1 | 0, $2_1 | 0, 0 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $999($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $996($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $1000($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $998($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $1001($0_1) {
  $0_1 = $0_1 | 0;
  $1002($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1002($0_1) {
  $0_1 = $0_1 | 0;
  $2020($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1003($0_1) {
  $0_1 = $0_1 | 0;
  $2032($1001($0_1 | 0) | 0 | 0);
 }
 
 function $1004($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : while (1) {
     if (($3_1 | 0) == ($4_1 | 0)) {
      break label$2
     }
     $5_1 = -1;
     if (($1_1 | 0) == ($2_1 | 0)) {
      break label$1
     }
     $6_1 = HEAP8[$1_1 >> 0] | 0;
     $7_1 = HEAP8[$3_1 >> 0] | 0;
     if (($6_1 | 0) < ($7_1 | 0)) {
      break label$1
     }
     label$4 : {
      if (($7_1 | 0) >= ($6_1 | 0)) {
       break label$4
      }
      return 1 | 0;
     }
     $3_1 = $3_1 + 1 | 0;
     $1_1 = $1_1 + 1 | 0;
     continue label$3;
    };
   }
   $5_1 = ($1_1 | 0) != ($2_1 | 0);
  }
  return $5_1 | 0;
 }
 
 function $1005($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $1006($0_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
 }
 
 function $1006($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $862($0_1 | 0, $3_1 + 8 | 0 | 0, $3_1 | 0) | 0;
  $1007($0_1 | 0, $1_1 | 0, $2_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1007($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $4_1 = 0, $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   $4_1 = $1919($1_1 | 0, $2_1 | 0) | 0;
   if ($4_1 >>> 0 > ($1852($0_1 | 0) | 0) >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if ($4_1 >>> 0 > 10 >>> 0) {
      break label$3
     }
     $1341($0_1 | 0, $4_1 | 0);
     $5_1 = $1340($0_1 | 0) | 0;
     break label$2;
    }
    $5_1 = $1856($4_1 | 0) | 0;
    $6_1 = $5_1 + 1 | 0;
    $5_1 = $1858($1797($0_1 | 0) | 0 | 0, $6_1 | 0) | 0;
    $1860($0_1 | 0, $5_1 | 0);
    $1861($0_1 | 0, $6_1 | 0);
    $1339($0_1 | 0, $4_1 | 0);
   }
   label$4 : {
    label$5 : while (1) {
     if (($1_1 | 0) == ($2_1 | 0)) {
      break label$4
     }
     $1338($5_1 | 0, $1_1 | 0);
     $5_1 = $5_1 + 1 | 0;
     $1_1 = $1_1 + 1 | 0;
     continue label$5;
    };
   }
   HEAP8[($3_1 + 15 | 0) >> 0] = 0;
   $1338($5_1 | 0, $3_1 + 15 | 0 | 0);
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $2049($0_1 | 0);
  abort();
 }
 
 function $1008($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = 0;
  label$1 : while (1) {
   label$2 : {
    if (($1_1 | 0) != ($2_1 | 0)) {
     break label$2
    }
    return $3_1 | 0;
   }
   $3_1 = ($3_1 << 4 | 0) + (HEAP8[$1_1 >> 0] | 0) | 0;
   $4_1 = $3_1 & -268435456 | 0;
   $3_1 = ($4_1 >>> 24 | 0 | $4_1 | 0) ^ $3_1 | 0;
   $1_1 = $1_1 + 1 | 0;
   continue label$1;
  };
 }
 
 function $1009($0_1) {
  $0_1 = $0_1 | 0;
  $1002($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1010($0_1) {
  $0_1 = $0_1 | 0;
  $2032($1009($0_1 | 0) | 0 | 0);
 }
 
 function $1011($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : while (1) {
     if (($3_1 | 0) == ($4_1 | 0)) {
      break label$2
     }
     $5_1 = -1;
     if (($1_1 | 0) == ($2_1 | 0)) {
      break label$1
     }
     $6_1 = HEAP32[$1_1 >> 2] | 0;
     $7_1 = HEAP32[$3_1 >> 2] | 0;
     if (($6_1 | 0) < ($7_1 | 0)) {
      break label$1
     }
     label$4 : {
      if (($7_1 | 0) >= ($6_1 | 0)) {
       break label$4
      }
      return 1 | 0;
     }
     $3_1 = $3_1 + 4 | 0;
     $1_1 = $1_1 + 4 | 0;
     continue label$3;
    };
   }
   $5_1 = ($1_1 | 0) != ($2_1 | 0);
  }
  return $5_1 | 0;
 }
 
 function $1012($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $1013($0_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
 }
 
 function $1013($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $1014($0_1 | 0, $3_1 + 8 | 0 | 0, $3_1 | 0) | 0;
  $1015($0_1 | 0, $1_1 | 0, $2_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1014($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $878($1_1 | 0) | 0;
  $1921($0_1 | 0) | 0;
  $878($2_1 | 0) | 0;
  $1922($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1015($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $4_1 = 0, $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   $4_1 = $1923($1_1 | 0, $2_1 | 0) | 0;
   if ($4_1 >>> 0 > ($1924($0_1 | 0) | 0) >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if ($4_1 >>> 0 > 1 >>> 0) {
      break label$3
     }
     $1404($0_1 | 0, $4_1 | 0);
     $5_1 = $1403($0_1 | 0) | 0;
     break label$2;
    }
    $5_1 = $1925($4_1 | 0) | 0;
    $6_1 = $5_1 + 1 | 0;
    $5_1 = $1926($1810($0_1 | 0) | 0 | 0, $6_1 | 0) | 0;
    $1927($0_1 | 0, $5_1 | 0);
    $1928($0_1 | 0, $6_1 | 0);
    $1402($0_1 | 0, $4_1 | 0);
   }
   label$4 : {
    label$5 : while (1) {
     if (($1_1 | 0) == ($2_1 | 0)) {
      break label$4
     }
     $1401($5_1 | 0, $1_1 | 0);
     $5_1 = $5_1 + 4 | 0;
     $1_1 = $1_1 + 4 | 0;
     continue label$5;
    };
   }
   HEAP32[($3_1 + 12 | 0) >> 2] = 0;
   $1401($5_1 | 0, $3_1 + 12 | 0 | 0);
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $2049($0_1 | 0);
  abort();
 }
 
 function $1016($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = 0;
  label$1 : while (1) {
   label$2 : {
    if (($1_1 | 0) != ($2_1 | 0)) {
     break label$2
    }
    return $3_1 | 0;
   }
   $3_1 = (HEAP32[$1_1 >> 2] | 0) + ($3_1 << 4 | 0) | 0;
   $4_1 = $3_1 & -268435456 | 0;
   $3_1 = ($4_1 >>> 24 | 0 | $4_1 | 0) ^ $3_1 | 0;
   $1_1 = $1_1 + 4 | 0;
   continue label$1;
  };
 }
 
 function $1017($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (($773($3_1 | 0) | 0) & 1 | 0) {
     break label$2
    }
    HEAP32[$6_1 >> 2] = -1;
    $1_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $6_1) | 0;
    HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
    label$3 : {
     switch (HEAP32[$6_1 >> 2] | 0 | 0) {
     case 0:
      HEAP8[$5_1 >> 0] = 0;
      break label$1;
     case 1:
      HEAP8[$5_1 >> 0] = 1;
      break label$1;
     default:
      break label$3;
     };
    }
    HEAP8[$5_1 >> 0] = 1;
    HEAP32[$4_1 >> 2] = 4;
    break label$1;
   }
   $774($6_1 | 0, $3_1 | 0);
   $1_1 = $775($6_1 | 0) | 0;
   $1018($6_1 | 0) | 0;
   $774($6_1 | 0, $3_1 | 0);
   $3_1 = $1019($6_1 | 0) | 0;
   $1018($6_1 | 0) | 0;
   $1020($6_1 | 0, $3_1 | 0);
   $1021($6_1 | 12 | 0 | 0, $3_1 | 0);
   $3_1 = $6_1 + 24 | 0;
   HEAP8[$5_1 >> 0] = ($1022($6_1 + 24 | 0 | 0, $2_1 | 0, $6_1 | 0, $3_1 | 0, $1_1 | 0, $4_1 | 0, 1 | 0) | 0 | 0) == ($6_1 | 0);
   $1_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
   label$6 : while (1) {
    $3_1 = $2058($3_1 + -12 | 0 | 0) | 0;
    if (($3_1 | 0) != ($6_1 | 0)) {
     continue label$6
    }
    break label$6;
   };
  }
  global$0 = $6_1 + 32 | 0;
  return $1_1 | 0;
 }
 
 function $1018($0_1) {
  $0_1 = $0_1 | 0;
  $1602(HEAP32[$0_1 >> 2] | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1019($0_1) {
  $0_1 = $0_1 | 0;
  return $1023($0_1 | 0, 334864 | 0) | 0 | 0;
 }
 
 function $1020($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1021($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1022($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $12_1 = 0, $7_1 = 0, $11_1 = 0, $8_1 = 0, $9_1 = 0, $13_1 = 0, $15_1 = 0, $14_1 = 0, $16_1 = 0, $17_1 = 0, $10_1 = 0;
  $7_1 = global$0 - 128 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 120 | 0) >> 2] = $1_1;
  $8_1 = $1024($2_1 | 0, $3_1 | 0) | 0;
  HEAP32[($7_1 + 16 | 0) >> 2] = 274;
  $9_1 = 0;
  $10_1 = $1025($7_1 + 8 | 0 | 0, 0 | 0, $7_1 + 16 | 0 | 0) | 0;
  $11_1 = $7_1 + 16 | 0;
  label$1 : {
   label$2 : {
    if ($8_1 >>> 0 < 101 >>> 0) {
     break label$2
    }
    $11_1 = $2160($8_1 | 0) | 0;
    if (!$11_1) {
     break label$1
    }
    $1026($10_1 | 0, $11_1 | 0);
   }
   $12_1 = $11_1;
   $1_1 = $2_1;
   label$3 : while (1) {
    label$4 : {
     if (($1_1 | 0) != ($3_1 | 0)) {
      break label$4
     }
     $13_1 = 0;
     label$5 : {
      label$6 : while (1) {
       $1_1 = $778($0_1 | 0, $7_1 + 120 | 0 | 0) | 0;
       label$7 : {
        label$8 : {
         if (!$8_1) {
          break label$8
         }
         if ($1_1) {
          break label$7
         }
        }
        label$9 : {
         if (!($782($0_1 | 0, $7_1 + 120 | 0 | 0) | 0)) {
          break label$9
         }
         HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 2 | 0;
        }
        break label$5;
       }
       $14_1 = $779($0_1 | 0) | 0;
       label$10 : {
        if ($6_1) {
         break label$10
        }
        $14_1 = $1027($4_1 | 0, $14_1 | 0) | 0;
       }
       $15_1 = $13_1 + 1 | 0;
       $16_1 = 0;
       $12_1 = $11_1;
       $1_1 = $2_1;
       label$11 : while (1) {
        label$12 : {
         if (($1_1 | 0) != ($3_1 | 0)) {
          break label$12
         }
         $13_1 = $15_1;
         if (!($16_1 & 1 | 0)) {
          continue label$6
         }
         $781($0_1 | 0) | 0;
         $13_1 = $15_1;
         $12_1 = $11_1;
         $1_1 = $2_1;
         if (($9_1 + $8_1 | 0) >>> 0 < 2 >>> 0) {
          continue label$6
         }
         label$13 : while (1) {
          label$14 : {
           if (($1_1 | 0) != ($3_1 | 0)) {
            break label$14
           }
           $13_1 = $15_1;
           continue label$6;
          }
          label$15 : {
           if ((HEAPU8[$12_1 >> 0] | 0 | 0) != (2 | 0)) {
            break label$15
           }
           if (($1028($1_1 | 0) | 0 | 0) == ($15_1 | 0)) {
            break label$15
           }
           HEAP8[$12_1 >> 0] = 0;
           $9_1 = $9_1 + -1 | 0;
          }
          $12_1 = $12_1 + 1 | 0;
          $1_1 = $1_1 + 12 | 0;
          continue label$13;
         };
        }
        label$16 : {
         if ((HEAPU8[$12_1 >> 0] | 0 | 0) != (1 | 0)) {
          break label$16
         }
         $17_1 = HEAPU8[($1029($1_1 | 0, $13_1 | 0) | 0) >> 0] | 0;
         label$17 : {
          if ($6_1) {
           break label$17
          }
          $17_1 = $1027($4_1 | 0, ($17_1 << 24 | 0) >> 24 | 0 | 0) | 0;
         }
         label$18 : {
          label$19 : {
           if (($14_1 & 255 | 0 | 0) != ($17_1 & 255 | 0 | 0)) {
            break label$19
           }
           $16_1 = 1;
           if (($1028($1_1 | 0) | 0 | 0) != ($15_1 | 0)) {
            break label$16
           }
           HEAP8[$12_1 >> 0] = 2;
           $16_1 = 1;
           $9_1 = $9_1 + 1 | 0;
           break label$18;
          }
          HEAP8[$12_1 >> 0] = 0;
         }
         $8_1 = $8_1 + -1 | 0;
        }
        $12_1 = $12_1 + 1 | 0;
        $1_1 = $1_1 + 12 | 0;
        continue label$11;
       };
      };
     }
     label$20 : {
      label$21 : {
       label$22 : while (1) {
        if (($2_1 | 0) == ($3_1 | 0)) {
         break label$21
        }
        label$23 : {
         if ((HEAPU8[$11_1 >> 0] | 0 | 0) == (2 | 0)) {
          break label$23
         }
         $11_1 = $11_1 + 1 | 0;
         $2_1 = $2_1 + 12 | 0;
         continue label$22;
        }
        break label$22;
       };
       $3_1 = $2_1;
       break label$20;
      }
      HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
     }
     $1030($10_1 | 0) | 0;
     global$0 = $7_1 + 128 | 0;
     return $3_1 | 0;
    }
    label$24 : {
     label$25 : {
      if ($1031($1_1 | 0) | 0) {
       break label$25
      }
      HEAP8[$12_1 >> 0] = 1;
      break label$24;
     }
     HEAP8[$12_1 >> 0] = 2;
     $9_1 = $9_1 + 1 | 0;
     $8_1 = $8_1 + -1 | 0;
    }
    $12_1 = $12_1 + 1 | 0;
    $1_1 = $1_1 + 12 | 0;
    continue label$3;
   };
  }
  $2029();
  abort();
 }
 
 function $1023($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1597(HEAP32[$0_1 >> 2] | 0 | 0, $1563($1_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1024($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1963($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1025($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
  $1947($0_1 | 0, $3_1 + 12 | 0 | 0, $869($2_1 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1026($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($1948($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($1948($0_1 | 0) | 0) >> 2] = $1_1;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($1949($0_1 | 0) | 0) >> 2] | 0 | 0]($2_1);
  }
 }
 
 function $1027($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1, $1_1) | 0 | 0;
 }
 
 function $1028($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!($1076($0_1 | 0) | 0)) {
    break label$1
   }
   return $1079($0_1 | 0) | 0 | 0;
  }
  return $1080($0_1 | 0) | 0 | 0;
 }
 
 function $1029($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1084($0_1 | 0) | 0) + $1_1 | 0 | 0;
 }
 
 function $1030($0_1) {
  $0_1 = $0_1 | 0;
  $1026($0_1 | 0, 0 | 0);
  return $0_1 | 0;
 }
 
 function $1031($0_1) {
  $0_1 = $0_1 | 0;
  return !($1028($0_1 | 0) | 0) | 0;
 }
 
 function $1032($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1033($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $1033($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 272 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 256 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 264 | 0) >> 2] = $1_1;
  $1_1 = $1034($3_1 | 0) | 0;
  $2_1 = $1035($0_1 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0) | 0;
  $1036($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 255 | 0 | 0);
  $3_1 = $1037($6_1 + 192 | 0 | 0) | 0;
  $1039($3_1 | 0, $1038($3_1 | 0) | 0 | 0);
  $0_1 = $1040($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!($778($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($0_1 + ($1028($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $1028($3_1 | 0) | 0;
     $1039($3_1 | 0, ($1028($3_1 | 0) | 0) << 1 | 0 | 0);
     $1039($3_1 | 0, $1038($3_1 | 0) | 0 | 0);
     $0_1 = $1040($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $0_1 | 0;
    }
    if ($1041($779($6_1 + 264 | 0 | 0) | 0 | 0, $1_1 | 0, $0_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP8[($6_1 + 255 | 0) >> 0] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0) | 0) {
     break label$1
    }
    $781($6_1 + 264 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($1028($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAP32[$5_1 >> 2] = $1042($0_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  $1043($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($782($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $0_1 = HEAP32[($6_1 + 264 | 0) >> 2] | 0;
  $2058($3_1 | 0) | 0;
  $2058($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 272 | 0;
  return $0_1 | 0;
 }
 
 function $1034($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    $0_1 = ($773($0_1 | 0) | 0) & 74 | 0;
    if (!$0_1) {
     break label$2
    }
    label$3 : {
     if (($0_1 | 0) != (64 | 0)) {
      break label$3
     }
     return 8 | 0;
    }
    if (($0_1 | 0) != (8 | 0)) {
     break label$1
    }
    return 16 | 0;
   }
   return 0 | 0;
  }
  return 10 | 0;
 }
 
 function $1035($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1125($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $1036($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $774($3_1 + 8 | 0 | 0, $1_1 | 0);
  $1_1 = $1019($3_1 + 8 | 0 | 0) | 0;
  HEAP8[$2_1 >> 0] = $1122($1_1 | 0) | 0;
  $1123($0_1 | 0, $1_1 | 0);
  $1018($3_1 + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $1037($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $862($0_1 | 0, $1_1 + 8 | 0 | 0, $1_1 | 0) | 0;
  $1075($0_1 | 0);
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1038($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 10;
  label$1 : {
   if (!($1076($0_1 | 0) | 0)) {
    break label$1
   }
   $1_1 = ($1077($0_1 | 0) | 0) + -1 | 0;
  }
  return $1_1 | 0;
 }
 
 function $1039($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2065($0_1 | 0, $1_1 | 0, 0 | 0);
 }
 
 function $1040($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1078($0_1 | 0) | 0) + $1_1 | 0 | 0;
 }
 
 function $1041($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var $10_1 = 0, $11_1 = 0, $12_1 = 0;
  $10_1 = global$0 - 16 | 0;
  global$0 = $10_1;
  HEAP8[($10_1 + 15 | 0) >> 0] = $0_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if ((HEAP32[$3_1 >> 2] | 0 | 0) != ($2_1 | 0)) {
      break label$3
     }
     $11_1 = 43;
     label$4 : {
      $12_1 = $0_1 & 255 | 0;
      if ((HEAPU8[($9_1 + 24 | 0) >> 0] | 0 | 0) == ($12_1 | 0)) {
       break label$4
      }
      $11_1 = 45;
      if ((HEAPU8[($9_1 + 25 | 0) >> 0] | 0 | 0) != ($12_1 | 0)) {
       break label$3
      }
     }
     HEAP32[$3_1 >> 2] = $2_1 + 1 | 0;
     HEAP8[$2_1 >> 0] = $11_1;
     break label$2;
    }
    label$5 : {
     if (!($1028($6_1 | 0) | 0)) {
      break label$5
     }
     if (($0_1 | 0) != ($5_1 | 0)) {
      break label$5
     }
     $0_1 = 0;
     $9_1 = HEAP32[$8_1 >> 2] | 0;
     if (($9_1 - $7_1 | 0 | 0) > (159 | 0)) {
      break label$1
     }
     $0_1 = HEAP32[$4_1 >> 2] | 0;
     HEAP32[$8_1 >> 2] = $9_1 + 4 | 0;
     HEAP32[$9_1 >> 2] = $0_1;
     break label$2;
    }
    $0_1 = -1;
    $9_1 = ($1081($9_1 | 0, $9_1 + 26 | 0 | 0, $10_1 + 15 | 0 | 0) | 0) - $9_1 | 0;
    if (($9_1 | 0) > (23 | 0)) {
     break label$1
    }
    label$6 : {
     label$7 : {
      switch ($1_1 + -8 | 0 | 0) {
      case 0:
      case 2:
       if (($9_1 | 0) < ($1_1 | 0)) {
        break label$6
       }
       break label$1;
      case 1:
       break label$6;
      default:
       break label$7;
      };
     }
     if (($1_1 | 0) != (16 | 0)) {
      break label$6
     }
     if (($9_1 | 0) < (22 | 0)) {
      break label$6
     }
     $6_1 = HEAP32[$3_1 >> 2] | 0;
     if (($6_1 | 0) == ($2_1 | 0)) {
      break label$1
     }
     if (($6_1 - $2_1 | 0 | 0) > (2 | 0)) {
      break label$1
     }
     $0_1 = -1;
     if ((HEAPU8[($6_1 + -1 | 0) >> 0] | 0 | 0) != (48 | 0)) {
      break label$1
     }
     $0_1 = 0;
     HEAP32[$4_1 >> 2] = 0;
     HEAP32[$3_1 >> 2] = $6_1 + 1 | 0;
     HEAP8[$6_1 >> 0] = HEAPU8[($9_1 + 14416 | 0) >> 0] | 0;
     break label$1;
    }
    $0_1 = HEAP32[$3_1 >> 2] | 0;
    HEAP32[$3_1 >> 2] = $0_1 + 1 | 0;
    HEAP8[$0_1 >> 0] = HEAPU8[($9_1 + 14416 | 0) >> 0] | 0;
    HEAP32[$4_1 >> 2] = (HEAP32[$4_1 >> 2] | 0) + 1 | 0;
    $0_1 = 0;
    break label$1;
   }
   $0_1 = 0;
   HEAP32[$4_1 >> 2] = 0;
  }
  global$0 = $10_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1042($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $6$hi = 0, i64toi32_i32$3 = 0, $4_1 = 0, $6_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $5_1 = 0, $42_1 = 0, $42$hi = 0, $46_1 = 0, $46$hi = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       if (($0_1 | 0) == ($1_1 | 0)) {
        break label$5
       }
       $5_1 = HEAP32[($587() | 0) >> 2] | 0;
       HEAP32[($587() | 0) >> 2] = 0;
       i64toi32_i32$0 = $1000($0_1 | 0, $4_1 + 12 | 0 | 0, $3_1 | 0, $1073() | 0 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $6_1 = i64toi32_i32$0;
       $6$hi = i64toi32_i32$1;
       label$6 : {
        label$7 : {
         $0_1 = HEAP32[($587() | 0) >> 2] | 0;
         if (!$0_1) {
          break label$7
         }
         if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
          break label$6
         }
         if (($0_1 | 0) == (68 | 0)) {
          break label$2
         }
         break label$3;
        }
        HEAP32[($587() | 0) >> 2] = $5_1;
        if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
         break label$3
        }
       }
       HEAP32[$2_1 >> 2] = 4;
       break label$4;
      }
      HEAP32[$2_1 >> 2] = 4;
     }
     $0_1 = 0;
     break label$1;
    }
    i64toi32_i32$1 = $6$hi;
    i64toi32_i32$0 = $1964() | 0;
    i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
    $42_1 = i64toi32_i32$0;
    $42$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $6$hi;
    i64toi32_i32$2 = $6_1;
    i64toi32_i32$0 = $42$hi;
    i64toi32_i32$3 = $42_1;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
     $16_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $17_1 = 0
      } else {
       $17_1 = 1
      }
      $18_1 = $17_1;
     } else {
      $18_1 = 0
     }
     $16_1 = $18_1;
    }
    if ($16_1) {
     break label$2
    }
    i64toi32_i32$2 = $6$hi;
    i64toi32_i32$1 = $798() | 0;
    i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
    $46_1 = i64toi32_i32$1;
    $46$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $6$hi;
    i64toi32_i32$3 = $6_1;
    i64toi32_i32$1 = $46$hi;
    i64toi32_i32$0 = $46_1;
    if ((i64toi32_i32$2 | 0) > (i64toi32_i32$1 | 0)) {
     $19_1 = 1
    } else {
     if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$1 | 0)) {
      if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$0 >>> 0) {
       $20_1 = 0
      } else {
       $20_1 = 1
      }
      $21_1 = $20_1;
     } else {
      $21_1 = 0
     }
     $19_1 = $21_1;
    }
    if ($19_1) {
     break label$2
    }
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$3 = $6$hi;
    $0_1 = $6_1;
    break label$1;
   }
   HEAP32[$2_1 >> 2] = 4;
   label$8 : {
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$0 = $6_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 1;
    if (($6$hi | 0) < (i64toi32_i32$2 | 0)) {
     $22_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$1 >>> 0) {
       $23_1 = 0
      } else {
       $23_1 = 1
      }
      $24_1 = $23_1;
     } else {
      $24_1 = 0
     }
     $22_1 = $24_1;
    }
    if ($22_1) {
     break label$8
    }
    $0_1 = $798() | 0;
    break label$1;
   }
   $0_1 = $1964() | 0;
  }
  global$0 = $4_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1043($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  label$1 : {
   if (!($1028($0_1 | 0) | 0)) {
    break label$1
   }
   if (($2_1 - $1_1 | 0 | 0) < (5 | 0)) {
    break label$1
   }
   $1377($1_1 | 0, $2_1 | 0);
   $4_1 = $2_1 + -4 | 0;
   $2_1 = $1084($0_1 | 0) | 0;
   $5_1 = $2_1 + ($1028($0_1 | 0) | 0) | 0;
   label$2 : {
    label$3 : while (1) {
     $0_1 = HEAP8[$2_1 >> 0] | 0;
     if ($1_1 >>> 0 >= $4_1 >>> 0) {
      break label$2
     }
     label$4 : {
      if (($0_1 | 0) < (1 | 0)) {
       break label$4
      }
      if (($0_1 | 0) >= ($1271() | 0 | 0)) {
       break label$4
      }
      if ((HEAP32[$1_1 >> 2] | 0 | 0) == (HEAP8[$2_1 >> 0] | 0 | 0)) {
       break label$4
      }
      HEAP32[$3_1 >> 2] = 4;
      return;
     }
     $2_1 = ($5_1 - $2_1 | 0 | 0) > (1 | 0) ? $2_1 + 1 | 0 : $2_1;
     $1_1 = $1_1 + 4 | 0;
     continue label$3;
    };
   }
   if (($0_1 | 0) < (1 | 0)) {
    break label$1
   }
   if (($0_1 | 0) >= ($1271() | 0 | 0)) {
    break label$1
   }
   if (((HEAP32[$4_1 >> 2] | 0) + -1 | 0) >>> 0 < (HEAP8[$2_1 >> 0] | 0) >>> 0) {
    break label$1
   }
   HEAP32[$3_1 >> 2] = 4;
  }
 }
 
 function $1044($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1045($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $1045($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$0 = 0, $7_1 = 0, i64toi32_i32$1 = 0, $114_1 = 0;
  $6_1 = global$0 - 272 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 256 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 264 | 0) >> 2] = $1_1;
  $1_1 = $1034($3_1 | 0) | 0;
  $2_1 = $1035($0_1 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0) | 0;
  $1036($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 255 | 0 | 0);
  $3_1 = $1037($6_1 + 192 | 0 | 0) | 0;
  $1039($3_1 | 0, $1038($3_1 | 0) | 0 | 0);
  $0_1 = $1040($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!($778($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($0_1 + ($1028($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $1028($3_1 | 0) | 0;
     $1039($3_1 | 0, ($1028($3_1 | 0) | 0) << 1 | 0 | 0);
     $1039($3_1 | 0, $1038($3_1 | 0) | 0 | 0);
     $0_1 = $1040($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $0_1 | 0;
    }
    if ($1041($779($6_1 + 264 | 0 | 0) | 0 | 0, $1_1 | 0, $0_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP8[($6_1 + 255 | 0) >> 0] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0) | 0) {
     break label$1
    }
    $781($6_1 + 264 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($1028($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  i64toi32_i32$0 = $1046($0_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $114_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1;
  HEAP32[i64toi32_i32$0 >> 2] = $114_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $1043($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($782($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $0_1 = HEAP32[($6_1 + 264 | 0) >> 2] | 0;
  $2058($3_1 | 0) | 0;
  $2058($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 272 | 0;
  return $0_1 | 0;
 }
 
 function $1046($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $6$hi = 0, $6_1 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $5_1 = 0, $41_1 = 0, $41$hi = 0, $43$hi = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       if (($0_1 | 0) == ($1_1 | 0)) {
        break label$5
       }
       $5_1 = HEAP32[($587() | 0) >> 2] | 0;
       HEAP32[($587() | 0) >> 2] = 0;
       i64toi32_i32$0 = $1000($0_1 | 0, $4_1 + 12 | 0 | 0, $3_1 | 0, $1073() | 0 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $6_1 = i64toi32_i32$0;
       $6$hi = i64toi32_i32$1;
       label$6 : {
        label$7 : {
         $0_1 = HEAP32[($587() | 0) >> 2] | 0;
         if (!$0_1) {
          break label$7
         }
         if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
          break label$6
         }
         if (($0_1 | 0) == (68 | 0)) {
          break label$2
         }
         break label$3;
        }
        HEAP32[($587() | 0) >> 2] = $5_1;
        if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
         break label$3
        }
       }
       HEAP32[$2_1 >> 2] = 4;
       break label$4;
      }
      HEAP32[$2_1 >> 2] = 4;
     }
     i64toi32_i32$1 = 0;
     $6_1 = 0;
     $6$hi = i64toi32_i32$1;
     break label$1;
    }
    i64toi32_i32$1 = $6$hi;
    i64toi32_i32$1 = $1966() | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $41_1 = i64toi32_i32$1;
    $41$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $6$hi;
    i64toi32_i32$2 = $6_1;
    i64toi32_i32$1 = $41$hi;
    i64toi32_i32$3 = $41_1;
    if ((i64toi32_i32$0 | 0) < (i64toi32_i32$1 | 0)) {
     $15_1 = 1
    } else {
     if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$1 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $16_1 = 0
      } else {
       $16_1 = 1
      }
      $17_1 = $16_1;
     } else {
      $17_1 = 0
     }
     $15_1 = $17_1;
    }
    if ($15_1) {
     break label$2
    }
    i64toi32_i32$2 = $1967() | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $43$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $6$hi;
    i64toi32_i32$0 = $43$hi;
    i64toi32_i32$3 = i64toi32_i32$2;
    i64toi32_i32$2 = $6$hi;
    i64toi32_i32$1 = $6_1;
    if ((i64toi32_i32$0 | 0) > ($6$hi | 0)) {
     $18_1 = 1
    } else {
     if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
       $19_1 = 0
      } else {
       $19_1 = 1
      }
      $20_1 = $19_1;
     } else {
      $20_1 = 0
     }
     $18_1 = $20_1;
    }
    if ($18_1) {
     break label$1
    }
   }
   HEAP32[$2_1 >> 2] = 4;
   label$8 : {
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$1 = $6_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 1;
    if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
     $21_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$2 >>> 0) {
       $22_1 = 0
      } else {
       $22_1 = 1
      }
      $23_1 = $22_1;
     } else {
      $23_1 = 0
     }
     $21_1 = $23_1;
    }
    if ($21_1) {
     break label$8
    }
    i64toi32_i32$1 = $1967() | 0;
    i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
    $6_1 = i64toi32_i32$1;
    $6$hi = i64toi32_i32$3;
    break label$1;
   }
   i64toi32_i32$3 = $1966() | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $6_1 = i64toi32_i32$3;
   $6$hi = i64toi32_i32$1;
  }
  global$0 = $4_1 + 16 | 0;
  i64toi32_i32$1 = $6$hi;
  i64toi32_i32$3 = $6_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$3 | 0;
 }
 
 function $1047($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1048($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $1048($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 272 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 256 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 264 | 0) >> 2] = $1_1;
  $1_1 = $1034($3_1 | 0) | 0;
  $2_1 = $1035($0_1 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0) | 0;
  $1036($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 255 | 0 | 0);
  $3_1 = $1037($6_1 + 192 | 0 | 0) | 0;
  $1039($3_1 | 0, $1038($3_1 | 0) | 0 | 0);
  $0_1 = $1040($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!($778($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($0_1 + ($1028($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $1028($3_1 | 0) | 0;
     $1039($3_1 | 0, ($1028($3_1 | 0) | 0) << 1 | 0 | 0);
     $1039($3_1 | 0, $1038($3_1 | 0) | 0 | 0);
     $0_1 = $1040($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $0_1 | 0;
    }
    if ($1041($779($6_1 + 264 | 0 | 0) | 0 | 0, $1_1 | 0, $0_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP8[($6_1 + 255 | 0) >> 0] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0) | 0) {
     break label$1
    }
    $781($6_1 + 264 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($1028($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAP16[$5_1 >> 1] = $1049($0_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  $1043($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($782($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $0_1 = HEAP32[($6_1 + 264 | 0) >> 2] | 0;
  $2058($3_1 | 0) | 0;
  $2058($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 272 | 0;
  return $0_1 | 0;
 }
 
 function $1049($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $7_1 = 0, $7$hi = 0, $6_1 = 0, $53$hi = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        if (($0_1 | 0) == ($1_1 | 0)) {
         break label$6
        }
        label$7 : {
         $5_1 = HEAPU8[$0_1 >> 0] | 0;
         if (($5_1 | 0) != (45 | 0)) {
          break label$7
         }
         $0_1 = $0_1 + 1 | 0;
         if (($0_1 | 0) != ($1_1 | 0)) {
          break label$7
         }
         HEAP32[$2_1 >> 2] = 4;
         break label$5;
        }
        $6_1 = HEAP32[($587() | 0) >> 2] | 0;
        HEAP32[($587() | 0) >> 2] = 0;
        i64toi32_i32$0 = $999($0_1 | 0, $4_1 + 12 | 0 | 0, $3_1 | 0, $1073() | 0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $7_1 = i64toi32_i32$0;
        $7$hi = i64toi32_i32$1;
        label$8 : {
         label$9 : {
          $0_1 = HEAP32[($587() | 0) >> 2] | 0;
          if (!$0_1) {
           break label$9
          }
          if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
           break label$8
          }
          if (($0_1 | 0) == (68 | 0)) {
           break label$3
          }
          break label$4;
         }
         HEAP32[($587() | 0) >> 2] = $6_1;
         if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
          break label$4
         }
        }
        HEAP32[$2_1 >> 2] = 4;
        break label$5;
       }
       HEAP32[$2_1 >> 2] = 4;
      }
      $0_1 = 0;
      break label$1;
     }
     i64toi32_i32$1 = $7$hi;
     i64toi32_i32$1 = 0;
     $53$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $7$hi;
     i64toi32_i32$0 = $53$hi;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & $7_1 >>> 0 <= ($1970() | 0) >>> 0 | 0) | 0) {
      break label$2
     }
    }
    HEAP32[$2_1 >> 2] = 4;
    $0_1 = $1970() | 0;
    break label$1;
   }
   $0_1 = $7_1;
   $0_1 = ($5_1 | 0) == (45 | 0) ? 0 - $0_1 | 0 : $0_1;
  }
  global$0 = $4_1 + 16 | 0;
  return $0_1 & 65535 | 0 | 0;
 }
 
 function $1050($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1051($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $1051($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 272 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 256 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 264 | 0) >> 2] = $1_1;
  $1_1 = $1034($3_1 | 0) | 0;
  $2_1 = $1035($0_1 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0) | 0;
  $1036($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 255 | 0 | 0);
  $3_1 = $1037($6_1 + 192 | 0 | 0) | 0;
  $1039($3_1 | 0, $1038($3_1 | 0) | 0 | 0);
  $0_1 = $1040($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!($778($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($0_1 + ($1028($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $1028($3_1 | 0) | 0;
     $1039($3_1 | 0, ($1028($3_1 | 0) | 0) << 1 | 0 | 0);
     $1039($3_1 | 0, $1038($3_1 | 0) | 0 | 0);
     $0_1 = $1040($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $0_1 | 0;
    }
    if ($1041($779($6_1 + 264 | 0 | 0) | 0 | 0, $1_1 | 0, $0_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP8[($6_1 + 255 | 0) >> 0] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0) | 0) {
     break label$1
    }
    $781($6_1 + 264 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($1028($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAP32[$5_1 >> 2] = $1052($0_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  $1043($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($782($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $0_1 = HEAP32[($6_1 + 264 | 0) >> 2] | 0;
  $2058($3_1 | 0) | 0;
  $2058($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 272 | 0;
  return $0_1 | 0;
 }
 
 function $1052($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $7_1 = 0, $7$hi = 0, $6_1 = 0, $53$hi = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        if (($0_1 | 0) == ($1_1 | 0)) {
         break label$6
        }
        label$7 : {
         $5_1 = HEAPU8[$0_1 >> 0] | 0;
         if (($5_1 | 0) != (45 | 0)) {
          break label$7
         }
         $0_1 = $0_1 + 1 | 0;
         if (($0_1 | 0) != ($1_1 | 0)) {
          break label$7
         }
         HEAP32[$2_1 >> 2] = 4;
         break label$5;
        }
        $6_1 = HEAP32[($587() | 0) >> 2] | 0;
        HEAP32[($587() | 0) >> 2] = 0;
        i64toi32_i32$0 = $999($0_1 | 0, $4_1 + 12 | 0 | 0, $3_1 | 0, $1073() | 0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $7_1 = i64toi32_i32$0;
        $7$hi = i64toi32_i32$1;
        label$8 : {
         label$9 : {
          $0_1 = HEAP32[($587() | 0) >> 2] | 0;
          if (!$0_1) {
           break label$9
          }
          if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
           break label$8
          }
          if (($0_1 | 0) == (68 | 0)) {
           break label$3
          }
          break label$4;
         }
         HEAP32[($587() | 0) >> 2] = $6_1;
         if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
          break label$4
         }
        }
        HEAP32[$2_1 >> 2] = 4;
        break label$5;
       }
       HEAP32[$2_1 >> 2] = 4;
      }
      $0_1 = 0;
      break label$1;
     }
     i64toi32_i32$1 = $7$hi;
     i64toi32_i32$1 = 0;
     $53$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $7$hi;
     i64toi32_i32$0 = $53$hi;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & $7_1 >>> 0 <= ($1447() | 0) >>> 0 | 0) | 0) {
      break label$2
     }
    }
    HEAP32[$2_1 >> 2] = 4;
    $0_1 = $1447() | 0;
    break label$1;
   }
   $0_1 = $7_1;
   $0_1 = ($5_1 | 0) == (45 | 0) ? 0 - $0_1 | 0 : $0_1;
  }
  global$0 = $4_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1053($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1054($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $1054($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 272 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 256 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 264 | 0) >> 2] = $1_1;
  $1_1 = $1034($3_1 | 0) | 0;
  $2_1 = $1035($0_1 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0) | 0;
  $1036($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 255 | 0 | 0);
  $3_1 = $1037($6_1 + 192 | 0 | 0) | 0;
  $1039($3_1 | 0, $1038($3_1 | 0) | 0 | 0);
  $0_1 = $1040($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!($778($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($0_1 + ($1028($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $1028($3_1 | 0) | 0;
     $1039($3_1 | 0, ($1028($3_1 | 0) | 0) << 1 | 0 | 0);
     $1039($3_1 | 0, $1038($3_1 | 0) | 0 | 0);
     $0_1 = $1040($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $0_1 | 0;
    }
    if ($1041($779($6_1 + 264 | 0 | 0) | 0 | 0, $1_1 | 0, $0_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP8[($6_1 + 255 | 0) >> 0] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0) | 0) {
     break label$1
    }
    $781($6_1 + 264 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($1028($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAP32[$5_1 >> 2] = $1055($0_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  $1043($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($782($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $0_1 = HEAP32[($6_1 + 264 | 0) >> 2] | 0;
  $2058($3_1 | 0) | 0;
  $2058($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 272 | 0;
  return $0_1 | 0;
 }
 
 function $1055($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $7_1 = 0, $7$hi = 0, $6_1 = 0, $53$hi = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        if (($0_1 | 0) == ($1_1 | 0)) {
         break label$6
        }
        label$7 : {
         $5_1 = HEAPU8[$0_1 >> 0] | 0;
         if (($5_1 | 0) != (45 | 0)) {
          break label$7
         }
         $0_1 = $0_1 + 1 | 0;
         if (($0_1 | 0) != ($1_1 | 0)) {
          break label$7
         }
         HEAP32[$2_1 >> 2] = 4;
         break label$5;
        }
        $6_1 = HEAP32[($587() | 0) >> 2] | 0;
        HEAP32[($587() | 0) >> 2] = 0;
        i64toi32_i32$0 = $999($0_1 | 0, $4_1 + 12 | 0 | 0, $3_1 | 0, $1073() | 0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $7_1 = i64toi32_i32$0;
        $7$hi = i64toi32_i32$1;
        label$8 : {
         label$9 : {
          $0_1 = HEAP32[($587() | 0) >> 2] | 0;
          if (!$0_1) {
           break label$9
          }
          if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
           break label$8
          }
          if (($0_1 | 0) == (68 | 0)) {
           break label$3
          }
          break label$4;
         }
         HEAP32[($587() | 0) >> 2] = $6_1;
         if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
          break label$4
         }
        }
        HEAP32[$2_1 >> 2] = 4;
        break label$5;
       }
       HEAP32[$2_1 >> 2] = 4;
      }
      $0_1 = 0;
      break label$1;
     }
     i64toi32_i32$1 = $7$hi;
     i64toi32_i32$1 = 0;
     $53$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $7$hi;
     i64toi32_i32$0 = $53$hi;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & $7_1 >>> 0 <= ($1371() | 0) >>> 0 | 0) | 0) {
      break label$2
     }
    }
    HEAP32[$2_1 >> 2] = 4;
    $0_1 = $1371() | 0;
    break label$1;
   }
   $0_1 = $7_1;
   $0_1 = ($5_1 | 0) == (45 | 0) ? 0 - $0_1 | 0 : $0_1;
  }
  global$0 = $4_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1056($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1057($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $1057($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$0 = 0, $7_1 = 0, i64toi32_i32$1 = 0, $114_1 = 0;
  $6_1 = global$0 - 272 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 256 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 264 | 0) >> 2] = $1_1;
  $1_1 = $1034($3_1 | 0) | 0;
  $2_1 = $1035($0_1 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0) | 0;
  $1036($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 255 | 0 | 0);
  $3_1 = $1037($6_1 + 192 | 0 | 0) | 0;
  $1039($3_1 | 0, $1038($3_1 | 0) | 0 | 0);
  $0_1 = $1040($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!($778($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($0_1 + ($1028($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $1028($3_1 | 0) | 0;
     $1039($3_1 | 0, ($1028($3_1 | 0) | 0) << 1 | 0 | 0);
     $1039($3_1 | 0, $1038($3_1 | 0) | 0 | 0);
     $0_1 = $1040($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $0_1 | 0;
    }
    if ($1041($779($6_1 + 264 | 0 | 0) | 0 | 0, $1_1 | 0, $0_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP8[($6_1 + 255 | 0) >> 0] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0) | 0) {
     break label$1
    }
    $781($6_1 + 264 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($1028($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  i64toi32_i32$0 = $1058($0_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $114_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1;
  HEAP32[i64toi32_i32$0 >> 2] = $114_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $1043($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($782($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $0_1 = HEAP32[($6_1 + 264 | 0) >> 2] | 0;
  $2058($3_1 | 0) | 0;
  $2058($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 272 | 0;
  return $0_1 | 0;
 }
 
 function $1058($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $7$hi = 0, $7_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, $4_1 = 0, i64toi32_i32$3 = 0, $5_1 = 0, $6_1 = 0, $51$hi = 0, $57$hi = 0, $16_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        if (($0_1 | 0) == ($1_1 | 0)) {
         break label$6
        }
        label$7 : {
         $5_1 = HEAPU8[$0_1 >> 0] | 0;
         if (($5_1 | 0) != (45 | 0)) {
          break label$7
         }
         $0_1 = $0_1 + 1 | 0;
         if (($0_1 | 0) != ($1_1 | 0)) {
          break label$7
         }
         HEAP32[$2_1 >> 2] = 4;
         break label$5;
        }
        $6_1 = HEAP32[($587() | 0) >> 2] | 0;
        HEAP32[($587() | 0) >> 2] = 0;
        i64toi32_i32$0 = $999($0_1 | 0, $4_1 + 12 | 0 | 0, $3_1 | 0, $1073() | 0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $7_1 = i64toi32_i32$0;
        $7$hi = i64toi32_i32$1;
        label$8 : {
         label$9 : {
          $0_1 = HEAP32[($587() | 0) >> 2] | 0;
          if (!$0_1) {
           break label$9
          }
          if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
           break label$8
          }
          if (($0_1 | 0) == (68 | 0)) {
           break label$3
          }
          break label$4;
         }
         HEAP32[($587() | 0) >> 2] = $6_1;
         if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
          break label$4
         }
        }
        HEAP32[$2_1 >> 2] = 4;
        break label$5;
       }
       HEAP32[$2_1 >> 2] = 4;
      }
      i64toi32_i32$1 = 0;
      $7_1 = 0;
      $7$hi = i64toi32_i32$1;
      break label$1;
     }
     i64toi32_i32$1 = $1973() | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $51$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $7$hi;
     i64toi32_i32$0 = $51$hi;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$1 = $7$hi;
     i64toi32_i32$3 = $7_1;
     if (i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 >= $7_1 >>> 0 | 0) | 0) {
      break label$2
     }
    }
    HEAP32[$2_1 >> 2] = 4;
    i64toi32_i32$2 = $1973() | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $7_1 = i64toi32_i32$2;
    $7$hi = i64toi32_i32$0;
    break label$1;
   }
   i64toi32_i32$0 = $7$hi;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 0;
   i64toi32_i32$2 = $7$hi;
   i64toi32_i32$1 = $7_1;
   i64toi32_i32$5 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) + $7$hi | 0;
   i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
   $57$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $7$hi;
   i64toi32_i32$2 = ($5_1 | 0) == (45 | 0);
   i64toi32_i32$5 = $57$hi;
   $16_1 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
   i64toi32_i32$3 = $7$hi;
   i64toi32_i32$1 = i64toi32_i32$2 ? $16_1 : i64toi32_i32$1;
   i64toi32_i32$0 = i64toi32_i32$2 ? i64toi32_i32$5 : $7$hi;
   $7_1 = i64toi32_i32$1;
   $7$hi = i64toi32_i32$0;
  }
  global$0 = $4_1 + 16 | 0;
  i64toi32_i32$0 = $7$hi;
  i64toi32_i32$1 = $7_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function $1059($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1060($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $1060($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 272 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 256 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 264 | 0) >> 2] = $1_1;
  $1061($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0, $6_1 + 223 | 0 | 0, $6_1 + 222 | 0 | 0);
  $3_1 = $1037($6_1 + 192 | 0 | 0) | 0;
  $1039($3_1 | 0, $1038($3_1 | 0) | 0 | 0);
  $1_1 = $1040($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  HEAP8[($6_1 + 7 | 0) >> 0] = 1;
  HEAP8[($6_1 + 6 | 0) >> 0] = 69;
  label$1 : {
   label$2 : while (1) {
    if (!($778($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($1_1 + ($1028($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $2_1 = $1028($3_1 | 0) | 0;
     $1039($3_1 | 0, ($1028($3_1 | 0) | 0) << 1 | 0 | 0);
     $1039($3_1 | 0, $1038($3_1 | 0) | 0 | 0);
     $1_1 = $1040($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $2_1 + $1_1 | 0;
    }
    if ($1062($779($6_1 + 264 | 0 | 0) | 0 | 0, $6_1 + 7 | 0 | 0, $6_1 + 6 | 0 | 0, $1_1 | 0, $6_1 + 188 | 0 | 0, HEAP8[($6_1 + 223 | 0) >> 0] | 0 | 0, HEAP8[($6_1 + 222 | 0) >> 0] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $6_1 + 8 | 0 | 0, $6_1 + 224 | 0 | 0) | 0) {
     break label$1
    }
    $781($6_1 + 264 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($1028($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   if (!((HEAPU8[($6_1 + 7 | 0) >> 0] | 0) & 255 | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAPF32[$5_1 >> 2] = Math_fround($1063($1_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0));
  $1043($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($782($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $1_1 = HEAP32[($6_1 + 264 | 0) >> 2] | 0;
  $2058($3_1 | 0) | 0;
  $2058($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 272 | 0;
  return $1_1 | 0;
 }
 
 function $1061($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $774($5_1 + 8 | 0 | 0, $1_1 | 0);
  $1071($775($5_1 + 8 | 0 | 0) | 0 | 0, 14416 | 0, 14448 | 0, $2_1 | 0) | 0;
  $2_1 = $1019($5_1 + 8 | 0 | 0) | 0;
  HEAP8[$3_1 >> 0] = $1121($2_1 | 0) | 0;
  HEAP8[$4_1 >> 0] = $1122($2_1 | 0) | 0;
  $1123($0_1 | 0, $2_1 | 0);
  $1018($5_1 + 8 | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
 }
 
 function $1062($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  $11_1 = $11_1 | 0;
  var $12_1 = 0;
  $12_1 = global$0 - 16 | 0;
  global$0 = $12_1;
  HEAP8[($12_1 + 15 | 0) >> 0] = $0_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (($0_1 | 0) != ($5_1 | 0)) {
      break label$3
     }
     if (!(HEAPU8[$1_1 >> 0] | 0)) {
      break label$2
     }
     $0_1 = 0;
     HEAP8[$1_1 >> 0] = 0;
     $11_1 = HEAP32[$4_1 >> 2] | 0;
     HEAP32[$4_1 >> 2] = $11_1 + 1 | 0;
     HEAP8[$11_1 >> 0] = 46;
     if (!($1028($7_1 | 0) | 0)) {
      break label$1
     }
     $11_1 = HEAP32[$9_1 >> 2] | 0;
     if (($11_1 - $8_1 | 0 | 0) > (159 | 0)) {
      break label$1
     }
     $5_1 = HEAP32[$10_1 >> 2] | 0;
     HEAP32[$9_1 >> 2] = $11_1 + 4 | 0;
     HEAP32[$11_1 >> 2] = $5_1;
     break label$1;
    }
    label$4 : {
     if (($0_1 | 0) != ($6_1 | 0)) {
      break label$4
     }
     if (!($1028($7_1 | 0) | 0)) {
      break label$4
     }
     if (!(HEAPU8[$1_1 >> 0] | 0)) {
      break label$2
     }
     $0_1 = 0;
     $11_1 = HEAP32[$9_1 >> 2] | 0;
     if (($11_1 - $8_1 | 0 | 0) > (159 | 0)) {
      break label$1
     }
     $0_1 = HEAP32[$10_1 >> 2] | 0;
     HEAP32[$9_1 >> 2] = $11_1 + 4 | 0;
     HEAP32[$11_1 >> 2] = $0_1;
     $0_1 = 0;
     HEAP32[$10_1 >> 2] = 0;
     break label$1;
    }
    $0_1 = -1;
    $11_1 = ($1124($11_1 | 0, $11_1 + 32 | 0 | 0, $12_1 + 15 | 0 | 0) | 0) - $11_1 | 0;
    if (($11_1 | 0) > (31 | 0)) {
     break label$1
    }
    $5_1 = HEAPU8[($11_1 + 14416 | 0) >> 0] | 0;
    label$5 : {
     label$6 : {
      switch ($11_1 + -22 | 0 | 0) {
      case 2:
      case 3:
       label$9 : {
        $11_1 = HEAP32[$4_1 >> 2] | 0;
        if (($11_1 | 0) == ($3_1 | 0)) {
         break label$9
        }
        $0_1 = -1;
        if (((HEAPU8[($11_1 + -1 | 0) >> 0] | 0) & 95 | 0 | 0) != ((HEAPU8[$2_1 >> 0] | 0) & 127 | 0 | 0)) {
         break label$1
        }
       }
       HEAP32[$4_1 >> 2] = $11_1 + 1 | 0;
       HEAP8[$11_1 >> 0] = $5_1;
       $0_1 = 0;
       break label$1;
      case 0:
      case 1:
       HEAP8[$2_1 >> 0] = 80;
       break label$5;
      default:
       break label$6;
      };
     }
     $0_1 = HEAP8[$2_1 >> 0] | 0;
     if (($5_1 & 95 | 0 | 0) != ($0_1 | 0)) {
      break label$5
     }
     HEAP8[$2_1 >> 0] = $0_1 | 128 | 0;
     if (!(HEAPU8[$1_1 >> 0] | 0)) {
      break label$5
     }
     HEAP8[$1_1 >> 0] = 0;
     if (!($1028($7_1 | 0) | 0)) {
      break label$5
     }
     $0_1 = HEAP32[$9_1 >> 2] | 0;
     if (($0_1 - $8_1 | 0 | 0) > (159 | 0)) {
      break label$5
     }
     $1_1 = HEAP32[$10_1 >> 2] | 0;
     HEAP32[$9_1 >> 2] = $0_1 + 4 | 0;
     HEAP32[$0_1 >> 2] = $1_1;
    }
    $0_1 = HEAP32[$4_1 >> 2] | 0;
    HEAP32[$4_1 >> 2] = $0_1 + 1 | 0;
    HEAP8[$0_1 >> 0] = $5_1;
    $0_1 = 0;
    if (($11_1 | 0) > (21 | 0)) {
     break label$1
    }
    HEAP32[$10_1 >> 2] = (HEAP32[$10_1 >> 2] | 0) + 1 | 0;
    break label$1;
   }
   $0_1 = -1;
  }
  global$0 = $12_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1063($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $5_1 = Math_fround(0), $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (($0_1 | 0) == ($1_1 | 0)) {
      break label$3
     }
     $4_1 = HEAP32[($587() | 0) >> 2] | 0;
     HEAP32[($587() | 0) >> 2] = 0;
     $5_1 = Math_fround($1975($0_1 | 0, $3_1 + 12 | 0 | 0));
     label$4 : {
      label$5 : {
       $0_1 = HEAP32[($587() | 0) >> 2] | 0;
       if (!$0_1) {
        break label$5
       }
       if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
        break label$4
       }
       if (($0_1 | 0) != (68 | 0)) {
        break label$1
       }
       HEAP32[$2_1 >> 2] = 4;
       break label$1;
      }
      HEAP32[($587() | 0) >> 2] = $4_1;
      if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
       break label$1
      }
     }
     HEAP32[$2_1 >> 2] = 4;
     break label$2;
    }
    HEAP32[$2_1 >> 2] = 4;
   }
   $5_1 = Math_fround(0.0);
  }
  global$0 = $3_1 + 16 | 0;
  return Math_fround($5_1);
 }
 
 function $1064($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1065($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $1065($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 272 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 256 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 264 | 0) >> 2] = $1_1;
  $1061($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0, $6_1 + 223 | 0 | 0, $6_1 + 222 | 0 | 0);
  $3_1 = $1037($6_1 + 192 | 0 | 0) | 0;
  $1039($3_1 | 0, $1038($3_1 | 0) | 0 | 0);
  $1_1 = $1040($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  HEAP8[($6_1 + 7 | 0) >> 0] = 1;
  HEAP8[($6_1 + 6 | 0) >> 0] = 69;
  label$1 : {
   label$2 : while (1) {
    if (!($778($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($1_1 + ($1028($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $2_1 = $1028($3_1 | 0) | 0;
     $1039($3_1 | 0, ($1028($3_1 | 0) | 0) << 1 | 0 | 0);
     $1039($3_1 | 0, $1038($3_1 | 0) | 0 | 0);
     $1_1 = $1040($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $2_1 + $1_1 | 0;
    }
    if ($1062($779($6_1 + 264 | 0 | 0) | 0 | 0, $6_1 + 7 | 0 | 0, $6_1 + 6 | 0 | 0, $1_1 | 0, $6_1 + 188 | 0 | 0, HEAP8[($6_1 + 223 | 0) >> 0] | 0 | 0, HEAP8[($6_1 + 222 | 0) >> 0] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $6_1 + 8 | 0 | 0, $6_1 + 224 | 0 | 0) | 0) {
     break label$1
    }
    $781($6_1 + 264 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($1028($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   if (!((HEAPU8[($6_1 + 7 | 0) >> 0] | 0) & 255 | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAPF64[$5_1 >> 3] = +$1066($1_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0);
  $1043($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($782($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $1_1 = HEAP32[($6_1 + 264 | 0) >> 2] | 0;
  $2058($3_1 | 0) | 0;
  $2058($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 272 | 0;
  return $1_1 | 0;
 }
 
 function $1066($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $5_1 = 0.0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (($0_1 | 0) == ($1_1 | 0)) {
      break label$3
     }
     $4_1 = HEAP32[($587() | 0) >> 2] | 0;
     HEAP32[($587() | 0) >> 2] = 0;
     $5_1 = +$1976($0_1 | 0, $3_1 + 12 | 0 | 0);
     label$4 : {
      label$5 : {
       $0_1 = HEAP32[($587() | 0) >> 2] | 0;
       if (!$0_1) {
        break label$5
       }
       if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
        break label$4
       }
       if (($0_1 | 0) != (68 | 0)) {
        break label$1
       }
       HEAP32[$2_1 >> 2] = 4;
       break label$1;
      }
      HEAP32[($587() | 0) >> 2] = $4_1;
      if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
       break label$1
      }
     }
     HEAP32[$2_1 >> 2] = 4;
     break label$2;
    }
    HEAP32[$2_1 >> 2] = 4;
   }
   $5_1 = 0.0;
  }
  global$0 = $3_1 + 16 | 0;
  return +$5_1;
 }
 
 function $1067($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1068($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $1068($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $123_1 = 0, $126_1 = 0;
  $6_1 = global$0 - 288 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 272 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 280 | 0) >> 2] = $1_1;
  $1061($6_1 + 224 | 0 | 0, $3_1 | 0, $6_1 + 240 | 0 | 0, $6_1 + 239 | 0 | 0, $6_1 + 238 | 0 | 0);
  $3_1 = $1037($6_1 + 208 | 0 | 0) | 0;
  $1039($3_1 | 0, $1038($3_1 | 0) | 0 | 0);
  $1_1 = $1040($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 204 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $6_1 + 32 | 0;
  HEAP32[($6_1 + 24 | 0) >> 2] = 0;
  HEAP8[($6_1 + 23 | 0) >> 0] = 1;
  HEAP8[($6_1 + 22 | 0) >> 0] = 69;
  label$1 : {
   label$2 : while (1) {
    if (!($778($6_1 + 280 | 0 | 0, $6_1 + 272 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 204 | 0) >> 2] | 0 | 0) != ($1_1 + ($1028($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $2_1 = $1028($3_1 | 0) | 0;
     $1039($3_1 | 0, ($1028($3_1 | 0) | 0) << 1 | 0 | 0);
     $1039($3_1 | 0, $1038($3_1 | 0) | 0 | 0);
     $1_1 = $1040($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 204 | 0) >> 2] = $2_1 + $1_1 | 0;
    }
    if ($1062($779($6_1 + 280 | 0 | 0) | 0 | 0, $6_1 + 23 | 0 | 0, $6_1 + 22 | 0 | 0, $1_1 | 0, $6_1 + 204 | 0 | 0, HEAP8[($6_1 + 239 | 0) >> 0] | 0 | 0, HEAP8[($6_1 + 238 | 0) >> 0] | 0 | 0, $6_1 + 224 | 0 | 0, $6_1 + 32 | 0 | 0, $6_1 + 28 | 0 | 0, $6_1 + 24 | 0 | 0, $6_1 + 240 | 0 | 0) | 0) {
     break label$1
    }
    $781($6_1 + 280 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($1028($6_1 + 224 | 0 | 0) | 0)) {
    break label$4
   }
   if (!((HEAPU8[($6_1 + 23 | 0) >> 0] | 0) & 255 | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 32 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 28 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
  }
  $1069($6_1 | 0, $1_1 | 0, HEAP32[($6_1 + 204 | 0) >> 2] | 0 | 0, $4_1 | 0);
  i64toi32_i32$0 = HEAP32[$6_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
  $123_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1;
  HEAP32[i64toi32_i32$0 >> 2] = $123_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
  $126_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $5_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $126_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  $1043($6_1 + 224 | 0 | 0, $6_1 + 32 | 0 | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($782($6_1 + 280 | 0 | 0, $6_1 + 272 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $1_1 = HEAP32[($6_1 + 280 | 0) >> 2] | 0;
  $2058($3_1 | 0) | 0;
  $2058($6_1 + 224 | 0 | 0) | 0;
  global$0 = $6_1 + 288 | 0;
  return $1_1 | 0;
 }
 
 function $1069($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, $4_1 = 0, i64toi32_i32$1 = 0, $6_1 = 0, $6$hi = 0, $7_1 = 0, $7$hi = 0, $5_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (($1_1 | 0) == ($2_1 | 0)) {
      break label$3
     }
     $5_1 = HEAP32[($587() | 0) >> 2] | 0;
     HEAP32[($587() | 0) >> 2] = 0;
     $1977($4_1 | 0, $1_1 | 0, $4_1 + 28 | 0 | 0);
     i64toi32_i32$0 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
     $6_1 = i64toi32_i32$0;
     $6$hi = i64toi32_i32$1;
     i64toi32_i32$1 = HEAP32[$4_1 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
     $7_1 = i64toi32_i32$1;
     $7$hi = i64toi32_i32$0;
     label$4 : {
      label$5 : {
       $1_1 = HEAP32[($587() | 0) >> 2] | 0;
       if (!$1_1) {
        break label$5
       }
       if ((HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
        break label$4
       }
       if (($1_1 | 0) != (68 | 0)) {
        break label$1
       }
       HEAP32[$3_1 >> 2] = 4;
       break label$1;
      }
      HEAP32[($587() | 0) >> 2] = $5_1;
      if ((HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) == ($2_1 | 0)) {
       break label$1
      }
     }
     HEAP32[$3_1 >> 2] = 4;
     break label$2;
    }
    HEAP32[$3_1 >> 2] = 4;
   }
   i64toi32_i32$0 = 0;
   $7_1 = 0;
   $7$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   $6_1 = 0;
   $6$hi = i64toi32_i32$0;
  }
  i64toi32_i32$0 = $7$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $7_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $6$hi;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $6_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $4_1 + 32 | 0;
 }
 
 function $1070($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 272 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 256 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 264 | 0) >> 2] = $1_1;
  $2_1 = $1037($6_1 + 208 | 0 | 0) | 0;
  $774($6_1 + 16 | 0 | 0, $3_1 | 0);
  $1071($775($6_1 + 16 | 0 | 0) | 0 | 0, 14416 | 0, 14442 | 0, $6_1 + 224 | 0 | 0) | 0;
  $1018($6_1 + 16 | 0 | 0) | 0;
  $3_1 = $1037($6_1 + 192 | 0 | 0) | 0;
  $1039($3_1 | 0, $1038($3_1 | 0) | 0 | 0);
  $1_1 = $1040($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!($778($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($1_1 + ($1028($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $1028($3_1 | 0) | 0;
     $1039($3_1 | 0, ($1028($3_1 | 0) | 0) << 1 | 0 | 0);
     $1039($3_1 | 0, $1038($3_1 | 0) | 0 | 0);
     $1_1 = $1040($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $1_1 | 0;
    }
    if ($1041($779($6_1 + 264 | 0 | 0) | 0 | 0, 16 | 0, $1_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, 0 | 0, $2_1 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $6_1 + 224 | 0 | 0) | 0) {
     break label$1
    }
    $781($6_1 + 264 | 0 | 0) | 0;
    continue label$2;
   };
  }
  $1039($3_1 | 0, (HEAP32[($6_1 + 188 | 0) >> 2] | 0) - $1_1 | 0 | 0);
  $1_1 = $1072($3_1 | 0) | 0;
  $7_1 = $1073() | 0;
  HEAP32[$6_1 >> 2] = $5_1;
  label$4 : {
   if (($1074($1_1 | 0, $7_1 | 0, 14449 | 0, $6_1 | 0) | 0 | 0) == (1 | 0)) {
    break label$4
   }
   HEAP32[$4_1 >> 2] = 4;
  }
  label$5 : {
   if (!($782($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $1_1 = HEAP32[($6_1 + 264 | 0) >> 2] | 0;
  $2058($3_1 | 0) | 0;
  $2058($2_1 | 0) | 0;
  global$0 = $6_1 + 272 | 0;
  return $1_1 | 0;
 }
 
 function $1071($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1) | 0 | 0;
 }
 
 function $1072($0_1) {
  $0_1 = $0_1 | 0;
  return $1084($0_1 | 0) | 0 | 0;
 }
 
 function $1073() {
  label$1 : {
   if ((HEAPU8[(0 + 334784 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($2099(334784 | 0) | 0)) {
    break label$1
   }
   HEAP32[(0 + 334780 | 0) >> 2] = $972(2147483647 | 0, 14693 | 0, 0 | 0) | 0;
   $2107(334784 | 0);
  }
  return HEAP32[(0 + 334780 | 0) >> 2] | 0 | 0;
 }
 
 function $1074($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $3_1;
  $1_1 = $1082($4_1 | 0, $4_1 + 12 | 0 | 0) | 0;
  $0_1 = $962($0_1 | 0, $2_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $1083($1_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1075($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = $1799($0_1 | 0) | 0;
  $0_1 = 0;
  label$1 : while (1) {
   label$2 : {
    if (($0_1 | 0) != (3 | 0)) {
     break label$2
    }
    return;
   }
   HEAP32[($1_1 + ($0_1 << 2 | 0) | 0) >> 2] = 0;
   $0_1 = $0_1 + 1 | 0;
   continue label$1;
  };
 }
 
 function $1076($0_1) {
  $0_1 = $0_1 | 0;
  return (HEAPU8[(($1794($0_1 | 0) | 0) + 11 | 0) >> 0] | 0) >>> 7 | 0 | 0;
 }
 
 function $1077($0_1) {
  $0_1 = $0_1 | 0;
  return (HEAP32[(($1794($0_1 | 0) | 0) + 8 | 0) >> 2] | 0) & 2147483647 | 0 | 0;
 }
 
 function $1078($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!($1076($0_1 | 0) | 0)) {
    break label$1
   }
   return $1337($0_1 | 0) | 0 | 0;
  }
  return $1340($0_1 | 0) | 0 | 0;
 }
 
 function $1079($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[(($1794($0_1 | 0) | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $1080($0_1) {
  $0_1 = $0_1 | 0;
  return HEAPU8[(($1794($0_1 | 0) | 0) + 11 | 0) >> 0] | 0 | 0;
 }
 
 function $1081($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2_1 = (HEAPU8[$2_1 >> 0] | 0) & 255 | 0;
  label$1 : while (1) {
   label$2 : {
    label$3 : {
     if (($0_1 | 0) == ($1_1 | 0)) {
      break label$3
     }
     if ((HEAPU8[$0_1 >> 0] | 0 | 0) != ($2_1 | 0)) {
      break label$2
     }
     $1_1 = $0_1;
    }
    return $1_1 | 0;
   }
   $0_1 = $0_1 + 1 | 0;
   continue label$1;
  };
 }
 
 function $1082($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $994(HEAP32[$1_1 >> 2] | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1083($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   $994($1_1 | 0) | 0;
  }
  return $0_1 | 0;
 }
 
 function $1084($0_1) {
  $0_1 = $0_1 | 0;
  return $1201($1200($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1085($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (($773($3_1 | 0) | 0) & 1 | 0) {
     break label$2
    }
    HEAP32[$6_1 >> 2] = -1;
    $1_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $6_1) | 0;
    HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
    label$3 : {
     switch (HEAP32[$6_1 >> 2] | 0 | 0) {
     case 0:
      HEAP8[$5_1 >> 0] = 0;
      break label$1;
     case 1:
      HEAP8[$5_1 >> 0] = 1;
      break label$1;
     default:
      break label$3;
     };
    }
    HEAP8[$5_1 >> 0] = 1;
    HEAP32[$4_1 >> 2] = 4;
    break label$1;
   }
   $774($6_1 | 0, $3_1 | 0);
   $1_1 = $819($6_1 | 0) | 0;
   $1018($6_1 | 0) | 0;
   $774($6_1 | 0, $3_1 | 0);
   $3_1 = $1086($6_1 | 0) | 0;
   $1018($6_1 | 0) | 0;
   $1087($6_1 | 0, $3_1 | 0);
   $1088($6_1 | 12 | 0 | 0, $3_1 | 0);
   $3_1 = $6_1 + 24 | 0;
   HEAP8[$5_1 >> 0] = ($1089($6_1 + 24 | 0 | 0, $2_1 | 0, $6_1 | 0, $3_1 | 0, $1_1 | 0, $4_1 | 0, 1 | 0) | 0 | 0) == ($6_1 | 0);
   $1_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
   label$6 : while (1) {
    $3_1 = $2077($3_1 + -12 | 0 | 0) | 0;
    if (($3_1 | 0) != ($6_1 | 0)) {
     continue label$6
    }
    break label$6;
   };
  }
  global$0 = $6_1 + 32 | 0;
  return $1_1 | 0;
 }
 
 function $1086($0_1) {
  $0_1 = $0_1 | 0;
  return $1023($0_1 | 0, 334872 | 0) | 0 | 0;
 }
 
 function $1087($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1088($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1089($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $12_1 = 0, $7_1 = 0, $11_1 = 0, $8_1 = 0, $9_1 = 0, $13_1 = 0, $15_1 = 0, $14_1 = 0, $16_1 = 0, $17_1 = 0, $10_1 = 0;
  $7_1 = global$0 - 128 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 120 | 0) >> 2] = $1_1;
  $8_1 = $1090($2_1 | 0, $3_1 | 0) | 0;
  HEAP32[($7_1 + 16 | 0) >> 2] = 274;
  $9_1 = 0;
  $10_1 = $1025($7_1 + 8 | 0 | 0, 0 | 0, $7_1 + 16 | 0 | 0) | 0;
  $11_1 = $7_1 + 16 | 0;
  label$1 : {
   label$2 : {
    if ($8_1 >>> 0 < 101 >>> 0) {
     break label$2
    }
    $11_1 = $2160($8_1 | 0) | 0;
    if (!$11_1) {
     break label$1
    }
    $1026($10_1 | 0, $11_1 | 0);
   }
   $12_1 = $11_1;
   $1_1 = $2_1;
   label$3 : while (1) {
    label$4 : {
     if (($1_1 | 0) != ($3_1 | 0)) {
      break label$4
     }
     $13_1 = 0;
     label$5 : {
      label$6 : while (1) {
       $1_1 = $820($0_1 | 0, $7_1 + 120 | 0 | 0) | 0;
       label$7 : {
        label$8 : {
         if (!$8_1) {
          break label$8
         }
         if ($1_1) {
          break label$7
         }
        }
        label$9 : {
         if (!($824($0_1 | 0, $7_1 + 120 | 0 | 0) | 0)) {
          break label$9
         }
         HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 2 | 0;
        }
        break label$5;
       }
       $14_1 = $821($0_1 | 0) | 0;
       label$10 : {
        if ($6_1) {
         break label$10
        }
        $14_1 = $1091($4_1 | 0, $14_1 | 0) | 0;
       }
       $15_1 = $13_1 + 1 | 0;
       $16_1 = 0;
       $12_1 = $11_1;
       $1_1 = $2_1;
       label$11 : while (1) {
        label$12 : {
         if (($1_1 | 0) != ($3_1 | 0)) {
          break label$12
         }
         $13_1 = $15_1;
         if (!($16_1 & 1 | 0)) {
          continue label$6
         }
         $823($0_1 | 0) | 0;
         $13_1 = $15_1;
         $12_1 = $11_1;
         $1_1 = $2_1;
         if (($9_1 + $8_1 | 0) >>> 0 < 2 >>> 0) {
          continue label$6
         }
         label$13 : while (1) {
          label$14 : {
           if (($1_1 | 0) != ($3_1 | 0)) {
            break label$14
           }
           $13_1 = $15_1;
           continue label$6;
          }
          label$15 : {
           if ((HEAPU8[$12_1 >> 0] | 0 | 0) != (2 | 0)) {
            break label$15
           }
           if (($1092($1_1 | 0) | 0 | 0) == ($15_1 | 0)) {
            break label$15
           }
           HEAP8[$12_1 >> 0] = 0;
           $9_1 = $9_1 + -1 | 0;
          }
          $12_1 = $12_1 + 1 | 0;
          $1_1 = $1_1 + 12 | 0;
          continue label$13;
         };
        }
        label$16 : {
         if ((HEAPU8[$12_1 >> 0] | 0 | 0) != (1 | 0)) {
          break label$16
         }
         $17_1 = HEAP32[($1093($1_1 | 0, $13_1 | 0) | 0) >> 2] | 0;
         label$17 : {
          if ($6_1) {
           break label$17
          }
          $17_1 = $1091($4_1 | 0, $17_1 | 0) | 0;
         }
         label$18 : {
          label$19 : {
           if (($14_1 | 0) != ($17_1 | 0)) {
            break label$19
           }
           $16_1 = 1;
           if (($1092($1_1 | 0) | 0 | 0) != ($15_1 | 0)) {
            break label$16
           }
           HEAP8[$12_1 >> 0] = 2;
           $16_1 = 1;
           $9_1 = $9_1 + 1 | 0;
           break label$18;
          }
          HEAP8[$12_1 >> 0] = 0;
         }
         $8_1 = $8_1 + -1 | 0;
        }
        $12_1 = $12_1 + 1 | 0;
        $1_1 = $1_1 + 12 | 0;
        continue label$11;
       };
      };
     }
     label$20 : {
      label$21 : {
       label$22 : while (1) {
        if (($2_1 | 0) == ($3_1 | 0)) {
         break label$21
        }
        label$23 : {
         if ((HEAPU8[$11_1 >> 0] | 0 | 0) == (2 | 0)) {
          break label$23
         }
         $11_1 = $11_1 + 1 | 0;
         $2_1 = $2_1 + 12 | 0;
         continue label$22;
        }
        break label$22;
       };
       $3_1 = $2_1;
       break label$20;
      }
      HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
     }
     $1030($10_1 | 0) | 0;
     global$0 = $7_1 + 128 | 0;
     return $3_1 | 0;
    }
    label$24 : {
     label$25 : {
      if ($1094($1_1 | 0) | 0) {
       break label$25
      }
      HEAP8[$12_1 >> 0] = 1;
      break label$24;
     }
     HEAP8[$12_1 >> 0] = 2;
     $9_1 = $9_1 + 1 | 0;
     $8_1 = $8_1 + -1 | 0;
    }
    $12_1 = $12_1 + 1 | 0;
    $1_1 = $1_1 + 12 | 0;
    continue label$3;
   };
  }
  $2029();
  abort();
 }
 
 function $1090($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1978($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1091($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1) | 0 | 0;
 }
 
 function $1092($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!($1230($0_1 | 0) | 0)) {
    break label$1
   }
   return $1231($0_1 | 0) | 0 | 0;
  }
  return $1232($0_1 | 0) | 0 | 0;
 }
 
 function $1093($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1227($0_1 | 0) | 0) + ($1_1 << 2 | 0) | 0 | 0;
 }
 
 function $1094($0_1) {
  $0_1 = $0_1 | 0;
  return !($1092($0_1 | 0) | 0) | 0;
 }
 
 function $1095($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1096($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $1096($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 352 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 336 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 344 | 0) >> 2] = $1_1;
  $1_1 = $1034($3_1 | 0) | 0;
  $2_1 = $1097($0_1 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0) | 0;
  $1098($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 332 | 0 | 0);
  $3_1 = $1037($6_1 + 192 | 0 | 0) | 0;
  $1039($3_1 | 0, $1038($3_1 | 0) | 0 | 0);
  $0_1 = $1040($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!($820($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($0_1 + ($1028($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $1028($3_1 | 0) | 0;
     $1039($3_1 | 0, ($1028($3_1 | 0) | 0) << 1 | 0 | 0);
     $1039($3_1 | 0, $1038($3_1 | 0) | 0 | 0);
     $0_1 = $1040($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $0_1 | 0;
    }
    if ($1099($821($6_1 + 344 | 0 | 0) | 0 | 0, $1_1 | 0, $0_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 332 | 0) >> 2] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0) | 0) {
     break label$1
    }
    $823($6_1 + 344 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($1028($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAP32[$5_1 >> 2] = $1042($0_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  $1043($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($824($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $0_1 = HEAP32[($6_1 + 344 | 0) >> 2] | 0;
  $2058($3_1 | 0) | 0;
  $2058($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 352 | 0;
  return $0_1 | 0;
 }
 
 function $1097($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1130($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $1098($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $774($3_1 + 8 | 0 | 0, $1_1 | 0);
  $1_1 = $1086($3_1 + 8 | 0 | 0) | 0;
  HEAP32[$2_1 >> 2] = $1127($1_1 | 0) | 0;
  $1128($0_1 | 0, $1_1 | 0);
  $1018($3_1 + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $1099($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var $10_1 = 0, $11_1 = 0;
  $10_1 = global$0 - 16 | 0;
  global$0 = $10_1;
  HEAP32[($10_1 + 12 | 0) >> 2] = $0_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if ((HEAP32[$3_1 >> 2] | 0 | 0) != ($2_1 | 0)) {
      break label$3
     }
     $11_1 = 43;
     label$4 : {
      if ((HEAP32[($9_1 + 96 | 0) >> 2] | 0 | 0) == ($0_1 | 0)) {
       break label$4
      }
      $11_1 = 45;
      if ((HEAP32[($9_1 + 100 | 0) >> 2] | 0 | 0) != ($0_1 | 0)) {
       break label$3
      }
     }
     HEAP32[$3_1 >> 2] = $2_1 + 1 | 0;
     HEAP8[$2_1 >> 0] = $11_1;
     break label$2;
    }
    label$5 : {
     if (!($1028($6_1 | 0) | 0)) {
      break label$5
     }
     if (($0_1 | 0) != ($5_1 | 0)) {
      break label$5
     }
     $0_1 = 0;
     $9_1 = HEAP32[$8_1 >> 2] | 0;
     if (($9_1 - $7_1 | 0 | 0) > (159 | 0)) {
      break label$1
     }
     $0_1 = HEAP32[$4_1 >> 2] | 0;
     HEAP32[$8_1 >> 2] = $9_1 + 4 | 0;
     HEAP32[$9_1 >> 2] = $0_1;
     break label$2;
    }
    $0_1 = -1;
    $9_1 = ($1120($9_1 | 0, $9_1 + 104 | 0 | 0, $10_1 + 12 | 0 | 0) | 0) - $9_1 | 0;
    if (($9_1 | 0) > (92 | 0)) {
     break label$1
    }
    $6_1 = $9_1 >> 2 | 0;
    label$6 : {
     label$7 : {
      switch ($1_1 + -8 | 0 | 0) {
      case 0:
      case 2:
       if (($6_1 | 0) < ($1_1 | 0)) {
        break label$6
       }
       break label$1;
      case 1:
       break label$6;
      default:
       break label$7;
      };
     }
     if (($1_1 | 0) != (16 | 0)) {
      break label$6
     }
     if (($9_1 | 0) < (88 | 0)) {
      break label$6
     }
     $9_1 = HEAP32[$3_1 >> 2] | 0;
     if (($9_1 | 0) == ($2_1 | 0)) {
      break label$1
     }
     if (($9_1 - $2_1 | 0 | 0) > (2 | 0)) {
      break label$1
     }
     $0_1 = -1;
     if ((HEAPU8[($9_1 + -1 | 0) >> 0] | 0 | 0) != (48 | 0)) {
      break label$1
     }
     $0_1 = 0;
     HEAP32[$4_1 >> 2] = 0;
     HEAP32[$3_1 >> 2] = $9_1 + 1 | 0;
     HEAP8[$9_1 >> 0] = HEAPU8[($6_1 + 14416 | 0) >> 0] | 0;
     break label$1;
    }
    $0_1 = HEAP32[$3_1 >> 2] | 0;
    HEAP32[$3_1 >> 2] = $0_1 + 1 | 0;
    HEAP8[$0_1 >> 0] = HEAPU8[($6_1 + 14416 | 0) >> 0] | 0;
    HEAP32[$4_1 >> 2] = (HEAP32[$4_1 >> 2] | 0) + 1 | 0;
    $0_1 = 0;
    break label$1;
   }
   $0_1 = 0;
   HEAP32[$4_1 >> 2] = 0;
  }
  global$0 = $10_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1100($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1101($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $1101($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$0 = 0, $7_1 = 0, i64toi32_i32$1 = 0, $114_1 = 0;
  $6_1 = global$0 - 352 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 336 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 344 | 0) >> 2] = $1_1;
  $1_1 = $1034($3_1 | 0) | 0;
  $2_1 = $1097($0_1 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0) | 0;
  $1098($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 332 | 0 | 0);
  $3_1 = $1037($6_1 + 192 | 0 | 0) | 0;
  $1039($3_1 | 0, $1038($3_1 | 0) | 0 | 0);
  $0_1 = $1040($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!($820($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($0_1 + ($1028($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $1028($3_1 | 0) | 0;
     $1039($3_1 | 0, ($1028($3_1 | 0) | 0) << 1 | 0 | 0);
     $1039($3_1 | 0, $1038($3_1 | 0) | 0 | 0);
     $0_1 = $1040($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $0_1 | 0;
    }
    if ($1099($821($6_1 + 344 | 0 | 0) | 0 | 0, $1_1 | 0, $0_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 332 | 0) >> 2] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0) | 0) {
     break label$1
    }
    $823($6_1 + 344 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($1028($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  i64toi32_i32$0 = $1046($0_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $114_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1;
  HEAP32[i64toi32_i32$0 >> 2] = $114_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $1043($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($824($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $0_1 = HEAP32[($6_1 + 344 | 0) >> 2] | 0;
  $2058($3_1 | 0) | 0;
  $2058($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 352 | 0;
  return $0_1 | 0;
 }
 
 function $1102($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1103($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $1103($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 352 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 336 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 344 | 0) >> 2] = $1_1;
  $1_1 = $1034($3_1 | 0) | 0;
  $2_1 = $1097($0_1 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0) | 0;
  $1098($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 332 | 0 | 0);
  $3_1 = $1037($6_1 + 192 | 0 | 0) | 0;
  $1039($3_1 | 0, $1038($3_1 | 0) | 0 | 0);
  $0_1 = $1040($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!($820($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($0_1 + ($1028($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $1028($3_1 | 0) | 0;
     $1039($3_1 | 0, ($1028($3_1 | 0) | 0) << 1 | 0 | 0);
     $1039($3_1 | 0, $1038($3_1 | 0) | 0 | 0);
     $0_1 = $1040($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $0_1 | 0;
    }
    if ($1099($821($6_1 + 344 | 0 | 0) | 0 | 0, $1_1 | 0, $0_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 332 | 0) >> 2] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0) | 0) {
     break label$1
    }
    $823($6_1 + 344 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($1028($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAP16[$5_1 >> 1] = $1049($0_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  $1043($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($824($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $0_1 = HEAP32[($6_1 + 344 | 0) >> 2] | 0;
  $2058($3_1 | 0) | 0;
  $2058($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 352 | 0;
  return $0_1 | 0;
 }
 
 function $1104($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1105($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $1105($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 352 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 336 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 344 | 0) >> 2] = $1_1;
  $1_1 = $1034($3_1 | 0) | 0;
  $2_1 = $1097($0_1 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0) | 0;
  $1098($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 332 | 0 | 0);
  $3_1 = $1037($6_1 + 192 | 0 | 0) | 0;
  $1039($3_1 | 0, $1038($3_1 | 0) | 0 | 0);
  $0_1 = $1040($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!($820($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($0_1 + ($1028($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $1028($3_1 | 0) | 0;
     $1039($3_1 | 0, ($1028($3_1 | 0) | 0) << 1 | 0 | 0);
     $1039($3_1 | 0, $1038($3_1 | 0) | 0 | 0);
     $0_1 = $1040($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $0_1 | 0;
    }
    if ($1099($821($6_1 + 344 | 0 | 0) | 0 | 0, $1_1 | 0, $0_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 332 | 0) >> 2] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0) | 0) {
     break label$1
    }
    $823($6_1 + 344 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($1028($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAP32[$5_1 >> 2] = $1052($0_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  $1043($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($824($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $0_1 = HEAP32[($6_1 + 344 | 0) >> 2] | 0;
  $2058($3_1 | 0) | 0;
  $2058($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 352 | 0;
  return $0_1 | 0;
 }
 
 function $1106($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1107($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $1107($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 352 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 336 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 344 | 0) >> 2] = $1_1;
  $1_1 = $1034($3_1 | 0) | 0;
  $2_1 = $1097($0_1 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0) | 0;
  $1098($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 332 | 0 | 0);
  $3_1 = $1037($6_1 + 192 | 0 | 0) | 0;
  $1039($3_1 | 0, $1038($3_1 | 0) | 0 | 0);
  $0_1 = $1040($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!($820($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($0_1 + ($1028($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $1028($3_1 | 0) | 0;
     $1039($3_1 | 0, ($1028($3_1 | 0) | 0) << 1 | 0 | 0);
     $1039($3_1 | 0, $1038($3_1 | 0) | 0 | 0);
     $0_1 = $1040($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $0_1 | 0;
    }
    if ($1099($821($6_1 + 344 | 0 | 0) | 0 | 0, $1_1 | 0, $0_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 332 | 0) >> 2] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0) | 0) {
     break label$1
    }
    $823($6_1 + 344 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($1028($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAP32[$5_1 >> 2] = $1055($0_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  $1043($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($824($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $0_1 = HEAP32[($6_1 + 344 | 0) >> 2] | 0;
  $2058($3_1 | 0) | 0;
  $2058($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 352 | 0;
  return $0_1 | 0;
 }
 
 function $1108($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1109($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $1109($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$0 = 0, $7_1 = 0, i64toi32_i32$1 = 0, $114_1 = 0;
  $6_1 = global$0 - 352 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 336 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 344 | 0) >> 2] = $1_1;
  $1_1 = $1034($3_1 | 0) | 0;
  $2_1 = $1097($0_1 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0) | 0;
  $1098($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 332 | 0 | 0);
  $3_1 = $1037($6_1 + 192 | 0 | 0) | 0;
  $1039($3_1 | 0, $1038($3_1 | 0) | 0 | 0);
  $0_1 = $1040($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!($820($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($0_1 + ($1028($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $1028($3_1 | 0) | 0;
     $1039($3_1 | 0, ($1028($3_1 | 0) | 0) << 1 | 0 | 0);
     $1039($3_1 | 0, $1038($3_1 | 0) | 0 | 0);
     $0_1 = $1040($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $0_1 | 0;
    }
    if ($1099($821($6_1 + 344 | 0 | 0) | 0 | 0, $1_1 | 0, $0_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 332 | 0) >> 2] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0) | 0) {
     break label$1
    }
    $823($6_1 + 344 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($1028($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  i64toi32_i32$0 = $1058($0_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $114_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1;
  HEAP32[i64toi32_i32$0 >> 2] = $114_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $1043($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($824($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $0_1 = HEAP32[($6_1 + 344 | 0) >> 2] | 0;
  $2058($3_1 | 0) | 0;
  $2058($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 352 | 0;
  return $0_1 | 0;
 }
 
 function $1110($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1111($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $1111($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 368 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 352 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 360 | 0) >> 2] = $1_1;
  $1112($6_1 + 200 | 0 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0, $6_1 + 220 | 0 | 0, $6_1 + 216 | 0 | 0);
  $3_1 = $1037($6_1 + 184 | 0 | 0) | 0;
  $1039($3_1 | 0, $1038($3_1 | 0) | 0 | 0);
  $1_1 = $1040($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 180 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  HEAP8[($6_1 + 7 | 0) >> 0] = 1;
  HEAP8[($6_1 + 6 | 0) >> 0] = 69;
  label$1 : {
   label$2 : while (1) {
    if (!($820($6_1 + 360 | 0 | 0, $6_1 + 352 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0) != ($1_1 + ($1028($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $2_1 = $1028($3_1 | 0) | 0;
     $1039($3_1 | 0, ($1028($3_1 | 0) | 0) << 1 | 0 | 0);
     $1039($3_1 | 0, $1038($3_1 | 0) | 0 | 0);
     $1_1 = $1040($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 180 | 0) >> 2] = $2_1 + $1_1 | 0;
    }
    if ($1113($821($6_1 + 360 | 0 | 0) | 0 | 0, $6_1 + 7 | 0 | 0, $6_1 + 6 | 0 | 0, $1_1 | 0, $6_1 + 180 | 0 | 0, HEAP32[($6_1 + 220 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 216 | 0) >> 2] | 0 | 0, $6_1 + 200 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $6_1 + 8 | 0 | 0, $6_1 + 224 | 0 | 0) | 0) {
     break label$1
    }
    $823($6_1 + 360 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($1028($6_1 + 200 | 0 | 0) | 0)) {
    break label$4
   }
   if (!((HEAPU8[($6_1 + 7 | 0) >> 0] | 0) & 255 | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAPF32[$5_1 >> 2] = Math_fround($1063($1_1 | 0, HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0, $4_1 | 0));
  $1043($6_1 + 200 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($824($6_1 + 360 | 0 | 0, $6_1 + 352 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $1_1 = HEAP32[($6_1 + 360 | 0) >> 2] | 0;
  $2058($3_1 | 0) | 0;
  $2058($6_1 + 200 | 0 | 0) | 0;
  global$0 = $6_1 + 368 | 0;
  return $1_1 | 0;
 }
 
 function $1112($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $774($5_1 + 8 | 0 | 0, $1_1 | 0);
  $1119($819($5_1 + 8 | 0 | 0) | 0 | 0, 14416 | 0, 14448 | 0, $2_1 | 0) | 0;
  $2_1 = $1086($5_1 + 8 | 0 | 0) | 0;
  HEAP32[$3_1 >> 2] = $1126($2_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = $1127($2_1 | 0) | 0;
  $1128($0_1 | 0, $2_1 | 0);
  $1018($5_1 + 8 | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
 }
 
 function $1113($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  $11_1 = $11_1 | 0;
  var $12_1 = 0;
  $12_1 = global$0 - 16 | 0;
  global$0 = $12_1;
  HEAP32[($12_1 + 12 | 0) >> 2] = $0_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (($0_1 | 0) != ($5_1 | 0)) {
      break label$3
     }
     if (!(HEAPU8[$1_1 >> 0] | 0)) {
      break label$2
     }
     $0_1 = 0;
     HEAP8[$1_1 >> 0] = 0;
     $11_1 = HEAP32[$4_1 >> 2] | 0;
     HEAP32[$4_1 >> 2] = $11_1 + 1 | 0;
     HEAP8[$11_1 >> 0] = 46;
     if (!($1028($7_1 | 0) | 0)) {
      break label$1
     }
     $11_1 = HEAP32[$9_1 >> 2] | 0;
     if (($11_1 - $8_1 | 0 | 0) > (159 | 0)) {
      break label$1
     }
     $5_1 = HEAP32[$10_1 >> 2] | 0;
     HEAP32[$9_1 >> 2] = $11_1 + 4 | 0;
     HEAP32[$11_1 >> 2] = $5_1;
     break label$1;
    }
    label$4 : {
     if (($0_1 | 0) != ($6_1 | 0)) {
      break label$4
     }
     if (!($1028($7_1 | 0) | 0)) {
      break label$4
     }
     if (!(HEAPU8[$1_1 >> 0] | 0)) {
      break label$2
     }
     $0_1 = 0;
     $11_1 = HEAP32[$9_1 >> 2] | 0;
     if (($11_1 - $8_1 | 0 | 0) > (159 | 0)) {
      break label$1
     }
     $0_1 = HEAP32[$10_1 >> 2] | 0;
     HEAP32[$9_1 >> 2] = $11_1 + 4 | 0;
     HEAP32[$11_1 >> 2] = $0_1;
     $0_1 = 0;
     HEAP32[$10_1 >> 2] = 0;
     break label$1;
    }
    $0_1 = -1;
    $11_1 = ($1129($11_1 | 0, $11_1 + 128 | 0 | 0, $12_1 + 12 | 0 | 0) | 0) - $11_1 | 0;
    if (($11_1 | 0) > (124 | 0)) {
     break label$1
    }
    $5_1 = HEAPU8[(($11_1 >> 2 | 0) + 14416 | 0) >> 0] | 0;
    label$5 : {
     label$6 : {
      switch (__wasm_rotl_i32($11_1 + -88 | 0 | 0, 30 | 0) | 0 | 0) {
      case 2:
      case 3:
       label$9 : {
        $11_1 = HEAP32[$4_1 >> 2] | 0;
        if (($11_1 | 0) == ($3_1 | 0)) {
         break label$9
        }
        $0_1 = -1;
        if (((HEAPU8[($11_1 + -1 | 0) >> 0] | 0) & 95 | 0 | 0) != ((HEAPU8[$2_1 >> 0] | 0) & 127 | 0 | 0)) {
         break label$1
        }
       }
       HEAP32[$4_1 >> 2] = $11_1 + 1 | 0;
       HEAP8[$11_1 >> 0] = $5_1;
       $0_1 = 0;
       break label$1;
      case 0:
      case 1:
       HEAP8[$2_1 >> 0] = 80;
       break label$5;
      default:
       break label$6;
      };
     }
     $0_1 = HEAP8[$2_1 >> 0] | 0;
     if (($5_1 & 95 | 0 | 0) != ($0_1 | 0)) {
      break label$5
     }
     HEAP8[$2_1 >> 0] = $0_1 | 128 | 0;
     if (!(HEAPU8[$1_1 >> 0] | 0)) {
      break label$5
     }
     HEAP8[$1_1 >> 0] = 0;
     if (!($1028($7_1 | 0) | 0)) {
      break label$5
     }
     $0_1 = HEAP32[$9_1 >> 2] | 0;
     if (($0_1 - $8_1 | 0 | 0) > (159 | 0)) {
      break label$5
     }
     $1_1 = HEAP32[$10_1 >> 2] | 0;
     HEAP32[$9_1 >> 2] = $0_1 + 4 | 0;
     HEAP32[$0_1 >> 2] = $1_1;
    }
    $0_1 = HEAP32[$4_1 >> 2] | 0;
    HEAP32[$4_1 >> 2] = $0_1 + 1 | 0;
    HEAP8[$0_1 >> 0] = $5_1;
    $0_1 = 0;
    if (($11_1 | 0) > (84 | 0)) {
     break label$1
    }
    HEAP32[$10_1 >> 2] = (HEAP32[$10_1 >> 2] | 0) + 1 | 0;
    break label$1;
   }
   $0_1 = -1;
  }
  global$0 = $12_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1114($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1115($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $1115($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 368 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 352 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 360 | 0) >> 2] = $1_1;
  $1112($6_1 + 200 | 0 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0, $6_1 + 220 | 0 | 0, $6_1 + 216 | 0 | 0);
  $3_1 = $1037($6_1 + 184 | 0 | 0) | 0;
  $1039($3_1 | 0, $1038($3_1 | 0) | 0 | 0);
  $1_1 = $1040($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 180 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  HEAP8[($6_1 + 7 | 0) >> 0] = 1;
  HEAP8[($6_1 + 6 | 0) >> 0] = 69;
  label$1 : {
   label$2 : while (1) {
    if (!($820($6_1 + 360 | 0 | 0, $6_1 + 352 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0) != ($1_1 + ($1028($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $2_1 = $1028($3_1 | 0) | 0;
     $1039($3_1 | 0, ($1028($3_1 | 0) | 0) << 1 | 0 | 0);
     $1039($3_1 | 0, $1038($3_1 | 0) | 0 | 0);
     $1_1 = $1040($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 180 | 0) >> 2] = $2_1 + $1_1 | 0;
    }
    if ($1113($821($6_1 + 360 | 0 | 0) | 0 | 0, $6_1 + 7 | 0 | 0, $6_1 + 6 | 0 | 0, $1_1 | 0, $6_1 + 180 | 0 | 0, HEAP32[($6_1 + 220 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 216 | 0) >> 2] | 0 | 0, $6_1 + 200 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $6_1 + 8 | 0 | 0, $6_1 + 224 | 0 | 0) | 0) {
     break label$1
    }
    $823($6_1 + 360 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($1028($6_1 + 200 | 0 | 0) | 0)) {
    break label$4
   }
   if (!((HEAPU8[($6_1 + 7 | 0) >> 0] | 0) & 255 | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAPF64[$5_1 >> 3] = +$1066($1_1 | 0, HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0, $4_1 | 0);
  $1043($6_1 + 200 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($824($6_1 + 360 | 0 | 0, $6_1 + 352 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $1_1 = HEAP32[($6_1 + 360 | 0) >> 2] | 0;
  $2058($3_1 | 0) | 0;
  $2058($6_1 + 200 | 0 | 0) | 0;
  global$0 = $6_1 + 368 | 0;
  return $1_1 | 0;
 }
 
 function $1116($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1117($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $1117($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $123_1 = 0, $126_1 = 0;
  $6_1 = global$0 - 384 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 368 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 376 | 0) >> 2] = $1_1;
  $1112($6_1 + 216 | 0 | 0, $3_1 | 0, $6_1 + 240 | 0 | 0, $6_1 + 236 | 0 | 0, $6_1 + 232 | 0 | 0);
  $3_1 = $1037($6_1 + 200 | 0 | 0) | 0;
  $1039($3_1 | 0, $1038($3_1 | 0) | 0 | 0);
  $1_1 = $1040($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 196 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $6_1 + 32 | 0;
  HEAP32[($6_1 + 24 | 0) >> 2] = 0;
  HEAP8[($6_1 + 23 | 0) >> 0] = 1;
  HEAP8[($6_1 + 22 | 0) >> 0] = 69;
  label$1 : {
   label$2 : while (1) {
    if (!($820($6_1 + 376 | 0 | 0, $6_1 + 368 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 196 | 0) >> 2] | 0 | 0) != ($1_1 + ($1028($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $2_1 = $1028($3_1 | 0) | 0;
     $1039($3_1 | 0, ($1028($3_1 | 0) | 0) << 1 | 0 | 0);
     $1039($3_1 | 0, $1038($3_1 | 0) | 0 | 0);
     $1_1 = $1040($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 196 | 0) >> 2] = $2_1 + $1_1 | 0;
    }
    if ($1113($821($6_1 + 376 | 0 | 0) | 0 | 0, $6_1 + 23 | 0 | 0, $6_1 + 22 | 0 | 0, $1_1 | 0, $6_1 + 196 | 0 | 0, HEAP32[($6_1 + 236 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 232 | 0) >> 2] | 0 | 0, $6_1 + 216 | 0 | 0, $6_1 + 32 | 0 | 0, $6_1 + 28 | 0 | 0, $6_1 + 24 | 0 | 0, $6_1 + 240 | 0 | 0) | 0) {
     break label$1
    }
    $823($6_1 + 376 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($1028($6_1 + 216 | 0 | 0) | 0)) {
    break label$4
   }
   if (!((HEAPU8[($6_1 + 23 | 0) >> 0] | 0) & 255 | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 32 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 28 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
  }
  $1069($6_1 | 0, $1_1 | 0, HEAP32[($6_1 + 196 | 0) >> 2] | 0 | 0, $4_1 | 0);
  i64toi32_i32$0 = HEAP32[$6_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
  $123_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1;
  HEAP32[i64toi32_i32$0 >> 2] = $123_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
  $126_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $5_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $126_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  $1043($6_1 + 216 | 0 | 0, $6_1 + 32 | 0 | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($824($6_1 + 376 | 0 | 0, $6_1 + 368 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $1_1 = HEAP32[($6_1 + 376 | 0) >> 2] | 0;
  $2058($3_1 | 0) | 0;
  $2058($6_1 + 216 | 0 | 0) | 0;
  global$0 = $6_1 + 384 | 0;
  return $1_1 | 0;
 }
 
 function $1118($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 352 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 336 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 344 | 0) >> 2] = $1_1;
  $2_1 = $1037($6_1 + 208 | 0 | 0) | 0;
  $774($6_1 + 16 | 0 | 0, $3_1 | 0);
  $1119($819($6_1 + 16 | 0 | 0) | 0 | 0, 14416 | 0, 14442 | 0, $6_1 + 224 | 0 | 0) | 0;
  $1018($6_1 + 16 | 0 | 0) | 0;
  $3_1 = $1037($6_1 + 192 | 0 | 0) | 0;
  $1039($3_1 | 0, $1038($3_1 | 0) | 0 | 0);
  $1_1 = $1040($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!($820($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($1_1 + ($1028($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $1028($3_1 | 0) | 0;
     $1039($3_1 | 0, ($1028($3_1 | 0) | 0) << 1 | 0 | 0);
     $1039($3_1 | 0, $1038($3_1 | 0) | 0 | 0);
     $1_1 = $1040($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $1_1 | 0;
    }
    if ($1099($821($6_1 + 344 | 0 | 0) | 0 | 0, 16 | 0, $1_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, 0 | 0, $2_1 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $6_1 + 224 | 0 | 0) | 0) {
     break label$1
    }
    $823($6_1 + 344 | 0 | 0) | 0;
    continue label$2;
   };
  }
  $1039($3_1 | 0, (HEAP32[($6_1 + 188 | 0) >> 2] | 0) - $1_1 | 0 | 0);
  $1_1 = $1072($3_1 | 0) | 0;
  $7_1 = $1073() | 0;
  HEAP32[$6_1 >> 2] = $5_1;
  label$4 : {
   if (($1074($1_1 | 0, $7_1 | 0, 14449 | 0, $6_1 | 0) | 0 | 0) == (1 | 0)) {
    break label$4
   }
   HEAP32[$4_1 >> 2] = 4;
  }
  label$5 : {
   if (!($824($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $1_1 = HEAP32[($6_1 + 344 | 0) >> 2] | 0;
  $2058($3_1 | 0) | 0;
  $2058($2_1 | 0) | 0;
  global$0 = $6_1 + 352 | 0;
  return $1_1 | 0;
 }
 
 function $1119($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1) | 0 | 0;
 }
 
 function $1120($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2_1 = HEAP32[$2_1 >> 2] | 0;
  label$1 : while (1) {
   label$2 : {
    label$3 : {
     if (($0_1 | 0) == ($1_1 | 0)) {
      break label$3
     }
     if ((HEAP32[$0_1 >> 2] | 0 | 0) != ($2_1 | 0)) {
      break label$2
     }
     $1_1 = $0_1;
    }
    return $1_1 | 0;
   }
   $0_1 = $0_1 + 4 | 0;
   continue label$1;
  };
 }
 
 function $1121($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1122($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1123($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1124($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2_1 = (HEAPU8[$2_1 >> 0] | 0) & 255 | 0;
  label$1 : while (1) {
   label$2 : {
    label$3 : {
     if (($0_1 | 0) == ($1_1 | 0)) {
      break label$3
     }
     if ((HEAPU8[$0_1 >> 0] | 0 | 0) != ($2_1 | 0)) {
      break label$2
     }
     $1_1 = $0_1;
    }
    return $1_1 | 0;
   }
   $0_1 = $0_1 + 1 | 0;
   continue label$1;
  };
 }
 
 function $1125($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return 14416 | 0;
 }
 
 function $1126($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1127($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1128($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1129($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2_1 = HEAP32[$2_1 >> 2] | 0;
  label$1 : while (1) {
   label$2 : {
    label$3 : {
     if (($0_1 | 0) == ($1_1 | 0)) {
      break label$3
     }
     if ((HEAP32[$0_1 >> 2] | 0 | 0) != ($2_1 | 0)) {
      break label$2
     }
     $1_1 = $0_1;
    }
    return $1_1 | 0;
   }
   $0_1 = $0_1 + 4 | 0;
   continue label$1;
  };
 }
 
 function $1130($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $774($3_1 + 8 | 0 | 0, $1_1 | 0);
  $1119($819($3_1 + 8 | 0 | 0) | 0 | 0, 14416 | 0, 14442 | 0, $2_1 | 0) | 0;
  $1018($3_1 + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1131($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (($773($2_1 | 0) | 0) & 1 | 0) {
     break label$2
    }
    $2_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1) | 0;
    break label$1;
   }
   $774($5_1 + 24 | 0 | 0, $2_1 | 0);
   $2_1 = $1019($5_1 + 24 | 0 | 0) | 0;
   $1018($5_1 + 24 | 0 | 0) | 0;
   label$3 : {
    label$4 : {
     if (!$4_1) {
      break label$4
     }
     $1020($5_1 + 24 | 0 | 0, $2_1 | 0);
     break label$3;
    }
    $1021($5_1 + 24 | 0 | 0, $2_1 | 0);
   }
   HEAP32[($5_1 + 16 | 0) >> 2] = $1132($5_1 + 24 | 0 | 0) | 0;
   label$5 : while (1) {
    HEAP32[($5_1 + 8 | 0) >> 2] = $1133($5_1 + 24 | 0 | 0) | 0;
    label$6 : {
     if ($1134($5_1 + 16 | 0 | 0, $5_1 + 8 | 0 | 0) | 0) {
      break label$6
     }
     $2_1 = HEAP32[($5_1 + 40 | 0) >> 2] | 0;
     $2058($5_1 + 24 | 0 | 0) | 0;
     break label$1;
    }
    $2_1 = HEAP8[($1135($5_1 + 16 | 0 | 0) | 0) >> 0] | 0;
    $849($848($5_1 + 40 | 0 | 0) | 0 | 0, $2_1 | 0) | 0;
    $1136($5_1 + 16 | 0 | 0) | 0;
    $850($5_1 + 40 | 0 | 0) | 0;
    continue label$5;
   };
  }
  global$0 = $5_1 + 48 | 0;
  return $2_1 | 0;
 }
 
 function $1132($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0_1 = HEAP32[($1137($1_1 + 8 | 0 | 0, $1078($0_1 | 0) | 0 | 0) | 0) >> 2] | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1133($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0_1 = HEAP32[($1137($1_1 + 8 | 0 | 0, ($1078($0_1 | 0) | 0) + ($1028($0_1 | 0) | 0) | 0 | 0) | 0) >> 2] | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1134($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1138($0_1 | 0, $1_1 | 0) | 0) ^ 1 | 0 | 0;
 }
 
 function $1135($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1136($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + 1 | 0;
  return $0_1 | 0;
 }
 
 function $1137($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $1138($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1365($0_1 | 0) | 0 | 0) == ($1365($1_1 | 0) | 0 | 0) | 0;
 }
 
 function $1139($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $6_1 = 0, $8_1 = 0, $11_1 = 0, $7_1 = 0, $10_1 = 0, $5_1 = 0, $12_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  $6_1 = $5_1;
  $12_1 = 0;
  HEAP16[($6_1 + 28 | 0) >> 1] = HEAPU8[($12_1 + 14464 | 0) >> 0] | 0 | ((HEAPU8[($12_1 + 14465 | 0) >> 0] | 0) << 8 | 0) | 0;
  $11_1 = 0;
  HEAP32[($6_1 + 24 | 0) >> 2] = HEAPU8[($11_1 + 14460 | 0) >> 0] | 0 | ((HEAPU8[($11_1 + 14461 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($11_1 + 14462 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($11_1 + 14463 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  $1140($6_1 + 24 | 0 | 1 | 0 | 0, 14452 | 0, 1 | 0, $773($2_1 | 0) | 0 | 0);
  $7_1 = $773($2_1 | 0) | 0;
  $8_1 = $6_1 + -16 | 0;
  global$0 = $8_1;
  $10_1 = $1073() | 0;
  HEAP32[$6_1 >> 2] = $4_1;
  $7_1 = $8_1 + ($1141($8_1 | 0, (($7_1 >>> 9 | 0) & 1 | 0) + 13 | 0 | 0, $10_1 | 0, $6_1 + 24 | 0 | 0, $6_1 | 0) | 0) | 0;
  $10_1 = $1142($8_1 | 0, $7_1 | 0, $2_1 | 0) | 0;
  $4_1 = $8_1 + -32 | 0;
  global$0 = $4_1;
  $774($6_1 + 8 | 0 | 0, $2_1 | 0);
  $1143($8_1 | 0, $10_1 | 0, $7_1 | 0, $4_1 | 0, $6_1 + 20 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 8 | 0 | 0);
  $1018($6_1 + 8 | 0 | 0) | 0;
  $2_1 = $184($1_1 | 0, $4_1 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $6_1 + 32 | 0;
  return $2_1 | 0;
 }
 
 function $1140($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  label$1 : {
   if (!($3_1 & 2048 | 0)) {
    break label$1
   }
   HEAP8[$0_1 >> 0] = 43;
   $0_1 = $0_1 + 1 | 0;
  }
  label$2 : {
   if (!($3_1 & 512 | 0)) {
    break label$2
   }
   HEAP8[$0_1 >> 0] = 35;
   $0_1 = $0_1 + 1 | 0;
  }
  label$3 : {
   label$4 : while (1) {
    $4_1 = HEAPU8[$1_1 >> 0] | 0;
    if (!$4_1) {
     break label$3
    }
    HEAP8[$0_1 >> 0] = $4_1;
    $0_1 = $0_1 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    continue label$4;
   };
  }
  label$5 : {
   label$6 : {
    $1_1 = $3_1 & 74 | 0;
    if (($1_1 | 0) != (64 | 0)) {
     break label$6
    }
    $1_1 = 111;
    break label$5;
   }
   label$7 : {
    if (($1_1 | 0) != (8 | 0)) {
     break label$7
    }
    $1_1 = $3_1 & 16384 | 0 ? 88 : 120;
    break label$5;
   }
   $1_1 = $2_1 ? 100 : 117;
  }
  HEAP8[$0_1 >> 0] = $1_1;
 }
 
 function $1141($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $4_1;
  $2_1 = $1082($5_1 | 0, $5_1 + 12 | 0 | 0) | 0;
  $0_1 = $627($0_1 | 0, $1_1 | 0, $3_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $1083($2_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1142($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   $2_1 = ($773($2_1 | 0) | 0) & 176 | 0;
   if (($2_1 | 0) != (32 | 0)) {
    break label$1
   }
   return $1_1 | 0;
  }
  label$2 : {
   if (($2_1 | 0) != (16 | 0)) {
    break label$2
   }
   label$3 : {
    label$4 : {
     $2_1 = HEAPU8[$0_1 >> 0] | 0;
     switch ($2_1 + -43 | 0 | 0) {
     case 0:
     case 2:
      break label$4;
     default:
      break label$3;
     };
    }
    return $0_1 + 1 | 0 | 0;
   }
   if (($1_1 - $0_1 | 0 | 0) < (2 | 0)) {
    break label$2
   }
   if (($2_1 | 0) != (48 | 0)) {
    break label$2
   }
   if ((HEAPU8[($0_1 + 1 | 0) >> 0] | 0 | 32 | 0 | 0) != (120 | 0)) {
    break label$2
   }
   $0_1 = $0_1 + 2 | 0;
  }
  return $0_1 | 0;
 }
 
 function $1143($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $10_1 = 0, $11_1 = 0, $9_1 = 0, $7_1 = 0, $8_1 = 0, $14_1 = 0, $12_1 = 0, $13_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  $8_1 = $775($6_1 | 0) | 0;
  $6_1 = $1019($6_1 | 0) | 0;
  $1123($7_1 | 0, $6_1 | 0);
  label$1 : {
   label$2 : {
    if (!($1031($7_1 | 0) | 0)) {
     break label$2
    }
    $1071($8_1 | 0, $0_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
    $6_1 = $3_1 + ($2_1 - $0_1 | 0) | 0;
    HEAP32[$5_1 >> 2] = $6_1;
    break label$1;
   }
   HEAP32[$5_1 >> 2] = $3_1;
   $9_1 = $0_1;
   label$3 : {
    label$4 : {
     $10_1 = HEAPU8[$9_1 >> 0] | 0;
     switch ($10_1 + -43 | 0 | 0) {
     case 0:
     case 2:
      break label$4;
     default:
      break label$3;
     };
    }
    $10_1 = $876($8_1 | 0, ($10_1 << 24 | 0) >> 24 | 0 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 1 | 0;
    HEAP8[$11_1 >> 0] = $10_1;
    $9_1 = $0_1 + 1 | 0;
   }
   label$5 : {
    if (($2_1 - $9_1 | 0 | 0) < (2 | 0)) {
     break label$5
    }
    if ((HEAPU8[$9_1 >> 0] | 0 | 0) != (48 | 0)) {
     break label$5
    }
    if ((HEAPU8[($9_1 + 1 | 0) >> 0] | 0 | 32 | 0 | 0) != (120 | 0)) {
     break label$5
    }
    $10_1 = $876($8_1 | 0, 48 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 1 | 0;
    HEAP8[$11_1 >> 0] = $10_1;
    $10_1 = $876($8_1 | 0, HEAP8[($9_1 + 1 | 0) >> 0] | 0 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 1 | 0;
    HEAP8[$11_1 >> 0] = $10_1;
    $9_1 = $9_1 + 2 | 0;
   }
   $1144($9_1 | 0, $2_1 | 0);
   $10_1 = 0;
   $12_1 = $1122($6_1 | 0) | 0;
   $11_1 = 0;
   $6_1 = $9_1;
   label$6 : while (1) {
    label$7 : {
     if ($6_1 >>> 0 < $2_1 >>> 0) {
      break label$7
     }
     $1144($3_1 + ($9_1 - $0_1 | 0) | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0);
     $6_1 = HEAP32[$5_1 >> 2] | 0;
     break label$1;
    }
    label$8 : {
     if (!(HEAPU8[($1040($7_1 | 0, $11_1 | 0) | 0) >> 0] | 0)) {
      break label$8
     }
     if (($10_1 | 0) != (HEAP8[($1040($7_1 | 0, $11_1 | 0) | 0) >> 0] | 0 | 0)) {
      break label$8
     }
     $10_1 = HEAP32[$5_1 >> 2] | 0;
     HEAP32[$5_1 >> 2] = $10_1 + 1 | 0;
     HEAP8[$10_1 >> 0] = $12_1;
     $11_1 = $11_1 + ($11_1 >>> 0 < (($1028($7_1 | 0) | 0) + -1 | 0) >>> 0) | 0;
     $10_1 = 0;
    }
    $13_1 = $876($8_1 | 0, HEAP8[$6_1 >> 0] | 0 | 0) | 0;
    $14_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $14_1 + 1 | 0;
    HEAP8[$14_1 >> 0] = $13_1;
    $6_1 = $6_1 + 1 | 0;
    $10_1 = $10_1 + 1 | 0;
    continue label$6;
   };
  }
  HEAP32[$4_1 >> 2] = ($1_1 | 0) == ($2_1 | 0) ? $6_1 : $3_1 + ($1_1 - $0_1 | 0) | 0;
  $2058($7_1 | 0) | 0;
  global$0 = $7_1 + 16 | 0;
 }
 
 function $1144($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1193($0_1 | 0, $1_1 | 0);
 }
 
 function $1145($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $1146($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $862($0_1 | 0, $3_1 + 8 | 0 | 0, $3_1 | 0) | 0;
  $2075($0_1 | 0, $1_1 | 0, $2_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1147($0_1) {
  $0_1 = $0_1 | 0;
  return $1862($1078($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1148($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
  return $2_1 | 0;
 }
 
 function $1149($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var $6_1 = 0, $8_1 = 0, $7_1 = 0, $10_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $11_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  $6_1 = $5_1;
  i64toi32_i32$0 = 0;
  HEAP32[($6_1 + 24 | 0) >> 2] = 37;
  HEAP32[($6_1 + 28 | 0) >> 2] = i64toi32_i32$0;
  $1140($6_1 + 24 | 0 | 1 | 0 | 0, 14454 | 0, 1 | 0, $773($2_1 | 0) | 0 | 0);
  $7_1 = $773($2_1 | 0) | 0;
  $8_1 = $6_1 + -32 | 0;
  global$0 = $8_1;
  $10_1 = $1073() | 0;
  i64toi32_i32$0 = $4$hi;
  HEAP32[$6_1 >> 2] = $4_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $10_1 = $8_1 + ($1141($8_1 | 0, (($7_1 >>> 9 | 0) & 1 | 0) + 23 | 0 | 0, $10_1 | 0, $6_1 + 24 | 0 | 0, $6_1 | 0) | 0) | 0;
  $11_1 = $1142($8_1 | 0, $10_1 | 0, $2_1 | 0) | 0;
  $7_1 = $8_1 + -48 | 0;
  global$0 = $7_1;
  $774($6_1 + 8 | 0 | 0, $2_1 | 0);
  $1143($8_1 | 0, $11_1 | 0, $10_1 | 0, $7_1 | 0, $6_1 + 20 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 8 | 0 | 0);
  $1018($6_1 + 8 | 0 | 0) | 0;
  $2_1 = $184($1_1 | 0, $7_1 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $6_1 + 32 | 0;
  return $2_1 | 0;
 }
 
 function $1150($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $6_1 = 0, $8_1 = 0, $11_1 = 0, $7_1 = 0, $10_1 = 0, $5_1 = 0, $12_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  $6_1 = $5_1;
  $12_1 = 0;
  HEAP16[($6_1 + 28 | 0) >> 1] = HEAPU8[($12_1 + 14464 | 0) >> 0] | 0 | ((HEAPU8[($12_1 + 14465 | 0) >> 0] | 0) << 8 | 0) | 0;
  $11_1 = 0;
  HEAP32[($6_1 + 24 | 0) >> 2] = HEAPU8[($11_1 + 14460 | 0) >> 0] | 0 | ((HEAPU8[($11_1 + 14461 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($11_1 + 14462 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($11_1 + 14463 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  $1140($6_1 + 24 | 0 | 1 | 0 | 0, 14452 | 0, 0 | 0, $773($2_1 | 0) | 0 | 0);
  $7_1 = $773($2_1 | 0) | 0;
  $8_1 = $6_1 + -16 | 0;
  global$0 = $8_1;
  $10_1 = $1073() | 0;
  HEAP32[$6_1 >> 2] = $4_1;
  $7_1 = $8_1 + ($1141($8_1 | 0, ($7_1 >>> 9 | 0) & 1 | 0 | 12 | 0 | 0, $10_1 | 0, $6_1 + 24 | 0 | 0, $6_1 | 0) | 0) | 0;
  $10_1 = $1142($8_1 | 0, $7_1 | 0, $2_1 | 0) | 0;
  $4_1 = $8_1 + -32 | 0;
  global$0 = $4_1;
  $774($6_1 + 8 | 0 | 0, $2_1 | 0);
  $1143($8_1 | 0, $10_1 | 0, $7_1 | 0, $4_1 | 0, $6_1 + 20 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 8 | 0 | 0);
  $1018($6_1 + 8 | 0 | 0) | 0;
  $2_1 = $184($1_1 | 0, $4_1 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $6_1 + 32 | 0;
  return $2_1 | 0;
 }
 
 function $1151($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var $6_1 = 0, $8_1 = 0, $7_1 = 0, $10_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $11_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  $6_1 = $5_1;
  i64toi32_i32$0 = 0;
  HEAP32[($6_1 + 24 | 0) >> 2] = 37;
  HEAP32[($6_1 + 28 | 0) >> 2] = i64toi32_i32$0;
  $1140($6_1 + 24 | 0 | 1 | 0 | 0, 14454 | 0, 0 | 0, $773($2_1 | 0) | 0 | 0);
  $7_1 = $773($2_1 | 0) | 0;
  $8_1 = $6_1 + -32 | 0;
  global$0 = $8_1;
  $10_1 = $1073() | 0;
  i64toi32_i32$0 = $4$hi;
  HEAP32[$6_1 >> 2] = $4_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $10_1 = $8_1 + ($1141($8_1 | 0, (($7_1 >>> 9 | 0) & 1 | 0) + 23 | 0 | 0, $10_1 | 0, $6_1 + 24 | 0 | 0, $6_1 | 0) | 0) | 0;
  $11_1 = $1142($8_1 | 0, $10_1 | 0, $2_1 | 0) | 0;
  $7_1 = $8_1 + -48 | 0;
  global$0 = $7_1;
  $774($6_1 + 8 | 0 | 0, $2_1 | 0);
  $1143($8_1 | 0, $11_1 | 0, $10_1 | 0, $7_1 | 0, $6_1 + 20 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 8 | 0 | 0);
  $1018($6_1 + 8 | 0 | 0) | 0;
  $2_1 = $184($1_1 | 0, $7_1 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $6_1 + 32 | 0;
  return $2_1 | 0;
 }
 
 function $1152($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = +$4_1;
  var $5_1 = 0, $7_1 = 0, $6_1 = 0, $8_1 = 0, $9_1 = 0, $11_1 = 0, $10_1 = 0;
  $5_1 = global$0 - 208 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 200 | 0) >> 2] = 37;
  HEAP32[($5_1 + 204 | 0) >> 2] = 0;
  $6_1 = $1153($5_1 + 200 | 0 | 1 | 0 | 0, 14457 | 0, $773($2_1 | 0) | 0 | 0) | 0;
  HEAP32[($5_1 + 156 | 0) >> 2] = $5_1 + 160 | 0;
  $7_1 = $1073() | 0;
  label$1 : {
   label$2 : {
    if (!$6_1) {
     break label$2
    }
    $8_1 = $1154($2_1 | 0) | 0;
    HEAPF64[($5_1 + 40 | 0) >> 3] = $4_1;
    HEAP32[($5_1 + 32 | 0) >> 2] = $8_1;
    $7_1 = $1141($5_1 + 160 | 0 | 0, 30 | 0, $7_1 | 0, $5_1 + 200 | 0 | 0, $5_1 + 32 | 0 | 0) | 0;
    break label$1;
   }
   HEAPF64[($5_1 + 48 | 0) >> 3] = $4_1;
   $7_1 = $1141($5_1 + 160 | 0 | 0, 30 | 0, $7_1 | 0, $5_1 + 200 | 0 | 0, $5_1 + 48 | 0 | 0) | 0;
  }
  HEAP32[($5_1 + 80 | 0) >> 2] = 274;
  $8_1 = $1155($5_1 + 144 | 0 | 0, 0 | 0, $5_1 + 80 | 0 | 0) | 0;
  label$3 : {
   label$4 : {
    if (($7_1 | 0) < (30 | 0)) {
     break label$4
    }
    $7_1 = $1073() | 0;
    label$5 : {
     label$6 : {
      if (!$6_1) {
       break label$6
      }
      $6_1 = $1154($2_1 | 0) | 0;
      HEAPF64[($5_1 + 8 | 0) >> 3] = $4_1;
      HEAP32[$5_1 >> 2] = $6_1;
      $7_1 = $1156($5_1 + 156 | 0 | 0, $7_1 | 0, $5_1 + 200 | 0 | 0, $5_1 | 0) | 0;
      break label$5;
     }
     HEAPF64[($5_1 + 16 | 0) >> 3] = $4_1;
     $7_1 = $1156($5_1 + 156 | 0 | 0, $7_1 | 0, $5_1 + 200 | 0 | 0, $5_1 + 16 | 0 | 0) | 0;
    }
    $6_1 = HEAP32[($5_1 + 156 | 0) >> 2] | 0;
    if (!$6_1) {
     break label$3
    }
    $1157($8_1 | 0, $6_1 | 0);
   }
   $6_1 = HEAP32[($5_1 + 156 | 0) >> 2] | 0;
   $9_1 = $6_1 + $7_1 | 0;
   $10_1 = $1142($6_1 | 0, $9_1 | 0, $2_1 | 0) | 0;
   HEAP32[($5_1 + 80 | 0) >> 2] = 274;
   $6_1 = $1155($5_1 + 72 | 0 | 0, 0 | 0, $5_1 + 80 | 0 | 0) | 0;
   label$7 : {
    label$8 : {
     if ((HEAP32[($5_1 + 156 | 0) >> 2] | 0 | 0) != ($5_1 + 160 | 0 | 0)) {
      break label$8
     }
     $7_1 = $5_1 + 80 | 0;
     $11_1 = $5_1 + 160 | 0;
     break label$7;
    }
    $7_1 = $2160($7_1 << 1 | 0 | 0) | 0;
    if (!$7_1) {
     break label$3
    }
    $1157($6_1 | 0, $7_1 | 0);
    $11_1 = HEAP32[($5_1 + 156 | 0) >> 2] | 0;
   }
   $774($5_1 + 56 | 0 | 0, $2_1 | 0);
   $1158($11_1 | 0, $10_1 | 0, $9_1 | 0, $7_1 | 0, $5_1 + 68 | 0 | 0, $5_1 + 64 | 0 | 0, $5_1 + 56 | 0 | 0);
   $1018($5_1 + 56 | 0 | 0) | 0;
   $2_1 = $184($1_1 | 0, $7_1 | 0, HEAP32[($5_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 64 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
   $1159($6_1 | 0) | 0;
   $1159($8_1 | 0) | 0;
   global$0 = $5_1 + 208 | 0;
   return $2_1 | 0;
  }
  $2029();
  abort();
 }
 
 function $1153($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  label$1 : {
   if (!($2_1 & 2048 | 0)) {
    break label$1
   }
   HEAP8[$0_1 >> 0] = 43;
   $0_1 = $0_1 + 1 | 0;
  }
  label$2 : {
   if (!($2_1 & 1024 | 0)) {
    break label$2
   }
   HEAP8[$0_1 >> 0] = 35;
   $0_1 = $0_1 + 1 | 0;
  }
  label$3 : {
   $3_1 = $2_1 & 260 | 0;
   if (($3_1 | 0) == (260 | 0)) {
    break label$3
   }
   $5_1 = 10798;
   HEAP8[$0_1 >> 0] = $5_1;
   HEAP8[($0_1 + 1 | 0) >> 0] = $5_1 >>> 8 | 0;
   $0_1 = $0_1 + 2 | 0;
  }
  $4_1 = $2_1 & 16384 | 0;
  label$4 : {
   label$5 : while (1) {
    $2_1 = HEAPU8[$1_1 >> 0] | 0;
    if (!$2_1) {
     break label$4
    }
    HEAP8[$0_1 >> 0] = $2_1;
    $0_1 = $0_1 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    continue label$5;
   };
  }
  label$6 : {
   label$7 : {
    label$8 : {
     if (($3_1 | 0) == (256 | 0)) {
      break label$8
     }
     if (($3_1 | 0) != (4 | 0)) {
      break label$7
     }
     $1_1 = $4_1 ? 70 : 102;
     break label$6;
    }
    $1_1 = $4_1 ? 69 : 101;
    break label$6;
   }
   label$9 : {
    if (($3_1 | 0) != (260 | 0)) {
     break label$9
    }
    $1_1 = $4_1 ? 65 : 97;
    break label$6;
   }
   $1_1 = $4_1 ? 71 : 103;
  }
  HEAP8[$0_1 >> 0] = $1_1;
  return ($3_1 | 0) != (260 | 0) | 0;
 }
 
 function $1154($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0;
 }
 
 function $1155($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
  $1160($0_1 | 0, $3_1 + 12 | 0 | 0, $869($2_1 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1156($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $3_1;
  $1_1 = $1082($4_1 | 0, $4_1 + 12 | 0 | 0) | 0;
  $0_1 = $973($0_1 | 0, $2_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $1083($1_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1157($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($1161($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($1161($0_1 | 0) | 0) >> 2] = $1_1;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($1162($0_1 | 0) | 0) >> 2] | 0 | 0]($2_1);
  }
 }
 
 function $1158($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $11_1 = 0, $10_1 = 0, $12_1 = 0, $7_1 = 0, $8_1 = 0, $14_1 = 0, $9_1 = 0, $16_1 = 0, $13_1 = 0, $15_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  $8_1 = $775($6_1 | 0) | 0;
  $9_1 = $1019($6_1 | 0) | 0;
  $1123($7_1 | 0, $9_1 | 0);
  HEAP32[$5_1 >> 2] = $3_1;
  $10_1 = $0_1;
  label$1 : {
   label$2 : {
    $6_1 = HEAPU8[$10_1 >> 0] | 0;
    switch ($6_1 + -43 | 0 | 0) {
    case 0:
    case 2:
     break label$2;
    default:
     break label$1;
    };
   }
   $6_1 = $876($8_1 | 0, ($6_1 << 24 | 0) >> 24 | 0 | 0) | 0;
   $11_1 = HEAP32[$5_1 >> 2] | 0;
   HEAP32[$5_1 >> 2] = $11_1 + 1 | 0;
   HEAP8[$11_1 >> 0] = $6_1;
   $10_1 = $0_1 + 1 | 0;
  }
  $6_1 = $10_1;
  label$3 : {
   label$4 : {
    if (($2_1 - $6_1 | 0 | 0) <= (1 | 0)) {
     break label$4
    }
    $6_1 = $10_1;
    if ((HEAPU8[$6_1 >> 0] | 0 | 0) != (48 | 0)) {
     break label$4
    }
    $6_1 = $10_1;
    if ((HEAPU8[($6_1 + 1 | 0) >> 0] | 0 | 32 | 0 | 0) != (120 | 0)) {
     break label$4
    }
    $6_1 = $876($8_1 | 0, 48 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 1 | 0;
    HEAP8[$11_1 >> 0] = $6_1;
    $6_1 = $876($8_1 | 0, HEAP8[($10_1 + 1 | 0) >> 0] | 0 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 1 | 0;
    HEAP8[$11_1 >> 0] = $6_1;
    $10_1 = $10_1 + 2 | 0;
    $6_1 = $10_1;
    label$5 : while (1) {
     if ($6_1 >>> 0 >= $2_1 >>> 0) {
      break label$3
     }
     if (!($975(HEAP8[$6_1 >> 0] | 0 | 0, $1073() | 0 | 0) | 0)) {
      break label$3
     }
     $6_1 = $6_1 + 1 | 0;
     continue label$5;
    };
   }
   label$6 : while (1) {
    if ($6_1 >>> 0 >= $2_1 >>> 0) {
     break label$3
    }
    if (!($635(HEAP8[$6_1 >> 0] | 0 | 0, $1073() | 0 | 0) | 0)) {
     break label$3
    }
    $6_1 = $6_1 + 1 | 0;
    continue label$6;
   };
  }
  label$7 : {
   label$8 : {
    if (!($1031($7_1 | 0) | 0)) {
     break label$8
    }
    $1071($8_1 | 0, $10_1 | 0, $6_1 | 0, HEAP32[$5_1 >> 2] | 0 | 0) | 0;
    HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + ($6_1 - $10_1 | 0) | 0;
    break label$7;
   }
   $1144($10_1 | 0, $6_1 | 0);
   $12_1 = 0;
   $13_1 = $1122($9_1 | 0) | 0;
   $14_1 = 0;
   $11_1 = $10_1;
   label$9 : while (1) {
    label$10 : {
     if ($11_1 >>> 0 < $6_1 >>> 0) {
      break label$10
     }
     $1144($3_1 + ($10_1 - $0_1 | 0) | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0);
     break label$7;
    }
    label$11 : {
     if ((HEAP8[($1040($7_1 | 0, $14_1 | 0) | 0) >> 0] | 0 | 0) < (1 | 0)) {
      break label$11
     }
     if (($12_1 | 0) != (HEAP8[($1040($7_1 | 0, $14_1 | 0) | 0) >> 0] | 0 | 0)) {
      break label$11
     }
     $12_1 = HEAP32[$5_1 >> 2] | 0;
     HEAP32[$5_1 >> 2] = $12_1 + 1 | 0;
     HEAP8[$12_1 >> 0] = $13_1;
     $14_1 = $14_1 + ($14_1 >>> 0 < (($1028($7_1 | 0) | 0) + -1 | 0) >>> 0) | 0;
     $12_1 = 0;
    }
    $15_1 = $876($8_1 | 0, HEAP8[$11_1 >> 0] | 0 | 0) | 0;
    $16_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $16_1 + 1 | 0;
    HEAP8[$16_1 >> 0] = $15_1;
    $11_1 = $11_1 + 1 | 0;
    $12_1 = $12_1 + 1 | 0;
    continue label$9;
   };
  }
  label$12 : while (1) {
   label$13 : {
    label$14 : {
     if ($6_1 >>> 0 >= $2_1 >>> 0) {
      break label$14
     }
     $11_1 = HEAPU8[$6_1 >> 0] | 0;
     if (($11_1 | 0) != (46 | 0)) {
      break label$13
     }
     $11_1 = $1121($9_1 | 0) | 0;
     $12_1 = HEAP32[$5_1 >> 2] | 0;
     HEAP32[$5_1 >> 2] = $12_1 + 1 | 0;
     HEAP8[$12_1 >> 0] = $11_1;
     $6_1 = $6_1 + 1 | 0;
    }
    $1071($8_1 | 0, $6_1 | 0, $2_1 | 0, HEAP32[$5_1 >> 2] | 0 | 0) | 0;
    $6_1 = (HEAP32[$5_1 >> 2] | 0) + ($2_1 - $6_1 | 0) | 0;
    HEAP32[$5_1 >> 2] = $6_1;
    HEAP32[$4_1 >> 2] = ($1_1 | 0) == ($2_1 | 0) ? $6_1 : $3_1 + ($1_1 - $0_1 | 0) | 0;
    $2058($7_1 | 0) | 0;
    global$0 = $7_1 + 16 | 0;
    return;
   }
   $11_1 = $876($8_1 | 0, ($11_1 << 24 | 0) >> 24 | 0 | 0) | 0;
   $12_1 = HEAP32[$5_1 >> 2] | 0;
   HEAP32[$5_1 >> 2] = $12_1 + 1 | 0;
   HEAP8[$12_1 >> 0] = $11_1;
   $6_1 = $6_1 + 1 | 0;
   continue label$12;
  };
 }
 
 function $1159($0_1) {
  $0_1 = $0_1 | 0;
  $1157($0_1 | 0, 0 | 0);
  return $0_1 | 0;
 }
 
 function $1160($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1980($0_1 | 0, $1979($1_1 | 0) | 0 | 0) | 0;
  $883($0_1 + 4 | 0 | 0, $882($2_1 | 0) | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1161($0_1) {
  $0_1 = $0_1 | 0;
  return $1981($0_1 | 0) | 0 | 0;
 }
 
 function $1162($0_1) {
  $0_1 = $0_1 | 0;
  return $884($0_1 + 4 | 0 | 0) | 0 | 0;
 }
 
 function $1163($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi, $5_1, $5$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  $5_1 = $5_1 | 0;
  $5$hi = $5$hi | 0;
  var $6_1 = 0, $8_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $7_1 = 0, $9_1 = 0, $10_1 = 0, $12_1 = 0, $11_1 = 0;
  $6_1 = global$0 - 256 | 0;
  global$0 = $6_1;
  i64toi32_i32$1 = $6_1;
  i64toi32_i32$0 = 0;
  HEAP32[($6_1 + 248 | 0) >> 2] = 37;
  HEAP32[($6_1 + 252 | 0) >> 2] = i64toi32_i32$0;
  $7_1 = $1153($6_1 + 248 | 0 | 1 | 0 | 0, 14458 | 0, $773($2_1 | 0) | 0 | 0) | 0;
  HEAP32[($6_1 + 204 | 0) >> 2] = $6_1 + 208 | 0;
  $8_1 = $1073() | 0;
  label$1 : {
   label$2 : {
    if (!$7_1) {
     break label$2
    }
    $9_1 = $1154($2_1 | 0) | 0;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$1 = $6_1 + 72 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $5_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$1 = $6_1 + 64 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $4_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($6_1 + 48 | 0) >> 2] = $9_1;
    $8_1 = $1141($6_1 + 208 | 0 | 0, 30 | 0, $8_1 | 0, $6_1 + 248 | 0 | 0, $6_1 + 48 | 0 | 0) | 0;
    break label$1;
   }
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$1 = $6_1;
   HEAP32[($6_1 + 80 | 0) >> 2] = $4_1;
   HEAP32[($6_1 + 84 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $5$hi;
   i64toi32_i32$1 = $6_1;
   HEAP32[($6_1 + 88 | 0) >> 2] = $5_1;
   HEAP32[($6_1 + 92 | 0) >> 2] = i64toi32_i32$0;
   $8_1 = $1141($6_1 + 208 | 0 | 0, 30 | 0, $8_1 | 0, $6_1 + 248 | 0 | 0, $6_1 + 80 | 0 | 0) | 0;
  }
  HEAP32[($6_1 + 128 | 0) >> 2] = 274;
  $9_1 = $1155($6_1 + 192 | 0 | 0, 0 | 0, $6_1 + 128 | 0 | 0) | 0;
  label$3 : {
   label$4 : {
    if (($8_1 | 0) < (30 | 0)) {
     break label$4
    }
    $8_1 = $1073() | 0;
    label$5 : {
     label$6 : {
      if (!$7_1) {
       break label$6
      }
      $7_1 = $1154($2_1 | 0) | 0;
      i64toi32_i32$0 = $5$hi;
      i64toi32_i32$1 = $6_1 + 24 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $5_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$1 = $6_1 + 16 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $4_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[$6_1 >> 2] = $7_1;
      $8_1 = $1156($6_1 + 204 | 0 | 0, $8_1 | 0, $6_1 + 248 | 0 | 0, $6_1 | 0) | 0;
      break label$5;
     }
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$1 = $6_1;
     HEAP32[($6_1 + 32 | 0) >> 2] = $4_1;
     HEAP32[($6_1 + 36 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$0 = $5$hi;
     i64toi32_i32$1 = $6_1;
     HEAP32[($6_1 + 40 | 0) >> 2] = $5_1;
     HEAP32[($6_1 + 44 | 0) >> 2] = i64toi32_i32$0;
     $8_1 = $1156($6_1 + 204 | 0 | 0, $8_1 | 0, $6_1 + 248 | 0 | 0, $6_1 + 32 | 0 | 0) | 0;
    }
    $7_1 = HEAP32[($6_1 + 204 | 0) >> 2] | 0;
    if (!$7_1) {
     break label$3
    }
    $1157($9_1 | 0, $7_1 | 0);
   }
   $7_1 = HEAP32[($6_1 + 204 | 0) >> 2] | 0;
   $10_1 = $7_1 + $8_1 | 0;
   $11_1 = $1142($7_1 | 0, $10_1 | 0, $2_1 | 0) | 0;
   HEAP32[($6_1 + 128 | 0) >> 2] = 274;
   $7_1 = $1155($6_1 + 120 | 0 | 0, 0 | 0, $6_1 + 128 | 0 | 0) | 0;
   label$7 : {
    label$8 : {
     if ((HEAP32[($6_1 + 204 | 0) >> 2] | 0 | 0) != ($6_1 + 208 | 0 | 0)) {
      break label$8
     }
     $8_1 = $6_1 + 128 | 0;
     $12_1 = $6_1 + 208 | 0;
     break label$7;
    }
    $8_1 = $2160($8_1 << 1 | 0 | 0) | 0;
    if (!$8_1) {
     break label$3
    }
    $1157($7_1 | 0, $8_1 | 0);
    $12_1 = HEAP32[($6_1 + 204 | 0) >> 2] | 0;
   }
   $774($6_1 + 104 | 0 | 0, $2_1 | 0);
   $1158($12_1 | 0, $11_1 | 0, $10_1 | 0, $8_1 | 0, $6_1 + 116 | 0 | 0, $6_1 + 112 | 0 | 0, $6_1 + 104 | 0 | 0);
   $1018($6_1 + 104 | 0 | 0) | 0;
   $2_1 = $184($1_1 | 0, $8_1 | 0, HEAP32[($6_1 + 116 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 112 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
   $1159($7_1 | 0) | 0;
   $1159($9_1 | 0) | 0;
   global$0 = $6_1 + 256 | 0;
   return $2_1 | 0;
  }
  $2029();
  abort();
 }
 
 function $1164($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $7_1 = 0, $9_1 = 0, $6_1 = 0, $10_1 = 0, $8_1 = 0;
  $5_1 = global$0 - 96 | 0;
  global$0 = $5_1;
  $10_1 = 0;
  HEAP16[($5_1 + 92 | 0) >> 1] = HEAPU8[($10_1 + 14470 | 0) >> 0] | 0 | ((HEAPU8[($10_1 + 14471 | 0) >> 0] | 0) << 8 | 0) | 0;
  $9_1 = 0;
  HEAP32[($5_1 + 88 | 0) >> 2] = HEAPU8[($9_1 + 14466 | 0) >> 0] | 0 | ((HEAPU8[($9_1 + 14467 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($9_1 + 14468 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($9_1 + 14469 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  $6_1 = $1073() | 0;
  HEAP32[$5_1 >> 2] = $4_1;
  $7_1 = $1141($5_1 + 64 | 0 | 0, 20 | 0, $6_1 | 0, $5_1 + 88 | 0 | 0, $5_1 | 0) | 0;
  $4_1 = ($5_1 + 64 | 0) + $7_1 | 0;
  $6_1 = $1142($5_1 + 64 | 0 | 0, $4_1 | 0, $2_1 | 0) | 0;
  $774($5_1 + 16 | 0 | 0, $2_1 | 0);
  $8_1 = $775($5_1 + 16 | 0 | 0) | 0;
  $1018($5_1 + 16 | 0 | 0) | 0;
  $1071($8_1 | 0, $5_1 + 64 | 0 | 0, $4_1 | 0, $5_1 + 16 | 0 | 0) | 0;
  $7_1 = $7_1 + ($5_1 + 16 | 0) | 0;
  $2_1 = $184($1_1 | 0, $5_1 + 16 | 0 | 0, (($6_1 | 0) == ($4_1 | 0) ? $7_1 : ($5_1 + 16 | 0) + ($6_1 - ($5_1 + 64 | 0) | 0) | 0) | 0, $7_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $5_1 + 96 | 0;
  return $2_1 | 0;
 }
 
 function $1165($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (($773($2_1 | 0) | 0) & 1 | 0) {
     break label$2
    }
    $2_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1) | 0;
    break label$1;
   }
   $774($5_1 + 24 | 0 | 0, $2_1 | 0);
   $2_1 = $1086($5_1 + 24 | 0 | 0) | 0;
   $1018($5_1 + 24 | 0 | 0) | 0;
   label$3 : {
    label$4 : {
     if (!$4_1) {
      break label$4
     }
     $1087($5_1 + 24 | 0 | 0, $2_1 | 0);
     break label$3;
    }
    $1088($5_1 + 24 | 0 | 0, $2_1 | 0);
   }
   HEAP32[($5_1 + 16 | 0) >> 2] = $1166($5_1 + 24 | 0 | 0) | 0;
   label$5 : while (1) {
    HEAP32[($5_1 + 8 | 0) >> 2] = $1167($5_1 + 24 | 0 | 0) | 0;
    label$6 : {
     if ($1168($5_1 + 16 | 0 | 0, $5_1 + 8 | 0 | 0) | 0) {
      break label$6
     }
     $2_1 = HEAP32[($5_1 + 40 | 0) >> 2] | 0;
     $2077($5_1 + 24 | 0 | 0) | 0;
     break label$1;
    }
    $2_1 = HEAP32[($1169($5_1 + 16 | 0 | 0) | 0) >> 2] | 0;
    $858($857($5_1 + 40 | 0 | 0) | 0 | 0, $2_1 | 0) | 0;
    $1170($5_1 + 16 | 0 | 0) | 0;
    $859($5_1 + 40 | 0 | 0) | 0;
    continue label$5;
   };
  }
  global$0 = $5_1 + 48 | 0;
  return $2_1 | 0;
 }
 
 function $1166($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0_1 = HEAP32[($1172($1_1 + 8 | 0 | 0, $1171($0_1 | 0) | 0 | 0) | 0) >> 2] | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1167($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0_1 = HEAP32[($1172($1_1 + 8 | 0 | 0, ($1171($0_1 | 0) | 0) + (($1092($0_1 | 0) | 0) << 2 | 0) | 0 | 0) | 0) >> 2] | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1168($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1173($0_1 | 0, $1_1 | 0) | 0) ^ 1 | 0 | 0;
 }
 
 function $1169($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1170($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + 4 | 0;
  return $0_1 | 0;
 }
 
 function $1171($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!($1230($0_1 | 0) | 0)) {
    break label$1
   }
   return $1400($0_1 | 0) | 0 | 0;
  }
  return $1403($0_1 | 0) | 0 | 0;
 }
 
 function $1172($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $1173($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1426($0_1 | 0) | 0 | 0) == ($1426($1_1 | 0) | 0 | 0) | 0;
 }
 
 function $1174($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $6_1 = 0, $8_1 = 0, $11_1 = 0, $7_1 = 0, $10_1 = 0, $5_1 = 0, $12_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  $6_1 = $5_1;
  $12_1 = 0;
  HEAP16[($6_1 + 28 | 0) >> 1] = HEAPU8[($12_1 + 14464 | 0) >> 0] | 0 | ((HEAPU8[($12_1 + 14465 | 0) >> 0] | 0) << 8 | 0) | 0;
  $11_1 = 0;
  HEAP32[($6_1 + 24 | 0) >> 2] = HEAPU8[($11_1 + 14460 | 0) >> 0] | 0 | ((HEAPU8[($11_1 + 14461 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($11_1 + 14462 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($11_1 + 14463 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  $1140($6_1 + 24 | 0 | 1 | 0 | 0, 14452 | 0, 1 | 0, $773($2_1 | 0) | 0 | 0);
  $7_1 = $773($2_1 | 0) | 0;
  $8_1 = $6_1 + -16 | 0;
  global$0 = $8_1;
  $10_1 = $1073() | 0;
  HEAP32[$6_1 >> 2] = $4_1;
  $4_1 = ($7_1 >>> 9 | 0) & 1 | 0;
  $7_1 = $8_1 + ($1141($8_1 | 0, $4_1 + 13 | 0 | 0, $10_1 | 0, $6_1 + 24 | 0 | 0, $6_1 | 0) | 0) | 0;
  $10_1 = $1142($8_1 | 0, $7_1 | 0, $2_1 | 0) | 0;
  $4_1 = $8_1 - ((($4_1 << 3 | 0) + 107 | 0) & 112 | 0) | 0;
  global$0 = $4_1;
  $774($6_1 + 8 | 0 | 0, $2_1 | 0);
  $1175($8_1 | 0, $10_1 | 0, $7_1 | 0, $4_1 | 0, $6_1 + 20 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 8 | 0 | 0);
  $1018($6_1 + 8 | 0 | 0) | 0;
  $2_1 = $1176($1_1 | 0, $4_1 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $6_1 + 32 | 0;
  return $2_1 | 0;
 }
 
 function $1175($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $10_1 = 0, $11_1 = 0, $9_1 = 0, $7_1 = 0, $8_1 = 0, $14_1 = 0, $12_1 = 0, $13_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  $8_1 = $819($6_1 | 0) | 0;
  $6_1 = $1086($6_1 | 0) | 0;
  $1128($7_1 | 0, $6_1 | 0);
  label$1 : {
   label$2 : {
    if (!($1031($7_1 | 0) | 0)) {
     break label$2
    }
    $1119($8_1 | 0, $0_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
    $6_1 = $3_1 + (($2_1 - $0_1 | 0) << 2 | 0) | 0;
    HEAP32[$5_1 >> 2] = $6_1;
    break label$1;
   }
   HEAP32[$5_1 >> 2] = $3_1;
   $9_1 = $0_1;
   label$3 : {
    label$4 : {
     $10_1 = HEAPU8[$9_1 >> 0] | 0;
     switch ($10_1 + -43 | 0 | 0) {
     case 0:
     case 2:
      break label$4;
     default:
      break label$3;
     };
    }
    $10_1 = $877($8_1 | 0, ($10_1 << 24 | 0) >> 24 | 0 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 4 | 0;
    HEAP32[$11_1 >> 2] = $10_1;
    $9_1 = $0_1 + 1 | 0;
   }
   label$5 : {
    if (($2_1 - $9_1 | 0 | 0) < (2 | 0)) {
     break label$5
    }
    if ((HEAPU8[$9_1 >> 0] | 0 | 0) != (48 | 0)) {
     break label$5
    }
    if ((HEAPU8[($9_1 + 1 | 0) >> 0] | 0 | 32 | 0 | 0) != (120 | 0)) {
     break label$5
    }
    $10_1 = $877($8_1 | 0, 48 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 4 | 0;
    HEAP32[$11_1 >> 2] = $10_1;
    $10_1 = $877($8_1 | 0, HEAP8[($9_1 + 1 | 0) >> 0] | 0 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 4 | 0;
    HEAP32[$11_1 >> 2] = $10_1;
    $9_1 = $9_1 + 2 | 0;
   }
   $1144($9_1 | 0, $2_1 | 0);
   $10_1 = 0;
   $12_1 = $1127($6_1 | 0) | 0;
   $11_1 = 0;
   $6_1 = $9_1;
   label$6 : while (1) {
    label$7 : {
     if ($6_1 >>> 0 < $2_1 >>> 0) {
      break label$7
     }
     $1177($3_1 + (($9_1 - $0_1 | 0) << 2 | 0) | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0);
     $6_1 = HEAP32[$5_1 >> 2] | 0;
     break label$1;
    }
    label$8 : {
     if (!(HEAPU8[($1040($7_1 | 0, $11_1 | 0) | 0) >> 0] | 0)) {
      break label$8
     }
     if (($10_1 | 0) != (HEAP8[($1040($7_1 | 0, $11_1 | 0) | 0) >> 0] | 0 | 0)) {
      break label$8
     }
     $10_1 = HEAP32[$5_1 >> 2] | 0;
     HEAP32[$5_1 >> 2] = $10_1 + 4 | 0;
     HEAP32[$10_1 >> 2] = $12_1;
     $11_1 = $11_1 + ($11_1 >>> 0 < (($1028($7_1 | 0) | 0) + -1 | 0) >>> 0) | 0;
     $10_1 = 0;
    }
    $13_1 = $877($8_1 | 0, HEAP8[$6_1 >> 0] | 0 | 0) | 0;
    $14_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $14_1 + 4 | 0;
    HEAP32[$14_1 >> 2] = $13_1;
    $6_1 = $6_1 + 1 | 0;
    $10_1 = $10_1 + 1 | 0;
    continue label$6;
   };
  }
  HEAP32[$4_1 >> 2] = ($1_1 | 0) == ($2_1 | 0) ? $6_1 : $3_1 + (($1_1 - $0_1 | 0) << 2 | 0) | 0;
  $2058($7_1 | 0) | 0;
  global$0 = $7_1 + 16 | 0;
 }
 
 function $1176($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $7_1 = 0, $9_1 = 0, $8_1 = 0, $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  label$1 : {
   label$2 : {
    if ($0_1) {
     break label$2
    }
    $7_1 = 0;
    break label$1;
   }
   $8_1 = $1145($4_1 | 0) | 0;
   $7_1 = 0;
   label$3 : {
    $9_1 = $2_1 - $1_1 | 0;
    if (($9_1 | 0) < (1 | 0)) {
     break label$3
    }
    $9_1 = $9_1 >> 2 | 0;
    if (($860($0_1 | 0, $1_1 | 0, $9_1 | 0) | 0 | 0) != ($9_1 | 0)) {
     break label$1
    }
   }
   label$4 : {
    $7_1 = ($3_1 - $1_1 | 0) >> 2 | 0;
    $1_1 = ($8_1 | 0) > ($7_1 | 0) ? $8_1 - $7_1 | 0 : 0;
    if (($1_1 | 0) < (1 | 0)) {
     break label$4
    }
    $7_1 = $1178($6_1 | 0, $1_1 | 0, $5_1 | 0) | 0;
    $8_1 = $860($0_1 | 0, $1179($7_1 | 0) | 0 | 0, $1_1 | 0) | 0;
    $2077($7_1 | 0) | 0;
    $7_1 = 0;
    if (($8_1 | 0) != ($1_1 | 0)) {
     break label$1
    }
   }
   label$5 : {
    $1_1 = $3_1 - $2_1 | 0;
    if (($1_1 | 0) < (1 | 0)) {
     break label$5
    }
    $7_1 = 0;
    $1_1 = $1_1 >> 2 | 0;
    if (($860($0_1 | 0, $2_1 | 0, $1_1 | 0) | 0 | 0) != ($1_1 | 0)) {
     break label$1
    }
   }
   $1148($4_1 | 0, 0 | 0) | 0;
   $7_1 = $0_1;
  }
  global$0 = $6_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $1177($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1194($0_1 | 0, $1_1 | 0);
 }
 
 function $1178($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $1014($0_1 | 0, $3_1 + 8 | 0 | 0, $3_1 | 0) | 0;
  $2086($0_1 | 0, $1_1 | 0, $2_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1179($0_1) {
  $0_1 = $0_1 | 0;
  return $1941($1171($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1180($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var $6_1 = 0, $7_1 = 0, $8_1 = 0, $10_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $11_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  $6_1 = $5_1;
  i64toi32_i32$0 = 0;
  HEAP32[($6_1 + 24 | 0) >> 2] = 37;
  HEAP32[($6_1 + 28 | 0) >> 2] = i64toi32_i32$0;
  $1140($6_1 + 24 | 0 | 1 | 0 | 0, 14454 | 0, 1 | 0, $773($2_1 | 0) | 0 | 0);
  $7_1 = $773($2_1 | 0) | 0;
  $8_1 = $6_1 + -32 | 0;
  global$0 = $8_1;
  $10_1 = $1073() | 0;
  i64toi32_i32$0 = $4$hi;
  HEAP32[$6_1 >> 2] = $4_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $7_1 = ($7_1 >>> 9 | 0) & 1 | 0;
  $10_1 = $8_1 + ($1141($8_1 | 0, $7_1 + 23 | 0 | 0, $10_1 | 0, $6_1 + 24 | 0 | 0, $6_1 | 0) | 0) | 0;
  $11_1 = $1142($8_1 | 0, $10_1 | 0, $2_1 | 0) | 0;
  $7_1 = $8_1 - ((($7_1 << 3 | 0) + 187 | 0) & 240 | 0) | 0;
  global$0 = $7_1;
  $774($6_1 + 8 | 0 | 0, $2_1 | 0);
  $1175($8_1 | 0, $11_1 | 0, $10_1 | 0, $7_1 | 0, $6_1 + 20 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 8 | 0 | 0);
  $1018($6_1 + 8 | 0 | 0) | 0;
  $2_1 = $1176($1_1 | 0, $7_1 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $6_1 + 32 | 0;
  return $2_1 | 0;
 }
 
 function $1181($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $6_1 = 0, $8_1 = 0, $11_1 = 0, $7_1 = 0, $10_1 = 0, $5_1 = 0, $12_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  $6_1 = $5_1;
  $12_1 = 0;
  HEAP16[($6_1 + 28 | 0) >> 1] = HEAPU8[($12_1 + 14464 | 0) >> 0] | 0 | ((HEAPU8[($12_1 + 14465 | 0) >> 0] | 0) << 8 | 0) | 0;
  $11_1 = 0;
  HEAP32[($6_1 + 24 | 0) >> 2] = HEAPU8[($11_1 + 14460 | 0) >> 0] | 0 | ((HEAPU8[($11_1 + 14461 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($11_1 + 14462 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($11_1 + 14463 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  $1140($6_1 + 24 | 0 | 1 | 0 | 0, 14452 | 0, 0 | 0, $773($2_1 | 0) | 0 | 0);
  $7_1 = $773($2_1 | 0) | 0;
  $8_1 = $6_1 + -16 | 0;
  global$0 = $8_1;
  $10_1 = $1073() | 0;
  HEAP32[$6_1 >> 2] = $4_1;
  $7_1 = $8_1 + ($1141($8_1 | 0, ($7_1 >>> 9 | 0) & 1 | 0 | 12 | 0 | 0, $10_1 | 0, $6_1 + 24 | 0 | 0, $6_1 | 0) | 0) | 0;
  $10_1 = $1142($8_1 | 0, $7_1 | 0, $2_1 | 0) | 0;
  $4_1 = $8_1 + -96 | 0;
  global$0 = $4_1;
  $774($6_1 + 8 | 0 | 0, $2_1 | 0);
  $1175($8_1 | 0, $10_1 | 0, $7_1 | 0, $4_1 | 0, $6_1 + 20 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 8 | 0 | 0);
  $1018($6_1 + 8 | 0 | 0) | 0;
  $2_1 = $1176($1_1 | 0, $4_1 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $6_1 + 32 | 0;
  return $2_1 | 0;
 }
 
 function $1182($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var $6_1 = 0, $7_1 = 0, $8_1 = 0, $10_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $11_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  $6_1 = $5_1;
  i64toi32_i32$0 = 0;
  HEAP32[($6_1 + 24 | 0) >> 2] = 37;
  HEAP32[($6_1 + 28 | 0) >> 2] = i64toi32_i32$0;
  $1140($6_1 + 24 | 0 | 1 | 0 | 0, 14454 | 0, 0 | 0, $773($2_1 | 0) | 0 | 0);
  $7_1 = $773($2_1 | 0) | 0;
  $8_1 = $6_1 + -32 | 0;
  global$0 = $8_1;
  $10_1 = $1073() | 0;
  i64toi32_i32$0 = $4$hi;
  HEAP32[$6_1 >> 2] = $4_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $7_1 = ($7_1 >>> 9 | 0) & 1 | 0;
  $10_1 = $8_1 + ($1141($8_1 | 0, $7_1 + 23 | 0 | 0, $10_1 | 0, $6_1 + 24 | 0 | 0, $6_1 | 0) | 0) | 0;
  $11_1 = $1142($8_1 | 0, $10_1 | 0, $2_1 | 0) | 0;
  $7_1 = $8_1 - ((($7_1 << 3 | 0) + 187 | 0) & 240 | 0) | 0;
  global$0 = $7_1;
  $774($6_1 + 8 | 0 | 0, $2_1 | 0);
  $1175($8_1 | 0, $11_1 | 0, $10_1 | 0, $7_1 | 0, $6_1 + 20 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 8 | 0 | 0);
  $1018($6_1 + 8 | 0 | 0) | 0;
  $2_1 = $1176($1_1 | 0, $7_1 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $6_1 + 32 | 0;
  return $2_1 | 0;
 }
 
 function $1183($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = +$4_1;
  var $5_1 = 0, $7_1 = 0, $6_1 = 0, $8_1 = 0, $9_1 = 0, $11_1 = 0, $10_1 = 0;
  $5_1 = global$0 - 384 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 376 | 0) >> 2] = 37;
  HEAP32[($5_1 + 380 | 0) >> 2] = 0;
  $6_1 = $1153($5_1 + 376 | 0 | 1 | 0 | 0, 14457 | 0, $773($2_1 | 0) | 0 | 0) | 0;
  HEAP32[($5_1 + 332 | 0) >> 2] = $5_1 + 336 | 0;
  $7_1 = $1073() | 0;
  label$1 : {
   label$2 : {
    if (!$6_1) {
     break label$2
    }
    $8_1 = $1154($2_1 | 0) | 0;
    HEAPF64[($5_1 + 40 | 0) >> 3] = $4_1;
    HEAP32[($5_1 + 32 | 0) >> 2] = $8_1;
    $7_1 = $1141($5_1 + 336 | 0 | 0, 30 | 0, $7_1 | 0, $5_1 + 376 | 0 | 0, $5_1 + 32 | 0 | 0) | 0;
    break label$1;
   }
   HEAPF64[($5_1 + 48 | 0) >> 3] = $4_1;
   $7_1 = $1141($5_1 + 336 | 0 | 0, 30 | 0, $7_1 | 0, $5_1 + 376 | 0 | 0, $5_1 + 48 | 0 | 0) | 0;
  }
  HEAP32[($5_1 + 80 | 0) >> 2] = 274;
  $8_1 = $1155($5_1 + 320 | 0 | 0, 0 | 0, $5_1 + 80 | 0 | 0) | 0;
  label$3 : {
   label$4 : {
    if (($7_1 | 0) < (30 | 0)) {
     break label$4
    }
    $7_1 = $1073() | 0;
    label$5 : {
     label$6 : {
      if (!$6_1) {
       break label$6
      }
      $6_1 = $1154($2_1 | 0) | 0;
      HEAPF64[($5_1 + 8 | 0) >> 3] = $4_1;
      HEAP32[$5_1 >> 2] = $6_1;
      $7_1 = $1156($5_1 + 332 | 0 | 0, $7_1 | 0, $5_1 + 376 | 0 | 0, $5_1 | 0) | 0;
      break label$5;
     }
     HEAPF64[($5_1 + 16 | 0) >> 3] = $4_1;
     $7_1 = $1156($5_1 + 332 | 0 | 0, $7_1 | 0, $5_1 + 376 | 0 | 0, $5_1 + 16 | 0 | 0) | 0;
    }
    $6_1 = HEAP32[($5_1 + 332 | 0) >> 2] | 0;
    if (!$6_1) {
     break label$3
    }
    $1157($8_1 | 0, $6_1 | 0);
   }
   $6_1 = HEAP32[($5_1 + 332 | 0) >> 2] | 0;
   $9_1 = $6_1 + $7_1 | 0;
   $10_1 = $1142($6_1 | 0, $9_1 | 0, $2_1 | 0) | 0;
   HEAP32[($5_1 + 80 | 0) >> 2] = 274;
   $6_1 = $1184($5_1 + 72 | 0 | 0, 0 | 0, $5_1 + 80 | 0 | 0) | 0;
   label$7 : {
    label$8 : {
     if ((HEAP32[($5_1 + 332 | 0) >> 2] | 0 | 0) != ($5_1 + 336 | 0 | 0)) {
      break label$8
     }
     $7_1 = $5_1 + 80 | 0;
     $11_1 = $5_1 + 336 | 0;
     break label$7;
    }
    $7_1 = $2160($7_1 << 3 | 0 | 0) | 0;
    if (!$7_1) {
     break label$3
    }
    $1185($6_1 | 0, $7_1 | 0);
    $11_1 = HEAP32[($5_1 + 332 | 0) >> 2] | 0;
   }
   $774($5_1 + 56 | 0 | 0, $2_1 | 0);
   $1186($11_1 | 0, $10_1 | 0, $9_1 | 0, $7_1 | 0, $5_1 + 68 | 0 | 0, $5_1 + 64 | 0 | 0, $5_1 + 56 | 0 | 0);
   $1018($5_1 + 56 | 0 | 0) | 0;
   $2_1 = $1176($1_1 | 0, $7_1 | 0, HEAP32[($5_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 64 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
   $1187($6_1 | 0) | 0;
   $1159($8_1 | 0) | 0;
   global$0 = $5_1 + 384 | 0;
   return $2_1 | 0;
  }
  $2029();
  abort();
 }
 
 function $1184($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
  $1188($0_1 | 0, $3_1 + 12 | 0 | 0, $869($2_1 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1185($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($1189($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($1189($0_1 | 0) | 0) >> 2] = $1_1;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($1190($0_1 | 0) | 0) >> 2] | 0 | 0]($2_1);
  }
 }
 
 function $1186($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $11_1 = 0, $10_1 = 0, $12_1 = 0, $7_1 = 0, $14_1 = 0, $8_1 = 0, $9_1 = 0, $16_1 = 0, $13_1 = 0, $15_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  $8_1 = $819($6_1 | 0) | 0;
  $9_1 = $1086($6_1 | 0) | 0;
  $1128($7_1 | 0, $9_1 | 0);
  HEAP32[$5_1 >> 2] = $3_1;
  $10_1 = $0_1;
  label$1 : {
   label$2 : {
    $6_1 = HEAPU8[$10_1 >> 0] | 0;
    switch ($6_1 + -43 | 0 | 0) {
    case 0:
    case 2:
     break label$2;
    default:
     break label$1;
    };
   }
   $6_1 = $877($8_1 | 0, ($6_1 << 24 | 0) >> 24 | 0 | 0) | 0;
   $11_1 = HEAP32[$5_1 >> 2] | 0;
   HEAP32[$5_1 >> 2] = $11_1 + 4 | 0;
   HEAP32[$11_1 >> 2] = $6_1;
   $10_1 = $0_1 + 1 | 0;
  }
  $6_1 = $10_1;
  label$3 : {
   label$4 : {
    if (($2_1 - $6_1 | 0 | 0) <= (1 | 0)) {
     break label$4
    }
    $6_1 = $10_1;
    if ((HEAPU8[$6_1 >> 0] | 0 | 0) != (48 | 0)) {
     break label$4
    }
    $6_1 = $10_1;
    if ((HEAPU8[($6_1 + 1 | 0) >> 0] | 0 | 32 | 0 | 0) != (120 | 0)) {
     break label$4
    }
    $6_1 = $877($8_1 | 0, 48 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 4 | 0;
    HEAP32[$11_1 >> 2] = $6_1;
    $6_1 = $877($8_1 | 0, HEAP8[($10_1 + 1 | 0) >> 0] | 0 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 4 | 0;
    HEAP32[$11_1 >> 2] = $6_1;
    $10_1 = $10_1 + 2 | 0;
    $6_1 = $10_1;
    label$5 : while (1) {
     if ($6_1 >>> 0 >= $2_1 >>> 0) {
      break label$3
     }
     if (!($975(HEAP8[$6_1 >> 0] | 0 | 0, $1073() | 0 | 0) | 0)) {
      break label$3
     }
     $6_1 = $6_1 + 1 | 0;
     continue label$5;
    };
   }
   label$6 : while (1) {
    if ($6_1 >>> 0 >= $2_1 >>> 0) {
     break label$3
    }
    if (!($635(HEAP8[$6_1 >> 0] | 0 | 0, $1073() | 0 | 0) | 0)) {
     break label$3
    }
    $6_1 = $6_1 + 1 | 0;
    continue label$6;
   };
  }
  label$7 : {
   label$8 : {
    if (!($1031($7_1 | 0) | 0)) {
     break label$8
    }
    $1119($8_1 | 0, $10_1 | 0, $6_1 | 0, HEAP32[$5_1 >> 2] | 0 | 0) | 0;
    HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + (($6_1 - $10_1 | 0) << 2 | 0) | 0;
    break label$7;
   }
   $1144($10_1 | 0, $6_1 | 0);
   $12_1 = 0;
   $13_1 = $1127($9_1 | 0) | 0;
   $14_1 = 0;
   $11_1 = $10_1;
   label$9 : while (1) {
    label$10 : {
     if ($11_1 >>> 0 < $6_1 >>> 0) {
      break label$10
     }
     $1177($3_1 + (($10_1 - $0_1 | 0) << 2 | 0) | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0);
     break label$7;
    }
    label$11 : {
     if ((HEAP8[($1040($7_1 | 0, $14_1 | 0) | 0) >> 0] | 0 | 0) < (1 | 0)) {
      break label$11
     }
     if (($12_1 | 0) != (HEAP8[($1040($7_1 | 0, $14_1 | 0) | 0) >> 0] | 0 | 0)) {
      break label$11
     }
     $12_1 = HEAP32[$5_1 >> 2] | 0;
     HEAP32[$5_1 >> 2] = $12_1 + 4 | 0;
     HEAP32[$12_1 >> 2] = $13_1;
     $14_1 = $14_1 + ($14_1 >>> 0 < (($1028($7_1 | 0) | 0) + -1 | 0) >>> 0) | 0;
     $12_1 = 0;
    }
    $15_1 = $877($8_1 | 0, HEAP8[$11_1 >> 0] | 0 | 0) | 0;
    $16_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $16_1 + 4 | 0;
    HEAP32[$16_1 >> 2] = $15_1;
    $11_1 = $11_1 + 1 | 0;
    $12_1 = $12_1 + 1 | 0;
    continue label$9;
   };
  }
  label$12 : {
   label$13 : {
    label$14 : while (1) {
     if ($6_1 >>> 0 >= $2_1 >>> 0) {
      break label$13
     }
     label$15 : {
      $11_1 = HEAPU8[$6_1 >> 0] | 0;
      if (($11_1 | 0) == (46 | 0)) {
       break label$15
      }
      $11_1 = $877($8_1 | 0, ($11_1 << 24 | 0) >> 24 | 0 | 0) | 0;
      $12_1 = HEAP32[$5_1 >> 2] | 0;
      HEAP32[$5_1 >> 2] = $12_1 + 4 | 0;
      HEAP32[$12_1 >> 2] = $11_1;
      $6_1 = $6_1 + 1 | 0;
      continue label$14;
     }
     break label$14;
    };
    $12_1 = $1126($9_1 | 0) | 0;
    $14_1 = HEAP32[$5_1 >> 2] | 0;
    $11_1 = $14_1 + 4 | 0;
    HEAP32[$5_1 >> 2] = $11_1;
    HEAP32[$14_1 >> 2] = $12_1;
    $6_1 = $6_1 + 1 | 0;
    break label$12;
   }
   $11_1 = HEAP32[$5_1 >> 2] | 0;
  }
  $1119($8_1 | 0, $6_1 | 0, $2_1 | 0, $11_1 | 0) | 0;
  $6_1 = (HEAP32[$5_1 >> 2] | 0) + (($2_1 - $6_1 | 0) << 2 | 0) | 0;
  HEAP32[$5_1 >> 2] = $6_1;
  HEAP32[$4_1 >> 2] = ($1_1 | 0) == ($2_1 | 0) ? $6_1 : $3_1 + (($1_1 - $0_1 | 0) << 2 | 0) | 0;
  $2058($7_1 | 0) | 0;
  global$0 = $7_1 + 16 | 0;
 }
 
 function $1187($0_1) {
  $0_1 = $0_1 | 0;
  $1185($0_1 | 0, 0 | 0);
  return $0_1 | 0;
 }
 
 function $1188($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1983($0_1 | 0, $1982($1_1 | 0) | 0 | 0) | 0;
  $883($0_1 + 4 | 0 | 0, $882($2_1 | 0) | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1189($0_1) {
  $0_1 = $0_1 | 0;
  return $1984($0_1 | 0) | 0 | 0;
 }
 
 function $1190($0_1) {
  $0_1 = $0_1 | 0;
  return $884($0_1 + 4 | 0 | 0) | 0 | 0;
 }
 
 function $1191($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi, $5_1, $5$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  $5_1 = $5_1 | 0;
  $5$hi = $5$hi | 0;
  var $6_1 = 0, $8_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $7_1 = 0, $9_1 = 0, $10_1 = 0, $12_1 = 0, $11_1 = 0;
  $6_1 = global$0 - 432 | 0;
  global$0 = $6_1;
  i64toi32_i32$1 = $6_1;
  i64toi32_i32$0 = 0;
  HEAP32[($6_1 + 424 | 0) >> 2] = 37;
  HEAP32[($6_1 + 428 | 0) >> 2] = i64toi32_i32$0;
  $7_1 = $1153($6_1 + 424 | 0 | 1 | 0 | 0, 14458 | 0, $773($2_1 | 0) | 0 | 0) | 0;
  HEAP32[($6_1 + 380 | 0) >> 2] = $6_1 + 384 | 0;
  $8_1 = $1073() | 0;
  label$1 : {
   label$2 : {
    if (!$7_1) {
     break label$2
    }
    $9_1 = $1154($2_1 | 0) | 0;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$1 = $6_1 + 72 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $5_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$1 = $6_1 + 64 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $4_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($6_1 + 48 | 0) >> 2] = $9_1;
    $8_1 = $1141($6_1 + 384 | 0 | 0, 30 | 0, $8_1 | 0, $6_1 + 424 | 0 | 0, $6_1 + 48 | 0 | 0) | 0;
    break label$1;
   }
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$1 = $6_1;
   HEAP32[($6_1 + 80 | 0) >> 2] = $4_1;
   HEAP32[($6_1 + 84 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $5$hi;
   i64toi32_i32$1 = $6_1;
   HEAP32[($6_1 + 88 | 0) >> 2] = $5_1;
   HEAP32[($6_1 + 92 | 0) >> 2] = i64toi32_i32$0;
   $8_1 = $1141($6_1 + 384 | 0 | 0, 30 | 0, $8_1 | 0, $6_1 + 424 | 0 | 0, $6_1 + 80 | 0 | 0) | 0;
  }
  HEAP32[($6_1 + 128 | 0) >> 2] = 274;
  $9_1 = $1155($6_1 + 368 | 0 | 0, 0 | 0, $6_1 + 128 | 0 | 0) | 0;
  label$3 : {
   label$4 : {
    if (($8_1 | 0) < (30 | 0)) {
     break label$4
    }
    $8_1 = $1073() | 0;
    label$5 : {
     label$6 : {
      if (!$7_1) {
       break label$6
      }
      $7_1 = $1154($2_1 | 0) | 0;
      i64toi32_i32$0 = $5$hi;
      i64toi32_i32$1 = $6_1 + 24 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $5_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$1 = $6_1 + 16 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $4_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[$6_1 >> 2] = $7_1;
      $8_1 = $1156($6_1 + 380 | 0 | 0, $8_1 | 0, $6_1 + 424 | 0 | 0, $6_1 | 0) | 0;
      break label$5;
     }
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$1 = $6_1;
     HEAP32[($6_1 + 32 | 0) >> 2] = $4_1;
     HEAP32[($6_1 + 36 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$0 = $5$hi;
     i64toi32_i32$1 = $6_1;
     HEAP32[($6_1 + 40 | 0) >> 2] = $5_1;
     HEAP32[($6_1 + 44 | 0) >> 2] = i64toi32_i32$0;
     $8_1 = $1156($6_1 + 380 | 0 | 0, $8_1 | 0, $6_1 + 424 | 0 | 0, $6_1 + 32 | 0 | 0) | 0;
    }
    $7_1 = HEAP32[($6_1 + 380 | 0) >> 2] | 0;
    if (!$7_1) {
     break label$3
    }
    $1157($9_1 | 0, $7_1 | 0);
   }
   $7_1 = HEAP32[($6_1 + 380 | 0) >> 2] | 0;
   $10_1 = $7_1 + $8_1 | 0;
   $11_1 = $1142($7_1 | 0, $10_1 | 0, $2_1 | 0) | 0;
   HEAP32[($6_1 + 128 | 0) >> 2] = 274;
   $7_1 = $1184($6_1 + 120 | 0 | 0, 0 | 0, $6_1 + 128 | 0 | 0) | 0;
   label$7 : {
    label$8 : {
     if ((HEAP32[($6_1 + 380 | 0) >> 2] | 0 | 0) != ($6_1 + 384 | 0 | 0)) {
      break label$8
     }
     $8_1 = $6_1 + 128 | 0;
     $12_1 = $6_1 + 384 | 0;
     break label$7;
    }
    $8_1 = $2160($8_1 << 3 | 0 | 0) | 0;
    if (!$8_1) {
     break label$3
    }
    $1185($7_1 | 0, $8_1 | 0);
    $12_1 = HEAP32[($6_1 + 380 | 0) >> 2] | 0;
   }
   $774($6_1 + 104 | 0 | 0, $2_1 | 0);
   $1186($12_1 | 0, $11_1 | 0, $10_1 | 0, $8_1 | 0, $6_1 + 116 | 0 | 0, $6_1 + 112 | 0 | 0, $6_1 + 104 | 0 | 0);
   $1018($6_1 + 104 | 0 | 0) | 0;
   $2_1 = $1176($1_1 | 0, $8_1 | 0, HEAP32[($6_1 + 116 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 112 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
   $1187($7_1 | 0) | 0;
   $1159($9_1 | 0) | 0;
   global$0 = $6_1 + 432 | 0;
   return $2_1 | 0;
  }
  $2029();
  abort();
 }
 
 function $1192($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $7_1 = 0, $9_1 = 0, $6_1 = 0, $10_1 = 0, $8_1 = 0;
  $5_1 = global$0 - 208 | 0;
  global$0 = $5_1;
  $10_1 = 0;
  HEAP16[($5_1 + 204 | 0) >> 1] = HEAPU8[($10_1 + 14470 | 0) >> 0] | 0 | ((HEAPU8[($10_1 + 14471 | 0) >> 0] | 0) << 8 | 0) | 0;
  $9_1 = 0;
  HEAP32[($5_1 + 200 | 0) >> 2] = HEAPU8[($9_1 + 14466 | 0) >> 0] | 0 | ((HEAPU8[($9_1 + 14467 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($9_1 + 14468 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($9_1 + 14469 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  $6_1 = $1073() | 0;
  HEAP32[$5_1 >> 2] = $4_1;
  $7_1 = $1141($5_1 + 176 | 0 | 0, 20 | 0, $6_1 | 0, $5_1 + 200 | 0 | 0, $5_1 | 0) | 0;
  $4_1 = ($5_1 + 176 | 0) + $7_1 | 0;
  $6_1 = $1142($5_1 + 176 | 0 | 0, $4_1 | 0, $2_1 | 0) | 0;
  $774($5_1 + 16 | 0 | 0, $2_1 | 0);
  $8_1 = $819($5_1 + 16 | 0 | 0) | 0;
  $1018($5_1 + 16 | 0 | 0) | 0;
  $1119($8_1 | 0, $5_1 + 176 | 0 | 0, $4_1 | 0, $5_1 + 16 | 0 | 0) | 0;
  $7_1 = ($5_1 + 16 | 0) + ($7_1 << 2 | 0) | 0;
  $2_1 = $1176($1_1 | 0, $5_1 + 16 | 0 | 0, (($6_1 | 0) == ($4_1 | 0) ? $7_1 : ($5_1 + 16 | 0) + (($6_1 - ($5_1 + 176 | 0) | 0) << 2 | 0) | 0) | 0, $7_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $5_1 + 208 | 0;
  return $2_1 | 0;
 }
 
 function $1193($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (($0_1 | 0) == ($1_1 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    if ($0_1 >>> 0 >= $1_1 >>> 0) {
     break label$1
    }
    $1985($0_1 | 0, $1_1 | 0);
    $0_1 = $0_1 + 1 | 0;
    continue label$2;
   };
  }
 }
 
 function $1194($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (($0_1 | 0) == ($1_1 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $1_1 = $1_1 + -4 | 0;
    if ($0_1 >>> 0 >= $1_1 >>> 0) {
     break label$1
    }
    $1986($0_1 | 0, $1_1 | 0);
    $0_1 = $0_1 + 4 | 0;
    continue label$2;
   };
  }
 }
 
 function $1195($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0, $10_1 = 0, $9_1 = 0, $11_1 = 0;
  $8_1 = global$0 - 32 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 16 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 24 | 0) >> 2] = $1_1;
  $774($8_1 + 8 | 0 | 0, $3_1 | 0);
  $1_1 = $775($8_1 + 8 | 0 | 0) | 0;
  $1018($8_1 + 8 | 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = 0;
  $2_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($6_1 | 0) == ($7_1 | 0)) {
     break label$1
    }
    if ($2_1) {
     break label$1
    }
    label$3 : {
     if ($782($8_1 + 24 | 0 | 0, $8_1 + 16 | 0 | 0) | 0) {
      break label$3
     }
     label$4 : {
      label$5 : {
       if (($1196($1_1 | 0, HEAP8[$6_1 >> 0] | 0 | 0, 0 | 0) | 0 | 0) != (37 | 0)) {
        break label$5
       }
       $2_1 = $6_1 + 1 | 0;
       if (($2_1 | 0) == ($7_1 | 0)) {
        break label$3
       }
       $9_1 = 0;
       label$6 : {
        label$7 : {
         $10_1 = $1196($1_1 | 0, HEAP8[$2_1 >> 0] | 0 | 0, 0 | 0) | 0;
         if (($10_1 | 0) == (69 | 0)) {
          break label$7
         }
         if (($10_1 & 255 | 0 | 0) == (48 | 0)) {
          break label$7
         }
         $11_1 = $10_1;
         $2_1 = $6_1;
         break label$6;
        }
        $6_1 = $6_1 + 2 | 0;
        if (($6_1 | 0) == ($7_1 | 0)) {
         break label$3
        }
        $11_1 = $1196($1_1 | 0, HEAP8[$6_1 >> 0] | 0 | 0, 0 | 0) | 0;
        $9_1 = $10_1;
       }
       HEAP32[($8_1 + 24 | 0) >> 2] = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1, HEAP32[($8_1 + 24 | 0) >> 2] | 0, HEAP32[($8_1 + 16 | 0) >> 2] | 0, $3_1, $4_1, $5_1, $11_1, $9_1) | 0;
       $6_1 = $2_1 + 2 | 0;
       break label$4;
      }
      label$8 : {
       if (!($780($1_1 | 0, 8192 | 0, HEAP8[$6_1 >> 0] | 0 | 0) | 0)) {
        break label$8
       }
       label$9 : {
        label$10 : while (1) {
         label$11 : {
          $6_1 = $6_1 + 1 | 0;
          if (($6_1 | 0) != ($7_1 | 0)) {
           break label$11
          }
          $6_1 = $7_1;
          break label$9;
         }
         if ($780($1_1 | 0, 8192 | 0, HEAP8[$6_1 >> 0] | 0 | 0) | 0) {
          continue label$10
         }
         break label$10;
        };
       }
       label$12 : while (1) {
        if (!($778($8_1 + 24 | 0 | 0, $8_1 + 16 | 0 | 0) | 0)) {
         break label$4
        }
        if (!($780($1_1 | 0, 8192 | 0, $779($8_1 + 24 | 0 | 0) | 0 | 0) | 0)) {
         break label$4
        }
        $781($8_1 + 24 | 0 | 0) | 0;
        continue label$12;
       };
      }
      label$13 : {
       if (($1027($1_1 | 0, $779($8_1 + 24 | 0 | 0) | 0 | 0) | 0 | 0) != ($1027($1_1 | 0, HEAP8[$6_1 >> 0] | 0 | 0) | 0 | 0)) {
        break label$13
       }
       $6_1 = $6_1 + 1 | 0;
       $781($8_1 + 24 | 0 | 0) | 0;
       break label$4;
      }
      HEAP32[$4_1 >> 2] = 4;
     }
     $2_1 = HEAP32[$4_1 >> 2] | 0;
     continue label$2;
    }
    break label$2;
   };
   HEAP32[$4_1 >> 2] = 4;
  }
  label$14 : {
   if (!($782($8_1 + 24 | 0 | 0, $8_1 + 16 | 0 | 0) | 0)) {
    break label$14
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $6_1 = HEAP32[($8_1 + 24 | 0) >> 2] | 0;
  global$0 = $8_1 + 32 | 0;
  return $6_1 | 0;
 }
 
 function $1196($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1) | 0 | 0;
 }
 
 function $1197($0_1) {
  $0_1 = $0_1 | 0;
  return 2 | 0;
 }
 
 function $1198($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = 624576549;
  HEAP32[($6_1 + 12 | 0) >> 2] = 1394948685;
  $0_1 = $1195($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $6_1 + 8 | 0 | 0, $6_1 + 16 | 0 | 0) | 0;
  global$0 = $6_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1199($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
  return $1195($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $1084($6_1 | 0) | 0 | 0, ($1084($6_1 | 0) | 0) + ($1028($6_1 | 0) | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1200($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!($1076($0_1 | 0) | 0)) {
    break label$1
   }
   return $1943($0_1 | 0) | 0 | 0;
  }
  return $1944($0_1 | 0) | 0 | 0;
 }
 
 function $1201($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1202($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  $774($6_1 | 0, $3_1 | 0);
  $3_1 = $775($6_1 | 0) | 0;
  $1018($6_1 | 0) | 0;
  $1203($0_1 | 0, $5_1 + 24 | 0 | 0, $6_1 + 8 | 0 | 0, $2_1 | 0, $4_1 | 0, $3_1 | 0);
  $0_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  global$0 = $6_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1203($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  label$1 : {
   $0_1 = FUNCTION_TABLE[HEAP32[(HEAP32[($0_1 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
   $0_1 = ($1022($2_1 | 0, $3_1 | 0, $0_1 | 0, $0_1 + 168 | 0 | 0, $5_1 | 0, $4_1 | 0, 0 | 0) | 0) - $0_1 | 0;
   if (($0_1 | 0) > (167 | 0)) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = (($0_1 | 0) / (12 | 0) | 0 | 0) % (7 | 0) | 0;
  }
 }
 
 function $1204($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  $774($6_1 | 0, $3_1 | 0);
  $3_1 = $775($6_1 | 0) | 0;
  $1018($6_1 | 0) | 0;
  $1205($0_1 | 0, $5_1 + 16 | 0 | 0, $6_1 + 8 | 0 | 0, $2_1 | 0, $4_1 | 0, $3_1 | 0);
  $0_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  global$0 = $6_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1205($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  label$1 : {
   $0_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
   $0_1 = ($1022($2_1 | 0, $3_1 | 0, $0_1 | 0, $0_1 + 288 | 0 | 0, $5_1 | 0, $4_1 | 0, 0 | 0) | 0) - $0_1 | 0;
   if (($0_1 | 0) > (287 | 0)) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = (($0_1 | 0) / (12 | 0) | 0 | 0) % (12 | 0) | 0;
  }
 }
 
 function $1206($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  $774($6_1 | 0, $3_1 | 0);
  $3_1 = $775($6_1 | 0) | 0;
  $1018($6_1 | 0) | 0;
  $1207($0_1 | 0, $5_1 + 20 | 0 | 0, $6_1 + 8 | 0 | 0, $2_1 | 0, $4_1 | 0, $3_1 | 0);
  $0_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  global$0 = $6_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1207($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $1208($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 4 | 0) | 0;
  label$1 : {
   if ((HEAPU8[$4_1 >> 0] | 0) & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = (($2_1 | 0) < (69 | 0) ? $2_1 + 2e3 | 0 : ($2_1 | 0) < (100 | 0) ? $2_1 + 1900 | 0 : $2_1) + -1900 | 0;
  }
 }
 
 function $1208($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (!($782($0_1 | 0, $5_1 + 8 | 0 | 0) | 0)) {
     break label$2
    }
    HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] | 0 | 6 | 0;
    $1_1 = 0;
    break label$1;
   }
   label$3 : {
    $1_1 = $779($0_1 | 0) | 0;
    if ($780($3_1 | 0, 2048 | 0, $1_1 | 0) | 0) {
     break label$3
    }
    HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] | 0 | 4 | 0;
    $1_1 = 0;
    break label$1;
   }
   $1_1 = $1196($3_1 | 0, $1_1 | 0, 0 | 0) | 0;
   label$4 : {
    label$5 : while (1) {
     $781($0_1 | 0) | 0;
     $1_1 = $1_1 + -48 | 0;
     $6_1 = $778($0_1 | 0, $5_1 + 8 | 0 | 0) | 0;
     if (($4_1 | 0) < (2 | 0)) {
      break label$4
     }
     if (!$6_1) {
      break label$4
     }
     $6_1 = $779($0_1 | 0) | 0;
     if (!($780($3_1 | 0, 2048 | 0, $6_1 | 0) | 0)) {
      break label$1
     }
     $4_1 = $4_1 + -1 | 0;
     $1_1 = Math_imul($1_1, 10) + ($1196($3_1 | 0, $6_1 | 0, 0 | 0) | 0) | 0;
     continue label$5;
    };
   }
   if (!($782($0_1 | 0, $5_1 + 8 | 0 | 0) | 0)) {
    break label$1
   }
   HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] | 0 | 2 | 0;
  }
  global$0 = $5_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1209($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0, $9_1 = 0, $13_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $156_1 = 0;
  $8_1 = global$0 - 32 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[$4_1 >> 2] = 0;
  $774($8_1 + 8 | 0 | 0, $3_1 | 0);
  $9_1 = $775($8_1 + 8 | 0 | 0) | 0;
  $1018($8_1 + 8 | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      switch ($6_1 + -65 | 0 | 0) {
      case 0:
      case 32:
       $1203($0_1 | 0, $5_1 + 24 | 0 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 1:
      case 33:
      case 39:
       $1205($0_1 | 0, $5_1 + 16 | 0 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 34:
       $1_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
       HEAP32[($8_1 + 24 | 0) >> 2] = $1195($0_1 | 0, HEAP32[($8_1 + 24 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $1084($1_1 | 0) | 0 | 0, ($1084($1_1 | 0) | 0) + ($1028($1_1 | 0) | 0) | 0 | 0) | 0;
       break label$2;
      case 35:
      case 36:
       $1210($0_1 | 0, $5_1 + 12 | 0 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 3:
       i64toi32_i32$1 = $8_1;
       i64toi32_i32$0 = 2032480100;
       HEAP32[($8_1 + 8 | 0) >> 2] = 623865125;
       HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($8_1 + 24 | 0) >> 2] = $1195($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 + 8 | 0 | 0, $8_1 + 16 | 0 | 0) | 0;
       break label$2;
      case 5:
       i64toi32_i32$1 = $8_1;
       i64toi32_i32$0 = 1680158061;
       HEAP32[($8_1 + 8 | 0) >> 2] = 623728933;
       HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($8_1 + 24 | 0) >> 2] = $1195($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 + 8 | 0 | 0, $8_1 + 16 | 0 | 0) | 0;
       break label$2;
      case 7:
       $1211($0_1 | 0, $5_1 + 8 | 0 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 8:
       $1212($0_1 | 0, $5_1 + 8 | 0 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 41:
       $1213($0_1 | 0, $5_1 + 28 | 0 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 44:
       $1214($0_1 | 0, $5_1 + 16 | 0 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 12:
       $1215($0_1 | 0, $5_1 + 4 | 0 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 45:
      case 51:
       $1216($0_1 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 47:
       $1217($0_1 | 0, $5_1 + 8 | 0 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 49:
       $14_1 = 0;
       $15_1 = HEAPU8[($14_1 + 14479 | 0) >> 0] | 0 | ((HEAPU8[($14_1 + 14480 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($14_1 + 14481 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($14_1 + 14482 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
       HEAP8[($8_1 + 15 | 0) >> 0] = $15_1;
       HEAP8[($8_1 + 16 | 0) >> 0] = $15_1 >>> 8 | 0;
       HEAP8[($8_1 + 17 | 0) >> 0] = $15_1 >>> 16 | 0;
       HEAP8[($8_1 + 18 | 0) >> 0] = $15_1 >>> 24 | 0;
       $13_1 = 0;
       i64toi32_i32$0 = HEAPU8[($13_1 + 14472 | 0) >> 0] | 0 | ((HEAPU8[($13_1 + 14473 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($13_1 + 14474 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($13_1 + 14475 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
       i64toi32_i32$1 = HEAPU8[($13_1 + 14476 | 0) >> 0] | 0 | ((HEAPU8[($13_1 + 14477 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($13_1 + 14478 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($13_1 + 14479 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
       $156_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1;
       HEAP32[($8_1 + 8 | 0) >> 2] = $156_1;
       HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$1;
       HEAP32[($8_1 + 24 | 0) >> 2] = $1195($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 + 8 | 0 | 0, $8_1 + 19 | 0 | 0) | 0;
       break label$2;
      case 17:
       HEAP8[($8_1 + 12 | 0) >> 0] = HEAPU8[(0 + 14487 | 0) >> 0] | 0;
       $16_1 = 0;
       HEAP32[($8_1 + 8 | 0) >> 2] = HEAPU8[($16_1 + 14483 | 0) >> 0] | 0 | ((HEAPU8[($16_1 + 14484 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($16_1 + 14485 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($16_1 + 14486 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
       HEAP32[($8_1 + 24 | 0) >> 2] = $1195($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 + 8 | 0 | 0, $8_1 + 13 | 0 | 0) | 0;
       break label$2;
      case 18:
       $1218($0_1 | 0, $5_1 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 19:
       i64toi32_i32$0 = $8_1;
       i64toi32_i32$1 = 1394948685;
       HEAP32[($8_1 + 8 | 0) >> 2] = 624576549;
       HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$1;
       HEAP32[($8_1 + 24 | 0) >> 2] = $1195($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 + 8 | 0 | 0, $8_1 + 16 | 0 | 0) | 0;
       break label$2;
      case 54:
       $1219($0_1 | 0, $5_1 + 24 | 0 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 55:
       $4_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) | 0;
       break label$1;
      case 23:
       $1_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
       HEAP32[($8_1 + 24 | 0) >> 2] = $1195($0_1 | 0, HEAP32[($8_1 + 24 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $1084($1_1 | 0) | 0 | 0, ($1084($1_1 | 0) | 0) + ($1028($1_1 | 0) | 0) | 0 | 0) | 0;
       break label$2;
      case 56:
       $1207($0_1 | 0, $5_1 + 20 | 0 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 24:
       $1220($0_1 | 0, $5_1 + 20 | 0 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      default:
       if (($6_1 | 0) == (37 | 0)) {
        break label$3
       }
       break;
      case 2:
      case 4:
      case 6:
      case 9:
      case 10:
      case 11:
      case 13:
      case 14:
      case 15:
      case 16:
      case 20:
      case 21:
      case 22:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 37:
      case 38:
      case 40:
      case 42:
      case 43:
      case 46:
      case 48:
      case 50:
      case 52:
      case 53:
       break label$4;
      };
     }
     HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 4 | 0;
     break label$2;
    }
    $1221($0_1 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
   }
   $4_1 = HEAP32[($8_1 + 24 | 0) >> 2] | 0;
  }
  global$0 = $8_1 + 32 | 0;
  return $4_1 | 0;
 }
 
 function $1210($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $1208($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   if (($2_1 + -1 | 0) >>> 0 > 30 >>> 0) {
    break label$1
   }
   if ($3_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1211($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $1208($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   if (($2_1 | 0) > (23 | 0)) {
    break label$1
   }
   if ($3_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1212($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $1208($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   if (($2_1 + -1 | 0) >>> 0 > 11 >>> 0) {
    break label$1
   }
   if ($3_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1213($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $1208($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 3 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   if (($2_1 | 0) > (365 | 0)) {
    break label$1
   }
   if ($3_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1214($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $1208($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   if (($2_1 | 0) > (12 | 0)) {
    break label$1
   }
   if ($3_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1 + -1 | 0;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1215($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $1208($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   if (($2_1 | 0) > (59 | 0)) {
    break label$1
   }
   if ($3_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1216($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  label$1 : {
   label$2 : while (1) {
    if (!($778($1_1 | 0, $5_1 + 8 | 0 | 0) | 0)) {
     break label$1
    }
    if (!($780($4_1 | 0, 8192 | 0, $779($1_1 | 0) | 0 | 0) | 0)) {
     break label$1
    }
    $781($1_1 | 0) | 0;
    continue label$2;
   };
  }
  label$3 : {
   if (!($782($1_1 | 0, $5_1 + 8 | 0 | 0) | 0)) {
    break label$3
   }
   HEAP32[$3_1 >> 2] = HEAP32[$3_1 >> 2] | 0 | 2 | 0;
  }
  global$0 = $5_1 + 16 | 0;
 }
 
 function $1217($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  label$1 : {
   $0_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
   if (($1028($0_1 | 0) | 0 | 0) != (0 - ($1028($0_1 + 12 | 0 | 0) | 0) | 0 | 0)) {
    break label$1
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 4 | 0;
   return;
  }
  $0_1 = ($1022($2_1 | 0, $3_1 | 0, $0_1 | 0, $0_1 + 24 | 0 | 0, $5_1 | 0, $4_1 | 0, 0 | 0) | 0) - $0_1 | 0;
  label$2 : {
   $4_1 = HEAP32[$1_1 >> 2] | 0;
   if (($4_1 | 0) != (12 | 0)) {
    break label$2
   }
   if ($0_1) {
    break label$2
   }
   HEAP32[$1_1 >> 2] = 0;
   return;
  }
  label$3 : {
   if (($4_1 | 0) > (11 | 0)) {
    break label$3
   }
   if (($0_1 | 0) != (12 | 0)) {
    break label$3
   }
   HEAP32[$1_1 >> 2] = $4_1 + 12 | 0;
  }
 }
 
 function $1218($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $1208($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   if (($2_1 | 0) > (60 | 0)) {
    break label$1
   }
   if ($3_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1219($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $1208($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 1 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   if (($2_1 | 0) > (6 | 0)) {
    break label$1
   }
   if ($3_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1220($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $1208($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 4 | 0) | 0;
  label$1 : {
   if ((HEAPU8[$4_1 >> 0] | 0) & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1 + -1900 | 0;
  }
 }
 
 function $1221($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  $2_1 = 6;
  label$1 : {
   label$2 : {
    if ($782($1_1 | 0, $5_1 + 8 | 0 | 0) | 0) {
     break label$2
    }
    $2_1 = 4;
    if (($1196($4_1 | 0, $779($1_1 | 0) | 0 | 0, 0 | 0) | 0 | 0) != (37 | 0)) {
     break label$2
    }
    $2_1 = 2;
    if (!($782($781($1_1 | 0) | 0 | 0, $5_1 + 8 | 0 | 0) | 0)) {
     break label$1
    }
   }
   HEAP32[$3_1 >> 2] = HEAP32[$3_1 >> 2] | 0 | $2_1 | 0;
  }
  global$0 = $5_1 + 16 | 0;
 }
 
 function $1222($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0, $10_1 = 0, $9_1 = 0, $11_1 = 0;
  $8_1 = global$0 - 32 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 16 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 24 | 0) >> 2] = $1_1;
  $774($8_1 + 8 | 0 | 0, $3_1 | 0);
  $1_1 = $819($8_1 + 8 | 0 | 0) | 0;
  $1018($8_1 + 8 | 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = 0;
  $2_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($6_1 | 0) == ($7_1 | 0)) {
     break label$1
    }
    if ($2_1) {
     break label$1
    }
    label$3 : {
     if ($824($8_1 + 24 | 0 | 0, $8_1 + 16 | 0 | 0) | 0) {
      break label$3
     }
     label$4 : {
      label$5 : {
       if (($1223($1_1 | 0, HEAP32[$6_1 >> 2] | 0 | 0, 0 | 0) | 0 | 0) != (37 | 0)) {
        break label$5
       }
       $2_1 = $6_1 + 4 | 0;
       if (($2_1 | 0) == ($7_1 | 0)) {
        break label$3
       }
       $9_1 = 0;
       label$6 : {
        label$7 : {
         $10_1 = $1223($1_1 | 0, HEAP32[$2_1 >> 2] | 0 | 0, 0 | 0) | 0;
         if (($10_1 | 0) == (69 | 0)) {
          break label$7
         }
         if (($10_1 & 255 | 0 | 0) == (48 | 0)) {
          break label$7
         }
         $11_1 = $10_1;
         $2_1 = $6_1;
         break label$6;
        }
        $6_1 = $6_1 + 8 | 0;
        if (($6_1 | 0) == ($7_1 | 0)) {
         break label$3
        }
        $11_1 = $1223($1_1 | 0, HEAP32[$6_1 >> 2] | 0 | 0, 0 | 0) | 0;
        $9_1 = $10_1;
       }
       HEAP32[($8_1 + 24 | 0) >> 2] = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1, HEAP32[($8_1 + 24 | 0) >> 2] | 0, HEAP32[($8_1 + 16 | 0) >> 2] | 0, $3_1, $4_1, $5_1, $11_1, $9_1) | 0;
       $6_1 = $2_1 + 8 | 0;
       break label$4;
      }
      label$8 : {
       if (!($822($1_1 | 0, 8192 | 0, HEAP32[$6_1 >> 2] | 0 | 0) | 0)) {
        break label$8
       }
       label$9 : {
        label$10 : while (1) {
         label$11 : {
          $6_1 = $6_1 + 4 | 0;
          if (($6_1 | 0) != ($7_1 | 0)) {
           break label$11
          }
          $6_1 = $7_1;
          break label$9;
         }
         if ($822($1_1 | 0, 8192 | 0, HEAP32[$6_1 >> 2] | 0 | 0) | 0) {
          continue label$10
         }
         break label$10;
        };
       }
       label$12 : while (1) {
        if (!($820($8_1 + 24 | 0 | 0, $8_1 + 16 | 0 | 0) | 0)) {
         break label$4
        }
        if (!($822($1_1 | 0, 8192 | 0, $821($8_1 + 24 | 0 | 0) | 0 | 0) | 0)) {
         break label$4
        }
        $823($8_1 + 24 | 0 | 0) | 0;
        continue label$12;
       };
      }
      label$13 : {
       if (($1091($1_1 | 0, $821($8_1 + 24 | 0 | 0) | 0 | 0) | 0 | 0) != ($1091($1_1 | 0, HEAP32[$6_1 >> 2] | 0 | 0) | 0 | 0)) {
        break label$13
       }
       $6_1 = $6_1 + 4 | 0;
       $823($8_1 + 24 | 0 | 0) | 0;
       break label$4;
      }
      HEAP32[$4_1 >> 2] = 4;
     }
     $2_1 = HEAP32[$4_1 >> 2] | 0;
     continue label$2;
    }
    break label$2;
   };
   HEAP32[$4_1 >> 2] = 4;
  }
  label$14 : {
   if (!($824($8_1 + 24 | 0 | 0, $8_1 + 16 | 0 | 0) | 0)) {
    break label$14
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $6_1 = HEAP32[($8_1 + 24 | 0) >> 2] | 0;
  global$0 = $8_1 + 32 | 0;
  return $6_1 | 0;
 }
 
 function $1223($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1) | 0 | 0;
 }
 
 function $1224($0_1) {
  $0_1 = $0_1 | 0;
  return 2 | 0;
 }
 
 function $1225($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $6_1 = 0, $12_1 = 0, $15_1 = 0, $17_1 = 0, $19_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 14664 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 14668 | 0) >> 2] | 0;
  $12_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $6_1 + 24 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $12_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 14656 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 14660 | 0) >> 2] | 0;
  $15_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $6_1 + 16 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $15_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 14648 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 14652 | 0) >> 2] | 0;
  $17_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $6_1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $17_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 14640 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 14644 | 0) >> 2] | 0;
  $19_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $6_1;
  HEAP32[i64toi32_i32$1 >> 2] = $19_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $0_1 = $1222($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$1 + 32 | 0 | 0) | 0;
  global$0 = i64toi32_i32$1 + 32 | 0;
  return $0_1 | 0;
 }
 
 function $1226($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
  return $1222($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $1227($6_1 | 0) | 0 | 0, ($1227($6_1 | 0) | 0) + (($1092($6_1 | 0) | 0) << 2 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1227($0_1) {
  $0_1 = $0_1 | 0;
  return $1229($1228($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1228($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!($1230($0_1 | 0) | 0)) {
    break label$1
   }
   return $1987($0_1 | 0) | 0 | 0;
  }
  return $1988($0_1 | 0) | 0 | 0;
 }
 
 function $1229($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1230($0_1) {
  $0_1 = $0_1 | 0;
  return (HEAPU8[(($1807($0_1 | 0) | 0) + 11 | 0) >> 0] | 0) >>> 7 | 0 | 0;
 }
 
 function $1231($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[(($1807($0_1 | 0) | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $1232($0_1) {
  $0_1 = $0_1 | 0;
  return HEAPU8[(($1807($0_1 | 0) | 0) + 11 | 0) >> 0] | 0 | 0;
 }
 
 function $1233($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  $774($6_1 | 0, $3_1 | 0);
  $3_1 = $819($6_1 | 0) | 0;
  $1018($6_1 | 0) | 0;
  $1234($0_1 | 0, $5_1 + 24 | 0 | 0, $6_1 + 8 | 0 | 0, $2_1 | 0, $4_1 | 0, $3_1 | 0);
  $0_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  global$0 = $6_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1234($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  label$1 : {
   $0_1 = FUNCTION_TABLE[HEAP32[(HEAP32[($0_1 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
   $0_1 = ($1089($2_1 | 0, $3_1 | 0, $0_1 | 0, $0_1 + 168 | 0 | 0, $5_1 | 0, $4_1 | 0, 0 | 0) | 0) - $0_1 | 0;
   if (($0_1 | 0) > (167 | 0)) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = (($0_1 | 0) / (12 | 0) | 0 | 0) % (7 | 0) | 0;
  }
 }
 
 function $1235($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  $774($6_1 | 0, $3_1 | 0);
  $3_1 = $819($6_1 | 0) | 0;
  $1018($6_1 | 0) | 0;
  $1236($0_1 | 0, $5_1 + 16 | 0 | 0, $6_1 + 8 | 0 | 0, $2_1 | 0, $4_1 | 0, $3_1 | 0);
  $0_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  global$0 = $6_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1236($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  label$1 : {
   $0_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
   $0_1 = ($1089($2_1 | 0, $3_1 | 0, $0_1 | 0, $0_1 + 288 | 0 | 0, $5_1 | 0, $4_1 | 0, 0 | 0) | 0) - $0_1 | 0;
   if (($0_1 | 0) > (287 | 0)) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = (($0_1 | 0) / (12 | 0) | 0 | 0) % (12 | 0) | 0;
  }
 }
 
 function $1237($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  $774($6_1 | 0, $3_1 | 0);
  $3_1 = $819($6_1 | 0) | 0;
  $1018($6_1 | 0) | 0;
  $1238($0_1 | 0, $5_1 + 20 | 0 | 0, $6_1 + 8 | 0 | 0, $2_1 | 0, $4_1 | 0, $3_1 | 0);
  $0_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  global$0 = $6_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1238($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $1239($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 4 | 0) | 0;
  label$1 : {
   if ((HEAPU8[$4_1 >> 0] | 0) & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = (($2_1 | 0) < (69 | 0) ? $2_1 + 2e3 | 0 : ($2_1 | 0) < (100 | 0) ? $2_1 + 1900 | 0 : $2_1) + -1900 | 0;
  }
 }
 
 function $1239($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (!($824($0_1 | 0, $5_1 + 8 | 0 | 0) | 0)) {
     break label$2
    }
    HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] | 0 | 6 | 0;
    $1_1 = 0;
    break label$1;
   }
   label$3 : {
    $1_1 = $821($0_1 | 0) | 0;
    if ($822($3_1 | 0, 2048 | 0, $1_1 | 0) | 0) {
     break label$3
    }
    HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] | 0 | 4 | 0;
    $1_1 = 0;
    break label$1;
   }
   $1_1 = $1223($3_1 | 0, $1_1 | 0, 0 | 0) | 0;
   label$4 : {
    label$5 : while (1) {
     $823($0_1 | 0) | 0;
     $1_1 = $1_1 + -48 | 0;
     $6_1 = $820($0_1 | 0, $5_1 + 8 | 0 | 0) | 0;
     if (($4_1 | 0) < (2 | 0)) {
      break label$4
     }
     if (!$6_1) {
      break label$4
     }
     $6_1 = $821($0_1 | 0) | 0;
     if (!($822($3_1 | 0, 2048 | 0, $6_1 | 0) | 0)) {
      break label$1
     }
     $4_1 = $4_1 + -1 | 0;
     $1_1 = Math_imul($1_1, 10) + ($1223($3_1 | 0, $6_1 | 0, 0 | 0) | 0) | 0;
     continue label$5;
    };
   }
   if (!($824($0_1 | 0, $5_1 + 8 | 0 | 0) | 0)) {
    break label$1
   }
   HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] | 0 | 2 | 0;
  }
  global$0 = $5_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1240($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $9_1 = 0, $73_1 = 0, $76_1 = 0, $78_1 = 0, $80_1 = 0, $94_1 = 0, $97_1 = 0, $99_1 = 0, $101_1 = 0, $184_1 = 0, $186_1 = 0, $207_1 = 0, $210_1 = 0, $212_1 = 0, $214_1 = 0;
  $8_1 = global$0 - 64 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 56 | 0) >> 2] = $1_1;
  HEAP32[$4_1 >> 2] = 0;
  $774($8_1 | 0, $3_1 | 0);
  $9_1 = $819($8_1 | 0) | 0;
  $1018($8_1 | 0) | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      switch ($6_1 + -65 | 0 | 0) {
      case 0:
      case 32:
       $1234($0_1 | 0, $5_1 + 24 | 0 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 1:
      case 33:
      case 39:
       $1236($0_1 | 0, $5_1 + 16 | 0 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 34:
       $1_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
       HEAP32[($8_1 + 56 | 0) >> 2] = $1222($0_1 | 0, HEAP32[($8_1 + 56 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $1227($1_1 | 0) | 0 | 0, ($1227($1_1 | 0) | 0) + (($1092($1_1 | 0) | 0) << 2 | 0) | 0 | 0) | 0;
       break label$2;
      case 35:
      case 36:
       $1241($0_1 | 0, $5_1 + 12 | 0 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 3:
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 14520 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 14524 | 0) >> 2] | 0;
       $73_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1 + 24 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $73_1;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 14512 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 14516 | 0) >> 2] | 0;
       $76_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $8_1 + 16 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $76_1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 14504 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 14508 | 0) >> 2] | 0;
       $78_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1;
       HEAP32[($8_1 + 8 | 0) >> 2] = $78_1;
       HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 14496 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 14500 | 0) >> 2] | 0;
       $80_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $8_1;
       HEAP32[$8_1 >> 2] = $80_1;
       HEAP32[($8_1 + 4 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($8_1 + 56 | 0) >> 2] = $1222($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 | 0, $8_1 + 32 | 0 | 0) | 0;
       break label$2;
      case 5:
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 14552 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 14556 | 0) >> 2] | 0;
       $94_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1 + 24 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $94_1;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 14544 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 14548 | 0) >> 2] | 0;
       $97_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $8_1 + 16 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $97_1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 14536 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 14540 | 0) >> 2] | 0;
       $99_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1;
       HEAP32[($8_1 + 8 | 0) >> 2] = $99_1;
       HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 14528 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 14532 | 0) >> 2] | 0;
       $101_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $8_1;
       HEAP32[$8_1 >> 2] = $101_1;
       HEAP32[($8_1 + 4 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($8_1 + 56 | 0) >> 2] = $1222($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 | 0, $8_1 + 32 | 0 | 0) | 0;
       break label$2;
      case 7:
       $1242($0_1 | 0, $5_1 + 8 | 0 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 8:
       $1243($0_1 | 0, $5_1 + 8 | 0 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 41:
       $1244($0_1 | 0, $5_1 + 28 | 0 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 44:
       $1245($0_1 | 0, $5_1 + 16 | 0 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 12:
       $1246($0_1 | 0, $5_1 + 4 | 0 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 45:
      case 51:
       $1247($0_1 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 47:
       $1248($0_1 | 0, $5_1 + 8 | 0 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 49:
       $6_1 = $2173($8_1 | 0, 14560 | 0, 44 | 0) | 0;
       HEAP32[($6_1 + 56 | 0) >> 2] = $1222($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $6_1 | 0, $6_1 + 44 | 0 | 0) | 0;
       break label$2;
      case 17:
       HEAP32[($8_1 + 16 | 0) >> 2] = HEAP32[(0 + 14624 | 0) >> 2] | 0;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 14616 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 14620 | 0) >> 2] | 0;
       $184_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1;
       HEAP32[($8_1 + 8 | 0) >> 2] = $184_1;
       HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 14608 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 14612 | 0) >> 2] | 0;
       $186_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $8_1;
       HEAP32[$8_1 >> 2] = $186_1;
       HEAP32[($8_1 + 4 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($8_1 + 56 | 0) >> 2] = $1222($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 | 0, $8_1 + 20 | 0 | 0) | 0;
       break label$2;
      case 18:
       $1249($0_1 | 0, $5_1 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 19:
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 14664 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 14668 | 0) >> 2] | 0;
       $207_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1 + 24 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $207_1;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 14656 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 14660 | 0) >> 2] | 0;
       $210_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $8_1 + 16 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $210_1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 14648 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 14652 | 0) >> 2] | 0;
       $212_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1;
       HEAP32[($8_1 + 8 | 0) >> 2] = $212_1;
       HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 14640 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 14644 | 0) >> 2] | 0;
       $214_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $8_1;
       HEAP32[$8_1 >> 2] = $214_1;
       HEAP32[($8_1 + 4 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($8_1 + 56 | 0) >> 2] = $1222($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 | 0, $8_1 + 32 | 0 | 0) | 0;
       break label$2;
      case 54:
       $1250($0_1 | 0, $5_1 + 24 | 0 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 55:
       $4_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) | 0;
       break label$1;
      case 23:
       $1_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
       HEAP32[($8_1 + 56 | 0) >> 2] = $1222($0_1 | 0, HEAP32[($8_1 + 56 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $1227($1_1 | 0) | 0 | 0, ($1227($1_1 | 0) | 0) + (($1092($1_1 | 0) | 0) << 2 | 0) | 0 | 0) | 0;
       break label$2;
      case 56:
       $1238($0_1 | 0, $5_1 + 20 | 0 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 24:
       $1251($0_1 | 0, $5_1 + 20 | 0 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      default:
       if (($6_1 | 0) == (37 | 0)) {
        break label$3
       }
       break;
      case 2:
      case 4:
      case 6:
      case 9:
      case 10:
      case 11:
      case 13:
      case 14:
      case 15:
      case 16:
      case 20:
      case 21:
      case 22:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 37:
      case 38:
      case 40:
      case 42:
      case 43:
      case 46:
      case 48:
      case 50:
      case 52:
      case 53:
       break label$4;
      };
     }
     HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 4 | 0;
     break label$2;
    }
    $1252($0_1 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
   }
   $4_1 = HEAP32[($8_1 + 56 | 0) >> 2] | 0;
  }
  global$0 = $8_1 + 64 | 0;
  return $4_1 | 0;
 }
 
 function $1241($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $1239($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   if (($2_1 + -1 | 0) >>> 0 > 30 >>> 0) {
    break label$1
   }
   if ($3_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1242($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $1239($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   if (($2_1 | 0) > (23 | 0)) {
    break label$1
   }
   if ($3_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1243($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $1239($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   if (($2_1 + -1 | 0) >>> 0 > 11 >>> 0) {
    break label$1
   }
   if ($3_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1244($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $1239($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 3 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   if (($2_1 | 0) > (365 | 0)) {
    break label$1
   }
   if ($3_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1245($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $1239($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   if (($2_1 | 0) > (12 | 0)) {
    break label$1
   }
   if ($3_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1 + -1 | 0;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1246($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $1239($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   if (($2_1 | 0) > (59 | 0)) {
    break label$1
   }
   if ($3_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1247($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  label$1 : {
   label$2 : while (1) {
    if (!($820($1_1 | 0, $5_1 + 8 | 0 | 0) | 0)) {
     break label$1
    }
    if (!($822($4_1 | 0, 8192 | 0, $821($1_1 | 0) | 0 | 0) | 0)) {
     break label$1
    }
    $823($1_1 | 0) | 0;
    continue label$2;
   };
  }
  label$3 : {
   if (!($824($1_1 | 0, $5_1 + 8 | 0 | 0) | 0)) {
    break label$3
   }
   HEAP32[$3_1 >> 2] = HEAP32[$3_1 >> 2] | 0 | 2 | 0;
  }
  global$0 = $5_1 + 16 | 0;
 }
 
 function $1248($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  label$1 : {
   $0_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
   if (($1092($0_1 | 0) | 0 | 0) != (0 - ($1092($0_1 + 12 | 0 | 0) | 0) | 0 | 0)) {
    break label$1
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 4 | 0;
   return;
  }
  $0_1 = ($1089($2_1 | 0, $3_1 | 0, $0_1 | 0, $0_1 + 24 | 0 | 0, $5_1 | 0, $4_1 | 0, 0 | 0) | 0) - $0_1 | 0;
  label$2 : {
   $4_1 = HEAP32[$1_1 >> 2] | 0;
   if (($4_1 | 0) != (12 | 0)) {
    break label$2
   }
   if ($0_1) {
    break label$2
   }
   HEAP32[$1_1 >> 2] = 0;
   return;
  }
  label$3 : {
   if (($4_1 | 0) > (11 | 0)) {
    break label$3
   }
   if (($0_1 | 0) != (12 | 0)) {
    break label$3
   }
   HEAP32[$1_1 >> 2] = $4_1 + 12 | 0;
  }
 }
 
 function $1249($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $1239($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   if (($2_1 | 0) > (60 | 0)) {
    break label$1
   }
   if ($3_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1250($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $1239($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 1 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   if (($2_1 | 0) > (6 | 0)) {
    break label$1
   }
   if ($3_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1251($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $1239($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 4 | 0) | 0;
  label$1 : {
   if ((HEAPU8[$4_1 >> 0] | 0) & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1 + -1900 | 0;
  }
 }
 
 function $1252($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  $2_1 = 6;
  label$1 : {
   label$2 : {
    if ($824($1_1 | 0, $5_1 + 8 | 0 | 0) | 0) {
     break label$2
    }
    $2_1 = 4;
    if (($1223($4_1 | 0, $821($1_1 | 0) | 0 | 0, 0 | 0) | 0 | 0) != (37 | 0)) {
     break label$2
    }
    $2_1 = 2;
    if (!($824($823($1_1 | 0) | 0 | 0, $5_1 + 8 | 0 | 0) | 0)) {
     break label$1
    }
   }
   HEAP32[$3_1 >> 2] = HEAP32[$3_1 >> 2] | 0 | $2_1 | 0;
  }
  global$0 = $5_1 + 16 | 0;
 }
 
 function $1253($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0;
  $7_1 = global$0 - 128 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 12 | 0) >> 2] = $7_1 + 116 | 0;
  $1254($0_1 + 8 | 0 | 0, $7_1 + 16 | 0 | 0, $7_1 + 12 | 0 | 0, $4_1 | 0, $5_1 | 0, $6_1 | 0);
  $1_1 = $1255($7_1 + 16 | 0 | 0, HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0, $1_1 | 0) | 0;
  global$0 = $7_1 + 128 | 0;
  return $1_1 | 0;
 }
 
 function $1254($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP8[($6_1 + 15 | 0) >> 0] = 0;
  HEAP8[($6_1 + 14 | 0) >> 0] = $5_1;
  HEAP8[($6_1 + 13 | 0) >> 0] = $4_1;
  HEAP8[($6_1 + 12 | 0) >> 0] = 37;
  label$1 : {
   if (!$5_1) {
    break label$1
   }
   $1256($6_1 + 13 | 0 | 0, $6_1 + 14 | 0 | 0);
  }
  HEAP32[$2_1 >> 2] = $1_1 + (fimport$98($1_1 | 0, $1257($1_1 | 0, HEAP32[$2_1 >> 2] | 0 | 0) | 0 | 0, $6_1 + 12 | 0 | 0, $3_1 | 0, HEAP32[$0_1 >> 2] | 0 | 0) | 0) | 0;
  global$0 = $6_1 + 16 | 0;
 }
 
 function $1255($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1260($1258($0_1 | 0) | 0 | 0, $1258($1_1 | 0) | 0 | 0, $1259($2_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1256($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP8[($2_1 + 15 | 0) >> 0] = HEAPU8[($1767($0_1 | 0) | 0) >> 0] | 0;
  HEAP8[$0_1 >> 0] = HEAPU8[($1767($1_1 | 0) | 0) >> 0] | 0;
  HEAP8[$1_1 >> 0] = HEAPU8[($1767($2_1 + 15 | 0 | 0) | 0) >> 0] | 0;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1257($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1_1 - $0_1 | 0 | 0;
 }
 
 function $1258($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1259($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1260($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1991($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $1261($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0;
  $7_1 = global$0 - 416 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 12 | 0) >> 2] = $7_1 + 416 | 0;
  $1262($0_1 + 8 | 0 | 0, $7_1 + 16 | 0 | 0, $7_1 + 12 | 0 | 0, $4_1 | 0, $5_1 | 0, $6_1 | 0);
  $1_1 = $1263($7_1 + 16 | 0 | 0, HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0, $1_1 | 0) | 0;
  global$0 = $7_1 + 416 | 0;
  return $1_1 | 0;
 }
 
 function $1262($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 144 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $6_1 + 132 | 0;
  $1254($0_1 | 0, $6_1 + 32 | 0 | 0, $6_1 + 28 | 0 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0);
  HEAP32[($6_1 + 16 | 0) >> 2] = 0;
  HEAP32[($6_1 + 20 | 0) >> 2] = 0;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 32 | 0;
  label$1 : {
   $0_1 = $1265($1_1 | 0, $6_1 + 12 | 0 | 0, $1264($1_1 | 0, HEAP32[$2_1 >> 2] | 0 | 0) | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[$0_1 >> 2] | 0 | 0) | 0;
   if (($0_1 | 0) != (-1 | 0)) {
    break label$1
   }
   $1266($6_1 | 0);
   abort();
  }
  HEAP32[$2_1 >> 2] = $1_1 + ($0_1 << 2 | 0) | 0;
  global$0 = $6_1 + 144 | 0;
 }
 
 function $1263($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1269($1267($0_1 | 0) | 0 | 0, $1267($1_1 | 0) | 0 | 0, $1268($2_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1264($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1_1 - $0_1 | 0) >> 2 | 0 | 0;
 }
 
 function $1265($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
  $4_1 = $1082($5_1 + 8 | 0 | 0, $5_1 + 12 | 0 | 0) | 0;
  $0_1 = $585($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  $1083($4_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1266($0_1) {
  $0_1 = $0_1 | 0;
  fimport$93();
  abort();
 }
 
 function $1267($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1268($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1269($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1992($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $1270($0_1) {
  $0_1 = $0_1 | 0;
  return $1271() | 0 | 0;
 }
 
 function $1271() {
  return $1272() | 0 | 0;
 }
 
 function $1272() {
  return 127 | 0;
 }
 
 function $1273($0_1) {
  $0_1 = $0_1 | 0;
  return $1271() | 0 | 0;
 }
 
 function $1274($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1037($0_1 | 0) | 0;
 }
 
 function $1275($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1037($0_1 | 0) | 0;
 }
 
 function $1276($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1037($0_1 | 0) | 0;
 }
 
 function $1277($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1146($0_1 | 0, 1 | 0, 45 | 0) | 0;
 }
 
 function $1278($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1279($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0_1;
  $3_1 = 67109634;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
 }
 
 function $1280($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0_1;
  $3_1 = 67109634;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
 }
 
 function $1281($0_1) {
  $0_1 = $0_1 | 0;
  return $1271() | 0 | 0;
 }
 
 function $1282($0_1) {
  $0_1 = $0_1 | 0;
  return $1271() | 0 | 0;
 }
 
 function $1283($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1037($0_1 | 0) | 0;
 }
 
 function $1284($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1037($0_1 | 0) | 0;
 }
 
 function $1285($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1037($0_1 | 0) | 0;
 }
 
 function $1286($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1146($0_1 | 0, 1 | 0, 45 | 0) | 0;
 }
 
 function $1287($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1288($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0_1;
  $3_1 = 67109634;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
 }
 
 function $1289($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0_1;
  $3_1 = 67109634;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
 }
 
 function $1290($0_1) {
  $0_1 = $0_1 | 0;
  return $1291() | 0 | 0;
 }
 
 function $1291() {
  return $1292() | 0 | 0;
 }
 
 function $1292() {
  return 2147483647 | 0;
 }
 
 function $1293($0_1) {
  $0_1 = $0_1 | 0;
  return $1291() | 0 | 0;
 }
 
 function $1294($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1037($0_1 | 0) | 0;
 }
 
 function $1295($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1296($0_1 | 0) | 0;
 }
 
 function $1296($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $1014($0_1 | 0, $1_1 + 8 | 0 | 0, $1_1 | 0) | 0;
  $1297($0_1 | 0);
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1297($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = $1812($0_1 | 0) | 0;
  $0_1 = 0;
  label$1 : while (1) {
   label$2 : {
    if (($0_1 | 0) != (3 | 0)) {
     break label$2
    }
    return;
   }
   HEAP32[($1_1 + ($0_1 << 2 | 0) | 0) >> 2] = 0;
   $0_1 = $0_1 + 1 | 0;
   continue label$1;
  };
 }
 
 function $1298($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1296($0_1 | 0) | 0;
 }
 
 function $1299($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1178($0_1 | 0, 1 | 0, 45 | 0) | 0;
 }
 
 function $1300($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1301($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0_1;
  $3_1 = 67109634;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
 }
 
 function $1302($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0_1;
  $3_1 = 67109634;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
 }
 
 function $1303($0_1) {
  $0_1 = $0_1 | 0;
  return $1291() | 0 | 0;
 }
 
 function $1304($0_1) {
  $0_1 = $0_1 | 0;
  return $1291() | 0 | 0;
 }
 
 function $1305($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1037($0_1 | 0) | 0;
 }
 
 function $1306($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1296($0_1 | 0) | 0;
 }
 
 function $1307($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1296($0_1 | 0) | 0;
 }
 
 function $1308($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1178($0_1 | 0, 1 | 0, 45 | 0) | 0;
 }
 
 function $1309($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1310($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0_1;
  $3_1 = 67109634;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
 }
 
 function $1311($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0_1;
  $3_1 = 67109634;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
 }
 
 function $1312($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $10_1 = 0, $8_1 = 0, $11_1 = 0, $12_1 = 0, i64toi32_i32$1 = 0;
  $7_1 = global$0 - 288 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 272 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 280 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = 275;
  $1_1 = $1155($7_1 + 152 | 0 | 0, $7_1 + 160 | 0 | 0, $7_1 + 16 | 0 | 0) | 0;
  $774($7_1 + 144 | 0 | 0, $4_1 | 0);
  $8_1 = $775($7_1 + 144 | 0 | 0) | 0;
  HEAP8[($7_1 + 143 | 0) >> 0] = 0;
  label$1 : {
   if (!($1314($7_1 + 280 | 0 | 0, $2_1 | 0, $3_1 | 0, $7_1 + 144 | 0 | 0, $773($4_1 | 0) | 0 | 0, $5_1 | 0, $7_1 + 143 | 0 | 0, $8_1 | 0, $1_1 | 0, $7_1 + 148 | 0 | 0, $7_1 + 260 | 0 | 0) | 0)) {
    break label$1
   }
   $11_1 = 0;
   $12_1 = HEAPU8[($11_1 + 14683 | 0) >> 0] | 0 | ((HEAPU8[($11_1 + 14684 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($11_1 + 14685 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($11_1 + 14686 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP8[($7_1 + 135 | 0) >> 0] = $12_1;
   HEAP8[($7_1 + 136 | 0) >> 0] = $12_1 >>> 8 | 0;
   HEAP8[($7_1 + 137 | 0) >> 0] = $12_1 >>> 16 | 0;
   HEAP8[($7_1 + 138 | 0) >> 0] = $12_1 >>> 24 | 0;
   $10_1 = 0;
   i64toi32_i32$1 = HEAPU8[($10_1 + 14680 | 0) >> 0] | 0 | ((HEAPU8[($10_1 + 14681 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($10_1 + 14682 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($10_1 + 14683 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP32[($7_1 + 128 | 0) >> 2] = HEAPU8[($10_1 + 14676 | 0) >> 0] | 0 | ((HEAPU8[($10_1 + 14677 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($10_1 + 14678 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($10_1 + 14679 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP32[($7_1 + 132 | 0) >> 2] = i64toi32_i32$1;
   $1071($8_1 | 0, $7_1 + 128 | 0 | 0, $7_1 + 138 | 0 | 0, $7_1 + 118 | 0 | 0) | 0;
   HEAP32[($7_1 + 16 | 0) >> 2] = 274;
   $8_1 = $1155($7_1 + 8 | 0 | 0, 0 | 0, $7_1 + 16 | 0 | 0) | 0;
   $2_1 = $7_1 + 16 | 0;
   label$2 : {
    label$3 : {
     if (((HEAP32[($7_1 + 148 | 0) >> 2] | 0) - ($1315($1_1 | 0) | 0) | 0 | 0) < (99 | 0)) {
      break label$3
     }
     $1157($8_1 | 0, $2160(((HEAP32[($7_1 + 148 | 0) >> 2] | 0) - ($1315($1_1 | 0) | 0) | 0) + 2 | 0 | 0) | 0 | 0);
     if (!($1315($8_1 | 0) | 0)) {
      break label$2
     }
     $2_1 = $1315($8_1 | 0) | 0;
    }
    label$4 : {
     if (!(HEAPU8[($7_1 + 143 | 0) >> 0] | 0)) {
      break label$4
     }
     HEAP8[$2_1 >> 0] = 45;
     $2_1 = $2_1 + 1 | 0;
    }
    $4_1 = $1315($1_1 | 0) | 0;
    label$5 : {
     label$6 : while (1) {
      label$7 : {
       if ($4_1 >>> 0 < (HEAP32[($7_1 + 148 | 0) >> 2] | 0) >>> 0) {
        break label$7
       }
       HEAP8[$2_1 >> 0] = 0;
       HEAP32[$7_1 >> 2] = $6_1;
       if (($976($7_1 + 16 | 0 | 0, 14672 | 0, $7_1 | 0) | 0 | 0) != (1 | 0)) {
        break label$5
       }
       $1159($8_1 | 0) | 0;
       break label$1;
      }
      HEAP8[$2_1 >> 0] = HEAPU8[(($7_1 + 128 | 0) + (($1124($7_1 + 118 | 0 | 0, $1316($7_1 + 118 | 0 | 0) | 0 | 0, $4_1 | 0) | 0) - ($7_1 + 118 | 0) | 0) | 0) >> 0] | 0;
      $2_1 = $2_1 + 1 | 0;
      $4_1 = $4_1 + 1 | 0;
      continue label$6;
     };
    }
    $1266($7_1 | 0);
    abort();
   }
   $2029();
   abort();
  }
  label$8 : {
   if (!($782($7_1 + 280 | 0 | 0, $7_1 + 272 | 0 | 0) | 0)) {
    break label$8
   }
   HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 2 | 0;
  }
  $4_1 = HEAP32[($7_1 + 280 | 0) >> 2] | 0;
  $1018($7_1 + 144 | 0 | 0) | 0;
  $1159($1_1 | 0) | 0;
  global$0 = $7_1 + 288 | 0;
  return $4_1 | 0;
 }
 
 function $1313($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $1314($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  var $11_1 = 0, $15_1 = 0, $16_1 = 0, $14_1 = 0, $12_1 = 0, $17_1 = 0, $13_1 = 0, $18_1 = 0, $19_1 = 0;
  $11_1 = global$0 - 560 | 0;
  global$0 = $11_1;
  HEAP32[($11_1 + 548 | 0) >> 2] = $10_1;
  HEAP32[($11_1 + 552 | 0) >> 2] = $1_1;
  HEAP32[($11_1 + 104 | 0) >> 2] = 275;
  $12_1 = $1317($11_1 + 136 | 0 | 0, $11_1 + 144 | 0 | 0, $11_1 + 104 | 0 | 0) | 0;
  $1_1 = $1318($12_1 | 0) | 0;
  HEAP32[($11_1 + 132 | 0) >> 2] = $1_1;
  HEAP32[($11_1 + 128 | 0) >> 2] = $1_1 + 400 | 0;
  $13_1 = $1037($11_1 + 104 | 0 | 0) | 0;
  $14_1 = $1037($11_1 + 88 | 0 | 0) | 0;
  $15_1 = $1037($11_1 + 72 | 0 | 0) | 0;
  $16_1 = $1037($11_1 + 56 | 0 | 0) | 0;
  $17_1 = $1037($11_1 + 40 | 0 | 0) | 0;
  $1319($2_1 | 0, $3_1 | 0, $11_1 + 120 | 0 | 0, $11_1 + 119 | 0 | 0, $11_1 + 118 | 0 | 0, $13_1 | 0, $14_1 | 0, $15_1 | 0, $16_1 | 0, $11_1 + 36 | 0 | 0);
  HEAP32[$9_1 >> 2] = $1315($8_1 | 0) | 0;
  $18_1 = $4_1 & 512 | 0;
  $19_1 = $18_1 >>> 9 | 0;
  $1_1 = 0;
  $2_1 = 0;
  label$1 : while (1) {
   $10_1 = $2_1;
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       if (($1_1 | 0) == (4 | 0)) {
        break label$5
       }
       if (!($778($0_1 | 0, $11_1 + 552 | 0 | 0) | 0)) {
        break label$5
       }
       $4_1 = 0;
       $2_1 = $10_1;
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            switch (HEAP8[(($11_1 + 120 | 0) + $1_1 | 0) >> 0] | 0 | 0) {
            case 1:
             if (($1_1 | 0) == (3 | 0)) {
              break label$3
             }
             label$12 : {
              if (!($780($7_1 | 0, 8192 | 0, $779($0_1 | 0) | 0 | 0) | 0)) {
               break label$12
              }
              $1320($11_1 + 24 | 0 | 0, $0_1 | 0, 0 | 0);
              $2071($17_1 | 0, $1321($11_1 + 24 | 0 | 0) | 0 | 0);
              break label$9;
             }
             HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
             $0_1 = 0;
             break label$4;
            case 0:
             break label$10;
            case 4:
             break label$6;
            case 2:
             break label$7;
            case 3:
             break label$8;
            default:
             break label$2;
            };
           }
           if (($1_1 | 0) == (3 | 0)) {
            break label$3
           }
          }
          label$13 : while (1) {
           if (!($778($0_1 | 0, $11_1 + 552 | 0 | 0) | 0)) {
            break label$3
           }
           if (!($780($7_1 | 0, 8192 | 0, $779($0_1 | 0) | 0 | 0) | 0)) {
            break label$3
           }
           $1320($11_1 + 24 | 0 | 0, $0_1 | 0, 0 | 0);
           $2071($17_1 | 0, $1321($11_1 + 24 | 0 | 0) | 0 | 0);
           continue label$13;
          };
         }
         if (($1028($15_1 | 0) | 0 | 0) == (0 - ($1028($16_1 | 0) | 0) | 0 | 0)) {
          break label$3
         }
         label$14 : {
          label$15 : {
           if (!($1028($15_1 | 0) | 0)) {
            break label$15
           }
           if ($1028($16_1 | 0) | 0) {
            break label$14
           }
          }
          $4_1 = $1028($15_1 | 0) | 0;
          $2_1 = $779($0_1 | 0) | 0;
          label$16 : {
           if (!$4_1) {
            break label$16
           }
           label$17 : {
            if (($2_1 & 255 | 0 | 0) != (HEAPU8[($1040($15_1 | 0, 0 | 0) | 0) >> 0] | 0 | 0)) {
             break label$17
            }
            $781($0_1 | 0) | 0;
            $2_1 = ($1028($15_1 | 0) | 0) >>> 0 > 1 >>> 0 ? $15_1 : $10_1;
            break label$2;
           }
           HEAP8[$6_1 >> 0] = 1;
           break label$3;
          }
          if (($2_1 & 255 | 0 | 0) != (HEAPU8[($1040($16_1 | 0, 0 | 0) | 0) >> 0] | 0 | 0)) {
           break label$3
          }
          $781($0_1 | 0) | 0;
          HEAP8[$6_1 >> 0] = 1;
          $2_1 = ($1028($16_1 | 0) | 0) >>> 0 > 1 >>> 0 ? $16_1 : $10_1;
          break label$2;
         }
         label$18 : {
          if ((($779($0_1 | 0) | 0) & 255 | 0 | 0) != (HEAPU8[($1040($15_1 | 0, 0 | 0) | 0) >> 0] | 0 | 0)) {
           break label$18
          }
          $781($0_1 | 0) | 0;
          $2_1 = ($1028($15_1 | 0) | 0) >>> 0 > 1 >>> 0 ? $15_1 : $10_1;
          break label$2;
         }
         label$19 : {
          if ((($779($0_1 | 0) | 0) & 255 | 0 | 0) != (HEAPU8[($1040($16_1 | 0, 0 | 0) | 0) >> 0] | 0 | 0)) {
           break label$19
          }
          $781($0_1 | 0) | 0;
          HEAP8[$6_1 >> 0] = 1;
          $2_1 = ($1028($16_1 | 0) | 0) >>> 0 > 1 >>> 0 ? $16_1 : $10_1;
          break label$2;
         }
         HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
         $0_1 = 0;
         break label$4;
        }
        label$20 : {
         if ($1_1 >>> 0 < 2 >>> 0) {
          break label$20
         }
         if ($10_1) {
          break label$20
         }
         $2_1 = 0;
         if ((($1_1 | 0) == (2 | 0) & (HEAPU8[($11_1 + 123 | 0) >> 0] | 0 | 0) != (0 | 0) | 0 | $19_1 | 0 | 0) != (1 | 0)) {
          break label$2
         }
        }
        HEAP32[($11_1 + 16 | 0) >> 2] = $1132($14_1 | 0) | 0;
        $4_1 = $1322($11_1 + 24 | 0 | 0, $11_1 + 16 | 0 | 0, 0 | 0) | 0;
        label$21 : {
         if (!$1_1) {
          break label$21
         }
         if ((HEAPU8[(($1_1 + ($11_1 + 120 | 0) | 0) + -1 | 0) >> 0] | 0) >>> 0 > 1 >>> 0) {
          break label$21
         }
         label$22 : {
          label$23 : while (1) {
           HEAP32[($11_1 + 16 | 0) >> 2] = $1133($14_1 | 0) | 0;
           if (!($1323($4_1 | 0, $11_1 + 16 | 0 | 0) | 0)) {
            break label$22
           }
           if (!($780($7_1 | 0, 8192 | 0, HEAP8[($1324($4_1 | 0) | 0) >> 0] | 0 | 0) | 0)) {
            break label$22
           }
           $1325($4_1 | 0) | 0;
           continue label$23;
          };
         }
         HEAP32[($11_1 + 16 | 0) >> 2] = $1132($14_1 | 0) | 0;
         label$24 : {
          $4_1 = $1326($4_1 | 0, $11_1 + 16 | 0 | 0) | 0;
          if ($4_1 >>> 0 > ($1028($17_1 | 0) | 0) >>> 0) {
           break label$24
          }
          HEAP32[($11_1 + 16 | 0) >> 2] = $1133($17_1 | 0) | 0;
          if ($1328($1327($11_1 + 16 | 0 | 0, $4_1 | 0) | 0 | 0, $1133($17_1 | 0) | 0 | 0, $1132($14_1 | 0) | 0 | 0) | 0) {
           break label$21
          }
         }
         HEAP32[($11_1 + 8 | 0) >> 2] = $1132($14_1 | 0) | 0;
         $1322($11_1 + 16 | 0 | 0, $11_1 + 8 | 0 | 0, 0 | 0) | 0;
         HEAP32[($11_1 + 24 | 0) >> 2] = HEAP32[($11_1 + 16 | 0) >> 2] | 0;
        }
        HEAP32[($11_1 + 16 | 0) >> 2] = HEAP32[($11_1 + 24 | 0) >> 2] | 0;
        label$25 : {
         label$26 : while (1) {
          HEAP32[($11_1 + 8 | 0) >> 2] = $1133($14_1 | 0) | 0;
          if (!($1323($11_1 + 16 | 0 | 0, $11_1 + 8 | 0 | 0) | 0)) {
           break label$25
          }
          if (!($778($0_1 | 0, $11_1 + 552 | 0 | 0) | 0)) {
           break label$25
          }
          if ((($779($0_1 | 0) | 0) & 255 | 0 | 0) != (HEAPU8[($1324($11_1 + 16 | 0 | 0) | 0) >> 0] | 0 | 0)) {
           break label$25
          }
          $781($0_1 | 0) | 0;
          $1325($11_1 + 16 | 0 | 0) | 0;
          continue label$26;
         };
        }
        if (!$18_1) {
         break label$3
        }
        HEAP32[($11_1 + 8 | 0) >> 2] = $1133($14_1 | 0) | 0;
        if (!($1323($11_1 + 16 | 0 | 0, $11_1 + 8 | 0 | 0) | 0)) {
         break label$3
        }
        HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
        $0_1 = 0;
        break label$4;
       }
       label$27 : {
        label$28 : while (1) {
         if (!($778($0_1 | 0, $11_1 + 552 | 0 | 0) | 0)) {
          break label$27
         }
         label$29 : {
          label$30 : {
           $2_1 = $779($0_1 | 0) | 0;
           if (!($780($7_1 | 0, 2048 | 0, $2_1 | 0) | 0)) {
            break label$30
           }
           label$31 : {
            $3_1 = HEAP32[$9_1 >> 2] | 0;
            if (($3_1 | 0) != (HEAP32[($11_1 + 548 | 0) >> 2] | 0 | 0)) {
             break label$31
            }
            $1329($8_1 | 0, $9_1 | 0, $11_1 + 548 | 0 | 0);
            $3_1 = HEAP32[$9_1 >> 2] | 0;
           }
           HEAP32[$9_1 >> 2] = $3_1 + 1 | 0;
           HEAP8[$3_1 >> 0] = $2_1;
           $4_1 = $4_1 + 1 | 0;
           break label$29;
          }
          $3_1 = $1028($13_1 | 0) | 0;
          if (!$4_1) {
           break label$27
          }
          if (!$3_1) {
           break label$27
          }
          if (($2_1 & 255 | 0 | 0) != ((HEAPU8[($11_1 + 118 | 0) >> 0] | 0) & 255 | 0 | 0)) {
           break label$27
          }
          label$32 : {
           $2_1 = HEAP32[($11_1 + 132 | 0) >> 2] | 0;
           if (($2_1 | 0) != (HEAP32[($11_1 + 128 | 0) >> 2] | 0 | 0)) {
            break label$32
           }
           $1330($12_1 | 0, $11_1 + 132 | 0 | 0, $11_1 + 128 | 0 | 0);
           $2_1 = HEAP32[($11_1 + 132 | 0) >> 2] | 0;
          }
          HEAP32[($11_1 + 132 | 0) >> 2] = $2_1 + 4 | 0;
          HEAP32[$2_1 >> 2] = $4_1;
          $4_1 = 0;
         }
         $781($0_1 | 0) | 0;
         continue label$28;
        };
       }
       $3_1 = $1318($12_1 | 0) | 0;
       label$33 : {
        if (!$4_1) {
         break label$33
        }
        $2_1 = HEAP32[($11_1 + 132 | 0) >> 2] | 0;
        if (($3_1 | 0) == ($2_1 | 0)) {
         break label$33
        }
        label$34 : {
         if (($2_1 | 0) != (HEAP32[($11_1 + 128 | 0) >> 2] | 0 | 0)) {
          break label$34
         }
         $1330($12_1 | 0, $11_1 + 132 | 0 | 0, $11_1 + 128 | 0 | 0);
         $2_1 = HEAP32[($11_1 + 132 | 0) >> 2] | 0;
        }
        HEAP32[($11_1 + 132 | 0) >> 2] = $2_1 + 4 | 0;
        HEAP32[$2_1 >> 2] = $4_1;
       }
       label$35 : {
        if ((HEAP32[($11_1 + 36 | 0) >> 2] | 0 | 0) < (1 | 0)) {
         break label$35
        }
        label$36 : {
         label$37 : {
          if ($782($0_1 | 0, $11_1 + 552 | 0 | 0) | 0) {
           break label$37
          }
          if ((($779($0_1 | 0) | 0) & 255 | 0 | 0) == (HEAPU8[($11_1 + 119 | 0) >> 0] | 0 | 0)) {
           break label$36
          }
         }
         HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
         $0_1 = 0;
         break label$4;
        }
        label$38 : while (1) {
         $781($0_1 | 0) | 0;
         if ((HEAP32[($11_1 + 36 | 0) >> 2] | 0 | 0) < (1 | 0)) {
          break label$35
         }
         label$39 : {
          label$40 : {
           if ($782($0_1 | 0, $11_1 + 552 | 0 | 0) | 0) {
            break label$40
           }
           if ($780($7_1 | 0, 2048 | 0, $779($0_1 | 0) | 0 | 0) | 0) {
            break label$39
           }
          }
          HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
          $0_1 = 0;
          break label$4;
         }
         label$41 : {
          if ((HEAP32[$9_1 >> 2] | 0 | 0) != (HEAP32[($11_1 + 548 | 0) >> 2] | 0 | 0)) {
           break label$41
          }
          $1329($8_1 | 0, $9_1 | 0, $11_1 + 548 | 0 | 0);
         }
         $4_1 = $779($0_1 | 0) | 0;
         $2_1 = HEAP32[$9_1 >> 2] | 0;
         HEAP32[$9_1 >> 2] = $2_1 + 1 | 0;
         HEAP8[$2_1 >> 0] = $4_1;
         HEAP32[($11_1 + 36 | 0) >> 2] = (HEAP32[($11_1 + 36 | 0) >> 2] | 0) + -1 | 0;
         continue label$38;
        };
       }
       $2_1 = $10_1;
       if ((HEAP32[$9_1 >> 2] | 0 | 0) != ($1315($8_1 | 0) | 0 | 0)) {
        break label$2
       }
       HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
       $0_1 = 0;
       break label$4;
      }
      label$42 : {
       if (!$10_1) {
        break label$42
       }
       $4_1 = 1;
       label$43 : while (1) {
        if ($4_1 >>> 0 >= ($1028($10_1 | 0) | 0) >>> 0) {
         break label$42
        }
        label$44 : {
         label$45 : {
          if ($782($0_1 | 0, $11_1 + 552 | 0 | 0) | 0) {
           break label$45
          }
          if ((($779($0_1 | 0) | 0) & 255 | 0 | 0) == (HEAPU8[($1029($10_1 | 0, $4_1 | 0) | 0) >> 0] | 0 | 0)) {
           break label$44
          }
         }
         HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
         $0_1 = 0;
         break label$4;
        }
        $781($0_1 | 0) | 0;
        $4_1 = $4_1 + 1 | 0;
        continue label$43;
       };
      }
      $0_1 = 1;
      if (($1318($12_1 | 0) | 0 | 0) == (HEAP32[($11_1 + 132 | 0) >> 2] | 0 | 0)) {
       break label$4
      }
      $0_1 = 0;
      HEAP32[($11_1 + 24 | 0) >> 2] = 0;
      $1043($13_1 | 0, $1318($12_1 | 0) | 0 | 0, HEAP32[($11_1 + 132 | 0) >> 2] | 0 | 0, $11_1 + 24 | 0 | 0);
      label$46 : {
       if (!(HEAP32[($11_1 + 24 | 0) >> 2] | 0)) {
        break label$46
       }
       HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
       break label$4;
      }
      $0_1 = 1;
     }
     $2058($17_1 | 0) | 0;
     $2058($16_1 | 0) | 0;
     $2058($15_1 | 0) | 0;
     $2058($14_1 | 0) | 0;
     $2058($13_1 | 0) | 0;
     $1331($12_1 | 0) | 0;
     global$0 = $11_1 + 560 | 0;
     return $0_1 | 0;
    }
    $2_1 = $10_1;
   }
   $1_1 = $1_1 + 1 | 0;
   continue label$1;
  };
 }
 
 function $1315($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($1332($0_1 | 0) | 0) >> 2] | 0 | 0;
 }
 
 function $1316($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 10 | 0 | 0;
 }
 
 function $1317($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
  $1343($0_1 | 0, $3_1 + 12 | 0 | 0, $869($2_1 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1318($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($1344($0_1 | 0) | 0) >> 2] | 0 | 0;
 }
 
 function $1319($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0;
  $10_1 = global$0 - 16 | 0;
  global$0 = $10_1;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    $0_1 = $1345($1_1 | 0) | 0;
    $1346($10_1 | 0, $0_1 | 0);
    $11_1 = $2_1;
    $12_1 = HEAP32[$10_1 >> 2] | 0;
    HEAP8[$11_1 >> 0] = $12_1;
    HEAP8[($11_1 + 1 | 0) >> 0] = $12_1 >>> 8 | 0;
    HEAP8[($11_1 + 2 | 0) >> 0] = $12_1 >>> 16 | 0;
    HEAP8[($11_1 + 3 | 0) >> 0] = $12_1 >>> 24 | 0;
    $1347($10_1 | 0, $0_1 | 0);
    $1348($8_1 | 0, $10_1 | 0) | 0;
    $2058($10_1 | 0) | 0;
    $1349($10_1 | 0, $0_1 | 0);
    $1348($7_1 | 0, $10_1 | 0) | 0;
    $2058($10_1 | 0) | 0;
    HEAP8[$3_1 >> 0] = $1350($0_1 | 0) | 0;
    HEAP8[$4_1 >> 0] = $1351($0_1 | 0) | 0;
    $1352($10_1 | 0, $0_1 | 0);
    $1348($5_1 | 0, $10_1 | 0) | 0;
    $2058($10_1 | 0) | 0;
    $1353($10_1 | 0, $0_1 | 0);
    $1348($6_1 | 0, $10_1 | 0) | 0;
    $2058($10_1 | 0) | 0;
    $0_1 = $1354($0_1 | 0) | 0;
    break label$1;
   }
   $0_1 = $1355($1_1 | 0) | 0;
   $1356($10_1 | 0, $0_1 | 0);
   $13_1 = $2_1;
   $14_1 = HEAP32[$10_1 >> 2] | 0;
   HEAP8[$13_1 >> 0] = $14_1;
   HEAP8[($13_1 + 1 | 0) >> 0] = $14_1 >>> 8 | 0;
   HEAP8[($13_1 + 2 | 0) >> 0] = $14_1 >>> 16 | 0;
   HEAP8[($13_1 + 3 | 0) >> 0] = $14_1 >>> 24 | 0;
   $1357($10_1 | 0, $0_1 | 0);
   $1348($8_1 | 0, $10_1 | 0) | 0;
   $2058($10_1 | 0) | 0;
   $1358($10_1 | 0, $0_1 | 0);
   $1348($7_1 | 0, $10_1 | 0) | 0;
   $2058($10_1 | 0) | 0;
   HEAP8[$3_1 >> 0] = $1359($0_1 | 0) | 0;
   HEAP8[$4_1 >> 0] = $1360($0_1 | 0) | 0;
   $1361($10_1 | 0, $0_1 | 0);
   $1348($5_1 | 0, $10_1 | 0) | 0;
   $2058($10_1 | 0) | 0;
   $1362($10_1 | 0, $0_1 | 0);
   $1348($6_1 | 0, $10_1 | 0) | 0;
   $2058($10_1 | 0) | 0;
   $0_1 = $1363($0_1 | 0) | 0;
  }
  HEAP32[$9_1 >> 2] = $0_1;
  global$0 = $10_1 + 16 | 0;
 }
 
 function $1320($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1364($0_1 | 0, (($792(HEAP32[$1_1 >> 2] | 0 | 0) | 0) << 24 | 0) >> 24 | 0 | 0, HEAP32[$1_1 >> 2] | 0 | 0) | 0;
 }
 
 function $1321($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP8[$0_1 >> 0] | 0 | 0;
 }
 
 function $1322($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 >> 2] = $1365($1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1323($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1366($0_1 | 0, $1_1 | 0) | 0) ^ 1 | 0 | 0;
 }
 
 function $1324($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1325($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + 1 | 0;
  return $0_1 | 0;
 }
 
 function $1326($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1367($0_1 | 0) | 0) - ($1365($1_1 | 0) | 0) | 0 | 0;
 }
 
 function $1327($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1369($0_1 | 0, 0 - $1_1 | 0 | 0) | 0 | 0;
 }
 
 function $1328($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1368($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $1329($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $3_1 = 0, $4_1 = 0, $8_1 = 0, $6_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = HEAP32[($1370($0_1 | 0) | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    $5_1 = (HEAP32[$2_1 >> 2] | 0) - ($1315($0_1 | 0) | 0) | 0;
    if ($5_1 >>> 0 >= (($1371() | 0) >>> 1 | 0) >>> 0) {
     break label$2
    }
    $5_1 = $5_1 << 1 | 0;
    break label$1;
   }
   $5_1 = $1371() | 0;
  }
  $5_1 = $5_1 ? $5_1 : 1;
  $6_1 = HEAP32[$1_1 >> 2] | 0;
  $7_1 = $1315($0_1 | 0) | 0;
  label$3 : {
   label$4 : {
    if (($4_1 | 0) != (275 | 0)) {
     break label$4
    }
    $8_1 = 0;
    break label$3;
   }
   $8_1 = $1315($0_1 | 0) | 0;
  }
  label$5 : {
   $8_1 = $2162($8_1 | 0, $5_1 | 0) | 0;
   if (!$8_1) {
    break label$5
   }
   label$6 : {
    if (($4_1 | 0) == (275 | 0)) {
     break label$6
    }
    $1372($0_1 | 0) | 0;
   }
   HEAP32[($3_1 + 4 | 0) >> 2] = 274;
   $4_1 = $1155($3_1 + 8 | 0 | 0, $8_1 | 0, $3_1 + 4 | 0 | 0) | 0;
   $1373($0_1 | 0, $4_1 | 0) | 0;
   $1159($4_1 | 0) | 0;
   HEAP32[$1_1 >> 2] = ($1315($0_1 | 0) | 0) + ($6_1 - $7_1 | 0) | 0;
   HEAP32[$2_1 >> 2] = ($1315($0_1 | 0) | 0) + $5_1 | 0;
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $2029();
  abort();
 }
 
 function $1330($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $3_1 = 0, $4_1 = 0, $8_1 = 0, $6_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = HEAP32[($1374($0_1 | 0) | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    $5_1 = (HEAP32[$2_1 >> 2] | 0) - ($1318($0_1 | 0) | 0) | 0;
    if ($5_1 >>> 0 >= (($1371() | 0) >>> 1 | 0) >>> 0) {
     break label$2
    }
    $5_1 = $5_1 << 1 | 0;
    break label$1;
   }
   $5_1 = $1371() | 0;
  }
  $5_1 = $5_1 ? $5_1 : 4;
  $6_1 = HEAP32[$1_1 >> 2] | 0;
  $7_1 = $1318($0_1 | 0) | 0;
  label$3 : {
   label$4 : {
    if (($4_1 | 0) != (275 | 0)) {
     break label$4
    }
    $8_1 = 0;
    break label$3;
   }
   $8_1 = $1318($0_1 | 0) | 0;
  }
  label$5 : {
   $8_1 = $2162($8_1 | 0, $5_1 | 0) | 0;
   if (!$8_1) {
    break label$5
   }
   label$6 : {
    if (($4_1 | 0) == (275 | 0)) {
     break label$6
    }
    $1375($0_1 | 0) | 0;
   }
   HEAP32[($3_1 + 4 | 0) >> 2] = 274;
   $4_1 = $1317($3_1 + 8 | 0 | 0, $8_1 | 0, $3_1 + 4 | 0 | 0) | 0;
   $1376($0_1 | 0, $4_1 | 0) | 0;
   $1331($4_1 | 0) | 0;
   HEAP32[$1_1 >> 2] = ($1318($0_1 | 0) | 0) + ($6_1 - $7_1 | 0) | 0;
   HEAP32[$2_1 >> 2] = ($1318($0_1 | 0) | 0) + ($5_1 & -4 | 0) | 0;
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $2029();
  abort();
 }
 
 function $1331($0_1) {
  $0_1 = $0_1 | 0;
  $1378($0_1 | 0, 0 | 0);
  return $0_1 | 0;
 }
 
 function $1332($0_1) {
  $0_1 = $0_1 | 0;
  return $1993($0_1 | 0) | 0 | 0;
 }
 
 function $1333($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $7_1 = global$0 - 160 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 144 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 152 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = 275;
  $8_1 = $1155($7_1 + 24 | 0 | 0, $7_1 + 32 | 0 | 0, $7_1 + 20 | 0 | 0) | 0;
  $774($7_1 + 16 | 0 | 0, $4_1 | 0);
  $1_1 = $775($7_1 + 16 | 0 | 0) | 0;
  HEAP8[($7_1 + 15 | 0) >> 0] = 0;
  label$1 : {
   if (!($1314($7_1 + 152 | 0 | 0, $2_1 | 0, $3_1 | 0, $7_1 + 16 | 0 | 0, $773($4_1 | 0) | 0 | 0, $5_1 | 0, $7_1 + 15 | 0 | 0, $1_1 | 0, $8_1 | 0, $7_1 + 20 | 0 | 0, $7_1 + 132 | 0 | 0) | 0)) {
    break label$1
   }
   $1334($6_1 | 0);
   label$2 : {
    if (!(HEAPU8[($7_1 + 15 | 0) >> 0] | 0)) {
     break label$2
    }
    $2071($6_1 | 0, $876($1_1 | 0, 45 | 0) | 0 | 0);
   }
   $1_1 = $876($1_1 | 0, 48 | 0) | 0;
   $4_1 = $1315($8_1 | 0) | 0;
   $9_1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
   $2_1 = $9_1 + -1 | 0;
   $3_1 = $4_1 >>> 0 > $2_1 >>> 0 ? $4_1 : $2_1;
   $1_1 = $1_1 & 255 | 0;
   label$3 : while (1) {
    label$4 : {
     label$5 : {
      if ($4_1 >>> 0 >= $2_1 >>> 0) {
       break label$5
      }
      if ((HEAPU8[$4_1 >> 0] | 0 | 0) == ($1_1 | 0)) {
       break label$4
      }
      $3_1 = $4_1;
     }
     $1335($6_1 | 0, $3_1 | 0, $9_1 | 0) | 0;
     break label$1;
    }
    $4_1 = $4_1 + 1 | 0;
    continue label$3;
   };
  }
  label$6 : {
   if (!($782($7_1 + 152 | 0 | 0, $7_1 + 144 | 0 | 0) | 0)) {
    break label$6
   }
   HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 2 | 0;
  }
  $4_1 = HEAP32[($7_1 + 152 | 0) >> 2] | 0;
  $1018($7_1 + 16 | 0 | 0) | 0;
  $1159($8_1 | 0) | 0;
  global$0 = $7_1 + 160 | 0;
  return $4_1 | 0;
 }
 
 function $1334($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $1336($0_1 | 0);
  label$1 : {
   label$2 : {
    if (!($1076($0_1 | 0) | 0)) {
     break label$2
    }
    $2_1 = $1337($0_1 | 0) | 0;
    HEAP8[($1_1 + 15 | 0) >> 0] = 0;
    $1338($2_1 | 0, $1_1 + 15 | 0 | 0);
    $1339($0_1 | 0, 0 | 0);
    break label$1;
   }
   $2_1 = $1340($0_1 | 0) | 0;
   HEAP8[($1_1 + 14 | 0) >> 0] = 0;
   $1338($2_1 | 0, $1_1 + 14 | 0 | 0);
   $1341($0_1 | 0, 0 | 0);
  }
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1335($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1342($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $1336($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $1337($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($1799($0_1 | 0) | 0) >> 2] | 0 | 0;
 }
 
 function $1338($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP8[$0_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
 }
 
 function $1339($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[(($1799($0_1 | 0) | 0) + 4 | 0) >> 2] = $1_1;
 }
 
 function $1340($0_1) {
  $0_1 = $0_1 | 0;
  return $1855($1799($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1341($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP8[(($1799($0_1 | 0) | 0) + 11 | 0) >> 0] = $1_1;
 }
 
 function $1342($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $4_1 = 0, $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  $4_1 = $1028($0_1 | 0) | 0;
  $5_1 = $1038($0_1 | 0) | 0;
  label$1 : {
   $6_1 = $1994($1_1 | 0, $2_1 | 0) | 0;
   if (!$6_1) {
    break label$1
   }
   label$2 : {
    if (!($1995($1867($1_1 | 0) | 0 | 0, $1147($0_1 | 0) | 0 | 0, ($1147($0_1 | 0) | 0) + ($1028($0_1 | 0) | 0) | 0 | 0) | 0)) {
     break label$2
    }
    $1_1 = $1996($3_1 + 16 | 0 | 0, $1_1 | 0, $2_1 | 0, $1797($0_1 | 0) | 0 | 0) | 0;
    $2070($0_1 | 0, $1084($1_1 | 0) | 0 | 0, $1028($1_1 | 0) | 0 | 0) | 0;
    $2058($1_1 | 0) | 0;
    break label$1;
   }
   label$3 : {
    if (($5_1 - $4_1 | 0) >>> 0 >= $6_1 >>> 0) {
     break label$3
    }
    $2068($0_1 | 0, $5_1 | 0, ($6_1 + $4_1 | 0) - $5_1 | 0 | 0, $4_1 | 0, $4_1 | 0, 0 | 0, 0 | 0);
   }
   $5_1 = ($1078($0_1 | 0) | 0) + $4_1 | 0;
   label$4 : {
    label$5 : while (1) {
     if (($1_1 | 0) == ($2_1 | 0)) {
      break label$4
     }
     $1338($5_1 | 0, $1_1 | 0);
     $1_1 = $1_1 + 1 | 0;
     $5_1 = $5_1 + 1 | 0;
     continue label$5;
    };
   }
   HEAP8[($3_1 + 15 | 0) >> 0] = 0;
   $1338($5_1 | 0, $3_1 + 15 | 0 | 0);
   $1997($0_1 | 0, $6_1 + $4_1 | 0 | 0);
  }
  global$0 = $3_1 + 32 | 0;
  return $0_1 | 0;
 }
 
 function $1343($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2004($0_1 | 0, $2003($1_1 | 0) | 0 | 0) | 0;
  $883($0_1 + 4 | 0 | 0, $882($2_1 | 0) | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1344($0_1) {
  $0_1 = $0_1 | 0;
  return $2008($0_1 | 0) | 0 | 0;
 }
 
 function $1345($0_1) {
  $0_1 = $0_1 | 0;
  return $1023($0_1 | 0, 334708 | 0) | 0 | 0;
 }
 
 function $1346($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 44 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1347($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1348($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1434($0_1 | 0, $1_1 | 0);
  return $0_1 | 0;
 }
 
 function $1349($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1350($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1351($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1352($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1353($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1354($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1355($0_1) {
  $0_1 = $0_1 | 0;
  return $1023($0_1 | 0, 334700 | 0) | 0 | 0;
 }
 
 function $1356($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 44 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1357($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1358($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1359($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1360($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1361($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1362($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1363($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1364($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
  HEAP8[$0_1 >> 0] = $1_1;
  return $0_1 | 0;
 }
 
 function $1365($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1366($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1367($0_1 | 0) | 0 | 0) == ($1365($1_1 | 0) | 0 | 0) | 0;
 }
 
 function $1367($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1368($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 16 | 0) >> 2] = $1_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $2_1;
  label$1 : {
   label$2 : while (1) {
    $2_1 = $1134($3_1 + 24 | 0 | 0, $3_1 + 16 | 0 | 0) | 0;
    if (!$2_1) {
     break label$1
    }
    if (!($2009($3_1 | 0, $1135($3_1 + 24 | 0 | 0) | 0 | 0, $1135($3_1 + 8 | 0 | 0) | 0 | 0) | 0)) {
     break label$1
    }
    $1136($3_1 + 24 | 0 | 0) | 0;
    $1136($3_1 + 8 | 0 | 0) | 0;
    continue label$2;
   };
  }
  global$0 = $3_1 + 32 | 0;
  return $2_1 ^ 1 | 0 | 0;
 }
 
 function $1369($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
  $1792($2_1 + 8 | 0 | 0, $1_1 | 0) | 0;
  $1_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1370($0_1) {
  $0_1 = $0_1 | 0;
  return $1162($0_1 | 0) | 0 | 0;
 }
 
 function $1371() {
  return $1972() | 0 | 0;
 }
 
 function $1372($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($1161($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($1161($0_1 | 0) | 0) >> 2] = 0;
  return $1_1 | 0;
 }
 
 function $1373($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1157($0_1 | 0, $1372($1_1 | 0) | 0 | 0);
  $1_1 = HEAP32[($882($1370($1_1 | 0) | 0 | 0) | 0) >> 2] | 0;
  HEAP32[($1162($0_1 | 0) | 0) >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $1374($0_1) {
  $0_1 = $0_1 | 0;
  return $2006($0_1 | 0) | 0 | 0;
 }
 
 function $1375($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($2005($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($2005($0_1 | 0) | 0) >> 2] = 0;
  return $1_1 | 0;
 }
 
 function $1376($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1378($0_1 | 0, $1375($1_1 | 0) | 0 | 0);
  $1_1 = HEAP32[($882($1374($1_1 | 0) | 0 | 0) | 0) >> 2] | 0;
  HEAP32[($2006($0_1 | 0) | 0) >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $1377($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1726($0_1 | 0, $1_1 | 0);
 }
 
 function $1378($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($2005($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($2005($0_1 | 0) | 0) >> 2] = $1_1;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($2006($0_1 | 0) | 0) >> 2] | 0 | 0]($2_1);
  }
 }
 
 function $1379($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $10_1 = 0, $8_1 = 0, $11_1 = 0, $12_1 = 0, i64toi32_i32$1 = 0;
  $7_1 = global$0 - 624 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 608 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 616 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = 275;
  $1_1 = $1184($7_1 + 200 | 0 | 0, $7_1 + 208 | 0 | 0, $7_1 + 16 | 0 | 0) | 0;
  $774($7_1 + 192 | 0 | 0, $4_1 | 0);
  $8_1 = $819($7_1 + 192 | 0 | 0) | 0;
  HEAP8[($7_1 + 191 | 0) >> 0] = 0;
  label$1 : {
   if (!($1380($7_1 + 616 | 0 | 0, $2_1 | 0, $3_1 | 0, $7_1 + 192 | 0 | 0, $773($4_1 | 0) | 0 | 0, $5_1 | 0, $7_1 + 191 | 0 | 0, $8_1 | 0, $1_1 | 0, $7_1 + 196 | 0 | 0, $7_1 + 608 | 0 | 0) | 0)) {
    break label$1
   }
   $11_1 = 0;
   $12_1 = HEAPU8[($11_1 + 14683 | 0) >> 0] | 0 | ((HEAPU8[($11_1 + 14684 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($11_1 + 14685 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($11_1 + 14686 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP8[($7_1 + 183 | 0) >> 0] = $12_1;
   HEAP8[($7_1 + 184 | 0) >> 0] = $12_1 >>> 8 | 0;
   HEAP8[($7_1 + 185 | 0) >> 0] = $12_1 >>> 16 | 0;
   HEAP8[($7_1 + 186 | 0) >> 0] = $12_1 >>> 24 | 0;
   $10_1 = 0;
   i64toi32_i32$1 = HEAPU8[($10_1 + 14680 | 0) >> 0] | 0 | ((HEAPU8[($10_1 + 14681 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($10_1 + 14682 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($10_1 + 14683 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP32[($7_1 + 176 | 0) >> 2] = HEAPU8[($10_1 + 14676 | 0) >> 0] | 0 | ((HEAPU8[($10_1 + 14677 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($10_1 + 14678 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($10_1 + 14679 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP32[($7_1 + 180 | 0) >> 2] = i64toi32_i32$1;
   $1119($8_1 | 0, $7_1 + 176 | 0 | 0, $7_1 + 186 | 0 | 0, $7_1 + 128 | 0 | 0) | 0;
   HEAP32[($7_1 + 16 | 0) >> 2] = 274;
   $8_1 = $1155($7_1 + 8 | 0 | 0, 0 | 0, $7_1 + 16 | 0 | 0) | 0;
   $2_1 = $7_1 + 16 | 0;
   label$2 : {
    label$3 : {
     if (((HEAP32[($7_1 + 196 | 0) >> 2] | 0) - ($1381($1_1 | 0) | 0) | 0 | 0) < (393 | 0)) {
      break label$3
     }
     $1157($8_1 | 0, $2160((((HEAP32[($7_1 + 196 | 0) >> 2] | 0) - ($1381($1_1 | 0) | 0) | 0) >> 2 | 0) + 2 | 0 | 0) | 0 | 0);
     if (!($1315($8_1 | 0) | 0)) {
      break label$2
     }
     $2_1 = $1315($8_1 | 0) | 0;
    }
    label$4 : {
     if (!(HEAPU8[($7_1 + 191 | 0) >> 0] | 0)) {
      break label$4
     }
     HEAP8[$2_1 >> 0] = 45;
     $2_1 = $2_1 + 1 | 0;
    }
    $4_1 = $1381($1_1 | 0) | 0;
    label$5 : {
     label$6 : while (1) {
      label$7 : {
       if ($4_1 >>> 0 < (HEAP32[($7_1 + 196 | 0) >> 2] | 0) >>> 0) {
        break label$7
       }
       HEAP8[$2_1 >> 0] = 0;
       HEAP32[$7_1 >> 2] = $6_1;
       if (($976($7_1 + 16 | 0 | 0, 14672 | 0, $7_1 | 0) | 0 | 0) != (1 | 0)) {
        break label$5
       }
       $1159($8_1 | 0) | 0;
       break label$1;
      }
      HEAP8[$2_1 >> 0] = HEAPU8[(($7_1 + 176 | 0) + ((($1129($7_1 + 128 | 0 | 0, $1382($7_1 + 128 | 0 | 0) | 0 | 0, $4_1 | 0) | 0) - ($7_1 + 128 | 0) | 0) >> 2 | 0) | 0) >> 0] | 0;
      $2_1 = $2_1 + 1 | 0;
      $4_1 = $4_1 + 4 | 0;
      continue label$6;
     };
    }
    $1266($7_1 | 0);
    abort();
   }
   $2029();
   abort();
  }
  label$8 : {
   if (!($824($7_1 + 616 | 0 | 0, $7_1 + 608 | 0 | 0) | 0)) {
    break label$8
   }
   HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 2 | 0;
  }
  $4_1 = HEAP32[($7_1 + 616 | 0) >> 2] | 0;
  $1018($7_1 + 192 | 0 | 0) | 0;
  $1187($1_1 | 0) | 0;
  global$0 = $7_1 + 624 | 0;
  return $4_1 | 0;
 }
 
 function $1380($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  var $11_1 = 0, $15_1 = 0, $16_1 = 0, $14_1 = 0, $12_1 = 0, $17_1 = 0, $13_1 = 0, $18_1 = 0, $19_1 = 0;
  $11_1 = global$0 - 560 | 0;
  global$0 = $11_1;
  HEAP32[($11_1 + 548 | 0) >> 2] = $10_1;
  HEAP32[($11_1 + 552 | 0) >> 2] = $1_1;
  HEAP32[($11_1 + 96 | 0) >> 2] = 275;
  $12_1 = $1317($11_1 + 136 | 0 | 0, $11_1 + 144 | 0 | 0, $11_1 + 96 | 0 | 0) | 0;
  $1_1 = $1318($12_1 | 0) | 0;
  HEAP32[($11_1 + 132 | 0) >> 2] = $1_1;
  HEAP32[($11_1 + 128 | 0) >> 2] = $1_1 + 400 | 0;
  $13_1 = $1037($11_1 + 96 | 0 | 0) | 0;
  $14_1 = $1296($11_1 + 80 | 0 | 0) | 0;
  $15_1 = $1296($11_1 + 64 | 0 | 0) | 0;
  $16_1 = $1296($11_1 + 48 | 0 | 0) | 0;
  $17_1 = $1296($11_1 + 32 | 0 | 0) | 0;
  $1383($2_1 | 0, $3_1 | 0, $11_1 + 120 | 0 | 0, $11_1 + 116 | 0 | 0, $11_1 + 112 | 0 | 0, $13_1 | 0, $14_1 | 0, $15_1 | 0, $16_1 | 0, $11_1 + 28 | 0 | 0);
  HEAP32[$9_1 >> 2] = $1381($8_1 | 0) | 0;
  $18_1 = $4_1 & 512 | 0;
  $19_1 = $18_1 >>> 9 | 0;
  $1_1 = 0;
  $2_1 = 0;
  label$1 : while (1) {
   $10_1 = $2_1;
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       if (($1_1 | 0) == (4 | 0)) {
        break label$5
       }
       if (!($820($0_1 | 0, $11_1 + 552 | 0 | 0) | 0)) {
        break label$5
       }
       $4_1 = 0;
       $2_1 = $10_1;
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            switch (HEAP8[(($11_1 + 120 | 0) + $1_1 | 0) >> 0] | 0 | 0) {
            case 1:
             if (($1_1 | 0) == (3 | 0)) {
              break label$3
             }
             label$12 : {
              if (!($822($7_1 | 0, 8192 | 0, $821($0_1 | 0) | 0 | 0) | 0)) {
               break label$12
              }
              $1384($11_1 + 16 | 0 | 0, $0_1 | 0, 0 | 0);
              $2084($17_1 | 0, $1385($11_1 + 16 | 0 | 0) | 0 | 0);
              break label$9;
             }
             HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
             $0_1 = 0;
             break label$4;
            case 0:
             break label$10;
            case 4:
             break label$6;
            case 2:
             break label$7;
            case 3:
             break label$8;
            default:
             break label$2;
            };
           }
           if (($1_1 | 0) == (3 | 0)) {
            break label$3
           }
          }
          label$13 : while (1) {
           if (!($820($0_1 | 0, $11_1 + 552 | 0 | 0) | 0)) {
            break label$3
           }
           if (!($822($7_1 | 0, 8192 | 0, $821($0_1 | 0) | 0 | 0) | 0)) {
            break label$3
           }
           $1384($11_1 + 16 | 0 | 0, $0_1 | 0, 0 | 0);
           $2084($17_1 | 0, $1385($11_1 + 16 | 0 | 0) | 0 | 0);
           continue label$13;
          };
         }
         if (($1092($15_1 | 0) | 0 | 0) == (0 - ($1092($16_1 | 0) | 0) | 0 | 0)) {
          break label$3
         }
         label$14 : {
          label$15 : {
           if (!($1092($15_1 | 0) | 0)) {
            break label$15
           }
           if ($1092($16_1 | 0) | 0) {
            break label$14
           }
          }
          $4_1 = $1092($15_1 | 0) | 0;
          $2_1 = $821($0_1 | 0) | 0;
          label$16 : {
           if (!$4_1) {
            break label$16
           }
           label$17 : {
            if (($2_1 | 0) != (HEAP32[($1386($15_1 | 0, 0 | 0) | 0) >> 2] | 0 | 0)) {
             break label$17
            }
            $823($0_1 | 0) | 0;
            $2_1 = ($1092($15_1 | 0) | 0) >>> 0 > 1 >>> 0 ? $15_1 : $10_1;
            break label$2;
           }
           HEAP8[$6_1 >> 0] = 1;
           break label$3;
          }
          if (($2_1 | 0) != (HEAP32[($1386($16_1 | 0, 0 | 0) | 0) >> 2] | 0 | 0)) {
           break label$3
          }
          $823($0_1 | 0) | 0;
          HEAP8[$6_1 >> 0] = 1;
          $2_1 = ($1092($16_1 | 0) | 0) >>> 0 > 1 >>> 0 ? $16_1 : $10_1;
          break label$2;
         }
         label$18 : {
          if (($821($0_1 | 0) | 0 | 0) != (HEAP32[($1386($15_1 | 0, 0 | 0) | 0) >> 2] | 0 | 0)) {
           break label$18
          }
          $823($0_1 | 0) | 0;
          $2_1 = ($1092($15_1 | 0) | 0) >>> 0 > 1 >>> 0 ? $15_1 : $10_1;
          break label$2;
         }
         label$19 : {
          if (($821($0_1 | 0) | 0 | 0) != (HEAP32[($1386($16_1 | 0, 0 | 0) | 0) >> 2] | 0 | 0)) {
           break label$19
          }
          $823($0_1 | 0) | 0;
          HEAP8[$6_1 >> 0] = 1;
          $2_1 = ($1092($16_1 | 0) | 0) >>> 0 > 1 >>> 0 ? $16_1 : $10_1;
          break label$2;
         }
         HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
         $0_1 = 0;
         break label$4;
        }
        label$20 : {
         if ($1_1 >>> 0 < 2 >>> 0) {
          break label$20
         }
         if ($10_1) {
          break label$20
         }
         $2_1 = 0;
         if ((($1_1 | 0) == (2 | 0) & (HEAPU8[($11_1 + 123 | 0) >> 0] | 0 | 0) != (0 | 0) | 0 | $19_1 | 0 | 0) != (1 | 0)) {
          break label$2
         }
        }
        HEAP32[($11_1 + 8 | 0) >> 2] = $1166($14_1 | 0) | 0;
        $4_1 = $1387($11_1 + 16 | 0 | 0, $11_1 + 8 | 0 | 0, 0 | 0) | 0;
        label$21 : {
         if (!$1_1) {
          break label$21
         }
         if ((HEAPU8[(($1_1 + ($11_1 + 120 | 0) | 0) + -1 | 0) >> 0] | 0) >>> 0 > 1 >>> 0) {
          break label$21
         }
         label$22 : {
          label$23 : while (1) {
           HEAP32[($11_1 + 8 | 0) >> 2] = $1167($14_1 | 0) | 0;
           if (!($1388($4_1 | 0, $11_1 + 8 | 0 | 0) | 0)) {
            break label$22
           }
           if (!($822($7_1 | 0, 8192 | 0, HEAP32[($1389($4_1 | 0) | 0) >> 2] | 0 | 0) | 0)) {
            break label$22
           }
           $1390($4_1 | 0) | 0;
           continue label$23;
          };
         }
         HEAP32[($11_1 + 8 | 0) >> 2] = $1166($14_1 | 0) | 0;
         label$24 : {
          $4_1 = $1391($4_1 | 0, $11_1 + 8 | 0 | 0) | 0;
          if ($4_1 >>> 0 > ($1092($17_1 | 0) | 0) >>> 0) {
           break label$24
          }
          HEAP32[($11_1 + 8 | 0) >> 2] = $1167($17_1 | 0) | 0;
          if ($1393($1392($11_1 + 8 | 0 | 0, $4_1 | 0) | 0 | 0, $1167($17_1 | 0) | 0 | 0, $1166($14_1 | 0) | 0 | 0) | 0) {
           break label$21
          }
         }
         HEAP32[$11_1 >> 2] = $1166($14_1 | 0) | 0;
         $1387($11_1 + 8 | 0 | 0, $11_1 | 0, 0 | 0) | 0;
         HEAP32[($11_1 + 16 | 0) >> 2] = HEAP32[($11_1 + 8 | 0) >> 2] | 0;
        }
        HEAP32[($11_1 + 8 | 0) >> 2] = HEAP32[($11_1 + 16 | 0) >> 2] | 0;
        label$25 : {
         label$26 : while (1) {
          HEAP32[$11_1 >> 2] = $1167($14_1 | 0) | 0;
          if (!($1388($11_1 + 8 | 0 | 0, $11_1 | 0) | 0)) {
           break label$25
          }
          if (!($820($0_1 | 0, $11_1 + 552 | 0 | 0) | 0)) {
           break label$25
          }
          if (($821($0_1 | 0) | 0 | 0) != (HEAP32[($1389($11_1 + 8 | 0 | 0) | 0) >> 2] | 0 | 0)) {
           break label$25
          }
          $823($0_1 | 0) | 0;
          $1390($11_1 + 8 | 0 | 0) | 0;
          continue label$26;
         };
        }
        if (!$18_1) {
         break label$3
        }
        HEAP32[$11_1 >> 2] = $1167($14_1 | 0) | 0;
        if (!($1388($11_1 + 8 | 0 | 0, $11_1 | 0) | 0)) {
         break label$3
        }
        HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
        $0_1 = 0;
        break label$4;
       }
       label$27 : {
        label$28 : while (1) {
         if (!($820($0_1 | 0, $11_1 + 552 | 0 | 0) | 0)) {
          break label$27
         }
         label$29 : {
          label$30 : {
           $2_1 = $821($0_1 | 0) | 0;
           if (!($822($7_1 | 0, 2048 | 0, $2_1 | 0) | 0)) {
            break label$30
           }
           label$31 : {
            $3_1 = HEAP32[$9_1 >> 2] | 0;
            if (($3_1 | 0) != (HEAP32[($11_1 + 548 | 0) >> 2] | 0 | 0)) {
             break label$31
            }
            $1394($8_1 | 0, $9_1 | 0, $11_1 + 548 | 0 | 0);
            $3_1 = HEAP32[$9_1 >> 2] | 0;
           }
           HEAP32[$9_1 >> 2] = $3_1 + 4 | 0;
           HEAP32[$3_1 >> 2] = $2_1;
           $4_1 = $4_1 + 1 | 0;
           break label$29;
          }
          $3_1 = $1028($13_1 | 0) | 0;
          if (!$4_1) {
           break label$27
          }
          if (!$3_1) {
           break label$27
          }
          if (($2_1 | 0) != (HEAP32[($11_1 + 112 | 0) >> 2] | 0 | 0)) {
           break label$27
          }
          label$32 : {
           $2_1 = HEAP32[($11_1 + 132 | 0) >> 2] | 0;
           if (($2_1 | 0) != (HEAP32[($11_1 + 128 | 0) >> 2] | 0 | 0)) {
            break label$32
           }
           $1330($12_1 | 0, $11_1 + 132 | 0 | 0, $11_1 + 128 | 0 | 0);
           $2_1 = HEAP32[($11_1 + 132 | 0) >> 2] | 0;
          }
          HEAP32[($11_1 + 132 | 0) >> 2] = $2_1 + 4 | 0;
          HEAP32[$2_1 >> 2] = $4_1;
          $4_1 = 0;
         }
         $823($0_1 | 0) | 0;
         continue label$28;
        };
       }
       $3_1 = $1318($12_1 | 0) | 0;
       label$33 : {
        if (!$4_1) {
         break label$33
        }
        $2_1 = HEAP32[($11_1 + 132 | 0) >> 2] | 0;
        if (($3_1 | 0) == ($2_1 | 0)) {
         break label$33
        }
        label$34 : {
         if (($2_1 | 0) != (HEAP32[($11_1 + 128 | 0) >> 2] | 0 | 0)) {
          break label$34
         }
         $1330($12_1 | 0, $11_1 + 132 | 0 | 0, $11_1 + 128 | 0 | 0);
         $2_1 = HEAP32[($11_1 + 132 | 0) >> 2] | 0;
        }
        HEAP32[($11_1 + 132 | 0) >> 2] = $2_1 + 4 | 0;
        HEAP32[$2_1 >> 2] = $4_1;
       }
       label$35 : {
        if ((HEAP32[($11_1 + 28 | 0) >> 2] | 0 | 0) < (1 | 0)) {
         break label$35
        }
        label$36 : {
         label$37 : {
          if ($824($0_1 | 0, $11_1 + 552 | 0 | 0) | 0) {
           break label$37
          }
          if (($821($0_1 | 0) | 0 | 0) == (HEAP32[($11_1 + 116 | 0) >> 2] | 0 | 0)) {
           break label$36
          }
         }
         HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
         $0_1 = 0;
         break label$4;
        }
        label$38 : while (1) {
         $823($0_1 | 0) | 0;
         if ((HEAP32[($11_1 + 28 | 0) >> 2] | 0 | 0) < (1 | 0)) {
          break label$35
         }
         label$39 : {
          label$40 : {
           if ($824($0_1 | 0, $11_1 + 552 | 0 | 0) | 0) {
            break label$40
           }
           if ($822($7_1 | 0, 2048 | 0, $821($0_1 | 0) | 0 | 0) | 0) {
            break label$39
           }
          }
          HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
          $0_1 = 0;
          break label$4;
         }
         label$41 : {
          if ((HEAP32[$9_1 >> 2] | 0 | 0) != (HEAP32[($11_1 + 548 | 0) >> 2] | 0 | 0)) {
           break label$41
          }
          $1394($8_1 | 0, $9_1 | 0, $11_1 + 548 | 0 | 0);
         }
         $4_1 = $821($0_1 | 0) | 0;
         $2_1 = HEAP32[$9_1 >> 2] | 0;
         HEAP32[$9_1 >> 2] = $2_1 + 4 | 0;
         HEAP32[$2_1 >> 2] = $4_1;
         HEAP32[($11_1 + 28 | 0) >> 2] = (HEAP32[($11_1 + 28 | 0) >> 2] | 0) + -1 | 0;
         continue label$38;
        };
       }
       $2_1 = $10_1;
       if ((HEAP32[$9_1 >> 2] | 0 | 0) != ($1381($8_1 | 0) | 0 | 0)) {
        break label$2
       }
       HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
       $0_1 = 0;
       break label$4;
      }
      label$42 : {
       if (!$10_1) {
        break label$42
       }
       $4_1 = 1;
       label$43 : while (1) {
        if ($4_1 >>> 0 >= ($1092($10_1 | 0) | 0) >>> 0) {
         break label$42
        }
        label$44 : {
         label$45 : {
          if ($824($0_1 | 0, $11_1 + 552 | 0 | 0) | 0) {
           break label$45
          }
          if (($821($0_1 | 0) | 0 | 0) == (HEAP32[($1093($10_1 | 0, $4_1 | 0) | 0) >> 2] | 0 | 0)) {
           break label$44
          }
         }
         HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
         $0_1 = 0;
         break label$4;
        }
        $823($0_1 | 0) | 0;
        $4_1 = $4_1 + 1 | 0;
        continue label$43;
       };
      }
      $0_1 = 1;
      if (($1318($12_1 | 0) | 0 | 0) == (HEAP32[($11_1 + 132 | 0) >> 2] | 0 | 0)) {
       break label$4
      }
      $0_1 = 0;
      HEAP32[($11_1 + 16 | 0) >> 2] = 0;
      $1043($13_1 | 0, $1318($12_1 | 0) | 0 | 0, HEAP32[($11_1 + 132 | 0) >> 2] | 0 | 0, $11_1 + 16 | 0 | 0);
      label$46 : {
       if (!(HEAP32[($11_1 + 16 | 0) >> 2] | 0)) {
        break label$46
       }
       HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
       break label$4;
      }
      $0_1 = 1;
     }
     $2077($17_1 | 0) | 0;
     $2077($16_1 | 0) | 0;
     $2077($15_1 | 0) | 0;
     $2077($14_1 | 0) | 0;
     $2058($13_1 | 0) | 0;
     $1331($12_1 | 0) | 0;
     global$0 = $11_1 + 560 | 0;
     return $0_1 | 0;
    }
    $2_1 = $10_1;
   }
   $1_1 = $1_1 + 1 | 0;
   continue label$1;
  };
 }
 
 function $1381($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($1395($0_1 | 0) | 0) >> 2] | 0 | 0;
 }
 
 function $1382($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 40 | 0 | 0;
 }
 
 function $1383($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0;
  $10_1 = global$0 - 16 | 0;
  global$0 = $10_1;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    $0_1 = $1406($1_1 | 0) | 0;
    $1407($10_1 | 0, $0_1 | 0);
    $11_1 = $2_1;
    $12_1 = HEAP32[$10_1 >> 2] | 0;
    HEAP8[$11_1 >> 0] = $12_1;
    HEAP8[($11_1 + 1 | 0) >> 0] = $12_1 >>> 8 | 0;
    HEAP8[($11_1 + 2 | 0) >> 0] = $12_1 >>> 16 | 0;
    HEAP8[($11_1 + 3 | 0) >> 0] = $12_1 >>> 24 | 0;
    $1408($10_1 | 0, $0_1 | 0);
    $1409($8_1 | 0, $10_1 | 0) | 0;
    $2077($10_1 | 0) | 0;
    $1410($10_1 | 0, $0_1 | 0);
    $1409($7_1 | 0, $10_1 | 0) | 0;
    $2077($10_1 | 0) | 0;
    HEAP32[$3_1 >> 2] = $1411($0_1 | 0) | 0;
    HEAP32[$4_1 >> 2] = $1412($0_1 | 0) | 0;
    $1413($10_1 | 0, $0_1 | 0);
    $1348($5_1 | 0, $10_1 | 0) | 0;
    $2058($10_1 | 0) | 0;
    $1414($10_1 | 0, $0_1 | 0);
    $1409($6_1 | 0, $10_1 | 0) | 0;
    $2077($10_1 | 0) | 0;
    $0_1 = $1415($0_1 | 0) | 0;
    break label$1;
   }
   $0_1 = $1416($1_1 | 0) | 0;
   $1417($10_1 | 0, $0_1 | 0);
   $13_1 = $2_1;
   $14_1 = HEAP32[$10_1 >> 2] | 0;
   HEAP8[$13_1 >> 0] = $14_1;
   HEAP8[($13_1 + 1 | 0) >> 0] = $14_1 >>> 8 | 0;
   HEAP8[($13_1 + 2 | 0) >> 0] = $14_1 >>> 16 | 0;
   HEAP8[($13_1 + 3 | 0) >> 0] = $14_1 >>> 24 | 0;
   $1418($10_1 | 0, $0_1 | 0);
   $1409($8_1 | 0, $10_1 | 0) | 0;
   $2077($10_1 | 0) | 0;
   $1419($10_1 | 0, $0_1 | 0);
   $1409($7_1 | 0, $10_1 | 0) | 0;
   $2077($10_1 | 0) | 0;
   HEAP32[$3_1 >> 2] = $1420($0_1 | 0) | 0;
   HEAP32[$4_1 >> 2] = $1421($0_1 | 0) | 0;
   $1422($10_1 | 0, $0_1 | 0);
   $1348($5_1 | 0, $10_1 | 0) | 0;
   $2058($10_1 | 0) | 0;
   $1423($10_1 | 0, $0_1 | 0);
   $1409($6_1 | 0, $10_1 | 0) | 0;
   $2077($10_1 | 0) | 0;
   $0_1 = $1424($0_1 | 0) | 0;
  }
  HEAP32[$9_1 >> 2] = $0_1;
  global$0 = $10_1 + 16 | 0;
 }
 
 function $1384($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1425($0_1 | 0, $833(HEAP32[$1_1 >> 2] | 0 | 0) | 0 | 0, HEAP32[$1_1 >> 2] | 0 | 0) | 0;
 }
 
 function $1385($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1386($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1171($0_1 | 0) | 0) + ($1_1 << 2 | 0) | 0 | 0;
 }
 
 function $1387($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 >> 2] = $1426($1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1388($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1427($0_1 | 0, $1_1 | 0) | 0) ^ 1 | 0 | 0;
 }
 
 function $1389($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1390($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + 4 | 0;
  return $0_1 | 0;
 }
 
 function $1391($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return (($1428($0_1 | 0) | 0) - ($1426($1_1 | 0) | 0) | 0) >> 2 | 0 | 0;
 }
 
 function $1392($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1430($0_1 | 0, 0 - $1_1 | 0 | 0) | 0 | 0;
 }
 
 function $1393($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1429($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $1394($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $3_1 = 0, $4_1 = 0, $8_1 = 0, $6_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = HEAP32[($1431($0_1 | 0) | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    $5_1 = (HEAP32[$2_1 >> 2] | 0) - ($1381($0_1 | 0) | 0) | 0;
    if ($5_1 >>> 0 >= (($1371() | 0) >>> 1 | 0) >>> 0) {
     break label$2
    }
    $5_1 = $5_1 << 1 | 0;
    break label$1;
   }
   $5_1 = $1371() | 0;
  }
  $5_1 = $5_1 ? $5_1 : 4;
  $6_1 = HEAP32[$1_1 >> 2] | 0;
  $7_1 = $1381($0_1 | 0) | 0;
  label$3 : {
   label$4 : {
    if (($4_1 | 0) != (275 | 0)) {
     break label$4
    }
    $8_1 = 0;
    break label$3;
   }
   $8_1 = $1381($0_1 | 0) | 0;
  }
  label$5 : {
   $8_1 = $2162($8_1 | 0, $5_1 | 0) | 0;
   if (!$8_1) {
    break label$5
   }
   label$6 : {
    if (($4_1 | 0) == (275 | 0)) {
     break label$6
    }
    $1432($0_1 | 0) | 0;
   }
   HEAP32[($3_1 + 4 | 0) >> 2] = 274;
   $4_1 = $1184($3_1 + 8 | 0 | 0, $8_1 | 0, $3_1 + 4 | 0 | 0) | 0;
   $1433($0_1 | 0, $4_1 | 0) | 0;
   $1187($4_1 | 0) | 0;
   HEAP32[$1_1 >> 2] = ($1381($0_1 | 0) | 0) + ($6_1 - $7_1 | 0) | 0;
   HEAP32[$2_1 >> 2] = ($1381($0_1 | 0) | 0) + ($5_1 & -4 | 0) | 0;
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $2029();
  abort();
 }
 
 function $1395($0_1) {
  $0_1 = $0_1 | 0;
  return $2010($0_1 | 0) | 0 | 0;
 }
 
 function $1396($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $8_1 = 0;
  $7_1 = global$0 - 448 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 432 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 440 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = 275;
  $8_1 = $1184($7_1 + 24 | 0 | 0, $7_1 + 32 | 0 | 0, $7_1 + 20 | 0 | 0) | 0;
  $774($7_1 + 16 | 0 | 0, $4_1 | 0);
  $1_1 = $819($7_1 + 16 | 0 | 0) | 0;
  HEAP8[($7_1 + 15 | 0) >> 0] = 0;
  label$1 : {
   if (!($1380($7_1 + 440 | 0 | 0, $2_1 | 0, $3_1 | 0, $7_1 + 16 | 0 | 0, $773($4_1 | 0) | 0 | 0, $5_1 | 0, $7_1 + 15 | 0 | 0, $1_1 | 0, $8_1 | 0, $7_1 + 20 | 0 | 0, $7_1 + 432 | 0 | 0) | 0)) {
    break label$1
   }
   $1397($6_1 | 0);
   label$2 : {
    if (!(HEAPU8[($7_1 + 15 | 0) >> 0] | 0)) {
     break label$2
    }
    $2084($6_1 | 0, $877($1_1 | 0, 45 | 0) | 0 | 0);
   }
   $1_1 = $877($1_1 | 0, 48 | 0) | 0;
   $4_1 = $1381($8_1 | 0) | 0;
   $3_1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
   $2_1 = $3_1 + -4 | 0;
   label$3 : {
    label$4 : while (1) {
     if ($4_1 >>> 0 >= $2_1 >>> 0) {
      break label$3
     }
     if ((HEAP32[$4_1 >> 2] | 0 | 0) != ($1_1 | 0)) {
      break label$3
     }
     $4_1 = $4_1 + 4 | 0;
     continue label$4;
    };
   }
   $1398($6_1 | 0, $4_1 | 0, $3_1 | 0) | 0;
  }
  label$5 : {
   if (!($824($7_1 + 440 | 0 | 0, $7_1 + 432 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 2 | 0;
  }
  $4_1 = HEAP32[($7_1 + 440 | 0) >> 2] | 0;
  $1018($7_1 + 16 | 0 | 0) | 0;
  $1187($8_1 | 0) | 0;
  global$0 = $7_1 + 448 | 0;
  return $4_1 | 0;
 }
 
 function $1397($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $1399($0_1 | 0);
  label$1 : {
   label$2 : {
    if (!($1230($0_1 | 0) | 0)) {
     break label$2
    }
    $2_1 = $1400($0_1 | 0) | 0;
    HEAP32[($1_1 + 12 | 0) >> 2] = 0;
    $1401($2_1 | 0, $1_1 + 12 | 0 | 0);
    $1402($0_1 | 0, 0 | 0);
    break label$1;
   }
   $2_1 = $1403($0_1 | 0) | 0;
   HEAP32[($1_1 + 8 | 0) >> 2] = 0;
   $1401($2_1 | 0, $1_1 + 8 | 0 | 0);
   $1404($0_1 | 0, 0 | 0);
  }
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1398($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1405($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $1399($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $1400($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($1812($0_1 | 0) | 0) >> 2] | 0 | 0;
 }
 
 function $1401($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
 }
 
 function $1402($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[(($1812($0_1 | 0) | 0) + 4 | 0) >> 2] = $1_1;
 }
 
 function $1403($0_1) {
  $0_1 = $0_1 | 0;
  return $1933($1812($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1404($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP8[(($1812($0_1 | 0) | 0) + 11 | 0) >> 0] = $1_1;
 }
 
 function $1405($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $4_1 = 0, $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = $1092($0_1 | 0) | 0;
  $5_1 = $1763($0_1 | 0) | 0;
  label$1 : {
   $6_1 = $1762($1_1 | 0, $2_1 | 0) | 0;
   if (!$6_1) {
    break label$1
   }
   label$2 : {
    if (!($2011($1940($1_1 | 0) | 0 | 0, $1179($0_1 | 0) | 0 | 0, ($1179($0_1 | 0) | 0) + (($1092($0_1 | 0) | 0) << 2 | 0) | 0 | 0) | 0)) {
     break label$2
    }
    $1_1 = $2012($3_1 | 0, $1_1 | 0, $2_1 | 0, $1810($0_1 | 0) | 0 | 0) | 0;
    $2083($0_1 | 0, $1227($1_1 | 0) | 0 | 0, $1092($1_1 | 0) | 0 | 0) | 0;
    $2077($1_1 | 0) | 0;
    break label$1;
   }
   label$3 : {
    if (($5_1 - $4_1 | 0) >>> 0 >= $6_1 >>> 0) {
     break label$3
    }
    $2081($0_1 | 0, $5_1 | 0, ($6_1 + $4_1 | 0) - $5_1 | 0 | 0, $4_1 | 0, $4_1 | 0, 0 | 0, 0 | 0);
   }
   $5_1 = ($1171($0_1 | 0) | 0) + ($4_1 << 2 | 0) | 0;
   label$4 : {
    label$5 : while (1) {
     if (($1_1 | 0) == ($2_1 | 0)) {
      break label$4
     }
     $1401($5_1 | 0, $1_1 | 0);
     $1_1 = $1_1 + 4 | 0;
     $5_1 = $5_1 + 4 | 0;
     continue label$5;
    };
   }
   HEAP32[$3_1 >> 2] = 0;
   $1401($5_1 | 0, $3_1 | 0);
   $1765($0_1 | 0, $6_1 + $4_1 | 0 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1406($0_1) {
  $0_1 = $0_1 | 0;
  return $1023($0_1 | 0, 334724 | 0) | 0 | 0;
 }
 
 function $1407($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 44 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1408($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1409($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1435($0_1 | 0, $1_1 | 0);
  return $0_1 | 0;
 }
 
 function $1410($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1411($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1412($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1413($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1414($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1415($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1416($0_1) {
  $0_1 = $0_1 | 0;
  return $1023($0_1 | 0, 334716 | 0) | 0 | 0;
 }
 
 function $1417($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 44 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1418($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1419($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1420($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1421($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1422($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1423($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1424($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1425($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$0_1 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $1426($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1427($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1428($0_1 | 0) | 0 | 0) == ($1426($1_1 | 0) | 0 | 0) | 0;
 }
 
 function $1428($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1429($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 16 | 0) >> 2] = $1_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $2_1;
  label$1 : {
   label$2 : while (1) {
    $2_1 = $1168($3_1 + 24 | 0 | 0, $3_1 + 16 | 0 | 0) | 0;
    if (!$2_1) {
     break label$1
    }
    if (!($2017($3_1 | 0, $1169($3_1 + 24 | 0 | 0) | 0 | 0, $1169($3_1 + 8 | 0 | 0) | 0 | 0) | 0)) {
     break label$1
    }
    $1170($3_1 + 24 | 0 | 0) | 0;
    $1170($3_1 + 8 | 0 | 0) | 0;
    continue label$2;
   };
  }
  global$0 = $3_1 + 32 | 0;
  return $2_1 ^ 1 | 0 | 0;
 }
 
 function $1430($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
  $1793($2_1 + 8 | 0 | 0, $1_1 | 0) | 0;
  $1_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1431($0_1) {
  $0_1 = $0_1 | 0;
  return $1190($0_1 | 0) | 0 | 0;
 }
 
 function $1432($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($1189($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($1189($0_1 | 0) | 0) >> 2] = 0;
  return $1_1 | 0;
 }
 
 function $1433($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1185($0_1 | 0, $1432($1_1 | 0) | 0 | 0);
  $1_1 = HEAP32[($882($1431($1_1 | 0) | 0 | 0) | 0) >> 2] | 0;
  HEAP32[($1190($0_1 | 0) | 0) >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $1434($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, i64toi32_i32$1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   if (!($1076($0_1 | 0) | 0)) {
    break label$1
   }
   $1795($1797($0_1 | 0) | 0 | 0, $1337($0_1 | 0) | 0 | 0, $1077($0_1 | 0) | 0 | 0);
  }
  $1953($0_1 | 0, $1_1 | 0);
  $3_1 = $1799($1_1 | 0) | 0;
  $0_1 = $1799($0_1 | 0) | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$3_1 >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = i64toi32_i32$1;
  $1341($1_1 | 0, 0 | 0);
  $0_1 = $1340($1_1 | 0) | 0;
  HEAP8[($2_1 + 15 | 0) >> 0] = 0;
  $1338($0_1 | 0, $2_1 + 15 | 0 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1435($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, i64toi32_i32$1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   if (!($1230($0_1 | 0) | 0)) {
    break label$1
   }
   $1808($1810($0_1 | 0) | 0 | 0, $1400($0_1 | 0) | 0 | 0, $1813($0_1 | 0) | 0 | 0);
  }
  $1957($0_1 | 0, $1_1 | 0);
  $3_1 = $1812($1_1 | 0) | 0;
  $0_1 = $1812($0_1 | 0) | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$3_1 >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = i64toi32_i32$1;
  $1404($1_1 | 0, 0 | 0);
  $0_1 = $1403($1_1 | 0) | 0;
  HEAP32[($2_1 + 12 | 0) >> 2] = 0;
  $1401($0_1 | 0, $2_1 + 12 | 0 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1436($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $5$hi, $6_1, $6$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5$hi = $5$hi | 0;
  $6_1 = $6_1 | 0;
  $6$hi = $6$hi | 0;
  var $7_1 = 0, $8_1 = 0, i64toi32_i32$0 = 0, $12_1 = 0, $14_1 = 0, $16_1 = 0, $18_1 = 0, $11_1 = 0, $9_1 = 0, $15_1 = 0, $17_1 = 0, $10_1 = 0, $13_1 = 0;
  $7_1 = global$0 - 464 | 0;
  global$0 = $7_1;
  i64toi32_i32$0 = $5$hi;
  HEAP32[($7_1 + 16 | 0) >> 2] = $5_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $6$hi;
  HEAP32[($7_1 + 24 | 0) >> 2] = $6_1;
  HEAP32[($7_1 + 28 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($7_1 + 348 | 0) >> 2] = $7_1 + 352 | 0;
  $8_1 = $977($7_1 + 352 | 0 | 0, 100 | 0, 14687 | 0, $7_1 + 16 | 0 | 0) | 0;
  HEAP32[($7_1 + 240 | 0) >> 2] = 274;
  $9_1 = 0;
  $10_1 = $1155($7_1 + 232 | 0 | 0, 0 | 0, $7_1 + 240 | 0 | 0) | 0;
  HEAP32[($7_1 + 240 | 0) >> 2] = 274;
  $11_1 = $1155($7_1 + 224 | 0 | 0, 0 | 0, $7_1 + 240 | 0 | 0) | 0;
  $12_1 = $7_1 + 240 | 0;
  label$1 : {
   label$2 : {
    if ($8_1 >>> 0 < 100 >>> 0) {
     break label$2
    }
    $8_1 = $1073() | 0;
    i64toi32_i32$0 = $5$hi;
    HEAP32[$7_1 >> 2] = $5_1;
    HEAP32[($7_1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = $6$hi;
    HEAP32[($7_1 + 8 | 0) >> 2] = $6_1;
    HEAP32[($7_1 + 12 | 0) >> 2] = i64toi32_i32$0;
    $8_1 = $1156($7_1 + 348 | 0 | 0, $8_1 | 0, 14687 | 0, $7_1 | 0) | 0;
    $12_1 = HEAP32[($7_1 + 348 | 0) >> 2] | 0;
    if (!$12_1) {
     break label$1
    }
    $1157($10_1 | 0, $12_1 | 0);
    $1157($11_1 | 0, $2160($8_1 | 0) | 0 | 0);
    if ($1437($11_1 | 0, 0 | 0) | 0) {
     break label$1
    }
    $12_1 = $1315($11_1 | 0) | 0;
   }
   $774($7_1 + 216 | 0 | 0, $3_1 | 0);
   $13_1 = $775($7_1 + 216 | 0 | 0) | 0;
   $14_1 = HEAP32[($7_1 + 348 | 0) >> 2] | 0;
   $1071($13_1 | 0, $14_1 | 0, $14_1 + $8_1 | 0 | 0, $12_1 | 0) | 0;
   label$3 : {
    if (!$8_1) {
     break label$3
    }
    $9_1 = (HEAPU8[(HEAP32[($7_1 + 348 | 0) >> 2] | 0) >> 0] | 0 | 0) == (45 | 0);
   }
   $15_1 = $1037($7_1 + 192 | 0 | 0) | 0;
   $14_1 = $1037($7_1 + 176 | 0 | 0) | 0;
   $16_1 = $1037($7_1 + 160 | 0 | 0) | 0;
   $1438($2_1 | 0, $9_1 | 0, $7_1 + 216 | 0 | 0, $7_1 + 208 | 0 | 0, $7_1 + 207 | 0 | 0, $7_1 + 206 | 0 | 0, $15_1 | 0, $14_1 | 0, $16_1 | 0, $7_1 + 156 | 0 | 0);
   HEAP32[($7_1 + 48 | 0) >> 2] = 274;
   $17_1 = $1155($7_1 + 40 | 0 | 0, 0 | 0, $7_1 + 48 | 0 | 0) | 0;
   label$4 : {
    label$5 : {
     $2_1 = HEAP32[($7_1 + 156 | 0) >> 2] | 0;
     if (($8_1 | 0) <= ($2_1 | 0)) {
      break label$5
     }
     $18_1 = (($8_1 - $2_1 | 0) << 1 | 0 | 1 | 0) + ($1028($16_1 | 0) | 0) | 0;
     break label$4;
    }
    $18_1 = ($1028($16_1 | 0) | 0) + 2 | 0;
   }
   $2_1 = $7_1 + 48 | 0;
   label$6 : {
    $18_1 = ($18_1 + ($1028($14_1 | 0) | 0) | 0) + (HEAP32[($7_1 + 156 | 0) >> 2] | 0) | 0;
    if ($18_1 >>> 0 < 101 >>> 0) {
     break label$6
    }
    $1157($17_1 | 0, $2160($18_1 | 0) | 0 | 0);
    $2_1 = $1315($17_1 | 0) | 0;
    if (!$2_1) {
     break label$1
    }
   }
   $1439($2_1 | 0, $7_1 + 36 | 0 | 0, $7_1 + 32 | 0 | 0, $773($3_1 | 0) | 0 | 0, $12_1 | 0, $12_1 + $8_1 | 0 | 0, $13_1 | 0, $9_1 | 0, $7_1 + 208 | 0 | 0, HEAP8[($7_1 + 207 | 0) >> 0] | 0 | 0, HEAP8[($7_1 + 206 | 0) >> 0] | 0 | 0, $15_1 | 0, $14_1 | 0, $16_1 | 0, HEAP32[($7_1 + 156 | 0) >> 2] | 0 | 0);
   $8_1 = $184($1_1 | 0, $2_1 | 0, HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 32 | 0) >> 2] | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
   $1159($17_1 | 0) | 0;
   $2058($16_1 | 0) | 0;
   $2058($14_1 | 0) | 0;
   $2058($15_1 | 0) | 0;
   $1018($7_1 + 216 | 0 | 0) | 0;
   $1159($11_1 | 0) | 0;
   $1159($10_1 | 0) | 0;
   global$0 = $7_1 + 464 | 0;
   return $8_1 | 0;
  }
  $2029();
  abort();
 }
 
 function $1437($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1440($0_1 | 0) | 0) ^ 1 | 0 | 0;
 }
 
 function $1438($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0;
  $10_1 = global$0 - 16 | 0;
  global$0 = $10_1;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    $0_1 = $1345($2_1 | 0) | 0;
    label$3 : {
     label$4 : {
      if (!$1_1) {
       break label$4
      }
      $1346($10_1 | 0, $0_1 | 0);
      $11_1 = HEAP32[$10_1 >> 2] | 0;
      HEAP8[$3_1 >> 0] = $11_1;
      HEAP8[($3_1 + 1 | 0) >> 0] = $11_1 >>> 8 | 0;
      HEAP8[($3_1 + 2 | 0) >> 0] = $11_1 >>> 16 | 0;
      HEAP8[($3_1 + 3 | 0) >> 0] = $11_1 >>> 24 | 0;
      $1347($10_1 | 0, $0_1 | 0);
      $1348($8_1 | 0, $10_1 | 0) | 0;
      $2058($10_1 | 0) | 0;
      break label$3;
     }
     $1441($10_1 | 0, $0_1 | 0);
     $12_1 = HEAP32[$10_1 >> 2] | 0;
     HEAP8[$3_1 >> 0] = $12_1;
     HEAP8[($3_1 + 1 | 0) >> 0] = $12_1 >>> 8 | 0;
     HEAP8[($3_1 + 2 | 0) >> 0] = $12_1 >>> 16 | 0;
     HEAP8[($3_1 + 3 | 0) >> 0] = $12_1 >>> 24 | 0;
     $1349($10_1 | 0, $0_1 | 0);
     $1348($8_1 | 0, $10_1 | 0) | 0;
     $2058($10_1 | 0) | 0;
    }
    HEAP8[$4_1 >> 0] = $1350($0_1 | 0) | 0;
    HEAP8[$5_1 >> 0] = $1351($0_1 | 0) | 0;
    $1352($10_1 | 0, $0_1 | 0);
    $1348($6_1 | 0, $10_1 | 0) | 0;
    $2058($10_1 | 0) | 0;
    $1353($10_1 | 0, $0_1 | 0);
    $1348($7_1 | 0, $10_1 | 0) | 0;
    $2058($10_1 | 0) | 0;
    $0_1 = $1354($0_1 | 0) | 0;
    break label$1;
   }
   $0_1 = $1355($2_1 | 0) | 0;
   label$5 : {
    label$6 : {
     if (!$1_1) {
      break label$6
     }
     $1356($10_1 | 0, $0_1 | 0);
     $13_1 = HEAP32[$10_1 >> 2] | 0;
     HEAP8[$3_1 >> 0] = $13_1;
     HEAP8[($3_1 + 1 | 0) >> 0] = $13_1 >>> 8 | 0;
     HEAP8[($3_1 + 2 | 0) >> 0] = $13_1 >>> 16 | 0;
     HEAP8[($3_1 + 3 | 0) >> 0] = $13_1 >>> 24 | 0;
     $1357($10_1 | 0, $0_1 | 0);
     $1348($8_1 | 0, $10_1 | 0) | 0;
     $2058($10_1 | 0) | 0;
     break label$5;
    }
    $1442($10_1 | 0, $0_1 | 0);
    $14_1 = HEAP32[$10_1 >> 2] | 0;
    HEAP8[$3_1 >> 0] = $14_1;
    HEAP8[($3_1 + 1 | 0) >> 0] = $14_1 >>> 8 | 0;
    HEAP8[($3_1 + 2 | 0) >> 0] = $14_1 >>> 16 | 0;
    HEAP8[($3_1 + 3 | 0) >> 0] = $14_1 >>> 24 | 0;
    $1358($10_1 | 0, $0_1 | 0);
    $1348($8_1 | 0, $10_1 | 0) | 0;
    $2058($10_1 | 0) | 0;
   }
   HEAP8[$4_1 >> 0] = $1359($0_1 | 0) | 0;
   HEAP8[$5_1 >> 0] = $1360($0_1 | 0) | 0;
   $1361($10_1 | 0, $0_1 | 0);
   $1348($6_1 | 0, $10_1 | 0) | 0;
   $2058($10_1 | 0) | 0;
   $1362($10_1 | 0, $0_1 | 0);
   $1348($7_1 | 0, $10_1 | 0) | 0;
   $2058($10_1 | 0) | 0;
   $0_1 = $1363($0_1 | 0) | 0;
  }
  HEAP32[$9_1 >> 2] = $0_1;
  global$0 = $10_1 + 16 | 0;
 }
 
 function $1439($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1, $12_1, $13_1, $14_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  $11_1 = $11_1 | 0;
  $12_1 = $12_1 | 0;
  $13_1 = $13_1 | 0;
  $14_1 = $14_1 | 0;
  var $18_1 = 0, $19_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $15_1 = 0, $17_1 = 0, $16_1 = 0, $20_1 = 0;
  $15_1 = global$0 - 16 | 0;
  global$0 = $15_1;
  HEAP32[$2_1 >> 2] = $0_1;
  $16_1 = $3_1 & 512 | 0;
  $17_1 = 0;
  label$1 : while (1) {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        if (($17_1 | 0) != (4 | 0)) {
         break label$6
        }
        label$7 : {
         if (($1028($13_1 | 0) | 0) >>> 0 <= 1 >>> 0) {
          break label$7
         }
         HEAP32[($15_1 + 8 | 0) >> 2] = $1443($13_1 | 0) | 0;
         HEAP32[$2_1 >> 2] = $1446($1444($15_1 + 8 | 0 | 0, 1 | 0) | 0 | 0, $1445($13_1 | 0) | 0 | 0, HEAP32[$2_1 >> 2] | 0 | 0) | 0;
        }
        $18_1 = $3_1 & 176 | 0;
        if (($18_1 | 0) == (16 | 0)) {
         break label$4
        }
        if (($18_1 | 0) != (32 | 0)) {
         break label$5
        }
        HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
        break label$4;
       }
       label$8 : {
        switch (HEAP8[($8_1 + $17_1 | 0) >> 0] | 0 | 0) {
        case 0:
         HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
         break label$2;
        case 1:
         HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
         $18_1 = $876($6_1 | 0, 32 | 0) | 0;
         $19_1 = HEAP32[$2_1 >> 2] | 0;
         HEAP32[$2_1 >> 2] = $19_1 + 1 | 0;
         HEAP8[$19_1 >> 0] = $18_1;
         break label$2;
        case 3:
         if ($1031($13_1 | 0) | 0) {
          break label$2
         }
         $18_1 = HEAPU8[($1029($13_1 | 0, 0 | 0) | 0) >> 0] | 0;
         $19_1 = HEAP32[$2_1 >> 2] | 0;
         HEAP32[$2_1 >> 2] = $19_1 + 1 | 0;
         HEAP8[$19_1 >> 0] = $18_1;
         break label$2;
        case 2:
         $18_1 = $1031($12_1 | 0) | 0;
         if (!$16_1) {
          break label$2
         }
         if ($18_1) {
          break label$2
         }
         HEAP32[$2_1 >> 2] = $1446($1443($12_1 | 0) | 0 | 0, $1445($12_1 | 0) | 0 | 0, HEAP32[$2_1 >> 2] | 0 | 0) | 0;
         break label$2;
        case 4:
         break label$8;
        default:
         break label$2;
        };
       }
       $20_1 = HEAP32[$2_1 >> 2] | 0;
       $4_1 = $7_1 ? $4_1 + 1 | 0 : $4_1;
       $18_1 = $4_1;
       label$13 : {
        label$14 : while (1) {
         if ($18_1 >>> 0 >= $5_1 >>> 0) {
          break label$13
         }
         if (!($780($6_1 | 0, 2048 | 0, HEAP8[$18_1 >> 0] | 0 | 0) | 0)) {
          break label$13
         }
         $18_1 = $18_1 + 1 | 0;
         continue label$14;
        };
       }
       $19_1 = $14_1;
       label$15 : {
        if (($19_1 | 0) < (1 | 0)) {
         break label$15
        }
        label$16 : {
         label$17 : while (1) {
          $21_1 = ($19_1 | 0) < (1 | 0);
          if ($21_1) {
           break label$16
          }
          if ($18_1 >>> 0 <= $4_1 >>> 0) {
           break label$16
          }
          $18_1 = $18_1 + -1 | 0;
          $21_1 = HEAPU8[$18_1 >> 0] | 0;
          $22_1 = HEAP32[$2_1 >> 2] | 0;
          HEAP32[$2_1 >> 2] = $22_1 + 1 | 0;
          HEAP8[$22_1 >> 0] = $21_1;
          $19_1 = $19_1 + -1 | 0;
          continue label$17;
         };
        }
        label$18 : {
         label$19 : {
          if (!$21_1) {
           break label$19
          }
          $22_1 = 0;
          break label$18;
         }
         $22_1 = $876($6_1 | 0, 48 | 0) | 0;
        }
        label$20 : {
         label$21 : while (1) {
          $21_1 = HEAP32[$2_1 >> 2] | 0;
          HEAP32[$2_1 >> 2] = $21_1 + 1 | 0;
          if (($19_1 | 0) < (1 | 0)) {
           break label$20
          }
          HEAP8[$21_1 >> 0] = $22_1;
          $19_1 = $19_1 + -1 | 0;
          continue label$21;
         };
        }
        HEAP8[$21_1 >> 0] = $9_1;
       }
       label$22 : {
        if (($18_1 | 0) != ($4_1 | 0)) {
         break label$22
        }
        $18_1 = $876($6_1 | 0, 48 | 0) | 0;
        $19_1 = HEAP32[$2_1 >> 2] | 0;
        HEAP32[$2_1 >> 2] = $19_1 + 1 | 0;
        HEAP8[$19_1 >> 0] = $18_1;
        break label$3;
       }
       label$23 : {
        label$24 : {
         if (!($1031($11_1 | 0) | 0)) {
          break label$24
         }
         $23_1 = $1447() | 0;
         break label$23;
        }
        $23_1 = HEAP8[($1029($11_1 | 0, 0 | 0) | 0) >> 0] | 0;
       }
       $19_1 = 0;
       $24_1 = 0;
       label$25 : while (1) {
        if (($18_1 | 0) == ($4_1 | 0)) {
         break label$3
        }
        label$26 : {
         label$27 : {
          if (($19_1 | 0) == ($23_1 | 0)) {
           break label$27
          }
          $22_1 = $19_1;
          break label$26;
         }
         $21_1 = HEAP32[$2_1 >> 2] | 0;
         HEAP32[$2_1 >> 2] = $21_1 + 1 | 0;
         HEAP8[$21_1 >> 0] = $10_1;
         $22_1 = 0;
         label$28 : {
          $24_1 = $24_1 + 1 | 0;
          if ($24_1 >>> 0 < ($1028($11_1 | 0) | 0) >>> 0) {
           break label$28
          }
          $23_1 = $19_1;
          break label$26;
         }
         label$29 : {
          if ((HEAPU8[($1029($11_1 | 0, $24_1 | 0) | 0) >> 0] | 0 | 0) != (($1271() | 0) & 255 | 0 | 0)) {
           break label$29
          }
          $23_1 = $1447() | 0;
          break label$26;
         }
         $23_1 = HEAP8[($1029($11_1 | 0, $24_1 | 0) | 0) >> 0] | 0;
        }
        $18_1 = $18_1 + -1 | 0;
        $19_1 = HEAPU8[$18_1 >> 0] | 0;
        $21_1 = HEAP32[$2_1 >> 2] | 0;
        HEAP32[$2_1 >> 2] = $21_1 + 1 | 0;
        HEAP8[$21_1 >> 0] = $19_1;
        $19_1 = $22_1 + 1 | 0;
        continue label$25;
       };
      }
      HEAP32[$1_1 >> 2] = $0_1;
     }
     global$0 = $15_1 + 16 | 0;
     return;
    }
    $1144($20_1 | 0, HEAP32[$2_1 >> 2] | 0 | 0);
   }
   $17_1 = $17_1 + 1 | 0;
   continue label$1;
  };
 }
 
 function $1440($0_1) {
  $0_1 = $0_1 | 0;
  return (HEAP32[($1332($0_1 | 0) | 0) >> 2] | 0 | 0) != (0 | 0) | 0;
 }
 
 function $1441($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1442($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1443($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0_1 = HEAP32[($1463($1_1 + 8 | 0 | 0, $1200($0_1 | 0) | 0 | 0) | 0) >> 2] | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1444($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
  $1465($2_1 + 8 | 0 | 0, $1_1 | 0) | 0;
  $1_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1445($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0_1 = HEAP32[($1463($1_1 + 8 | 0 | 0, ($1200($0_1 | 0) | 0) + ($1028($0_1 | 0) | 0) | 0 | 0) | 0) >> 2] | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1446($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1462($1461($0_1 | 0) | 0 | 0, $1461($1_1 | 0) | 0 | 0, $1258($2_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1447() {
  return $1464() | 0 | 0;
 }
 
 function $1448($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $13_1 = 0, $11_1 = 0, $10_1 = 0, $8_1 = 0, $9_1 = 0, $12_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 192 | 0;
  global$0 = $6_1;
  $774($6_1 + 184 | 0 | 0, $3_1 | 0);
  $7_1 = $775($6_1 + 184 | 0 | 0) | 0;
  $8_1 = 0;
  label$1 : {
   if (!($1028($5_1 | 0) | 0)) {
    break label$1
   }
   $8_1 = (HEAPU8[($1029($5_1 | 0, 0 | 0) | 0) >> 0] | 0 | 0) == (($876($7_1 | 0, 45 | 0) | 0) & 255 | 0 | 0);
  }
  $9_1 = $1037($6_1 + 160 | 0 | 0) | 0;
  $10_1 = $1037($6_1 + 144 | 0 | 0) | 0;
  $11_1 = $1037($6_1 + 128 | 0 | 0) | 0;
  $1438($2_1 | 0, $8_1 | 0, $6_1 + 184 | 0 | 0, $6_1 + 176 | 0 | 0, $6_1 + 175 | 0 | 0, $6_1 + 174 | 0 | 0, $9_1 | 0, $10_1 | 0, $11_1 | 0, $6_1 + 124 | 0 | 0);
  HEAP32[($6_1 + 16 | 0) >> 2] = 274;
  $12_1 = $1155($6_1 + 8 | 0 | 0, 0 | 0, $6_1 + 16 | 0 | 0) | 0;
  label$2 : {
   label$3 : {
    if (($1028($5_1 | 0) | 0 | 0) <= (HEAP32[($6_1 + 124 | 0) >> 2] | 0 | 0)) {
     break label$3
    }
    $2_1 = $1028($5_1 | 0) | 0;
    $13_1 = HEAP32[($6_1 + 124 | 0) >> 2] | 0;
    $13_1 = (($1028($11_1 | 0) | 0) + (($2_1 - $13_1 | 0) << 1 | 0) | 0) + 1 | 0;
    break label$2;
   }
   $13_1 = ($1028($11_1 | 0) | 0) + 2 | 0;
  }
  $2_1 = $6_1 + 16 | 0;
  label$4 : {
   $13_1 = ($13_1 + ($1028($10_1 | 0) | 0) | 0) + (HEAP32[($6_1 + 124 | 0) >> 2] | 0) | 0;
   if ($13_1 >>> 0 < 101 >>> 0) {
    break label$4
   }
   $1157($12_1 | 0, $2160($13_1 | 0) | 0 | 0);
   $2_1 = $1315($12_1 | 0) | 0;
   if ($2_1) {
    break label$4
   }
   $2029();
   abort();
  }
  $1439($2_1 | 0, $6_1 + 4 | 0 | 0, $6_1 | 0, $773($3_1 | 0) | 0 | 0, $1084($5_1 | 0) | 0 | 0, ($1084($5_1 | 0) | 0) + ($1028($5_1 | 0) | 0) | 0 | 0, $7_1 | 0, $8_1 | 0, $6_1 + 176 | 0 | 0, HEAP8[($6_1 + 175 | 0) >> 0] | 0 | 0, HEAP8[($6_1 + 174 | 0) >> 0] | 0 | 0, $9_1 | 0, $10_1 | 0, $11_1 | 0, HEAP32[($6_1 + 124 | 0) >> 2] | 0 | 0);
  $5_1 = $184($1_1 | 0, $2_1 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$6_1 >> 2] | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
  $1159($12_1 | 0) | 0;
  $2058($11_1 | 0) | 0;
  $2058($10_1 | 0) | 0;
  $2058($9_1 | 0) | 0;
  $1018($6_1 + 184 | 0 | 0) | 0;
  global$0 = $6_1 + 192 | 0;
  return $5_1 | 0;
 }
 
 function $1449($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $5$hi, $6_1, $6$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5$hi = $5$hi | 0;
  $6_1 = $6_1 | 0;
  $6$hi = $6$hi | 0;
  var $7_1 = 0, $8_1 = 0, i64toi32_i32$0 = 0, $12_1 = 0, $14_1 = 0, $16_1 = 0, $18_1 = 0, $11_1 = 0, $9_1 = 0, $15_1 = 0, $17_1 = 0, $10_1 = 0, $13_1 = 0;
  $7_1 = global$0 - 1072 | 0;
  global$0 = $7_1;
  i64toi32_i32$0 = $5$hi;
  HEAP32[($7_1 + 16 | 0) >> 2] = $5_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $6$hi;
  HEAP32[($7_1 + 24 | 0) >> 2] = $6_1;
  HEAP32[($7_1 + 28 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($7_1 + 956 | 0) >> 2] = $7_1 + 960 | 0;
  $8_1 = $977($7_1 + 960 | 0 | 0, 100 | 0, 14687 | 0, $7_1 + 16 | 0 | 0) | 0;
  HEAP32[($7_1 + 544 | 0) >> 2] = 274;
  $9_1 = 0;
  $10_1 = $1155($7_1 + 536 | 0 | 0, 0 | 0, $7_1 + 544 | 0 | 0) | 0;
  HEAP32[($7_1 + 544 | 0) >> 2] = 274;
  $11_1 = $1184($7_1 + 528 | 0 | 0, 0 | 0, $7_1 + 544 | 0 | 0) | 0;
  $12_1 = $7_1 + 544 | 0;
  label$1 : {
   label$2 : {
    if ($8_1 >>> 0 < 100 >>> 0) {
     break label$2
    }
    $8_1 = $1073() | 0;
    i64toi32_i32$0 = $5$hi;
    HEAP32[$7_1 >> 2] = $5_1;
    HEAP32[($7_1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = $6$hi;
    HEAP32[($7_1 + 8 | 0) >> 2] = $6_1;
    HEAP32[($7_1 + 12 | 0) >> 2] = i64toi32_i32$0;
    $8_1 = $1156($7_1 + 956 | 0 | 0, $8_1 | 0, 14687 | 0, $7_1 | 0) | 0;
    $12_1 = HEAP32[($7_1 + 956 | 0) >> 2] | 0;
    if (!$12_1) {
     break label$1
    }
    $1157($10_1 | 0, $12_1 | 0);
    $1185($11_1 | 0, $2160($8_1 << 2 | 0 | 0) | 0 | 0);
    if ($1450($11_1 | 0, 0 | 0) | 0) {
     break label$1
    }
    $12_1 = $1381($11_1 | 0) | 0;
   }
   $774($7_1 + 520 | 0 | 0, $3_1 | 0);
   $13_1 = $819($7_1 + 520 | 0 | 0) | 0;
   $14_1 = HEAP32[($7_1 + 956 | 0) >> 2] | 0;
   $1119($13_1 | 0, $14_1 | 0, $14_1 + $8_1 | 0 | 0, $12_1 | 0) | 0;
   label$3 : {
    if (!$8_1) {
     break label$3
    }
    $9_1 = (HEAPU8[(HEAP32[($7_1 + 956 | 0) >> 2] | 0) >> 0] | 0 | 0) == (45 | 0);
   }
   $15_1 = $1037($7_1 + 488 | 0 | 0) | 0;
   $14_1 = $1296($7_1 + 472 | 0 | 0) | 0;
   $16_1 = $1296($7_1 + 456 | 0 | 0) | 0;
   $1451($2_1 | 0, $9_1 | 0, $7_1 + 520 | 0 | 0, $7_1 + 512 | 0 | 0, $7_1 + 508 | 0 | 0, $7_1 + 504 | 0 | 0, $15_1 | 0, $14_1 | 0, $16_1 | 0, $7_1 + 452 | 0 | 0);
   HEAP32[($7_1 + 48 | 0) >> 2] = 274;
   $17_1 = $1184($7_1 + 40 | 0 | 0, 0 | 0, $7_1 + 48 | 0 | 0) | 0;
   label$4 : {
    label$5 : {
     $2_1 = HEAP32[($7_1 + 452 | 0) >> 2] | 0;
     if (($8_1 | 0) <= ($2_1 | 0)) {
      break label$5
     }
     $18_1 = (($8_1 - $2_1 | 0) << 1 | 0 | 1 | 0) + ($1092($16_1 | 0) | 0) | 0;
     break label$4;
    }
    $18_1 = ($1092($16_1 | 0) | 0) + 2 | 0;
   }
   $2_1 = $7_1 + 48 | 0;
   label$6 : {
    $18_1 = ($18_1 + ($1092($14_1 | 0) | 0) | 0) + (HEAP32[($7_1 + 452 | 0) >> 2] | 0) | 0;
    if ($18_1 >>> 0 < 101 >>> 0) {
     break label$6
    }
    $1185($17_1 | 0, $2160($18_1 << 2 | 0 | 0) | 0 | 0);
    $2_1 = $1381($17_1 | 0) | 0;
    if (!$2_1) {
     break label$1
    }
   }
   $1452($2_1 | 0, $7_1 + 36 | 0 | 0, $7_1 + 32 | 0 | 0, $773($3_1 | 0) | 0 | 0, $12_1 | 0, $12_1 + ($8_1 << 2 | 0) | 0 | 0, $13_1 | 0, $9_1 | 0, $7_1 + 512 | 0 | 0, HEAP32[($7_1 + 508 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 504 | 0) >> 2] | 0 | 0, $15_1 | 0, $14_1 | 0, $16_1 | 0, HEAP32[($7_1 + 452 | 0) >> 2] | 0 | 0);
   $8_1 = $1176($1_1 | 0, $2_1 | 0, HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 32 | 0) >> 2] | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
   $1187($17_1 | 0) | 0;
   $2077($16_1 | 0) | 0;
   $2077($14_1 | 0) | 0;
   $2058($15_1 | 0) | 0;
   $1018($7_1 + 520 | 0 | 0) | 0;
   $1187($11_1 | 0) | 0;
   $1159($10_1 | 0) | 0;
   global$0 = $7_1 + 1072 | 0;
   return $8_1 | 0;
  }
  $2029();
  abort();
 }
 
 function $1450($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1453($0_1 | 0) | 0) ^ 1 | 0 | 0;
 }
 
 function $1451($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0;
  $10_1 = global$0 - 16 | 0;
  global$0 = $10_1;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    $0_1 = $1406($2_1 | 0) | 0;
    label$3 : {
     label$4 : {
      if (!$1_1) {
       break label$4
      }
      $1407($10_1 | 0, $0_1 | 0);
      $11_1 = HEAP32[$10_1 >> 2] | 0;
      HEAP8[$3_1 >> 0] = $11_1;
      HEAP8[($3_1 + 1 | 0) >> 0] = $11_1 >>> 8 | 0;
      HEAP8[($3_1 + 2 | 0) >> 0] = $11_1 >>> 16 | 0;
      HEAP8[($3_1 + 3 | 0) >> 0] = $11_1 >>> 24 | 0;
      $1408($10_1 | 0, $0_1 | 0);
      $1409($8_1 | 0, $10_1 | 0) | 0;
      $2077($10_1 | 0) | 0;
      break label$3;
     }
     $1454($10_1 | 0, $0_1 | 0);
     $12_1 = HEAP32[$10_1 >> 2] | 0;
     HEAP8[$3_1 >> 0] = $12_1;
     HEAP8[($3_1 + 1 | 0) >> 0] = $12_1 >>> 8 | 0;
     HEAP8[($3_1 + 2 | 0) >> 0] = $12_1 >>> 16 | 0;
     HEAP8[($3_1 + 3 | 0) >> 0] = $12_1 >>> 24 | 0;
     $1410($10_1 | 0, $0_1 | 0);
     $1409($8_1 | 0, $10_1 | 0) | 0;
     $2077($10_1 | 0) | 0;
    }
    HEAP32[$4_1 >> 2] = $1411($0_1 | 0) | 0;
    HEAP32[$5_1 >> 2] = $1412($0_1 | 0) | 0;
    $1413($10_1 | 0, $0_1 | 0);
    $1348($6_1 | 0, $10_1 | 0) | 0;
    $2058($10_1 | 0) | 0;
    $1414($10_1 | 0, $0_1 | 0);
    $1409($7_1 | 0, $10_1 | 0) | 0;
    $2077($10_1 | 0) | 0;
    $0_1 = $1415($0_1 | 0) | 0;
    break label$1;
   }
   $0_1 = $1416($2_1 | 0) | 0;
   label$5 : {
    label$6 : {
     if (!$1_1) {
      break label$6
     }
     $1417($10_1 | 0, $0_1 | 0);
     $13_1 = HEAP32[$10_1 >> 2] | 0;
     HEAP8[$3_1 >> 0] = $13_1;
     HEAP8[($3_1 + 1 | 0) >> 0] = $13_1 >>> 8 | 0;
     HEAP8[($3_1 + 2 | 0) >> 0] = $13_1 >>> 16 | 0;
     HEAP8[($3_1 + 3 | 0) >> 0] = $13_1 >>> 24 | 0;
     $1418($10_1 | 0, $0_1 | 0);
     $1409($8_1 | 0, $10_1 | 0) | 0;
     $2077($10_1 | 0) | 0;
     break label$5;
    }
    $1455($10_1 | 0, $0_1 | 0);
    $14_1 = HEAP32[$10_1 >> 2] | 0;
    HEAP8[$3_1 >> 0] = $14_1;
    HEAP8[($3_1 + 1 | 0) >> 0] = $14_1 >>> 8 | 0;
    HEAP8[($3_1 + 2 | 0) >> 0] = $14_1 >>> 16 | 0;
    HEAP8[($3_1 + 3 | 0) >> 0] = $14_1 >>> 24 | 0;
    $1419($10_1 | 0, $0_1 | 0);
    $1409($8_1 | 0, $10_1 | 0) | 0;
    $2077($10_1 | 0) | 0;
   }
   HEAP32[$4_1 >> 2] = $1420($0_1 | 0) | 0;
   HEAP32[$5_1 >> 2] = $1421($0_1 | 0) | 0;
   $1422($10_1 | 0, $0_1 | 0);
   $1348($6_1 | 0, $10_1 | 0) | 0;
   $2058($10_1 | 0) | 0;
   $1423($10_1 | 0, $0_1 | 0);
   $1409($7_1 | 0, $10_1 | 0) | 0;
   $2077($10_1 | 0) | 0;
   $0_1 = $1424($0_1 | 0) | 0;
  }
  HEAP32[$9_1 >> 2] = $0_1;
  global$0 = $10_1 + 16 | 0;
 }
 
 function $1452($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1, $12_1, $13_1, $14_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  $11_1 = $11_1 | 0;
  $12_1 = $12_1 | 0;
  $13_1 = $13_1 | 0;
  $14_1 = $14_1 | 0;
  var $18_1 = 0, $19_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $15_1 = 0, $17_1 = 0, $16_1 = 0, $20_1 = 0;
  $15_1 = global$0 - 16 | 0;
  global$0 = $15_1;
  HEAP32[$2_1 >> 2] = $0_1;
  $16_1 = $3_1 & 512 | 0;
  $17_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : while (1) {
     label$4 : {
      if (($17_1 | 0) != (4 | 0)) {
       break label$4
      }
      label$5 : {
       if (($1092($13_1 | 0) | 0) >>> 0 <= 1 >>> 0) {
        break label$5
       }
       HEAP32[($15_1 + 8 | 0) >> 2] = $1456($13_1 | 0) | 0;
       HEAP32[$2_1 >> 2] = $1459($1457($15_1 + 8 | 0 | 0, 1 | 0) | 0 | 0, $1458($13_1 | 0) | 0 | 0, HEAP32[$2_1 >> 2] | 0 | 0) | 0;
      }
      $18_1 = $3_1 & 176 | 0;
      if (($18_1 | 0) == (16 | 0)) {
       break label$1
      }
      if (($18_1 | 0) != (32 | 0)) {
       break label$2
      }
      HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
      break label$1;
     }
     label$6 : {
      label$7 : {
       switch (HEAP8[($8_1 + $17_1 | 0) >> 0] | 0 | 0) {
       case 0:
        HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
        break label$6;
       case 1:
        HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
        $18_1 = $877($6_1 | 0, 32 | 0) | 0;
        $19_1 = HEAP32[$2_1 >> 2] | 0;
        HEAP32[$2_1 >> 2] = $19_1 + 4 | 0;
        HEAP32[$19_1 >> 2] = $18_1;
        break label$6;
       case 3:
        if ($1094($13_1 | 0) | 0) {
         break label$6
        }
        $18_1 = HEAP32[($1093($13_1 | 0, 0 | 0) | 0) >> 2] | 0;
        $19_1 = HEAP32[$2_1 >> 2] | 0;
        HEAP32[$2_1 >> 2] = $19_1 + 4 | 0;
        HEAP32[$19_1 >> 2] = $18_1;
        break label$6;
       case 2:
        $18_1 = $1094($12_1 | 0) | 0;
        if (!$16_1) {
         break label$6
        }
        if ($18_1) {
         break label$6
        }
        HEAP32[$2_1 >> 2] = $1459($1456($12_1 | 0) | 0 | 0, $1458($12_1 | 0) | 0 | 0, HEAP32[$2_1 >> 2] | 0 | 0) | 0;
        break label$6;
       case 4:
        break label$7;
       default:
        break label$6;
       };
      }
      $20_1 = HEAP32[$2_1 >> 2] | 0;
      $4_1 = $7_1 ? $4_1 + 4 | 0 : $4_1;
      $18_1 = $4_1;
      label$12 : {
       label$13 : while (1) {
        if ($18_1 >>> 0 >= $5_1 >>> 0) {
         break label$12
        }
        if (!($822($6_1 | 0, 2048 | 0, HEAP32[$18_1 >> 2] | 0 | 0) | 0)) {
         break label$12
        }
        $18_1 = $18_1 + 4 | 0;
        continue label$13;
       };
      }
      $19_1 = $14_1;
      label$14 : {
       if (($19_1 | 0) < (1 | 0)) {
        break label$14
       }
       label$15 : {
        label$16 : while (1) {
         $21_1 = ($19_1 | 0) < (1 | 0);
         if ($21_1) {
          break label$15
         }
         if ($18_1 >>> 0 <= $4_1 >>> 0) {
          break label$15
         }
         $18_1 = $18_1 + -4 | 0;
         $21_1 = HEAP32[$18_1 >> 2] | 0;
         $22_1 = HEAP32[$2_1 >> 2] | 0;
         HEAP32[$2_1 >> 2] = $22_1 + 4 | 0;
         HEAP32[$22_1 >> 2] = $21_1;
         $19_1 = $19_1 + -1 | 0;
         continue label$16;
        };
       }
       label$17 : {
        label$18 : {
         if (!$21_1) {
          break label$18
         }
         $23_1 = 0;
         break label$17;
        }
        $23_1 = $877($6_1 | 0, 48 | 0) | 0;
       }
       $21_1 = HEAP32[$2_1 >> 2] | 0;
       label$19 : {
        label$20 : while (1) {
         $22_1 = $21_1 + 4 | 0;
         if (($19_1 | 0) < (1 | 0)) {
          break label$19
         }
         HEAP32[$21_1 >> 2] = $23_1;
         $19_1 = $19_1 + -1 | 0;
         $21_1 = $22_1;
         continue label$20;
        };
       }
       HEAP32[$2_1 >> 2] = $22_1;
       HEAP32[$21_1 >> 2] = $9_1;
      }
      label$21 : {
       label$22 : {
        if (($18_1 | 0) != ($4_1 | 0)) {
         break label$22
        }
        $19_1 = $877($6_1 | 0, 48 | 0) | 0;
        $21_1 = HEAP32[$2_1 >> 2] | 0;
        $18_1 = $21_1 + 4 | 0;
        HEAP32[$2_1 >> 2] = $18_1;
        HEAP32[$21_1 >> 2] = $19_1;
        break label$21;
       }
       label$23 : {
        label$24 : {
         if (!($1031($11_1 | 0) | 0)) {
          break label$24
         }
         $23_1 = $1447() | 0;
         break label$23;
        }
        $23_1 = HEAP8[($1029($11_1 | 0, 0 | 0) | 0) >> 0] | 0;
       }
       $19_1 = 0;
       $24_1 = 0;
       label$25 : {
        label$26 : while (1) {
         if (($18_1 | 0) == ($4_1 | 0)) {
          break label$25
         }
         label$27 : {
          label$28 : {
           if (($19_1 | 0) == ($23_1 | 0)) {
            break label$28
           }
           $22_1 = $19_1;
           break label$27;
          }
          $21_1 = HEAP32[$2_1 >> 2] | 0;
          HEAP32[$2_1 >> 2] = $21_1 + 4 | 0;
          HEAP32[$21_1 >> 2] = $10_1;
          $22_1 = 0;
          label$29 : {
           $24_1 = $24_1 + 1 | 0;
           if ($24_1 >>> 0 < ($1028($11_1 | 0) | 0) >>> 0) {
            break label$29
           }
           $23_1 = $19_1;
           break label$27;
          }
          label$30 : {
           if ((HEAPU8[($1029($11_1 | 0, $24_1 | 0) | 0) >> 0] | 0 | 0) != (($1271() | 0) & 255 | 0 | 0)) {
            break label$30
           }
           $23_1 = $1447() | 0;
           break label$27;
          }
          $23_1 = HEAP8[($1029($11_1 | 0, $24_1 | 0) | 0) >> 0] | 0;
         }
         $18_1 = $18_1 + -4 | 0;
         $19_1 = HEAP32[$18_1 >> 2] | 0;
         $21_1 = HEAP32[$2_1 >> 2] | 0;
         HEAP32[$2_1 >> 2] = $21_1 + 4 | 0;
         HEAP32[$21_1 >> 2] = $19_1;
         $19_1 = $22_1 + 1 | 0;
         continue label$26;
        };
       }
       $18_1 = HEAP32[$2_1 >> 2] | 0;
      }
      $1177($20_1 | 0, $18_1 | 0);
     }
     $17_1 = $17_1 + 1 | 0;
     continue label$3;
    };
   }
   HEAP32[$1_1 >> 2] = $0_1;
  }
  global$0 = $15_1 + 16 | 0;
 }
 
 function $1453($0_1) {
  $0_1 = $0_1 | 0;
  return (HEAP32[($1395($0_1 | 0) | 0) >> 2] | 0 | 0) != (0 | 0) | 0;
 }
 
 function $1454($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1455($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1456($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0_1 = HEAP32[($1468($1_1 + 8 | 0 | 0, $1228($0_1 | 0) | 0 | 0) | 0) >> 2] | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1457($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
  $1469($2_1 + 8 | 0 | 0, $1_1 | 0) | 0;
  $1_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1458($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0_1 = HEAP32[($1468($1_1 + 8 | 0 | 0, ($1228($0_1 | 0) | 0) + (($1092($0_1 | 0) | 0) << 2 | 0) | 0 | 0) | 0) >> 2] | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1459($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1467($1466($0_1 | 0) | 0 | 0, $1466($1_1 | 0) | 0 | 0, $1267($2_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1460($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $13_1 = 0, $11_1 = 0, $10_1 = 0, $8_1 = 0, $9_1 = 0, $12_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 496 | 0;
  global$0 = $6_1;
  $774($6_1 + 488 | 0 | 0, $3_1 | 0);
  $7_1 = $819($6_1 + 488 | 0 | 0) | 0;
  $8_1 = 0;
  label$1 : {
   if (!($1092($5_1 | 0) | 0)) {
    break label$1
   }
   $8_1 = (HEAP32[($1093($5_1 | 0, 0 | 0) | 0) >> 2] | 0 | 0) == ($877($7_1 | 0, 45 | 0) | 0 | 0);
  }
  $9_1 = $1037($6_1 + 456 | 0 | 0) | 0;
  $10_1 = $1296($6_1 + 440 | 0 | 0) | 0;
  $11_1 = $1296($6_1 + 424 | 0 | 0) | 0;
  $1451($2_1 | 0, $8_1 | 0, $6_1 + 488 | 0 | 0, $6_1 + 480 | 0 | 0, $6_1 + 476 | 0 | 0, $6_1 + 472 | 0 | 0, $9_1 | 0, $10_1 | 0, $11_1 | 0, $6_1 + 420 | 0 | 0);
  HEAP32[($6_1 + 16 | 0) >> 2] = 274;
  $12_1 = $1184($6_1 + 8 | 0 | 0, 0 | 0, $6_1 + 16 | 0 | 0) | 0;
  label$2 : {
   label$3 : {
    if (($1092($5_1 | 0) | 0 | 0) <= (HEAP32[($6_1 + 420 | 0) >> 2] | 0 | 0)) {
     break label$3
    }
    $2_1 = $1092($5_1 | 0) | 0;
    $13_1 = HEAP32[($6_1 + 420 | 0) >> 2] | 0;
    $13_1 = (($1092($11_1 | 0) | 0) + (($2_1 - $13_1 | 0) << 1 | 0) | 0) + 1 | 0;
    break label$2;
   }
   $13_1 = ($1092($11_1 | 0) | 0) + 2 | 0;
  }
  $2_1 = $6_1 + 16 | 0;
  label$4 : {
   $13_1 = ($13_1 + ($1092($10_1 | 0) | 0) | 0) + (HEAP32[($6_1 + 420 | 0) >> 2] | 0) | 0;
   if ($13_1 >>> 0 < 101 >>> 0) {
    break label$4
   }
   $1185($12_1 | 0, $2160($13_1 << 2 | 0 | 0) | 0 | 0);
   $2_1 = $1381($12_1 | 0) | 0;
   if ($2_1) {
    break label$4
   }
   $2029();
   abort();
  }
  $1452($2_1 | 0, $6_1 + 4 | 0 | 0, $6_1 | 0, $773($3_1 | 0) | 0 | 0, $1227($5_1 | 0) | 0 | 0, ($1227($5_1 | 0) | 0) + (($1092($5_1 | 0) | 0) << 2 | 0) | 0 | 0, $7_1 | 0, $8_1 | 0, $6_1 + 480 | 0 | 0, HEAP32[($6_1 + 476 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 472 | 0) >> 2] | 0 | 0, $9_1 | 0, $10_1 | 0, $11_1 | 0, HEAP32[($6_1 + 420 | 0) >> 2] | 0 | 0);
  $5_1 = $1176($1_1 | 0, $2_1 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$6_1 >> 2] | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
  $1187($12_1 | 0) | 0;
  $2077($11_1 | 0) | 0;
  $2077($10_1 | 0) | 0;
  $2058($9_1 | 0) | 0;
  $1018($6_1 + 488 | 0 | 0) | 0;
  global$0 = $6_1 + 496 | 0;
  return $5_1 | 0;
 }
 
 function $1461($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[($1_1 + 8 | 0) >> 2] = $0_1;
  $0_1 = $1367($1_1 + 8 | 0 | 0) | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1462($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   $1_1 = $1_1 - $0_1 | 0;
   if (!$1_1) {
    break label$1
   }
   $2175($2_1 | 0, $0_1 | 0, $1_1 | 0) | 0;
  }
  return $2_1 + $1_1 | 0 | 0;
 }
 
 function $1463($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $1464() {
  return -1 | 0;
 }
 
 function $1465($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + $1_1 | 0;
  return $0_1 | 0;
 }
 
 function $1466($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[($1_1 + 8 | 0) >> 2] = $0_1;
  $0_1 = $1428($1_1 + 8 | 0 | 0) | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1467($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   $1_1 = $1_1 - $0_1 | 0;
   if (!$1_1) {
    break label$1
   }
   $2175($2_1 | 0, $0_1 | 0, $1_1 | 0) | 0;
  }
  return $2_1 + $1_1 | 0 | 0;
 }
 
 function $1468($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $1469($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + ($1_1 << 2 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1470($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1_1 = $978($1072($1_1 | 0) | 0 | 0, 1 | 0) | 0;
  return (($1_1 | 0) == (-1 | 0) ? -1 : $1_1 >>> 1 | 0) | 0;
 }
 
 function $1471($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  $7_1 = $1037($6_1 + 16 | 0 | 0) | 0;
  $1473($6_1 + 8 | 0 | 0, $1472($7_1 | 0) | 0 | 0, $1072($5_1 | 0) | 0 | 0, ($1072($5_1 | 0) | 0) + ($1028($5_1 | 0) | 0) | 0 | 0) | 0;
  $5_1 = $979((($2_1 | 0) == (-1 | 0) ? -1 : $2_1 << 1 | 0) | 0, $3_1 | 0, $4_1 | 0, $1072($7_1 | 0) | 0 | 0) | 0;
  $1474($6_1 | 0, $1472($1037($0_1 | 0) | 0 | 0) | 0 | 0, $5_1 | 0, $5_1 + ($2181($5_1 | 0) | 0) | 0 | 0) | 0;
  $2058($7_1 | 0) | 0;
  global$0 = $6_1 + 32 | 0;
 }
 
 function $1472($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0_1 = HEAP32[($1478($1_1 + 8 | 0 | 0, $0_1 | 0) | 0) >> 2] | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1473($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : while (1) {
    if ($2_1 >>> 0 >= $3_1 >>> 0) {
     break label$1
    }
    $1476($1475($4_1 + 8 | 0 | 0) | 0 | 0, $2_1 | 0) | 0;
    $2_1 = $2_1 + 1 | 0;
    $1477($4_1 + 8 | 0 | 0) | 0;
    continue label$2;
   };
  }
  $2_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1474($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : while (1) {
    if ($2_1 >>> 0 >= $3_1 >>> 0) {
     break label$1
    }
    $1476($1475($4_1 + 8 | 0 | 0) | 0 | 0, $2_1 | 0) | 0;
    $2_1 = $2_1 + 1 | 0;
    $1477($4_1 + 8 | 0 | 0) | 0;
    continue label$2;
   };
  }
  $2_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1475($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1476($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2071(HEAP32[$0_1 >> 2] | 0 | 0, HEAP8[$1_1 >> 0] | 0 | 0);
  return $0_1 | 0;
 }
 
 function $1477($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1478($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $2018($1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1479($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $980((($1_1 | 0) == (-1 | 0) ? -1 : $1_1 << 1 | 0) | 0) | 0;
 }
 
 function $1480($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1_1 = $978($1072($1_1 | 0) | 0 | 0, 1 | 0) | 0;
  return (($1_1 | 0) == (-1 | 0) ? -1 : $1_1 >>> 1 | 0) | 0;
 }
 
 function $1481($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  $7_1 = $1037($6_1 + 16 | 0 | 0) | 0;
  $8_1 = $1482($6_1 + 8 | 0 | 0) | 0;
  $1484($8_1 | 0, $1472($7_1 | 0) | 0 | 0, $1483($5_1 | 0) | 0 | 0, ($1483($5_1 | 0) | 0) + (($1092($5_1 | 0) | 0) << 2 | 0) | 0 | 0) | 0;
  $1002($8_1 | 0) | 0;
  $5_1 = $979((($2_1 | 0) == (-1 | 0) ? -1 : $2_1 << 1 | 0) | 0, $3_1 | 0, $4_1 | 0, $1072($7_1 | 0) | 0 | 0) | 0;
  $2_1 = $1296($0_1 | 0) | 0;
  $3_1 = $1485($6_1 + 8 | 0 | 0) | 0;
  $1487($3_1 | 0, $1486($2_1 | 0) | 0 | 0, $5_1 | 0, $5_1 + ($2181($5_1 | 0) | 0) | 0 | 0) | 0;
  $1002($3_1 | 0) | 0;
  $2058($7_1 | 0) | 0;
  global$0 = $6_1 + 32 | 0;
 }
 
 function $1482($0_1) {
  $0_1 = $0_1 | 0;
  $1488($0_1 | 0, 1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 15812;
  return $0_1 | 0;
 }
 
 function $1483($0_1) {
  $0_1 = $0_1 | 0;
  return $1227($0_1 | 0) | 0 | 0;
 }
 
 function $1484($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 64 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 56 | 0) >> 2] = $1_1;
  $5_1 = $4_1 + 48 | 0;
  label$1 : {
   label$2 : {
    label$3 : while (1) {
     if ($2_1 >>> 0 >= $3_1 >>> 0) {
      break label$2
     }
     HEAP32[($4_1 + 8 | 0) >> 2] = $2_1;
     if ((FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1, $4_1 + 48 | 0, $2_1, $3_1, $4_1 + 8 | 0, $4_1 + 16 | 0, $5_1, $4_1 + 12 | 0) | 0 | 0) == (2 | 0)) {
      break label$1
     }
     $1_1 = $4_1 + 16 | 0;
     if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) == ($2_1 | 0)) {
      break label$1
     }
     label$4 : while (1) {
      label$5 : {
       if ($1_1 >>> 0 < (HEAP32[($4_1 + 12 | 0) >> 2] | 0) >>> 0) {
        break label$5
       }
       $2_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
       continue label$3;
      }
      $1476($1475($4_1 + 56 | 0 | 0) | 0 | 0, $1_1 | 0) | 0;
      $1_1 = $1_1 + 1 | 0;
      $1477($4_1 + 56 | 0 | 0) | 0;
      continue label$4;
     };
    };
   }
   $1_1 = HEAP32[($4_1 + 56 | 0) >> 2] | 0;
   global$0 = $4_1 + 64 | 0;
   return $1_1 | 0;
  }
  $1266($1_1 | 0);
  abort();
 }
 
 function $1485($0_1) {
  $0_1 = $0_1 | 0;
  $1488($0_1 | 0, 1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 15908;
  return $0_1 | 0;
 }
 
 function $1486($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0_1 = HEAP32[($1492($1_1 + 8 | 0 | 0, $0_1 | 0) | 0) >> 2] | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1487($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 160 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 152 | 0) >> 2] = $1_1;
  $5_1 = $4_1 + 144 | 0;
  label$1 : {
   label$2 : {
    label$3 : while (1) {
     if ($2_1 >>> 0 >= $3_1 >>> 0) {
      break label$2
     }
     HEAP32[($4_1 + 8 | 0) >> 2] = $2_1;
     if ((FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $4_1 + 144 | 0, $2_1, ($3_1 - $2_1 | 0 | 0) > (32 | 0) ? $2_1 + 32 | 0 : $3_1, $4_1 + 8 | 0, $4_1 + 16 | 0, $5_1, $4_1 + 12 | 0) | 0 | 0) == (2 | 0)) {
      break label$1
     }
     $1_1 = $4_1 + 16 | 0;
     if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) == ($2_1 | 0)) {
      break label$1
     }
     label$4 : while (1) {
      label$5 : {
       if ($1_1 >>> 0 < (HEAP32[($4_1 + 12 | 0) >> 2] | 0) >>> 0) {
        break label$5
       }
       $2_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
       continue label$3;
      }
      HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
      $1490($1489($4_1 + 152 | 0 | 0) | 0 | 0, $4_1 + 4 | 0 | 0) | 0;
      $1_1 = $1_1 + 4 | 0;
      $1491($4_1 + 152 | 0 | 0) | 0;
      continue label$4;
     };
    };
   }
   $1_1 = HEAP32[($4_1 + 152 | 0) >> 2] | 0;
   global$0 = $4_1 + 160 | 0;
   return $1_1 | 0;
  }
  $1266($4_1 | 0);
  abort();
 }
 
 function $1488($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1496($0_1 | 0, $1_1 | 0) | 0;
  $1669($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 15696;
  return $0_1 | 0;
 }
 
 function $1489($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1490($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2084(HEAP32[$0_1 >> 2] | 0 | 0, HEAP32[($1961($1_1 | 0) | 0) >> 2] | 0 | 0);
  return $0_1 | 0;
 }
 
 function $1491($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1492($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $2019($1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1493($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $980((($1_1 | 0) == (-1 | 0) ? -1 : $1_1 << 1 | 0) | 0) | 0;
 }
 
 function $1494($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 14776;
  label$1 : {
   if ((HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) == ($1073() | 0 | 0)) {
    break label$1
   }
   $981(HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0);
  }
  $1002($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1495($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1496($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 14704;
  $1_1 = $1497($0_1 + 16 | 0 | 0, 28 | 0) | 0;
  $861($0_1 + 176 | 0 | 0, 14693 | 0) | 0;
  $1498($1_1 | 0);
  $1499();
  $1500($0_1 | 0, 336080 | 0);
  $1501();
  $1502($0_1 | 0, 336088 | 0);
  $1503();
  $1504($0_1 | 0, 336096 | 0);
  $1505();
  $1506($0_1 | 0, 336112 | 0);
  $1507();
  $1508($0_1 | 0, 336120 | 0);
  $1509();
  $1510($0_1 | 0, 336128 | 0);
  $1511();
  $1512($0_1 | 0, 336144 | 0);
  $1513();
  $1514($0_1 | 0, 336152 | 0);
  $1515();
  $1516($0_1 | 0, 336160 | 0);
  $1517();
  $1518($0_1 | 0, 336192 | 0);
  $1519();
  $1520($0_1 | 0, 336224 | 0);
  $1521();
  $1522($0_1 | 0, 336232 | 0);
  $1523();
  $1524($0_1 | 0, 336240 | 0);
  $1525();
  $1526($0_1 | 0, 336248 | 0);
  $1527();
  $1528($0_1 | 0, 336256 | 0);
  $1529();
  $1530($0_1 | 0, 336264 | 0);
  $1531();
  $1532($0_1 | 0, 336272 | 0);
  $1533();
  $1534($0_1 | 0, 336280 | 0);
  $1535();
  $1536($0_1 | 0, 336288 | 0);
  $1537();
  $1538($0_1 | 0, 336296 | 0);
  $1539();
  $1540($0_1 | 0, 336304 | 0);
  $1541();
  $1542($0_1 | 0, 336312 | 0);
  $1543();
  $1544($0_1 | 0, 336320 | 0);
  $1545();
  $1546($0_1 | 0, 336336 | 0);
  $1547();
  $1548($0_1 | 0, 336352 | 0);
  $1549();
  $1550($0_1 | 0, 336368 | 0);
  $1551();
  $1552($0_1 | 0, 336384 | 0);
  $1553();
  $1554($0_1 | 0, 336392 | 0);
  return $0_1 | 0;
 }
 
 function $1496($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1555($0_1 | 0, $1_1 + -1 | 0 | 0) | 0;
  HEAP32[$0_1 >> 2] = 15228;
  return $0_1 | 0;
 }
 
 function $1497($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1556($0_1 | 0) | 0;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $1557($0_1 | 0, $1_1 | 0);
   $1558($0_1 | 0, $1_1 | 0);
  }
  return $0_1 | 0;
 }
 
 function $1498($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = $1559($0_1 | 0) | 0;
  $1560($0_1 | 0);
  $1561($0_1 | 0, $1_1 | 0);
  $1562($0_1 | 0);
 }
 
 function $1499() {
  $1565(336080 | 0, 1 | 0) | 0;
 }
 
 function $1500($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1564($0_1 | 0, $1_1 | 0, $1563(334620 | 0) | 0 | 0);
 }
 
 function $1501() {
  $1566(336088 | 0, 1 | 0) | 0;
 }
 
 function $1502($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1564($0_1 | 0, $1_1 | 0, $1563(334628 | 0) | 0 | 0);
 }
 
 function $1503() {
  $1567(336096 | 0, 0 | 0, 0 | 0, 1 | 0) | 0;
 }
 
 function $1504($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1564($0_1 | 0, $1_1 | 0, $1563(334824 | 0) | 0 | 0);
 }
 
 function $1505() {
  $1568(336112 | 0, 1 | 0) | 0;
 }
 
 function $1506($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1564($0_1 | 0, $1_1 | 0, $1563(334816 | 0) | 0 | 0);
 }
 
 function $1507() {
  $1569(336120 | 0, 1 | 0) | 0;
 }
 
 function $1508($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1564($0_1 | 0, $1_1 | 0, $1563(334832 | 0) | 0 | 0);
 }
 
 function $1509() {
  $1570(336128 | 0, 1 | 0) | 0;
 }
 
 function $1510($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1564($0_1 | 0, $1_1 | 0, $1563(334840 | 0) | 0 | 0);
 }
 
 function $1511() {
  $1571(336144 | 0, 1 | 0) | 0;
 }
 
 function $1512($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1564($0_1 | 0, $1_1 | 0, $1563(334848 | 0) | 0 | 0);
 }
 
 function $1513() {
  $1488(336152 | 0, 1 | 0) | 0;
 }
 
 function $1514($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1564($0_1 | 0, $1_1 | 0, $1563(334856 | 0) | 0 | 0);
 }
 
 function $1515() {
  $1572(336160 | 0, 1 | 0) | 0;
 }
 
 function $1516($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1564($0_1 | 0, $1_1 | 0, $1563(334864 | 0) | 0 | 0);
 }
 
 function $1517() {
  $1573(336192 | 0, 1 | 0) | 0;
 }
 
 function $1518($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1564($0_1 | 0, $1_1 | 0, $1563(334872 | 0) | 0 | 0);
 }
 
 function $1519() {
  $1574(336224 | 0, 1 | 0) | 0;
 }
 
 function $1520($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1564($0_1 | 0, $1_1 | 0, $1563(334636 | 0) | 0 | 0);
 }
 
 function $1521() {
  $1575(336232 | 0, 1 | 0) | 0;
 }
 
 function $1522($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1564($0_1 | 0, $1_1 | 0, $1563(334644 | 0) | 0 | 0);
 }
 
 function $1523() {
  $1576(336240 | 0, 1 | 0) | 0;
 }
 
 function $1524($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1564($0_1 | 0, $1_1 | 0, $1563(334652 | 0) | 0 | 0);
 }
 
 function $1525() {
  $1577(336248 | 0, 1 | 0) | 0;
 }
 
 function $1526($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1564($0_1 | 0, $1_1 | 0, $1563(334660 | 0) | 0 | 0);
 }
 
 function $1527() {
  $1578(336256 | 0, 1 | 0) | 0;
 }
 
 function $1528($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1564($0_1 | 0, $1_1 | 0, $1563(334700 | 0) | 0 | 0);
 }
 
 function $1529() {
  $1579(336264 | 0, 1 | 0) | 0;
 }
 
 function $1530($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1564($0_1 | 0, $1_1 | 0, $1563(334708 | 0) | 0 | 0);
 }
 
 function $1531() {
  $1580(336272 | 0, 1 | 0) | 0;
 }
 
 function $1532($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1564($0_1 | 0, $1_1 | 0, $1563(334716 | 0) | 0 | 0);
 }
 
 function $1533() {
  $1581(336280 | 0, 1 | 0) | 0;
 }
 
 function $1534($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1564($0_1 | 0, $1_1 | 0, $1563(334724 | 0) | 0 | 0);
 }
 
 function $1535() {
  $1582(336288 | 0, 1 | 0) | 0;
 }
 
 function $1536($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1564($0_1 | 0, $1_1 | 0, $1563(334732 | 0) | 0 | 0);
 }
 
 function $1537() {
  $1583(336296 | 0, 1 | 0) | 0;
 }
 
 function $1538($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1564($0_1 | 0, $1_1 | 0, $1563(334740 | 0) | 0 | 0);
 }
 
 function $1539() {
  $1584(336304 | 0, 1 | 0) | 0;
 }
 
 function $1540($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1564($0_1 | 0, $1_1 | 0, $1563(334748 | 0) | 0 | 0);
 }
 
 function $1541() {
  $1585(336312 | 0, 1 | 0) | 0;
 }
 
 function $1542($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1564($0_1 | 0, $1_1 | 0, $1563(334756 | 0) | 0 | 0);
 }
 
 function $1543() {
  $1586(336320 | 0, 1 | 0) | 0;
 }
 
 function $1544($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1564($0_1 | 0, $1_1 | 0, $1563(334668 | 0) | 0 | 0);
 }
 
 function $1545() {
  $1587(336336 | 0, 1 | 0) | 0;
 }
 
 function $1546($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1564($0_1 | 0, $1_1 | 0, $1563(334676 | 0) | 0 | 0);
 }
 
 function $1547() {
  $1588(336352 | 0, 1 | 0) | 0;
 }
 
 function $1548($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1564($0_1 | 0, $1_1 | 0, $1563(334684 | 0) | 0 | 0);
 }
 
 function $1549() {
  $1589(336368 | 0, 1 | 0) | 0;
 }
 
 function $1550($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1564($0_1 | 0, $1_1 | 0, $1563(334692 | 0) | 0 | 0);
 }
 
 function $1551() {
  $1590(336384 | 0, 1 | 0) | 0;
 }
 
 function $1552($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1564($0_1 | 0, $1_1 | 0, $1563(334764 | 0) | 0 | 0);
 }
 
 function $1553() {
  $1591(336392 | 0, 1 | 0) | 0;
 }
 
 function $1554($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1564($0_1 | 0, $1_1 | 0, $1563(334772 | 0) | 0 | 0);
 }
 
 function $1555($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = 20644;
  return $0_1 | 0;
 }
 
 function $1556($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $1817($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($1_1 + 12 | 0) >> 2] = 0;
  $1818($0_1 + 16 | 0 | 0, $1_1 + 12 | 0 | 0, $1_1 + 8 | 0 | 0) | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1557($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   if (($1819($0_1 | 0) | 0) >>> 0 >= $1_1 >>> 0) {
    break label$1
   }
   $2097($0_1 | 0);
   abort();
  }
  $2_1 = $1821($1820($0_1 | 0) | 0 | 0, $1_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = $2_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[($1822($0_1 | 0) | 0) >> 2] = $2_1 + ($1_1 << 2 | 0) | 0;
  $1823($0_1 | 0, 0 | 0);
 }
 
 function $1558($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1_1 = $1824($2_1 | 0, $0_1 | 0, $1_1 | 0) | 0;
  $3_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if (($3_1 | 0) == (HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0)) {
     break label$1
    }
    $1826($1820($0_1 | 0) | 0 | 0, $1825(HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0);
    $3_1 = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + 4 | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $3_1;
    continue label$2;
   };
  }
  $1827($1_1 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1559($0_1) {
  $0_1 = $0_1 | 0;
  return ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) - (HEAP32[$0_1 >> 2] | 0) | 0) >> 2 | 0 | 0;
 }
 
 function $1560($0_1) {
  $0_1 = $0_1 | 0;
  $1869($0_1 | 0, HEAP32[$0_1 >> 2] | 0 | 0);
 }
 
 function $1561($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1839($0_1 | 0, $1837($0_1 | 0) | 0 | 0, ($1837($0_1 | 0) | 0) + (($1838($0_1 | 0) | 0) << 2 | 0) | 0 | 0, ($1837($0_1 | 0) | 0) + ($1_1 << 2 | 0) | 0 | 0, ($1837($0_1 | 0) | 0) + (($1559($0_1 | 0) | 0) << 2 | 0) | 0 | 0);
 }
 
 function $1562($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $1563($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, i64toi32_i32$1 = 0;
  $1_1 = global$0 - 32 | 0;
  global$0 = $1_1;
  HEAP32[($1_1 + 12 | 0) >> 2] = 0;
  HEAP32[($1_1 + 8 | 0) >> 2] = 276;
  i64toi32_i32$1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
  HEAP32[$1_1 >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
  HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$1;
  $1624($0_1 | 0, $1623($1_1 + 16 | 0 | 0, $1_1 | 0, $0_1 | 0) | 0 | 0);
  $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  global$0 = $1_1 + 32 | 0;
  return $0_1 + -1 | 0 | 0;
 }
 
 function $1564($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $1594($1_1 | 0);
  $4_1 = $1598($3_1 + 8 | 0 | 0, $1_1 | 0) | 0;
  label$1 : {
   $1_1 = $0_1 + 16 | 0;
   if (($1559($1_1 | 0) | 0) >>> 0 > $2_1 >>> 0) {
    break label$1
   }
   $1601($1_1 | 0, $2_1 + 1 | 0 | 0);
  }
  label$2 : {
   if (!(HEAP32[($1593($1_1 | 0, $2_1 | 0) | 0) >> 2] | 0)) {
    break label$2
   }
   $1602(HEAP32[($1593($1_1 | 0, $2_1 | 0) | 0) >> 2] | 0 | 0) | 0;
  }
  $0_1 = $1603($4_1 | 0) | 0;
  HEAP32[($1593($1_1 | 0, $2_1 | 0) | 0) >> 2] = $0_1;
  $1599($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $1565($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1496($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 16296;
  return $0_1 | 0;
 }
 
 function $1566($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1496($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 16328;
  return $0_1 | 0;
 }
 
 function $1567($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $1496($0_1 | 0, $3_1 | 0) | 0;
  $1648($0_1 | 0) | 0;
  HEAP8[($0_1 + 12 | 0) >> 0] = $2_1;
  HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = 14724;
  label$1 : {
   if ($1_1) {
    break label$1
   }
   HEAP32[($0_1 + 8 | 0) >> 2] = $1634() | 0;
  }
  return $0_1 | 0;
 }
 
 function $1568($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1496($0_1 | 0, $1_1 | 0) | 0;
  $1648($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 15284;
  return $0_1 | 0;
 }
 
 function $1569($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1496($0_1 | 0, $1_1 | 0) | 0;
  $1669($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 15432;
  return $0_1 | 0;
 }
 
 function $1570($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1496($0_1 | 0, $1_1 | 0) | 0;
  $1669($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 14776;
  HEAP32[($0_1 + 8 | 0) >> 2] = $1073() | 0;
  return $0_1 | 0;
 }
 
 function $1571($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1496($0_1 | 0, $1_1 | 0) | 0;
  $1669($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 15580;
  return $0_1 | 0;
 }
 
 function $1572($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1496($0_1 | 0, $1_1 | 0) | 0;
  HEAP16[($0_1 + 8 | 0) >> 1] = 11310;
  HEAP32[$0_1 >> 2] = 14824;
  $1037($0_1 + 12 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1573($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1496($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 46;
  HEAP32[($0_1 + 12 | 0) >> 2] = 44;
  HEAP32[$0_1 >> 2] = 14864;
  $1037($0_1 + 16 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1574($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1496($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 16360;
  return $0_1 | 0;
 }
 
 function $1575($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1496($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 16604;
  return $0_1 | 0;
 }
 
 function $1576($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1496($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 16816;
  return $0_1 | 0;
 }
 
 function $1577($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1496($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 17048;
  return $0_1 | 0;
 }
 
 function $1578($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1496($0_1 | 0, $1_1 | 0) | 0;
  $1873($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 18032;
  return $0_1 | 0;
 }
 
 function $1579($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1496($0_1 | 0, $1_1 | 0) | 0;
  $1873($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 18180;
  return $0_1 | 0;
 }
 
 function $1580($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1496($0_1 | 0, $1_1 | 0) | 0;
  $1873($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 18296;
  return $0_1 | 0;
 }
 
 function $1581($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1496($0_1 | 0, $1_1 | 0) | 0;
  $1873($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 18412;
  return $0_1 | 0;
 }
 
 function $1582($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1496($0_1 | 0, $1_1 | 0) | 0;
  $1874($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 18528;
  return $0_1 | 0;
 }
 
 function $1583($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1496($0_1 | 0, $1_1 | 0) | 0;
  $1875($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 18692;
  return $0_1 | 0;
 }
 
 function $1584($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1496($0_1 | 0, $1_1 | 0) | 0;
  $1876($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 18856;
  return $0_1 | 0;
 }
 
 function $1585($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1496($0_1 | 0, $1_1 | 0) | 0;
  $1877($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 19020;
  return $0_1 | 0;
 }
 
 function $1586($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1496($0_1 | 0, $1_1 | 0) | 0;
  $1_1 = $1878($0_1 + 8 | 0 | 0) | 0;
  HEAP32[$0_1 >> 2] = 17248;
  HEAP32[$1_1 >> 2] = 17296;
  return $0_1 | 0;
 }
 
 function $1587($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1496($0_1 | 0, $1_1 | 0) | 0;
  $1_1 = $1879($0_1 + 8 | 0 | 0) | 0;
  HEAP32[$0_1 >> 2] = 17512;
  HEAP32[$1_1 >> 2] = 17560;
  return $0_1 | 0;
 }
 
 function $1588($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1496($0_1 | 0, $1_1 | 0) | 0;
  $1880($0_1 + 8 | 0 | 0) | 0;
  HEAP32[$0_1 >> 2] = 17748;
  return $0_1 | 0;
 }
 
 function $1589($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1496($0_1 | 0, $1_1 | 0) | 0;
  $1880($0_1 + 8 | 0 | 0) | 0;
  HEAP32[$0_1 >> 2] = 17904;
  return $0_1 | 0;
 }
 
 function $1590($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1496($0_1 | 0, $1_1 | 0) | 0;
  $1881($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 19184;
  return $0_1 | 0;
 }
 
 function $1591($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1496($0_1 | 0, $1_1 | 0) | 0;
  $1881($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 19304;
  return $0_1 | 0;
 }
 
 function $1592() {
  label$1 : {
   if ((HEAPU8[(0 + 334796 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($2099(334796 | 0) | 0)) {
    break label$1
   }
   $1595() | 0;
   HEAP32[(0 + 334792 | 0) >> 2] = 334788;
   $2107(334796 | 0);
  }
  return HEAP32[(0 + 334792 | 0) >> 2] | 0 | 0;
 }
 
 function $1593($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return (HEAP32[$0_1 >> 2] | 0) + ($1_1 << 2 | 0) | 0 | 0;
 }
 
 function $1594($0_1) {
  $0_1 = $0_1 | 0;
  $1596($0_1 + 4 | 0 | 0) | 0;
 }
 
 function $1595() {
  $1616();
  HEAP32[(0 + 334788 | 0) >> 2] = 336400;
  return 334788 | 0;
 }
 
 function $1596($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = (HEAP32[$0_1 >> 2] | 0) + 1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $1_1 | 0;
 }
 
 function $1597($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if ($1614($0_1 | 0, $1_1 | 0) | 0) {
    break label$1
   }
   $15();
   abort();
  }
  return HEAP32[($1615($0_1 + 16 | 0 | 0, $1_1 | 0) | 0) >> 2] | 0 | 0;
 }
 
 function $1598($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
  $1600($0_1 | 0, $2_1 + 12 | 0 | 0, $2_1 + 8 | 0 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1599($0_1) {
  $0_1 = $0_1 | 0;
  $1604($0_1 | 0);
  return $0_1 | 0;
 }
 
 function $1600($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1885($0_1 | 0, $1884($1_1 | 0) | 0 | 0) | 0;
  $878($2_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1601($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   $2_1 = $1559($0_1 | 0) | 0;
   if ($2_1 >>> 0 >= $1_1 >>> 0) {
    break label$1
   }
   $1611($0_1 | 0, $1_1 - $2_1 | 0 | 0);
   return;
  }
  label$2 : {
   if ($2_1 >>> 0 <= $1_1 >>> 0) {
    break label$2
   }
   $1612($0_1 | 0, (HEAP32[$0_1 >> 2] | 0) + ($1_1 << 2 | 0) | 0 | 0);
  }
 }
 
 function $1602($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = $1607($0_1 + 4 | 0 | 0) | 0;
   if (($1_1 | 0) != (-1 | 0)) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($0_1);
  }
  return ($1_1 | 0) == (-1 | 0) | 0;
 }
 
 function $1603($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($1613($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($1613($0_1 | 0) | 0) >> 2] = 0;
  return $1_1 | 0;
 }
 
 function $1604($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($1613($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($1613($0_1 | 0) | 0) >> 2] = 0;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $1886($1_1 | 0);
  }
 }
 
 function $1605($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0;
  HEAP32[$0_1 >> 2] = 14704;
  $1_1 = $0_1 + 16 | 0;
  $2_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if ($2_1 >>> 0 >= ($1559($1_1 | 0) | 0) >>> 0) {
     break label$1
    }
    label$3 : {
     if (!(HEAP32[($1593($1_1 | 0, $2_1 | 0) | 0) >> 2] | 0)) {
      break label$3
     }
     $1602(HEAP32[($1593($1_1 | 0, $2_1 | 0) | 0) >> 2] | 0 | 0) | 0;
    }
    $2_1 = $2_1 + 1 | 0;
    continue label$2;
   };
  }
  $2058($0_1 + 176 | 0 | 0) | 0;
  $1606($1_1 | 0) | 0;
  $1002($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1606($0_1) {
  $0_1 = $0_1 | 0;
  $1608($0_1 | 0);
  $1609($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1607($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = (HEAP32[$0_1 >> 2] | 0) + -1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $1_1 | 0;
 }
 
 function $1608($0_1) {
  $0_1 = $0_1 | 0;
  $1839($0_1 | 0, $1837($0_1 | 0) | 0 | 0, ($1837($0_1 | 0) | 0) + (($1838($0_1 | 0) | 0) << 2 | 0) | 0 | 0, ($1837($0_1 | 0) | 0) + (($1559($0_1 | 0) | 0) << 2 | 0) | 0 | 0, ($1837($0_1 | 0) | 0) + (($1838($0_1 | 0) | 0) << 2 | 0) | 0 | 0);
 }
 
 function $1609($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!(HEAP32[$0_1 >> 2] | 0)) {
    break label$1
   }
   $1560($0_1 | 0);
   $1868($1820($0_1 | 0) | 0 | 0, HEAP32[$0_1 >> 2] | 0 | 0, $1847($0_1 | 0) | 0 | 0);
  }
  return $0_1 | 0;
 }
 
 function $1610($0_1) {
  $0_1 = $0_1 | 0;
  $2032($1605($0_1 | 0) | 0 | 0);
 }
 
 function $1611($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if ((((HEAP32[($1822($0_1 | 0) | 0) >> 2] | 0) - (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0) >> 2 | 0) >>> 0 < $1_1 >>> 0) {
     break label$2
    }
    $1558($0_1 | 0, $1_1 | 0);
    break label$1;
   }
   $3_1 = $1820($0_1 | 0) | 0;
   $3_1 = $1888($2_1 + 8 | 0 | 0, $1882($0_1 | 0, ($1559($0_1 | 0) | 0) + $1_1 | 0 | 0) | 0 | 0, $1559($0_1 | 0) | 0 | 0, $3_1 | 0) | 0;
   $1889($3_1 | 0, $1_1 | 0);
   $1890($0_1 | 0, $3_1 | 0);
   $1891($3_1 | 0) | 0;
  }
  global$0 = $2_1 + 32 | 0;
 }
 
 function $1612($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $1883($0_1 | 0, $1_1 | 0);
  $2_1 = $1559($0_1 | 0) | 0;
  $1869($0_1 | 0, $1_1 | 0);
  $1561($0_1 | 0, $2_1 | 0);
 }
 
 function $1613($0_1) {
  $0_1 = $0_1 | 0;
  return $1887($0_1 | 0) | 0 | 0;
 }
 
 function $1614($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = 0;
  label$1 : {
   $0_1 = $0_1 + 16 | 0;
   if (($1559($0_1 | 0) | 0) >>> 0 <= $1_1 >>> 0) {
    break label$1
   }
   $2_1 = (HEAP32[($1615($0_1 | 0, $1_1 | 0) | 0) >> 2] | 0 | 0) != (0 | 0);
  }
  return $2_1 | 0;
 }
 
 function $1615($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return (HEAP32[$0_1 >> 2] | 0) + ($1_1 << 2 | 0) | 0 | 0;
 }
 
 function $1616() {
  $1495(336400 | 0, 1 | 0) | 0;
 }
 
 function $1617() {
  $1618(334800 | 0, $1592() | 0 | 0) | 0;
  return 334800 | 0;
 }
 
 function $1618($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = HEAP32[$1_1 >> 2] | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  $1594($1_1 | 0);
  return $0_1 | 0;
 }
 
 function $1619() {
  label$1 : {
   if ((HEAPU8[(0 + 334808 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($2099(334808 | 0) | 0)) {
    break label$1
   }
   $1617() | 0;
   HEAP32[(0 + 334804 | 0) >> 2] = 334800;
   $2107(334808 | 0);
  }
  return HEAP32[(0 + 334804 | 0) >> 2] | 0 | 0;
 }
 
 function $1620($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($1619() | 0) >> 2] | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  $1594($1_1 | 0);
  return $0_1 | 0;
 }
 
 function $1621($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1614(HEAP32[$0_1 >> 2] | 0 | 0, $1563($1_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1622($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $1631() | 0;
 }
 
 function $1623($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[i64toi32_i32$2 >> 2] | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[$0_1 >> 2] = $2_1;
  return $0_1 | 0;
 }
 
 function $1624($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   if (($1627($0_1 | 0) | 0 | 0) == (-1 | 0)) {
    break label$1
   }
   $1629($2_1 | 0, $1628($2_1 + 8 | 0 | 0, $1_1 | 0) | 0 | 0) | 0;
   $2024($0_1 | 0, $2_1 | 0, 277 | 0);
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1625($0_1) {
  $0_1 = $0_1 | 0;
  $2032($1002($0_1 | 0) | 0 | 0);
 }
 
 function $1626($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($0_1);
  }
 }
 
 function $1627($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1628($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1911($0_1 | 0, $1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1629($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $1630($0_1) {
  $0_1 = $0_1 | 0;
  $1912($0_1 | 0);
 }
 
 function $1631() {
  var $0_1 = 0;
  $0_1 = (HEAP32[(0 + 334812 | 0) >> 2] | 0) + 1 | 0;
  HEAP32[(0 + 334812 | 0) >> 2] = $0_1;
  return $0_1 | 0;
 }
 
 function $1632($0_1) {
  $0_1 = $0_1 | 0;
  $1002($0_1 | 0) | 0;
  $2032($0_1 | 0);
 }
 
 function $1633($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = 0;
  label$1 : {
   if ($2_1 >>> 0 > 127 >>> 0) {
    break label$1
   }
   $3_1 = ((HEAPU16[(($1634() | 0) + ($2_1 << 1 | 0) | 0) >> 1] | 0) & $1_1 | 0 | 0) != (0 | 0);
  }
  return $3_1 | 0;
 }
 
 function $1634() {
  return HEAP32[($983() | 0) >> 2] | 0 | 0;
 }
 
 function $1635($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break label$1
    }
    $4_1 = 0;
    label$3 : {
     if ((HEAP32[$1_1 >> 2] | 0) >>> 0 > 127 >>> 0) {
      break label$3
     }
     $4_1 = HEAPU16[(($1634() | 0) + ((HEAP32[$1_1 >> 2] | 0) << 1 | 0) | 0) >> 1] | 0;
    }
    HEAP16[$3_1 >> 1] = $4_1;
    $3_1 = $3_1 + 2 | 0;
    $1_1 = $1_1 + 4 | 0;
    continue label$2;
   };
  }
  return $2_1 | 0;
 }
 
 function $1636($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : while (1) {
   label$2 : {
    label$3 : {
     if (($2_1 | 0) == ($3_1 | 0)) {
      break label$3
     }
     if ((HEAP32[$2_1 >> 2] | 0) >>> 0 > 127 >>> 0) {
      break label$2
     }
     if (!((HEAPU16[(($1634() | 0) + ((HEAP32[$2_1 >> 2] | 0) << 1 | 0) | 0) >> 1] | 0) & $1_1 | 0)) {
      break label$2
     }
     $3_1 = $2_1;
    }
    return $3_1 | 0;
   }
   $2_1 = $2_1 + 4 | 0;
   continue label$1;
  };
 }
 
 function $1637($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : {
   label$2 : while (1) {
    if (($2_1 | 0) == ($3_1 | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[$2_1 >> 2] | 0) >>> 0 > 127 >>> 0) {
      break label$3
     }
     if (!((HEAPU16[(($1634() | 0) + ((HEAP32[$2_1 >> 2] | 0) << 1 | 0) | 0) >> 1] | 0) & $1_1 | 0)) {
      break label$3
     }
     $2_1 = $2_1 + 4 | 0;
     continue label$2;
    }
    break label$2;
   };
   $3_1 = $2_1;
  }
  return $3_1 | 0;
 }
 
 function $1638($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if ($1_1 >>> 0 > 127 >>> 0) {
    break label$1
   }
   $1_1 = HEAP32[(($1639() | 0) + ($1_1 << 2 | 0) | 0) >> 2] | 0;
  }
  return $1_1 | 0;
 }
 
 function $1639() {
  return HEAP32[($984() | 0) >> 2] | 0 | 0;
 }
 
 function $1640($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break label$1
    }
    label$3 : {
     $3_1 = HEAP32[$1_1 >> 2] | 0;
     if ($3_1 >>> 0 > 127 >>> 0) {
      break label$3
     }
     $3_1 = HEAP32[(($1639() | 0) + ((HEAP32[$1_1 >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
    }
    HEAP32[$1_1 >> 2] = $3_1;
    $1_1 = $1_1 + 4 | 0;
    continue label$2;
   };
  }
  return $2_1 | 0;
 }
 
 function $1641($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if ($1_1 >>> 0 > 127 >>> 0) {
    break label$1
   }
   $1_1 = HEAP32[(($1642() | 0) + ($1_1 << 2 | 0) | 0) >> 2] | 0;
  }
  return $1_1 | 0;
 }
 
 function $1642() {
  return HEAP32[($985() | 0) >> 2] | 0 | 0;
 }
 
 function $1643($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break label$1
    }
    label$3 : {
     $3_1 = HEAP32[$1_1 >> 2] | 0;
     if ($3_1 >>> 0 > 127 >>> 0) {
      break label$3
     }
     $3_1 = HEAP32[(($1642() | 0) + ((HEAP32[$1_1 >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
    }
    HEAP32[$1_1 >> 2] = $3_1;
    $1_1 = $1_1 + 4 | 0;
    continue label$2;
   };
  }
  return $2_1 | 0;
 }
 
 function $1644($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1_1 | 0;
 }
 
 function $1645($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : {
   label$2 : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break label$1
    }
    HEAP32[$3_1 >> 2] = HEAP8[$1_1 >> 0] | 0;
    $3_1 = $3_1 + 4 | 0;
    $1_1 = $1_1 + 1 | 0;
    continue label$2;
   };
  }
  return $2_1 | 0;
 }
 
 function $1646($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return (($1_1 >>> 0 < 128 >>> 0 ? $1_1 : $2_1) << 24 | 0) >> 24 | 0 | 0;
 }
 
 function $1647($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break label$1
    }
    $5_1 = HEAP32[$1_1 >> 2] | 0;
    HEAP8[$4_1 >> 0] = $5_1 >>> 0 < 128 >>> 0 ? $5_1 : $3_1;
    $4_1 = $4_1 + 1 | 0;
    $1_1 = $1_1 + 4 | 0;
    continue label$2;
   };
  }
  return $2_1 | 0;
 }
 
 function $1648($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1649($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  HEAP32[$0_1 >> 2] = 14724;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   if (!(HEAPU8[($0_1 + 12 | 0) >> 0] | 0)) {
    break label$1
   }
   $2033($1_1 | 0);
  }
  $1002($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1650($0_1) {
  $0_1 = $0_1 | 0;
  $2032($1649($0_1 | 0) | 0 | 0);
 }
 
 function $1651($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (($1_1 | 0) < (0 | 0)) {
    break label$1
   }
   $1_1 = HEAP32[(($1639() | 0) + (($1_1 & 255 | 0) << 2 | 0) | 0) >> 2] | 0;
  }
  return ($1_1 << 24 | 0) >> 24 | 0 | 0;
 }
 
 function $1652($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break label$1
    }
    label$3 : {
     $3_1 = HEAP8[$1_1 >> 0] | 0;
     if (($3_1 | 0) < (0 | 0)) {
      break label$3
     }
     $3_1 = HEAP32[(($1639() | 0) + ((HEAP8[$1_1 >> 0] | 0) << 2 | 0) | 0) >> 2] | 0;
    }
    HEAP8[$1_1 >> 0] = $3_1;
    $1_1 = $1_1 + 1 | 0;
    continue label$2;
   };
  }
  return $2_1 | 0;
 }
 
 function $1653($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (($1_1 | 0) < (0 | 0)) {
    break label$1
   }
   $1_1 = HEAP32[(($1642() | 0) + (($1_1 & 255 | 0) << 2 | 0) | 0) >> 2] | 0;
  }
  return ($1_1 << 24 | 0) >> 24 | 0 | 0;
 }
 
 function $1654($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break label$1
    }
    label$3 : {
     $3_1 = HEAP8[$1_1 >> 0] | 0;
     if (($3_1 | 0) < (0 | 0)) {
      break label$3
     }
     $3_1 = HEAP32[(($1642() | 0) + ((HEAP8[$1_1 >> 0] | 0) << 2 | 0) | 0) >> 2] | 0;
    }
    HEAP8[$1_1 >> 0] = $3_1;
    $1_1 = $1_1 + 1 | 0;
    continue label$2;
   };
  }
  return $2_1 | 0;
 }
 
 function $1655($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1_1 | 0;
 }
 
 function $1656($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : {
   label$2 : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break label$1
    }
    HEAP8[$3_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
    $3_1 = $3_1 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    continue label$2;
   };
  }
  return $2_1 | 0;
 }
 
 function $1657($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return (($1_1 | 0) > (-1 | 0) ? $1_1 : $2_1) | 0;
 }
 
 function $1658($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break label$1
    }
    $5_1 = HEAP8[$1_1 >> 0] | 0;
    HEAP8[$4_1 >> 0] = ($5_1 | 0) > (-1 | 0) ? $5_1 : $3_1;
    $4_1 = $4_1 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    continue label$2;
   };
  }
  return $2_1 | 0;
 }
 
 function $1659($0_1) {
  $0_1 = $0_1 | 0;
  $1002($0_1 | 0) | 0;
  $2032($0_1 | 0);
 }
 
 function $1660($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  HEAP32[$4_1 >> 2] = $2_1;
  HEAP32[$7_1 >> 2] = $5_1;
  return 3 | 0;
 }
 
 function $1661($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  HEAP32[$4_1 >> 2] = $2_1;
  HEAP32[$7_1 >> 2] = $5_1;
  return 3 | 0;
 }
 
 function $1662($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  HEAP32[$4_1 >> 2] = $2_1;
  return 3 | 0;
 }
 
 function $1663($0_1) {
  $0_1 = $0_1 | 0;
  return 1 | 0;
 }
 
 function $1664($0_1) {
  $0_1 = $0_1 | 0;
  return 1 | 0;
 }
 
 function $1665($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $3_1 - $2_1 | 0;
  $3_1 = HEAP32[($1666($5_1 + 12 | 0 | 0, $5_1 + 8 | 0 | 0) | 0) >> 2] | 0;
  global$0 = $5_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $1666($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1667($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1667($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = $873($2_1 + 8 | 0 | 0, $1_1 | 0, $0_1 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return ($3_1 ? $1_1 : $0_1) | 0;
 }
 
 function $1668($0_1) {
  $0_1 = $0_1 | 0;
  return 1 | 0;
 }
 
 function $1669($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1670($0_1) {
  $0_1 = $0_1 | 0;
  $2032($1494($0_1 | 0) | 0 | 0);
 }
 
 function $1671($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $9_1 = 0, $8_1 = 0, $10_1 = 0, $11_1 = 0, i64toi32_i32$1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  $9_1 = $2_1;
  label$1 : {
   label$2 : while (1) {
    label$3 : {
     if (($9_1 | 0) != ($3_1 | 0)) {
      break label$3
     }
     $9_1 = $3_1;
     break label$1;
    }
    if (!(HEAP32[$9_1 >> 2] | 0)) {
     break label$1
    }
    $9_1 = $9_1 + 4 | 0;
    continue label$2;
   };
  }
  HEAP32[$7_1 >> 2] = $5_1;
  HEAP32[$4_1 >> 2] = $2_1;
  label$4 : while (1) {
   label$5 : {
    label$6 : {
     label$7 : {
      if (($5_1 | 0) == ($6_1 | 0)) {
       break label$7
      }
      if (($2_1 | 0) == ($3_1 | 0)) {
       break label$7
      }
      i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      HEAP32[($8_1 + 8 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
      HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$1;
      $10_1 = 1;
      label$8 : {
       label$9 : {
        label$10 : {
         label$11 : {
          label$12 : {
           $11_1 = $1672($5_1 | 0, $4_1 | 0, ($9_1 - $2_1 | 0) >> 2 | 0 | 0, $6_1 - $5_1 | 0 | 0, $1_1 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
           switch ($11_1 + 1 | 0 | 0) {
           case 0:
            break label$12;
           case 1:
            break label$6;
           default:
            break label$11;
           };
          }
          HEAP32[$7_1 >> 2] = $5_1;
          label$13 : {
           label$14 : while (1) {
            if (($2_1 | 0) == (HEAP32[$4_1 >> 2] | 0 | 0)) {
             break label$13
            }
            $9_1 = $1673($5_1 | 0, HEAP32[$2_1 >> 2] | 0 | 0, $8_1 + 8 | 0 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
            if (($9_1 | 0) == (-1 | 0)) {
             break label$13
            }
            $5_1 = (HEAP32[$7_1 >> 2] | 0) + $9_1 | 0;
            HEAP32[$7_1 >> 2] = $5_1;
            $2_1 = $2_1 + 4 | 0;
            continue label$14;
           };
          }
          HEAP32[$4_1 >> 2] = $2_1;
          break label$10;
         }
         $5_1 = (HEAP32[$7_1 >> 2] | 0) + $11_1 | 0;
         HEAP32[$7_1 >> 2] = $5_1;
         if (($5_1 | 0) == ($6_1 | 0)) {
          break label$8
         }
         label$15 : {
          if (($9_1 | 0) != ($3_1 | 0)) {
           break label$15
          }
          $2_1 = HEAP32[$4_1 >> 2] | 0;
          $9_1 = $3_1;
          continue label$4;
         }
         $9_1 = $1673($8_1 + 4 | 0 | 0, 0 | 0, $1_1 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
         if (($9_1 | 0) != (-1 | 0)) {
          break label$9
         }
        }
        $10_1 = 2;
        break label$6;
       }
       $2_1 = $8_1 + 4 | 0;
       label$16 : {
        if ($9_1 >>> 0 <= ($6_1 - (HEAP32[$7_1 >> 2] | 0) | 0) >>> 0) {
         break label$16
        }
        $10_1 = 1;
        break label$6;
       }
       label$17 : {
        label$18 : while (1) {
         if (!$9_1) {
          break label$17
         }
         $5_1 = HEAPU8[$2_1 >> 0] | 0;
         $10_1 = HEAP32[$7_1 >> 2] | 0;
         HEAP32[$7_1 >> 2] = $10_1 + 1 | 0;
         HEAP8[$10_1 >> 0] = $5_1;
         $9_1 = $9_1 + -1 | 0;
         $2_1 = $2_1 + 1 | 0;
         continue label$18;
        };
       }
       $2_1 = (HEAP32[$4_1 >> 2] | 0) + 4 | 0;
       HEAP32[$4_1 >> 2] = $2_1;
       $9_1 = $2_1;
       label$19 : while (1) {
        label$20 : {
         if (($9_1 | 0) != ($3_1 | 0)) {
          break label$20
         }
         $9_1 = $3_1;
         break label$5;
        }
        if (!(HEAP32[$9_1 >> 2] | 0)) {
         break label$5
        }
        $9_1 = $9_1 + 4 | 0;
        continue label$19;
       };
      }
      $2_1 = HEAP32[$4_1 >> 2] | 0;
     }
     $10_1 = ($2_1 | 0) != ($3_1 | 0);
    }
    global$0 = $8_1 + 16 | 0;
    return $10_1 | 0;
   }
   $5_1 = HEAP32[$7_1 >> 2] | 0;
   continue label$4;
  };
 }
 
 function $1672($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $5_1;
  $5_1 = $1082($6_1 + 8 | 0 | 0, $6_1 + 12 | 0 | 0) | 0;
  $0_1 = $987($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0) | 0;
  $1083($5_1 | 0) | 0;
  global$0 = $6_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1673($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
  $3_1 = $1082($4_1 + 8 | 0 | 0, $4_1 + 12 | 0 | 0) | 0;
  $0_1 = $637($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  $1083($3_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1674($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $9_1 = 0, $8_1 = 0, $10_1 = 0, i64toi32_i32$1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  $9_1 = $2_1;
  label$1 : {
   label$2 : while (1) {
    label$3 : {
     if (($9_1 | 0) != ($3_1 | 0)) {
      break label$3
     }
     $9_1 = $3_1;
     break label$1;
    }
    if (!(HEAPU8[$9_1 >> 0] | 0)) {
     break label$1
    }
    $9_1 = $9_1 + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[$7_1 >> 2] = $5_1;
  HEAP32[$4_1 >> 2] = $2_1;
  label$4 : while (1) {
   label$5 : {
    label$6 : {
     label$7 : {
      if (($5_1 | 0) == ($6_1 | 0)) {
       break label$7
      }
      if (($2_1 | 0) == ($3_1 | 0)) {
       break label$7
      }
      i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      HEAP32[($8_1 + 8 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
      HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$1;
      label$8 : {
       label$9 : {
        label$10 : {
         label$11 : {
          label$12 : {
           $10_1 = $1675($5_1 | 0, $4_1 | 0, $9_1 - $2_1 | 0 | 0, ($6_1 - $5_1 | 0) >> 2 | 0 | 0, $1_1 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
           if (($10_1 | 0) != (-1 | 0)) {
            break label$12
           }
           label$13 : {
            label$14 : while (1) {
             HEAP32[$7_1 >> 2] = $5_1;
             if (($2_1 | 0) == (HEAP32[$4_1 >> 2] | 0 | 0)) {
              break label$13
             }
             $6_1 = 1;
             label$15 : {
              label$16 : {
               label$17 : {
                $5_1 = $1676($5_1 | 0, $2_1 | 0, $9_1 - $2_1 | 0 | 0, $8_1 + 8 | 0 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
                switch ($5_1 + 2 | 0 | 0) {
                case 2:
                 break label$15;
                case 1:
                 break label$17;
                case 0:
                 break label$9;
                default:
                 break label$16;
                };
               }
               HEAP32[$4_1 >> 2] = $2_1;
               break label$11;
              }
              $6_1 = $5_1;
             }
             $2_1 = $2_1 + $6_1 | 0;
             $5_1 = (HEAP32[$7_1 >> 2] | 0) + 4 | 0;
             continue label$14;
            };
           }
           HEAP32[$4_1 >> 2] = $2_1;
           break label$7;
          }
          $5_1 = (HEAP32[$7_1 >> 2] | 0) + ($10_1 << 2 | 0) | 0;
          HEAP32[$7_1 >> 2] = $5_1;
          if (($5_1 | 0) == ($6_1 | 0)) {
           break label$8
          }
          $2_1 = HEAP32[$4_1 >> 2] | 0;
          label$18 : {
           if (($9_1 | 0) != ($3_1 | 0)) {
            break label$18
           }
           $9_1 = $3_1;
           continue label$4;
          }
          if (!($1676($5_1 | 0, $2_1 | 0, 1 | 0, $1_1 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0)) {
           break label$10
          }
         }
         $9_1 = 2;
         break label$6;
        }
        HEAP32[$7_1 >> 2] = (HEAP32[$7_1 >> 2] | 0) + 4 | 0;
        $2_1 = (HEAP32[$4_1 >> 2] | 0) + 1 | 0;
        HEAP32[$4_1 >> 2] = $2_1;
        $9_1 = $2_1;
        label$19 : while (1) {
         label$20 : {
          if (($9_1 | 0) != ($3_1 | 0)) {
           break label$20
          }
          $9_1 = $3_1;
          break label$5;
         }
         if (!(HEAPU8[$9_1 >> 0] | 0)) {
          break label$5
         }
         $9_1 = $9_1 + 1 | 0;
         continue label$19;
        };
       }
       HEAP32[$4_1 >> 2] = $2_1;
       $9_1 = 1;
       break label$6;
      }
      $2_1 = HEAP32[$4_1 >> 2] | 0;
     }
     $9_1 = ($2_1 | 0) != ($3_1 | 0);
    }
    global$0 = $8_1 + 16 | 0;
    return $9_1 | 0;
   }
   $5_1 = HEAP32[$7_1 >> 2] | 0;
   continue label$4;
  };
 }
 
 function $1675($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $5_1;
  $5_1 = $1082($6_1 + 8 | 0 | 0, $6_1 + 12 | 0 | 0) | 0;
  $0_1 = $988($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0) | 0;
  $1083($5_1 | 0) | 0;
  global$0 = $6_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1676($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
  $4_1 = $1082($5_1 + 8 | 0 | 0, $5_1 + 12 | 0 | 0) | 0;
  $0_1 = $955($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  $1083($4_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1677($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[$4_1 >> 2] = $2_1;
  $2_1 = 2;
  label$1 : {
   $1_1 = $1673($5_1 + 12 | 0 | 0, 0 | 0, $1_1 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
   if (($1_1 + 1 | 0) >>> 0 < 2 >>> 0) {
    break label$1
   }
   $2_1 = 1;
   $1_1 = $1_1 + -1 | 0;
   if ($1_1 >>> 0 > ($3_1 - (HEAP32[$4_1 >> 2] | 0) | 0) >>> 0) {
    break label$1
   }
   $2_1 = $5_1 + 12 | 0;
   label$2 : while (1) {
    label$3 : {
     if ($1_1) {
      break label$3
     }
     $2_1 = 0;
     break label$1;
    }
    $0_1 = HEAPU8[$2_1 >> 0] | 0;
    $3_1 = HEAP32[$4_1 >> 2] | 0;
    HEAP32[$4_1 >> 2] = $3_1 + 1 | 0;
    HEAP8[$3_1 >> 0] = $0_1;
    $1_1 = $1_1 + -1 | 0;
    $2_1 = $2_1 + 1 | 0;
    continue label$2;
   };
  }
  global$0 = $5_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1678($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = -1;
  label$1 : {
   label$2 : {
    if ($1679(0 | 0, 0 | 0, 4 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0) {
     break label$2
    }
    $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    if ($0_1) {
     break label$1
    }
    $1_1 = 1;
   }
   return $1_1 | 0;
  }
  return ($1680($0_1 | 0) | 0 | 0) == (1 | 0) | 0;
 }
 
 function $1679($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
  $3_1 = $1082($4_1 + 8 | 0 | 0, $4_1 + 12 | 0 | 0) | 0;
  $0_1 = $989($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  $1083($3_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1680($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
  $0_1 = $1082($1_1 + 8 | 0 | 0, $1_1 + 12 | 0 | 0) | 0;
  $2_1 = $991() | 0;
  $1083($0_1 | 0) | 0;
  global$0 = $1_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1681($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1682($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $5_1 = 0;
  $6_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($2_1 | 0) == ($3_1 | 0)) {
     break label$1
    }
    if ($6_1 >>> 0 >= $4_1 >>> 0) {
     break label$1
    }
    $7_1 = 1;
    label$3 : {
     label$4 : {
      $8_1 = $1683($2_1 | 0, $3_1 - $2_1 | 0 | 0, $1_1 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
      switch ($8_1 + 2 | 0 | 0) {
      case 0:
      case 1:
       break label$1;
      case 2:
       break label$3;
      default:
       break label$4;
      };
     }
     $7_1 = $8_1;
    }
    $6_1 = $6_1 + 1 | 0;
    $5_1 = $7_1 + $5_1 | 0;
    $2_1 = $2_1 + $7_1 | 0;
    continue label$2;
   };
  }
  return $5_1 | 0;
 }
 
 function $1683($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
  $3_1 = $1082($4_1 + 8 | 0 | 0, $4_1 + 12 | 0 | 0) | 0;
  $0_1 = $993($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  $1083($3_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1684($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   if ($0_1) {
    break label$1
   }
   return 1 | 0;
  }
  return $1680($0_1 | 0) | 0 | 0;
 }
 
 function $1685($0_1) {
  $0_1 = $0_1 | 0;
  $1002($0_1 | 0) | 0;
  $2032($0_1 | 0);
 }
 
 function $1686($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 8 | 0) >> 2] = $5_1;
  $5_1 = $1687($2_1 | 0, $3_1 | 0, $8_1 + 12 | 0 | 0, $5_1 | 0, $6_1 | 0, $8_1 + 8 | 0 | 0, 1114111 | 0, 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
  HEAP32[$7_1 >> 2] = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
  global$0 = $8_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $1687($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0;
  HEAP32[$2_1 >> 2] = $0_1;
  HEAP32[$5_1 >> 2] = $3_1;
  label$1 : {
   label$2 : {
    if (!($7_1 & 2 | 0)) {
     break label$2
    }
    $0_1 = 1;
    if (($4_1 - $3_1 | 0 | 0) < (3 | 0)) {
     break label$1
    }
    HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
    HEAP8[$3_1 >> 0] = 239;
    $3_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
    HEAP8[$3_1 >> 0] = 187;
    $3_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
    HEAP8[$3_1 >> 0] = 191;
   }
   $7_1 = HEAP32[$2_1 >> 2] | 0;
   label$3 : {
    label$4 : while (1) {
     label$5 : {
      if ($7_1 >>> 0 < $1_1 >>> 0) {
       break label$5
      }
      $0_1 = 0;
      break label$1;
     }
     $0_1 = 2;
     $3_1 = HEAPU16[$7_1 >> 1] | 0;
     if ($3_1 >>> 0 > $6_1 >>> 0) {
      break label$1
     }
     label$6 : {
      label$7 : {
       label$8 : {
        if ($3_1 >>> 0 > 127 >>> 0) {
         break label$8
        }
        $0_1 = 1;
        $7_1 = HEAP32[$5_1 >> 2] | 0;
        if (($4_1 - $7_1 | 0 | 0) < (1 | 0)) {
         break label$1
        }
        HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
        HEAP8[$7_1 >> 0] = $3_1;
        break label$7;
       }
       label$9 : {
        if ($3_1 >>> 0 > 2047 >>> 0) {
         break label$9
        }
        $7_1 = HEAP32[$5_1 >> 2] | 0;
        if (($4_1 - $7_1 | 0 | 0) < (2 | 0)) {
         break label$3
        }
        HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
        HEAP8[$7_1 >> 0] = $3_1 >>> 6 | 0 | 192 | 0;
        $7_1 = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
        HEAP8[$7_1 >> 0] = $3_1 & 63 | 0 | 128 | 0;
        break label$7;
       }
       label$10 : {
        if ($3_1 >>> 0 > 55295 >>> 0) {
         break label$10
        }
        $7_1 = HEAP32[$5_1 >> 2] | 0;
        if (($4_1 - $7_1 | 0 | 0) < (3 | 0)) {
         break label$3
        }
        HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
        HEAP8[$7_1 >> 0] = $3_1 >>> 12 | 0 | 224 | 0;
        $7_1 = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
        HEAP8[$7_1 >> 0] = ($3_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
        $7_1 = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
        HEAP8[$7_1 >> 0] = $3_1 & 63 | 0 | 128 | 0;
        break label$7;
       }
       label$11 : {
        if ($3_1 >>> 0 > 56319 >>> 0) {
         break label$11
        }
        $0_1 = 1;
        if (($1_1 - $7_1 | 0 | 0) < (4 | 0)) {
         break label$1
        }
        $8_1 = HEAPU16[($7_1 + 2 | 0) >> 1] | 0;
        if (($8_1 & 64512 | 0 | 0) != (56320 | 0)) {
         break label$6
        }
        if (($4_1 - (HEAP32[$5_1 >> 2] | 0) | 0 | 0) < (4 | 0)) {
         break label$1
        }
        $0_1 = $3_1 & 960 | 0;
        if ((($0_1 << 10 | 0 | (($3_1 << 10 | 0) & 64512 | 0) | 0 | ($8_1 & 1023 | 0) | 0) + 65536 | 0) >>> 0 > $6_1 >>> 0) {
         break label$6
        }
        HEAP32[$2_1 >> 2] = $7_1 + 2 | 0;
        $7_1 = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
        $0_1 = ($0_1 >>> 6 | 0) + 1 | 0;
        HEAP8[$7_1 >> 0] = $0_1 >>> 2 | 0 | 240 | 0;
        $7_1 = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
        HEAP8[$7_1 >> 0] = ($0_1 << 4 | 0) & 48 | 0 | (($3_1 >>> 2 | 0) & 15 | 0) | 0 | 128 | 0;
        $7_1 = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
        HEAP8[$7_1 >> 0] = ($8_1 >>> 6 | 0) & 15 | 0 | (($3_1 << 4 | 0) & 48 | 0) | 0 | 128 | 0;
        $3_1 = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
        HEAP8[$3_1 >> 0] = $8_1 & 63 | 0 | 128 | 0;
        break label$7;
       }
       if ($3_1 >>> 0 < 57344 >>> 0) {
        break label$1
       }
       $7_1 = HEAP32[$5_1 >> 2] | 0;
       if (($4_1 - $7_1 | 0 | 0) < (3 | 0)) {
        break label$3
       }
       HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
       HEAP8[$7_1 >> 0] = $3_1 >>> 12 | 0 | 224 | 0;
       $7_1 = HEAP32[$5_1 >> 2] | 0;
       HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
       HEAP8[$7_1 >> 0] = ($3_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
       $7_1 = HEAP32[$5_1 >> 2] | 0;
       HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
       HEAP8[$7_1 >> 0] = $3_1 & 63 | 0 | 128 | 0;
      }
      $7_1 = (HEAP32[$2_1 >> 2] | 0) + 2 | 0;
      HEAP32[$2_1 >> 2] = $7_1;
      continue label$4;
     }
     break label$4;
    };
    return 2 | 0;
   }
   return 1 | 0;
  }
  return $0_1 | 0;
 }
 
 function $1688($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 8 | 0) >> 2] = $5_1;
  $5_1 = $1689($2_1 | 0, $3_1 | 0, $8_1 + 12 | 0 | 0, $5_1 | 0, $6_1 | 0, $8_1 + 8 | 0 | 0, 1114111 | 0, 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
  HEAP32[$7_1 >> 2] = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
  global$0 = $8_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $1689($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $9_1 = 0, $10_1 = 0, $8_1 = 0, $11_1 = 0;
  HEAP32[$2_1 >> 2] = $0_1;
  HEAP32[$5_1 >> 2] = $3_1;
  label$1 : {
   if (!($7_1 & 4 | 0)) {
    break label$1
   }
   $7_1 = HEAP32[$2_1 >> 2] | 0;
   if (($1_1 - $7_1 | 0 | 0) < (3 | 0)) {
    break label$1
   }
   if ((HEAPU8[$7_1 >> 0] | 0 | 0) != (239 | 0)) {
    break label$1
   }
   if ((HEAPU8[($7_1 + 1 | 0) >> 0] | 0 | 0) != (187 | 0)) {
    break label$1
   }
   if ((HEAPU8[($7_1 + 2 | 0) >> 0] | 0 | 0) != (191 | 0)) {
    break label$1
   }
   HEAP32[$2_1 >> 2] = $7_1 + 3 | 0;
  }
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      label$6 : while (1) {
       $3_1 = HEAP32[$2_1 >> 2] | 0;
       if ($3_1 >>> 0 >= $1_1 >>> 0) {
        break label$5
       }
       $0_1 = HEAP32[$5_1 >> 2] | 0;
       if ($0_1 >>> 0 >= $4_1 >>> 0) {
        break label$5
       }
       $8_1 = 2;
       $7_1 = HEAPU8[$3_1 >> 0] | 0;
       if ($7_1 >>> 0 > $6_1 >>> 0) {
        break label$2
       }
       label$7 : {
        label$8 : {
         if ((($7_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0)) {
          break label$8
         }
         HEAP16[$0_1 >> 1] = $7_1;
         $7_1 = $3_1 + 1 | 0;
         break label$7;
        }
        if ($7_1 >>> 0 < 194 >>> 0) {
         break label$2
        }
        label$9 : {
         if ($7_1 >>> 0 > 223 >>> 0) {
          break label$9
         }
         if (($1_1 - $3_1 | 0 | 0) < (2 | 0)) {
          break label$3
         }
         $9_1 = HEAPU8[($3_1 + 1 | 0) >> 0] | 0;
         if (($9_1 & 192 | 0 | 0) != (128 | 0)) {
          break label$4
         }
         $8_1 = 2;
         $7_1 = $9_1 & 63 | 0 | (($7_1 << 6 | 0) & 1984 | 0) | 0;
         if ($7_1 >>> 0 > $6_1 >>> 0) {
          break label$4
         }
         HEAP16[$0_1 >> 1] = $7_1;
         $7_1 = $3_1 + 2 | 0;
         break label$7;
        }
        label$10 : {
         if ($7_1 >>> 0 > 239 >>> 0) {
          break label$10
         }
         if (($1_1 - $3_1 | 0 | 0) < (3 | 0)) {
          break label$3
         }
         $10_1 = HEAPU8[($3_1 + 2 | 0) >> 0] | 0;
         $9_1 = HEAPU8[($3_1 + 1 | 0) >> 0] | 0;
         label$11 : {
          label$12 : {
           label$13 : {
            if (($7_1 | 0) == (237 | 0)) {
             break label$13
            }
            if (($7_1 | 0) != (224 | 0)) {
             break label$12
            }
            if (($9_1 & 224 | 0 | 0) == (160 | 0)) {
             break label$11
            }
            break label$4;
           }
           if (($9_1 & 224 | 0 | 0) == (128 | 0)) {
            break label$11
           }
           break label$4;
          }
          if (($9_1 & 192 | 0 | 0) != (128 | 0)) {
           break label$4
          }
         }
         if (($10_1 & 192 | 0 | 0) != (128 | 0)) {
          break label$4
         }
         $8_1 = 2;
         $7_1 = ($9_1 & 63 | 0) << 6 | 0 | ($7_1 << 12 | 0) | 0 | ($10_1 & 63 | 0) | 0;
         if (($7_1 & 65535 | 0) >>> 0 > $6_1 >>> 0) {
          break label$4
         }
         HEAP16[$0_1 >> 1] = $7_1;
         $7_1 = $3_1 + 3 | 0;
         break label$7;
        }
        if ($7_1 >>> 0 > 244 >>> 0) {
         break label$2
        }
        $8_1 = 1;
        if (($1_1 - $3_1 | 0 | 0) < (4 | 0)) {
         break label$4
        }
        $10_1 = HEAPU8[($3_1 + 3 | 0) >> 0] | 0;
        $9_1 = HEAPU8[($3_1 + 2 | 0) >> 0] | 0;
        $3_1 = HEAPU8[($3_1 + 1 | 0) >> 0] | 0;
        label$14 : {
         label$15 : {
          switch ($7_1 + -240 | 0 | 0) {
          case 0:
           if ((($3_1 + 112 | 0) & 255 | 0) >>> 0 >= 48 >>> 0) {
            break label$2
           }
           break label$14;
          case 4:
           if (($3_1 & 240 | 0 | 0) != (128 | 0)) {
            break label$2
           }
           break label$14;
          default:
           break label$15;
          };
         }
         if (($3_1 & 192 | 0 | 0) != (128 | 0)) {
          break label$2
         }
        }
        if (($9_1 & 192 | 0 | 0) != (128 | 0)) {
         break label$2
        }
        if (($10_1 & 192 | 0 | 0) != (128 | 0)) {
         break label$2
        }
        if (($4_1 - $0_1 | 0 | 0) < (4 | 0)) {
         break label$4
        }
        $8_1 = 2;
        $7_1 = $7_1 & 7 | 0;
        $11_1 = $9_1 << 6 | 0;
        $10_1 = $10_1 & 63 | 0;
        if ((($3_1 << 12 | 0) & 258048 | 0 | ($7_1 << 18 | 0) | 0 | ($11_1 & 4032 | 0) | 0 | $10_1 | 0) >>> 0 > $6_1 >>> 0) {
         break label$4
        }
        $3_1 = $3_1 << 2 | 0;
        HEAP16[$0_1 >> 1] = ($3_1 & 192 | 0 | ($7_1 << 8 | 0) | 0 | (($9_1 >>> 4 | 0) & 3 | 0 | ($3_1 & 60 | 0) | 0) | 0) + 16320 | 0 | 55296 | 0;
        HEAP32[$5_1 >> 2] = $0_1 + 2 | 0;
        HEAP16[($0_1 + 2 | 0) >> 1] = $11_1 & 960 | 0 | $10_1 | 0 | 56320 | 0;
        $7_1 = (HEAP32[$2_1 >> 2] | 0) + 4 | 0;
       }
       HEAP32[$2_1 >> 2] = $7_1;
       HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + 2 | 0;
       continue label$6;
      };
     }
     $8_1 = $3_1 >>> 0 < $1_1 >>> 0;
    }
    return $8_1 | 0;
   }
   return 1 | 0;
  }
  return 2 | 0;
 }
 
 function $1690($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  HEAP32[$4_1 >> 2] = $2_1;
  return 3 | 0;
 }
 
 function $1691($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1692($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1693($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return $1694($2_1 | 0, $3_1 | 0, $4_1 | 0, 1114111 | 0, 0 | 0) | 0 | 0;
 }
 
 function $1694($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $7_1 = 0, $6_1 = 0, $8_1 = 0, $9_1 = 0;
  $5_1 = $0_1;
  label$1 : {
   if (!($4_1 & 4 | 0)) {
    break label$1
   }
   $5_1 = $0_1;
   if (($1_1 - $5_1 | 0 | 0) < (3 | 0)) {
    break label$1
   }
   $5_1 = $0_1;
   if ((HEAPU8[$5_1 >> 0] | 0 | 0) != (239 | 0)) {
    break label$1
   }
   $5_1 = $0_1;
   if ((HEAPU8[($5_1 + 1 | 0) >> 0] | 0 | 0) != (187 | 0)) {
    break label$1
   }
   $5_1 = (HEAPU8[($0_1 + 2 | 0) >> 0] | 0 | 0) == (191 | 0) ? $0_1 + 3 | 0 : $0_1;
  }
  $6_1 = 0;
  label$2 : {
   label$3 : while (1) {
    if ($6_1 >>> 0 >= $2_1 >>> 0) {
     break label$2
    }
    if ($5_1 >>> 0 >= $1_1 >>> 0) {
     break label$2
    }
    $4_1 = HEAPU8[$5_1 >> 0] | 0;
    if ($4_1 >>> 0 > $3_1 >>> 0) {
     break label$2
    }
    label$4 : {
     label$5 : {
      if ((($4_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0)) {
       break label$5
      }
      $5_1 = $5_1 + 1 | 0;
      break label$4;
     }
     if ($4_1 >>> 0 < 194 >>> 0) {
      break label$2
     }
     label$6 : {
      if ($4_1 >>> 0 > 223 >>> 0) {
       break label$6
      }
      if (($1_1 - $5_1 | 0 | 0) < (2 | 0)) {
       break label$2
      }
      $7_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
      if (($7_1 & 192 | 0 | 0) != (128 | 0)) {
       break label$2
      }
      if (($7_1 & 63 | 0 | (($4_1 << 6 | 0) & 1984 | 0) | 0) >>> 0 > $3_1 >>> 0) {
       break label$2
      }
      $5_1 = $5_1 + 2 | 0;
      break label$4;
     }
     label$7 : {
      label$8 : {
       label$9 : {
        if ($4_1 >>> 0 > 239 >>> 0) {
         break label$9
        }
        if (($1_1 - $5_1 | 0 | 0) < (3 | 0)) {
         break label$2
        }
        $8_1 = HEAPU8[($5_1 + 2 | 0) >> 0] | 0;
        $7_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
        if (($4_1 | 0) == (237 | 0)) {
         break label$8
        }
        label$10 : {
         if (($4_1 | 0) != (224 | 0)) {
          break label$10
         }
         if (($7_1 & 224 | 0 | 0) == (160 | 0)) {
          break label$7
         }
         break label$2;
        }
        if (($7_1 & 192 | 0 | 0) != (128 | 0)) {
         break label$2
        }
        break label$7;
       }
       if ($4_1 >>> 0 > 244 >>> 0) {
        break label$2
       }
       if (($2_1 - $6_1 | 0) >>> 0 < 2 >>> 0) {
        break label$2
       }
       if (($1_1 - $5_1 | 0 | 0) < (4 | 0)) {
        break label$2
       }
       $9_1 = HEAPU8[($5_1 + 3 | 0) >> 0] | 0;
       $8_1 = HEAPU8[($5_1 + 2 | 0) >> 0] | 0;
       $7_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
       label$11 : {
        label$12 : {
         switch ($4_1 + -240 | 0 | 0) {
         case 0:
          if ((($7_1 + 112 | 0) & 255 | 0) >>> 0 < 48 >>> 0) {
           break label$11
          }
          break label$2;
         case 4:
          if (($7_1 & 240 | 0 | 0) == (128 | 0)) {
           break label$11
          }
          break label$2;
         default:
          break label$12;
         };
        }
        if (($7_1 & 192 | 0 | 0) != (128 | 0)) {
         break label$2
        }
       }
       if (($8_1 & 192 | 0 | 0) != (128 | 0)) {
        break label$2
       }
       if (($9_1 & 192 | 0 | 0) != (128 | 0)) {
        break label$2
       }
       if ((($7_1 & 63 | 0) << 12 | 0 | (($4_1 << 18 | 0) & 1835008 | 0) | 0 | (($8_1 << 6 | 0) & 4032 | 0) | 0 | ($9_1 & 63 | 0) | 0) >>> 0 > $3_1 >>> 0) {
        break label$2
       }
       $5_1 = $5_1 + 4 | 0;
       $6_1 = $6_1 + 1 | 0;
       break label$4;
      }
      if (($7_1 & 224 | 0 | 0) != (128 | 0)) {
       break label$2
      }
     }
     if (($8_1 & 192 | 0 | 0) != (128 | 0)) {
      break label$2
     }
     if ((($7_1 & 63 | 0) << 6 | 0 | (($4_1 << 12 | 0) & 61440 | 0) | 0 | ($8_1 & 63 | 0) | 0) >>> 0 > $3_1 >>> 0) {
      break label$2
     }
     $5_1 = $5_1 + 3 | 0;
    }
    $6_1 = $6_1 + 1 | 0;
    continue label$3;
   };
  }
  return $5_1 - $0_1 | 0 | 0;
 }
 
 function $1695($0_1) {
  $0_1 = $0_1 | 0;
  return 4 | 0;
 }
 
 function $1696($0_1) {
  $0_1 = $0_1 | 0;
  $1002($0_1 | 0) | 0;
  $2032($0_1 | 0);
 }
 
 function $1697($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 8 | 0) >> 2] = $5_1;
  $5_1 = $1698($2_1 | 0, $3_1 | 0, $8_1 + 12 | 0 | 0, $5_1 | 0, $6_1 | 0, $8_1 + 8 | 0 | 0, 1114111 | 0, 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
  HEAP32[$7_1 >> 2] = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
  global$0 = $8_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $1698($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  HEAP32[$2_1 >> 2] = $0_1;
  HEAP32[$5_1 >> 2] = $3_1;
  label$1 : {
   label$2 : {
    if (!($7_1 & 2 | 0)) {
     break label$2
    }
    $7_1 = 1;
    if (($4_1 - $3_1 | 0 | 0) < (3 | 0)) {
     break label$1
    }
    HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
    HEAP8[$3_1 >> 0] = 239;
    $3_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
    HEAP8[$3_1 >> 0] = 187;
    $3_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
    HEAP8[$3_1 >> 0] = 191;
   }
   $3_1 = HEAP32[$2_1 >> 2] | 0;
   label$3 : while (1) {
    label$4 : {
     if ($3_1 >>> 0 < $1_1 >>> 0) {
      break label$4
     }
     $7_1 = 0;
     break label$1;
    }
    $7_1 = 2;
    $3_1 = HEAP32[$3_1 >> 2] | 0;
    if ($3_1 >>> 0 > $6_1 >>> 0) {
     break label$1
    }
    if (($3_1 & -2048 | 0 | 0) == (55296 | 0)) {
     break label$1
    }
    label$5 : {
     label$6 : {
      label$7 : {
       if ($3_1 >>> 0 > 127 >>> 0) {
        break label$7
       }
       $7_1 = 1;
       $0_1 = HEAP32[$5_1 >> 2] | 0;
       if (($4_1 - $0_1 | 0 | 0) < (1 | 0)) {
        break label$1
       }
       HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
       HEAP8[$0_1 >> 0] = $3_1;
       break label$6;
      }
      label$8 : {
       if ($3_1 >>> 0 > 2047 >>> 0) {
        break label$8
       }
       $7_1 = HEAP32[$5_1 >> 2] | 0;
       if (($4_1 - $7_1 | 0 | 0) < (2 | 0)) {
        break label$5
       }
       HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
       HEAP8[$7_1 >> 0] = $3_1 >>> 6 | 0 | 192 | 0;
       $7_1 = HEAP32[$5_1 >> 2] | 0;
       HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
       HEAP8[$7_1 >> 0] = $3_1 & 63 | 0 | 128 | 0;
       break label$6;
      }
      $7_1 = HEAP32[$5_1 >> 2] | 0;
      $0_1 = $4_1 - $7_1 | 0;
      label$9 : {
       if ($3_1 >>> 0 > 65535 >>> 0) {
        break label$9
       }
       if (($0_1 | 0) < (3 | 0)) {
        break label$5
       }
       HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
       HEAP8[$7_1 >> 0] = $3_1 >>> 12 | 0 | 224 | 0;
       $7_1 = HEAP32[$5_1 >> 2] | 0;
       HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
       HEAP8[$7_1 >> 0] = ($3_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
       $7_1 = HEAP32[$5_1 >> 2] | 0;
       HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
       HEAP8[$7_1 >> 0] = $3_1 & 63 | 0 | 128 | 0;
       break label$6;
      }
      if (($0_1 | 0) < (4 | 0)) {
       break label$5
      }
      HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
      HEAP8[$7_1 >> 0] = $3_1 >>> 18 | 0 | 240 | 0;
      $7_1 = HEAP32[$5_1 >> 2] | 0;
      HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
      HEAP8[$7_1 >> 0] = ($3_1 >>> 12 | 0) & 63 | 0 | 128 | 0;
      $7_1 = HEAP32[$5_1 >> 2] | 0;
      HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
      HEAP8[$7_1 >> 0] = ($3_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
      $7_1 = HEAP32[$5_1 >> 2] | 0;
      HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
      HEAP8[$7_1 >> 0] = $3_1 & 63 | 0 | 128 | 0;
     }
     $3_1 = (HEAP32[$2_1 >> 2] | 0) + 4 | 0;
     HEAP32[$2_1 >> 2] = $3_1;
     continue label$3;
    }
    break label$3;
   };
   return 1 | 0;
  }
  return $7_1 | 0;
 }
 
 function $1699($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 8 | 0) >> 2] = $5_1;
  $5_1 = $1700($2_1 | 0, $3_1 | 0, $8_1 + 12 | 0 | 0, $5_1 | 0, $6_1 | 0, $8_1 + 8 | 0 | 0, 1114111 | 0, 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
  HEAP32[$7_1 >> 2] = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
  global$0 = $8_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $1700($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $10_1 = 0, $11_1 = 0, $9_1 = 0, $8_1 = 0, $12_1 = 0;
  HEAP32[$2_1 >> 2] = $0_1;
  HEAP32[$5_1 >> 2] = $3_1;
  label$1 : {
   if (!($7_1 & 4 | 0)) {
    break label$1
   }
   $7_1 = HEAP32[$2_1 >> 2] | 0;
   if (($1_1 - $7_1 | 0 | 0) < (3 | 0)) {
    break label$1
   }
   if ((HEAPU8[$7_1 >> 0] | 0 | 0) != (239 | 0)) {
    break label$1
   }
   if ((HEAPU8[($7_1 + 1 | 0) >> 0] | 0 | 0) != (187 | 0)) {
    break label$1
   }
   if ((HEAPU8[($7_1 + 2 | 0) >> 0] | 0 | 0) != (191 | 0)) {
    break label$1
   }
   HEAP32[$2_1 >> 2] = $7_1 + 3 | 0;
  }
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : while (1) {
      $3_1 = HEAP32[$2_1 >> 2] | 0;
      if ($3_1 >>> 0 >= $1_1 >>> 0) {
       break label$4
      }
      $8_1 = HEAP32[$5_1 >> 2] | 0;
      if ($8_1 >>> 0 >= $4_1 >>> 0) {
       break label$4
      }
      $0_1 = HEAP8[$3_1 >> 0] | 0;
      $7_1 = $0_1 & 255 | 0;
      label$6 : {
       label$7 : {
        if (($0_1 | 0) < (0 | 0)) {
         break label$7
        }
        label$8 : {
         if ($7_1 >>> 0 > $6_1 >>> 0) {
          break label$8
         }
         $0_1 = 1;
         break label$6;
        }
        return 2 | 0;
       }
       $9_1 = 2;
       if ($7_1 >>> 0 < 194 >>> 0) {
        break label$3
       }
       label$9 : {
        if ($7_1 >>> 0 > 223 >>> 0) {
         break label$9
        }
        if (($1_1 - $3_1 | 0 | 0) < (2 | 0)) {
         break label$2
        }
        $10_1 = HEAPU8[($3_1 + 1 | 0) >> 0] | 0;
        if (($10_1 & 192 | 0 | 0) != (128 | 0)) {
         break label$3
        }
        $0_1 = 2;
        $9_1 = 2;
        $7_1 = $10_1 & 63 | 0 | (($7_1 << 6 | 0) & 1984 | 0) | 0;
        if ($7_1 >>> 0 <= $6_1 >>> 0) {
         break label$6
        }
        break label$3;
       }
       label$10 : {
        if ($7_1 >>> 0 > 239 >>> 0) {
         break label$10
        }
        if (($1_1 - $3_1 | 0 | 0) < (3 | 0)) {
         break label$2
        }
        $11_1 = HEAPU8[($3_1 + 2 | 0) >> 0] | 0;
        $10_1 = HEAPU8[($3_1 + 1 | 0) >> 0] | 0;
        label$11 : {
         label$12 : {
          label$13 : {
           if (($7_1 | 0) == (237 | 0)) {
            break label$13
           }
           if (($7_1 | 0) != (224 | 0)) {
            break label$12
           }
           if (($10_1 & 224 | 0 | 0) == (160 | 0)) {
            break label$11
           }
           break label$3;
          }
          if (($10_1 & 224 | 0 | 0) == (128 | 0)) {
           break label$11
          }
          break label$3;
         }
         if (($10_1 & 192 | 0 | 0) != (128 | 0)) {
          break label$3
         }
        }
        if (($11_1 & 192 | 0 | 0) != (128 | 0)) {
         break label$3
        }
        $0_1 = 3;
        $7_1 = ($10_1 & 63 | 0) << 6 | 0 | (($7_1 << 12 | 0) & 61440 | 0) | 0 | ($11_1 & 63 | 0) | 0;
        if ($7_1 >>> 0 <= $6_1 >>> 0) {
         break label$6
        }
        break label$3;
       }
       if ($7_1 >>> 0 > 244 >>> 0) {
        break label$3
       }
       if (($1_1 - $3_1 | 0 | 0) < (4 | 0)) {
        break label$2
       }
       $12_1 = HEAPU8[($3_1 + 3 | 0) >> 0] | 0;
       $11_1 = HEAPU8[($3_1 + 2 | 0) >> 0] | 0;
       $10_1 = HEAPU8[($3_1 + 1 | 0) >> 0] | 0;
       label$14 : {
        label$15 : {
         switch ($7_1 + -240 | 0 | 0) {
         case 0:
          if ((($10_1 + 112 | 0) & 255 | 0) >>> 0 < 48 >>> 0) {
           break label$14
          }
          break label$3;
         case 4:
          if (($10_1 & 240 | 0 | 0) == (128 | 0)) {
           break label$14
          }
          break label$3;
         default:
          break label$15;
         };
        }
        if (($10_1 & 192 | 0 | 0) != (128 | 0)) {
         break label$3
        }
       }
       if (($11_1 & 192 | 0 | 0) != (128 | 0)) {
        break label$3
       }
       if (($12_1 & 192 | 0 | 0) != (128 | 0)) {
        break label$3
       }
       $0_1 = 4;
       $7_1 = ($10_1 & 63 | 0) << 12 | 0 | (($7_1 << 18 | 0) & 1835008 | 0) | 0 | (($11_1 << 6 | 0) & 4032 | 0) | 0 | ($12_1 & 63 | 0) | 0;
       if ($7_1 >>> 0 > $6_1 >>> 0) {
        break label$3
       }
      }
      HEAP32[$8_1 >> 2] = $7_1;
      HEAP32[$2_1 >> 2] = $3_1 + $0_1 | 0;
      HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + 4 | 0;
      continue label$5;
     };
    }
    $9_1 = $3_1 >>> 0 < $1_1 >>> 0;
   }
   return $9_1 | 0;
  }
  return 1 | 0;
 }
 
 function $1701($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  HEAP32[$4_1 >> 2] = $2_1;
  return 3 | 0;
 }
 
 function $1702($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1703($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1704($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return $1705($2_1 | 0, $3_1 | 0, $4_1 | 0, 1114111 | 0, 0 | 0) | 0 | 0;
 }
 
 function $1705($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $8_1 = 0, $7_1 = 0, $9_1 = 0, $6_1 = 0, $10_1 = 0;
  $5_1 = $0_1;
  label$1 : {
   if (!($4_1 & 4 | 0)) {
    break label$1
   }
   $5_1 = $0_1;
   if (($1_1 - $5_1 | 0 | 0) < (3 | 0)) {
    break label$1
   }
   $5_1 = $0_1;
   if ((HEAPU8[$5_1 >> 0] | 0 | 0) != (239 | 0)) {
    break label$1
   }
   $5_1 = $0_1;
   if ((HEAPU8[($5_1 + 1 | 0) >> 0] | 0 | 0) != (187 | 0)) {
    break label$1
   }
   $5_1 = (HEAPU8[($0_1 + 2 | 0) >> 0] | 0 | 0) == (191 | 0) ? $0_1 + 3 | 0 : $0_1;
  }
  $6_1 = 0;
  label$2 : {
   label$3 : while (1) {
    if ($6_1 >>> 0 >= $2_1 >>> 0) {
     break label$2
    }
    if ($5_1 >>> 0 >= $1_1 >>> 0) {
     break label$2
    }
    $7_1 = HEAP8[$5_1 >> 0] | 0;
    $4_1 = $7_1 & 255 | 0;
    label$4 : {
     label$5 : {
      if (($7_1 | 0) < (0 | 0)) {
       break label$5
      }
      $7_1 = 1;
      if ($4_1 >>> 0 <= $3_1 >>> 0) {
       break label$4
      }
      break label$2;
     }
     if ($4_1 >>> 0 < 194 >>> 0) {
      break label$2
     }
     label$6 : {
      if ($4_1 >>> 0 > 223 >>> 0) {
       break label$6
      }
      if (($1_1 - $5_1 | 0 | 0) < (2 | 0)) {
       break label$2
      }
      $8_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
      if (($8_1 & 192 | 0 | 0) != (128 | 0)) {
       break label$2
      }
      $7_1 = 2;
      if (($8_1 & 63 | 0 | (($4_1 << 6 | 0) & 1984 | 0) | 0) >>> 0 <= $3_1 >>> 0) {
       break label$4
      }
      break label$2;
     }
     label$7 : {
      label$8 : {
       label$9 : {
        if ($4_1 >>> 0 > 239 >>> 0) {
         break label$9
        }
        if (($1_1 - $5_1 | 0 | 0) < (3 | 0)) {
         break label$2
        }
        $9_1 = HEAPU8[($5_1 + 2 | 0) >> 0] | 0;
        $8_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
        if (($4_1 | 0) == (237 | 0)) {
         break label$8
        }
        label$10 : {
         if (($4_1 | 0) != (224 | 0)) {
          break label$10
         }
         if (($8_1 & 224 | 0 | 0) == (160 | 0)) {
          break label$7
         }
         break label$2;
        }
        if (($8_1 & 192 | 0 | 0) != (128 | 0)) {
         break label$2
        }
        break label$7;
       }
       if ($4_1 >>> 0 > 244 >>> 0) {
        break label$2
       }
       if (($1_1 - $5_1 | 0 | 0) < (4 | 0)) {
        break label$2
       }
       $10_1 = HEAPU8[($5_1 + 3 | 0) >> 0] | 0;
       $9_1 = HEAPU8[($5_1 + 2 | 0) >> 0] | 0;
       $8_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
       label$11 : {
        label$12 : {
         switch ($4_1 + -240 | 0 | 0) {
         case 0:
          if ((($8_1 + 112 | 0) & 255 | 0) >>> 0 < 48 >>> 0) {
           break label$11
          }
          break label$2;
         case 4:
          if (($8_1 & 240 | 0 | 0) == (128 | 0)) {
           break label$11
          }
          break label$2;
         default:
          break label$12;
         };
        }
        if (($8_1 & 192 | 0 | 0) != (128 | 0)) {
         break label$2
        }
       }
       if (($9_1 & 192 | 0 | 0) != (128 | 0)) {
        break label$2
       }
       if (($10_1 & 192 | 0 | 0) != (128 | 0)) {
        break label$2
       }
       $7_1 = 4;
       if ((($8_1 & 63 | 0) << 12 | 0 | (($4_1 << 18 | 0) & 1835008 | 0) | 0 | (($9_1 << 6 | 0) & 4032 | 0) | 0 | ($10_1 & 63 | 0) | 0) >>> 0 > $3_1 >>> 0) {
        break label$2
       }
       break label$4;
      }
      if (($8_1 & 224 | 0 | 0) != (128 | 0)) {
       break label$2
      }
     }
     if (($9_1 & 192 | 0 | 0) != (128 | 0)) {
      break label$2
     }
     $7_1 = 3;
     if ((($8_1 & 63 | 0) << 6 | 0 | (($4_1 << 12 | 0) & 61440 | 0) | 0 | ($9_1 & 63 | 0) | 0) >>> 0 > $3_1 >>> 0) {
      break label$2
     }
    }
    $6_1 = $6_1 + 1 | 0;
    $5_1 = $5_1 + $7_1 | 0;
    continue label$3;
   };
  }
  return $5_1 - $0_1 | 0 | 0;
 }
 
 function $1706($0_1) {
  $0_1 = $0_1 | 0;
  return 4 | 0;
 }
 
 function $1707($0_1) {
  $0_1 = $0_1 | 0;
  $1002($0_1 | 0) | 0;
  $2032($0_1 | 0);
 }
 
 function $1708($0_1) {
  $0_1 = $0_1 | 0;
  $1002($0_1 | 0) | 0;
  $2032($0_1 | 0);
 }
 
 function $1709($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 14824;
  $2058($0_1 + 12 | 0 | 0) | 0;
  $1002($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1710($0_1) {
  $0_1 = $0_1 | 0;
  $2032($1709($0_1 | 0) | 0 | 0);
 }
 
 function $1711($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 14864;
  $2058($0_1 + 16 | 0 | 0) | 0;
  $1002($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1712($0_1) {
  $0_1 = $0_1 | 0;
  $2032($1711($0_1 | 0) | 0 | 0);
 }
 
 function $1713($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP8[($0_1 + 8 | 0) >> 0] | 0 | 0;
 }
 
 function $1714($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0;
 }
 
 function $1715($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP8[($0_1 + 9 | 0) >> 0] | 0 | 0;
 }
 
 function $1716($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $1717($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2051($0_1 | 0, $1_1 + 12 | 0 | 0) | 0;
 }
 
 function $1718($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2051($0_1 | 0, $1_1 + 16 | 0 | 0) | 0;
 }
 
 function $1719($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $861($0_1 | 0, 14896 | 0) | 0;
 }
 
 function $1720($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1721($0_1 | 0, 14904 | 0) | 0;
 }
 
 function $1721($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1014($0_1 | 0, $2_1 + 8 | 0 | 0, $2_1 | 0) | 0;
  $2076($0_1 | 0, $1_1 | 0, $1722($1_1 | 0) | 0 | 0);
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1722($0_1) {
  $0_1 = $0_1 | 0;
  return $982($0_1 | 0) | 0 | 0;
 }
 
 function $1723($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $861($0_1 | 0, 14924 | 0) | 0;
 }
 
 function $1724($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1721($0_1 | 0, 14932 | 0) | 0;
 }
 
 function $1725($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2072($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1726($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (($0_1 | 0) == ($1_1 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $1_1 = $1_1 + -4 | 0;
    if ($0_1 >>> 0 >= $1_1 >>> 0) {
     break label$1
    }
    $1942($0_1 | 0, $1_1 | 0);
    $0_1 = $0_1 + 4 | 0;
    continue label$2;
   };
  }
 }
 
 function $1727($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(0 + 334884 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($2099(334884 | 0) | 0)) {
    break label$1
   }
   $1728();
   HEAP32[(0 + 334880 | 0) >> 2] = 335056;
   $2107(334884 | 0);
  }
  return HEAP32[(0 + 334880 | 0) >> 2] | 0 | 0;
 }
 
 function $1728() {
  var $0_1 = 0;
  label$1 : {
   if ((HEAPU8[(0 + 335224 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($2099(335224 | 0) | 0)) {
    break label$1
   }
   $0_1 = 335056;
   label$2 : while (1) {
    $0_1 = ($1037($0_1 | 0) | 0) + 12 | 0;
    if (($0_1 | 0) != (335224 | 0)) {
     continue label$2
    }
    break label$2;
   };
   fimport$3(278 | 0, 0 | 0, 1024 | 0) | 0;
   $2107(335224 | 0);
  }
  $1725(335056 | 0, 19384 | 0) | 0;
  $1725(335068 | 0, 19391 | 0) | 0;
  $1725(335080 | 0, 19398 | 0) | 0;
  $1725(335092 | 0, 19406 | 0) | 0;
  $1725(335104 | 0, 19416 | 0) | 0;
  $1725(335116 | 0, 19425 | 0) | 0;
  $1725(335128 | 0, 19432 | 0) | 0;
  $1725(335140 | 0, 19441 | 0) | 0;
  $1725(335152 | 0, 19445 | 0) | 0;
  $1725(335164 | 0, 19449 | 0) | 0;
  $1725(335176 | 0, 19453 | 0) | 0;
  $1725(335188 | 0, 19457 | 0) | 0;
  $1725(335200 | 0, 19461 | 0) | 0;
  $1725(335212 | 0, 19465 | 0) | 0;
 }
 
 function $1729($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 335224;
  label$1 : while (1) {
   $1_1 = $2058($1_1 + -12 | 0 | 0) | 0;
   if (($1_1 | 0) != (335056 | 0)) {
    continue label$1
   }
   break label$1;
  };
 }
 
 function $1730($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(0 + 334892 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($2099(334892 | 0) | 0)) {
    break label$1
   }
   $1731();
   HEAP32[(0 + 334888 | 0) >> 2] = 335232;
   $2107(334892 | 0);
  }
  return HEAP32[(0 + 334888 | 0) >> 2] | 0 | 0;
 }
 
 function $1731() {
  var $0_1 = 0;
  label$1 : {
   if ((HEAPU8[(0 + 335400 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($2099(335400 | 0) | 0)) {
    break label$1
   }
   $0_1 = 335232;
   label$2 : while (1) {
    $0_1 = ($1296($0_1 | 0) | 0) + 12 | 0;
    if (($0_1 | 0) != (335400 | 0)) {
     continue label$2
    }
    break label$2;
   };
   fimport$3(279 | 0, 0 | 0, 1024 | 0) | 0;
   $2107(335400 | 0);
  }
  $1733(335232 | 0, 19472 | 0) | 0;
  $1733(335244 | 0, 19500 | 0) | 0;
  $1733(335256 | 0, 19528 | 0) | 0;
  $1733(335268 | 0, 19560 | 0) | 0;
  $1733(335280 | 0, 19600 | 0) | 0;
  $1733(335292 | 0, 19636 | 0) | 0;
  $1733(335304 | 0, 19664 | 0) | 0;
  $1733(335316 | 0, 19700 | 0) | 0;
  $1733(335328 | 0, 19716 | 0) | 0;
  $1733(335340 | 0, 19732 | 0) | 0;
  $1733(335352 | 0, 19748 | 0) | 0;
  $1733(335364 | 0, 19764 | 0) | 0;
  $1733(335376 | 0, 19780 | 0) | 0;
  $1733(335388 | 0, 19796 | 0) | 0;
 }
 
 function $1732($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 335400;
  label$1 : while (1) {
   $1_1 = $2077($1_1 + -12 | 0 | 0) | 0;
   if (($1_1 | 0) != (335232 | 0)) {
    continue label$1
   }
   break label$1;
  };
 }
 
 function $1733($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2085($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1734($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(0 + 334900 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($2099(334900 | 0) | 0)) {
    break label$1
   }
   $1735();
   HEAP32[(0 + 334896 | 0) >> 2] = 335408;
   $2107(334900 | 0);
  }
  return HEAP32[(0 + 334896 | 0) >> 2] | 0 | 0;
 }
 
 function $1735() {
  var $0_1 = 0;
  label$1 : {
   if ((HEAPU8[(0 + 335696 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($2099(335696 | 0) | 0)) {
    break label$1
   }
   $0_1 = 335408;
   label$2 : while (1) {
    $0_1 = ($1037($0_1 | 0) | 0) + 12 | 0;
    if (($0_1 | 0) != (335696 | 0)) {
     continue label$2
    }
    break label$2;
   };
   fimport$3(280 | 0, 0 | 0, 1024 | 0) | 0;
   $2107(335696 | 0);
  }
  $1725(335408 | 0, 19812 | 0) | 0;
  $1725(335420 | 0, 19820 | 0) | 0;
  $1725(335432 | 0, 19829 | 0) | 0;
  $1725(335444 | 0, 19835 | 0) | 0;
  $1725(335456 | 0, 19841 | 0) | 0;
  $1725(335468 | 0, 19845 | 0) | 0;
  $1725(335480 | 0, 19850 | 0) | 0;
  $1725(335492 | 0, 19855 | 0) | 0;
  $1725(335504 | 0, 19862 | 0) | 0;
  $1725(335516 | 0, 19872 | 0) | 0;
  $1725(335528 | 0, 19880 | 0) | 0;
  $1725(335540 | 0, 19889 | 0) | 0;
  $1725(335552 | 0, 19898 | 0) | 0;
  $1725(335564 | 0, 19902 | 0) | 0;
  $1725(335576 | 0, 19906 | 0) | 0;
  $1725(335588 | 0, 19910 | 0) | 0;
  $1725(335600 | 0, 19841 | 0) | 0;
  $1725(335612 | 0, 19914 | 0) | 0;
  $1725(335624 | 0, 19918 | 0) | 0;
  $1725(335636 | 0, 19922 | 0) | 0;
  $1725(335648 | 0, 19926 | 0) | 0;
  $1725(335660 | 0, 19930 | 0) | 0;
  $1725(335672 | 0, 19934 | 0) | 0;
  $1725(335684 | 0, 19938 | 0) | 0;
 }
 
 function $1736($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 335696;
  label$1 : while (1) {
   $1_1 = $2058($1_1 + -12 | 0 | 0) | 0;
   if (($1_1 | 0) != (335408 | 0)) {
    continue label$1
   }
   break label$1;
  };
 }
 
 function $1737($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(0 + 334908 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($2099(334908 | 0) | 0)) {
    break label$1
   }
   $1738();
   HEAP32[(0 + 334904 | 0) >> 2] = 335712;
   $2107(334908 | 0);
  }
  return HEAP32[(0 + 334904 | 0) >> 2] | 0 | 0;
 }
 
 function $1738() {
  var $0_1 = 0;
  label$1 : {
   if ((HEAPU8[(0 + 336e3 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($2099(336e3 | 0) | 0)) {
    break label$1
   }
   $0_1 = 335712;
   label$2 : while (1) {
    $0_1 = ($1296($0_1 | 0) | 0) + 12 | 0;
    if (($0_1 | 0) != (336e3 | 0)) {
     continue label$2
    }
    break label$2;
   };
   fimport$3(281 | 0, 0 | 0, 1024 | 0) | 0;
   $2107(336e3 | 0);
  }
  $1733(335712 | 0, 19944 | 0) | 0;
  $1733(335724 | 0, 19976 | 0) | 0;
  $1733(335736 | 0, 20012 | 0) | 0;
  $1733(335748 | 0, 20036 | 0) | 0;
  $1733(335760 | 0, 20060 | 0) | 0;
  $1733(335772 | 0, 20076 | 0) | 0;
  $1733(335784 | 0, 20096 | 0) | 0;
  $1733(335796 | 0, 20116 | 0) | 0;
  $1733(335808 | 0, 20144 | 0) | 0;
  $1733(335820 | 0, 20184 | 0) | 0;
  $1733(335832 | 0, 20216 | 0) | 0;
  $1733(335844 | 0, 20252 | 0) | 0;
  $1733(335856 | 0, 20288 | 0) | 0;
  $1733(335868 | 0, 20304 | 0) | 0;
  $1733(335880 | 0, 20320 | 0) | 0;
  $1733(335892 | 0, 20336 | 0) | 0;
  $1733(335904 | 0, 20060 | 0) | 0;
  $1733(335916 | 0, 20352 | 0) | 0;
  $1733(335928 | 0, 20368 | 0) | 0;
  $1733(335940 | 0, 20384 | 0) | 0;
  $1733(335952 | 0, 20400 | 0) | 0;
  $1733(335964 | 0, 20416 | 0) | 0;
  $1733(335976 | 0, 20432 | 0) | 0;
  $1733(335988 | 0, 20448 | 0) | 0;
 }
 
 function $1739($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 336e3;
  label$1 : while (1) {
   $1_1 = $2077($1_1 + -12 | 0 | 0) | 0;
   if (($1_1 | 0) != (335712 | 0)) {
    continue label$1
   }
   break label$1;
  };
 }
 
 function $1740($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(0 + 334916 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($2099(334916 | 0) | 0)) {
    break label$1
   }
   $1741();
   HEAP32[(0 + 334912 | 0) >> 2] = 336016;
   $2107(334916 | 0);
  }
  return HEAP32[(0 + 334912 | 0) >> 2] | 0 | 0;
 }
 
 function $1741() {
  var $0_1 = 0;
  label$1 : {
   if ((HEAPU8[(0 + 336040 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($2099(336040 | 0) | 0)) {
    break label$1
   }
   $0_1 = 336016;
   label$2 : while (1) {
    $0_1 = ($1037($0_1 | 0) | 0) + 12 | 0;
    if (($0_1 | 0) != (336040 | 0)) {
     continue label$2
    }
    break label$2;
   };
   fimport$3(282 | 0, 0 | 0, 1024 | 0) | 0;
   $2107(336040 | 0);
  }
  $1725(336016 | 0, 20464 | 0) | 0;
  $1725(336028 | 0, 20467 | 0) | 0;
 }
 
 function $1742($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 336040;
  label$1 : while (1) {
   $1_1 = $2058($1_1 + -12 | 0 | 0) | 0;
   if (($1_1 | 0) != (336016 | 0)) {
    continue label$1
   }
   break label$1;
  };
 }
 
 function $1743($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(0 + 334924 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($2099(334924 | 0) | 0)) {
    break label$1
   }
   $1744();
   HEAP32[(0 + 334920 | 0) >> 2] = 336048;
   $2107(334924 | 0);
  }
  return HEAP32[(0 + 334920 | 0) >> 2] | 0 | 0;
 }
 
 function $1744() {
  var $0_1 = 0;
  label$1 : {
   if ((HEAPU8[(0 + 336072 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($2099(336072 | 0) | 0)) {
    break label$1
   }
   $0_1 = 336048;
   label$2 : while (1) {
    $0_1 = ($1296($0_1 | 0) | 0) + 12 | 0;
    if (($0_1 | 0) != (336072 | 0)) {
     continue label$2
    }
    break label$2;
   };
   fimport$3(283 | 0, 0 | 0, 1024 | 0) | 0;
   $2107(336072 | 0);
  }
  $1733(336048 | 0, 20472 | 0) | 0;
  $1733(336060 | 0, 20484 | 0) | 0;
 }
 
 function $1745($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 336072;
  label$1 : while (1) {
   $1_1 = $2077($1_1 + -12 | 0 | 0) | 0;
   if (($1_1 | 0) != (336048 | 0)) {
    continue label$1
   }
   break label$1;
  };
 }
 
 function $1746($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(0 + 334940 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($2099(334940 | 0) | 0)) {
    break label$1
   }
   $861(334928 | 0, 14956 | 0) | 0;
   fimport$3(284 | 0, 0 | 0, 1024 | 0) | 0;
   $2107(334940 | 0);
  }
  return 334928 | 0;
 }
 
 function $1747($0_1) {
  $0_1 = $0_1 | 0;
  $2058(334928 | 0) | 0;
 }
 
 function $1748($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(0 + 334956 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($2099(334956 | 0) | 0)) {
    break label$1
   }
   $1721(334944 | 0, 14968 | 0) | 0;
   fimport$3(285 | 0, 0 | 0, 1024 | 0) | 0;
   $2107(334956 | 0);
  }
  return 334944 | 0;
 }
 
 function $1749($0_1) {
  $0_1 = $0_1 | 0;
  $2077(334944 | 0) | 0;
 }
 
 function $1750($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(0 + 334972 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($2099(334972 | 0) | 0)) {
    break label$1
   }
   $861(334960 | 0, 15004 | 0) | 0;
   fimport$3(286 | 0, 0 | 0, 1024 | 0) | 0;
   $2107(334972 | 0);
  }
  return 334960 | 0;
 }
 
 function $1751($0_1) {
  $0_1 = $0_1 | 0;
  $2058(334960 | 0) | 0;
 }
 
 function $1752($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(0 + 334988 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($2099(334988 | 0) | 0)) {
    break label$1
   }
   $1721(334976 | 0, 15016 | 0) | 0;
   fimport$3(287 | 0, 0 | 0, 1024 | 0) | 0;
   $2107(334988 | 0);
  }
  return 334976 | 0;
 }
 
 function $1753($0_1) {
  $0_1 = $0_1 | 0;
  $2077(334976 | 0) | 0;
 }
 
 function $1754($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(0 + 335004 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($2099(335004 | 0) | 0)) {
    break label$1
   }
   $861(334992 | 0, 15052 | 0) | 0;
   fimport$3(288 | 0, 0 | 0, 1024 | 0) | 0;
   $2107(335004 | 0);
  }
  return 334992 | 0;
 }
 
 function $1755($0_1) {
  $0_1 = $0_1 | 0;
  $2058(334992 | 0) | 0;
 }
 
 function $1756($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(0 + 335020 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($2099(335020 | 0) | 0)) {
    break label$1
   }
   $1721(335008 | 0, 15076 | 0) | 0;
   fimport$3(289 | 0, 0 | 0, 1024 | 0) | 0;
   $2107(335020 | 0);
  }
  return 335008 | 0;
 }
 
 function $1757($0_1) {
  $0_1 = $0_1 | 0;
  $2077(335008 | 0) | 0;
 }
 
 function $1758($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(0 + 335036 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($2099(335036 | 0) | 0)) {
    break label$1
   }
   $861(335024 | 0, 15160 | 0) | 0;
   fimport$3(290 | 0, 0 | 0, 1024 | 0) | 0;
   $2107(335036 | 0);
  }
  return 335024 | 0;
 }
 
 function $1759($0_1) {
  $0_1 = $0_1 | 0;
  $2058(335024 | 0) | 0;
 }
 
 function $1760($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(0 + 335052 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($2099(335052 | 0) | 0)) {
    break label$1
   }
   $1721(335040 | 0, 15172 | 0) | 0;
   fimport$3(291 | 0, 0 | 0, 1024 | 0) | 0;
   $2107(335052 | 0);
  }
  return 335040 | 0;
 }
 
 function $1761($0_1) {
  $0_1 = $0_1 | 0;
  $2077(335040 | 0) | 0;
 }
 
 function $1762($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1956($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1763($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 1;
  label$1 : {
   if (!($1230($0_1 | 0) | 0)) {
    break label$1
   }
   $1_1 = ($1813($0_1 | 0) | 0) + -1 | 0;
  }
  return $1_1 | 0;
 }
 
 function $1764($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $1765($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (!($1230($0_1 | 0) | 0)) {
    break label$1
   }
   $1402($0_1 | 0, $1_1 | 0);
   return;
  }
  $1404($0_1 | 0, $1_1 | 0);
 }
 
 function $1766($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAP32[$0_1 >> 2] | 0 | 0) == ($1073() | 0 | 0)) {
    break label$1
   }
   $981(HEAP32[$0_1 >> 2] | 0 | 0);
  }
  return $0_1 | 0;
 }
 
 function $1767($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1768($0_1) {
  $0_1 = $0_1 | 0;
  $1002($0_1 | 0) | 0;
  $2032($0_1 | 0);
 }
 
 function $1769($0_1) {
  $0_1 = $0_1 | 0;
  $1002($0_1 | 0) | 0;
  $2032($0_1 | 0);
 }
 
 function $1770($0_1) {
  $0_1 = $0_1 | 0;
  $1002($0_1 | 0) | 0;
  $2032($0_1 | 0);
 }
 
 function $1771($0_1) {
  $0_1 = $0_1 | 0;
  $1002($0_1 | 0) | 0;
  $2032($0_1 | 0);
 }
 
 function $1772($0_1) {
  $0_1 = $0_1 | 0;
  $1773($0_1 + 8 | 0 | 0) | 0;
  $1002($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1773($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1774($0_1) {
  $0_1 = $0_1 | 0;
  $2032($1772($0_1 | 0) | 0 | 0);
 }
 
 function $1775($0_1) {
  $0_1 = $0_1 | 0;
  $1776($0_1 + 8 | 0 | 0) | 0;
  $1002($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1776($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1777($0_1) {
  $0_1 = $0_1 | 0;
  $2032($1775($0_1 | 0) | 0 | 0);
 }
 
 function $1778($0_1) {
  $0_1 = $0_1 | 0;
  $2032($1779($0_1 | 0) | 0 | 0);
 }
 
 function $1779($0_1) {
  $0_1 = $0_1 | 0;
  $1766($0_1 + 8 | 0 | 0) | 0;
  $1002($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1780($0_1) {
  $0_1 = $0_1 | 0;
  $2032($1781($0_1 | 0) | 0 | 0);
 }
 
 function $1781($0_1) {
  $0_1 = $0_1 | 0;
  $1766($0_1 + 8 | 0 | 0) | 0;
  $1002($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1782($0_1) {
  $0_1 = $0_1 | 0;
  $1002($0_1 | 0) | 0;
  $2032($0_1 | 0);
 }
 
 function $1783($0_1) {
  $0_1 = $0_1 | 0;
  $1002($0_1 | 0) | 0;
  $2032($0_1 | 0);
 }
 
 function $1784($0_1) {
  $0_1 = $0_1 | 0;
  $1002($0_1 | 0) | 0;
  $2032($0_1 | 0);
 }
 
 function $1785($0_1) {
  $0_1 = $0_1 | 0;
  $1002($0_1 | 0) | 0;
  $2032($0_1 | 0);
 }
 
 function $1786($0_1) {
  $0_1 = $0_1 | 0;
  $1002($0_1 | 0) | 0;
  $2032($0_1 | 0);
 }
 
 function $1787($0_1) {
  $0_1 = $0_1 | 0;
  $1002($0_1 | 0) | 0;
  $2032($0_1 | 0);
 }
 
 function $1788($0_1) {
  $0_1 = $0_1 | 0;
  $1002($0_1 | 0) | 0;
  $2032($0_1 | 0);
 }
 
 function $1789($0_1) {
  $0_1 = $0_1 | 0;
  $1002($0_1 | 0) | 0;
  $2032($0_1 | 0);
 }
 
 function $1790($0_1) {
  $0_1 = $0_1 | 0;
  $1002($0_1 | 0) | 0;
  $2032($0_1 | 0);
 }
 
 function $1791($0_1) {
  $0_1 = $0_1 | 0;
  $1002($0_1 | 0) | 0;
  $2032($0_1 | 0);
 }
 
 function $1792($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + $1_1 | 0;
  return $0_1 | 0;
 }
 
 function $1793($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + ($1_1 << 2 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1794($0_1) {
  $0_1 = $0_1 | 0;
  return $1800($0_1 | 0) | 0 | 0;
 }
 
 function $1795($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1796($0_1 | 0, $1_1 | 0, $2_1 | 0);
 }
 
 function $1796($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1801($1_1 | 0, $2_1 | 0, 1 | 0);
 }
 
 function $1797($0_1) {
  $0_1 = $0_1 | 0;
  return $1798($0_1 | 0) | 0 | 0;
 }
 
 function $1798($0_1) {
  $0_1 = $0_1 | 0;
  return $1805($0_1 | 0) | 0 | 0;
 }
 
 function $1799($0_1) {
  $0_1 = $0_1 | 0;
  return $1806($0_1 | 0) | 0 | 0;
 }
 
 function $1800($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1801($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1802($0_1 | 0, $1_1 | 0, $2_1 | 0);
 }
 
 function $1802($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1803($0_1 | 0, $1_1 | 0);
 }
 
 function $1803($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1804($0_1 | 0);
 }
 
 function $1804($0_1) {
  $0_1 = $0_1 | 0;
  $2032($0_1 | 0);
 }
 
 function $1805($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1806($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1807($0_1) {
  $0_1 = $0_1 | 0;
  return $1814($0_1 | 0) | 0 | 0;
 }
 
 function $1808($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1809($0_1 | 0, $1_1 | 0, $2_1 | 0);
 }
 
 function $1809($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1801($1_1 | 0, $2_1 << 2 | 0 | 0, 4 | 0);
 }
 
 function $1810($0_1) {
  $0_1 = $0_1 | 0;
  return $1811($0_1 | 0) | 0 | 0;
 }
 
 function $1811($0_1) {
  $0_1 = $0_1 | 0;
  return $1815($0_1 | 0) | 0 | 0;
 }
 
 function $1812($0_1) {
  $0_1 = $0_1 | 0;
  return $1816($0_1 | 0) | 0 | 0;
 }
 
 function $1813($0_1) {
  $0_1 = $0_1 | 0;
  return (HEAP32[(($1807($0_1 | 0) | 0) + 8 | 0) >> 2] | 0) & 2147483647 | 0 | 0;
 }
 
 function $1814($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1815($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1816($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1817($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1818($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1829($0_1 | 0, $1828($1_1 | 0) | 0 | 0) | 0;
  $878($2_1 | 0) | 0;
  $1830($0_1 + 16 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1819($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[($1_1 + 12 | 0) >> 2] = $1833($1832($0_1 | 0) | 0 | 0) | 0;
  HEAP32[($1_1 + 8 | 0) >> 2] = $798() | 0;
  $0_1 = HEAP32[($1666($1_1 + 12 | 0 | 0, $1_1 + 8 | 0 | 0) | 0) >> 2] | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1820($0_1) {
  $0_1 = $0_1 | 0;
  return $1835($0_1 + 16 | 0 | 0) | 0 | 0;
 }
 
 function $1821($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1834($0_1 | 0, $1_1 | 0, 0 | 0) | 0 | 0;
 }
 
 function $1822($0_1) {
  $0_1 = $0_1 | 0;
  return $1836($0_1 + 16 | 0 | 0) | 0 | 0;
 }
 
 function $1823($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1839($0_1 | 0, $1837($0_1 | 0) | 0 | 0, ($1837($0_1 | 0) | 0) + (($1838($0_1 | 0) | 0) << 2 | 0) | 0 | 0, ($1837($0_1 | 0) | 0) + (($1838($0_1 | 0) | 0) << 2 | 0) | 0 | 0, ($1837($0_1 | 0) | 0) + ($1_1 << 2 | 0) | 0 | 0);
 }
 
 function $1824($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  $1_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 8 | 0) >> 2] = $1_1 + ($2_1 << 2 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1825($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1826($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1851($0_1 | 0, $1_1 | 0);
 }
 
 function $1827($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((HEAP32[$0_1 >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1828($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1829($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1828($1_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 0;
  return $0_1 | 0;
 }
 
 function $1830($0_1) {
  $0_1 = $0_1 | 0;
  $1831($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1831($0_1) {
  $0_1 = $0_1 | 0;
  HEAP8[($0_1 + 112 | 0) >> 0] = 0;
  return $0_1 | 0;
 }
 
 function $1832($0_1) {
  $0_1 = $0_1 | 0;
  return $1841($0_1 + 16 | 0 | 0) | 0 | 0;
 }
 
 function $1833($0_1) {
  $0_1 = $0_1 | 0;
  return $1840($0_1 | 0) | 0 | 0;
 }
 
 function $1834($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if ($1_1 >>> 0 > 28 >>> 0) {
    break label$1
   }
   if ((HEAPU8[($0_1 + 112 | 0) >> 0] | 0) & 255 | 0) {
    break label$1
   }
   HEAP8[($0_1 + 112 | 0) >> 0] = 1;
   return $0_1 | 0;
  }
  return $1844($1_1 << 2 | 0 | 0, 4 | 0) | 0 | 0;
 }
 
 function $1835($0_1) {
  $0_1 = $0_1 | 0;
  return $1845($0_1 + 16 | 0 | 0) | 0 | 0;
 }
 
 function $1836($0_1) {
  $0_1 = $0_1 | 0;
  return $1846($0_1 | 0) | 0 | 0;
 }
 
 function $1837($0_1) {
  $0_1 = $0_1 | 0;
  return $1825(HEAP32[$0_1 >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $1838($0_1) {
  $0_1 = $0_1 | 0;
  return $1847($0_1 | 0) | 0 | 0;
 }
 
 function $1839($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
 }
 
 function $1840($0_1) {
  $0_1 = $0_1 | 0;
  return $1842($0_1 | 0) | 0 | 0;
 }
 
 function $1841($0_1) {
  $0_1 = $0_1 | 0;
  return $1843($0_1 + 16 | 0 | 0) | 0 | 0;
 }
 
 function $1842($0_1) {
  $0_1 = $0_1 | 0;
  return 1073741823 | 0;
 }
 
 function $1843($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1844($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2030($0_1 | 0) | 0 | 0;
 }
 
 function $1845($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1846($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1847($0_1) {
  $0_1 = $0_1 | 0;
  return ((HEAP32[($1848($0_1 | 0) | 0) >> 2] | 0) - (HEAP32[$0_1 >> 2] | 0) | 0) >> 2 | 0 | 0;
 }
 
 function $1848($0_1) {
  $0_1 = $0_1 | 0;
  return $1849($0_1 + 16 | 0 | 0) | 0 | 0;
 }
 
 function $1849($0_1) {
  $0_1 = $0_1 | 0;
  return $1850($0_1 | 0) | 0 | 0;
 }
 
 function $1850($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1851($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$1_1 >> 2] = 0;
 }
 
 function $1852($0_1) {
  $0_1 = $0_1 | 0;
  return ($1854($1853($0_1 | 0) | 0 | 0) | 0) + -16 | 0 | 0;
 }
 
 function $1853($0_1) {
  $0_1 = $0_1 | 0;
  return $1864($0_1 | 0) | 0 | 0;
 }
 
 function $1854($0_1) {
  $0_1 = $0_1 | 0;
  return $1863($0_1 | 0) | 0 | 0;
 }
 
 function $1855($0_1) {
  $0_1 = $0_1 | 0;
  return $1867($0_1 | 0) | 0 | 0;
 }
 
 function $1856($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $7_1 = 0;
  $1_1 = 10;
  label$1 : {
   if ($0_1 >>> 0 < 11 >>> 0) {
    break label$1
   }
   $0_1 = $1857($0_1 + 1 | 0 | 0) | 0;
   $7_1 = $0_1;
   $0_1 = $0_1 + -1 | 0;
   $1_1 = ($0_1 | 0) == (11 | 0) ? $7_1 : $0_1;
  }
  return $1_1 | 0;
 }
 
 function $1857($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 + 15 | 0) & -16 | 0 | 0;
 }
 
 function $1858($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1859($0_1 | 0, $1_1 | 0, 0 | 0) | 0 | 0;
 }
 
 function $1859($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if (($1865($0_1 | 0) | 0) >>> 0 >= $1_1 >>> 0) {
    break label$1
   }
   $3(20496 | 0);
   abort();
  }
  return $1844($1_1 | 0, 1 | 0) | 0 | 0;
 }
 
 function $1860($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($1799($0_1 | 0) | 0) >> 2] = $1_1;
 }
 
 function $1861($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[(($1799($0_1 | 0) | 0) + 8 | 0) >> 2] = $1_1 | -2147483648 | 0;
 }
 
 function $1862($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1863($0_1) {
  $0_1 = $0_1 | 0;
  return $1865($0_1 | 0) | 0 | 0;
 }
 
 function $1864($0_1) {
  $0_1 = $0_1 | 0;
  return $1866($0_1 | 0) | 0 | 0;
 }
 
 function $1865($0_1) {
  $0_1 = $0_1 | 0;
  return -1 | 0;
 }
 
 function $1866($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1867($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1868($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1870($0_1 | 0, $1_1 | 0, $2_1 | 0);
 }
 
 function $1869($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if (($2_1 | 0) == ($1_1 | 0)) {
     break label$1
    }
    $2_1 = $2_1 + -4 | 0;
    $1871($1820($0_1 | 0) | 0 | 0, $1825($2_1 | 0) | 0 | 0);
    continue label$2;
   };
  }
  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
 }
 
 function $1870($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if (($0_1 | 0) != ($1_1 | 0)) {
    break label$1
   }
   HEAP8[($0_1 + 112 | 0) >> 0] = 0;
   return;
  }
  $1801($1_1 | 0, $2_1 << 2 | 0 | 0, 4 | 0);
 }
 
 function $1871($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1872($0_1 | 0, $1_1 | 0);
 }
 
 function $1872($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $1873($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1874($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1875($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1876($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1877($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1878($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 20572;
  return $0_1 | 0;
 }
 
 function $1879($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 20608;
  return $0_1 | 0;
 }
 
 function $1880($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = $1073() | 0;
  return $0_1 | 0;
 }
 
 function $1881($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1882($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
  label$1 : {
   $3_1 = $1819($0_1 | 0) | 0;
   if ($3_1 >>> 0 < $1_1 >>> 0) {
    break label$1
   }
   label$2 : {
    $0_1 = $1838($0_1 | 0) | 0;
    if ($0_1 >>> 0 >= ($3_1 >>> 1 | 0) >>> 0) {
     break label$2
    }
    HEAP32[($2_1 + 8 | 0) >> 2] = $0_1 << 1 | 0;
    $3_1 = HEAP32[($864($2_1 + 8 | 0 | 0, $2_1 + 12 | 0 | 0) | 0) >> 2] | 0;
   }
   global$0 = $2_1 + 16 | 0;
   return $3_1 | 0;
  }
  $2097($0_1 | 0);
  abort();
 }
 
 function $1883($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $1884($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1885($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[($1884($1_1 | 0) | 0) >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1886($0_1) {
  $0_1 = $0_1 | 0;
  $1602($0_1 | 0) | 0;
 }
 
 function $1887($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1888($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $5_1 = 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  $1892($0_1 + 12 | 0 | 0, $4_1 + 12 | 0 | 0, $3_1 | 0) | 0;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $5_1 = $1821($1893($0_1 | 0) | 0 | 0, $1_1 | 0) | 0;
  }
  HEAP32[$0_1 >> 2] = $5_1;
  $2_1 = $5_1 + ($2_1 << 2 | 0) | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[($1894($0_1 | 0) | 0) >> 2] = $5_1 + ($1_1 << 2 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1889($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1_1 = $1895($2_1 | 0, $0_1 + 8 | 0 | 0, $1_1 | 0) | 0;
  $3_1 = HEAP32[$1_1 >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if (($3_1 | 0) == (HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0)) {
     break label$1
    }
    $1826($1893($0_1 | 0) | 0 | 0, $1825(HEAP32[$1_1 >> 2] | 0 | 0) | 0 | 0);
    $3_1 = (HEAP32[$1_1 >> 2] | 0) + 4 | 0;
    HEAP32[$1_1 >> 2] = $3_1;
    continue label$2;
   };
  }
  $1896($1_1 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1890($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $1608($0_1 | 0);
  $2_1 = $1_1 + 4 | 0;
  $1897($1820($0_1 | 0) | 0 | 0, HEAP32[$0_1 >> 2] | 0 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $2_1 | 0);
  $1898($0_1 | 0, $2_1 | 0);
  $1898($0_1 + 4 | 0 | 0, $1_1 + 8 | 0 | 0);
  $1898($1822($0_1 | 0) | 0 | 0, $1894($1_1 | 0) | 0 | 0);
  HEAP32[$1_1 >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  $1823($0_1 | 0, $1559($0_1 | 0) | 0 | 0);
  $1562($0_1 | 0);
 }
 
 function $1891($0_1) {
  $0_1 = $0_1 | 0;
  $1899($0_1 | 0);
  label$1 : {
   if (!(HEAP32[$0_1 >> 2] | 0)) {
    break label$1
   }
   $1868($1893($0_1 | 0) | 0 | 0, HEAP32[$0_1 >> 2] | 0 | 0, $1900($0_1 | 0) | 0 | 0);
  }
  return $0_1 | 0;
 }
 
 function $1892($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1829($0_1 | 0, $1828($1_1 | 0) | 0 | 0) | 0;
  $1902($0_1 + 4 | 0 | 0, $1901($2_1 | 0) | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1893($0_1) {
  $0_1 = $0_1 | 0;
  return $1903($0_1 + 12 | 0 | 0) | 0 | 0;
 }
 
 function $1894($0_1) {
  $0_1 = $0_1 | 0;
  return $1904($0_1 + 12 | 0 | 0) | 0 | 0;
 }
 
 function $1895($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  $3_1 = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 + ($2_1 << 2 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1896($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[(HEAP32[($0_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1897($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $2_1 = $2_1 - $1_1 | 0;
  $4_1 = (HEAP32[$3_1 >> 2] | 0) - $2_1 | 0;
  HEAP32[$3_1 >> 2] = $4_1;
  label$1 : {
   if (($2_1 | 0) < (1 | 0)) {
    break label$1
   }
   $2173($4_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  }
 }
 
 function $1898($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[($1906($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[$0_1 >> 2] = HEAP32[($1906($1_1 | 0) | 0) >> 2] | 0;
  HEAP32[$1_1 >> 2] = HEAP32[($1906($2_1 + 12 | 0 | 0) | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1899($0_1) {
  $0_1 = $0_1 | 0;
  $1907($0_1 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
 }
 
 function $1900($0_1) {
  $0_1 = $0_1 | 0;
  return ((HEAP32[($1908($0_1 | 0) | 0) >> 2] | 0) - (HEAP32[$0_1 >> 2] | 0) | 0) >> 2 | 0 | 0;
 }
 
 function $1901($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1902($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1901($1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1903($0_1) {
  $0_1 = $0_1 | 0;
  return $1905($0_1 + 4 | 0 | 0) | 0 | 0;
 }
 
 function $1904($0_1) {
  $0_1 = $0_1 | 0;
  return $1846($0_1 | 0) | 0 | 0;
 }
 
 function $1905($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1906($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1907($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1909($0_1 | 0, $1_1 | 0);
 }
 
 function $1908($0_1) {
  $0_1 = $0_1 | 0;
  return $1910($0_1 + 12 | 0 | 0) | 0 | 0;
 }
 
 function $1909($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if ((HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
     break label$1
    }
    $2_1 = $1893($0_1 | 0) | 0;
    $3_1 = (HEAP32[($0_1 + 8 | 0) >> 2] | 0) + -4 | 0;
    HEAP32[($0_1 + 8 | 0) >> 2] = $3_1;
    $1871($2_1 | 0, $1825($3_1 | 0) | 0 | 0);
    continue label$2;
   };
  }
 }
 
 function $1910($0_1) {
  $0_1 = $0_1 | 0;
  return $1850($0_1 | 0) | 0 | 0;
 }
 
 function $1911($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1913($0_1 | 0, $1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1912($0_1) {
  $0_1 = $0_1 | 0;
  $1914($0_1 | 0);
 }
 
 function $1913($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $1914($0_1) {
  $0_1 = $0_1 | 0;
  $1916($1915(HEAP32[$0_1 >> 2] | 0 | 0) | 0 | 0);
 }
 
 function $1915($0_1) {
  $0_1 = $0_1 | 0;
  return $1918($0_1 | 0) | 0 | 0;
 }
 
 function $1916($0_1) {
  $0_1 = $0_1 | 0;
  $1917($0_1 | 0);
 }
 
 function $1917($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  $2_1 = (HEAP32[$0_1 >> 2] | 0) + ($1_1 >> 1 | 0) | 0;
  $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  label$1 : {
   if (!($1_1 & 1 | 0)) {
    break label$1
   }
   $0_1 = HEAP32[((HEAP32[$2_1 >> 2] | 0) + $0_1 | 0) >> 2] | 0;
  }
  FUNCTION_TABLE[$0_1 | 0]($2_1);
 }
 
 function $1918($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1919($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1920($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1920($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1_1 - $0_1 | 0 | 0;
 }
 
 function $1921($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1922($0_1) {
  $0_1 = $0_1 | 0;
  $1929($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1923($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1930($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1924($0_1) {
  $0_1 = $0_1 | 0;
  return ($1932($1931($0_1 | 0) | 0 | 0) | 0) + -16 | 0 | 0;
 }
 
 function $1925($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $7_1 = 0;
  $1_1 = 1;
  label$1 : {
   if ($0_1 >>> 0 < 2 >>> 0) {
    break label$1
   }
   $0_1 = $1934($0_1 + 1 | 0 | 0) | 0;
   $7_1 = $0_1;
   $0_1 = $0_1 + -1 | 0;
   $1_1 = ($0_1 | 0) == (2 | 0) ? $7_1 : $0_1;
  }
  return $1_1 | 0;
 }
 
 function $1926($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1935($0_1 | 0, $1_1 | 0, 0 | 0) | 0 | 0;
 }
 
 function $1927($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($1812($0_1 | 0) | 0) >> 2] = $1_1;
 }
 
 function $1928($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[(($1812($0_1 | 0) | 0) + 8 | 0) >> 2] = $1_1 | -2147483648 | 0;
 }
 
 function $1929($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1930($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1_1 - $0_1 | 0) >> 2 | 0 | 0;
 }
 
 function $1931($0_1) {
  $0_1 = $0_1 | 0;
  return $1937($0_1 | 0) | 0 | 0;
 }
 
 function $1932($0_1) {
  $0_1 = $0_1 | 0;
  return $1936($0_1 | 0) | 0 | 0;
 }
 
 function $1933($0_1) {
  $0_1 = $0_1 | 0;
  return $1940($0_1 | 0) | 0 | 0;
 }
 
 function $1934($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 + 3 | 0) & -4 | 0 | 0;
 }
 
 function $1935($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if (($1938($0_1 | 0) | 0) >>> 0 >= $1_1 >>> 0) {
    break label$1
   }
   $3(20496 | 0);
   abort();
  }
  return $1844($1_1 << 2 | 0 | 0, 4 | 0) | 0 | 0;
 }
 
 function $1936($0_1) {
  $0_1 = $0_1 | 0;
  return $1938($0_1 | 0) | 0 | 0;
 }
 
 function $1937($0_1) {
  $0_1 = $0_1 | 0;
  return $1939($0_1 | 0) | 0 | 0;
 }
 
 function $1938($0_1) {
  $0_1 = $0_1 | 0;
  return 1073741823 | 0;
 }
 
 function $1939($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1940($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1941($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1942($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $870($0_1 | 0, $1_1 | 0);
 }
 
 function $1943($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($1794($0_1 | 0) | 0) >> 2] | 0 | 0;
 }
 
 function $1944($0_1) {
  $0_1 = $0_1 | 0;
  return $1945($1794($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1945($0_1) {
  $0_1 = $0_1 | 0;
  return $1946($0_1 | 0) | 0 | 0;
 }
 
 function $1946($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1947($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1951($0_1 | 0, $1950($1_1 | 0) | 0 | 0) | 0;
  $883($0_1 + 4 | 0 | 0, $882($2_1 | 0) | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1948($0_1) {
  $0_1 = $0_1 | 0;
  return $1952($0_1 | 0) | 0 | 0;
 }
 
 function $1949($0_1) {
  $0_1 = $0_1 | 0;
  return $884($0_1 + 4 | 0 | 0) | 0 | 0;
 }
 
 function $1950($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1951($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[($1950($1_1 | 0) | 0) >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1952($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1953($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1954($0_1 | 0, $1_1 | 0);
 }
 
 function $1954($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1955($1797($1_1 | 0) | 0 | 0) | 0;
  $1797($0_1 | 0) | 0;
 }
 
 function $1955($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1956($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1_1 - $0_1 | 0) >> 2 | 0 | 0;
 }
 
 function $1957($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1958($0_1 | 0, $1_1 | 0);
 }
 
 function $1958($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1959($1810($1_1 | 0) | 0 | 0) | 0;
  $1810($0_1 | 0) | 0;
 }
 
 function $1959($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1960($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $1961($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1962($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[($1961($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[$0_1 >> 2] = HEAP32[($1961($1_1 | 0) | 0) >> 2] | 0;
  HEAP32[$1_1 >> 2] = HEAP32[($1961($2_1 + 12 | 0 | 0) | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1963($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1_1 - $0_1 | 0 | 0) / (12 | 0) | 0 | 0;
 }
 
 function $1964() {
  return $1965() | 0 | 0;
 }
 
 function $1965() {
  return -2147483648 | 0;
 }
 
 function $1966() {
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $1968() | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $1967() {
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $1969() | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $1968() {
  i64toi32_i32$HIGH_BITS = -2147483648;
  return 0 | 0;
 }
 
 function $1969() {
  i64toi32_i32$HIGH_BITS = 2147483647;
  return -1 | 0;
 }
 
 function $1970() {
  return $1971() | 0 | 0;
 }
 
 function $1971() {
  return 65535 | 0;
 }
 
 function $1972() {
  return -1 | 0;
 }
 
 function $1973() {
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $1974() | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $1974() {
  i64toi32_i32$HIGH_BITS = -1;
  return -1 | 0;
 }
 
 function $1975($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return Math_fround(Math_fround($677($0_1 | 0, $1_1 | 0, $1073() | 0 | 0)));
 }
 
 function $1976($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return +(+$678($0_1 | 0, $1_1 | 0, $1073() | 0 | 0));
 }
 
 function $1977($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $13_1 = 0, $16_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $679($3_1 | 0, $1_1 | 0, $2_1 | 0, $1073() | 0 | 0);
  i64toi32_i32$0 = HEAP32[$3_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  $13_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $13_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $16_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $16_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $1978($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1_1 - $0_1 | 0 | 0) / (12 | 0) | 0 | 0;
 }
 
 function $1979($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1980($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[($1979($1_1 | 0) | 0) >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1981($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1982($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1983($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[($1982($1_1 | 0) | 0) >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1984($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1985($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1256($0_1 | 0, $1_1 | 0);
 }
 
 function $1986($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1962($0_1 | 0, $1_1 | 0);
 }
 
 function $1987($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($1807($0_1 | 0) | 0) >> 2] | 0 | 0;
 }
 
 function $1988($0_1) {
  $0_1 = $0_1 | 0;
  return $1989($1807($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1989($0_1) {
  $0_1 = $0_1 | 0;
  return $1990($0_1 | 0) | 0 | 0;
 }
 
 function $1990($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1991($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $2_1;
  label$1 : {
   label$2 : while (1) {
    if (($0_1 | 0) == ($1_1 | 0)) {
     break label$1
    }
    $2_1 = HEAP8[$0_1 >> 0] | 0;
    $849($848($3_1 + 8 | 0 | 0) | 0 | 0, $2_1 | 0) | 0;
    $0_1 = $0_1 + 1 | 0;
    $850($3_1 + 8 | 0 | 0) | 0;
    continue label$2;
   };
  }
  $0_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1992($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $2_1;
  label$1 : {
   label$2 : while (1) {
    if (($0_1 | 0) == ($1_1 | 0)) {
     break label$1
    }
    $2_1 = HEAP32[$0_1 >> 2] | 0;
    $858($857($3_1 + 8 | 0 | 0) | 0 | 0, $2_1 | 0) | 0;
    $0_1 = $0_1 + 4 | 0;
    $859($3_1 + 8 | 0 | 0) | 0;
    continue label$2;
   };
  }
  $0_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1993($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1994($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1998($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1995($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1_1 >>> 0 <= $0_1 >>> 0 & $0_1 >>> 0 < $2_1 >>> 0 | 0 | 0;
 }
 
 function $1996($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $1999($0_1 | 0, $4_1 + 8 | 0 | 0, $3_1 | 0) | 0;
  $2000($0_1 | 0, $1_1 | 0, $2_1 | 0);
  global$0 = $4_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1997($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (!($1076($0_1 | 0) | 0)) {
    break label$1
   }
   $1339($0_1 | 0, $1_1 | 0);
   return;
  }
  $1341($0_1 | 0, $1_1 | 0);
 }
 
 function $1998($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1_1 - $0_1 | 0 | 0;
 }
 
 function $1999($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $878($1_1 | 0) | 0;
  $879($0_1 | 0) | 0;
  $2002($0_1 | 0, $2001($2_1 | 0) | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $2000($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $4_1 = 0, $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   $4_1 = $1994($1_1 | 0, $2_1 | 0) | 0;
   if ($4_1 >>> 0 > ($1852($0_1 | 0) | 0) >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if ($4_1 >>> 0 > 10 >>> 0) {
      break label$3
     }
     $1341($0_1 | 0, $4_1 | 0);
     $5_1 = $1340($0_1 | 0) | 0;
     break label$2;
    }
    $5_1 = $1856($4_1 | 0) | 0;
    $6_1 = $5_1 + 1 | 0;
    $5_1 = $1858($1797($0_1 | 0) | 0 | 0, $6_1 | 0) | 0;
    $1860($0_1 | 0, $5_1 | 0);
    $1861($0_1 | 0, $6_1 | 0);
    $1339($0_1 | 0, $4_1 | 0);
   }
   label$4 : {
    label$5 : while (1) {
     if (($1_1 | 0) == ($2_1 | 0)) {
      break label$4
     }
     $1338($5_1 | 0, $1_1 | 0);
     $5_1 = $5_1 + 1 | 0;
     $1_1 = $1_1 + 1 | 0;
     continue label$5;
    };
   }
   HEAP8[($3_1 + 15 | 0) >> 0] = 0;
   $1338($5_1 | 0, $3_1 + 15 | 0 | 0);
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $2049($0_1 | 0);
  abort();
 }
 
 function $2001($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2002($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2001($1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $2003($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2004($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[($2003($1_1 | 0) | 0) >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $2005($0_1) {
  $0_1 = $0_1 | 0;
  return $2007($0_1 | 0) | 0 | 0;
 }
 
 function $2006($0_1) {
  $0_1 = $0_1 | 0;
  return $884($0_1 + 4 | 0 | 0) | 0 | 0;
 }
 
 function $2007($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2008($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2009($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return (HEAPU8[$1_1 >> 0] | 0 | 0) == (HEAPU8[$2_1 >> 0] | 0 | 0) | 0;
 }
 
 function $2010($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2011($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1_1 >>> 0 <= $0_1 >>> 0 & $0_1 >>> 0 < $2_1 >>> 0 | 0 | 0;
 }
 
 function $2012($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $2013($0_1 | 0, $4_1 + 8 | 0 | 0, $3_1 | 0) | 0;
  $2014($0_1 | 0, $1_1 | 0, $2_1 | 0);
  global$0 = $4_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $2013($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $878($1_1 | 0) | 0;
  $1921($0_1 | 0) | 0;
  $2016($0_1 | 0, $2015($2_1 | 0) | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $2014($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $4_1 = 0, $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   $4_1 = $1762($1_1 | 0, $2_1 | 0) | 0;
   if ($4_1 >>> 0 > ($1924($0_1 | 0) | 0) >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if ($4_1 >>> 0 > 1 >>> 0) {
      break label$3
     }
     $1404($0_1 | 0, $4_1 | 0);
     $5_1 = $1403($0_1 | 0) | 0;
     break label$2;
    }
    $5_1 = $1925($4_1 | 0) | 0;
    $6_1 = $5_1 + 1 | 0;
    $5_1 = $1926($1810($0_1 | 0) | 0 | 0, $6_1 | 0) | 0;
    $1927($0_1 | 0, $5_1 | 0);
    $1928($0_1 | 0, $6_1 | 0);
    $1402($0_1 | 0, $4_1 | 0);
   }
   label$4 : {
    label$5 : while (1) {
     if (($1_1 | 0) == ($2_1 | 0)) {
      break label$4
     }
     $1401($5_1 | 0, $1_1 | 0);
     $5_1 = $5_1 + 4 | 0;
     $1_1 = $1_1 + 4 | 0;
     continue label$5;
    };
   }
   HEAP32[($3_1 + 12 | 0) >> 2] = 0;
   $1401($5_1 | 0, $3_1 + 12 | 0 | 0);
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $2049($0_1 | 0);
  abort();
 }
 
 function $2015($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2016($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2015($1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $2017($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return (HEAP32[$1_1 >> 2] | 0 | 0) == (HEAP32[$2_1 >> 2] | 0 | 0) | 0;
 }
 
 function $2018($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2019($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2020($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2021($0_1) {
  $0_1 = $0_1 | 0;
  abort();
 }
 
 function $2022($0_1) {
  $0_1 = $0_1 | 0;
  return $2166($0_1 | 0) | 0 | 0;
 }
 
 function $2023($0_1) {
  $0_1 = $0_1 | 0;
  return $2167($0_1 | 0) | 0 | 0;
 }
 
 function $2024($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2022(336592 | 0) | 0;
  label$1 : {
   label$2 : while (1) {
    if ((HEAP32[$0_1 >> 2] | 0 | 0) != (1 | 0)) {
     break label$1
    }
    $2025(336620 | 0, 336592 | 0) | 0;
    continue label$2;
   };
  }
  label$3 : {
   if (HEAP32[$0_1 >> 2] | 0) {
    break label$3
   }
   $2026($0_1 | 0);
   $2023(336592 | 0) | 0;
   FUNCTION_TABLE[$2_1 | 0]($1_1);
   $2022(336592 | 0) | 0;
   $2027($0_1 | 0);
   $2023(336592 | 0) | 0;
   $2028(336620 | 0) | 0;
   return;
  }
  $2023(336592 | 0) | 0;
 }
 
 function $2025($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2168($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $2026($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 1;
 }
 
 function $2027($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = -1;
 }
 
 function $2028($0_1) {
  $0_1 = $0_1 | 0;
  return $2169($0_1 | 0) | 0 | 0;
 }
 
 function $2029() {
  fimport$93();
  abort();
 }
 
 function $2030($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = $0_1 ? $0_1 : 1;
  label$1 : {
   label$2 : while (1) {
    $0_1 = $2160($1_1 | 0) | 0;
    if ($0_1) {
     break label$1
    }
    label$3 : {
     $0_1 = $2114() | 0;
     if (!$0_1) {
      break label$3
     }
     FUNCTION_TABLE[$0_1 | 0]();
     continue label$2;
    }
    break label$2;
   };
   fimport$93();
   abort();
  }
  return $0_1 | 0;
 }
 
 function $2031($0_1) {
  $0_1 = $0_1 | 0;
  return $2030($0_1 | 0) | 0 | 0;
 }
 
 function $2032($0_1) {
  $0_1 = $0_1 | 0;
  $2161($0_1 | 0);
 }
 
 function $2033($0_1) {
  $0_1 = $0_1 | 0;
  $2032($0_1 | 0);
 }
 
 function $2034($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 21084;
  return $0_1 | 0;
 }
 
 function $2035($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $2181($1_1 | 0) | 0;
  $3_1 = $2030($2_1 + 13 | 0 | 0) | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$3_1 >> 2] = $2_1;
  HEAP32[$0_1 >> 2] = $2173($2036($3_1 | 0) | 0 | 0, $1_1 | 0, $2_1 + 1 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $2036($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 12 | 0 | 0;
 }
 
 function $2037($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2034($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 21128;
  $2035($0_1 + 4 | 0 | 0, $1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $2038($0_1) {
  $0_1 = $0_1 | 0;
  return 1 | 0;
 }
 
 function $2039($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $3_1 = $0_1;
   label$2 : while (1) {
    HEAP32[$3_1 >> 2] = $1_1;
    $3_1 = $3_1 + 4 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue label$2
    }
    break label$2;
   };
  }
  return $0_1 | 0;
 }
 
 function $2040($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   label$2 : {
    if ((($0_1 - $1_1 | 0) >> 2 | 0) >>> 0 >= $2_1 >>> 0) {
     break label$2
    }
    label$3 : while (1) {
     $2_1 = $2_1 + -1 | 0;
     $3_1 = $2_1 << 2 | 0;
     HEAP32[($0_1 + $3_1 | 0) >> 2] = HEAP32[($1_1 + $3_1 | 0) >> 2] | 0;
     if ($2_1) {
      continue label$3
     }
     break label$1;
    };
   }
   if (!$2_1) {
    break label$1
   }
   $3_1 = $0_1;
   label$4 : while (1) {
    HEAP32[$3_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
    $3_1 = $3_1 + 4 | 0;
    $1_1 = $1_1 + 4 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue label$4
    }
    break label$4;
   };
  }
  return $0_1 | 0;
 }
 
 function $2041($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $12_1 = 0;
  label$1 : {
   if ($0_1 >>> 0 > 99999999 >>> 0) {
    break label$1
   }
   return $2042($1_1 | 0, $0_1 | 0) | 0 | 0;
  }
  $2_1 = ($0_1 >>> 0) / (1e8 >>> 0) | 0;
  $12_1 = $2043($1_1 | 0, $2_1 | 0) | 0;
  $0_1 = $0_1 - Math_imul($2_1, 1e8) | 0;
  $1_1 = ($0_1 >>> 0) / (1e4 >>> 0) | 0;
  return $2044($2044($12_1 | 0, $1_1 | 0) | 0 | 0, $0_1 - Math_imul($1_1, 1e4) | 0 | 0) | 0 | 0;
 }
 
 function $2042($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   if ($1_1 >>> 0 > 9999 >>> 0) {
    break label$1
   }
   return $2045($0_1 | 0, $1_1 | 0) | 0 | 0;
  }
  $2_1 = ($1_1 >>> 0) / (1e4 >>> 0) | 0;
  return $2044($2045($0_1 | 0, $2_1 | 0) | 0 | 0, $1_1 - Math_imul($2_1, 1e4) | 0 | 0) | 0 | 0;
 }
 
 function $2043($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if ($1_1 >>> 0 > 9 >>> 0) {
    break label$1
   }
   return $2046($0_1 | 0, $1_1 | 0) | 0 | 0;
  }
  return $2047($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $2044($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = ($1_1 >>> 0) / (100 >>> 0) | 0;
  return $2047($2047($0_1 | 0, $2_1 | 0) | 0 | 0, $1_1 - Math_imul($2_1, 100) | 0 | 0) | 0 | 0;
 }
 
 function $2045($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if ($1_1 >>> 0 > 99 >>> 0) {
    break label$1
   }
   return $2043($0_1 | 0, $1_1 | 0) | 0 | 0;
  }
  label$2 : {
   if ($1_1 >>> 0 > 999 >>> 0) {
    break label$2
   }
   return $2048($0_1 | 0, $1_1 | 0) | 0 | 0;
  }
  return $2044($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $2046($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP8[$0_1 >> 0] = $1_1 + 48 | 0;
  return $0_1 + 1 | 0 | 0;
 }
 
 function $2047($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAPU16[(($1_1 << 1 | 0) + 20704 | 0) >> 1] | 0;
  HEAP8[$0_1 >> 0] = $2_1;
  HEAP8[($0_1 + 1 | 0) >> 0] = $2_1 >>> 8 | 0;
  return $0_1 + 2 | 0 | 0;
 }
 
 function $2048($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = ($1_1 >>> 0) / (100 >>> 0) | 0;
  return $2047($2046($0_1 | 0, $2_1 | 0) | 0 | 0, $1_1 - Math_imul($2_1, 100) | 0 | 0) | 0 | 0;
 }
 
 function $2049($0_1) {
  $0_1 = $0_1 | 0;
  $3(20904 | 0);
  abort();
 }
 
 function $2050($0_1) {
  $0_1 = $0_1 | 0;
  $25(20904 | 0);
  abort();
 }
 
 function $2051($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, i64toi32_i32$1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $2052($1853($1_1 | 0) | 0 | 0);
  $3_1 = $2053($0_1 | 0, $2_1 + 8 | 0 | 0, $2_1 | 0) | 0;
  label$1 : {
   label$2 : {
    if ($1076($1_1 | 0) | 0) {
     break label$2
    }
    $1_1 = $1794($1_1 | 0) | 0;
    $3_1 = $1799($3_1 | 0) | 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    HEAP32[$3_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
    HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$1;
    break label$1;
   }
   $2054($0_1 | 0, $1201($1943($1_1 | 0) | 0 | 0) | 0 | 0, $1079($1_1 | 0) | 0 | 0);
  }
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $2052($0_1) {
  $0_1 = $0_1 | 0;
  $2055($0_1 | 0);
 }
 
 function $2053($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $878($1_1 | 0) | 0;
  $879($0_1 | 0) | 0;
  $2057($0_1 | 0, $2056($2_1 | 0) | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $2054($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   if (($1852($0_1 | 0) | 0) >>> 0 < $2_1 >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if ($2_1 >>> 0 > 10 >>> 0) {
      break label$3
     }
     $1341($0_1 | 0, $2_1 | 0);
     $4_1 = $1340($0_1 | 0) | 0;
     break label$2;
    }
    $4_1 = $1856($2_1 | 0) | 0;
    $5_1 = $4_1 + 1 | 0;
    $4_1 = $1858($1797($0_1 | 0) | 0 | 0, $5_1 | 0) | 0;
    $1860($0_1 | 0, $4_1 | 0);
    $1861($0_1 | 0, $5_1 | 0);
    $1339($0_1 | 0, $2_1 | 0);
   }
   $733($1862($4_1 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
   HEAP8[($3_1 + 15 | 0) >> 0] = 0;
   $1338($4_1 + $2_1 | 0 | 0, $3_1 + 15 | 0 | 0);
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $2049($0_1 | 0);
  abort();
 }
 
 function $2055($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $2056($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2057($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2056($1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $2058($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!($1076($0_1 | 0) | 0)) {
    break label$1
   }
   $1795($1797($0_1 | 0) | 0 | 0, $1337($0_1 | 0) | 0 | 0, $1077($0_1 | 0) | 0 | 0);
  }
  return $0_1 | 0;
 }
 
 function $2059($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (($0_1 | 0) == ($1_1 | 0)) {
    break label$1
   }
   $2060($0_1 | 0, $1_1 | 0);
   $0_1 = $2061($0_1 | 0, $1084($1_1 | 0) | 0 | 0, $1028($1_1 | 0) | 0 | 0) | 0;
  }
  return $0_1 | 0;
 }
 
 function $2060($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2062($0_1 | 0, $1_1 | 0);
 }
 
 function $2061($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    $4_1 = $1038($0_1 | 0) | 0;
    if ($4_1 >>> 0 < $2_1 >>> 0) {
     break label$2
    }
    $4_1 = $1862($1078($0_1 | 0) | 0 | 0) | 0;
    $2063($4_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
    HEAP8[($3_1 + 15 | 0) >> 0] = 0;
    $1338($4_1 + $2_1 | 0 | 0, $3_1 + 15 | 0 | 0);
    $1997($0_1 | 0, $2_1 | 0);
    $1960($0_1 | 0, $2_1 | 0);
    break label$1;
   }
   $5_1 = $1028($0_1 | 0) | 0;
   $2064($0_1 | 0, $4_1 | 0, $2_1 - $4_1 | 0 | 0, $5_1 | 0, 0 | 0, $5_1 | 0, $2_1 | 0, $1_1 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $2062($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $2063($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $2175($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  }
  return $0_1 | 0;
 }
 
 function $2064($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0, $9_1 = 0, $10_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  label$1 : {
   $9_1 = $1852($0_1 | 0) | 0;
   if (($9_1 + ($1_1 ^ -1 | 0) | 0) >>> 0 < $2_1 >>> 0) {
    break label$1
   }
   $10_1 = $1078($0_1 | 0) | 0;
   label$2 : {
    label$3 : {
     if ((($9_1 >>> 1 | 0) + -16 | 0) >>> 0 <= $1_1 >>> 0) {
      break label$3
     }
     HEAP32[($8_1 + 8 | 0) >> 2] = $1_1 << 1 | 0;
     HEAP32[($8_1 + 12 | 0) >> 2] = $2_1 + $1_1 | 0;
     $2_1 = $1856(HEAP32[($864($8_1 + 12 | 0 | 0, $8_1 + 8 | 0 | 0) | 0) >> 2] | 0 | 0) | 0;
     break label$2;
    }
    $2_1 = $9_1 + -1 | 0;
   }
   $9_1 = $2_1 + 1 | 0;
   $2_1 = $1858($1797($0_1 | 0) | 0 | 0, $9_1 | 0) | 0;
   $1336($0_1 | 0);
   label$4 : {
    if (!$4_1) {
     break label$4
    }
    $733($1862($2_1 | 0) | 0 | 0, $1862($10_1 | 0) | 0 | 0, $4_1 | 0) | 0;
   }
   label$5 : {
    if (!$6_1) {
     break label$5
    }
    $733(($1862($2_1 | 0) | 0) + $4_1 | 0 | 0, $7_1 | 0, $6_1 | 0) | 0;
   }
   label$6 : {
    $3_1 = $3_1 - $5_1 | 0;
    $7_1 = $3_1 - $4_1 | 0;
    if (!$7_1) {
     break label$6
    }
    $733((($1862($2_1 | 0) | 0) + $4_1 | 0) + $6_1 | 0 | 0, (($1862($10_1 | 0) | 0) + $4_1 | 0) + $5_1 | 0 | 0, $7_1 | 0) | 0;
   }
   label$7 : {
    $4_1 = $1_1 + 1 | 0;
    if (($4_1 | 0) == (11 | 0)) {
     break label$7
    }
    $1795($1797($0_1 | 0) | 0 | 0, $10_1 | 0, $4_1 | 0);
   }
   $1860($0_1 | 0, $2_1 | 0);
   $1861($0_1 | 0, $9_1 | 0);
   $4_1 = $3_1 + $6_1 | 0;
   $1339($0_1 | 0, $4_1 | 0);
   HEAP8[($8_1 + 7 | 0) >> 0] = 0;
   $1338($2_1 + $4_1 | 0 | 0, $8_1 + 7 | 0 | 0);
   global$0 = $8_1 + 16 | 0;
   return;
  }
  $2049($0_1 | 0);
  abort();
 }
 
 function $2065($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   $3_1 = $1028($0_1 | 0) | 0;
   if ($3_1 >>> 0 >= $1_1 >>> 0) {
    break label$1
   }
   $2066($0_1 | 0, $1_1 - $3_1 | 0 | 0, $2_1 | 0) | 0;
   return;
  }
  $2067($0_1 | 0, $1_1 | 0);
 }
 
 function $2066($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $5_1 = 0, $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $4_1 = $1038($0_1 | 0) | 0;
   $5_1 = $1028($0_1 | 0) | 0;
   $6_1 = $5_1 + $1_1 | 0;
   label$2 : {
    if (($4_1 - $5_1 | 0) >>> 0 >= $1_1 >>> 0) {
     break label$2
    }
    $2068($0_1 | 0, $4_1 | 0, $6_1 - $4_1 | 0 | 0, $5_1 | 0, $5_1 | 0, 0 | 0, 0 | 0);
   }
   $4_1 = $1078($0_1 | 0) | 0;
   $2069(($1862($4_1 | 0) | 0) + $5_1 | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
   $1997($0_1 | 0, $6_1 | 0);
   HEAP8[($3_1 + 15 | 0) >> 0] = 0;
   $1338($4_1 + $6_1 | 0 | 0, $3_1 + 15 | 0 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $2067($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if (!($1076($0_1 | 0) | 0)) {
     break label$2
    }
    $3_1 = $1337($0_1 | 0) | 0;
    HEAP8[($2_1 + 15 | 0) >> 0] = 0;
    $1338($3_1 + $1_1 | 0 | 0, $2_1 + 15 | 0 | 0);
    $1339($0_1 | 0, $1_1 | 0);
    break label$1;
   }
   $3_1 = $1340($0_1 | 0) | 0;
   HEAP8[($2_1 + 14 | 0) >> 0] = 0;
   $1338($3_1 + $1_1 | 0 | 0, $2_1 + 14 | 0 | 0);
   $1341($0_1 | 0, $1_1 | 0);
  }
  $1960($0_1 | 0, $1_1 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $2068($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  label$1 : {
   $8_1 = $1852($0_1 | 0) | 0;
   if (($8_1 - $1_1 | 0) >>> 0 < $2_1 >>> 0) {
    break label$1
   }
   $9_1 = $1078($0_1 | 0) | 0;
   label$2 : {
    label$3 : {
     if ((($8_1 >>> 1 | 0) + -16 | 0) >>> 0 <= $1_1 >>> 0) {
      break label$3
     }
     HEAP32[($7_1 + 8 | 0) >> 2] = $1_1 << 1 | 0;
     HEAP32[($7_1 + 12 | 0) >> 2] = $2_1 + $1_1 | 0;
     $2_1 = $1856(HEAP32[($864($7_1 + 12 | 0 | 0, $7_1 + 8 | 0 | 0) | 0) >> 2] | 0 | 0) | 0;
     break label$2;
    }
    $2_1 = $8_1 + -1 | 0;
   }
   $8_1 = $2_1 + 1 | 0;
   $2_1 = $1858($1797($0_1 | 0) | 0 | 0, $8_1 | 0) | 0;
   $1336($0_1 | 0);
   label$4 : {
    if (!$4_1) {
     break label$4
    }
    $733($1862($2_1 | 0) | 0 | 0, $1862($9_1 | 0) | 0 | 0, $4_1 | 0) | 0;
   }
   label$5 : {
    $3_1 = ($3_1 - $5_1 | 0) - $4_1 | 0;
    if (!$3_1) {
     break label$5
    }
    $733((($1862($2_1 | 0) | 0) + $4_1 | 0) + $6_1 | 0 | 0, (($1862($9_1 | 0) | 0) + $4_1 | 0) + $5_1 | 0 | 0, $3_1 | 0) | 0;
   }
   label$6 : {
    $1_1 = $1_1 + 1 | 0;
    if (($1_1 | 0) == (11 | 0)) {
     break label$6
    }
    $1795($1797($0_1 | 0) | 0 | 0, $9_1 | 0, $1_1 | 0);
   }
   $1860($0_1 | 0, $2_1 | 0);
   $1861($0_1 | 0, $8_1 | 0);
   global$0 = $7_1 + 16 | 0;
   return;
  }
  $2049($0_1 | 0);
  abort();
 }
 
 function $2069($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $2174($0_1 | 0, $740($2_1 | 0) | 0 | 0, $1_1 | 0) | 0;
  }
  return $0_1 | 0;
 }
 
 function $2070($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $5_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    $4_1 = $1038($0_1 | 0) | 0;
    $5_1 = $1028($0_1 | 0) | 0;
    if (($4_1 - $5_1 | 0) >>> 0 < $2_1 >>> 0) {
     break label$2
    }
    if (!$2_1) {
     break label$1
    }
    $4_1 = $1862($1078($0_1 | 0) | 0 | 0) | 0;
    $733($4_1 + $5_1 | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
    $2_1 = $5_1 + $2_1 | 0;
    $1997($0_1 | 0, $2_1 | 0);
    HEAP8[($3_1 + 15 | 0) >> 0] = 0;
    $1338($4_1 + $2_1 | 0 | 0, $3_1 + 15 | 0 | 0);
    break label$1;
   }
   $2064($0_1 | 0, $4_1 | 0, ($5_1 + $2_1 | 0) - $4_1 | 0 | 0, $5_1 | 0, $5_1 | 0, 0 | 0, $2_1 | 0, $1_1 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $2071($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP8[($2_1 + 15 | 0) >> 0] = $1_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       if (!($1076($0_1 | 0) | 0)) {
        break label$5
       }
       $1_1 = $1077($0_1 | 0) | 0;
       $3_1 = $1079($0_1 | 0) | 0;
       $4_1 = $1_1 + -1 | 0;
       if (($3_1 | 0) == ($4_1 | 0)) {
        break label$4
       }
       break label$2;
      }
      $3_1 = 10;
      $4_1 = 10;
      $1_1 = $1080($0_1 | 0) | 0;
      if (($1_1 | 0) != (10 | 0)) {
       break label$3
      }
     }
     $2068($0_1 | 0, $4_1 | 0, 1 | 0, $4_1 | 0, $4_1 | 0, 0 | 0, 0 | 0);
     $1_1 = $3_1;
     if ($1076($0_1 | 0) | 0) {
      break label$2
     }
    }
    $4_1 = $1340($0_1 | 0) | 0;
    $1341($0_1 | 0, $1_1 + 1 | 0 | 0);
    break label$1;
   }
   $4_1 = $1337($0_1 | 0) | 0;
   $1339($0_1 | 0, $3_1 + 1 | 0 | 0);
   $1_1 = $3_1;
  }
  $0_1 = $4_1 + $1_1 | 0;
  $1338($0_1 | 0, $2_1 + 15 | 0 | 0);
  HEAP8[($2_1 + 14 | 0) >> 0] = 0;
  $1338($0_1 + 1 | 0 | 0, $2_1 + 14 | 0 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $2072($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2061($0_1 | 0, $1_1 | 0, $863($1_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $2073($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $5_1 = 0, $4_1 = 0, $8_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   $5_1 = $1028($0_1 | 0) | 0;
   if ($5_1 >>> 0 < $1_1 >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     $6_1 = $1038($0_1 | 0) | 0;
     if (($6_1 - $5_1 | 0) >>> 0 < $3_1 >>> 0) {
      break label$3
     }
     if (!$3_1) {
      break label$2
     }
     $6_1 = $1862($1078($0_1 | 0) | 0 | 0) | 0;
     label$4 : {
      $7_1 = $5_1 - $1_1 | 0;
      if (!$7_1) {
       break label$4
      }
      $8_1 = $6_1 + $1_1 | 0;
      $2063($8_1 + $3_1 | 0 | 0, $8_1 | 0, $7_1 | 0) | 0;
      $2_1 = $8_1 >>> 0 <= $2_1 >>> 0 ? (($6_1 + $5_1 | 0) >>> 0 > $2_1 >>> 0 ? $2_1 + $3_1 | 0 : $2_1) : $2_1;
     }
     $2063($6_1 + $1_1 | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
     $3_1 = $5_1 + $3_1 | 0;
     $1997($0_1 | 0, $3_1 | 0);
     HEAP8[($4_1 + 15 | 0) >> 0] = 0;
     $1338($6_1 + $3_1 | 0 | 0, $4_1 + 15 | 0 | 0);
     break label$2;
    }
    $2064($0_1 | 0, $6_1 | 0, ($5_1 + $3_1 | 0) - $6_1 | 0 | 0, $5_1 | 0, $1_1 | 0, 0 | 0, $3_1 | 0, $2_1 | 0);
   }
   global$0 = $4_1 + 16 | 0;
   return $0_1 | 0;
  }
  $2050($0_1 | 0);
  abort();
 }
 
 function $2074($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $2073($0_1 | 0, $1_1 | 0, $2_1 | 0, $863($2_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $2075($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   if (($1852($0_1 | 0) | 0) >>> 0 < $1_1 >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if ($1_1 >>> 0 > 10 >>> 0) {
      break label$3
     }
     $1341($0_1 | 0, $1_1 | 0);
     $4_1 = $1340($0_1 | 0) | 0;
     break label$2;
    }
    $4_1 = $1856($1_1 | 0) | 0;
    $5_1 = $4_1 + 1 | 0;
    $4_1 = $1858($1797($0_1 | 0) | 0 | 0, $5_1 | 0) | 0;
    $1860($0_1 | 0, $4_1 | 0);
    $1861($0_1 | 0, $5_1 | 0);
    $1339($0_1 | 0, $1_1 | 0);
   }
   $2069($1862($4_1 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
   HEAP8[($3_1 + 15 | 0) >> 0] = 0;
   $1338($4_1 + $1_1 | 0 | 0, $3_1 + 15 | 0 | 0);
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $2049($0_1 | 0);
  abort();
 }
 
 function $2076($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   if (($1924($0_1 | 0) | 0) >>> 0 < $2_1 >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if ($2_1 >>> 0 > 1 >>> 0) {
      break label$3
     }
     $1404($0_1 | 0, $2_1 | 0);
     $4_1 = $1403($0_1 | 0) | 0;
     break label$2;
    }
    $4_1 = $1925($2_1 | 0) | 0;
    $5_1 = $4_1 + 1 | 0;
    $4_1 = $1926($1810($0_1 | 0) | 0 | 0, $5_1 | 0) | 0;
    $1927($0_1 | 0, $4_1 | 0);
    $1928($0_1 | 0, $5_1 | 0);
    $1402($0_1 | 0, $2_1 | 0);
   }
   $754($1941($4_1 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
   HEAP32[($3_1 + 12 | 0) >> 2] = 0;
   $1401($4_1 + ($2_1 << 2 | 0) | 0 | 0, $3_1 + 12 | 0 | 0);
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $2049($0_1 | 0);
  abort();
 }
 
 function $2077($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!($1230($0_1 | 0) | 0)) {
    break label$1
   }
   $1808($1810($0_1 | 0) | 0 | 0, $1400($0_1 | 0) | 0 | 0, $1813($0_1 | 0) | 0 | 0);
  }
  return $0_1 | 0;
 }
 
 function $2078($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    $4_1 = $1763($0_1 | 0) | 0;
    if ($4_1 >>> 0 < $2_1 >>> 0) {
     break label$2
    }
    $4_1 = $1941($1171($0_1 | 0) | 0 | 0) | 0;
    $2079($4_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
    HEAP32[($3_1 + 12 | 0) >> 2] = 0;
    $1401($4_1 + ($2_1 << 2 | 0) | 0 | 0, $3_1 + 12 | 0 | 0);
    $1765($0_1 | 0, $2_1 | 0);
    $1764($0_1 | 0, $2_1 | 0);
    break label$1;
   }
   $5_1 = $1092($0_1 | 0) | 0;
   $2080($0_1 | 0, $4_1 | 0, $2_1 - $4_1 | 0 | 0, $5_1 | 0, 0 | 0, $5_1 | 0, $2_1 | 0, $1_1 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $2079($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $0_1 = $2040($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  }
  return $0_1 | 0;
 }
 
 function $2080($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0, $9_1 = 0, $10_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  label$1 : {
   $9_1 = $1924($0_1 | 0) | 0;
   if (($9_1 + ($1_1 ^ -1 | 0) | 0) >>> 0 < $2_1 >>> 0) {
    break label$1
   }
   $10_1 = $1171($0_1 | 0) | 0;
   label$2 : {
    label$3 : {
     if ((($9_1 >>> 1 | 0) + -16 | 0) >>> 0 <= $1_1 >>> 0) {
      break label$3
     }
     HEAP32[($8_1 + 8 | 0) >> 2] = $1_1 << 1 | 0;
     HEAP32[($8_1 + 12 | 0) >> 2] = $2_1 + $1_1 | 0;
     $2_1 = $1925(HEAP32[($864($8_1 + 12 | 0 | 0, $8_1 + 8 | 0 | 0) | 0) >> 2] | 0 | 0) | 0;
     break label$2;
    }
    $2_1 = $9_1 + -1 | 0;
   }
   $9_1 = $2_1 + 1 | 0;
   $2_1 = $1926($1810($0_1 | 0) | 0 | 0, $9_1 | 0) | 0;
   $1399($0_1 | 0);
   label$4 : {
    if (!$4_1) {
     break label$4
    }
    $754($1941($2_1 | 0) | 0 | 0, $1941($10_1 | 0) | 0 | 0, $4_1 | 0) | 0;
   }
   label$5 : {
    if (!$6_1) {
     break label$5
    }
    $754(($1941($2_1 | 0) | 0) + ($4_1 << 2 | 0) | 0 | 0, $7_1 | 0, $6_1 | 0) | 0;
   }
   label$6 : {
    $3_1 = $3_1 - $5_1 | 0;
    $7_1 = $3_1 - $4_1 | 0;
    if (!$7_1) {
     break label$6
    }
    $4_1 = $4_1 << 2 | 0;
    $754((($1941($2_1 | 0) | 0) + $4_1 | 0) + ($6_1 << 2 | 0) | 0 | 0, (($1941($10_1 | 0) | 0) + $4_1 | 0) + ($5_1 << 2 | 0) | 0 | 0, $7_1 | 0) | 0;
   }
   label$7 : {
    $1_1 = $1_1 + 1 | 0;
    if (($1_1 | 0) == (2 | 0)) {
     break label$7
    }
    $1808($1810($0_1 | 0) | 0 | 0, $10_1 | 0, $1_1 | 0);
   }
   $1927($0_1 | 0, $2_1 | 0);
   $1928($0_1 | 0, $9_1 | 0);
   $1_1 = $3_1 + $6_1 | 0;
   $1402($0_1 | 0, $1_1 | 0);
   HEAP32[($8_1 + 4 | 0) >> 2] = 0;
   $1401($2_1 + ($1_1 << 2 | 0) | 0 | 0, $8_1 + 4 | 0 | 0);
   global$0 = $8_1 + 16 | 0;
   return;
  }
  $2049($0_1 | 0);
  abort();
 }
 
 function $2081($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  label$1 : {
   $8_1 = $1924($0_1 | 0) | 0;
   if (($8_1 - $1_1 | 0) >>> 0 < $2_1 >>> 0) {
    break label$1
   }
   $9_1 = $1171($0_1 | 0) | 0;
   label$2 : {
    label$3 : {
     if ((($8_1 >>> 1 | 0) + -16 | 0) >>> 0 <= $1_1 >>> 0) {
      break label$3
     }
     HEAP32[($7_1 + 8 | 0) >> 2] = $1_1 << 1 | 0;
     HEAP32[($7_1 + 12 | 0) >> 2] = $2_1 + $1_1 | 0;
     $2_1 = $1925(HEAP32[($864($7_1 + 12 | 0 | 0, $7_1 + 8 | 0 | 0) | 0) >> 2] | 0 | 0) | 0;
     break label$2;
    }
    $2_1 = $8_1 + -1 | 0;
   }
   $8_1 = $2_1 + 1 | 0;
   $2_1 = $1926($1810($0_1 | 0) | 0 | 0, $8_1 | 0) | 0;
   $1399($0_1 | 0);
   label$4 : {
    if (!$4_1) {
     break label$4
    }
    $754($1941($2_1 | 0) | 0 | 0, $1941($9_1 | 0) | 0 | 0, $4_1 | 0) | 0;
   }
   label$5 : {
    $3_1 = ($3_1 - $5_1 | 0) - $4_1 | 0;
    if (!$3_1) {
     break label$5
    }
    $4_1 = $4_1 << 2 | 0;
    $754((($1941($2_1 | 0) | 0) + $4_1 | 0) + ($6_1 << 2 | 0) | 0 | 0, (($1941($9_1 | 0) | 0) + $4_1 | 0) + ($5_1 << 2 | 0) | 0 | 0, $3_1 | 0) | 0;
   }
   label$6 : {
    $1_1 = $1_1 + 1 | 0;
    if (($1_1 | 0) == (2 | 0)) {
     break label$6
    }
    $1808($1810($0_1 | 0) | 0 | 0, $9_1 | 0, $1_1 | 0);
   }
   $1927($0_1 | 0, $2_1 | 0);
   $1928($0_1 | 0, $8_1 | 0);
   global$0 = $7_1 + 16 | 0;
   return;
  }
  $2049($0_1 | 0);
  abort();
 }
 
 function $2082($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $0_1 = $2039($0_1 | 0, $2_1 | 0, $1_1 | 0) | 0;
  }
  return $0_1 | 0;
 }
 
 function $2083($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $5_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    $4_1 = $1763($0_1 | 0) | 0;
    $5_1 = $1092($0_1 | 0) | 0;
    if (($4_1 - $5_1 | 0) >>> 0 < $2_1 >>> 0) {
     break label$2
    }
    if (!$2_1) {
     break label$1
    }
    $4_1 = $1941($1171($0_1 | 0) | 0 | 0) | 0;
    $754($4_1 + ($5_1 << 2 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
    $2_1 = $5_1 + $2_1 | 0;
    $1765($0_1 | 0, $2_1 | 0);
    HEAP32[($3_1 + 12 | 0) >> 2] = 0;
    $1401($4_1 + ($2_1 << 2 | 0) | 0 | 0, $3_1 + 12 | 0 | 0);
    break label$1;
   }
   $2080($0_1 | 0, $4_1 | 0, ($5_1 + $2_1 | 0) - $4_1 | 0 | 0, $5_1 | 0, $5_1 | 0, 0 | 0, $2_1 | 0, $1_1 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $2084($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       if (!($1230($0_1 | 0) | 0)) {
        break label$5
       }
       $1_1 = $1813($0_1 | 0) | 0;
       $3_1 = $1231($0_1 | 0) | 0;
       $4_1 = $1_1 + -1 | 0;
       if (($3_1 | 0) == ($4_1 | 0)) {
        break label$4
       }
       break label$2;
      }
      $3_1 = 1;
      $4_1 = 1;
      $1_1 = $1232($0_1 | 0) | 0;
      if (($1_1 | 0) != (1 | 0)) {
       break label$3
      }
     }
     $2081($0_1 | 0, $4_1 | 0, 1 | 0, $4_1 | 0, $4_1 | 0, 0 | 0, 0 | 0);
     $1_1 = $3_1;
     if ($1230($0_1 | 0) | 0) {
      break label$2
     }
    }
    $4_1 = $1403($0_1 | 0) | 0;
    $1404($0_1 | 0, $1_1 + 1 | 0 | 0);
    break label$1;
   }
   $4_1 = $1400($0_1 | 0) | 0;
   $1402($0_1 | 0, $3_1 + 1 | 0 | 0);
   $1_1 = $3_1;
  }
  $0_1 = $4_1 + ($1_1 << 2 | 0) | 0;
  $1401($0_1 | 0, $2_1 + 12 | 0 | 0);
  HEAP32[($2_1 + 8 | 0) >> 2] = 0;
  $1401($0_1 + 4 | 0 | 0, $2_1 + 8 | 0 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $2085($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2078($0_1 | 0, $1_1 | 0, $1722($1_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $2086($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   if (($1924($0_1 | 0) | 0) >>> 0 < $1_1 >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if ($1_1 >>> 0 > 1 >>> 0) {
      break label$3
     }
     $1404($0_1 | 0, $1_1 | 0);
     $4_1 = $1403($0_1 | 0) | 0;
     break label$2;
    }
    $4_1 = $1925($1_1 | 0) | 0;
    $5_1 = $4_1 + 1 | 0;
    $4_1 = $1926($1810($0_1 | 0) | 0 | 0, $5_1 | 0) | 0;
    $1927($0_1 | 0, $4_1 | 0);
    $1928($0_1 | 0, $5_1 | 0);
    $1402($0_1 | 0, $1_1 | 0);
   }
   $2082($1941($4_1 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
   HEAP32[($3_1 + 12 | 0) >> 2] = 0;
   $1401($4_1 + ($1_1 << 2 | 0) | 0 | 0, $3_1 + 12 | 0 | 0);
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $2049($0_1 | 0);
  abort();
 }
 
 function $2087($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2088($0_1 | 0, $1_1 | 0);
 }
 
 function $2088($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  $2089($2_1 + 8 | 0 | 0, $2_1 + 21 | 0 | 0, $2_1 + 32 | 0 | 0, $1_1 | 0);
  $2090($0_1 | 0, $2_1 + 21 | 0 | 0, HEAP32[($2_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $2_1 + 32 | 0;
 }
 
 function $2089($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $2091($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
 }
 
 function $2090($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $862($0_1 | 0, $3_1 + 8 | 0 | 0, $3_1 | 0) | 0;
  $2000($0_1 | 0, $1_1 | 0, $2_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $2091($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = $2092($3_1 | 0) | 0;
  label$1 : {
   if (($1_1 | 0) == ($2_1 | 0)) {
    break label$1
   }
   if (($3_1 | 0) > (-1 | 0)) {
    break label$1
   }
   HEAP8[$1_1 >> 0] = 45;
   $1_1 = $1_1 + 1 | 0;
   $4_1 = $2093($4_1 | 0) | 0;
  }
  $2094($0_1 | 0, $1_1 | 0, $2_1 | 0, $4_1 | 0);
 }
 
 function $2092($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2093($0_1) {
  $0_1 = $0_1 | 0;
  return 0 - $0_1 | 0 | 0;
 }
 
 function $2094($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $4_1 = $2_1 - $1_1 | 0;
     if (($4_1 | 0) > (9 | 0)) {
      break label$3
     }
     if (($2095($3_1 | 0) | 0 | 0) > ($4_1 | 0)) {
      break label$2
     }
    }
    HEAP32[$0_1 >> 2] = $2096($3_1 | 0, $1_1 | 0) | 0;
    $1_1 = 0;
    break label$1;
   }
   HEAP32[$0_1 >> 2] = $2_1;
   $1_1 = 61;
  }
  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
 }
 
 function $2095($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = Math_imul(32 - Math_clz32($0_1 | 1 | 0) | 0, 1233) >>> 12 | 0;
  return ($1_1 - ((HEAP32[(($1_1 << 2 | 0) + 20928 | 0) >> 2] | 0) >>> 0 > $0_1 >>> 0) | 0) + 1 | 0 | 0;
 }
 
 function $2096($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2041($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $2097($0_1) {
  $0_1 = $0_1 | 0;
  $3(20968 | 0);
  abort();
 }
 
 function $2098($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  abort();
 }
 
 function $2099($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0_1 = $2101($2100($1_1 | 0, $0_1 | 0) | 0 | 0) | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $2100($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2102($0_1 | 0, $1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $2101($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = 0;
  label$1 : {
   if ($2104($2103($1_1 + 8 | 0 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0) {
    break label$1
   }
   $2_1 = $2106($2105($0_1 | 0) | 0 | 0) | 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $2102($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = $1_1;
  HEAP32[($0_1 + 8 | 0) >> 2] = $1_1 + 1 | 0;
  return $0_1 | 0;
 }
 
 function $2103($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $2104($0_1) {
  $0_1 = $0_1 | 0;
  return $2111(HEAP32[$0_1 >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $2105($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2106($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = 0;
  label$1 : {
   label$2 : {
    $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    $2_1 = HEAPU8[$0_1 >> 0] | 0;
    if (($2_1 | 0) == (1 | 0)) {
     break label$2
    }
    if ($2_1 & 2 | 0) {
     break label$1
    }
    HEAP8[$0_1 >> 0] = 2;
    $1_1 = 1;
   }
   return $1_1 | 0;
  }
  $2098(20975 | 0, 0 | 0);
  abort();
 }
 
 function $2107($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2108($2100($1_1 | 0, $0_1 | 0) | 0 | 0);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $2108($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2109($2103($1_1 + 8 | 0 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0);
  $2110($2105($0_1 | 0) | 0 | 0);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $2109($0_1) {
  $0_1 = $0_1 | 0;
  $2112(HEAP32[$0_1 >> 2] | 0 | 0);
 }
 
 function $2110($0_1) {
  $0_1 = $0_1 | 0;
  HEAP8[(HEAP32[($0_1 + 8 | 0) >> 2] | 0) >> 0] = 1;
 }
 
 function $2111($0_1) {
  $0_1 = $0_1 | 0;
  return HEAPU8[$0_1 >> 0] | 0 | 0;
 }
 
 function $2112($0_1) {
  $0_1 = $0_1 | 0;
  HEAP8[$0_1 >> 0] = 1;
 }
 
 function $2113($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $2114() {
  return $2113(336668 | 0) | 0 | 0;
 }
 
 function $2115() {
  $2098(21029 | 0, 0 | 0);
  abort();
 }
 
 function $2116($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2117($0_1) {
  $0_1 = $0_1 | 0;
  $2032($0_1 | 0);
 }
 
 function $2118($0_1) {
  $0_1 = $0_1 | 0;
  return 21059 | 0;
 }
 
 function $2119($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 21128;
  $2120($0_1 + 4 | 0 | 0) | 0;
  $2116($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $2120($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   if (!($2038($0_1 | 0) | 0)) {
    break label$1
   }
   $1_1 = $2121(HEAP32[$0_1 >> 2] | 0 | 0) | 0;
   if (($2122($1_1 + 8 | 0 | 0) | 0 | 0) > (-1 | 0)) {
    break label$1
   }
   $2032($1_1 | 0);
  }
  return $0_1 | 0;
 }
 
 function $2121($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + -12 | 0 | 0;
 }
 
 function $2122($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = (HEAP32[$0_1 >> 2] | 0) + -1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $1_1 | 0;
 }
 
 function $2123($0_1) {
  $0_1 = $0_1 | 0;
  $2032($2119($0_1 | 0) | 0 | 0);
 }
 
 function $2124($0_1) {
  $0_1 = $0_1 | 0;
  return $2125($0_1 + 4 | 0 | 0) | 0 | 0;
 }
 
 function $2125($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $2126($0_1) {
  $0_1 = $0_1 | 0;
  $2119($0_1 | 0) | 0;
  $2032($0_1 | 0);
 }
 
 function $2127($0_1) {
  $0_1 = $0_1 | 0;
  $2119($0_1 | 0) | 0;
  $2032($0_1 | 0);
 }
 
 function $2128($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2129($0_1) {
  $0_1 = $0_1 | 0;
  $2034($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 21280;
  return $0_1 | 0;
 }
 
 function $2130($0_1) {
  $0_1 = $0_1 | 0;
  $2116($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $2131($0_1) {
  $0_1 = $0_1 | 0;
  $2032($2130($0_1 | 0) | 0 | 0);
 }
 
 function $2132($0_1) {
  $0_1 = $0_1 | 0;
  return 21292 | 0;
 }
 
 function $2133($0_1) {
  $0_1 = $0_1 | 0;
  $2128($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $2134($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $2135($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $2136($0_1) {
  $0_1 = $0_1 | 0;
  $2133($0_1 | 0) | 0;
  $2032($0_1 | 0);
 }
 
 function $2137($0_1) {
  $0_1 = $0_1 | 0;
  $2133($0_1 | 0) | 0;
  $2032($0_1 | 0);
 }
 
 function $2138($0_1) {
  $0_1 = $0_1 | 0;
  $2133($0_1 | 0) | 0;
  $2032($0_1 | 0);
 }
 
 function $2139($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if ($2_1) {
    break label$1
   }
   return $2140($0_1 | 0, $1_1 | 0) | 0 | 0;
  }
  label$2 : {
   if (($0_1 | 0) != ($1_1 | 0)) {
    break label$2
   }
   return 1 | 0;
  }
  return !($964($2141($0_1 | 0) | 0 | 0, $2141($1_1 | 0) | 0 | 0) | 0) | 0;
 }
 
 function $2140($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return (HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) | 0;
 }
 
 function $2141($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $2142($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 64 | 0;
  global$0 = $3_1;
  $4_1 = 1;
  label$1 : {
   if ($2139($0_1 | 0, $1_1 | 0, 0 | 0) | 0) {
    break label$1
   }
   $4_1 = 0;
   if (!$1_1) {
    break label$1
   }
   $4_1 = 0;
   $1_1 = $2143($1_1 | 0, 21388 | 0, 21436 | 0, 0 | 0) | 0;
   if (!$1_1) {
    break label$1
   }
   HEAP32[($3_1 + 20 | 0) >> 2] = -1;
   HEAP32[($3_1 + 16 | 0) >> 2] = $0_1;
   HEAP32[($3_1 + 12 | 0) >> 2] = 0;
   HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
   $2174($3_1 + 24 | 0 | 0, 0 | 0, 39 | 0) | 0;
   HEAP32[($3_1 + 56 | 0) >> 2] = 1;
   FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($1_1, $3_1 + 8 | 0, HEAP32[$2_1 >> 2] | 0, 1);
   label$2 : {
    $4_1 = HEAP32[($3_1 + 32 | 0) >> 2] | 0;
    if (($4_1 | 0) != (1 | 0)) {
     break label$2
    }
    HEAP32[$2_1 >> 2] = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
   }
   $4_1 = ($4_1 | 0) == (1 | 0);
  }
  global$0 = $3_1 + 64 | 0;
  return $4_1 | 0;
 }
 
 function $2143($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $6_1 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0, wasm2js_i32$6 = 0, wasm2js_i32$7 = 0, wasm2js_i32$8 = 0;
  $4_1 = global$0 - 64 | 0;
  global$0 = $4_1;
  $5_1 = HEAP32[$0_1 >> 2] | 0;
  $6_1 = HEAP32[($5_1 + -4 | 0) >> 2] | 0;
  $5_1 = HEAP32[($5_1 + -8 | 0) >> 2] | 0;
  HEAP32[($4_1 + 20 | 0) >> 2] = $3_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $2_1;
  $1_1 = 0;
  $2174($4_1 + 24 | 0 | 0, 0 | 0, 39 | 0) | 0;
  $0_1 = $0_1 + $5_1 | 0;
  label$1 : {
   label$2 : {
    if (!($2139($6_1 | 0, $2_1 | 0, 0 | 0) | 0)) {
     break label$2
    }
    HEAP32[($4_1 + 56 | 0) >> 2] = 1;
    FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($6_1, $4_1 + 8 | 0, $0_1, $0_1, 1, 0);
    $1_1 = (HEAP32[($4_1 + 32 | 0) >> 2] | 0 | 0) == (1 | 0) ? $0_1 : 0;
    break label$1;
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($6_1, $4_1 + 8 | 0, $0_1, 1, 0);
   label$3 : {
    switch (HEAP32[($4_1 + 44 | 0) >> 2] | 0 | 0) {
    case 0:
     $1_1 = (wasm2js_i32$0 = (wasm2js_i32$3 = (wasm2js_i32$6 = HEAP32[($4_1 + 28 | 0) >> 2] | 0, wasm2js_i32$7 = 0, wasm2js_i32$8 = (HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0) == (1 | 0), wasm2js_i32$8 ? wasm2js_i32$6 : wasm2js_i32$7), wasm2js_i32$4 = 0, wasm2js_i32$5 = (HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0) == (1 | 0), wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (HEAP32[($4_1 + 48 | 0) >> 2] | 0 | 0) == (1 | 0), wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
     break label$1;
    case 1:
     break label$3;
    default:
     break label$1;
    };
   }
   label$5 : {
    if ((HEAP32[($4_1 + 32 | 0) >> 2] | 0 | 0) == (1 | 0)) {
     break label$5
    }
    if (HEAP32[($4_1 + 48 | 0) >> 2] | 0) {
     break label$1
    }
    if ((HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$1
    }
    if ((HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$1
    }
   }
   $1_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  }
  global$0 = $4_1 + 64 | 0;
  return $1_1 | 0;
 }
 
 function $2144($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  label$1 : {
   $4_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
   if ($4_1) {
    break label$1
   }
   HEAP32[($1_1 + 36 | 0) >> 2] = 1;
   HEAP32[($1_1 + 24 | 0) >> 2] = $3_1;
   HEAP32[($1_1 + 16 | 0) >> 2] = $2_1;
   return;
  }
  label$2 : {
   label$3 : {
    if (($4_1 | 0) != ($2_1 | 0)) {
     break label$3
    }
    if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) != (2 | 0)) {
     break label$2
    }
    HEAP32[($1_1 + 24 | 0) >> 2] = $3_1;
    return;
   }
   HEAP8[($1_1 + 54 | 0) >> 0] = 1;
   HEAP32[($1_1 + 24 | 0) >> 2] = 2;
   HEAP32[($1_1 + 36 | 0) >> 2] = (HEAP32[($1_1 + 36 | 0) >> 2] | 0) + 1 | 0;
  }
 }
 
 function $2145($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : {
   if (!($2139($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
    break label$1
   }
   $2144($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
  }
 }
 
 function $2146($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : {
   if (!($2139($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
    break label$1
   }
   $2144($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
   return;
  }
  $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1);
 }
 
 function $2147($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $5_1 = 0, $4_1 = 0;
  $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if ($2_1) {
     break label$2
    }
    $5_1 = 0;
    break label$1;
   }
   $5_1 = $4_1 >> 8 | 0;
   if (!($4_1 & 1 | 0)) {
    break label$1
   }
   $5_1 = HEAP32[((HEAP32[$2_1 >> 2] | 0) + $5_1 | 0) >> 2] | 0;
  }
  $0_1 = HEAP32[$0_1 >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1 + $5_1 | 0, $4_1 & 2 | 0 ? $3_1 : 2);
 }
 
 function $2148($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  label$1 : {
   if (!($2139($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
    break label$1
   }
   $2144($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
   return;
  }
  $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  $5_1 = $0_1 + 16 | 0;
  $2147($5_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
  label$2 : {
   if (($4_1 | 0) < (2 | 0)) {
    break label$2
   }
   $4_1 = $5_1 + ($4_1 << 3 | 0) | 0;
   $0_1 = $0_1 + 24 | 0;
   label$3 : while (1) {
    $2147($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
    if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
     break label$2
    }
    $0_1 = $0_1 + 8 | 0;
    if ($0_1 >>> 0 < $4_1 >>> 0) {
     continue label$3
    }
    break label$3;
   };
  }
 }
 
 function $2149($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  HEAP8[($1_1 + 53 | 0) >> 0] = 1;
  label$1 : {
   if ((HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) != ($3_1 | 0)) {
    break label$1
   }
   HEAP8[($1_1 + 52 | 0) >> 0] = 1;
   label$2 : {
    $3_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
    if ($3_1) {
     break label$2
    }
    HEAP32[($1_1 + 36 | 0) >> 2] = 1;
    HEAP32[($1_1 + 24 | 0) >> 2] = $4_1;
    HEAP32[($1_1 + 16 | 0) >> 2] = $2_1;
    if (($4_1 | 0) != (1 | 0)) {
     break label$1
    }
    if ((HEAP32[($1_1 + 48 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$1
    }
    HEAP8[($1_1 + 54 | 0) >> 0] = 1;
    return;
   }
   label$3 : {
    if (($3_1 | 0) != ($2_1 | 0)) {
     break label$3
    }
    label$4 : {
     $3_1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
     if (($3_1 | 0) != (2 | 0)) {
      break label$4
     }
     HEAP32[($1_1 + 24 | 0) >> 2] = $4_1;
     $3_1 = $4_1;
    }
    if ((HEAP32[($1_1 + 48 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$1
    }
    if (($3_1 | 0) != (1 | 0)) {
     break label$1
    }
    HEAP8[($1_1 + 54 | 0) >> 0] = 1;
    return;
   }
   HEAP8[($1_1 + 54 | 0) >> 0] = 1;
   HEAP32[($1_1 + 36 | 0) >> 2] = (HEAP32[($1_1 + 36 | 0) >> 2] | 0) + 1 | 0;
  }
 }
 
 function $2150($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : {
   if ((HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
    break label$1
   }
   if ((HEAP32[($1_1 + 28 | 0) >> 2] | 0 | 0) == (1 | 0)) {
    break label$1
   }
   HEAP32[($1_1 + 28 | 0) >> 2] = $3_1;
  }
 }
 
 function $2151($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $8_1 = 0, $6_1 = 0, $7_1 = 0;
  label$1 : {
   if (!($2139($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $4_1 | 0) | 0)) {
    break label$1
   }
   $2150($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
   return;
  }
  label$2 : {
   label$3 : {
    if (!($2139($0_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0, $4_1 | 0) | 0)) {
     break label$3
    }
    label$4 : {
     label$5 : {
      if ((HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0) == ($2_1 | 0)) {
       break label$5
      }
      if ((HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
       break label$4
      }
     }
     if (($3_1 | 0) != (1 | 0)) {
      break label$2
     }
     HEAP32[($1_1 + 32 | 0) >> 2] = 1;
     return;
    }
    HEAP32[($1_1 + 32 | 0) >> 2] = $3_1;
    label$6 : {
     if ((HEAP32[($1_1 + 44 | 0) >> 2] | 0 | 0) == (4 | 0)) {
      break label$6
     }
     $5_1 = $0_1 + 16 | 0;
     $3_1 = $5_1 + ((HEAP32[($0_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0;
     $6_1 = 0;
     $7_1 = 0;
     label$7 : {
      label$8 : {
       label$9 : {
        label$10 : while (1) {
         if ($5_1 >>> 0 >= $3_1 >>> 0) {
          break label$9
         }
         HEAP16[($1_1 + 52 | 0) >> 1] = 0;
         $2152($5_1 | 0, $1_1 | 0, $2_1 | 0, $2_1 | 0, 1 | 0, $4_1 | 0);
         if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
          break label$9
         }
         label$11 : {
          if (!(HEAPU8[($1_1 + 53 | 0) >> 0] | 0)) {
           break label$11
          }
          label$12 : {
           if (!(HEAPU8[($1_1 + 52 | 0) >> 0] | 0)) {
            break label$12
           }
           $8_1 = 1;
           if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) == (1 | 0)) {
            break label$8
           }
           $6_1 = 1;
           $7_1 = 1;
           $8_1 = 1;
           if ((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 2 | 0) {
            break label$11
           }
           break label$8;
          }
          $6_1 = 1;
          $8_1 = $7_1;
          if (!((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 1 | 0)) {
           break label$8
          }
         }
         $5_1 = $5_1 + 8 | 0;
         continue label$10;
        };
       }
       $5_1 = 4;
       $8_1 = $7_1;
       if (!($6_1 & 1 | 0)) {
        break label$7
       }
      }
      $5_1 = 3;
     }
     HEAP32[($1_1 + 44 | 0) >> 2] = $5_1;
     if ($8_1 & 1 | 0) {
      break label$2
     }
    }
    HEAP32[($1_1 + 20 | 0) >> 2] = $2_1;
    HEAP32[($1_1 + 40 | 0) >> 2] = (HEAP32[($1_1 + 40 | 0) >> 2] | 0) + 1 | 0;
    if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$2
    }
    if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) != (2 | 0)) {
     break label$2
    }
    HEAP8[($1_1 + 54 | 0) >> 0] = 1;
    return;
   }
   $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   $8_1 = $0_1 + 16 | 0;
   $2153($8_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
   if (($5_1 | 0) < (2 | 0)) {
    break label$2
   }
   $8_1 = $8_1 + ($5_1 << 3 | 0) | 0;
   $5_1 = $0_1 + 24 | 0;
   label$13 : {
    label$14 : {
     $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     if ($0_1 & 2 | 0) {
      break label$14
     }
     if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
      break label$13
     }
    }
    label$15 : while (1) {
     if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
      break label$2
     }
     $2153($5_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
     $5_1 = $5_1 + 8 | 0;
     if ($5_1 >>> 0 < $8_1 >>> 0) {
      continue label$15
     }
     break label$2;
    };
   }
   label$16 : {
    if ($0_1 & 1 | 0) {
     break label$16
    }
    label$17 : while (1) {
     if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
      break label$2
     }
     if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) == (1 | 0)) {
      break label$2
     }
     $2153($5_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
     $5_1 = $5_1 + 8 | 0;
     if ($5_1 >>> 0 < $8_1 >>> 0) {
      continue label$17
     }
     break label$2;
    };
   }
   label$18 : while (1) {
    if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
     break label$2
    }
    label$19 : {
     if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
      break label$19
     }
     if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) == (1 | 0)) {
      break label$2
     }
    }
    $2153($5_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
    $5_1 = $5_1 + 8 | 0;
    if ($5_1 >>> 0 < $8_1 >>> 0) {
     continue label$18
    }
    break label$18;
   };
  }
 }
 
 function $2152($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $7_1 = $6_1 >> 8 | 0;
  label$1 : {
   if (!($6_1 & 1 | 0)) {
    break label$1
   }
   $7_1 = HEAP32[((HEAP32[$3_1 >> 2] | 0) + $7_1 | 0) >> 2] | 0;
  }
  $0_1 = HEAP32[$0_1 >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1 + $7_1 | 0, $6_1 & 2 | 0 ? $4_1 : 2, $5_1);
 }
 
 function $2153($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $6_1 = $5_1 >> 8 | 0;
  label$1 : {
   if (!($5_1 & 1 | 0)) {
    break label$1
   }
   $6_1 = HEAP32[((HEAP32[$2_1 >> 2] | 0) + $6_1 | 0) >> 2] | 0;
  }
  $0_1 = HEAP32[$0_1 >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1 + $6_1 | 0, $5_1 & 2 | 0 ? $3_1 : 2, $4_1);
 }
 
 function $2154($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  label$1 : {
   if (!($2139($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $4_1 | 0) | 0)) {
    break label$1
   }
   $2150($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
   return;
  }
  label$2 : {
   label$3 : {
    if (!($2139($0_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0, $4_1 | 0) | 0)) {
     break label$3
    }
    label$4 : {
     label$5 : {
      if ((HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0) == ($2_1 | 0)) {
       break label$5
      }
      if ((HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
       break label$4
      }
     }
     if (($3_1 | 0) != (1 | 0)) {
      break label$2
     }
     HEAP32[($1_1 + 32 | 0) >> 2] = 1;
     return;
    }
    HEAP32[($1_1 + 32 | 0) >> 2] = $3_1;
    label$6 : {
     if ((HEAP32[($1_1 + 44 | 0) >> 2] | 0 | 0) == (4 | 0)) {
      break label$6
     }
     HEAP16[($1_1 + 52 | 0) >> 1] = 0;
     $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $2_1, 1, $4_1);
     label$7 : {
      if (!(HEAPU8[($1_1 + 53 | 0) >> 0] | 0)) {
       break label$7
      }
      HEAP32[($1_1 + 44 | 0) >> 2] = 3;
      if (!(HEAPU8[($1_1 + 52 | 0) >> 0] | 0)) {
       break label$6
      }
      break label$2;
     }
     HEAP32[($1_1 + 44 | 0) >> 2] = 4;
    }
    HEAP32[($1_1 + 20 | 0) >> 2] = $2_1;
    HEAP32[($1_1 + 40 | 0) >> 2] = (HEAP32[($1_1 + 40 | 0) >> 2] | 0) + 1 | 0;
    if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$2
    }
    if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) != (2 | 0)) {
     break label$2
    }
    HEAP8[($1_1 + 54 | 0) >> 0] = 1;
    return;
   }
   $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1);
  }
 }
 
 function $2155($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  label$1 : {
   if (!($2139($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $4_1 | 0) | 0)) {
    break label$1
   }
   $2150($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
   return;
  }
  label$2 : {
   if (!($2139($0_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0, $4_1 | 0) | 0)) {
    break label$2
   }
   label$3 : {
    label$4 : {
     if ((HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0) == ($2_1 | 0)) {
      break label$4
     }
     if ((HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
      break label$3
     }
    }
    if (($3_1 | 0) != (1 | 0)) {
     break label$2
    }
    HEAP32[($1_1 + 32 | 0) >> 2] = 1;
    return;
   }
   HEAP32[($1_1 + 20 | 0) >> 2] = $2_1;
   HEAP32[($1_1 + 32 | 0) >> 2] = $3_1;
   HEAP32[($1_1 + 40 | 0) >> 2] = (HEAP32[($1_1 + 40 | 0) >> 2] | 0) + 1 | 0;
   label$5 : {
    if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$5
    }
    if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) != (2 | 0)) {
     break label$5
    }
    HEAP8[($1_1 + 54 | 0) >> 0] = 1;
   }
   HEAP32[($1_1 + 44 | 0) >> 2] = 4;
  }
 }
 
 function $2156($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $7_1 = 0, $6_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  label$1 : {
   if (!($2139($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0)) {
    break label$1
   }
   $2149($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
   return;
  }
  $6_1 = HEAPU8[($1_1 + 53 | 0) >> 0] | 0;
  $7_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  HEAP8[($1_1 + 53 | 0) >> 0] = 0;
  $8_1 = HEAPU8[($1_1 + 52 | 0) >> 0] | 0;
  HEAP8[($1_1 + 52 | 0) >> 0] = 0;
  $9_1 = $0_1 + 16 | 0;
  $2152($9_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0);
  $10_1 = HEAPU8[($1_1 + 53 | 0) >> 0] | 0;
  $6_1 = $6_1 | $10_1 | 0;
  $11_1 = HEAPU8[($1_1 + 52 | 0) >> 0] | 0;
  $8_1 = $8_1 | $11_1 | 0;
  label$2 : {
   if (($7_1 | 0) < (2 | 0)) {
    break label$2
   }
   $9_1 = $9_1 + ($7_1 << 3 | 0) | 0;
   $7_1 = $0_1 + 24 | 0;
   label$3 : while (1) {
    if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
     break label$2
    }
    label$4 : {
     label$5 : {
      if (!($11_1 & 255 | 0)) {
       break label$5
      }
      if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) == (1 | 0)) {
       break label$2
      }
      if ((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 2 | 0) {
       break label$4
      }
      break label$2;
     }
     if (!($10_1 & 255 | 0)) {
      break label$4
     }
     if (!((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 1 | 0)) {
      break label$2
     }
    }
    HEAP16[($1_1 + 52 | 0) >> 1] = 0;
    $2152($7_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0);
    $10_1 = HEAPU8[($1_1 + 53 | 0) >> 0] | 0;
    $6_1 = $10_1 | $6_1 | 0;
    $11_1 = HEAPU8[($1_1 + 52 | 0) >> 0] | 0;
    $8_1 = $11_1 | $8_1 | 0;
    $7_1 = $7_1 + 8 | 0;
    if ($7_1 >>> 0 < $9_1 >>> 0) {
     continue label$3
    }
    break label$3;
   };
  }
  HEAP8[($1_1 + 53 | 0) >> 0] = ($6_1 & 255 | 0 | 0) != (0 | 0);
  HEAP8[($1_1 + 52 | 0) >> 0] = ($8_1 & 255 | 0 | 0) != (0 | 0);
 }
 
 function $2157($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  label$1 : {
   if (!($2139($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0)) {
    break label$1
   }
   $2149($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
   return;
  }
  $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1);
 }
 
 function $2158($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  label$1 : {
   if (!($2139($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0)) {
    break label$1
   }
   $2149($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
  }
 }
 
 function $2159() {
  return 0 | 0;
 }
 
 function $2160($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $6_1 = 0, $5_1 = 0, $3_1 = 0, $8_1 = 0, $2_1 = 0, $12_1 = 0, $9_1 = 0, $7_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $10_1 = 0, $11_1 = 0, $1_1 = 0, $83_1 = 0, $96_1 = 0, $107_1 = 0, $115_1 = 0, $123_1 = 0, $217_1 = 0, $228_1 = 0, $236_1 = 0, $244_1 = 0, $279_1 = 0, $363_1 = 0, $370_1 = 0, $461_1 = 0, $472_1 = 0, $480_1 = 0, $488_1 = 0, $1205_1 = 0, $1212_1 = 0, $1334_1 = 0, $1336_1 = 0, $1406_1 = 0, $1413_1 = 0, $1654_1 = 0, $1661_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             label$12 : {
              label$13 : {
               if ($0_1 >>> 0 > 244 >>> 0) {
                break label$13
               }
               label$14 : {
                $2_1 = HEAP32[(0 + 336672 | 0) >> 2] | 0;
                $3_1 = $0_1 >>> 0 < 11 >>> 0 ? 16 : ($0_1 + 11 | 0) & -8 | 0;
                $4_1 = $3_1 >>> 3 | 0;
                $0_1 = $2_1 >>> $4_1 | 0;
                if (!($0_1 & 3 | 0)) {
                 break label$14
                }
                $3_1 = (($0_1 ^ -1 | 0) & 1 | 0) + $4_1 | 0;
                $5_1 = $3_1 << 3 | 0;
                $4_1 = HEAP32[($5_1 + 336720 | 0) >> 2] | 0;
                $0_1 = $4_1 + 8 | 0;
                label$15 : {
                 label$16 : {
                  $6_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
                  $5_1 = $5_1 + 336712 | 0;
                  if (($6_1 | 0) != ($5_1 | 0)) {
                   break label$16
                  }
                  HEAP32[(0 + 336672 | 0) >> 2] = $2_1 & (__wasm_rotl_i32(-2 | 0, $3_1 | 0) | 0) | 0;
                  break label$15;
                 }
                 HEAP32[(0 + 336688 | 0) >> 2] | 0;
                 HEAP32[($6_1 + 12 | 0) >> 2] = $5_1;
                 HEAP32[($5_1 + 8 | 0) >> 2] = $6_1;
                }
                $6_1 = $3_1 << 3 | 0;
                HEAP32[($4_1 + 4 | 0) >> 2] = $6_1 | 3 | 0;
                $4_1 = $4_1 + $6_1 | 0;
                HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 1 | 0;
                break label$1;
               }
               $7_1 = HEAP32[(0 + 336680 | 0) >> 2] | 0;
               if ($3_1 >>> 0 <= $7_1 >>> 0) {
                break label$12
               }
               label$17 : {
                if (!$0_1) {
                 break label$17
                }
                label$18 : {
                 label$19 : {
                  $83_1 = $0_1 << $4_1 | 0;
                  $0_1 = 2 << $4_1 | 0;
                  $0_1 = $83_1 & ($0_1 | (0 - $0_1 | 0) | 0) | 0;
                  $0_1 = ($0_1 & (0 - $0_1 | 0) | 0) + -1 | 0;
                  $96_1 = $0_1;
                  $0_1 = ($0_1 >>> 12 | 0) & 16 | 0;
                  $4_1 = $96_1 >>> $0_1 | 0;
                  $6_1 = ($4_1 >>> 5 | 0) & 8 | 0;
                  $107_1 = $6_1 | $0_1 | 0;
                  $0_1 = $4_1 >>> $6_1 | 0;
                  $4_1 = ($0_1 >>> 2 | 0) & 4 | 0;
                  $115_1 = $107_1 | $4_1 | 0;
                  $0_1 = $0_1 >>> $4_1 | 0;
                  $4_1 = ($0_1 >>> 1 | 0) & 2 | 0;
                  $123_1 = $115_1 | $4_1 | 0;
                  $0_1 = $0_1 >>> $4_1 | 0;
                  $4_1 = ($0_1 >>> 1 | 0) & 1 | 0;
                  $6_1 = ($123_1 | $4_1 | 0) + ($0_1 >>> $4_1 | 0) | 0;
                  $5_1 = $6_1 << 3 | 0;
                  $4_1 = HEAP32[($5_1 + 336720 | 0) >> 2] | 0;
                  $0_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
                  $5_1 = $5_1 + 336712 | 0;
                  if (($0_1 | 0) != ($5_1 | 0)) {
                   break label$19
                  }
                  $2_1 = $2_1 & (__wasm_rotl_i32(-2 | 0, $6_1 | 0) | 0) | 0;
                  HEAP32[(0 + 336672 | 0) >> 2] = $2_1;
                  break label$18;
                 }
                 HEAP32[(0 + 336688 | 0) >> 2] | 0;
                 HEAP32[($0_1 + 12 | 0) >> 2] = $5_1;
                 HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
                }
                $0_1 = $4_1 + 8 | 0;
                HEAP32[($4_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
                $5_1 = $4_1 + $3_1 | 0;
                $8_1 = $6_1 << 3 | 0;
                $6_1 = $8_1 - $3_1 | 0;
                HEAP32[($5_1 + 4 | 0) >> 2] = $6_1 | 1 | 0;
                HEAP32[($4_1 + $8_1 | 0) >> 2] = $6_1;
                label$20 : {
                 if (!$7_1) {
                  break label$20
                 }
                 $8_1 = $7_1 >>> 3 | 0;
                 $3_1 = ($8_1 << 3 | 0) + 336712 | 0;
                 $4_1 = HEAP32[(0 + 336692 | 0) >> 2] | 0;
                 label$21 : {
                  label$22 : {
                   $8_1 = 1 << $8_1 | 0;
                   if ($2_1 & $8_1 | 0) {
                    break label$22
                   }
                   HEAP32[(0 + 336672 | 0) >> 2] = $2_1 | $8_1 | 0;
                   $8_1 = $3_1;
                   break label$21;
                  }
                  $8_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
                 }
                 HEAP32[($3_1 + 8 | 0) >> 2] = $4_1;
                 HEAP32[($8_1 + 12 | 0) >> 2] = $4_1;
                 HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
                 HEAP32[($4_1 + 8 | 0) >> 2] = $8_1;
                }
                HEAP32[(0 + 336692 | 0) >> 2] = $5_1;
                HEAP32[(0 + 336680 | 0) >> 2] = $6_1;
                break label$1;
               }
               $9_1 = HEAP32[(0 + 336676 | 0) >> 2] | 0;
               if (!$9_1) {
                break label$12
               }
               $0_1 = ($9_1 & (0 - $9_1 | 0) | 0) + -1 | 0;
               $217_1 = $0_1;
               $0_1 = ($0_1 >>> 12 | 0) & 16 | 0;
               $4_1 = $217_1 >>> $0_1 | 0;
               $6_1 = ($4_1 >>> 5 | 0) & 8 | 0;
               $228_1 = $6_1 | $0_1 | 0;
               $0_1 = $4_1 >>> $6_1 | 0;
               $4_1 = ($0_1 >>> 2 | 0) & 4 | 0;
               $236_1 = $228_1 | $4_1 | 0;
               $0_1 = $0_1 >>> $4_1 | 0;
               $4_1 = ($0_1 >>> 1 | 0) & 2 | 0;
               $244_1 = $236_1 | $4_1 | 0;
               $0_1 = $0_1 >>> $4_1 | 0;
               $4_1 = ($0_1 >>> 1 | 0) & 1 | 0;
               $5_1 = HEAP32[(((($244_1 | $4_1 | 0) + ($0_1 >>> $4_1 | 0) | 0) << 2 | 0) + 336976 | 0) >> 2] | 0;
               $4_1 = ((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
               $6_1 = $5_1;
               label$23 : {
                label$24 : while (1) {
                 label$25 : {
                  $0_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
                  if ($0_1) {
                   break label$25
                  }
                  $0_1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
                  if (!$0_1) {
                   break label$23
                  }
                 }
                 $6_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
                 $279_1 = $6_1;
                 $6_1 = $6_1 >>> 0 < $4_1 >>> 0;
                 $4_1 = $6_1 ? $279_1 : $4_1;
                 $5_1 = $6_1 ? $0_1 : $5_1;
                 $6_1 = $0_1;
                 continue label$24;
                };
               }
               $10_1 = $5_1 + $3_1 | 0;
               if ($10_1 >>> 0 <= $5_1 >>> 0) {
                break label$11
               }
               $11_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
               label$26 : {
                $8_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
                if (($8_1 | 0) == ($5_1 | 0)) {
                 break label$26
                }
                label$27 : {
                 $0_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
                 if ((HEAP32[(0 + 336688 | 0) >> 2] | 0) >>> 0 > $0_1 >>> 0) {
                  break label$27
                 }
                 HEAP32[($0_1 + 12 | 0) >> 2] | 0;
                }
                HEAP32[($0_1 + 12 | 0) >> 2] = $8_1;
                HEAP32[($8_1 + 8 | 0) >> 2] = $0_1;
                break label$2;
               }
               label$28 : {
                $6_1 = $5_1 + 20 | 0;
                $0_1 = HEAP32[$6_1 >> 2] | 0;
                if ($0_1) {
                 break label$28
                }
                $0_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
                if (!$0_1) {
                 break label$10
                }
                $6_1 = $5_1 + 16 | 0;
               }
               label$29 : while (1) {
                $12_1 = $6_1;
                $8_1 = $0_1;
                $6_1 = $0_1 + 20 | 0;
                $0_1 = HEAP32[$6_1 >> 2] | 0;
                if ($0_1) {
                 continue label$29
                }
                $6_1 = $8_1 + 16 | 0;
                $0_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
                if ($0_1) {
                 continue label$29
                }
                break label$29;
               };
               HEAP32[$12_1 >> 2] = 0;
               break label$2;
              }
              $3_1 = -1;
              if ($0_1 >>> 0 > -65 >>> 0) {
               break label$12
              }
              $0_1 = $0_1 + 11 | 0;
              $3_1 = $0_1 & -8 | 0;
              $7_1 = HEAP32[(0 + 336676 | 0) >> 2] | 0;
              if (!$7_1) {
               break label$12
              }
              $12_1 = 0;
              label$30 : {
               $0_1 = $0_1 >>> 8 | 0;
               if (!$0_1) {
                break label$30
               }
               $12_1 = 31;
               if ($3_1 >>> 0 > 16777215 >>> 0) {
                break label$30
               }
               $4_1 = (($0_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
               $0_1 = $0_1 << $4_1 | 0;
               $363_1 = $0_1;
               $0_1 = (($0_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
               $6_1 = $363_1 << $0_1 | 0;
               $370_1 = $6_1;
               $6_1 = (($6_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
               $0_1 = (($370_1 << $6_1 | 0) >>> 15 | 0) - ($0_1 | $4_1 | 0 | $6_1 | 0) | 0;
               $12_1 = ($0_1 << 1 | 0 | (($3_1 >>> ($0_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
              }
              $4_1 = 0 - $3_1 | 0;
              label$31 : {
               label$32 : {
                label$33 : {
                 label$34 : {
                  $6_1 = HEAP32[(($12_1 << 2 | 0) + 336976 | 0) >> 2] | 0;
                  if ($6_1) {
                   break label$34
                  }
                  $0_1 = 0;
                  $8_1 = 0;
                  break label$33;
                 }
                 $0_1 = 0;
                 $5_1 = $3_1 << (($12_1 | 0) == (31 | 0) ? 0 : 25 - ($12_1 >>> 1 | 0) | 0) | 0;
                 $8_1 = 0;
                 label$35 : while (1) {
                  label$36 : {
                   $2_1 = ((HEAP32[($6_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
                   if ($2_1 >>> 0 >= $4_1 >>> 0) {
                    break label$36
                   }
                   $4_1 = $2_1;
                   $8_1 = $6_1;
                   if ($4_1) {
                    break label$36
                   }
                   $4_1 = 0;
                   $8_1 = $6_1;
                   $0_1 = $6_1;
                   break label$32;
                  }
                  $2_1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
                  $6_1 = HEAP32[(($6_1 + (($5_1 >>> 29 | 0) & 4 | 0) | 0) + 16 | 0) >> 2] | 0;
                  $0_1 = $2_1 ? (($2_1 | 0) == ($6_1 | 0) ? $0_1 : $2_1) : $0_1;
                  $5_1 = $5_1 << 1 | 0;
                  if ($6_1) {
                   continue label$35
                  }
                  break label$35;
                 };
                }
                label$37 : {
                 if ($0_1 | $8_1 | 0) {
                  break label$37
                 }
                 $0_1 = 2 << $12_1 | 0;
                 $0_1 = ($0_1 | (0 - $0_1 | 0) | 0) & $7_1 | 0;
                 if (!$0_1) {
                  break label$12
                 }
                 $0_1 = ($0_1 & (0 - $0_1 | 0) | 0) + -1 | 0;
                 $461_1 = $0_1;
                 $0_1 = ($0_1 >>> 12 | 0) & 16 | 0;
                 $6_1 = $461_1 >>> $0_1 | 0;
                 $5_1 = ($6_1 >>> 5 | 0) & 8 | 0;
                 $472_1 = $5_1 | $0_1 | 0;
                 $0_1 = $6_1 >>> $5_1 | 0;
                 $6_1 = ($0_1 >>> 2 | 0) & 4 | 0;
                 $480_1 = $472_1 | $6_1 | 0;
                 $0_1 = $0_1 >>> $6_1 | 0;
                 $6_1 = ($0_1 >>> 1 | 0) & 2 | 0;
                 $488_1 = $480_1 | $6_1 | 0;
                 $0_1 = $0_1 >>> $6_1 | 0;
                 $6_1 = ($0_1 >>> 1 | 0) & 1 | 0;
                 $0_1 = HEAP32[(((($488_1 | $6_1 | 0) + ($0_1 >>> $6_1 | 0) | 0) << 2 | 0) + 336976 | 0) >> 2] | 0;
                }
                if (!$0_1) {
                 break label$31
                }
               }
               label$38 : while (1) {
                $2_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
                $5_1 = $2_1 >>> 0 < $4_1 >>> 0;
                label$39 : {
                 $6_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
                 if ($6_1) {
                  break label$39
                 }
                 $6_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
                }
                $4_1 = $5_1 ? $2_1 : $4_1;
                $8_1 = $5_1 ? $0_1 : $8_1;
                $0_1 = $6_1;
                if ($0_1) {
                 continue label$38
                }
                break label$38;
               };
              }
              if (!$8_1) {
               break label$12
              }
              if ($4_1 >>> 0 >= ((HEAP32[(0 + 336680 | 0) >> 2] | 0) - $3_1 | 0) >>> 0) {
               break label$12
              }
              $12_1 = $8_1 + $3_1 | 0;
              if ($12_1 >>> 0 <= $8_1 >>> 0) {
               break label$11
              }
              $9_1 = HEAP32[($8_1 + 24 | 0) >> 2] | 0;
              label$40 : {
               $5_1 = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
               if (($5_1 | 0) == ($8_1 | 0)) {
                break label$40
               }
               label$41 : {
                $0_1 = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
                if ((HEAP32[(0 + 336688 | 0) >> 2] | 0) >>> 0 > $0_1 >>> 0) {
                 break label$41
                }
                HEAP32[($0_1 + 12 | 0) >> 2] | 0;
               }
               HEAP32[($0_1 + 12 | 0) >> 2] = $5_1;
               HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
               break label$3;
              }
              label$42 : {
               $6_1 = $8_1 + 20 | 0;
               $0_1 = HEAP32[$6_1 >> 2] | 0;
               if ($0_1) {
                break label$42
               }
               $0_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
               if (!$0_1) {
                break label$9
               }
               $6_1 = $8_1 + 16 | 0;
              }
              label$43 : while (1) {
               $2_1 = $6_1;
               $5_1 = $0_1;
               $6_1 = $0_1 + 20 | 0;
               $0_1 = HEAP32[$6_1 >> 2] | 0;
               if ($0_1) {
                continue label$43
               }
               $6_1 = $5_1 + 16 | 0;
               $0_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
               if ($0_1) {
                continue label$43
               }
               break label$43;
              };
              HEAP32[$2_1 >> 2] = 0;
              break label$3;
             }
             label$44 : {
              $0_1 = HEAP32[(0 + 336680 | 0) >> 2] | 0;
              if ($0_1 >>> 0 < $3_1 >>> 0) {
               break label$44
              }
              $4_1 = HEAP32[(0 + 336692 | 0) >> 2] | 0;
              label$45 : {
               label$46 : {
                $6_1 = $0_1 - $3_1 | 0;
                if ($6_1 >>> 0 < 16 >>> 0) {
                 break label$46
                }
                HEAP32[(0 + 336680 | 0) >> 2] = $6_1;
                $5_1 = $4_1 + $3_1 | 0;
                HEAP32[(0 + 336692 | 0) >> 2] = $5_1;
                HEAP32[($5_1 + 4 | 0) >> 2] = $6_1 | 1 | 0;
                HEAP32[($4_1 + $0_1 | 0) >> 2] = $6_1;
                HEAP32[($4_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
                break label$45;
               }
               HEAP32[(0 + 336692 | 0) >> 2] = 0;
               HEAP32[(0 + 336680 | 0) >> 2] = 0;
               HEAP32[($4_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
               $0_1 = $4_1 + $0_1 | 0;
               HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
              }
              $0_1 = $4_1 + 8 | 0;
              break label$1;
             }
             label$47 : {
              $5_1 = HEAP32[(0 + 336684 | 0) >> 2] | 0;
              if ($5_1 >>> 0 <= $3_1 >>> 0) {
               break label$47
              }
              $4_1 = $5_1 - $3_1 | 0;
              HEAP32[(0 + 336684 | 0) >> 2] = $4_1;
              $0_1 = HEAP32[(0 + 336696 | 0) >> 2] | 0;
              $6_1 = $0_1 + $3_1 | 0;
              HEAP32[(0 + 336696 | 0) >> 2] = $6_1;
              HEAP32[($6_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
              HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
              $0_1 = $0_1 + 8 | 0;
              break label$1;
             }
             label$48 : {
              label$49 : {
               if (!(HEAP32[(0 + 337144 | 0) >> 2] | 0)) {
                break label$49
               }
               $4_1 = HEAP32[(0 + 337152 | 0) >> 2] | 0;
               break label$48;
              }
              i64toi32_i32$1 = 0;
              i64toi32_i32$0 = -1;
              HEAP32[(i64toi32_i32$1 + 337156 | 0) >> 2] = -1;
              HEAP32[(i64toi32_i32$1 + 337160 | 0) >> 2] = i64toi32_i32$0;
              i64toi32_i32$1 = 0;
              i64toi32_i32$0 = 4096;
              HEAP32[(i64toi32_i32$1 + 337148 | 0) >> 2] = 4096;
              HEAP32[(i64toi32_i32$1 + 337152 | 0) >> 2] = i64toi32_i32$0;
              HEAP32[(0 + 337144 | 0) >> 2] = (($1_1 + 12 | 0) & -16 | 0) ^ 1431655768 | 0;
              HEAP32[(0 + 337164 | 0) >> 2] = 0;
              HEAP32[(0 + 337116 | 0) >> 2] = 0;
              $4_1 = 4096;
             }
             $0_1 = 0;
             $7_1 = $3_1 + 47 | 0;
             $2_1 = $4_1 + $7_1 | 0;
             $12_1 = 0 - $4_1 | 0;
             $8_1 = $2_1 & $12_1 | 0;
             if ($8_1 >>> 0 <= $3_1 >>> 0) {
              break label$1
             }
             $0_1 = 0;
             label$50 : {
              $4_1 = HEAP32[(0 + 337112 | 0) >> 2] | 0;
              if (!$4_1) {
               break label$50
              }
              $6_1 = HEAP32[(0 + 337104 | 0) >> 2] | 0;
              $9_1 = $6_1 + $8_1 | 0;
              if ($9_1 >>> 0 <= $6_1 >>> 0) {
               break label$1
              }
              if ($9_1 >>> 0 > $4_1 >>> 0) {
               break label$1
              }
             }
             if ((HEAPU8[(0 + 337116 | 0) >> 0] | 0) & 4 | 0) {
              break label$6
             }
             label$51 : {
              label$52 : {
               label$53 : {
                $4_1 = HEAP32[(0 + 336696 | 0) >> 2] | 0;
                if (!$4_1) {
                 break label$53
                }
                $0_1 = 337120;
                label$54 : while (1) {
                 label$55 : {
                  $6_1 = HEAP32[$0_1 >> 2] | 0;
                  if ($6_1 >>> 0 > $4_1 >>> 0) {
                   break label$55
                  }
                  if (($6_1 + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0) >>> 0 > $4_1 >>> 0) {
                   break label$52
                  }
                 }
                 $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
                 if ($0_1) {
                  continue label$54
                 }
                 break label$54;
                };
               }
               $5_1 = $2165(0 | 0) | 0;
               if (($5_1 | 0) == (-1 | 0)) {
                break label$7
               }
               $2_1 = $8_1;
               label$56 : {
                $0_1 = HEAP32[(0 + 337148 | 0) >> 2] | 0;
                $4_1 = $0_1 + -1 | 0;
                if (!($4_1 & $5_1 | 0)) {
                 break label$56
                }
                $2_1 = ($8_1 - $5_1 | 0) + (($4_1 + $5_1 | 0) & (0 - $0_1 | 0) | 0) | 0;
               }
               if ($2_1 >>> 0 <= $3_1 >>> 0) {
                break label$7
               }
               if ($2_1 >>> 0 > 2147483646 >>> 0) {
                break label$7
               }
               label$57 : {
                $0_1 = HEAP32[(0 + 337112 | 0) >> 2] | 0;
                if (!$0_1) {
                 break label$57
                }
                $4_1 = HEAP32[(0 + 337104 | 0) >> 2] | 0;
                $6_1 = $4_1 + $2_1 | 0;
                if ($6_1 >>> 0 <= $4_1 >>> 0) {
                 break label$7
                }
                if ($6_1 >>> 0 > $0_1 >>> 0) {
                 break label$7
                }
               }
               $0_1 = $2165($2_1 | 0) | 0;
               if (($0_1 | 0) != ($5_1 | 0)) {
                break label$51
               }
               break label$5;
              }
              $2_1 = ($2_1 - $5_1 | 0) & $12_1 | 0;
              if ($2_1 >>> 0 > 2147483646 >>> 0) {
               break label$7
              }
              $5_1 = $2165($2_1 | 0) | 0;
              if (($5_1 | 0) == ((HEAP32[$0_1 >> 2] | 0) + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0 | 0)) {
               break label$8
              }
              $0_1 = $5_1;
             }
             label$58 : {
              if (($3_1 + 48 | 0) >>> 0 <= $2_1 >>> 0) {
               break label$58
              }
              if (($0_1 | 0) == (-1 | 0)) {
               break label$58
              }
              label$59 : {
               $4_1 = HEAP32[(0 + 337152 | 0) >> 2] | 0;
               $4_1 = (($7_1 - $2_1 | 0) + $4_1 | 0) & (0 - $4_1 | 0) | 0;
               if ($4_1 >>> 0 <= 2147483646 >>> 0) {
                break label$59
               }
               $5_1 = $0_1;
               break label$5;
              }
              label$60 : {
               if (($2165($4_1 | 0) | 0 | 0) == (-1 | 0)) {
                break label$60
               }
               $2_1 = $4_1 + $2_1 | 0;
               $5_1 = $0_1;
               break label$5;
              }
              $2165(0 - $2_1 | 0 | 0) | 0;
              break label$7;
             }
             $5_1 = $0_1;
             if (($0_1 | 0) != (-1 | 0)) {
              break label$5
             }
             break label$7;
            }
            abort();
           }
           $8_1 = 0;
           break label$2;
          }
          $5_1 = 0;
          break label$3;
         }
         if (($5_1 | 0) != (-1 | 0)) {
          break label$5
         }
        }
        HEAP32[(0 + 337116 | 0) >> 2] = HEAP32[(0 + 337116 | 0) >> 2] | 0 | 4 | 0;
       }
       if ($8_1 >>> 0 > 2147483646 >>> 0) {
        break label$4
       }
       $5_1 = $2165($8_1 | 0) | 0;
       $0_1 = $2165(0 | 0) | 0;
       if ($5_1 >>> 0 >= $0_1 >>> 0) {
        break label$4
       }
       if (($5_1 | 0) == (-1 | 0)) {
        break label$4
       }
       if (($0_1 | 0) == (-1 | 0)) {
        break label$4
       }
       $2_1 = $0_1 - $5_1 | 0;
       if ($2_1 >>> 0 <= ($3_1 + 40 | 0) >>> 0) {
        break label$4
       }
      }
      $0_1 = (HEAP32[(0 + 337104 | 0) >> 2] | 0) + $2_1 | 0;
      HEAP32[(0 + 337104 | 0) >> 2] = $0_1;
      label$61 : {
       if ($0_1 >>> 0 <= (HEAP32[(0 + 337108 | 0) >> 2] | 0) >>> 0) {
        break label$61
       }
       HEAP32[(0 + 337108 | 0) >> 2] = $0_1;
      }
      label$62 : {
       label$63 : {
        label$64 : {
         label$65 : {
          $4_1 = HEAP32[(0 + 336696 | 0) >> 2] | 0;
          if (!$4_1) {
           break label$65
          }
          $0_1 = 337120;
          label$66 : while (1) {
           $6_1 = HEAP32[$0_1 >> 2] | 0;
           $8_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
           if (($5_1 | 0) == ($6_1 + $8_1 | 0 | 0)) {
            break label$64
           }
           $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
           if ($0_1) {
            continue label$66
           }
           break label$63;
          };
         }
         label$67 : {
          label$68 : {
           $0_1 = HEAP32[(0 + 336688 | 0) >> 2] | 0;
           if (!$0_1) {
            break label$68
           }
           if ($5_1 >>> 0 >= $0_1 >>> 0) {
            break label$67
           }
          }
          HEAP32[(0 + 336688 | 0) >> 2] = $5_1;
         }
         $0_1 = 0;
         HEAP32[(0 + 337124 | 0) >> 2] = $2_1;
         HEAP32[(0 + 337120 | 0) >> 2] = $5_1;
         HEAP32[(0 + 336704 | 0) >> 2] = -1;
         HEAP32[(0 + 336708 | 0) >> 2] = HEAP32[(0 + 337144 | 0) >> 2] | 0;
         HEAP32[(0 + 337132 | 0) >> 2] = 0;
         label$69 : while (1) {
          $4_1 = $0_1 << 3 | 0;
          $6_1 = $4_1 + 336712 | 0;
          HEAP32[($4_1 + 336720 | 0) >> 2] = $6_1;
          HEAP32[($4_1 + 336724 | 0) >> 2] = $6_1;
          $0_1 = $0_1 + 1 | 0;
          if (($0_1 | 0) != (32 | 0)) {
           continue label$69
          }
          break label$69;
         };
         $0_1 = $2_1 + -40 | 0;
         $4_1 = ($5_1 + 8 | 0) & 7 | 0 ? (-8 - $5_1 | 0) & 7 | 0 : 0;
         $6_1 = $0_1 - $4_1 | 0;
         HEAP32[(0 + 336684 | 0) >> 2] = $6_1;
         $4_1 = $5_1 + $4_1 | 0;
         HEAP32[(0 + 336696 | 0) >> 2] = $4_1;
         HEAP32[($4_1 + 4 | 0) >> 2] = $6_1 | 1 | 0;
         HEAP32[(($5_1 + $0_1 | 0) + 4 | 0) >> 2] = 40;
         HEAP32[(0 + 336700 | 0) >> 2] = HEAP32[(0 + 337160 | 0) >> 2] | 0;
         break label$62;
        }
        if ((HEAPU8[($0_1 + 12 | 0) >> 0] | 0) & 8 | 0) {
         break label$63
        }
        if ($5_1 >>> 0 <= $4_1 >>> 0) {
         break label$63
        }
        if ($6_1 >>> 0 > $4_1 >>> 0) {
         break label$63
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $8_1 + $2_1 | 0;
        $0_1 = ($4_1 + 8 | 0) & 7 | 0 ? (-8 - $4_1 | 0) & 7 | 0 : 0;
        $6_1 = $4_1 + $0_1 | 0;
        HEAP32[(0 + 336696 | 0) >> 2] = $6_1;
        $5_1 = (HEAP32[(0 + 336684 | 0) >> 2] | 0) + $2_1 | 0;
        $0_1 = $5_1 - $0_1 | 0;
        HEAP32[(0 + 336684 | 0) >> 2] = $0_1;
        HEAP32[($6_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
        HEAP32[(($4_1 + $5_1 | 0) + 4 | 0) >> 2] = 40;
        HEAP32[(0 + 336700 | 0) >> 2] = HEAP32[(0 + 337160 | 0) >> 2] | 0;
        break label$62;
       }
       label$70 : {
        $8_1 = HEAP32[(0 + 336688 | 0) >> 2] | 0;
        if ($5_1 >>> 0 >= $8_1 >>> 0) {
         break label$70
        }
        HEAP32[(0 + 336688 | 0) >> 2] = $5_1;
        $8_1 = $5_1;
       }
       $6_1 = $5_1 + $2_1 | 0;
       $0_1 = 337120;
       label$71 : {
        label$72 : {
         label$73 : {
          label$74 : {
           label$75 : {
            label$76 : {
             label$77 : {
              label$78 : while (1) {
               if ((HEAP32[$0_1 >> 2] | 0 | 0) == ($6_1 | 0)) {
                break label$77
               }
               $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
               if ($0_1) {
                continue label$78
               }
               break label$76;
              };
             }
             if (!((HEAPU8[($0_1 + 12 | 0) >> 0] | 0) & 8 | 0)) {
              break label$75
             }
            }
            $0_1 = 337120;
            label$79 : while (1) {
             label$80 : {
              $6_1 = HEAP32[$0_1 >> 2] | 0;
              if ($6_1 >>> 0 > $4_1 >>> 0) {
               break label$80
              }
              $6_1 = $6_1 + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0;
              if ($6_1 >>> 0 > $4_1 >>> 0) {
               break label$74
              }
             }
             $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
             continue label$79;
            };
           }
           HEAP32[$0_1 >> 2] = $5_1;
           HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + $2_1 | 0;
           $12_1 = $5_1 + (($5_1 + 8 | 0) & 7 | 0 ? (-8 - $5_1 | 0) & 7 | 0 : 0) | 0;
           HEAP32[($12_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
           $5_1 = $6_1 + (($6_1 + 8 | 0) & 7 | 0 ? (-8 - $6_1 | 0) & 7 | 0 : 0) | 0;
           $0_1 = ($5_1 - $12_1 | 0) - $3_1 | 0;
           $6_1 = $12_1 + $3_1 | 0;
           label$81 : {
            if (($4_1 | 0) != ($5_1 | 0)) {
             break label$81
            }
            HEAP32[(0 + 336696 | 0) >> 2] = $6_1;
            $0_1 = (HEAP32[(0 + 336684 | 0) >> 2] | 0) + $0_1 | 0;
            HEAP32[(0 + 336684 | 0) >> 2] = $0_1;
            HEAP32[($6_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
            break label$72;
           }
           label$82 : {
            if ((HEAP32[(0 + 336692 | 0) >> 2] | 0 | 0) != ($5_1 | 0)) {
             break label$82
            }
            HEAP32[(0 + 336692 | 0) >> 2] = $6_1;
            $0_1 = (HEAP32[(0 + 336680 | 0) >> 2] | 0) + $0_1 | 0;
            HEAP32[(0 + 336680 | 0) >> 2] = $0_1;
            HEAP32[($6_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
            HEAP32[($6_1 + $0_1 | 0) >> 2] = $0_1;
            break label$72;
           }
           label$83 : {
            $4_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
            if (($4_1 & 3 | 0 | 0) != (1 | 0)) {
             break label$83
            }
            $7_1 = $4_1 & -8 | 0;
            label$84 : {
             label$85 : {
              if ($4_1 >>> 0 > 255 >>> 0) {
               break label$85
              }
              $3_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
              label$86 : {
               $2_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
               $9_1 = $4_1 >>> 3 | 0;
               $4_1 = ($9_1 << 3 | 0) + 336712 | 0;
               if (($2_1 | 0) == ($4_1 | 0)) {
                break label$86
               }
              }
              label$87 : {
               if (($3_1 | 0) != ($2_1 | 0)) {
                break label$87
               }
               HEAP32[(0 + 336672 | 0) >> 2] = (HEAP32[(0 + 336672 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $9_1 | 0) | 0) | 0;
               break label$84;
              }
              label$88 : {
               if (($3_1 | 0) == ($4_1 | 0)) {
                break label$88
               }
              }
              HEAP32[($2_1 + 12 | 0) >> 2] = $3_1;
              HEAP32[($3_1 + 8 | 0) >> 2] = $2_1;
              break label$84;
             }
             $9_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
             label$89 : {
              label$90 : {
               $2_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
               if (($2_1 | 0) == ($5_1 | 0)) {
                break label$90
               }
               label$91 : {
                $4_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
                if ($8_1 >>> 0 > $4_1 >>> 0) {
                 break label$91
                }
                HEAP32[($4_1 + 12 | 0) >> 2] | 0;
               }
               HEAP32[($4_1 + 12 | 0) >> 2] = $2_1;
               HEAP32[($2_1 + 8 | 0) >> 2] = $4_1;
               break label$89;
              }
              label$92 : {
               $4_1 = $5_1 + 20 | 0;
               $3_1 = HEAP32[$4_1 >> 2] | 0;
               if ($3_1) {
                break label$92
               }
               $4_1 = $5_1 + 16 | 0;
               $3_1 = HEAP32[$4_1 >> 2] | 0;
               if ($3_1) {
                break label$92
               }
               $2_1 = 0;
               break label$89;
              }
              label$93 : while (1) {
               $8_1 = $4_1;
               $2_1 = $3_1;
               $4_1 = $3_1 + 20 | 0;
               $3_1 = HEAP32[$4_1 >> 2] | 0;
               if ($3_1) {
                continue label$93
               }
               $4_1 = $2_1 + 16 | 0;
               $3_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
               if ($3_1) {
                continue label$93
               }
               break label$93;
              };
              HEAP32[$8_1 >> 2] = 0;
             }
             if (!$9_1) {
              break label$84
             }
             label$94 : {
              label$95 : {
               $3_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
               $4_1 = ($3_1 << 2 | 0) + 336976 | 0;
               if ((HEAP32[$4_1 >> 2] | 0 | 0) != ($5_1 | 0)) {
                break label$95
               }
               HEAP32[$4_1 >> 2] = $2_1;
               if ($2_1) {
                break label$94
               }
               HEAP32[(0 + 336676 | 0) >> 2] = (HEAP32[(0 + 336676 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $3_1 | 0) | 0) | 0;
               break label$84;
              }
              HEAP32[($9_1 + ((HEAP32[($9_1 + 16 | 0) >> 2] | 0 | 0) == ($5_1 | 0) ? 16 : 20) | 0) >> 2] = $2_1;
              if (!$2_1) {
               break label$84
              }
             }
             HEAP32[($2_1 + 24 | 0) >> 2] = $9_1;
             label$96 : {
              $4_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
              if (!$4_1) {
               break label$96
              }
              HEAP32[($2_1 + 16 | 0) >> 2] = $4_1;
              HEAP32[($4_1 + 24 | 0) >> 2] = $2_1;
             }
             $4_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
             if (!$4_1) {
              break label$84
             }
             HEAP32[($2_1 + 20 | 0) >> 2] = $4_1;
             HEAP32[($4_1 + 24 | 0) >> 2] = $2_1;
            }
            $0_1 = $7_1 + $0_1 | 0;
            $5_1 = $5_1 + $7_1 | 0;
           }
           HEAP32[($5_1 + 4 | 0) >> 2] = (HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -2 | 0;
           HEAP32[($6_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
           HEAP32[($6_1 + $0_1 | 0) >> 2] = $0_1;
           label$97 : {
            if ($0_1 >>> 0 > 255 >>> 0) {
             break label$97
            }
            $4_1 = $0_1 >>> 3 | 0;
            $0_1 = ($4_1 << 3 | 0) + 336712 | 0;
            label$98 : {
             label$99 : {
              $3_1 = HEAP32[(0 + 336672 | 0) >> 2] | 0;
              $4_1 = 1 << $4_1 | 0;
              if ($3_1 & $4_1 | 0) {
               break label$99
              }
              HEAP32[(0 + 336672 | 0) >> 2] = $3_1 | $4_1 | 0;
              $4_1 = $0_1;
              break label$98;
             }
             $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
            }
            HEAP32[($0_1 + 8 | 0) >> 2] = $6_1;
            HEAP32[($4_1 + 12 | 0) >> 2] = $6_1;
            HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
            HEAP32[($6_1 + 8 | 0) >> 2] = $4_1;
            break label$72;
           }
           $4_1 = 0;
           label$100 : {
            $3_1 = $0_1 >>> 8 | 0;
            if (!$3_1) {
             break label$100
            }
            $4_1 = 31;
            if ($0_1 >>> 0 > 16777215 >>> 0) {
             break label$100
            }
            $4_1 = (($3_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
            $3_1 = $3_1 << $4_1 | 0;
            $1205_1 = $3_1;
            $3_1 = (($3_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
            $5_1 = $1205_1 << $3_1 | 0;
            $1212_1 = $5_1;
            $5_1 = (($5_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
            $4_1 = (($1212_1 << $5_1 | 0) >>> 15 | 0) - ($3_1 | $4_1 | 0 | $5_1 | 0) | 0;
            $4_1 = ($4_1 << 1 | 0 | (($0_1 >>> ($4_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
           }
           HEAP32[($6_1 + 28 | 0) >> 2] = $4_1;
           i64toi32_i32$1 = $6_1;
           i64toi32_i32$0 = 0;
           HEAP32[($6_1 + 16 | 0) >> 2] = 0;
           HEAP32[($6_1 + 20 | 0) >> 2] = i64toi32_i32$0;
           $3_1 = ($4_1 << 2 | 0) + 336976 | 0;
           label$101 : {
            label$102 : {
             $5_1 = HEAP32[(0 + 336676 | 0) >> 2] | 0;
             $8_1 = 1 << $4_1 | 0;
             if ($5_1 & $8_1 | 0) {
              break label$102
             }
             HEAP32[(0 + 336676 | 0) >> 2] = $5_1 | $8_1 | 0;
             HEAP32[$3_1 >> 2] = $6_1;
             HEAP32[($6_1 + 24 | 0) >> 2] = $3_1;
             break label$101;
            }
            $4_1 = $0_1 << (($4_1 | 0) == (31 | 0) ? 0 : 25 - ($4_1 >>> 1 | 0) | 0) | 0;
            $5_1 = HEAP32[$3_1 >> 2] | 0;
            label$103 : while (1) {
             $3_1 = $5_1;
             if (((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($0_1 | 0)) {
              break label$73
             }
             $5_1 = $4_1 >>> 29 | 0;
             $4_1 = $4_1 << 1 | 0;
             $8_1 = ($3_1 + ($5_1 & 4 | 0) | 0) + 16 | 0;
             $5_1 = HEAP32[$8_1 >> 2] | 0;
             if ($5_1) {
              continue label$103
             }
             break label$103;
            };
            HEAP32[$8_1 >> 2] = $6_1;
            HEAP32[($6_1 + 24 | 0) >> 2] = $3_1;
           }
           HEAP32[($6_1 + 12 | 0) >> 2] = $6_1;
           HEAP32[($6_1 + 8 | 0) >> 2] = $6_1;
           break label$72;
          }
          $0_1 = $2_1 + -40 | 0;
          $8_1 = ($5_1 + 8 | 0) & 7 | 0 ? (-8 - $5_1 | 0) & 7 | 0 : 0;
          $12_1 = $0_1 - $8_1 | 0;
          HEAP32[(0 + 336684 | 0) >> 2] = $12_1;
          $8_1 = $5_1 + $8_1 | 0;
          HEAP32[(0 + 336696 | 0) >> 2] = $8_1;
          HEAP32[($8_1 + 4 | 0) >> 2] = $12_1 | 1 | 0;
          HEAP32[(($5_1 + $0_1 | 0) + 4 | 0) >> 2] = 40;
          HEAP32[(0 + 336700 | 0) >> 2] = HEAP32[(0 + 337160 | 0) >> 2] | 0;
          $0_1 = ($6_1 + (($6_1 + -39 | 0) & 7 | 0 ? (39 - $6_1 | 0) & 7 | 0 : 0) | 0) + -47 | 0;
          $8_1 = $0_1 >>> 0 < ($4_1 + 16 | 0) >>> 0 ? $4_1 : $0_1;
          HEAP32[($8_1 + 4 | 0) >> 2] = 27;
          i64toi32_i32$2 = 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 337128 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 337132 | 0) >> 2] | 0;
          $1334_1 = i64toi32_i32$0;
          i64toi32_i32$0 = $8_1 + 16 | 0;
          HEAP32[i64toi32_i32$0 >> 2] = $1334_1;
          HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
          i64toi32_i32$2 = 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 337120 | 0) >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 337124 | 0) >> 2] | 0;
          $1336_1 = i64toi32_i32$1;
          i64toi32_i32$1 = $8_1;
          HEAP32[($8_1 + 8 | 0) >> 2] = $1336_1;
          HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$0;
          HEAP32[(0 + 337128 | 0) >> 2] = $8_1 + 8 | 0;
          HEAP32[(0 + 337124 | 0) >> 2] = $2_1;
          HEAP32[(0 + 337120 | 0) >> 2] = $5_1;
          HEAP32[(0 + 337132 | 0) >> 2] = 0;
          $0_1 = $8_1 + 24 | 0;
          label$104 : while (1) {
           HEAP32[($0_1 + 4 | 0) >> 2] = 7;
           $5_1 = $0_1 + 8 | 0;
           $0_1 = $0_1 + 4 | 0;
           if ($6_1 >>> 0 > $5_1 >>> 0) {
            continue label$104
           }
           break label$104;
          };
          if (($8_1 | 0) == ($4_1 | 0)) {
           break label$62
          }
          HEAP32[($8_1 + 4 | 0) >> 2] = (HEAP32[($8_1 + 4 | 0) >> 2] | 0) & -2 | 0;
          $2_1 = $8_1 - $4_1 | 0;
          HEAP32[($4_1 + 4 | 0) >> 2] = $2_1 | 1 | 0;
          HEAP32[$8_1 >> 2] = $2_1;
          label$105 : {
           if ($2_1 >>> 0 > 255 >>> 0) {
            break label$105
           }
           $6_1 = $2_1 >>> 3 | 0;
           $0_1 = ($6_1 << 3 | 0) + 336712 | 0;
           label$106 : {
            label$107 : {
             $5_1 = HEAP32[(0 + 336672 | 0) >> 2] | 0;
             $6_1 = 1 << $6_1 | 0;
             if ($5_1 & $6_1 | 0) {
              break label$107
             }
             HEAP32[(0 + 336672 | 0) >> 2] = $5_1 | $6_1 | 0;
             $6_1 = $0_1;
             break label$106;
            }
            $6_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
           }
           HEAP32[($0_1 + 8 | 0) >> 2] = $4_1;
           HEAP32[($6_1 + 12 | 0) >> 2] = $4_1;
           HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
           HEAP32[($4_1 + 8 | 0) >> 2] = $6_1;
           break label$62;
          }
          $0_1 = 0;
          label$108 : {
           $6_1 = $2_1 >>> 8 | 0;
           if (!$6_1) {
            break label$108
           }
           $0_1 = 31;
           if ($2_1 >>> 0 > 16777215 >>> 0) {
            break label$108
           }
           $0_1 = (($6_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
           $6_1 = $6_1 << $0_1 | 0;
           $1406_1 = $6_1;
           $6_1 = (($6_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
           $5_1 = $1406_1 << $6_1 | 0;
           $1413_1 = $5_1;
           $5_1 = (($5_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
           $0_1 = (($1413_1 << $5_1 | 0) >>> 15 | 0) - ($6_1 | $0_1 | 0 | $5_1 | 0) | 0;
           $0_1 = ($0_1 << 1 | 0 | (($2_1 >>> ($0_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
          }
          i64toi32_i32$1 = $4_1;
          i64toi32_i32$0 = 0;
          HEAP32[($4_1 + 16 | 0) >> 2] = 0;
          HEAP32[($4_1 + 20 | 0) >> 2] = i64toi32_i32$0;
          HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
          $6_1 = ($0_1 << 2 | 0) + 336976 | 0;
          label$109 : {
           label$110 : {
            $5_1 = HEAP32[(0 + 336676 | 0) >> 2] | 0;
            $8_1 = 1 << $0_1 | 0;
            if ($5_1 & $8_1 | 0) {
             break label$110
            }
            HEAP32[(0 + 336676 | 0) >> 2] = $5_1 | $8_1 | 0;
            HEAP32[$6_1 >> 2] = $4_1;
            HEAP32[($4_1 + 24 | 0) >> 2] = $6_1;
            break label$109;
           }
           $0_1 = $2_1 << (($0_1 | 0) == (31 | 0) ? 0 : 25 - ($0_1 >>> 1 | 0) | 0) | 0;
           $5_1 = HEAP32[$6_1 >> 2] | 0;
           label$111 : while (1) {
            $6_1 = $5_1;
            if (((HEAP32[($6_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($2_1 | 0)) {
             break label$71
            }
            $5_1 = $0_1 >>> 29 | 0;
            $0_1 = $0_1 << 1 | 0;
            $8_1 = ($6_1 + ($5_1 & 4 | 0) | 0) + 16 | 0;
            $5_1 = HEAP32[$8_1 >> 2] | 0;
            if ($5_1) {
             continue label$111
            }
            break label$111;
           };
           HEAP32[$8_1 >> 2] = $4_1;
           HEAP32[($4_1 + 24 | 0) >> 2] = $6_1;
          }
          HEAP32[($4_1 + 12 | 0) >> 2] = $4_1;
          HEAP32[($4_1 + 8 | 0) >> 2] = $4_1;
          break label$62;
         }
         $0_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
         HEAP32[($0_1 + 12 | 0) >> 2] = $6_1;
         HEAP32[($3_1 + 8 | 0) >> 2] = $6_1;
         HEAP32[($6_1 + 24 | 0) >> 2] = 0;
         HEAP32[($6_1 + 12 | 0) >> 2] = $3_1;
         HEAP32[($6_1 + 8 | 0) >> 2] = $0_1;
        }
        $0_1 = $12_1 + 8 | 0;
        break label$1;
       }
       $0_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
       HEAP32[($0_1 + 12 | 0) >> 2] = $4_1;
       HEAP32[($6_1 + 8 | 0) >> 2] = $4_1;
       HEAP32[($4_1 + 24 | 0) >> 2] = 0;
       HEAP32[($4_1 + 12 | 0) >> 2] = $6_1;
       HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
      }
      $0_1 = HEAP32[(0 + 336684 | 0) >> 2] | 0;
      if ($0_1 >>> 0 <= $3_1 >>> 0) {
       break label$4
      }
      $4_1 = $0_1 - $3_1 | 0;
      HEAP32[(0 + 336684 | 0) >> 2] = $4_1;
      $0_1 = HEAP32[(0 + 336696 | 0) >> 2] | 0;
      $6_1 = $0_1 + $3_1 | 0;
      HEAP32[(0 + 336696 | 0) >> 2] = $6_1;
      HEAP32[($6_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
      HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
      $0_1 = $0_1 + 8 | 0;
      break label$1;
     }
     HEAP32[($587() | 0) >> 2] = 48;
     $0_1 = 0;
     break label$1;
    }
    label$112 : {
     if (!$9_1) {
      break label$112
     }
     label$113 : {
      label$114 : {
       $6_1 = HEAP32[($8_1 + 28 | 0) >> 2] | 0;
       $0_1 = ($6_1 << 2 | 0) + 336976 | 0;
       if (($8_1 | 0) != (HEAP32[$0_1 >> 2] | 0 | 0)) {
        break label$114
       }
       HEAP32[$0_1 >> 2] = $5_1;
       if ($5_1) {
        break label$113
       }
       $7_1 = $7_1 & (__wasm_rotl_i32(-2 | 0, $6_1 | 0) | 0) | 0;
       HEAP32[(0 + 336676 | 0) >> 2] = $7_1;
       break label$112;
      }
      HEAP32[($9_1 + ((HEAP32[($9_1 + 16 | 0) >> 2] | 0 | 0) == ($8_1 | 0) ? 16 : 20) | 0) >> 2] = $5_1;
      if (!$5_1) {
       break label$112
      }
     }
     HEAP32[($5_1 + 24 | 0) >> 2] = $9_1;
     label$115 : {
      $0_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
      if (!$0_1) {
       break label$115
      }
      HEAP32[($5_1 + 16 | 0) >> 2] = $0_1;
      HEAP32[($0_1 + 24 | 0) >> 2] = $5_1;
     }
     $0_1 = HEAP32[($8_1 + 20 | 0) >> 2] | 0;
     if (!$0_1) {
      break label$112
     }
     HEAP32[($5_1 + 20 | 0) >> 2] = $0_1;
     HEAP32[($0_1 + 24 | 0) >> 2] = $5_1;
    }
    label$116 : {
     label$117 : {
      if ($4_1 >>> 0 > 15 >>> 0) {
       break label$117
      }
      $0_1 = $4_1 + $3_1 | 0;
      HEAP32[($8_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
      $0_1 = $8_1 + $0_1 | 0;
      HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
      break label$116;
     }
     HEAP32[($8_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
     HEAP32[($12_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
     HEAP32[($12_1 + $4_1 | 0) >> 2] = $4_1;
     label$118 : {
      if ($4_1 >>> 0 > 255 >>> 0) {
       break label$118
      }
      $4_1 = $4_1 >>> 3 | 0;
      $0_1 = ($4_1 << 3 | 0) + 336712 | 0;
      label$119 : {
       label$120 : {
        $6_1 = HEAP32[(0 + 336672 | 0) >> 2] | 0;
        $4_1 = 1 << $4_1 | 0;
        if ($6_1 & $4_1 | 0) {
         break label$120
        }
        HEAP32[(0 + 336672 | 0) >> 2] = $6_1 | $4_1 | 0;
        $4_1 = $0_1;
        break label$119;
       }
       $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
      }
      HEAP32[($0_1 + 8 | 0) >> 2] = $12_1;
      HEAP32[($4_1 + 12 | 0) >> 2] = $12_1;
      HEAP32[($12_1 + 12 | 0) >> 2] = $0_1;
      HEAP32[($12_1 + 8 | 0) >> 2] = $4_1;
      break label$116;
     }
     label$121 : {
      label$122 : {
       $6_1 = $4_1 >>> 8 | 0;
       if ($6_1) {
        break label$122
       }
       $0_1 = 0;
       break label$121;
      }
      $0_1 = 31;
      if ($4_1 >>> 0 > 16777215 >>> 0) {
       break label$121
      }
      $0_1 = (($6_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
      $6_1 = $6_1 << $0_1 | 0;
      $1654_1 = $6_1;
      $6_1 = (($6_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
      $3_1 = $1654_1 << $6_1 | 0;
      $1661_1 = $3_1;
      $3_1 = (($3_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
      $0_1 = (($1661_1 << $3_1 | 0) >>> 15 | 0) - ($6_1 | $0_1 | 0 | $3_1 | 0) | 0;
      $0_1 = ($0_1 << 1 | 0 | (($4_1 >>> ($0_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
     }
     HEAP32[($12_1 + 28 | 0) >> 2] = $0_1;
     i64toi32_i32$1 = $12_1;
     i64toi32_i32$0 = 0;
     HEAP32[($12_1 + 16 | 0) >> 2] = 0;
     HEAP32[($12_1 + 20 | 0) >> 2] = i64toi32_i32$0;
     $6_1 = ($0_1 << 2 | 0) + 336976 | 0;
     label$123 : {
      label$124 : {
       label$125 : {
        $3_1 = 1 << $0_1 | 0;
        if ($7_1 & $3_1 | 0) {
         break label$125
        }
        HEAP32[(0 + 336676 | 0) >> 2] = $7_1 | $3_1 | 0;
        HEAP32[$6_1 >> 2] = $12_1;
        HEAP32[($12_1 + 24 | 0) >> 2] = $6_1;
        break label$124;
       }
       $0_1 = $4_1 << (($0_1 | 0) == (31 | 0) ? 0 : 25 - ($0_1 >>> 1 | 0) | 0) | 0;
       $3_1 = HEAP32[$6_1 >> 2] | 0;
       label$126 : while (1) {
        $6_1 = $3_1;
        if (((HEAP32[($6_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($4_1 | 0)) {
         break label$123
        }
        $3_1 = $0_1 >>> 29 | 0;
        $0_1 = $0_1 << 1 | 0;
        $5_1 = ($6_1 + ($3_1 & 4 | 0) | 0) + 16 | 0;
        $3_1 = HEAP32[$5_1 >> 2] | 0;
        if ($3_1) {
         continue label$126
        }
        break label$126;
       };
       HEAP32[$5_1 >> 2] = $12_1;
       HEAP32[($12_1 + 24 | 0) >> 2] = $6_1;
      }
      HEAP32[($12_1 + 12 | 0) >> 2] = $12_1;
      HEAP32[($12_1 + 8 | 0) >> 2] = $12_1;
      break label$116;
     }
     $0_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
     HEAP32[($0_1 + 12 | 0) >> 2] = $12_1;
     HEAP32[($6_1 + 8 | 0) >> 2] = $12_1;
     HEAP32[($12_1 + 24 | 0) >> 2] = 0;
     HEAP32[($12_1 + 12 | 0) >> 2] = $6_1;
     HEAP32[($12_1 + 8 | 0) >> 2] = $0_1;
    }
    $0_1 = $8_1 + 8 | 0;
    break label$1;
   }
   label$127 : {
    if (!$11_1) {
     break label$127
    }
    label$128 : {
     label$129 : {
      $6_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
      $0_1 = ($6_1 << 2 | 0) + 336976 | 0;
      if (($5_1 | 0) != (HEAP32[$0_1 >> 2] | 0 | 0)) {
       break label$129
      }
      HEAP32[$0_1 >> 2] = $8_1;
      if ($8_1) {
       break label$128
      }
      HEAP32[(0 + 336676 | 0) >> 2] = $9_1 & (__wasm_rotl_i32(-2 | 0, $6_1 | 0) | 0) | 0;
      break label$127;
     }
     HEAP32[($11_1 + ((HEAP32[($11_1 + 16 | 0) >> 2] | 0 | 0) == ($5_1 | 0) ? 16 : 20) | 0) >> 2] = $8_1;
     if (!$8_1) {
      break label$127
     }
    }
    HEAP32[($8_1 + 24 | 0) >> 2] = $11_1;
    label$130 : {
     $0_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
     if (!$0_1) {
      break label$130
     }
     HEAP32[($8_1 + 16 | 0) >> 2] = $0_1;
     HEAP32[($0_1 + 24 | 0) >> 2] = $8_1;
    }
    $0_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
    if (!$0_1) {
     break label$127
    }
    HEAP32[($8_1 + 20 | 0) >> 2] = $0_1;
    HEAP32[($0_1 + 24 | 0) >> 2] = $8_1;
   }
   label$131 : {
    label$132 : {
     if ($4_1 >>> 0 > 15 >>> 0) {
      break label$132
     }
     $0_1 = $4_1 + $3_1 | 0;
     HEAP32[($5_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
     $0_1 = $5_1 + $0_1 | 0;
     HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
     break label$131;
    }
    HEAP32[($5_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
    HEAP32[($10_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
    HEAP32[($10_1 + $4_1 | 0) >> 2] = $4_1;
    label$133 : {
     if (!$7_1) {
      break label$133
     }
     $3_1 = $7_1 >>> 3 | 0;
     $6_1 = ($3_1 << 3 | 0) + 336712 | 0;
     $0_1 = HEAP32[(0 + 336692 | 0) >> 2] | 0;
     label$134 : {
      label$135 : {
       $3_1 = 1 << $3_1 | 0;
       if ($3_1 & $2_1 | 0) {
        break label$135
       }
       HEAP32[(0 + 336672 | 0) >> 2] = $3_1 | $2_1 | 0;
       $3_1 = $6_1;
       break label$134;
      }
      $3_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
     }
     HEAP32[($6_1 + 8 | 0) >> 2] = $0_1;
     HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
     HEAP32[($0_1 + 12 | 0) >> 2] = $6_1;
     HEAP32[($0_1 + 8 | 0) >> 2] = $3_1;
    }
    HEAP32[(0 + 336692 | 0) >> 2] = $10_1;
    HEAP32[(0 + 336680 | 0) >> 2] = $4_1;
   }
   $0_1 = $5_1 + 8 | 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $2161($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $5_1 = 0, $1_1 = 0, $4_1 = 0, $3_1 = 0, $7_1 = 0, $6_1 = 0, $408_1 = 0, $415_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   $1_1 = $0_1 + -8 | 0;
   $2_1 = HEAP32[($0_1 + -4 | 0) >> 2] | 0;
   $0_1 = $2_1 & -8 | 0;
   $3_1 = $1_1 + $0_1 | 0;
   label$2 : {
    if ($2_1 & 1 | 0) {
     break label$2
    }
    if (!($2_1 & 3 | 0)) {
     break label$1
    }
    $2_1 = HEAP32[$1_1 >> 2] | 0;
    $1_1 = $1_1 - $2_1 | 0;
    $4_1 = HEAP32[(0 + 336688 | 0) >> 2] | 0;
    if ($1_1 >>> 0 < $4_1 >>> 0) {
     break label$1
    }
    $0_1 = $2_1 + $0_1 | 0;
    label$3 : {
     if ((HEAP32[(0 + 336692 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
      break label$3
     }
     label$4 : {
      if ($2_1 >>> 0 > 255 >>> 0) {
       break label$4
      }
      $5_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
      label$5 : {
       $6_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
       $7_1 = $2_1 >>> 3 | 0;
       $2_1 = ($7_1 << 3 | 0) + 336712 | 0;
       if (($6_1 | 0) == ($2_1 | 0)) {
        break label$5
       }
      }
      label$6 : {
       if (($5_1 | 0) != ($6_1 | 0)) {
        break label$6
       }
       HEAP32[(0 + 336672 | 0) >> 2] = (HEAP32[(0 + 336672 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $7_1 | 0) | 0) | 0;
       break label$2;
      }
      label$7 : {
       if (($5_1 | 0) == ($2_1 | 0)) {
        break label$7
       }
      }
      HEAP32[($6_1 + 12 | 0) >> 2] = $5_1;
      HEAP32[($5_1 + 8 | 0) >> 2] = $6_1;
      break label$2;
     }
     $7_1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
     label$8 : {
      label$9 : {
       $5_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
       if (($5_1 | 0) == ($1_1 | 0)) {
        break label$9
       }
       label$10 : {
        $2_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
        if ($4_1 >>> 0 > $2_1 >>> 0) {
         break label$10
        }
        HEAP32[($2_1 + 12 | 0) >> 2] | 0;
       }
       HEAP32[($2_1 + 12 | 0) >> 2] = $5_1;
       HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
       break label$8;
      }
      label$11 : {
       $2_1 = $1_1 + 20 | 0;
       $4_1 = HEAP32[$2_1 >> 2] | 0;
       if ($4_1) {
        break label$11
       }
       $2_1 = $1_1 + 16 | 0;
       $4_1 = HEAP32[$2_1 >> 2] | 0;
       if ($4_1) {
        break label$11
       }
       $5_1 = 0;
       break label$8;
      }
      label$12 : while (1) {
       $6_1 = $2_1;
       $5_1 = $4_1;
       $2_1 = $5_1 + 20 | 0;
       $4_1 = HEAP32[$2_1 >> 2] | 0;
       if ($4_1) {
        continue label$12
       }
       $2_1 = $5_1 + 16 | 0;
       $4_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
       if ($4_1) {
        continue label$12
       }
       break label$12;
      };
      HEAP32[$6_1 >> 2] = 0;
     }
     if (!$7_1) {
      break label$2
     }
     label$13 : {
      label$14 : {
       $4_1 = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
       $2_1 = ($4_1 << 2 | 0) + 336976 | 0;
       if ((HEAP32[$2_1 >> 2] | 0 | 0) != ($1_1 | 0)) {
        break label$14
       }
       HEAP32[$2_1 >> 2] = $5_1;
       if ($5_1) {
        break label$13
       }
       HEAP32[(0 + 336676 | 0) >> 2] = (HEAP32[(0 + 336676 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0;
       break label$2;
      }
      HEAP32[($7_1 + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) == ($1_1 | 0) ? 16 : 20) | 0) >> 2] = $5_1;
      if (!$5_1) {
       break label$2
      }
     }
     HEAP32[($5_1 + 24 | 0) >> 2] = $7_1;
     label$15 : {
      $2_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
      if (!$2_1) {
       break label$15
      }
      HEAP32[($5_1 + 16 | 0) >> 2] = $2_1;
      HEAP32[($2_1 + 24 | 0) >> 2] = $5_1;
     }
     $2_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
     if (!$2_1) {
      break label$2
     }
     HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
     HEAP32[($2_1 + 24 | 0) >> 2] = $5_1;
     break label$2;
    }
    $2_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    if (($2_1 & 3 | 0 | 0) != (3 | 0)) {
     break label$2
    }
    HEAP32[(0 + 336680 | 0) >> 2] = $0_1;
    HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 & -2 | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
    HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
    return;
   }
   if ($3_1 >>> 0 <= $1_1 >>> 0) {
    break label$1
   }
   $2_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
   if (!($2_1 & 1 | 0)) {
    break label$1
   }
   label$16 : {
    label$17 : {
     if ($2_1 & 2 | 0) {
      break label$17
     }
     label$18 : {
      if ((HEAP32[(0 + 336696 | 0) >> 2] | 0 | 0) != ($3_1 | 0)) {
       break label$18
      }
      HEAP32[(0 + 336696 | 0) >> 2] = $1_1;
      $0_1 = (HEAP32[(0 + 336684 | 0) >> 2] | 0) + $0_1 | 0;
      HEAP32[(0 + 336684 | 0) >> 2] = $0_1;
      HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
      if (($1_1 | 0) != (HEAP32[(0 + 336692 | 0) >> 2] | 0 | 0)) {
       break label$1
      }
      HEAP32[(0 + 336680 | 0) >> 2] = 0;
      HEAP32[(0 + 336692 | 0) >> 2] = 0;
      return;
     }
     label$19 : {
      if ((HEAP32[(0 + 336692 | 0) >> 2] | 0 | 0) != ($3_1 | 0)) {
       break label$19
      }
      HEAP32[(0 + 336692 | 0) >> 2] = $1_1;
      $0_1 = (HEAP32[(0 + 336680 | 0) >> 2] | 0) + $0_1 | 0;
      HEAP32[(0 + 336680 | 0) >> 2] = $0_1;
      HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
      HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
      return;
     }
     $0_1 = ($2_1 & -8 | 0) + $0_1 | 0;
     label$20 : {
      label$21 : {
       if ($2_1 >>> 0 > 255 >>> 0) {
        break label$21
       }
       $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
       label$22 : {
        $5_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
        $3_1 = $2_1 >>> 3 | 0;
        $2_1 = ($3_1 << 3 | 0) + 336712 | 0;
        if (($5_1 | 0) == ($2_1 | 0)) {
         break label$22
        }
        HEAP32[(0 + 336688 | 0) >> 2] | 0;
       }
       label$23 : {
        if (($4_1 | 0) != ($5_1 | 0)) {
         break label$23
        }
        HEAP32[(0 + 336672 | 0) >> 2] = (HEAP32[(0 + 336672 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $3_1 | 0) | 0) | 0;
        break label$20;
       }
       label$24 : {
        if (($4_1 | 0) == ($2_1 | 0)) {
         break label$24
        }
        HEAP32[(0 + 336688 | 0) >> 2] | 0;
       }
       HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
       HEAP32[($4_1 + 8 | 0) >> 2] = $5_1;
       break label$20;
      }
      $7_1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
      label$25 : {
       label$26 : {
        $5_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
        if (($5_1 | 0) == ($3_1 | 0)) {
         break label$26
        }
        label$27 : {
         $2_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
         if ((HEAP32[(0 + 336688 | 0) >> 2] | 0) >>> 0 > $2_1 >>> 0) {
          break label$27
         }
         HEAP32[($2_1 + 12 | 0) >> 2] | 0;
        }
        HEAP32[($2_1 + 12 | 0) >> 2] = $5_1;
        HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
        break label$25;
       }
       label$28 : {
        $2_1 = $3_1 + 20 | 0;
        $4_1 = HEAP32[$2_1 >> 2] | 0;
        if ($4_1) {
         break label$28
        }
        $2_1 = $3_1 + 16 | 0;
        $4_1 = HEAP32[$2_1 >> 2] | 0;
        if ($4_1) {
         break label$28
        }
        $5_1 = 0;
        break label$25;
       }
       label$29 : while (1) {
        $6_1 = $2_1;
        $5_1 = $4_1;
        $2_1 = $5_1 + 20 | 0;
        $4_1 = HEAP32[$2_1 >> 2] | 0;
        if ($4_1) {
         continue label$29
        }
        $2_1 = $5_1 + 16 | 0;
        $4_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
        if ($4_1) {
         continue label$29
        }
        break label$29;
       };
       HEAP32[$6_1 >> 2] = 0;
      }
      if (!$7_1) {
       break label$20
      }
      label$30 : {
       label$31 : {
        $4_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
        $2_1 = ($4_1 << 2 | 0) + 336976 | 0;
        if ((HEAP32[$2_1 >> 2] | 0 | 0) != ($3_1 | 0)) {
         break label$31
        }
        HEAP32[$2_1 >> 2] = $5_1;
        if ($5_1) {
         break label$30
        }
        HEAP32[(0 + 336676 | 0) >> 2] = (HEAP32[(0 + 336676 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0;
        break label$20;
       }
       HEAP32[($7_1 + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) == ($3_1 | 0) ? 16 : 20) | 0) >> 2] = $5_1;
       if (!$5_1) {
        break label$20
       }
      }
      HEAP32[($5_1 + 24 | 0) >> 2] = $7_1;
      label$32 : {
       $2_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
       if (!$2_1) {
        break label$32
       }
       HEAP32[($5_1 + 16 | 0) >> 2] = $2_1;
       HEAP32[($2_1 + 24 | 0) >> 2] = $5_1;
      }
      $2_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
      if (!$2_1) {
       break label$20
      }
      HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
      HEAP32[($2_1 + 24 | 0) >> 2] = $5_1;
     }
     HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
     HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
     if (($1_1 | 0) != (HEAP32[(0 + 336692 | 0) >> 2] | 0 | 0)) {
      break label$16
     }
     HEAP32[(0 + 336680 | 0) >> 2] = $0_1;
     return;
    }
    HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 & -2 | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
    HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
   }
   label$33 : {
    if ($0_1 >>> 0 > 255 >>> 0) {
     break label$33
    }
    $2_1 = $0_1 >>> 3 | 0;
    $0_1 = ($2_1 << 3 | 0) + 336712 | 0;
    label$34 : {
     label$35 : {
      $4_1 = HEAP32[(0 + 336672 | 0) >> 2] | 0;
      $2_1 = 1 << $2_1 | 0;
      if ($4_1 & $2_1 | 0) {
       break label$35
      }
      HEAP32[(0 + 336672 | 0) >> 2] = $4_1 | $2_1 | 0;
      $2_1 = $0_1;
      break label$34;
     }
     $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    }
    HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
    HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
    HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $2_1;
    return;
   }
   $2_1 = 0;
   label$36 : {
    $4_1 = $0_1 >>> 8 | 0;
    if (!$4_1) {
     break label$36
    }
    $2_1 = 31;
    if ($0_1 >>> 0 > 16777215 >>> 0) {
     break label$36
    }
    $2_1 = (($4_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
    $4_1 = $4_1 << $2_1 | 0;
    $408_1 = $4_1;
    $4_1 = (($4_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
    $5_1 = $408_1 << $4_1 | 0;
    $415_1 = $5_1;
    $5_1 = (($5_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
    $2_1 = (($415_1 << $5_1 | 0) >>> 15 | 0) - ($4_1 | $2_1 | 0 | $5_1 | 0) | 0;
    $2_1 = ($2_1 << 1 | 0 | (($0_1 >>> ($2_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
   }
   HEAP32[($1_1 + 16 | 0) >> 2] = 0;
   HEAP32[($1_1 + 20 | 0) >> 2] = 0;
   HEAP32[($1_1 + 28 | 0) >> 2] = $2_1;
   $4_1 = ($2_1 << 2 | 0) + 336976 | 0;
   label$37 : {
    label$38 : {
     label$39 : {
      label$40 : {
       $5_1 = HEAP32[(0 + 336676 | 0) >> 2] | 0;
       $3_1 = 1 << $2_1 | 0;
       if ($5_1 & $3_1 | 0) {
        break label$40
       }
       HEAP32[(0 + 336676 | 0) >> 2] = $5_1 | $3_1 | 0;
       HEAP32[$4_1 >> 2] = $1_1;
       HEAP32[($1_1 + 24 | 0) >> 2] = $4_1;
       break label$39;
      }
      $2_1 = $0_1 << (($2_1 | 0) == (31 | 0) ? 0 : 25 - ($2_1 >>> 1 | 0) | 0) | 0;
      $5_1 = HEAP32[$4_1 >> 2] | 0;
      label$41 : while (1) {
       $4_1 = $5_1;
       if (((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($0_1 | 0)) {
        break label$38
       }
       $5_1 = $2_1 >>> 29 | 0;
       $2_1 = $2_1 << 1 | 0;
       $3_1 = ($4_1 + ($5_1 & 4 | 0) | 0) + 16 | 0;
       $5_1 = HEAP32[$3_1 >> 2] | 0;
       if ($5_1) {
        continue label$41
       }
       break label$41;
      };
      HEAP32[$3_1 >> 2] = $1_1;
      HEAP32[($1_1 + 24 | 0) >> 2] = $4_1;
     }
     HEAP32[($1_1 + 12 | 0) >> 2] = $1_1;
     HEAP32[($1_1 + 8 | 0) >> 2] = $1_1;
     break label$37;
    }
    $0_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
    HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
    HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
    HEAP32[($1_1 + 24 | 0) >> 2] = 0;
    HEAP32[($1_1 + 12 | 0) >> 2] = $4_1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $0_1;
   }
   $1_1 = (HEAP32[(0 + 336704 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[(0 + 336704 | 0) >> 2] = $1_1;
   if ($1_1) {
    break label$1
   }
   $1_1 = 337128;
   label$42 : while (1) {
    $0_1 = HEAP32[$1_1 >> 2] | 0;
    $1_1 = $0_1 + 8 | 0;
    if ($0_1) {
     continue label$42
    }
    break label$42;
   };
   HEAP32[(0 + 336704 | 0) >> 2] = -1;
  }
 }
 
 function $2162($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return $2160($1_1 | 0) | 0 | 0;
  }
  label$2 : {
   if ($1_1 >>> 0 < -64 >>> 0) {
    break label$2
   }
   HEAP32[($587() | 0) >> 2] = 48;
   return 0 | 0;
  }
  label$3 : {
   $2_1 = $2163($0_1 + -8 | 0 | 0, ($1_1 >>> 0 < 11 >>> 0 ? 16 : ($1_1 + 11 | 0) & -8 | 0) | 0) | 0;
   if (!$2_1) {
    break label$3
   }
   return $2_1 + 8 | 0 | 0;
  }
  label$4 : {
   $2_1 = $2160($1_1 | 0) | 0;
   if ($2_1) {
    break label$4
   }
   return 0 | 0;
  }
  $3_1 = HEAP32[($0_1 + -4 | 0) >> 2] | 0;
  $3_1 = ($3_1 & 3 | 0 ? -4 : -8) + ($3_1 & -8 | 0) | 0;
  $2173($2_1 | 0, $0_1 | 0, ($3_1 >>> 0 < $1_1 >>> 0 ? $3_1 : $1_1) | 0) | 0;
  $2161($0_1 | 0);
  return $2_1 | 0;
 }
 
 function $2163($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $5_1 = 0, $7_1 = 0, $4_1 = 0, $2_1 = 0, $6_1 = 0, $8_1 = 0, $10_1 = 0, $9_1 = 0;
  $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $3_1 = $2_1 & 3 | 0;
  $4_1 = $2_1 & -8 | 0;
  $5_1 = $0_1 + $4_1 | 0;
  label$1 : {
   $6_1 = HEAP32[(0 + 336688 | 0) >> 2] | 0;
   if ($6_1 >>> 0 > $0_1 >>> 0) {
    break label$1
   }
   if (($3_1 | 0) == (1 | 0)) {
    break label$1
   }
  }
  label$2 : {
   label$3 : {
    if ($3_1) {
     break label$3
    }
    $3_1 = 0;
    if ($1_1 >>> 0 < 256 >>> 0) {
     break label$2
    }
    label$4 : {
     if ($4_1 >>> 0 < ($1_1 + 4 | 0) >>> 0) {
      break label$4
     }
     $3_1 = $0_1;
     if (($4_1 - $1_1 | 0) >>> 0 <= ((HEAP32[(0 + 337152 | 0) >> 2] | 0) << 1 | 0) >>> 0) {
      break label$2
     }
    }
    return 0 | 0;
   }
   label$5 : {
    label$6 : {
     if ($4_1 >>> 0 < $1_1 >>> 0) {
      break label$6
     }
     $3_1 = $4_1 - $1_1 | 0;
     if ($3_1 >>> 0 < 16 >>> 0) {
      break label$5
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $1_1 | 0 | 2 | 0;
     $1_1 = $0_1 + $1_1 | 0;
     HEAP32[($1_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
     HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 1 | 0;
     $2164($1_1 | 0, $3_1 | 0);
     break label$5;
    }
    $3_1 = 0;
    label$7 : {
     if ((HEAP32[(0 + 336696 | 0) >> 2] | 0 | 0) != ($5_1 | 0)) {
      break label$7
     }
     $5_1 = (HEAP32[(0 + 336684 | 0) >> 2] | 0) + $4_1 | 0;
     if ($5_1 >>> 0 <= $1_1 >>> 0) {
      break label$2
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $1_1 | 0 | 2 | 0;
     $3_1 = $0_1 + $1_1 | 0;
     $1_1 = $5_1 - $1_1 | 0;
     HEAP32[($3_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
     HEAP32[(0 + 336684 | 0) >> 2] = $1_1;
     HEAP32[(0 + 336696 | 0) >> 2] = $3_1;
     break label$5;
    }
    label$8 : {
     if ((HEAP32[(0 + 336692 | 0) >> 2] | 0 | 0) != ($5_1 | 0)) {
      break label$8
     }
     $3_1 = 0;
     $5_1 = (HEAP32[(0 + 336680 | 0) >> 2] | 0) + $4_1 | 0;
     if ($5_1 >>> 0 < $1_1 >>> 0) {
      break label$2
     }
     label$9 : {
      label$10 : {
       $3_1 = $5_1 - $1_1 | 0;
       if ($3_1 >>> 0 < 16 >>> 0) {
        break label$10
       }
       HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $1_1 | 0 | 2 | 0;
       $1_1 = $0_1 + $1_1 | 0;
       HEAP32[($1_1 + 4 | 0) >> 2] = $3_1 | 1 | 0;
       $5_1 = $0_1 + $5_1 | 0;
       HEAP32[$5_1 >> 2] = $3_1;
       HEAP32[($5_1 + 4 | 0) >> 2] = (HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -2 | 0;
       break label$9;
      }
      HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $5_1 | 0 | 2 | 0;
      $1_1 = $0_1 + $5_1 | 0;
      HEAP32[($1_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 1 | 0;
      $3_1 = 0;
      $1_1 = 0;
     }
     HEAP32[(0 + 336692 | 0) >> 2] = $1_1;
     HEAP32[(0 + 336680 | 0) >> 2] = $3_1;
     break label$5;
    }
    $3_1 = 0;
    $7_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
    if ($7_1 & 2 | 0) {
     break label$2
    }
    $8_1 = ($7_1 & -8 | 0) + $4_1 | 0;
    if ($8_1 >>> 0 < $1_1 >>> 0) {
     break label$2
    }
    $9_1 = $8_1 - $1_1 | 0;
    label$11 : {
     label$12 : {
      if ($7_1 >>> 0 > 255 >>> 0) {
       break label$12
      }
      $3_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
      label$13 : {
       $5_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
       $7_1 = $7_1 >>> 3 | 0;
       $4_1 = ($7_1 << 3 | 0) + 336712 | 0;
       if (($5_1 | 0) == ($4_1 | 0)) {
        break label$13
       }
      }
      label$14 : {
       if (($3_1 | 0) != ($5_1 | 0)) {
        break label$14
       }
       HEAP32[(0 + 336672 | 0) >> 2] = (HEAP32[(0 + 336672 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $7_1 | 0) | 0) | 0;
       break label$11;
      }
      label$15 : {
       if (($3_1 | 0) == ($4_1 | 0)) {
        break label$15
       }
      }
      HEAP32[($5_1 + 12 | 0) >> 2] = $3_1;
      HEAP32[($3_1 + 8 | 0) >> 2] = $5_1;
      break label$11;
     }
     $10_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
     label$16 : {
      label$17 : {
       $7_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
       if (($7_1 | 0) == ($5_1 | 0)) {
        break label$17
       }
       label$18 : {
        $3_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
        if ($6_1 >>> 0 > $3_1 >>> 0) {
         break label$18
        }
        HEAP32[($3_1 + 12 | 0) >> 2] | 0;
       }
       HEAP32[($3_1 + 12 | 0) >> 2] = $7_1;
       HEAP32[($7_1 + 8 | 0) >> 2] = $3_1;
       break label$16;
      }
      label$19 : {
       $3_1 = $5_1 + 20 | 0;
       $4_1 = HEAP32[$3_1 >> 2] | 0;
       if ($4_1) {
        break label$19
       }
       $3_1 = $5_1 + 16 | 0;
       $4_1 = HEAP32[$3_1 >> 2] | 0;
       if ($4_1) {
        break label$19
       }
       $7_1 = 0;
       break label$16;
      }
      label$20 : while (1) {
       $6_1 = $3_1;
       $7_1 = $4_1;
       $3_1 = $7_1 + 20 | 0;
       $4_1 = HEAP32[$3_1 >> 2] | 0;
       if ($4_1) {
        continue label$20
       }
       $3_1 = $7_1 + 16 | 0;
       $4_1 = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
       if ($4_1) {
        continue label$20
       }
       break label$20;
      };
      HEAP32[$6_1 >> 2] = 0;
     }
     if (!$10_1) {
      break label$11
     }
     label$21 : {
      label$22 : {
       $4_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
       $3_1 = ($4_1 << 2 | 0) + 336976 | 0;
       if ((HEAP32[$3_1 >> 2] | 0 | 0) != ($5_1 | 0)) {
        break label$22
       }
       HEAP32[$3_1 >> 2] = $7_1;
       if ($7_1) {
        break label$21
       }
       HEAP32[(0 + 336676 | 0) >> 2] = (HEAP32[(0 + 336676 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0;
       break label$11;
      }
      HEAP32[($10_1 + ((HEAP32[($10_1 + 16 | 0) >> 2] | 0 | 0) == ($5_1 | 0) ? 16 : 20) | 0) >> 2] = $7_1;
      if (!$7_1) {
       break label$11
      }
     }
     HEAP32[($7_1 + 24 | 0) >> 2] = $10_1;
     label$23 : {
      $3_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
      if (!$3_1) {
       break label$23
      }
      HEAP32[($7_1 + 16 | 0) >> 2] = $3_1;
      HEAP32[($3_1 + 24 | 0) >> 2] = $7_1;
     }
     $5_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
     if (!$5_1) {
      break label$11
     }
     HEAP32[($7_1 + 20 | 0) >> 2] = $5_1;
     HEAP32[($5_1 + 24 | 0) >> 2] = $7_1;
    }
    label$24 : {
     if ($9_1 >>> 0 > 15 >>> 0) {
      break label$24
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $8_1 | 0 | 2 | 0;
     $1_1 = $0_1 + $8_1 | 0;
     HEAP32[($1_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 1 | 0;
     break label$5;
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $1_1 | 0 | 2 | 0;
    $1_1 = $0_1 + $1_1 | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $9_1 | 3 | 0;
    $5_1 = $0_1 + $8_1 | 0;
    HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 1 | 0;
    $2164($1_1 | 0, $9_1 | 0);
   }
   $3_1 = $0_1;
  }
  return $3_1 | 0;
 }
 
 function $2164($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $6_1 = 0, $5_1 = 0, $2_1 = 0, $7_1 = 0, $4_1 = 0, $391_1 = 0, $398_1 = 0;
  $2_1 = $0_1 + $1_1 | 0;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if ($3_1 & 1 | 0) {
     break label$2
    }
    if (!($3_1 & 3 | 0)) {
     break label$1
    }
    $3_1 = HEAP32[$0_1 >> 2] | 0;
    $1_1 = $3_1 + $1_1 | 0;
    label$3 : {
     $0_1 = $0_1 - $3_1 | 0;
     if ((HEAP32[(0 + 336692 | 0) >> 2] | 0 | 0) == ($0_1 | 0)) {
      break label$3
     }
     $4_1 = HEAP32[(0 + 336688 | 0) >> 2] | 0;
     label$4 : {
      if ($3_1 >>> 0 > 255 >>> 0) {
       break label$4
      }
      $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
      label$5 : {
       $6_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
       $7_1 = $3_1 >>> 3 | 0;
       $3_1 = ($7_1 << 3 | 0) + 336712 | 0;
       if (($6_1 | 0) == ($3_1 | 0)) {
        break label$5
       }
      }
      label$6 : {
       if (($5_1 | 0) != ($6_1 | 0)) {
        break label$6
       }
       HEAP32[(0 + 336672 | 0) >> 2] = (HEAP32[(0 + 336672 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $7_1 | 0) | 0) | 0;
       break label$2;
      }
      label$7 : {
       if (($5_1 | 0) == ($3_1 | 0)) {
        break label$7
       }
      }
      HEAP32[($6_1 + 12 | 0) >> 2] = $5_1;
      HEAP32[($5_1 + 8 | 0) >> 2] = $6_1;
      break label$2;
     }
     $7_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     label$8 : {
      label$9 : {
       $6_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
       if (($6_1 | 0) == ($0_1 | 0)) {
        break label$9
       }
       label$10 : {
        $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
        if ($4_1 >>> 0 > $3_1 >>> 0) {
         break label$10
        }
        HEAP32[($3_1 + 12 | 0) >> 2] | 0;
       }
       HEAP32[($3_1 + 12 | 0) >> 2] = $6_1;
       HEAP32[($6_1 + 8 | 0) >> 2] = $3_1;
       break label$8;
      }
      label$11 : {
       $3_1 = $0_1 + 20 | 0;
       $5_1 = HEAP32[$3_1 >> 2] | 0;
       if ($5_1) {
        break label$11
       }
       $3_1 = $0_1 + 16 | 0;
       $5_1 = HEAP32[$3_1 >> 2] | 0;
       if ($5_1) {
        break label$11
       }
       $6_1 = 0;
       break label$8;
      }
      label$12 : while (1) {
       $4_1 = $3_1;
       $6_1 = $5_1;
       $3_1 = $6_1 + 20 | 0;
       $5_1 = HEAP32[$3_1 >> 2] | 0;
       if ($5_1) {
        continue label$12
       }
       $3_1 = $6_1 + 16 | 0;
       $5_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
       if ($5_1) {
        continue label$12
       }
       break label$12;
      };
      HEAP32[$4_1 >> 2] = 0;
     }
     if (!$7_1) {
      break label$2
     }
     label$13 : {
      label$14 : {
       $5_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
       $3_1 = ($5_1 << 2 | 0) + 336976 | 0;
       if ((HEAP32[$3_1 >> 2] | 0 | 0) != ($0_1 | 0)) {
        break label$14
       }
       HEAP32[$3_1 >> 2] = $6_1;
       if ($6_1) {
        break label$13
       }
       HEAP32[(0 + 336676 | 0) >> 2] = (HEAP32[(0 + 336676 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
       break label$2;
      }
      HEAP32[($7_1 + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) == ($0_1 | 0) ? 16 : 20) | 0) >> 2] = $6_1;
      if (!$6_1) {
       break label$2
      }
     }
     HEAP32[($6_1 + 24 | 0) >> 2] = $7_1;
     label$15 : {
      $3_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
      if (!$3_1) {
       break label$15
      }
      HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
      HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
     }
     $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
     if (!$3_1) {
      break label$2
     }
     HEAP32[($6_1 + 20 | 0) >> 2] = $3_1;
     HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
     break label$2;
    }
    $3_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
    if (($3_1 & 3 | 0 | 0) != (3 | 0)) {
     break label$2
    }
    HEAP32[(0 + 336680 | 0) >> 2] = $1_1;
    HEAP32[($2_1 + 4 | 0) >> 2] = $3_1 & -2 | 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
    HEAP32[$2_1 >> 2] = $1_1;
    return;
   }
   label$16 : {
    label$17 : {
     $3_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
     if ($3_1 & 2 | 0) {
      break label$17
     }
     label$18 : {
      if ((HEAP32[(0 + 336696 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
       break label$18
      }
      HEAP32[(0 + 336696 | 0) >> 2] = $0_1;
      $1_1 = (HEAP32[(0 + 336684 | 0) >> 2] | 0) + $1_1 | 0;
      HEAP32[(0 + 336684 | 0) >> 2] = $1_1;
      HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
      if (($0_1 | 0) != (HEAP32[(0 + 336692 | 0) >> 2] | 0 | 0)) {
       break label$1
      }
      HEAP32[(0 + 336680 | 0) >> 2] = 0;
      HEAP32[(0 + 336692 | 0) >> 2] = 0;
      return;
     }
     label$19 : {
      if ((HEAP32[(0 + 336692 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
       break label$19
      }
      HEAP32[(0 + 336692 | 0) >> 2] = $0_1;
      $1_1 = (HEAP32[(0 + 336680 | 0) >> 2] | 0) + $1_1 | 0;
      HEAP32[(0 + 336680 | 0) >> 2] = $1_1;
      HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
      HEAP32[($0_1 + $1_1 | 0) >> 2] = $1_1;
      return;
     }
     $4_1 = HEAP32[(0 + 336688 | 0) >> 2] | 0;
     $1_1 = ($3_1 & -8 | 0) + $1_1 | 0;
     label$20 : {
      label$21 : {
       if ($3_1 >>> 0 > 255 >>> 0) {
        break label$21
       }
       $5_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
       label$22 : {
        $6_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
        $2_1 = $3_1 >>> 3 | 0;
        $3_1 = ($2_1 << 3 | 0) + 336712 | 0;
        if (($6_1 | 0) == ($3_1 | 0)) {
         break label$22
        }
       }
       label$23 : {
        if (($5_1 | 0) != ($6_1 | 0)) {
         break label$23
        }
        HEAP32[(0 + 336672 | 0) >> 2] = (HEAP32[(0 + 336672 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $2_1 | 0) | 0) | 0;
        break label$20;
       }
       label$24 : {
        if (($5_1 | 0) == ($3_1 | 0)) {
         break label$24
        }
       }
       HEAP32[($6_1 + 12 | 0) >> 2] = $5_1;
       HEAP32[($5_1 + 8 | 0) >> 2] = $6_1;
       break label$20;
      }
      $7_1 = HEAP32[($2_1 + 24 | 0) >> 2] | 0;
      label$25 : {
       label$26 : {
        $6_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
        if (($6_1 | 0) == ($2_1 | 0)) {
         break label$26
        }
        label$27 : {
         $3_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
         if ($4_1 >>> 0 > $3_1 >>> 0) {
          break label$27
         }
         HEAP32[($3_1 + 12 | 0) >> 2] | 0;
        }
        HEAP32[($3_1 + 12 | 0) >> 2] = $6_1;
        HEAP32[($6_1 + 8 | 0) >> 2] = $3_1;
        break label$25;
       }
       label$28 : {
        $3_1 = $2_1 + 20 | 0;
        $5_1 = HEAP32[$3_1 >> 2] | 0;
        if ($5_1) {
         break label$28
        }
        $3_1 = $2_1 + 16 | 0;
        $5_1 = HEAP32[$3_1 >> 2] | 0;
        if ($5_1) {
         break label$28
        }
        $6_1 = 0;
        break label$25;
       }
       label$29 : while (1) {
        $4_1 = $3_1;
        $6_1 = $5_1;
        $3_1 = $6_1 + 20 | 0;
        $5_1 = HEAP32[$3_1 >> 2] | 0;
        if ($5_1) {
         continue label$29
        }
        $3_1 = $6_1 + 16 | 0;
        $5_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
        if ($5_1) {
         continue label$29
        }
        break label$29;
       };
       HEAP32[$4_1 >> 2] = 0;
      }
      if (!$7_1) {
       break label$20
      }
      label$30 : {
       label$31 : {
        $5_1 = HEAP32[($2_1 + 28 | 0) >> 2] | 0;
        $3_1 = ($5_1 << 2 | 0) + 336976 | 0;
        if ((HEAP32[$3_1 >> 2] | 0 | 0) != ($2_1 | 0)) {
         break label$31
        }
        HEAP32[$3_1 >> 2] = $6_1;
        if ($6_1) {
         break label$30
        }
        HEAP32[(0 + 336676 | 0) >> 2] = (HEAP32[(0 + 336676 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
        break label$20;
       }
       HEAP32[($7_1 + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) == ($2_1 | 0) ? 16 : 20) | 0) >> 2] = $6_1;
       if (!$6_1) {
        break label$20
       }
      }
      HEAP32[($6_1 + 24 | 0) >> 2] = $7_1;
      label$32 : {
       $3_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
       if (!$3_1) {
        break label$32
       }
       HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
       HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
      }
      $3_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
      if (!$3_1) {
       break label$20
      }
      HEAP32[($6_1 + 20 | 0) >> 2] = $3_1;
      HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
     HEAP32[($0_1 + $1_1 | 0) >> 2] = $1_1;
     if (($0_1 | 0) != (HEAP32[(0 + 336692 | 0) >> 2] | 0 | 0)) {
      break label$16
     }
     HEAP32[(0 + 336680 | 0) >> 2] = $1_1;
     return;
    }
    HEAP32[($2_1 + 4 | 0) >> 2] = $3_1 & -2 | 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
    HEAP32[($0_1 + $1_1 | 0) >> 2] = $1_1;
   }
   label$33 : {
    if ($1_1 >>> 0 > 255 >>> 0) {
     break label$33
    }
    $3_1 = $1_1 >>> 3 | 0;
    $1_1 = ($3_1 << 3 | 0) + 336712 | 0;
    label$34 : {
     label$35 : {
      $5_1 = HEAP32[(0 + 336672 | 0) >> 2] | 0;
      $3_1 = 1 << $3_1 | 0;
      if ($5_1 & $3_1 | 0) {
       break label$35
      }
      HEAP32[(0 + 336672 | 0) >> 2] = $5_1 | $3_1 | 0;
      $3_1 = $1_1;
      break label$34;
     }
     $3_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
    }
    HEAP32[($1_1 + 8 | 0) >> 2] = $0_1;
    HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
    HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
    HEAP32[($0_1 + 8 | 0) >> 2] = $3_1;
    return;
   }
   $3_1 = 0;
   label$36 : {
    $5_1 = $1_1 >>> 8 | 0;
    if (!$5_1) {
     break label$36
    }
    $3_1 = 31;
    if ($1_1 >>> 0 > 16777215 >>> 0) {
     break label$36
    }
    $3_1 = (($5_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
    $5_1 = $5_1 << $3_1 | 0;
    $391_1 = $5_1;
    $5_1 = (($5_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
    $6_1 = $391_1 << $5_1 | 0;
    $398_1 = $6_1;
    $6_1 = (($6_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
    $3_1 = (($398_1 << $6_1 | 0) >>> 15 | 0) - ($5_1 | $3_1 | 0 | $6_1 | 0) | 0;
    $3_1 = ($3_1 << 1 | 0 | (($1_1 >>> ($3_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
   }
   HEAP32[($0_1 + 16 | 0) >> 2] = 0;
   HEAP32[($0_1 + 20 | 0) >> 2] = 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $3_1;
   $5_1 = ($3_1 << 2 | 0) + 336976 | 0;
   label$37 : {
    label$38 : {
     label$39 : {
      $6_1 = HEAP32[(0 + 336676 | 0) >> 2] | 0;
      $2_1 = 1 << $3_1 | 0;
      if ($6_1 & $2_1 | 0) {
       break label$39
      }
      HEAP32[(0 + 336676 | 0) >> 2] = $6_1 | $2_1 | 0;
      HEAP32[$5_1 >> 2] = $0_1;
      HEAP32[($0_1 + 24 | 0) >> 2] = $5_1;
      break label$38;
     }
     $3_1 = $1_1 << (($3_1 | 0) == (31 | 0) ? 0 : 25 - ($3_1 >>> 1 | 0) | 0) | 0;
     $6_1 = HEAP32[$5_1 >> 2] | 0;
     label$40 : while (1) {
      $5_1 = $6_1;
      if (((HEAP32[($6_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($1_1 | 0)) {
       break label$37
      }
      $6_1 = $3_1 >>> 29 | 0;
      $3_1 = $3_1 << 1 | 0;
      $2_1 = ($5_1 + ($6_1 & 4 | 0) | 0) + 16 | 0;
      $6_1 = HEAP32[$2_1 >> 2] | 0;
      if ($6_1) {
       continue label$40
      }
      break label$40;
     };
     HEAP32[$2_1 >> 2] = $0_1;
     HEAP32[($0_1 + 24 | 0) >> 2] = $5_1;
    }
    HEAP32[($0_1 + 12 | 0) >> 2] = $0_1;
    HEAP32[($0_1 + 8 | 0) >> 2] = $0_1;
    return;
   }
   $1_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
   HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
   HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
   HEAP32[($0_1 + 24 | 0) >> 2] = 0;
   HEAP32[($0_1 + 12 | 0) >> 2] = $5_1;
   HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
  }
 }
 
 function $2165($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0;
  $1_1 = ($0_1 + 3 | 0) & -4 | 0;
  label$1 : {
   $0_1 = HEAP32[(0 + 337168 | 0) >> 2] | 0;
   if ($0_1) {
    break label$1
   }
   $0_1 = 5580064;
   HEAP32[(0 + 337168 | 0) >> 2] = 5580064;
  }
  $2_1 = $0_1 + $1_1 | 0;
  label$2 : {
   label$3 : {
    if (($1_1 | 0) < (1 | 0)) {
     break label$3
    }
    if ($2_1 >>> 0 <= $0_1 >>> 0) {
     break label$2
    }
   }
   label$4 : {
    if ($2_1 >>> 0 <= (__wasm_memory_size() << 16 | 0) >>> 0) {
     break label$4
    }
    if (!(fimport$99($2_1 | 0) | 0)) {
     break label$2
    }
   }
   HEAP32[(0 + 337168 | 0) >> 2] = $2_1;
   return $0_1 | 0;
  }
  HEAP32[($587() | 0) >> 2] = 48;
  return -1 | 0;
 }
 
 function $2166($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $2167($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $2168($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return 0 | 0;
 }
 
 function $2169($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $2170($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $5_1 = 0, $10$hi = 0, i64toi32_i32$5 = 0, $10_1 = 0, $9$hi = 0, $8_1 = 0, $9_1 = 0, $6_1 = 0, i64toi32_i32$6 = 0, $11$hi = 0, $58_1 = 0, $7_1 = 0, $61_1 = 0, $62_1 = 0, $63_1 = 0, $64_1 = 0, $65_1 = 0, $11_1 = 0, $66_1 = 0, $67_1 = 0, $68_1 = 0, $70_1 = 0, $71_1 = 0, $72_1 = 0, $73_1 = 0, $74_1 = 0, $75_1 = 0, $76_1 = 0, $77_1 = 0, $78_1 = 0, $79_1 = 0, $80_1 = 0, $81_1 = 0, $82_1 = 0, $52_1 = 0, $52$hi = 0, $55$hi = 0, $57_1 = 0, $57$hi = 0, $59_1 = 0, $59$hi = 0, $60_1 = 0, $60$hi = 0, $67$hi = 0, $69_1 = 0, $69$hi = 0, $131$hi = 0, $134_1 = 0, $135$hi = 0, $176$hi = 0, $179_1 = 0, $180$hi = 0, $209_1 = 0, $209$hi = 0, $211$hi = 0, $220_1 = 0, $221_1 = 0, $221$hi = 0, $223_1 = 0, $223$hi = 0, $229$hi = 0, $230_1 = 0, $230$hi = 0, $237_1 = 0, $237$hi = 0, $242$hi = 0;
  $5_1 = global$0 - 128 | 0;
  global$0 = $5_1;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 0;
     if (!($683($3_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0) | 0)) {
      break label$3
     }
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$2 = $4$hi;
     $6_1 = $2172($3_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 48;
     i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $58_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      $58_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
     }
     $7_1 = $58_1;
     $8_1 = $7_1 & 32767 | 0;
     if (($8_1 | 0) == (32767 | 0)) {
      break label$3
     }
     if ($6_1) {
      break label$2
     }
    }
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $4$hi;
    $693($5_1 + 16 | 0 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $2_1 | 0, i64toi32_i32$1 | 0, $3_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$0;
    $4$hi = i64toi32_i32$2;
    i64toi32_i32$1 = (i64toi32_i32$1 + 16 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$2;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$3 = i64toi32_i32$2;
    $697($5_1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$2 | 0);
    i64toi32_i32$2 = $5_1 + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$3;
    break label$1;
   }
   label$4 : {
    i64toi32_i32$3 = $1$hi;
    $52_1 = $1_1;
    $52$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = $8_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $61_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
     $61_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $55$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$2 = 65535;
    i64toi32_i32$0 = -1;
    i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
    $57_1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
    $57$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $55$hi;
    i64toi32_i32$1 = $61_1;
    i64toi32_i32$3 = $57$hi;
    i64toi32_i32$0 = $57_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $9_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
    $9$hi = i64toi32_i32$3;
    $59_1 = $9_1;
    $59$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $3$hi;
    $60_1 = $3_1;
    $60$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $62_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
     $62_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $6_1 = $62_1 & 32767 | 0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = $6_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     $63_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $63_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
    }
    $67$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$3 = 65535;
    i64toi32_i32$0 = -1;
    i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $69_1 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
    $69$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $67$hi;
    i64toi32_i32$2 = $63_1;
    i64toi32_i32$1 = $69$hi;
    i64toi32_i32$0 = $69_1;
    i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
    $10_1 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $10$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $52$hi;
    i64toi32_i32$2 = $59$hi;
    i64toi32_i32$3 = $60$hi;
    i64toi32_i32$0 = $10$hi;
    if (($683($52_1 | 0, i64toi32_i32$1 | 0, $59_1 | 0, i64toi32_i32$2 | 0, $60_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$0 | 0) | 0 | 0) > (0 | 0)) {
     break label$4
    }
    label$5 : {
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $9$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$1 = $10$hi;
     if (!($683($1_1 | 0, i64toi32_i32$0 | 0, $9_1 | 0, i64toi32_i32$3 | 0, $3_1 | 0, i64toi32_i32$2 | 0, $10_1 | 0, i64toi32_i32$1 | 0) | 0)) {
      break label$5
     }
     i64toi32_i32$1 = $1$hi;
     $4_1 = $1_1;
     $4$hi = i64toi32_i32$1;
     break label$1;
    }
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = 0;
    $693($5_1 + 112 | 0 | 0, $1_1 | 0, i64toi32_i32$1 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$2 = $5_1 + 120 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$3;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 112 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 116 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$3;
    $4$hi = i64toi32_i32$0;
    break label$1;
   }
   label$6 : {
    label$7 : {
     if (!$8_1) {
      break label$7
     }
     i64toi32_i32$0 = $1$hi;
     $4_1 = $1_1;
     $4$hi = i64toi32_i32$0;
     break label$6;
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $9$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $9$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 1081540608;
    $693($5_1 + 96 | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $9_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$3 = $5_1 + 104 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $9_1 = i64toi32_i32$1;
    $9$hi = i64toi32_i32$2;
    i64toi32_i32$3 = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $64_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $64_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
    }
    $8_1 = $64_1 + -120 | 0;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 96 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 100 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$3;
   }
   label$8 : {
    if ($6_1) {
     break label$8
    }
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $10$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$1 = $10$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 1081540608;
    $693($5_1 + 80 | 0 | 0, $3_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$1 = $5_1 + 88 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $10_1 = i64toi32_i32$0;
    $10$hi = i64toi32_i32$2;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $65_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $65_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
    }
    $6_1 = $65_1 + -120 | 0;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 80 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 84 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$0;
    $3$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$2 = $10_1;
   i64toi32_i32$0 = 65535;
   i64toi32_i32$3 = -1;
   i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
   i64toi32_i32$2 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   $11_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
   $11$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $9$hi;
   i64toi32_i32$0 = $9_1;
   i64toi32_i32$1 = 65535;
   i64toi32_i32$3 = -1;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
   i64toi32_i32$0 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
   $9_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $9$hi = i64toi32_i32$0;
   label$9 : {
    if (($8_1 | 0) <= ($6_1 | 0)) {
     break label$9
    }
    label$10 : while (1) {
     label$11 : {
      label$12 : {
       i64toi32_i32$0 = $9$hi;
       i64toi32_i32$0 = $11$hi;
       i64toi32_i32$0 = $9$hi;
       i64toi32_i32$1 = $9_1;
       i64toi32_i32$2 = $11$hi;
       i64toi32_i32$3 = $11_1;
       i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
       i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
       i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
       i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
       $131$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $4$hi;
       i64toi32_i32$5 = $3$hi;
       i64toi32_i32$5 = $4$hi;
       i64toi32_i32$0 = $4_1;
       i64toi32_i32$1 = $3$hi;
       i64toi32_i32$3 = $3_1;
       $134_1 = $4$hi >>> 0 < i64toi32_i32$1 >>> 0 | (($4$hi | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
       i64toi32_i32$0 = 0;
       $135$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $131$hi;
       i64toi32_i32$3 = i64toi32_i32$4;
       i64toi32_i32$5 = $135$hi;
       i64toi32_i32$1 = $134_1;
       i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
       i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0;
       i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
       i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
       $10_1 = i64toi32_i32$2;
       $10$hi = i64toi32_i32$4;
       i64toi32_i32$0 = i64toi32_i32$2;
       i64toi32_i32$3 = 0;
       i64toi32_i32$1 = 0;
       if ((i64toi32_i32$4 | 0) < (i64toi32_i32$3 | 0)) {
        $66_1 = 1
       } else {
        if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$3 | 0)) {
         if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$1 >>> 0) {
          $67_1 = 0
         } else {
          $67_1 = 1
         }
         $68_1 = $67_1;
        } else {
         $68_1 = 0
        }
        $66_1 = $68_1;
       }
       if ($66_1) {
        break label$12
       }
       label$13 : {
        i64toi32_i32$0 = $10$hi;
        i64toi32_i32$0 = $4$hi;
        i64toi32_i32$0 = $3$hi;
        i64toi32_i32$0 = $4$hi;
        i64toi32_i32$1 = $4_1;
        i64toi32_i32$4 = $3$hi;
        i64toi32_i32$3 = $3_1;
        i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
        i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
        i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
        i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
        $4_1 = i64toi32_i32$5;
        $4$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $10$hi;
        i64toi32_i32$0 = $10_1;
        i64toi32_i32$1 = $4$hi;
        i64toi32_i32$3 = $4_1;
        i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
        i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
        i64toi32_i32$0 = 0;
        i64toi32_i32$3 = 0;
        if ((i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0) {
         break label$13
        }
        i64toi32_i32$2 = $1$hi;
        i64toi32_i32$2 = $2$hi;
        i64toi32_i32$2 = $1$hi;
        i64toi32_i32$1 = $2$hi;
        i64toi32_i32$3 = 0;
        i64toi32_i32$0 = 0;
        $693($5_1 + 32 | 0 | 0, $1_1 | 0, i64toi32_i32$2 | 0, $2_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0);
        i64toi32_i32$1 = $5_1 + 40 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
        $2_1 = i64toi32_i32$0;
        $2$hi = i64toi32_i32$3;
        i64toi32_i32$1 = $5_1;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] | 0;
        $4_1 = i64toi32_i32$3;
        $4$hi = i64toi32_i32$0;
        break label$1;
       }
       i64toi32_i32$0 = $4$hi;
       i64toi32_i32$1 = $4_1;
       i64toi32_i32$3 = 0;
       i64toi32_i32$2 = 63;
       i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
        i64toi32_i32$3 = 0;
        $70_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
       } else {
        i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
        $70_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
       }
       $9_1 = $70_1;
       $9$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $10$hi;
       i64toi32_i32$0 = $10_1;
       i64toi32_i32$1 = 0;
       i64toi32_i32$2 = 1;
       i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
        $71_1 = 0;
       } else {
        i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
        $71_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
       }
       $10_1 = $71_1;
       $10$hi = i64toi32_i32$1;
       break label$11;
      }
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$3 = $4_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$2 = 63;
      i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = 0;
       $72_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
       $72_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
      }
      $10_1 = $72_1;
      $10$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $9$hi;
      i64toi32_i32$1 = $9_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$2 = 1;
      i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
       $73_1 = 0;
      } else {
       i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
       $73_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      }
      $9_1 = $73_1;
      $9$hi = i64toi32_i32$3;
     }
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$0 = $4_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = 1;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
      $74_1 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
      $74_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     }
     $4_1 = $74_1;
     $4$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $10$hi;
     i64toi32_i32$1 = $9$hi;
     i64toi32_i32$1 = $10$hi;
     i64toi32_i32$3 = $10_1;
     i64toi32_i32$0 = $9$hi;
     i64toi32_i32$2 = $9_1;
     i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $9_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     $9$hi = i64toi32_i32$0;
     $8_1 = $8_1 + -1 | 0;
     if (($8_1 | 0) > ($6_1 | 0)) {
      continue label$10
     }
     break label$10;
    };
    $8_1 = $6_1;
   }
   label$14 : {
    label$15 : {
     i64toi32_i32$0 = $9$hi;
     i64toi32_i32$0 = $11$hi;
     i64toi32_i32$0 = $9$hi;
     i64toi32_i32$1 = $9_1;
     i64toi32_i32$3 = $11$hi;
     i64toi32_i32$2 = $11_1;
     i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
     i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0;
     i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
     $176$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$0 = $4_1;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$2 = $3_1;
     $179_1 = $4$hi >>> 0 < i64toi32_i32$1 >>> 0 | (($4$hi | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $180$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $176$hi;
     i64toi32_i32$2 = i64toi32_i32$4;
     i64toi32_i32$5 = $180$hi;
     i64toi32_i32$1 = $179_1;
     i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$1 | 0;
     i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0;
     i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
     $10_1 = i64toi32_i32$3;
     $10$hi = i64toi32_i32$4;
     i64toi32_i32$0 = i64toi32_i32$3;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$4 | 0) > (i64toi32_i32$2 | 0)) {
      $75_1 = 1
     } else {
      if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$2 | 0)) {
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
        $76_1 = 0
       } else {
        $76_1 = 1
       }
       $77_1 = $76_1;
      } else {
       $77_1 = 0
      }
      $75_1 = $77_1;
     }
     if ($75_1) {
      break label$15
     }
     i64toi32_i32$0 = $9$hi;
     $10_1 = $9_1;
     $10$hi = i64toi32_i32$0;
     break label$14;
    }
    i64toi32_i32$0 = $10$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$2 = $3_1;
    i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
    i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0;
    i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
    i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
    $4_1 = i64toi32_i32$5;
    $4$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $10$hi;
    i64toi32_i32$0 = $10_1;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
    i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 0;
    if ((i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0) {
     break label$14
    }
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 0;
    $693($5_1 + 48 | 0 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $2_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$1 = $5_1 + 56 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 52 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$2;
    $4$hi = i64toi32_i32$0;
    break label$1;
   }
   label$16 : {
    i64toi32_i32$0 = $10$hi;
    i64toi32_i32$1 = $10_1;
    i64toi32_i32$2 = 65535;
    i64toi32_i32$3 = -1;
    if (i64toi32_i32$0 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$16
    }
    label$17 : while (1) {
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = 63;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $78_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      $78_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
     }
     $3_1 = $78_1;
     $3$hi = i64toi32_i32$0;
     $8_1 = $8_1 + -1 | 0;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$1 = $4_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 1;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      $79_1 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
      $79_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     }
     $4_1 = $79_1;
     $4$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $3$hi;
     $209_1 = $3_1;
     $209$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $10$hi;
     i64toi32_i32$0 = $10_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = 1;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
      $80_1 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
      $80_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     }
     $211$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $209$hi;
     i64toi32_i32$3 = $209_1;
     i64toi32_i32$0 = $211$hi;
     i64toi32_i32$2 = $80_1;
     i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $10_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     $10$hi = i64toi32_i32$0;
     i64toi32_i32$1 = $10_1;
     i64toi32_i32$3 = 65536;
     i64toi32_i32$2 = 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0) {
      continue label$17
     }
     break label$17;
    };
   }
   $6_1 = $7_1 & 32768 | 0;
   label$18 : {
    if (($8_1 | 0) > (0 | 0)) {
     break label$18
    }
    $220_1 = $5_1 + 64 | 0;
    i64toi32_i32$1 = $4$hi;
    $221_1 = $4_1;
    $221$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $10$hi;
    i64toi32_i32$2 = $10_1;
    i64toi32_i32$0 = 65535;
    i64toi32_i32$3 = -1;
    i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
    $223_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $223$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = $8_1 + 120 | 0 | $6_1 | 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     $81_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $81_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    }
    $229$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $223$hi;
    i64toi32_i32$0 = $223_1;
    i64toi32_i32$1 = $229$hi;
    i64toi32_i32$3 = $81_1;
    i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $230_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
    $230$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $221$hi;
    i64toi32_i32$0 = $230$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 1065811968;
    $693($220_1 | 0, $221_1 | 0, i64toi32_i32$1 | 0, $230_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$0 = $5_1 + 72 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$2;
    $4$hi = i64toi32_i32$3;
    break label$1;
   }
   i64toi32_i32$3 = $10$hi;
   i64toi32_i32$0 = $10_1;
   i64toi32_i32$2 = 65535;
   i64toi32_i32$1 = -1;
   i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
   $237_1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
   $237$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = $8_1 | $6_1 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 48;
   i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
    $82_1 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
    $82_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
   }
   $242$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $237$hi;
   i64toi32_i32$2 = $237_1;
   i64toi32_i32$3 = $242$hi;
   i64toi32_i32$1 = $82_1;
   i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
   $2_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
   $2$hi = i64toi32_i32$3;
  }
  i64toi32_i32$3 = $4$hi;
  i64toi32_i32$2 = $0_1;
  HEAP32[i64toi32_i32$2 >> 2] = $4_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$3;
  i64toi32_i32$3 = $2$hi;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $2_1;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$3;
  global$0 = $5_1 + 128 | 0;
 }
 
 function $2171($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $8_1 = 0, $32_1 = 0.0, i64toi32_i32$0 = 0;
  label$1 : {
   label$2 : {
    if (($1_1 | 0) < (1024 | 0)) {
     break label$2
    }
    $0_1 = $0_1 * 8988465674311579538646525.0e283;
    label$3 : {
     if (($1_1 | 0) >= (2047 | 0)) {
      break label$3
     }
     $1_1 = $1_1 + -1023 | 0;
     break label$1;
    }
    $0_1 = $0_1 * 8988465674311579538646525.0e283;
    $1_1 = (($1_1 | 0) < (3069 | 0) ? $1_1 : 3069) + -2046 | 0;
    break label$1;
   }
   if (($1_1 | 0) > (-1023 | 0)) {
    break label$1
   }
   $0_1 = $0_1 * 2.2250738585072014e-308;
   label$4 : {
    if (($1_1 | 0) <= (-2045 | 0)) {
     break label$4
    }
    $1_1 = $1_1 + 1022 | 0;
    break label$1;
   }
   $0_1 = $0_1 * 2.2250738585072014e-308;
   $1_1 = (($1_1 | 0) > (-3066 | 0) ? $1_1 : -3066) + 2044 | 0;
  }
  $32_1 = $0_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $1_1 + 1023 | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 52;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $8_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $8_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  wasm2js_scratch_store_i32(0 | 0, $8_1 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$1 | 0);
  return +($32_1 * +wasm2js_scratch_load_f64());
 }
 
 function $2172($0_1, $0$hi, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $4$hi = 0, $4_1 = 0, $13_1 = 0, $2_1 = 0, $3_1 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $4_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $4$hi = i64toi32_i32$1;
  label$1 : {
   label$2 : {
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $13_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $13_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $2_1 = $13_1 & 32767 | 0;
    if (($2_1 | 0) == (32767 | 0)) {
     break label$2
    }
    $3_1 = 4;
    if ($2_1) {
     break label$1
    }
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    return (!(i64toi32_i32$1 | i64toi32_i32$3 | 0 | i64toi32_i32$0 | 0) ? 2 : 3) | 0;
   }
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$1 = $0$hi;
   i64toi32_i32$3 = $0_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $3_1 = !(i64toi32_i32$2 | i64toi32_i32$3 | 0 | i64toi32_i32$1 | 0);
  }
  return $3_1 | 0;
 }
 
 function $2173($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  label$1 : {
   if ($2_1 >>> 0 < 512 >>> 0) {
    break label$1
   }
   fimport$100($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
   return $0_1 | 0;
  }
  $3_1 = $0_1 + $2_1 | 0;
  label$2 : {
   label$3 : {
    if (($1_1 ^ $0_1 | 0) & 3 | 0) {
     break label$3
    }
    label$4 : {
     label$5 : {
      if (($2_1 | 0) >= (1 | 0)) {
       break label$5
      }
      $2_1 = $0_1;
      break label$4;
     }
     label$6 : {
      if ($0_1 & 3 | 0) {
       break label$6
      }
      $2_1 = $0_1;
      break label$4;
     }
     $2_1 = $0_1;
     label$7 : while (1) {
      HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
      $1_1 = $1_1 + 1 | 0;
      $2_1 = $2_1 + 1 | 0;
      if ($2_1 >>> 0 >= $3_1 >>> 0) {
       break label$4
      }
      if ($2_1 & 3 | 0) {
       continue label$7
      }
      break label$7;
     };
    }
    label$8 : {
     $4_1 = $3_1 & -4 | 0;
     if ($4_1 >>> 0 < 64 >>> 0) {
      break label$8
     }
     $5_1 = $4_1 + -64 | 0;
     if ($2_1 >>> 0 > $5_1 >>> 0) {
      break label$8
     }
     label$9 : while (1) {
      HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
      HEAP32[($2_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
      HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
      HEAP32[($2_1 + 16 | 0) >> 2] = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
      HEAP32[($2_1 + 20 | 0) >> 2] = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
      HEAP32[($2_1 + 24 | 0) >> 2] = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
      HEAP32[($2_1 + 28 | 0) >> 2] = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
      HEAP32[($2_1 + 32 | 0) >> 2] = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
      HEAP32[($2_1 + 36 | 0) >> 2] = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
      HEAP32[($2_1 + 40 | 0) >> 2] = HEAP32[($1_1 + 40 | 0) >> 2] | 0;
      HEAP32[($2_1 + 44 | 0) >> 2] = HEAP32[($1_1 + 44 | 0) >> 2] | 0;
      HEAP32[($2_1 + 48 | 0) >> 2] = HEAP32[($1_1 + 48 | 0) >> 2] | 0;
      HEAP32[($2_1 + 52 | 0) >> 2] = HEAP32[($1_1 + 52 | 0) >> 2] | 0;
      HEAP32[($2_1 + 56 | 0) >> 2] = HEAP32[($1_1 + 56 | 0) >> 2] | 0;
      HEAP32[($2_1 + 60 | 0) >> 2] = HEAP32[($1_1 + 60 | 0) >> 2] | 0;
      $1_1 = $1_1 + 64 | 0;
      $2_1 = $2_1 + 64 | 0;
      if ($2_1 >>> 0 <= $5_1 >>> 0) {
       continue label$9
      }
      break label$9;
     };
    }
    if ($2_1 >>> 0 >= $4_1 >>> 0) {
     break label$2
    }
    label$10 : while (1) {
     HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
     $1_1 = $1_1 + 4 | 0;
     $2_1 = $2_1 + 4 | 0;
     if ($2_1 >>> 0 < $4_1 >>> 0) {
      continue label$10
     }
     break label$2;
    };
   }
   label$11 : {
    if ($3_1 >>> 0 >= 4 >>> 0) {
     break label$11
    }
    $2_1 = $0_1;
    break label$2;
   }
   label$12 : {
    $4_1 = $3_1 + -4 | 0;
    if ($4_1 >>> 0 >= $0_1 >>> 0) {
     break label$12
    }
    $2_1 = $0_1;
    break label$2;
   }
   $2_1 = $0_1;
   label$13 : while (1) {
    HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
    HEAP8[($2_1 + 1 | 0) >> 0] = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    HEAP8[($2_1 + 2 | 0) >> 0] = HEAPU8[($1_1 + 2 | 0) >> 0] | 0;
    HEAP8[($2_1 + 3 | 0) >> 0] = HEAPU8[($1_1 + 3 | 0) >> 0] | 0;
    $1_1 = $1_1 + 4 | 0;
    $2_1 = $2_1 + 4 | 0;
    if ($2_1 >>> 0 <= $4_1 >>> 0) {
     continue label$13
    }
    break label$13;
   };
  }
  label$14 : {
   if ($2_1 >>> 0 >= $3_1 >>> 0) {
    break label$14
   }
   label$15 : while (1) {
    HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
    $1_1 = $1_1 + 1 | 0;
    $2_1 = $2_1 + 1 | 0;
    if (($2_1 | 0) != ($3_1 | 0)) {
     continue label$15
    }
    break label$15;
   };
  }
  return $0_1 | 0;
 }
 
 function $2174($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, $4_1 = 0, $6_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, $6$hi = 0, i64toi32_i32$3 = 0, $5_1 = 0, $14_1 = 0, $104$hi = 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $3_1 = $2_1 + $0_1 | 0;
   HEAP8[($3_1 + -1 | 0) >> 0] = $1_1;
   HEAP8[$0_1 >> 0] = $1_1;
   if ($2_1 >>> 0 < 3 >>> 0) {
    break label$1
   }
   HEAP8[($3_1 + -2 | 0) >> 0] = $1_1;
   HEAP8[($0_1 + 1 | 0) >> 0] = $1_1;
   HEAP8[($3_1 + -3 | 0) >> 0] = $1_1;
   HEAP8[($0_1 + 2 | 0) >> 0] = $1_1;
   if ($2_1 >>> 0 < 7 >>> 0) {
    break label$1
   }
   HEAP8[($3_1 + -4 | 0) >> 0] = $1_1;
   HEAP8[($0_1 + 3 | 0) >> 0] = $1_1;
   if ($2_1 >>> 0 < 9 >>> 0) {
    break label$1
   }
   $4_1 = (0 - $0_1 | 0) & 3 | 0;
   $3_1 = $0_1 + $4_1 | 0;
   $1_1 = Math_imul($1_1 & 255 | 0, 16843009);
   HEAP32[$3_1 >> 2] = $1_1;
   $4_1 = ($2_1 - $4_1 | 0) & -4 | 0;
   $2_1 = $3_1 + $4_1 | 0;
   HEAP32[($2_1 + -4 | 0) >> 2] = $1_1;
   if ($4_1 >>> 0 < 9 >>> 0) {
    break label$1
   }
   HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 4 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -8 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -12 | 0) >> 2] = $1_1;
   if ($4_1 >>> 0 < 25 >>> 0) {
    break label$1
   }
   HEAP32[($3_1 + 24 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 20 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 16 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -16 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -20 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -24 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -28 | 0) >> 2] = $1_1;
   $5_1 = $3_1 & 4 | 0 | 24 | 0;
   $2_1 = $4_1 - $5_1 | 0;
   if ($2_1 >>> 0 < 32 >>> 0) {
    break label$1
   }
   i64toi32_i32$0 = 0;
   $6_1 = $1_1;
   $6$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    $14_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
    $14_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   }
   $104$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $6$hi;
   i64toi32_i32$1 = $104$hi;
   i64toi32_i32$0 = $14_1;
   i64toi32_i32$2 = $6$hi;
   i64toi32_i32$3 = $6_1;
   i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
   $6_1 = i64toi32_i32$0 | $6_1 | 0;
   $6$hi = i64toi32_i32$2;
   $1_1 = $3_1 + $5_1 | 0;
   label$2 : while (1) {
    i64toi32_i32$2 = $6$hi;
    i64toi32_i32$0 = $1_1;
    HEAP32[($1_1 + 24 | 0) >> 2] = $6_1;
    HEAP32[($1_1 + 28 | 0) >> 2] = i64toi32_i32$2;
    i64toi32_i32$0 = $1_1;
    HEAP32[($1_1 + 16 | 0) >> 2] = $6_1;
    HEAP32[($1_1 + 20 | 0) >> 2] = i64toi32_i32$2;
    i64toi32_i32$0 = $1_1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $6_1;
    HEAP32[($1_1 + 12 | 0) >> 2] = i64toi32_i32$2;
    i64toi32_i32$0 = $1_1;
    HEAP32[$1_1 >> 2] = $6_1;
    HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$2;
    $1_1 = $1_1 + 32 | 0;
    $2_1 = $2_1 + -32 | 0;
    if ($2_1 >>> 0 > 31 >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return $0_1 | 0;
 }
 
 function $2175($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   if (($0_1 | 0) == ($1_1 | 0)) {
    break label$1
   }
   label$2 : {
    if ((($1_1 - $0_1 | 0) - $2_1 | 0) >>> 0 > (0 - ($2_1 << 1 | 0) | 0) >>> 0) {
     break label$2
    }
    return $2173($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
   }
   $3_1 = ($1_1 ^ $0_1 | 0) & 3 | 0;
   label$3 : {
    label$4 : {
     label$5 : {
      if ($0_1 >>> 0 >= $1_1 >>> 0) {
       break label$5
      }
      label$6 : {
       if (!$3_1) {
        break label$6
       }
       $3_1 = $0_1;
       break label$3;
      }
      label$7 : {
       if ($0_1 & 3 | 0) {
        break label$7
       }
       $3_1 = $0_1;
       break label$4;
      }
      $3_1 = $0_1;
      label$8 : while (1) {
       if (!$2_1) {
        break label$1
       }
       HEAP8[$3_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
       $1_1 = $1_1 + 1 | 0;
       $2_1 = $2_1 + -1 | 0;
       $3_1 = $3_1 + 1 | 0;
       if (!($3_1 & 3 | 0)) {
        break label$4
       }
       continue label$8;
      };
     }
     label$9 : {
      if ($3_1) {
       break label$9
      }
      label$10 : {
       if (!(($0_1 + $2_1 | 0) & 3 | 0)) {
        break label$10
       }
       label$11 : while (1) {
        if (!$2_1) {
         break label$1
        }
        $2_1 = $2_1 + -1 | 0;
        $3_1 = $0_1 + $2_1 | 0;
        HEAP8[$3_1 >> 0] = HEAPU8[($1_1 + $2_1 | 0) >> 0] | 0;
        if ($3_1 & 3 | 0) {
         continue label$11
        }
        break label$11;
       };
      }
      if ($2_1 >>> 0 <= 3 >>> 0) {
       break label$9
      }
      label$12 : while (1) {
       $2_1 = $2_1 + -4 | 0;
       HEAP32[($0_1 + $2_1 | 0) >> 2] = HEAP32[($1_1 + $2_1 | 0) >> 2] | 0;
       if ($2_1 >>> 0 > 3 >>> 0) {
        continue label$12
       }
       break label$12;
      };
     }
     if (!$2_1) {
      break label$1
     }
     label$13 : while (1) {
      $2_1 = $2_1 + -1 | 0;
      HEAP8[($0_1 + $2_1 | 0) >> 0] = HEAPU8[($1_1 + $2_1 | 0) >> 0] | 0;
      if ($2_1) {
       continue label$13
      }
      break label$1;
     };
    }
    if ($2_1 >>> 0 <= 3 >>> 0) {
     break label$3
    }
    label$14 : while (1) {
     HEAP32[$3_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
     $1_1 = $1_1 + 4 | 0;
     $3_1 = $3_1 + 4 | 0;
     $2_1 = $2_1 + -4 | 0;
     if ($2_1 >>> 0 > 3 >>> 0) {
      continue label$14
     }
     break label$14;
    };
   }
   if (!$2_1) {
    break label$1
   }
   label$15 : while (1) {
    HEAP8[$3_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
    $3_1 = $3_1 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue label$15
    }
    break label$15;
   };
  }
  return $0_1 | 0;
 }
 
 function $2176($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAPU8[($0_1 + 74 | 0) >> 0] | 0;
  HEAP8[($0_1 + 74 | 0) >> 0] = $1_1 + -1 | 0 | $1_1 | 0;
  label$1 : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!($1_1 & 8 | 0)) {
    break label$1
   }
   HEAP32[$0_1 >> 2] = $1_1 | 32 | 0;
   return -1 | 0;
  }
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  $1_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 16 | 0) >> 2] = $1_1 + (HEAP32[($0_1 + 48 | 0) >> 2] | 0) | 0;
  return 0 | 0;
 }
 
 function $2177($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
    if ($3_1) {
     break label$2
    }
    $4_1 = 0;
    if ($2176($2_1 | 0) | 0) {
     break label$1
    }
    $3_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
   }
   label$3 : {
    $5_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
    if (($3_1 - $5_1 | 0) >>> 0 >= $1_1 >>> 0) {
     break label$3
    }
    return FUNCTION_TABLE[HEAP32[($2_1 + 36 | 0) >> 2] | 0 | 0]($2_1, $0_1, $1_1) | 0 | 0;
   }
   $6_1 = 0;
   label$4 : {
    if ((HEAP8[($2_1 + 75 | 0) >> 0] | 0 | 0) < (0 | 0)) {
     break label$4
    }
    $4_1 = $1_1;
    label$5 : while (1) {
     $3_1 = $4_1;
     if (!$3_1) {
      break label$4
     }
     $4_1 = $3_1 + -1 | 0;
     if ((HEAPU8[($0_1 + $4_1 | 0) >> 0] | 0 | 0) != (10 | 0)) {
      continue label$5
     }
     break label$5;
    };
    $4_1 = FUNCTION_TABLE[HEAP32[($2_1 + 36 | 0) >> 2] | 0 | 0]($2_1, $0_1, $3_1) | 0;
    if ($4_1 >>> 0 < $3_1 >>> 0) {
     break label$1
    }
    $0_1 = $0_1 + $3_1 | 0;
    $1_1 = $1_1 - $3_1 | 0;
    $5_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
    $6_1 = $3_1;
   }
   $2173($5_1 | 0, $0_1 | 0, $1_1 | 0) | 0;
   HEAP32[($2_1 + 20 | 0) >> 2] = (HEAP32[($2_1 + 20 | 0) >> 2] | 0) + $1_1 | 0;
   $4_1 = $6_1 + $1_1 | 0;
  }
  return $4_1 | 0;
 }
 
 function $2178($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = Math_imul($2_1, $1_1);
  label$1 : {
   label$2 : {
    if ((HEAP32[($3_1 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
     break label$2
    }
    $0_1 = $2177($0_1 | 0, $4_1 | 0, $3_1 | 0) | 0;
    break label$1;
   }
   $5_1 = $2179($3_1 | 0) | 0;
   $0_1 = $2177($0_1 | 0, $4_1 | 0, $3_1 | 0) | 0;
   if (!$5_1) {
    break label$1
   }
   $2180($3_1 | 0);
  }
  label$3 : {
   if (($0_1 | 0) != ($4_1 | 0)) {
    break label$3
   }
   return ($1_1 ? $2_1 : 0) | 0;
  }
  return ($0_1 >>> 0) / ($1_1 >>> 0) | 0 | 0;
 }
 
 function $2179($0_1) {
  $0_1 = $0_1 | 0;
  return 1 | 0;
 }
 
 function $2180($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $2181($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = $0_1;
  label$1 : {
   label$2 : {
    if (!($0_1 & 3 | 0)) {
     break label$2
    }
    label$3 : {
     if (HEAPU8[$0_1 >> 0] | 0) {
      break label$3
     }
     return $0_1 - $0_1 | 0 | 0;
    }
    $1_1 = $0_1;
    label$4 : while (1) {
     $1_1 = $1_1 + 1 | 0;
     if (!($1_1 & 3 | 0)) {
      break label$2
     }
     if (!(HEAPU8[$1_1 >> 0] | 0)) {
      break label$1
     }
     continue label$4;
    };
   }
   label$5 : while (1) {
    $2_1 = $1_1;
    $1_1 = $1_1 + 4 | 0;
    $3_1 = HEAP32[$2_1 >> 2] | 0;
    if (!((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0)) {
     continue label$5
    }
    break label$5;
   };
   label$6 : {
    if ($3_1 & 255 | 0) {
     break label$6
    }
    return $2_1 - $0_1 | 0 | 0;
   }
   label$7 : while (1) {
    $3_1 = HEAPU8[($2_1 + 1 | 0) >> 0] | 0;
    $1_1 = $2_1 + 1 | 0;
    $2_1 = $1_1;
    if ($3_1) {
     continue label$7
    }
    break label$7;
   };
  }
  return $1_1 - $0_1 | 0 | 0;
 }
 
 function $2182() {
  return global$0 | 0;
 }
 
 function $2183($0_1) {
  $0_1 = $0_1 | 0;
  global$0 = $0_1;
 }
 
 function $2184($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = (global$0 - $0_1 | 0) & -16 | 0;
  global$0 = $1_1;
  return $1_1 | 0;
 }
 
 function $2185($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (HEAP32[(0 + 337172 | 0) >> 2] | 0) {
    break label$1
   }
   HEAP32[(0 + 337176 | 0) >> 2] = $1_1;
   HEAP32[(0 + 337172 | 0) >> 2] = $0_1;
  }
 }
 
 function $2186($0_1, $1_1, $2_1, $3_1, $3$hi, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $3$hi;
  FUNCTION_TABLE[$0_1 | 0]($1_1, $2_1, $3_1, i64toi32_i32$0, $4_1, $5_1);
 }
 
 function $2187($0_1, $1_1, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$0 = FUNCTION_TABLE[$0_1 | 0]($1_1, $2_1, i64toi32_i32$0, $3_1) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $2188($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $5$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5$hi = $5$hi | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $5$hi;
  return FUNCTION_TABLE[$0_1 | 0]($1_1, $2_1, $3_1, $4_1, $5_1, i64toi32_i32$0) | 0 | 0;
 }
 
 function $2189($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $5$hi, $6_1, $6$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5$hi = $5$hi | 0;
  $6_1 = $6_1 | 0;
  $6$hi = $6$hi | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $5$hi;
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$0 = $5$hi;
  return FUNCTION_TABLE[$0_1 | 0]($1_1, $2_1, $3_1, $4_1, $5_1, i64toi32_i32$0, $6_1, $6$hi) | 0 | 0;
 }
 
 function $2190($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $6$hi, $7_1, $7$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $6$hi = $6$hi | 0;
  $7_1 = $7_1 | 0;
  $7$hi = $7$hi | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$0 = $7$hi;
  i64toi32_i32$0 = $6$hi;
  return FUNCTION_TABLE[$0_1 | 0]($1_1, $2_1, $3_1, $4_1, $5_1, $6_1, i64toi32_i32$0, $7_1, $7$hi) | 0 | 0;
 }
 
 function $2191($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $18_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $11_1 = 0, $11$hi = 0, $14$hi = 0;
  $7_1 = $0_1;
  $8_1 = $1_1;
  $9_1 = $2_1;
  i64toi32_i32$0 = 0;
  $11_1 = $3_1;
  $11$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $18_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $18_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $14$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $11$hi;
  i64toi32_i32$0 = $11_1;
  i64toi32_i32$2 = $14$hi;
  i64toi32_i32$3 = $18_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  $2186($7_1 | 0, $8_1 | 0, $9_1 | 0, i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0, i64toi32_i32$2 | 0, $5_1 | 0, $6_1 | 0);
 }
 
 function $2192($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $17_1 = 0, $18_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0, $9$hi = 0, $12$hi = 0, $5_1 = 0, $5$hi = 0;
  $6_1 = $0_1;
  $7_1 = $1_1;
  i64toi32_i32$0 = 0;
  $9_1 = $2_1;
  $9$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $17_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $17_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $9$hi;
  i64toi32_i32$0 = $9_1;
  i64toi32_i32$2 = $12$hi;
  i64toi32_i32$3 = $17_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  i64toi32_i32$2 = $2187($6_1 | 0, $7_1 | 0, i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0, i64toi32_i32$2 | 0, $4_1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $5_1 = i64toi32_i32$2;
  $5$hi = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $18_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $18_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
  }
  fimport$101($18_1 | 0);
  i64toi32_i32$2 = $5$hi;
  return $5_1 | 0;
 }
 
 function $2193($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $20_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $13_1 = 0, $13$hi = 0, $16$hi = 0;
  $7_1 = $0_1;
  $8_1 = $1_1;
  $9_1 = $2_1;
  $10_1 = $3_1;
  $11_1 = $4_1;
  i64toi32_i32$0 = 0;
  $13_1 = $5_1;
  $13$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $6_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $20_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $20_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $16$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $13$hi;
  i64toi32_i32$0 = $13_1;
  i64toi32_i32$2 = $16$hi;
  i64toi32_i32$3 = $20_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  return $2188($7_1 | 0, $8_1 | 0, $9_1 | 0, $10_1 | 0, $11_1 | 0, i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0, i64toi32_i32$2 | 0) | 0 | 0;
 }
 
 function $2194($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $29_1 = 0, $30_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $15_1 = 0, $15$hi = 0, $18$hi = 0, $19_1 = 0, $19$hi = 0, $21_1 = 0, $21$hi = 0, $24$hi = 0, $25_1 = 0, $25$hi = 0;
  $9_1 = $0_1;
  $10_1 = $1_1;
  $11_1 = $2_1;
  $12_1 = $3_1;
  $13_1 = $4_1;
  i64toi32_i32$0 = 0;
  $15_1 = $5_1;
  $15$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $6_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $29_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $29_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $18$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $15$hi;
  i64toi32_i32$0 = $15_1;
  i64toi32_i32$2 = $18$hi;
  i64toi32_i32$3 = $29_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  $19_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
  $19$hi = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  $21_1 = $7_1;
  $21$hi = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $8_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $30_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $30_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $24$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $21$hi;
  i64toi32_i32$2 = $21_1;
  i64toi32_i32$1 = $24$hi;
  i64toi32_i32$3 = $30_1;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  $25_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  $25$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $19$hi;
  i64toi32_i32$2 = $25$hi;
  return $2189($9_1 | 0, $10_1 | 0, $11_1 | 0, $12_1 | 0, $13_1 | 0, $19_1 | 0, i64toi32_i32$1 | 0, $25_1 | 0, i64toi32_i32$2 | 0) | 0 | 0;
 }
 
 function $2195($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $31_1 = 0, $32_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $17_1 = 0, $17$hi = 0, $20$hi = 0, $21_1 = 0, $21$hi = 0, $23_1 = 0, $23$hi = 0, $26$hi = 0, $27_1 = 0, $27$hi = 0;
  $10_1 = $0_1;
  $11_1 = $1_1;
  $12_1 = $2_1;
  $13_1 = $3_1;
  $14_1 = $4_1;
  $15_1 = $5_1;
  i64toi32_i32$0 = 0;
  $17_1 = $6_1;
  $17$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $7_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $31_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $31_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $20$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $17$hi;
  i64toi32_i32$0 = $17_1;
  i64toi32_i32$2 = $20$hi;
  i64toi32_i32$3 = $31_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  $21_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
  $21$hi = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  $23_1 = $8_1;
  $23$hi = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $9_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $32_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $32_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $26$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $23$hi;
  i64toi32_i32$2 = $23_1;
  i64toi32_i32$1 = $26$hi;
  i64toi32_i32$3 = $32_1;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  $27_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  $27$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $21$hi;
  i64toi32_i32$2 = $27$hi;
  return $2190($10_1 | 0, $11_1 | 0, $12_1 | 0, $13_1 | 0, $14_1 | 0, $15_1 | 0, $21_1 | 0, i64toi32_i32$1 | 0, $27_1 | 0, i64toi32_i32$2 | 0) | 0 | 0;
 }
 
 function $2196($0_1, $1_1, $1$hi, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $12_1 = 0, $4_1 = 0, $6_1 = 0, i64toi32_i32$2 = 0;
  $4_1 = $0_1;
  i64toi32_i32$0 = $1$hi;
  $6_1 = $1_1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $12_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $12_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  return fimport$102($4_1 | 0, $6_1 | 0, $12_1 | 0, $2_1 | 0, $3_1 | 0) | 0 | 0;
 }
 
 function $2197($0_1) {
  $0_1 = $0_1 | 0;
  return abort() | 0;
 }
 
 function _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, var$2 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, var$3 = 0, var$4 = 0, var$5 = 0, $21_1 = 0, $22_1 = 0, var$6 = 0, $24_1 = 0, $17_1 = 0, $18_1 = 0, $23_1 = 0, $29_1 = 0, $45_1 = 0, $56$hi = 0, $62$hi = 0;
  i64toi32_i32$0 = var$1$hi;
  var$2 = var$1;
  var$4 = var$2 >>> 16 | 0;
  i64toi32_i32$0 = var$0$hi;
  var$3 = var$0;
  var$5 = var$3 >>> 16 | 0;
  $17_1 = Math_imul(var$4, var$5);
  $18_1 = var$2;
  i64toi32_i32$2 = var$3;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $21_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $21_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $23_1 = $17_1 + Math_imul($18_1, $21_1) | 0;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$0 = var$1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $22_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $22_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $29_1 = $23_1 + Math_imul($22_1, var$3) | 0;
  var$2 = var$2 & 65535 | 0;
  var$3 = var$3 & 65535 | 0;
  var$6 = Math_imul(var$2, var$3);
  var$2 = (var$6 >>> 16 | 0) + Math_imul(var$2, var$5) | 0;
  $45_1 = $29_1 + (var$2 >>> 16 | 0) | 0;
  var$2 = (var$2 & 65535 | 0) + Math_imul(var$4, var$3) | 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $45_1 + (var$2 >>> 16 | 0) | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $24_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $24_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $56$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  $62$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $56$hi;
  i64toi32_i32$2 = $24_1;
  i64toi32_i32$1 = $62$hi;
  i64toi32_i32$3 = var$2 << 16 | 0 | (var$6 & 65535 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  i64toi32_i32$2 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$2 | 0;
 }
 
 function _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, var$2 = 0, var$3 = 0, var$4 = 0, var$5 = 0, var$5$hi = 0, var$6 = 0, var$6$hi = 0, i64toi32_i32$6 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, var$8$hi = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, var$7$hi = 0, $49_1 = 0, $63$hi = 0, $65_1 = 0, $65$hi = 0, $120$hi = 0, $129$hi = 0, $134$hi = 0, var$8 = 0, $140_1 = 0, $140$hi = 0, $142$hi = 0, $144_1 = 0, $144$hi = 0, $151_1 = 0, $151$hi = 0, $154$hi = 0, var$7 = 0, $165$hi = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             i64toi32_i32$0 = var$0$hi;
             i64toi32_i32$2 = var$0;
             i64toi32_i32$1 = 0;
             i64toi32_i32$3 = 32;
             i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
             if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
              i64toi32_i32$1 = 0;
              $37_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
             } else {
              i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
              $37_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
             }
             var$2 = $37_1;
             if (var$2) {
              block : {
               i64toi32_i32$1 = var$1$hi;
               var$3 = var$1;
               if (!var$3) {
                break label$11
               }
               i64toi32_i32$1 = var$1$hi;
               i64toi32_i32$0 = var$1;
               i64toi32_i32$2 = 0;
               i64toi32_i32$3 = 32;
               i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
               if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
                i64toi32_i32$2 = 0;
                $38_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
               } else {
                i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
                $38_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
               }
               var$4 = $38_1;
               if (!var$4) {
                break label$9
               }
               var$2 = Math_clz32(var$4) - Math_clz32(var$2) | 0;
               if (var$2 >>> 0 <= 31 >>> 0) {
                break label$8
               }
               break label$2;
              }
             }
             i64toi32_i32$2 = var$1$hi;
             i64toi32_i32$1 = var$1;
             i64toi32_i32$0 = 1;
             i64toi32_i32$3 = 0;
             if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
              break label$2
             }
             i64toi32_i32$1 = var$0$hi;
             var$2 = var$0;
             i64toi32_i32$1 = var$1$hi;
             var$3 = var$1;
             var$2 = (var$2 >>> 0) / (var$3 >>> 0) | 0;
             i64toi32_i32$1 = 0;
             __wasm_intrinsics_temp_i64 = var$0 - Math_imul(var$2, var$3) | 0;
             __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
             i64toi32_i32$1 = 0;
             i64toi32_i32$2 = var$2;
             i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
             return i64toi32_i32$2 | 0;
            }
            i64toi32_i32$2 = var$1$hi;
            i64toi32_i32$3 = var$1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$0 = 32;
            i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
             i64toi32_i32$1 = 0;
             $39_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
            } else {
             i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
             $39_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
            }
            var$3 = $39_1;
            i64toi32_i32$1 = var$0$hi;
            if (!var$0) {
             break label$7
            }
            if (!var$3) {
             break label$6
            }
            var$4 = var$3 + -1 | 0;
            if (var$4 & var$3 | 0) {
             break label$6
            }
            i64toi32_i32$1 = 0;
            i64toi32_i32$2 = var$4 & var$2 | 0;
            i64toi32_i32$3 = 0;
            i64toi32_i32$0 = 32;
            i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
             i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
             $40_1 = 0;
            } else {
             i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
             $40_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
            }
            $63$hi = i64toi32_i32$3;
            i64toi32_i32$3 = var$0$hi;
            i64toi32_i32$1 = var$0;
            i64toi32_i32$2 = 0;
            i64toi32_i32$0 = -1;
            i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
            $65_1 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
            $65$hi = i64toi32_i32$2;
            i64toi32_i32$2 = $63$hi;
            i64toi32_i32$3 = $40_1;
            i64toi32_i32$1 = $65$hi;
            i64toi32_i32$0 = $65_1;
            i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
            __wasm_intrinsics_temp_i64 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
            __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$3 = var$2 >>> ((__wasm_ctz_i32(var$3 | 0) | 0) & 31 | 0) | 0;
            i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
            return i64toi32_i32$3 | 0;
           }
          }
          var$4 = var$3 + -1 | 0;
          if (!(var$4 & var$3 | 0)) {
           break label$5
          }
          var$2 = (Math_clz32(var$3) + 33 | 0) - Math_clz32(var$2) | 0;
          var$3 = 0 - var$2 | 0;
          break label$3;
         }
         var$3 = 63 - var$2 | 0;
         var$2 = var$2 + 1 | 0;
         break label$3;
        }
        var$4 = (var$2 >>> 0) / (var$3 >>> 0) | 0;
        i64toi32_i32$3 = 0;
        i64toi32_i32$2 = var$2 - Math_imul(var$4, var$3) | 0;
        i64toi32_i32$1 = 0;
        i64toi32_i32$0 = 32;
        i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
         $41_1 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
         $41_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
        }
        __wasm_intrinsics_temp_i64 = $41_1;
        __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
        i64toi32_i32$1 = 0;
        i64toi32_i32$2 = var$4;
        i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
        return i64toi32_i32$2 | 0;
       }
       var$2 = Math_clz32(var$3) - Math_clz32(var$2) | 0;
       if (var$2 >>> 0 < 31 >>> 0) {
        break label$4
       }
       break label$2;
      }
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$2 = 0;
      __wasm_intrinsics_temp_i64 = var$4 & var$0 | 0;
      __wasm_intrinsics_temp_i64$hi = i64toi32_i32$2;
      if ((var$3 | 0) == (1 | 0)) {
       break label$1
      }
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$2 = 0;
      $120$hi = i64toi32_i32$2;
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$3 = var$0;
      i64toi32_i32$1 = $120$hi;
      i64toi32_i32$0 = __wasm_ctz_i32(var$3 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $42_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
       $42_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
      }
      i64toi32_i32$3 = $42_1;
      i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
      return i64toi32_i32$3 | 0;
     }
     var$3 = 63 - var$2 | 0;
     var$2 = var$2 + 1 | 0;
    }
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$3 = 0;
    $129$hi = i64toi32_i32$3;
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$2 = var$0;
    i64toi32_i32$1 = $129$hi;
    i64toi32_i32$0 = var$2 & 63 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $43_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
     $43_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    var$5 = $43_1;
    var$5$hi = i64toi32_i32$1;
    i64toi32_i32$1 = var$0$hi;
    i64toi32_i32$1 = 0;
    $134$hi = i64toi32_i32$1;
    i64toi32_i32$1 = var$0$hi;
    i64toi32_i32$3 = var$0;
    i64toi32_i32$2 = $134$hi;
    i64toi32_i32$0 = var$3 & 63 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     $44_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $44_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
    }
    var$0 = $44_1;
    var$0$hi = i64toi32_i32$2;
    label$13 : {
     if (var$2) {
      block3 : {
       i64toi32_i32$2 = var$1$hi;
       i64toi32_i32$1 = var$1;
       i64toi32_i32$3 = -1;
       i64toi32_i32$0 = -1;
       i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
       i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       var$8 = i64toi32_i32$4;
       var$8$hi = i64toi32_i32$5;
       label$15 : while (1) {
        i64toi32_i32$5 = var$5$hi;
        i64toi32_i32$2 = var$5;
        i64toi32_i32$1 = 0;
        i64toi32_i32$0 = 1;
        i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
         $45_1 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
         $45_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
        }
        $140_1 = $45_1;
        $140$hi = i64toi32_i32$1;
        i64toi32_i32$1 = var$0$hi;
        i64toi32_i32$5 = var$0;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 63;
        i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$2 = 0;
         $46_1 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
        } else {
         i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
         $46_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
        }
        $142$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $140$hi;
        i64toi32_i32$1 = $140_1;
        i64toi32_i32$5 = $142$hi;
        i64toi32_i32$0 = $46_1;
        i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
        var$5 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
        var$5$hi = i64toi32_i32$5;
        $144_1 = var$5;
        $144$hi = i64toi32_i32$5;
        i64toi32_i32$5 = var$8$hi;
        i64toi32_i32$5 = var$5$hi;
        i64toi32_i32$5 = var$8$hi;
        i64toi32_i32$2 = var$8;
        i64toi32_i32$1 = var$5$hi;
        i64toi32_i32$0 = var$5;
        i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
        i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
        i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
        i64toi32_i32$5 = i64toi32_i32$3;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 63;
        i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
         $47_1 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
        } else {
         i64toi32_i32$2 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
         $47_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
        }
        var$6 = $47_1;
        var$6$hi = i64toi32_i32$2;
        i64toi32_i32$2 = var$1$hi;
        i64toi32_i32$2 = var$6$hi;
        i64toi32_i32$4 = var$6;
        i64toi32_i32$5 = var$1$hi;
        i64toi32_i32$0 = var$1;
        i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
        $151_1 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
        $151$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $144$hi;
        i64toi32_i32$2 = $144_1;
        i64toi32_i32$4 = $151$hi;
        i64toi32_i32$0 = $151_1;
        i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
        i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
        i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
        i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$3 | 0;
        var$5 = i64toi32_i32$1;
        var$5$hi = i64toi32_i32$3;
        i64toi32_i32$3 = var$0$hi;
        i64toi32_i32$5 = var$0;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 1;
        i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
         $48_1 = 0;
        } else {
         i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
         $48_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
        }
        $154$hi = i64toi32_i32$2;
        i64toi32_i32$2 = var$7$hi;
        i64toi32_i32$2 = $154$hi;
        i64toi32_i32$3 = $48_1;
        i64toi32_i32$5 = var$7$hi;
        i64toi32_i32$0 = var$7;
        i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
        var$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
        var$0$hi = i64toi32_i32$5;
        i64toi32_i32$5 = var$6$hi;
        i64toi32_i32$2 = var$6;
        i64toi32_i32$3 = 0;
        i64toi32_i32$0 = 1;
        i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
        var$6 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
        var$6$hi = i64toi32_i32$3;
        var$7 = var$6;
        var$7$hi = i64toi32_i32$3;
        var$2 = var$2 + -1 | 0;
        if (var$2) {
         continue label$15
        }
        break label$15;
       };
       break label$13;
      }
     }
    }
    i64toi32_i32$3 = var$5$hi;
    __wasm_intrinsics_temp_i64 = var$5;
    __wasm_intrinsics_temp_i64$hi = i64toi32_i32$3;
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$5 = var$0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 1;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     $49_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
     $49_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
    }
    $165$hi = i64toi32_i32$2;
    i64toi32_i32$2 = var$6$hi;
    i64toi32_i32$2 = $165$hi;
    i64toi32_i32$3 = $49_1;
    i64toi32_i32$5 = var$6$hi;
    i64toi32_i32$0 = var$6;
    i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
    i64toi32_i32$3 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
    return i64toi32_i32$3 | 0;
   }
   i64toi32_i32$3 = var$0$hi;
   __wasm_intrinsics_temp_i64 = var$0;
   __wasm_intrinsics_temp_i64$hi = i64toi32_i32$3;
   i64toi32_i32$3 = 0;
   var$0 = 0;
   var$0$hi = i64toi32_i32$3;
  }
  i64toi32_i32$3 = var$0$hi;
  i64toi32_i32$5 = var$0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$3;
  return i64toi32_i32$5 | 0;
 }
 
 function __wasm_i64_mul(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_i64_udiv(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_popcnt_i32(var$0) {
  var$0 = var$0 | 0;
  var var$1 = 0, $5_1 = 0;
  label$1 : {
   label$2 : while (1) {
    $5_1 = var$1;
    if (!var$0) {
     break label$1
    }
    var$0 = var$0 & (var$0 - 1 | 0) | 0;
    var$1 = var$1 + 1 | 0;
    continue label$2;
   };
  }
  return $5_1 | 0;
 }
 
 function __wasm_rotl_i32(var$0, var$1) {
  var$0 = var$0 | 0;
  var$1 = var$1 | 0;
  var var$2 = 0;
  var$2 = var$1 & 31 | 0;
  var$1 = (0 - var$1 | 0) & 31 | 0;
  return ((-1 >>> var$2 | 0) & var$0 | 0) << var$2 | 0 | (((-1 << var$1 | 0) & var$0 | 0) >>> var$1 | 0) | 0 | 0;
 }
 
 function __wasm_rotl_i64(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, var$2$hi = 0, var$2 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $6$hi = 0, $8$hi = 0, $10_1 = 0, $10$hi = 0, $15$hi = 0, $17$hi = 0, $19$hi = 0;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$2 = var$1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 63;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  var$2 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  var$2$hi = i64toi32_i32$1;
  i64toi32_i32$1 = -1;
  i64toi32_i32$0 = -1;
  i64toi32_i32$2 = var$2$hi;
  i64toi32_i32$3 = var$2;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $19_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $19_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $6$hi = i64toi32_i32$2;
  i64toi32_i32$2 = var$0$hi;
  i64toi32_i32$2 = $6$hi;
  i64toi32_i32$1 = $19_1;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$3 = var$0;
  i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
  $8$hi = i64toi32_i32$0;
  i64toi32_i32$0 = var$2$hi;
  i64toi32_i32$0 = $8$hi;
  i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
  i64toi32_i32$1 = var$2$hi;
  i64toi32_i32$3 = var$2;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $20_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $20_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $10_1 = $20_1;
  $10$hi = i64toi32_i32$1;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = var$1$hi;
  i64toi32_i32$3 = var$1;
  i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
  i64toi32_i32$5 = (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$2 | 0;
  i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
  i64toi32_i32$1 = i64toi32_i32$4;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 63;
  i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
  var$1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
  var$1$hi = i64toi32_i32$0;
  i64toi32_i32$0 = -1;
  i64toi32_i32$5 = -1;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$3 = var$1;
  i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
   $21_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$2 | 0) | 0;
   $21_1 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
  }
  $15$hi = i64toi32_i32$1;
  i64toi32_i32$1 = var$0$hi;
  i64toi32_i32$1 = $15$hi;
  i64toi32_i32$0 = $21_1;
  i64toi32_i32$5 = var$0$hi;
  i64toi32_i32$3 = var$0;
  i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
  $17$hi = i64toi32_i32$5;
  i64toi32_i32$5 = var$1$hi;
  i64toi32_i32$5 = $17$hi;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$3 = var$1;
  i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $22_1 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
   $22_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
  }
  $19$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $10$hi;
  i64toi32_i32$5 = $10_1;
  i64toi32_i32$1 = $19$hi;
  i64toi32_i32$3 = $22_1;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  i64toi32_i32$5 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$5 | 0;
 }
 
 function __wasm_ctz_i32(var$0) {
  var$0 = var$0 | 0;
  if (var$0) {
   return 31 - Math_clz32((var$0 + -1 | 0) ^ var$0 | 0) | 0 | 0
  }
  return 32 | 0;
 }
 
 // EMSCRIPTEN_END_FUNCS
;
 FUNCTION_TABLE[1] = $2119;
 FUNCTION_TABLE[2] = $2130;
 FUNCTION_TABLE[3] = $5;
 FUNCTION_TABLE[4] = $8;
 FUNCTION_TABLE[5] = $7;
 FUNCTION_TABLE[6] = $9;
 FUNCTION_TABLE[7] = $765;
 FUNCTION_TABLE[8] = $767;
 FUNCTION_TABLE[9] = $766;
 FUNCTION_TABLE[10] = $768;
 FUNCTION_TABLE[11] = $4;
 FUNCTION_TABLE[12] = $11;
 FUNCTION_TABLE[13] = $12;
 FUNCTION_TABLE[14] = $13;
 FUNCTION_TABLE[15] = $14;
 FUNCTION_TABLE[16] = $16;
 FUNCTION_TABLE[17] = $10;
 FUNCTION_TABLE[18] = $730;
 FUNCTION_TABLE[19] = $731;
 FUNCTION_TABLE[20] = $17;
 FUNCTION_TABLE[21] = $739;
 FUNCTION_TABLE[22] = $18;
 FUNCTION_TABLE[23] = $742;
 FUNCTION_TABLE[24] = $19;
 FUNCTION_TABLE[25] = $21;
 FUNCTION_TABLE[26] = $32;
 FUNCTION_TABLE[27] = $33;
 FUNCTION_TABLE[28] = $27;
 FUNCTION_TABLE[29] = $26;
 FUNCTION_TABLE[30] = $289;
 FUNCTION_TABLE[31] = $23;
 FUNCTION_TABLE[32] = $288;
 FUNCTION_TABLE[33] = $291;
 FUNCTION_TABLE[34] = $292;
 FUNCTION_TABLE[35] = $34;
 FUNCTION_TABLE[36] = $35;
 FUNCTION_TABLE[37] = $36;
 FUNCTION_TABLE[38] = $37;
 FUNCTION_TABLE[39] = $63;
 FUNCTION_TABLE[40] = $64;
 FUNCTION_TABLE[41] = $65;
 FUNCTION_TABLE[42] = $71;
 FUNCTION_TABLE[43] = $103;
 FUNCTION_TABLE[44] = $104;
 FUNCTION_TABLE[45] = $99;
 FUNCTION_TABLE[46] = $97;
 FUNCTION_TABLE[47] = $105;
 FUNCTION_TABLE[48] = $106;
 FUNCTION_TABLE[49] = $107;
 FUNCTION_TABLE[50] = $108;
 FUNCTION_TABLE[51] = $109;
 FUNCTION_TABLE[52] = $110;
 FUNCTION_TABLE[53] = $111;
 FUNCTION_TABLE[54] = $112;
 FUNCTION_TABLE[55] = $113;
 FUNCTION_TABLE[56] = $114;
 FUNCTION_TABLE[57] = $82;
 FUNCTION_TABLE[58] = $83;
 FUNCTION_TABLE[59] = $86;
 FUNCTION_TABLE[60] = $115;
 FUNCTION_TABLE[61] = $84;
 FUNCTION_TABLE[62] = $85;
 FUNCTION_TABLE[63] = $87;
 FUNCTION_TABLE[64] = $88;
 FUNCTION_TABLE[65] = $89;
 FUNCTION_TABLE[66] = $116;
 FUNCTION_TABLE[67] = $117;
 FUNCTION_TABLE[68] = $118;
 FUNCTION_TABLE[69] = $119;
 FUNCTION_TABLE[70] = $120;
 FUNCTION_TABLE[71] = $2115;
 FUNCTION_TABLE[72] = $126;
 FUNCTION_TABLE[73] = $127;
 FUNCTION_TABLE[74] = $132;
 FUNCTION_TABLE[75] = $152;
 FUNCTION_TABLE[76] = $153;
 FUNCTION_TABLE[77] = $145;
 FUNCTION_TABLE[78] = $144;
 FUNCTION_TABLE[79] = $295;
 FUNCTION_TABLE[80] = $168;
 FUNCTION_TABLE[81] = $293;
 FUNCTION_TABLE[82] = $165;
 FUNCTION_TABLE[83] = $290;
 FUNCTION_TABLE[84] = $169;
 FUNCTION_TABLE[85] = $170;
 FUNCTION_TABLE[86] = $171;
 FUNCTION_TABLE[87] = $191;
 FUNCTION_TABLE[88] = $192;
 FUNCTION_TABLE[89] = $195;
 FUNCTION_TABLE[90] = $194;
 FUNCTION_TABLE[91] = $222;
 FUNCTION_TABLE[92] = $215;
 FUNCTION_TABLE[93] = $216;
 FUNCTION_TABLE[94] = $217;
 FUNCTION_TABLE[95] = $218;
 FUNCTION_TABLE[96] = $219;
 FUNCTION_TABLE[97] = $220;
 FUNCTION_TABLE[98] = $221;
 FUNCTION_TABLE[99] = $223;
 FUNCTION_TABLE[100] = $224;
 FUNCTION_TABLE[101] = $225;
 FUNCTION_TABLE[102] = $226;
 FUNCTION_TABLE[103] = $227;
 FUNCTION_TABLE[104] = $228;
 FUNCTION_TABLE[105] = $229;
 FUNCTION_TABLE[106] = $230;
 FUNCTION_TABLE[107] = $231;
 FUNCTION_TABLE[108] = $232;
 FUNCTION_TABLE[109] = $233;
 FUNCTION_TABLE[110] = $234;
 FUNCTION_TABLE[111] = $236;
 FUNCTION_TABLE[112] = $237;
 FUNCTION_TABLE[113] = $238;
 FUNCTION_TABLE[114] = $563;
 FUNCTION_TABLE[115] = $173;
 FUNCTION_TABLE[116] = $564;
 FUNCTION_TABLE[117] = $242;
 FUNCTION_TABLE[118] = $512;
 FUNCTION_TABLE[119] = $513;
 FUNCTION_TABLE[120] = $250;
 FUNCTION_TABLE[121] = $514;
 FUNCTION_TABLE[122] = $244;
 FUNCTION_TABLE[123] = $245;
 FUNCTION_TABLE[124] = $174;
 FUNCTION_TABLE[125] = $176;
 FUNCTION_TABLE[126] = $178;
 FUNCTION_TABLE[127] = $179;
 FUNCTION_TABLE[128] = $180;
 FUNCTION_TABLE[129] = $181;
 FUNCTION_TABLE[130] = $261;
 FUNCTION_TABLE[131] = $42;
 FUNCTION_TABLE[132] = $265;
 FUNCTION_TABLE[133] = $134;
 FUNCTION_TABLE[134] = $44;
 FUNCTION_TABLE[135] = $267;
 FUNCTION_TABLE[136] = $268;
 FUNCTION_TABLE[137] = $269;
 FUNCTION_TABLE[138] = $270;
 FUNCTION_TABLE[139] = $271;
 FUNCTION_TABLE[140] = $260;
 FUNCTION_TABLE[141] = $262;
 FUNCTION_TABLE[142] = $296;
 FUNCTION_TABLE[143] = $306;
 FUNCTION_TABLE[144] = $307;
 FUNCTION_TABLE[145] = $303;
 FUNCTION_TABLE[146] = $317;
 FUNCTION_TABLE[147] = $318;
 FUNCTION_TABLE[148] = $319;
 FUNCTION_TABLE[149] = $516;
 FUNCTION_TABLE[150] = $517;
 FUNCTION_TABLE[151] = $320;
 FUNCTION_TABLE[152] = $321;
 FUNCTION_TABLE[153] = $322;
 FUNCTION_TABLE[154] = $337;
 FUNCTION_TABLE[155] = $338;
 FUNCTION_TABLE[156] = $324;
 FUNCTION_TABLE[157] = $325;
 FUNCTION_TABLE[158] = $339;
 FUNCTION_TABLE[159] = $328;
 FUNCTION_TABLE[160] = $329;
 FUNCTION_TABLE[161] = $330;
 FUNCTION_TABLE[162] = $333;
 FUNCTION_TABLE[163] = $363;
 FUNCTION_TABLE[164] = $364;
 FUNCTION_TABLE[165] = $374;
 FUNCTION_TABLE[166] = $376;
 FUNCTION_TABLE[167] = $377;
 FUNCTION_TABLE[168] = $379;
 FUNCTION_TABLE[169] = $381;
 FUNCTION_TABLE[170] = $382;
 FUNCTION_TABLE[171] = $383;
 FUNCTION_TABLE[172] = $463;
 FUNCTION_TABLE[173] = $480;
 FUNCTION_TABLE[174] = $470;
 FUNCTION_TABLE[175] = $471;
 FUNCTION_TABLE[176] = $472;
 FUNCTION_TABLE[177] = $464;
 FUNCTION_TABLE[178] = $481;
 FUNCTION_TABLE[179] = $473;
 FUNCTION_TABLE[180] = $468;
 FUNCTION_TABLE[181] = $482;
 FUNCTION_TABLE[182] = $475;
 FUNCTION_TABLE[183] = $476;
 FUNCTION_TABLE[184] = $474;
 FUNCTION_TABLE[185] = $487;
 FUNCTION_TABLE[186] = $488;
 FUNCTION_TABLE[187] = $491;
 FUNCTION_TABLE[188] = $490;
 FUNCTION_TABLE[189] = $43;
 FUNCTION_TABLE[190] = $135;
 FUNCTION_TABLE[191] = $519;
 FUNCTION_TABLE[192] = $520;
 FUNCTION_TABLE[193] = $522;
 FUNCTION_TABLE[194] = $542;
 FUNCTION_TABLE[195] = $543;
 FUNCTION_TABLE[196] = $544;
 FUNCTION_TABLE[197] = $545;
 FUNCTION_TABLE[198] = $548;
 FUNCTION_TABLE[199] = $552;
 FUNCTION_TABLE[200] = $566;
 FUNCTION_TABLE[201] = $632;
 FUNCTION_TABLE[202] = $660;
 FUNCTION_TABLE[203] = $623;
 FUNCTION_TABLE[204] = $656;
 FUNCTION_TABLE[205] = $628;
 FUNCTION_TABLE[206] = $651;
 FUNCTION_TABLE[207] = $652;
 FUNCTION_TABLE[208] = $721;
 FUNCTION_TABLE[209] = $722;
 FUNCTION_TABLE[210] = $724;
 FUNCTION_TABLE[211] = $725;
 FUNCTION_TABLE[212] = $726;
 FUNCTION_TABLE[213] = $728;
 FUNCTION_TABLE[214] = $729;
 FUNCTION_TABLE[215] = $737;
 FUNCTION_TABLE[216] = $741;
 FUNCTION_TABLE[217] = $743;
 FUNCTION_TABLE[218] = $744;
 FUNCTION_TABLE[219] = $745;
 FUNCTION_TABLE[220] = $747;
 FUNCTION_TABLE[221] = $748;
 FUNCTION_TABLE[222] = $749;
 FUNCTION_TABLE[223] = $750;
 FUNCTION_TABLE[224] = $751;
 FUNCTION_TABLE[225] = $752;
 FUNCTION_TABLE[226] = $753;
 FUNCTION_TABLE[227] = $757;
 FUNCTION_TABLE[228] = $759;
 FUNCTION_TABLE[229] = $761;
 FUNCTION_TABLE[230] = $762;
 FUNCTION_TABLE[231] = $763;
 FUNCTION_TABLE[232] = $812;
 FUNCTION_TABLE[233] = $814;
 FUNCTION_TABLE[234] = $813;
 FUNCTION_TABLE[235] = $815;
 FUNCTION_TABLE[236] = $837;
 FUNCTION_TABLE[237] = $839;
 FUNCTION_TABLE[238] = $838;
 FUNCTION_TABLE[239] = $840;
 FUNCTION_TABLE[240] = $853;
 FUNCTION_TABLE[241] = $855;
 FUNCTION_TABLE[242] = $854;
 FUNCTION_TABLE[243] = $856;
 FUNCTION_TABLE[244] = $716;
 FUNCTION_TABLE[245] = $866;
 FUNCTION_TABLE[246] = $715;
 FUNCTION_TABLE[247] = $718;
 FUNCTION_TABLE[248] = $719;
 FUNCTION_TABLE[249] = $720;
 FUNCTION_TABLE[250] = $885;
 FUNCTION_TABLE[251] = $886;
 FUNCTION_TABLE[252] = $915;
 FUNCTION_TABLE[253] = $916;
 FUNCTION_TABLE[254] = $917;
 FUNCTION_TABLE[255] = $919;
 FUNCTION_TABLE[256] = $921;
 FUNCTION_TABLE[257] = $922;
 FUNCTION_TABLE[258] = $929;
 FUNCTION_TABLE[259] = $930;
 FUNCTION_TABLE[260] = $932;
 FUNCTION_TABLE[261] = $934;
 FUNCTION_TABLE[262] = $935;
 FUNCTION_TABLE[263] = $938;
 FUNCTION_TABLE[264] = $939;
 FUNCTION_TABLE[265] = $940;
 FUNCTION_TABLE[266] = $942;
 FUNCTION_TABLE[267] = $943;
 FUNCTION_TABLE[268] = $945;
 FUNCTION_TABLE[269] = $946;
 FUNCTION_TABLE[270] = $947;
 FUNCTION_TABLE[271] = $949;
 FUNCTION_TABLE[272] = $950;
 FUNCTION_TABLE[273] = $963;
 FUNCTION_TABLE[274] = $2161;
 FUNCTION_TABLE[275] = $1313;
 FUNCTION_TABLE[276] = $1622;
 FUNCTION_TABLE[277] = $1630;
 FUNCTION_TABLE[278] = $1729;
 FUNCTION_TABLE[279] = $1732;
 FUNCTION_TABLE[280] = $1736;
 FUNCTION_TABLE[281] = $1739;
 FUNCTION_TABLE[282] = $1742;
 FUNCTION_TABLE[283] = $1745;
 FUNCTION_TABLE[284] = $1747;
 FUNCTION_TABLE[285] = $1749;
 FUNCTION_TABLE[286] = $1751;
 FUNCTION_TABLE[287] = $1753;
 FUNCTION_TABLE[288] = $1755;
 FUNCTION_TABLE[289] = $1757;
 FUNCTION_TABLE[290] = $1759;
 FUNCTION_TABLE[291] = $1761;
 FUNCTION_TABLE[292] = $1605;
 FUNCTION_TABLE[293] = $1610;
 FUNCTION_TABLE[294] = $1626;
 FUNCTION_TABLE[295] = $1649;
 FUNCTION_TABLE[296] = $1650;
 FUNCTION_TABLE[297] = $1651;
 FUNCTION_TABLE[298] = $1652;
 FUNCTION_TABLE[299] = $1653;
 FUNCTION_TABLE[300] = $1654;
 FUNCTION_TABLE[301] = $1655;
 FUNCTION_TABLE[302] = $1656;
 FUNCTION_TABLE[303] = $1657;
 FUNCTION_TABLE[304] = $1658;
 FUNCTION_TABLE[305] = $1494;
 FUNCTION_TABLE[306] = $1670;
 FUNCTION_TABLE[307] = $1671;
 FUNCTION_TABLE[308] = $1674;
 FUNCTION_TABLE[309] = $1677;
 FUNCTION_TABLE[310] = $1678;
 FUNCTION_TABLE[311] = $1681;
 FUNCTION_TABLE[312] = $1682;
 FUNCTION_TABLE[313] = $1684;
 FUNCTION_TABLE[314] = $1709;
 FUNCTION_TABLE[315] = $1710;
 FUNCTION_TABLE[316] = $1713;
 FUNCTION_TABLE[317] = $1715;
 FUNCTION_TABLE[318] = $1717;
 FUNCTION_TABLE[319] = $1719;
 FUNCTION_TABLE[320] = $1723;
 FUNCTION_TABLE[321] = $1711;
 FUNCTION_TABLE[322] = $1712;
 FUNCTION_TABLE[323] = $1714;
 FUNCTION_TABLE[324] = $1716;
 FUNCTION_TABLE[325] = $1718;
 FUNCTION_TABLE[326] = $1720;
 FUNCTION_TABLE[327] = $1724;
 FUNCTION_TABLE[328] = $1002;
 FUNCTION_TABLE[329] = $1625;
 FUNCTION_TABLE[330] = $1632;
 FUNCTION_TABLE[331] = $1633;
 FUNCTION_TABLE[332] = $1635;
 FUNCTION_TABLE[333] = $1636;
 FUNCTION_TABLE[334] = $1637;
 FUNCTION_TABLE[335] = $1638;
 FUNCTION_TABLE[336] = $1640;
 FUNCTION_TABLE[337] = $1641;
 FUNCTION_TABLE[338] = $1643;
 FUNCTION_TABLE[339] = $1644;
 FUNCTION_TABLE[340] = $1645;
 FUNCTION_TABLE[341] = $1646;
 FUNCTION_TABLE[342] = $1647;
 FUNCTION_TABLE[343] = $1659;
 FUNCTION_TABLE[344] = $1660;
 FUNCTION_TABLE[345] = $1661;
 FUNCTION_TABLE[346] = $1662;
 FUNCTION_TABLE[347] = $1663;
 FUNCTION_TABLE[348] = $1664;
 FUNCTION_TABLE[349] = $1665;
 FUNCTION_TABLE[350] = $1668;
 FUNCTION_TABLE[351] = $1685;
 FUNCTION_TABLE[352] = $1686;
 FUNCTION_TABLE[353] = $1688;
 FUNCTION_TABLE[354] = $1690;
 FUNCTION_TABLE[355] = $1691;
 FUNCTION_TABLE[356] = $1692;
 FUNCTION_TABLE[357] = $1693;
 FUNCTION_TABLE[358] = $1695;
 FUNCTION_TABLE[359] = $1696;
 FUNCTION_TABLE[360] = $1697;
 FUNCTION_TABLE[361] = $1699;
 FUNCTION_TABLE[362] = $1701;
 FUNCTION_TABLE[363] = $1702;
 FUNCTION_TABLE[364] = $1703;
 FUNCTION_TABLE[365] = $1704;
 FUNCTION_TABLE[366] = $1706;
 FUNCTION_TABLE[367] = $1707;
 FUNCTION_TABLE[368] = $1708;
 FUNCTION_TABLE[369] = $1001;
 FUNCTION_TABLE[370] = $1003;
 FUNCTION_TABLE[371] = $1004;
 FUNCTION_TABLE[372] = $1005;
 FUNCTION_TABLE[373] = $1008;
 FUNCTION_TABLE[374] = $1009;
 FUNCTION_TABLE[375] = $1010;
 FUNCTION_TABLE[376] = $1011;
 FUNCTION_TABLE[377] = $1012;
 FUNCTION_TABLE[378] = $1016;
 FUNCTION_TABLE[379] = $1768;
 FUNCTION_TABLE[380] = $1017;
 FUNCTION_TABLE[381] = $1032;
 FUNCTION_TABLE[382] = $1044;
 FUNCTION_TABLE[383] = $1047;
 FUNCTION_TABLE[384] = $1050;
 FUNCTION_TABLE[385] = $1053;
 FUNCTION_TABLE[386] = $1056;
 FUNCTION_TABLE[387] = $1059;
 FUNCTION_TABLE[388] = $1064;
 FUNCTION_TABLE[389] = $1067;
 FUNCTION_TABLE[390] = $1070;
 FUNCTION_TABLE[391] = $1769;
 FUNCTION_TABLE[392] = $1085;
 FUNCTION_TABLE[393] = $1095;
 FUNCTION_TABLE[394] = $1100;
 FUNCTION_TABLE[395] = $1102;
 FUNCTION_TABLE[396] = $1104;
 FUNCTION_TABLE[397] = $1106;
 FUNCTION_TABLE[398] = $1108;
 FUNCTION_TABLE[399] = $1110;
 FUNCTION_TABLE[400] = $1114;
 FUNCTION_TABLE[401] = $1116;
 FUNCTION_TABLE[402] = $1118;
 FUNCTION_TABLE[403] = $1770;
 FUNCTION_TABLE[404] = $1131;
 FUNCTION_TABLE[405] = $1139;
 FUNCTION_TABLE[406] = $1149;
 FUNCTION_TABLE[407] = $1150;
 FUNCTION_TABLE[408] = $1151;
 FUNCTION_TABLE[409] = $1152;
 FUNCTION_TABLE[410] = $1163;
 FUNCTION_TABLE[411] = $1164;
 FUNCTION_TABLE[412] = $1771;
 FUNCTION_TABLE[413] = $1165;
 FUNCTION_TABLE[414] = $1174;
 FUNCTION_TABLE[415] = $1180;
 FUNCTION_TABLE[416] = $1181;
 FUNCTION_TABLE[417] = $1182;
 FUNCTION_TABLE[418] = $1183;
 FUNCTION_TABLE[419] = $1191;
 FUNCTION_TABLE[420] = $1192;
 FUNCTION_TABLE[421] = $1772;
 FUNCTION_TABLE[422] = $1774;
 FUNCTION_TABLE[423] = $1197;
 FUNCTION_TABLE[424] = $1198;
 FUNCTION_TABLE[425] = $1199;
 FUNCTION_TABLE[426] = $1202;
 FUNCTION_TABLE[427] = $1204;
 FUNCTION_TABLE[428] = $1206;
 FUNCTION_TABLE[429] = $1209;
 FUNCTION_TABLE[430] = $1727;
 FUNCTION_TABLE[431] = $1734;
 FUNCTION_TABLE[432] = $1740;
 FUNCTION_TABLE[433] = $1754;
 FUNCTION_TABLE[434] = $1758;
 FUNCTION_TABLE[435] = $1746;
 FUNCTION_TABLE[436] = $1750;
 FUNCTION_TABLE[437] = $1775;
 FUNCTION_TABLE[438] = $1777;
 FUNCTION_TABLE[439] = $1224;
 FUNCTION_TABLE[440] = $1225;
 FUNCTION_TABLE[441] = $1226;
 FUNCTION_TABLE[442] = $1233;
 FUNCTION_TABLE[443] = $1235;
 FUNCTION_TABLE[444] = $1237;
 FUNCTION_TABLE[445] = $1240;
 FUNCTION_TABLE[446] = $1730;
 FUNCTION_TABLE[447] = $1737;
 FUNCTION_TABLE[448] = $1743;
 FUNCTION_TABLE[449] = $1756;
 FUNCTION_TABLE[450] = $1760;
 FUNCTION_TABLE[451] = $1748;
 FUNCTION_TABLE[452] = $1752;
 FUNCTION_TABLE[453] = $1779;
 FUNCTION_TABLE[454] = $1778;
 FUNCTION_TABLE[455] = $1253;
 FUNCTION_TABLE[456] = $1781;
 FUNCTION_TABLE[457] = $1780;
 FUNCTION_TABLE[458] = $1261;
 FUNCTION_TABLE[459] = $1782;
 FUNCTION_TABLE[460] = $1270;
 FUNCTION_TABLE[461] = $1273;
 FUNCTION_TABLE[462] = $1274;
 FUNCTION_TABLE[463] = $1275;
 FUNCTION_TABLE[464] = $1276;
 FUNCTION_TABLE[465] = $1277;
 FUNCTION_TABLE[466] = $1278;
 FUNCTION_TABLE[467] = $1279;
 FUNCTION_TABLE[468] = $1280;
 FUNCTION_TABLE[469] = $1783;
 FUNCTION_TABLE[470] = $1281;
 FUNCTION_TABLE[471] = $1282;
 FUNCTION_TABLE[472] = $1283;
 FUNCTION_TABLE[473] = $1284;
 FUNCTION_TABLE[474] = $1285;
 FUNCTION_TABLE[475] = $1286;
 FUNCTION_TABLE[476] = $1287;
 FUNCTION_TABLE[477] = $1288;
 FUNCTION_TABLE[478] = $1289;
 FUNCTION_TABLE[479] = $1784;
 FUNCTION_TABLE[480] = $1290;
 FUNCTION_TABLE[481] = $1293;
 FUNCTION_TABLE[482] = $1294;
 FUNCTION_TABLE[483] = $1295;
 FUNCTION_TABLE[484] = $1298;
 FUNCTION_TABLE[485] = $1299;
 FUNCTION_TABLE[486] = $1300;
 FUNCTION_TABLE[487] = $1301;
 FUNCTION_TABLE[488] = $1302;
 FUNCTION_TABLE[489] = $1785;
 FUNCTION_TABLE[490] = $1303;
 FUNCTION_TABLE[491] = $1304;
 FUNCTION_TABLE[492] = $1305;
 FUNCTION_TABLE[493] = $1306;
 FUNCTION_TABLE[494] = $1307;
 FUNCTION_TABLE[495] = $1308;
 FUNCTION_TABLE[496] = $1309;
 FUNCTION_TABLE[497] = $1310;
 FUNCTION_TABLE[498] = $1311;
 FUNCTION_TABLE[499] = $1786;
 FUNCTION_TABLE[500] = $1312;
 FUNCTION_TABLE[501] = $1333;
 FUNCTION_TABLE[502] = $1787;
 FUNCTION_TABLE[503] = $1379;
 FUNCTION_TABLE[504] = $1396;
 FUNCTION_TABLE[505] = $1788;
 FUNCTION_TABLE[506] = $1436;
 FUNCTION_TABLE[507] = $1448;
 FUNCTION_TABLE[508] = $1789;
 FUNCTION_TABLE[509] = $1449;
 FUNCTION_TABLE[510] = $1460;
 FUNCTION_TABLE[511] = $1790;
 FUNCTION_TABLE[512] = $1470;
 FUNCTION_TABLE[513] = $1471;
 FUNCTION_TABLE[514] = $1479;
 FUNCTION_TABLE[515] = $1791;
 FUNCTION_TABLE[516] = $1480;
 FUNCTION_TABLE[517] = $1481;
 FUNCTION_TABLE[518] = $1493;
 FUNCTION_TABLE[519] = $2020;
 FUNCTION_TABLE[520] = $2021;
 FUNCTION_TABLE[521] = $2116;
 FUNCTION_TABLE[522] = $2117;
 FUNCTION_TABLE[523] = $2118;
 FUNCTION_TABLE[524] = $2123;
 FUNCTION_TABLE[525] = $2124;
 FUNCTION_TABLE[526] = $2126;
 FUNCTION_TABLE[527] = $2127;
 FUNCTION_TABLE[528] = $2131;
 FUNCTION_TABLE[529] = $2132;
 FUNCTION_TABLE[530] = $2133;
 FUNCTION_TABLE[531] = $2136;
 FUNCTION_TABLE[532] = $2134;
 FUNCTION_TABLE[533] = $2135;
 FUNCTION_TABLE[534] = $2142;
 FUNCTION_TABLE[535] = $2158;
 FUNCTION_TABLE[536] = $2155;
 FUNCTION_TABLE[537] = $2145;
 FUNCTION_TABLE[538] = $2137;
 FUNCTION_TABLE[539] = $2157;
 FUNCTION_TABLE[540] = $2154;
 FUNCTION_TABLE[541] = $2146;
 FUNCTION_TABLE[542] = $2138;
 FUNCTION_TABLE[543] = $2156;
 FUNCTION_TABLE[544] = $2151;
 FUNCTION_TABLE[545] = $2148;
 function __wasm_memory_size() {
  return buffer.byteLength / 65536 | 0;
 }
 
 return {
  "__wasm_call_ctors": $0, 
  "fflush": $616, 
  "wr_texture_2d_new": $29, 
  "wr_texture_2d_set_data": $30, 
  "wr_texture_2d_set_file_path": $31, 
  "wr_static_mesh_unit_box_new": $101, 
  "wr_static_mesh_unit_sphere_new": $102, 
  "wr_frame_buffer_new": $146, 
  "wr_frame_buffer_append_output_texture": $147, 
  "wr_frame_buffer_set_depth_texture": $148, 
  "wr_frame_buffer_enable_depth_buffer": $149, 
  "wr_frame_buffer_set_size": $150, 
  "wr_frame_buffer_setup": $151, 
  "wr_texture_rtt_new": $166, 
  "wr_texture_rtt_enable_initialize_data": $167, 
  "wr_shader_program_new": $196, 
  "wr_shader_program_set_vertex_shader_path": $197, 
  "wr_shader_program_set_fragment_shader_path": $198, 
  "wr_shader_program_use_uniform": $199, 
  "wr_shader_program_use_uniform_buffer": $200, 
  "wr_shader_program_create_custom_uniform": $201, 
  "wr_shader_program_get_gl_name": $208, 
  "wr_shader_program_has_vertex_shader_compilation_failed": $209, 
  "wr_shader_program_has_fragment_shader_compilation_failed": $210, 
  "wr_shader_program_get_compilation_log": $211, 
  "wr_shader_program_setup": $212, 
  "wr_transform_new": $246, 
  "wr_transform_get_matrix": $247, 
  "wr_transform_attach_child": $248, 
  "wr_transform_set_scale": $249, 
  "wr_renderable_new": $272, 
  "wr_renderable_set_mesh": $273, 
  "wr_renderable_set_material": $274, 
  "wr_renderable_set_visibility_flags": $276, 
  "wr_renderable_set_cast_shadows": $277, 
  "wr_texture_set_internal_format": $299, 
  "wr_texture_set_size": $300, 
  "wr_texture_setup": $301, 
  "wr_camera_set_near": $312, 
  "wr_camera_set_far": $313, 
  "wr_camera_set_fovy": $314, 
  "wr_camera_set_position": $315, 
  "wr_camera_set_orientation": $316, 
  "wr_material_delete": $334, 
  "wr_material_set_texture": $335, 
  "wr_material_set_default_program": $336, 
  "wr_scene_get_instance": $358, 
  "wr_scene_init": $359, 
  "wr_scene_render": $360, 
  "wr_scene_get_root": $361, 
  "wr_scene_get_viewport": $362, 
  "wr_gl_state_set_context_active": $445, 
  "wr_phong_material_new": $478, 
  "wr_phong_material_set_color": $479, 
  "wr_viewport_set_clear_color_rgb": $504, 
  "wr_viewport_set_size": $505, 
  "wr_viewport_set_frame_buffer": $506, 
  "wr_viewport_get_camera": $507, 
  "wr_node_set_visible": $518, 
  "wrjs_color_array": $579, 
  "wrjs_array4": $580, 
  "wrjs_pointerOnFloat": $581, 
  "wrjs_dummy_texture": $582, 
  "wrjs_init_context": $583, 
  "__errno_location": $587, 
  "free": $2161, 
  "malloc": $2160, 
  "setThrew": $2185, 
  "stackSave": $2182, 
  "stackRestore": $2183, 
  "stackAlloc": $2184, 
  "dynCall_viijii": $2191, 
  "dynCall_jiji": $2192, 
  "dynCall_iiiiij": $2193, 
  "dynCall_iiiiijj": $2194, 
  "dynCall_iiiiiijj": $2195, 
  "__growWasmMemory": $2197
 };
}

var bufferView = new Uint8Array(wasmMemory.buffer);
for (var base64ReverseLookup = new Uint8Array(123/*'z'+1*/), i = 25; i >= 0; --i) {
    base64ReverseLookup[48+i] = 52+i; // '0-9'
    base64ReverseLookup[65+i] = i; // 'A-Z'
    base64ReverseLookup[97+i] = 26+i; // 'a-z'
  }
  base64ReverseLookup[43] = 62; // '+'
  base64ReverseLookup[47] = 63; // '/'
  /** @noinline Inlining this function would mean expanding the base64 string 4x times in the source code, which Closure seems to be happy to do. */
  function base64DecodeToExistingUint8Array(uint8Array, offset, b64) {
    var b1, b2, i = 0, j = offset, bLength = b64.length, end = offset + (bLength*3>>2) - (b64[bLength-2] == '=') - (b64[bLength-1] == '=');
    for (; i < bLength; i += 4) {
      b1 = base64ReverseLookup[b64.charCodeAt(i+1)];
      b2 = base64ReverseLookup[b64.charCodeAt(i+2)];
      uint8Array[j++] = base64ReverseLookup[b64.charCodeAt(i)] << 2 | b1 >> 4;
      if (j < end) uint8Array[j++] = b1 << 4 | b2 >> 2;
      if (j < end) uint8Array[j++] = b2 << 6 | base64ReverseLookup[b64.charCodeAt(i+3)];
    } 
  }
  base64DecodeToExistingUint8Array(bufferView, 1024, "");
base64DecodeToExistingUint8Array(bufferView, 21672, "bAAAAAAAAAAIVQAAAwAAAAQAAACU////lP///whVAAAFAAAABgAAALRUAADsVAAAAFUAAMhUAABsAAAAAAAAAHwkAAAHAAAACAAAAJT///+U////fCQAAAkAAAAKAAAA+FMAAAAEAAB8JAAAAAAAAFRVAAALAAAADAAAAA0AAAAOAAAADwAAABAAAAARAAAAEgAAABMAAAAUAAAAFQAAABYAAAAXAAAAGAAAAPhTAAAwBAAACCQAAAAAAACcVQAAGgAAABsAAAAcAAAAHQAAAB4AAAAfAAAAIAAAACEAAAAiAAAAIwAAACQAAAAlAAAAJgAAAPhTAABqBAAA2FkAAAAAAADEVQAAJwAAACgAAAApAAAA0FMAAPgEAAD4UwAA4QQAALxVAAAAAAAAWFYAACsAAAAsAAAALQAAAC4AAAAvAAAAMAAAADEAAAAyAAAAMwAAADQAAAA1AAAANgAAADcAAAA4AAAAOQAAADoAAAA7AAAAPAAAAD0AAAA+AAAAPwAAAEAAAABBAAAAQgAAAEMAAABEAAAARQAAANBTAAA+BwAA+FMAADEHAABEVgAA+FMAAB0HAABMVgAAAAAAAExWAAArAAAARgAAAEcAAABHAAAALwAAADAAAAAxAAAAMgAAADMAAAA0AAAARwAAAEcAAABHAAAARwAAAEcAAABHAAAARwAAADwAAABHAAAARwAAAEcAAABHAAAARwAAAEIAAABDAAAARAAAAEcAAAAAAAAA7FYAACcAAABIAAAASQAAAPhTAACRBwAAvFUAAAAAAAAQVwAASwAAAEwAAABNAAAATgAAAPhTAADMBwAARFYAAAAAAABYVwAATwAAAFAAAABRAAAAUgAAAB4AAABTAAAAIAAAACEAAAAiAAAAVAAAAFUAAAAlAAAAVgAAAPhTAACICAAA2FkAAAAAAAB8VwAAVwAAAFgAAABZAAAAWgAAAPhTAABACQAARFYAAAAAAACoVwAAWwAAAFwAAABdAAAAXgAAANBTAAC4CQAA+FMAAJ4JAACgVwAAAAAAAKBXAABbAAAAXwAAAEcAAABHAAAAAAAAAORXAABbAAAAYAAAAGEAAABiAAAA+FMAANMJAACgVwAAAAAAAAhYAABbAAAAYwAAAGQAAABlAAAA+FMAAO0JAACgVwAAAAAAACxYAABbAAAAZgAAAGcAAABoAAAA+FMAACcKAACgVwAAAAAAAFBYAABbAAAAaQAAAGoAAABrAAAA+FMAAGEKAACgVwAAAAAAAHRYAABbAAAAbAAAAG0AAABuAAAA+FMAAJsKAACgVwAA7AoAAP0KAAAOCwAAHwsAADALAABBCwAAUgsAAGMLAAB0CwAAhQsAAJYLAACoCwAAugsAAMwLAADcCwAA7AsAAPwLAAALDAAAHAwAACkMAAA4DAAAQgwAAE8MAABdDAAAaQwAAHAMAACADAAAkQwAAJUMAAD4UwAAvAwAAExWAAAAAAAASFkAAHIAAABzAAAAdAAAAHUAAAB2AAAAdwAAAHgAAAB5AAAAegAAAHsAAAB8AAAAfQAAAH4AAAB/AAAAgAAAAIEAAAD4UwAA0QwAAChcAAAAAAAAjFkAAIMAAACEAAAAhQAAAIYAAACHAAAAiAAAAIkAAAB5AAAAigAAAIsAAACMAAAAjQAAAPhTAAA0DQAAmFsAAAEAAQAAAAAA2FkAAE8AAACOAAAAUQAAAEcAAAAeAAAAUwAAACAAAAAhAAAAIgAAAEcAAABHAAAAJQAAAEcAAAD4UwAAjQ0AAERWAAAAAAAALFoAAHIAAACPAAAAkAAAAIYAAACRAAAAdwAAAJIAAAB5AAAAkwAAAJQAAACVAAAAlgAAAJcAAACYAAAAmQAAAIEAAAD4UwAA/A0AAChcAAAAAAAAeFoAAJoAAABHAAAAmwAAAEcAAACcAAAAnQAAAJ4AAABHAAAARwAAAJ8AAACgAAAAoQAAAEcAAACiAAAA0FMAAAsOAAAAAAAAlFoAACcAAACjAAAApAAAAPhTAAAsDgAAvFUAAAECAAABAAAABwIAAP////8AHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAD/////AQEBAQUEAAABCQAAAQAAAAaAAAAGgAAAAhsAAP////8BAAAAAAAAADBbAACtAAAArgAAAK8AAACwAAAAsQAAAJ0AAACyAAAAswAAALQAAACfAAAAtQAAALYAAAC3AAAAuAAAAPhTAABVDwAAeFoAAAAAAABUWwAAuQAAALoAAAC7AAAAvAAAAPhTAADRDwAARFYAAAAAAACYWwAAgwAAAL0AAACFAAAAhgAAAHYAAAB3AAAAvgAAAHkAAAC/AAAAwAAAAJUAAACWAAAA0FMAAAQQAAAAAAAAyFsAACcAAADCAAAAwwAAAAAAAADUWwAAJwAAAMQAAADFAAAA+FMAABEQAAC8VQAA+FMAACcQAAC8VQAAAAAAAChcAAByAAAAvQAAAHQAAACGAAAAdgAAAHcAAACSAAAAeQAAAL8AAADIAAAAlQAAAJYAAAB+AAAAfwAAAIAAAACBAAAA+FMAAIcQAACYWwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACoDgUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJAAAAAAAAAAAAAADMAAAAAAAAAAAAAAAAAAAAAAAAAMsAAAAAAAAAyQAAANgOBQAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFAAAAAAAAAAAAAAD6AAAAAAAAAAAAAAAAAAAAAAAAAAAAAADKAAAA+wAAAOgSBQAABAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAK/////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACwXQAAAAAAAAUAAAAAAAAAAAAAAMwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMoAAADJAAAA8BYFAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAP//////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==");
base64DecodeToExistingUint8Array(bufferView, 24288, "");
return asmFunc({
    'Int8Array': Int8Array,
    'Int16Array': Int16Array,
    'Int32Array': Int32Array,
    'Uint8Array': Uint8Array,
    'Uint16Array': Uint16Array,
    'Uint32Array': Uint32Array,
    'Float32Array': Float32Array,
    'Float64Array': Float64Array,
    'NaN': NaN,
    'Infinity': Infinity,
    'Math': Math
  },
  asmLibraryArg,
  wasmMemory.buffer
)

}
)(asmLibraryArg, wasmMemory, wasmTable);
  },

  instantiate: /** @suppress{checkTypes} */ function(binary, info) {
    return {
      then: function(ok) {
        var module = new WebAssembly.Module(binary);
        ok({
          'instance': new WebAssembly.Instance(module)
        });
        // Emulate a simple WebAssembly.instantiate(..).then(()=>{}).catch(()=>{}) syntax.
        return { catch: function() {} };
      }
    };
  },

  RuntimeError: Error
};

// We don't need to actually download a wasm binary, mark it as present but empty.
wasmBinary = [];



if (typeof WebAssembly !== 'object') {
  abort('no native wasm support detected');
}




// In MINIMAL_RUNTIME, setValue() and getValue() are only available when building with safe heap enabled, for heap safety checking.
// In traditional runtime, setValue() and getValue() are always available (although their use is highly discouraged due to perf penalties)

/** @param {number} ptr
    @param {number} value
    @param {string} type
    @param {number|boolean=} noSafe */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @param {number} ptr
    @param {string} type
    @param {number|boolean=} noSafe */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}






// Wasm globals

var wasmMemory;

// In fastcomp asm.js, we don't need a wasm Table at all.
// In the wasm backend, we polyfill the WebAssembly object,
// so this creates a (non-native-wasm) table for us.

var wasmTable = new WebAssembly.Table({
  'initial': 546,
  'maximum': 546,
  'element': 'anyfunc'
});




//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

// C calling interface.
/** @param {string|null=} returnType
    @param {Array=} argTypes
    @param {Arguments|Array=} args
    @param {Object=} opts */
function ccall(ident, returnType, argTypes, args, opts) {
  // For fast lookup of conversion functions
  var toC = {
    'string': function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    },
    'array': function(arr) {
      var ret = stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    }
  };

  function convertReturnValue(ret) {
    if (returnType === 'string') return UTF8ToString(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);

  ret = convertReturnValue(ret);
  if (stack !== 0) stackRestore(stack);
  return ret;
}

/** @param {string=} returnType
    @param {Array=} argTypes
    @param {Object=} opts */
function cwrap(ident, returnType, argTypes, opts) {
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_NONE = 2; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc,
    stackAlloc,
    ][allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}




// runtime_strings.js: Strings related runtime functions that are part of both MINIMAL_RUNTIME and regular runtime.

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;

/**
 * @param {number} idx
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ArrayToString(heap, idx, maxBytesToRead) {
  var endIdx = idx + maxBytesToRead;
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  // (As a tiny code save trick, compare endPtr against endIdx using a negation, so that undefined means Infinity)
  while (heap[endPtr] && !(endPtr >= endIdx)) ++endPtr;

  if (endPtr - idx > 16 && heap.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(heap.subarray(idx, endPtr));
  } else {
    var str = '';
    // If building with TextDecoder, we have already computed the string length above, so test loop end condition against that
    while (idx < endPtr) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      var u0 = heap[idx++];
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      var u1 = heap[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      var u2 = heap[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        if ((u0 & 0xF8) != 0xF0) warnOnce('Invalid UTF-8 leading byte 0x' + u0.toString(16) + ' encountered when deserializing a UTF-8 string on the asm.js/wasm heap to a JS string!');
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (heap[idx++] & 63);
      }

      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
  return str;
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns a
// copy of that string as a Javascript String object.
// maxBytesToRead: an optional length that specifies the maximum number of bytes to read. You can omit
//                 this parameter to scan the string until the first \0 byte. If maxBytesToRead is
//                 passed, and the string at [ptr, ptr+maxBytesToReadr[ contains a null byte in the
//                 middle, then the string will cut short at that byte index (i.e. maxBytesToRead will
//                 not produce a string of exact length [ptr, ptr+maxBytesToRead[)
//                 N.B. mixing frequent uses of UTF8ToString() with and without maxBytesToRead may
//                 throw JS JIT optimizations off, so it is worth to consider consistently using one
//                 style or the other.
/**
 * @param {number} ptr
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ToString(ptr, maxBytesToRead) {
  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   heap: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      heap[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      heap[outIdx++] = 0xC0 | (u >> 6);
      heap[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      heap[outIdx++] = 0xE0 | (u >> 12);
      heap[outIdx++] = 0x80 | ((u >> 6) & 63);
      heap[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 3 >= endIdx) break;
      if (u >= 0x200000) warnOnce('Invalid Unicode code point 0x' + u.toString(16) + ' encountered when serializing a JS string to an UTF-8 string on the asm.js/wasm heap! (Valid unicode code points should be in range 0-0x1FFFFF).');
      heap[outIdx++] = 0xF0 | (u >> 18);
      heap[outIdx++] = 0x80 | ((u >> 12) & 63);
      heap[outIdx++] = 0x80 | ((u >> 6) & 63);
      heap[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  heap[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) ++len;
    else if (u <= 0x7FF) len += 2;
    else if (u <= 0xFFFF) len += 3;
    else len += 4;
  }
  return len;
}





// runtime_strings_extra.js: Strings related runtime functions that are available only in regular runtime.

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAPU8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;

function UTF16ToString(ptr, maxBytesToRead) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  var maxIdx = idx + maxBytesToRead / 2;
  // If maxBytesToRead is not passed explicitly, it will be undefined, and this
  // will always evaluate to true. This saves on code size.
  while (!(idx >= maxIdx) && HEAPU16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0 || i == maxBytesToRead / 2) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr, maxBytesToRead) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  // If maxBytesToRead is not passed explicitly, it will be undefined, and this
  // will always evaluate to true. This saves on code size.
  while (!(i >= maxBytesToRead / 4)) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0) break;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
  return str;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated
    @param {boolean=} dontAddNull */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

/** @param {boolean=} dontAddNull */
function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}



// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBufferAndViews(buf) {
  buffer = buf;
  Module['HEAP8'] = HEAP8 = new Int8Array(buf);
  Module['HEAP16'] = HEAP16 = new Int16Array(buf);
  Module['HEAP32'] = HEAP32 = new Int32Array(buf);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buf);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buf);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buf);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buf);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buf);
}

var STATIC_BASE = 1024,
    STACK_BASE = 5580064,
    STACKTOP = STACK_BASE,
    STACK_MAX = 337184,
    DYNAMIC_BASE = 5580064;

assert(STACK_BASE % 16 === 0, 'stack must start aligned');
assert(DYNAMIC_BASE % 16 === 0, 'heap must start aligned');



var TOTAL_STACK = 5242880;
if (Module['TOTAL_STACK']) assert(TOTAL_STACK === Module['TOTAL_STACK'], 'the stack size can no longer be determined at runtime')

var INITIAL_INITIAL_MEMORY = Module['INITIAL_MEMORY'] || 16777216;if (!Object.getOwnPropertyDescriptor(Module, 'INITIAL_MEMORY')) Object.defineProperty(Module, 'INITIAL_MEMORY', { configurable: true, get: function() { abort('Module.INITIAL_MEMORY has been replaced with plain INITIAL_INITIAL_MEMORY (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });

assert(INITIAL_INITIAL_MEMORY >= TOTAL_STACK, 'INITIAL_MEMORY should be larger than TOTAL_STACK, was ' + INITIAL_INITIAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');


// In non-standalone/normal mode, we create the memory here.



// Create the main memory. (Note: this isn't used in STANDALONE_WASM mode since the wasm
// memory is created in the wasm, not in JS.)

  if (Module['wasmMemory']) {
    wasmMemory = Module['wasmMemory'];
  } else
  {
    wasmMemory = new WebAssembly.Memory({
      'initial': INITIAL_INITIAL_MEMORY / WASM_PAGE_SIZE
      ,
      'maximum': INITIAL_INITIAL_MEMORY / WASM_PAGE_SIZE
    });
  }


if (wasmMemory) {
  buffer = wasmMemory.buffer;
}

// If the user provides an incorrect length, just use that length instead rather than providing the user to
// specifically provide the memory length with Module['INITIAL_MEMORY'].
INITIAL_INITIAL_MEMORY = buffer.byteLength;
assert(INITIAL_INITIAL_MEMORY % WASM_PAGE_SIZE === 0);
updateGlobalBufferAndViews(buffer);







// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  // The stack grows downwards
  HEAPU32[(STACK_MAX >> 2)+1] = 0x2135467;
  HEAPU32[(STACK_MAX >> 2)+2] = 0x89BACDFE;
  // Also test the global address 0 for integrity.
  // We don't do this with ASan because ASan does its own checks for this.
  HEAP32[0] = 0x63736d65; /* 'emsc' */
}

function checkStackCookie() {
  var cookie1 = HEAPU32[(STACK_MAX >> 2)+1];
  var cookie2 = HEAPU32[(STACK_MAX >> 2)+2];
  if (cookie1 != 0x2135467 || cookie2 != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x2135467, but received 0x' + cookie2.toString(16) + ' ' + cookie1.toString(16));
  }
  // Also test the global address 0 for integrity.
  // We don't do this with ASan because ASan does its own checks for this.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) abort('Runtime error: The application has corrupted its heap memory area (address zero)!');
}





// Endianness check (note: assumes compiler arch was little-endian)
(function() {
  var h16 = new Int16Array(1);
  var h8 = new Int8Array(h16.buffer);
  h16[0] = 0x6373;
  if (h8[0] !== 0x73 || h8[1] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';
})();

function abortFnPtrError(ptr, sig) {
	abort("Invalid function pointer " + ptr + " called with signature '" + sig + "'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this). Build with ASSERTIONS=2 for more info.");
}



var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {

  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPRERUN__);
}

function initRuntime() {
  checkStackCookie();
  assert(!runtimeInitialized);
  runtimeInitialized = true;
  if (!Module["noFSInit"] && !FS.init.initialized) FS.init();
TTY.init();
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  FS.ignorePermissions = false;
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();

  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}




// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc

assert(Math.imul, 'This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.fround, 'This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.clz32, 'This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.trunc, 'This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;



// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
}

function addRunDependency(id) {
  runDependencies++;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err('still waiting on run dependencies:');
          }
          err('dependency: ' + dep);
        }
        if (shown) {
          err('(end of list)');
        }
      }, 10000);
    }
  } else {
    err('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data

/** @param {string|number=} what */
function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  what += '';
  err(what);

  ABORT = true;
  EXITSTATUS = 1;

  var output = 'abort(' + what + ') at ' + stackTrace();
  what = output;

  // Use a wasm runtime error, because a JS error might be seen as a foreign
  // exception, which means we'd run destructors on it. We need the error to
  // simply make the program stop.
  var e = new WebAssembly.RuntimeError(what);

  // Throw the error whether or not MODULARIZE is set because abort is used
  // in code paths apart from instantiation where an exception is expected
  // to be thrown when abort is called.
  throw e;
}

var memoryInitializer = null;











function hasPrefix(str, prefix) {
  return String.prototype.startsWith ?
      str.startsWith(prefix) :
      str.indexOf(prefix) === 0;
}

// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return hasPrefix(filename, dataURIPrefix);
}

var fileURIPrefix = "file://";

// Indicates whether filename is delivered via file protocol (as opposed to http/https)
function isFileURI(filename) {
  return hasPrefix(filename, fileURIPrefix);
}



function createExportWrapper(name, fixedasm) {
  return function() {
    var displayName = name;
    var asm = fixedasm;
    if (!fixedasm) {
      asm = Module['asm'];
    }
    assert(runtimeInitialized, 'native function `' + displayName + '` called before runtime initialization');
    assert(!runtimeExited, 'native function `' + displayName + '` called after runtime exit (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
    if (!asm[name]) {
      assert(asm[name], 'exported native function `' + displayName + '` not found');
    }
    return asm[name].apply(null, arguments);
  };
}


var wasmBinaryFile = 'a.out.wasm';
if (!isDataURI(wasmBinaryFile)) {
  wasmBinaryFile = locateFile(wasmBinaryFile);
}

function getBinary() {
  try {
    if (wasmBinary) {
      return new Uint8Array(wasmBinary);
    }

    var binary = tryParseAsDataURI(wasmBinaryFile);
    if (binary) {
      return binary;
    }
    if (readBinary) {
      return readBinary(wasmBinaryFile);
    } else {
      throw "both async and sync fetching of the wasm failed";
    }
  }
  catch (err) {
    abort(err);
  }
}

function getBinaryPromise() {
  // If we don't have the binary yet, and have the Fetch api, use that;
  // in some environments, like Electron's render process, Fetch api may be present, but have a different context than expected, let's only use it on the Web
  if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && typeof fetch === 'function'
      // Let's not use fetch to get objects over file:// as it's most likely Cordova which doesn't support fetch for file://
      && !isFileURI(wasmBinaryFile)
      ) {
    return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function(response) {
      if (!response['ok']) {
        throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
      }
      return response['arrayBuffer']();
    }).catch(function () {
      return getBinary();
    });
  }
  // Otherwise, getBinary should be able to get it synchronously
  return Promise.resolve().then(getBinary);
}



// Create the wasm instance.
// Receives the wasm imports, returns the exports.
function createWasm() {
  // prepare imports
  var info = {
    'env': asmLibraryArg,
    'wasi_snapshot_preview1': asmLibraryArg
  };
  // Load the wasm module and create an instance of using native support in the JS engine.
  // handle a generated wasm instance, receiving its exports and
  // performing other necessary setup
  /** @param {WebAssembly.Module=} module*/
  function receiveInstance(instance, module) {
    var exports = instance.exports;
    Module['asm'] = exports;
    removeRunDependency('wasm-instantiate');
  }
  // we can't run yet (except in a pthread, where we have a custom sync instantiator)
  addRunDependency('wasm-instantiate');


  // Async compilation can be confusing when an error on the page overwrites Module
  // (for example, if the order of elements is wrong, and the one defining Module is
  // later), so we save Module and check it later.
  var trueModule = Module;
  function receiveInstantiatedSource(output) {
    // 'output' is a WebAssemblyInstantiatedSource object which has both the module and instance.
    // receiveInstance() will swap in the exports (to Module.asm) so they can be called
    assert(Module === trueModule, 'the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?');
    trueModule = null;
    // TODO: Due to Closure regression https://github.com/google/closure-compiler/issues/3193, the above line no longer optimizes out down to the following line.
    // When the regression is fixed, can restore the above USE_PTHREADS-enabled path.
    receiveInstance(output['instance']);
  }


  function instantiateArrayBuffer(receiver) {
    return getBinaryPromise().then(function(binary) {
      return WebAssembly.instantiate(binary, info);
    }).then(receiver, function(reason) {
      err('failed to asynchronously prepare wasm: ' + reason);


      abort(reason);
    });
  }

  // Prefer streaming instantiation if available.
  function instantiateAsync() {
    if (!wasmBinary &&
        typeof WebAssembly.instantiateStreaming === 'function' &&
        !isDataURI(wasmBinaryFile) &&
        // Don't use streaming for file:// delivered objects in a webview, fetch them synchronously.
        !isFileURI(wasmBinaryFile) &&
        typeof fetch === 'function') {
      fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function (response) {
        var result = WebAssembly.instantiateStreaming(response, info);
        return result.then(receiveInstantiatedSource, function(reason) {
            // We expect the most common failure cause to be a bad MIME type for the binary,
            // in which case falling back to ArrayBuffer instantiation should work.
            err('wasm streaming compile failed: ' + reason);
            err('falling back to ArrayBuffer instantiation');
            return instantiateArrayBuffer(receiveInstantiatedSource);
          });
      });
    } else {
      return instantiateArrayBuffer(receiveInstantiatedSource);
    }
  }
  // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback
  // to manually instantiate the Wasm module themselves. This allows pages to run the instantiation parallel
  // to any other async startup actions they are performing.
  if (Module['instantiateWasm']) {
    try {
      var exports = Module['instantiateWasm'](info, receiveInstance);
      return exports;
    } catch(e) {
      err('Module.instantiateWasm callback failed with error: ' + e);
      return false;
    }
  }

  instantiateAsync();
  return {}; // no exports yet; we'll fill them in later
}

// Globals used by JS i64 conversions
var tempDouble;
var tempI64;

// === Body ===

var ASM_CONSTS = {
  
};




// STATICTOP = STATIC_BASE + 336160;
/* global initializers */  __ATINIT__.push({ func: function() { ___wasm_call_ctors() } });




/* no memory initializer */
// {{PRE_LIBRARY}}


  function abortStackOverflow(allocSize) {
      abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
    }

  function callRuntimeCallbacks(callbacks) {
      while(callbacks.length > 0) {
        var callback = callbacks.shift();
        if (typeof callback == 'function') {
          callback(Module); // Pass the module as the first argument.
          continue;
        }
        var func = callback.func;
        if (typeof func === 'number') {
          if (callback.arg === undefined) {
            wasmTable.get(func)();
          } else {
            wasmTable.get(func)(callback.arg);
          }
        } else {
          func(callback.arg === undefined ? null : callback.arg);
        }
      }
    }

  function demangle(func) {
      warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
      return func;
    }

  function demangleAll(text) {
      var regex =
        /\b_Z[\w\d_]+/g;
      return text.replace(regex,
        function(x) {
          var y = demangle(x);
          return x === y ? x : (y + ' [' + x + ']');
        });
    }

  
  function dynCallLegacy(sig, ptr, args) {
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      if (args && args.length) {
        // j (64-bit integer) must be passed in as two numbers [low 32, high 32].
        assert(args.length === sig.substring(1).replace(/j/g, '--').length);
      } else {
        assert(sig.length == 1);
      }
      if (args && args.length) {
        return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
      }
      return Module['dynCall_' + sig].call(null, ptr);
    }function dynCall(sig, ptr, args) {
      // Without WASM_BIGINT support we cannot directly call function with i64 as
      // part of thier signature, so we rely the dynCall functions generated by
      // wasm-emscripten-finalize
      if (sig.indexOf('j') != -1) {
        return dynCallLegacy(sig, ptr, args);
      }
  
      return wasmTable.get(ptr).apply(null, args)
    }

  function jsStackTrace() {
      var error = new Error();
      if (!error.stack) {
        // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
        // so try that as a special-case.
        try {
          throw new Error();
        } catch(e) {
          error = e;
        }
        if (!error.stack) {
          return '(no stack trace available)';
        }
      }
      return error.stack.toString();
    }

  function stackTrace() {
      var js = jsStackTrace();
      if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
      return demangleAll(js);
    }

  
  var ExceptionInfoAttrs={DESTRUCTOR_OFFSET:0,REFCOUNT_OFFSET:4,TYPE_OFFSET:8,CAUGHT_OFFSET:12,RETHROWN_OFFSET:13,SIZE:16};function ___cxa_allocate_exception(size) {
      // Thrown object is prepended by exception metadata block
      return _malloc(size + ExceptionInfoAttrs.SIZE) + ExceptionInfoAttrs.SIZE;
    }

  
  function _atexit(func, arg) {
    }function ___cxa_atexit(a0,a1
  ) {
  return _atexit(a0,a1);
  }

  
  function ExceptionInfo(excPtr) {
      this.excPtr = excPtr;
      this.ptr = excPtr - ExceptionInfoAttrs.SIZE;
  
      this.set_type = function(type) {
        HEAP32[(((this.ptr)+(ExceptionInfoAttrs.TYPE_OFFSET))>>2)]=type;
      };
  
      this.get_type = function() {
        return HEAP32[(((this.ptr)+(ExceptionInfoAttrs.TYPE_OFFSET))>>2)];
      };
  
      this.set_destructor = function(destructor) {
        HEAP32[(((this.ptr)+(ExceptionInfoAttrs.DESTRUCTOR_OFFSET))>>2)]=destructor;
      };
  
      this.get_destructor = function() {
        return HEAP32[(((this.ptr)+(ExceptionInfoAttrs.DESTRUCTOR_OFFSET))>>2)];
      };
  
      this.set_refcount = function(refcount) {
        HEAP32[(((this.ptr)+(ExceptionInfoAttrs.REFCOUNT_OFFSET))>>2)]=refcount;
      };
  
      this.set_caught = function (caught) {
        caught = caught ? 1 : 0;
        HEAP8[(((this.ptr)+(ExceptionInfoAttrs.CAUGHT_OFFSET))>>0)]=caught;
      };
  
      this.get_caught = function () {
        return HEAP8[(((this.ptr)+(ExceptionInfoAttrs.CAUGHT_OFFSET))>>0)] != 0;
      };
  
      this.set_rethrown = function (rethrown) {
        rethrown = rethrown ? 1 : 0;
        HEAP8[(((this.ptr)+(ExceptionInfoAttrs.RETHROWN_OFFSET))>>0)]=rethrown;
      };
  
      this.get_rethrown = function () {
        return HEAP8[(((this.ptr)+(ExceptionInfoAttrs.RETHROWN_OFFSET))>>0)] != 0;
      };
  
      // Initialize native structure fields. Should be called once after allocated.
      this.init = function(type, destructor) {
        this.set_type(type);
        this.set_destructor(destructor);
        this.set_refcount(0);
        this.set_caught(false);
        this.set_rethrown(false);
      }
  
      this.add_ref = function() {
        var value = HEAP32[(((this.ptr)+(ExceptionInfoAttrs.REFCOUNT_OFFSET))>>2)];
        HEAP32[(((this.ptr)+(ExceptionInfoAttrs.REFCOUNT_OFFSET))>>2)]=value + 1;
      };
  
      // Returns true if last reference released.
      this.release_ref = function() {
        var prev = HEAP32[(((this.ptr)+(ExceptionInfoAttrs.REFCOUNT_OFFSET))>>2)];
        HEAP32[(((this.ptr)+(ExceptionInfoAttrs.REFCOUNT_OFFSET))>>2)]=prev - 1;
        assert(prev > 0);
        return prev === 1;
      };
    }
  
  var exceptionLast=0;
  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return __ZSt18uncaught_exceptionv.uncaught_exceptions > 0;
    }function ___cxa_throw(ptr, type, destructor) {
      var info = new ExceptionInfo(ptr);
      // Initialize ExceptionInfo content after it was allocated in __cxa_allocate_exception.
      info.init(type, destructor);
      exceptionLast = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exceptions = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exceptions++;
      }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }

  
  function setErrNo(value) {
      HEAP32[((___errno_location())>>2)]=value;
      return value;
    }function ___map_file(pathname, size) {
      setErrNo(63);
      return -1;
    }

  
  
  var PATH={splitPath:function(filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function(parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function(path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function(path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function(path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        path = PATH.normalize(path);
        path = path.replace(/\/$/, "");
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function(path) {
        return PATH.splitPath(path)[3];
      },join:function() {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function(l, r) {
        return PATH.normalize(l + '/' + r);
      }};
  
  
  var PATH_FS={resolve:function() {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function(from, to) {
        from = PATH_FS.resolve(from).substr(1);
        to = PATH_FS.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function() {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function(dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function(stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(43);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function(stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function(stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function(stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(60);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(29);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(6);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function(stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(60);
          }
          try {
            for (var i = 0; i < length; i++) {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            }
          } catch (e) {
            throw new FS.ErrnoError(29);
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function(tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = Buffer.alloc ? Buffer.alloc(BUFSIZE) : new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              try {
                bytesRead = nodeFS.readSync(process.stdin.fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
            } else
            if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function(tty, val) {
          if (val === null || val === 10) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function(tty) {
          if (tty.output && tty.output.length > 0) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function(tty, val) {
          if (val === null || val === 10) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function(tty) {
          if (tty.output && tty.output.length > 0) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function(mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function(parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(63);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function(node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function(node) {
        if (!node.contents) return new Uint8Array(0);
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function(node, newCapacity) {
        var prevCapacity = node.contents ? node.contents.length : 0;
        if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
        // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
        // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
        // avoid overshooting the allocation cap by a very large margin.
        var CAPACITY_DOUBLING_MAX = 1024 * 1024;
        newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) >>> 0);
        if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
        var oldContents = node.contents;
        node.contents = new Uint8Array(newCapacity); // Allocate new storage.
        if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
        return;
      },resizeFileStorage:function(node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newSize); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function(node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function(node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function(parent, name) {
          throw FS.genericErrors[44];
        },mknod:function(parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function(old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(55);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function(parent, name) {
          delete parent.contents[name];
        },rmdir:function(parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(55);
          }
          delete parent.contents[name];
        },readdir:function(node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function(parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function(node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(28);
          }
          return node.link;
        }},stream_ops:{read:function(stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function(stream, buffer, offset, length, position, canOwn) {
          // The data buffer should be a typed array view
          assert(!(buffer instanceof ArrayBuffer));
  
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = buffer.slice(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) {
            // Use typed array write which is available.
            node.contents.set(buffer.subarray(offset, offset + length), position);
          } else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position + length);
          return length;
        },llseek:function(stream, offset, whence) {
          var position = offset;
          if (whence === 1) {
            position += stream.position;
          } else if (whence === 2) {
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(28);
          }
          return position;
        },allocate:function(stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function(stream, address, length, position, prot, flags) {
          // We don't currently support location hints for the address of the mapping
          assert(address === 0);
  
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if (!(flags & 2) && contents.buffer === buffer) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < contents.length) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = FS.mmapAlloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(48);
            }
            HEAP8.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function(stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var ERRNO_MESSAGES={0:"Success",1:"Arg list too long",2:"Permission denied",3:"Address already in use",4:"Address not available",5:"Address family not supported by protocol family",6:"No more processes",7:"Socket already connected",8:"Bad file number",9:"Trying to read unreadable message",10:"Mount device busy",11:"Operation canceled",12:"No children",13:"Connection aborted",14:"Connection refused",15:"Connection reset by peer",16:"File locking deadlock error",17:"Destination address required",18:"Math arg out of domain of func",19:"Quota exceeded",20:"File exists",21:"Bad address",22:"File too large",23:"Host is unreachable",24:"Identifier removed",25:"Illegal byte sequence",26:"Connection already in progress",27:"Interrupted system call",28:"Invalid argument",29:"I/O error",30:"Socket is already connected",31:"Is a directory",32:"Too many symbolic links",33:"Too many open files",34:"Too many links",35:"Message too long",36:"Multihop attempted",37:"File or path name too long",38:"Network interface is not configured",39:"Connection reset by network",40:"Network is unreachable",41:"Too many open files in system",42:"No buffer space available",43:"No such device",44:"No such file or directory",45:"Exec format error",46:"No record locks available",47:"The link has been severed",48:"Not enough core",49:"No message of desired type",50:"Protocol not available",51:"No space left on device",52:"Function not implemented",53:"Socket is not connected",54:"Not a directory",55:"Directory not empty",56:"State not recoverable",57:"Socket operation on non-socket",59:"Not a typewriter",60:"No such device or address",61:"Value too large for defined data type",62:"Previous owner died",63:"Not super-user",64:"Broken pipe",65:"Protocol error",66:"Unknown protocol",67:"Protocol wrong type for socket",68:"Math result not representable",69:"Read only file system",70:"Illegal seek",71:"No such process",72:"Stale file handle",73:"Connection timed out",74:"Text file busy",75:"Cross-device link",100:"Device not a stream",101:"Bad font file fmt",102:"Invalid slot",103:"Invalid request code",104:"No anode",105:"Block device required",106:"Channel number out of range",107:"Level 3 halted",108:"Level 3 reset",109:"Link number out of range",110:"Protocol driver not attached",111:"No CSI structure available",112:"Level 2 halted",113:"Invalid exchange",114:"Invalid request descriptor",115:"Exchange full",116:"No data (for no delay io)",117:"Timer expired",118:"Out of streams resources",119:"Machine is not on the network",120:"Package not installed",121:"The object is remote",122:"Advertise error",123:"Srmount error",124:"Communication error on send",125:"Cross mount point (not really error)",126:"Given log. name not unique",127:"f.d. invalid for this operation",128:"Remote address changed",129:"Can   access a needed shared lib",130:"Accessing a corrupted shared lib",131:".lib section in a.out corrupted",132:"Attempting to link in too many libs",133:"Attempting to exec a shared library",135:"Streams pipe error",136:"Too many users",137:"Socket type not supported",138:"Not supported",139:"Protocol family not supported",140:"Can't send after socket shutdown",141:"Too many references",142:"Host is down",148:"No medium (in tape drive)",156:"Level 2 not synchronized"};
  
  var ERRNO_CODES={EPERM:63,ENOENT:44,ESRCH:71,EINTR:27,EIO:29,ENXIO:60,E2BIG:1,ENOEXEC:45,EBADF:8,ECHILD:12,EAGAIN:6,EWOULDBLOCK:6,ENOMEM:48,EACCES:2,EFAULT:21,ENOTBLK:105,EBUSY:10,EEXIST:20,EXDEV:75,ENODEV:43,ENOTDIR:54,EISDIR:31,EINVAL:28,ENFILE:41,EMFILE:33,ENOTTY:59,ETXTBSY:74,EFBIG:22,ENOSPC:51,ESPIPE:70,EROFS:69,EMLINK:34,EPIPE:64,EDOM:18,ERANGE:68,ENOMSG:49,EIDRM:24,ECHRNG:106,EL2NSYNC:156,EL3HLT:107,EL3RST:108,ELNRNG:109,EUNATCH:110,ENOCSI:111,EL2HLT:112,EDEADLK:16,ENOLCK:46,EBADE:113,EBADR:114,EXFULL:115,ENOANO:104,EBADRQC:103,EBADSLT:102,EDEADLOCK:16,EBFONT:101,ENOSTR:100,ENODATA:116,ETIME:117,ENOSR:118,ENONET:119,ENOPKG:120,EREMOTE:121,ENOLINK:47,EADV:122,ESRMNT:123,ECOMM:124,EPROTO:65,EMULTIHOP:36,EDOTDOT:125,EBADMSG:9,ENOTUNIQ:126,EBADFD:127,EREMCHG:128,ELIBACC:129,ELIBBAD:130,ELIBSCN:131,ELIBMAX:132,ELIBEXEC:133,ENOSYS:52,ENOTEMPTY:55,ENAMETOOLONG:37,ELOOP:32,EOPNOTSUPP:138,EPFNOSUPPORT:139,ECONNRESET:15,ENOBUFS:42,EAFNOSUPPORT:5,EPROTOTYPE:67,ENOTSOCK:57,ENOPROTOOPT:50,ESHUTDOWN:140,ECONNREFUSED:14,EADDRINUSE:3,ECONNABORTED:13,ENETUNREACH:40,ENETDOWN:38,ETIMEDOUT:73,EHOSTDOWN:142,EHOSTUNREACH:23,EINPROGRESS:26,EALREADY:7,EDESTADDRREQ:17,EMSGSIZE:35,EPROTONOSUPPORT:66,ESOCKTNOSUPPORT:137,EADDRNOTAVAIL:4,ENETRESET:39,EISCONN:30,ENOTCONN:53,ETOOMANYREFS:141,EUSERS:136,EDQUOT:19,ESTALE:72,ENOTSUP:138,ENOMEDIUM:148,EILSEQ:25,EOVERFLOW:61,ECANCELED:11,ENOTRECOVERABLE:56,EOWNERDEAD:62,ESTRPIPE:135};var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function(e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return setErrNo(e.errno);
      },lookupPath:function(path, opts) {
        path = PATH_FS.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(32);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH_FS.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(32);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function(node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function(parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function(parent, name) {
        var errCode = FS.mayLookup(parent);
        if (errCode) {
          throw new FS.ErrnoError(errCode, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function(parent, name, mode, rdev) {
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function(node) {
        FS.hashRemoveNode(node);
      },isRoot:function(node) {
        return node === node.parent;
      },isMountpoint:function(node) {
        return !!node.mounted;
      },isFile:function(mode) {
        return (mode & 61440) === 32768;
      },isDir:function(mode) {
        return (mode & 61440) === 16384;
      },isLink:function(mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function(mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function(mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function(mode) {
        return (mode & 61440) === 4096;
      },isSocket:function(mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function(str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function(flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function(node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return 2;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return 2;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return 2;
        }
        return 0;
      },mayLookup:function(dir) {
        var errCode = FS.nodePermissions(dir, 'x');
        if (errCode) return errCode;
        if (!dir.node_ops.lookup) return 2;
        return 0;
      },mayCreate:function(dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return 20;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function(dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var errCode = FS.nodePermissions(dir, 'wx');
        if (errCode) {
          return errCode;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return 54;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return 10;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return 31;
          }
        }
        return 0;
      },mayOpen:function(node, flags) {
        if (!node) {
          return 44;
        }
        if (FS.isLink(node.mode)) {
          return 32;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return 31;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function(fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(33);
      },getStream:function(fd) {
        return FS.streams[fd];
      },createStream:function(stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = /** @constructor */ function(){};
          FS.FSStream.prototype = {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          };
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function(fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function(stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function() {
          throw new FS.ErrnoError(70);
        }},major:function(dev) {
        return ((dev) >> 8);
      },minor:function(dev) {
        return ((dev) & 0xff);
      },makedev:function(ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function(dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function(dev) {
        return FS.devices[dev];
      },getMounts:function(mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function(populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          err('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(errCode) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(errCode);
        }
  
        function done(errCode) {
          if (errCode) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(errCode);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function(type, opts, mountpoint) {
        if (typeof type === 'string') {
          // The filesystem was not included, and instead we have an error
          // message stored in the variable.
          throw type;
        }
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(10);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(10);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(54);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(28);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function(parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function(path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(28);
        }
        var errCode = FS.mayCreate(parent, name);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function(path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function(path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function(path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != 20) throw e;
          }
        }
      },mkdev:function(path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function(oldpath, newpath) {
        if (!PATH_FS.resolve(oldpath)) {
          throw new FS.ErrnoError(44);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(44);
        }
        var newname = PATH.basename(newpath);
        var errCode = FS.mayCreate(parent, newname);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function(old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
  
        // let the errors from non existant directories percolate up
        lookup = FS.lookupPath(old_path, { parent: true });
        old_dir = lookup.node;
        lookup = FS.lookupPath(new_path, { parent: true });
        new_dir = lookup.node;
  
        if (!old_dir || !new_dir) throw new FS.ErrnoError(44);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(75);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH_FS.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(28);
        }
        // new path should not be an ancestor of the old path
        relative = PATH_FS.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(55);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var errCode = FS.mayDelete(old_dir, old_name, isdir);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        errCode = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(10);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          errCode = FS.nodePermissions(old_dir, 'w');
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          err("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          err("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var errCode = FS.mayDelete(parent, name, true);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          err("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          err("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(54);
        }
        return node.node_ops.readdir(node);
      },unlink:function(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var errCode = FS.mayDelete(parent, name, false);
        if (errCode) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          err("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          err("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function(path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(44);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(28);
        }
        return PATH_FS.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function(path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(63);
        }
        return node.node_ops.getattr(node);
      },lstat:function(path) {
        return FS.stat(path, true);
      },chmod:function(path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function(path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function(fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        FS.chmod(stream.node, mode);
      },chown:function(path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function(path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function(fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function(path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(28);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(28);
        }
        var errCode = FS.nodePermissions(node, 'w');
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function(fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(28);
        }
        FS.truncate(stream.node, len);
      },utime:function(path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function(path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(44);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(20);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(54);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var errCode = FS.mayOpen(node, flags);
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512 | 131072);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            err("FS.trackingDelegate error on read file: " + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          err("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function(stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },isClosed:function(stream) {
        return stream.fd === null;
      },llseek:function(stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(70);
        }
        if (whence != 0 && whence != 1 && whence != 2) {
          throw new FS.ErrnoError(28);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function(stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(28);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function(stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(28);
        }
        if (stream.seekable && stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          err("FS.trackingDelegate['onWriteToFile']('"+stream.path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function(stream, offset, length) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(28);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(43);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(138);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function(stream, address, length, position, prot, flags) {
        // User requests writing to file (prot & PROT_WRITE != 0).
        // Checking if we have permissions to write to the file unless
        // MAP_PRIVATE flag is set. According to POSIX spec it is possible
        // to write to file opened in read-only mode with MAP_PRIVATE flag,
        // as all modifications will be visible only in the memory of
        // the current process.
        if ((prot & 2) !== 0
            && (flags & 2) === 0
            && (stream.flags & 2097155) !== 2) {
          throw new FS.ErrnoError(2);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(2);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(43);
        }
        return stream.stream_ops.mmap(stream, address, length, position, prot, flags);
      },msync:function(stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function(stream) {
        return 0;
      },ioctl:function(stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(59);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function(path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function(path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:function() {
        return FS.currentPath;
      },chdir:function(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(44);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(54);
        }
        var errCode = FS.nodePermissions(lookup.node, 'x');
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function() {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function() {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto === 'object' && typeof crypto['getRandomValues'] === 'function') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else
        if (ENVIRONMENT_IS_NODE) {
          // for nodejs with or without crypto support included
          try {
            var crypto_module = require('crypto');
            // nodejs has crypto support
            random_device = function() { return crypto_module['randomBytes'](1)[0]; };
          } catch (e) {
            // nodejs doesn't have crypto support
          }
        } else
        {}
        if (!random_device) {
          // we couldn't find a proper implementation, as Math.random() is not suitable for /dev/random, see emscripten-core/emscripten/pull/7096
          random_device = function() { abort("no cryptographic support found for random_device. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: function(array) { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };"); };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function() {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(8);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function() {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        var stdout = FS.open('/dev/stdout', 'w');
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function() {
        if (FS.ErrnoError) return;
        FS.ErrnoError = /** @this{Object} */ function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = /** @this{Object} */ function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
  
          // Try to get a maximally helpful stack trace. On Node.js, getting Error.stack
          // now ensures it shows what we want.
          if (this.stack) {
            // Define the stack property for Node.js 4, which otherwise errors on the next line.
            Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
            this.stack = demangleAll(this.stack);
          }
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [44].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function() {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
        };
      },init:function(input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function() {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function(canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function(parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function(relative, base) {
        return PATH_FS.resolve(base, relative);
      },standardizePath:function(path) {
        return PATH.normalize(path);
      },findObject:function(path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          setErrNo(ret.error);
          return null;
        }
      },analyzePath:function(path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function(parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function(parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function(parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function(parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function(parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(6);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function(parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function(obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (read_) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(read_(obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) setErrNo(29);
        return success;
      },createLazyFile:function(parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        /** @constructor */
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = /** @this{Object} */ function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        };
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        };
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(/** @type{Array<number>} */(xhr.response || []));
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            out("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        };
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: /** @this{Object} */ function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: /** @this{Object} */ function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: /** @this {FSNode} */ function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(29);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(29);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function(parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function() {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function() {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function(paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          out('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function(paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },mmapAlloc:function(size) {
        var alignedSize = alignMemory(size, 16384);
        var ptr = _malloc(alignedSize);
        while (size < alignedSize) HEAP8[ptr + size++] = 0;
        return ptr;
      }};var SYSCALLS={mappings:{},DEFAULT_POLLMASK:5,umask:511,calculateAt:function(dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(8);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function(func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -54;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        (tempI64 = [stat.size>>>0,(tempDouble=stat.size,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(40))>>2)]=tempI64[0],HEAP32[(((buf)+(44))>>2)]=tempI64[1]);
        HEAP32[(((buf)+(48))>>2)]=4096;
        HEAP32[(((buf)+(52))>>2)]=stat.blocks;
        HEAP32[(((buf)+(56))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(76))>>2)]=0;
        (tempI64 = [stat.ino>>>0,(tempDouble=stat.ino,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(80))>>2)]=tempI64[0],HEAP32[(((buf)+(84))>>2)]=tempI64[1]);
        return 0;
      },doMsync:function(addr, stream, len, flags, offset) {
        var buffer = HEAPU8.slice(addr, addr + len);
        FS.msync(stream, buffer, offset, len, flags);
      },doMkdir:function(path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function(path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -28;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function(path, buf, bufsize) {
        if (bufsize <= 0) return -28;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function(path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -28;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        if (!node) {
          return -44;
        }
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -2;
        }
        return 0;
      },doDup:function(path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function(stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function(stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:undefined,get:function() {
        assert(SYSCALLS.varargs != undefined);
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function(ptr) {
        var ret = UTF8ToString(ptr);
        return ret;
      },getStreamFromFD:function(fd) {
        var stream = FS.getStream(fd);
        if (!stream) throw new FS.ErrnoError(8);
        return stream;
      },get64:function(low, high) {
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      }};function ___sys_fcntl64(fd, cmd, varargs) {SYSCALLS.varargs = varargs;
  try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -28;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        /* case 12: Currently in musl F_GETLK64 has same value as F_GETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */ {
          
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        /* case 13: Currently in musl F_SETLK64 has same value as F_SETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
        /* case 14: Currently in musl F_SETLKW64 has same value as F_SETLKW, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
          
          
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -28; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          setErrNo(28);
          return -1;
        default: {
          return -28;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___sys_ioctl(fd, op, varargs) {SYSCALLS.varargs = varargs;
  try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      switch (op) {
        case 21509:
        case 21505: {
          if (!stream.tty) return -59;
          return 0;
        }
        case 21510:
        case 21511:
        case 21512:
        case 21506:
        case 21507:
        case 21508: {
          if (!stream.tty) return -59;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -59;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -59;
          return -28; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -59;
          return 0;
        }
        case 21524: {
          // TODO: technically, this ioctl call should change the window size.
          // but, since emscripten doesn't have any concept of a terminal window
          // yet, we'll just silently throw it away as we do TIOCGWINSZ
          if (!stream.tty) return -59;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function syscallMunmap(addr, len) {
      if ((addr | 0) === -1 || len === 0) {
        return -28;
      }
      // TODO: support unmmap'ing parts of allocations
      var info = SYSCALLS.mappings[addr];
      if (!info) return 0;
      if (len === info.len) {
        var stream = FS.getStream(info.fd);
        if (info.prot & 2) {
          SYSCALLS.doMsync(addr, stream, len, info.flags, info.offset);
        }
        FS.munmap(stream);
        SYSCALLS.mappings[addr] = null;
        if (info.allocated) {
          _free(info.malloc);
        }
      }
      return 0;
    }function ___sys_munmap(addr, len) {try {
  
      return syscallMunmap(addr, len);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___sys_open(path, flags, varargs) {SYSCALLS.varargs = varargs;
  try {
  
      var pathname = SYSCALLS.getStr(path);
      var mode = SYSCALLS.get();
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _abort() {
      abort();
    }

  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.copyWithin(dest, src, src + num);
    }

  
  function _emscripten_get_heap_size() {
      return HEAPU8.length;
    }
  
  function abortOnCannotGrowMemory(requestedSize) {
      abort('Cannot enlarge memory arrays to size ' + requestedSize + ' bytes (OOM). Either (1) compile with  -s INITIAL_MEMORY=X  with X higher than the current value ' + HEAP8.length + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
    }function _emscripten_resize_heap(requestedSize) {
      requestedSize = requestedSize >>> 0;
      abortOnCannotGrowMemory(requestedSize);
    }

  
  var JSEvents={inEventHandler:0,removeAllEventListeners:function() {
        for(var i = JSEvents.eventHandlers.length-1; i >= 0; --i) {
          JSEvents._removeHandler(i);
        }
        JSEvents.eventHandlers = [];
        JSEvents.deferredCalls = [];
      },registerRemoveEventListeners:function() {
        if (!JSEvents.removeEventListenersRegistered) {
          __ATEXIT__.push(JSEvents.removeAllEventListeners);
          JSEvents.removeEventListenersRegistered = true;
        }
      },deferredCalls:[],deferCall:function(targetFunction, precedence, argsList) {
        function arraysHaveEqualContent(arrA, arrB) {
          if (arrA.length != arrB.length) return false;
  
          for(var i in arrA) {
            if (arrA[i] != arrB[i]) return false;
          }
          return true;
        }
        // Test if the given call was already queued, and if so, don't add it again.
        for(var i in JSEvents.deferredCalls) {
          var call = JSEvents.deferredCalls[i];
          if (call.targetFunction == targetFunction && arraysHaveEqualContent(call.argsList, argsList)) {
            return;
          }
        }
        JSEvents.deferredCalls.push({
          targetFunction: targetFunction,
          precedence: precedence,
          argsList: argsList
        });
  
        JSEvents.deferredCalls.sort(function(x,y) { return x.precedence < y.precedence; });
      },removeDeferredCalls:function(targetFunction) {
        for(var i = 0; i < JSEvents.deferredCalls.length; ++i) {
          if (JSEvents.deferredCalls[i].targetFunction == targetFunction) {
            JSEvents.deferredCalls.splice(i, 1);
            --i;
          }
        }
      },canPerformEventHandlerRequests:function() {
        return JSEvents.inEventHandler && JSEvents.currentEventHandler.allowsDeferredCalls;
      },runDeferredCalls:function() {
        if (!JSEvents.canPerformEventHandlerRequests()) {
          return;
        }
        for(var i = 0; i < JSEvents.deferredCalls.length; ++i) {
          var call = JSEvents.deferredCalls[i];
          JSEvents.deferredCalls.splice(i, 1);
          --i;
          call.targetFunction.apply(null, call.argsList);
        }
      },eventHandlers:[],removeAllHandlersOnTarget:function(target, eventTypeString) {
        for(var i = 0; i < JSEvents.eventHandlers.length; ++i) {
          if (JSEvents.eventHandlers[i].target == target && 
            (!eventTypeString || eventTypeString == JSEvents.eventHandlers[i].eventTypeString)) {
             JSEvents._removeHandler(i--);
           }
        }
      },_removeHandler:function(i) {
        var h = JSEvents.eventHandlers[i];
        h.target.removeEventListener(h.eventTypeString, h.eventListenerFunc, h.useCapture);
        JSEvents.eventHandlers.splice(i, 1);
      },registerOrRemoveHandler:function(eventHandler) {
        var jsEventHandler = function jsEventHandler(event) {
          // Increment nesting count for the event handler.
          ++JSEvents.inEventHandler;
          JSEvents.currentEventHandler = eventHandler;
          // Process any old deferred calls the user has placed.
          JSEvents.runDeferredCalls();
          // Process the actual event, calls back to user C code handler.
          eventHandler.handlerFunc(event);
          // Process any new deferred calls that were placed right now from this event handler.
          JSEvents.runDeferredCalls();
          // Out of event handler - restore nesting count.
          --JSEvents.inEventHandler;
        };
        
        if (eventHandler.callbackfunc) {
          eventHandler.eventListenerFunc = jsEventHandler;
          eventHandler.target.addEventListener(eventHandler.eventTypeString, jsEventHandler, eventHandler.useCapture);
          JSEvents.eventHandlers.push(eventHandler);
          JSEvents.registerRemoveEventListeners();
        } else {
          for(var i = 0; i < JSEvents.eventHandlers.length; ++i) {
            if (JSEvents.eventHandlers[i].target == eventHandler.target
             && JSEvents.eventHandlers[i].eventTypeString == eventHandler.eventTypeString) {
               JSEvents._removeHandler(i--);
             }
          }
        }
      },getNodeNameForTarget:function(target) {
        if (!target) return '';
        if (target == window) return '#window';
        if (target == screen) return '#screen';
        return (target && target.nodeName) ? target.nodeName : '';
      },fullscreenEnabled:function() {
        return document.fullscreenEnabled
        // Safari 13.0.3 on macOS Catalina 10.15.1 still ships with prefixed webkitFullscreenEnabled.
        // TODO: If Safari at some point ships with unprefixed version, update the version check above.
        || document.webkitFullscreenEnabled
         ;
      }};
  
  
  
  function maybeCStringToJsString(cString) {
      // "cString > 2" checks if the input is a number, and isn't of the special
      // values we accept here, EMSCRIPTEN_EVENT_TARGET_* (which map to 0, 1, 2).
      // In other words, if cString > 2 then it's a pointer to a valid place in
      // memory, and points to a C string.
      return cString > 2 ? UTF8ToString(cString) : cString;
    }
  
  var specialHTMLTargets=[0, typeof document !== 'undefined' ? document : 0, typeof window !== 'undefined' ? window : 0];function findEventTarget(target) {
      target = maybeCStringToJsString(target);
      var domElement = specialHTMLTargets[target] || (typeof document !== 'undefined' ? document.querySelector(target) : undefined);
      return domElement;
    }function findCanvasEventTarget(target) { return findEventTarget(target); }function _emscripten_set_canvas_element_size(target, width, height) {
      var canvas = findCanvasEventTarget(target);
      if (!canvas) return -4;
      canvas.width = width;
      canvas.height = height;
      return 0;
    }

  
  
  
  function __webgl_enable_ANGLE_instanced_arrays(ctx) {
      // Extension available in WebGL 1 from Firefox 26 and Google Chrome 30 onwards. Core feature in WebGL 2.
      var ext = ctx.getExtension('ANGLE_instanced_arrays');
      if (ext) {
        ctx['vertexAttribDivisor'] = function(index, divisor) { ext['vertexAttribDivisorANGLE'](index, divisor); };
        ctx['drawArraysInstanced'] = function(mode, first, count, primcount) { ext['drawArraysInstancedANGLE'](mode, first, count, primcount); };
        ctx['drawElementsInstanced'] = function(mode, count, type, indices, primcount) { ext['drawElementsInstancedANGLE'](mode, count, type, indices, primcount); };
        return 1;
      }
    }
  
  function __webgl_enable_OES_vertex_array_object(ctx) {
      // Extension available in WebGL 1 from Firefox 25 and WebKit 536.28/desktop Safari 6.0.3 onwards. Core feature in WebGL 2.
      var ext = ctx.getExtension('OES_vertex_array_object');
      if (ext) {
        ctx['createVertexArray'] = function() { return ext['createVertexArrayOES'](); };
        ctx['deleteVertexArray'] = function(vao) { ext['deleteVertexArrayOES'](vao); };
        ctx['bindVertexArray'] = function(vao) { ext['bindVertexArrayOES'](vao); };
        ctx['isVertexArray'] = function(vao) { return ext['isVertexArrayOES'](vao); };
        return 1;
      }
    }
  
  function __webgl_enable_WEBGL_draw_buffers(ctx) {
      // Extension available in WebGL 1 from Firefox 28 onwards. Core feature in WebGL 2.
      var ext = ctx.getExtension('WEBGL_draw_buffers');
      if (ext) {
        ctx['drawBuffers'] = function(n, bufs) { ext['drawBuffersWEBGL'](n, bufs); };
        return 1;
      }
    }
  
  function __webgl_enable_WEBGL_draw_instanced_base_vertex_base_instance(ctx) {
      // Closure is expected to be allowed to minify the '.dibvbi' property, so not accessing it quoted.
      return !!(ctx.dibvbi = ctx.getExtension('WEBGL_draw_instanced_base_vertex_base_instance'));
    }
  
  function __webgl_enable_WEBGL_multi_draw(ctx) {
      // Closure is expected to be allowed to minify the '.multiDrawWebgl' property, so not accessing it quoted.
      return !!(ctx.multiDrawWebgl = ctx.getExtension('WEBGL_multi_draw'));
    }var GL={counter:1,buffers:[],mappedBuffers:{},programs:[],framebuffers:[],renderbuffers:[],textures:[],uniforms:[],shaders:[],vaos:[],contexts:[],offscreenCanvases:{},timerQueriesEXT:[],queries:[],samplers:[],transformFeedbacks:[],syncs:[],byteSizeByTypeRoot:5120,byteSizeByType:[1,1,2,2,4,4,4,2,3,4,8],programInfos:{},stringCache:{},stringiCache:{},unpackAlignment:4,recordError:function recordError(errorCode) {
        if (!GL.lastError) {
          GL.lastError = errorCode;
        }
      },getNewId:function(table) {
        var ret = GL.counter++;
        for (var i = table.length; i < ret; i++) {
          table[i] = null;
        }
        return ret;
      },MAX_TEMP_BUFFER_SIZE:2097152,numTempVertexBuffersPerSize:64,log2ceilLookup:function(i) {
        return 32 - Math.clz32(i-1);
      },generateTempBuffers:function(quads, context) {
        var largestIndex = GL.log2ceilLookup(GL.MAX_TEMP_BUFFER_SIZE);
        context.tempVertexBufferCounters1 = [];
        context.tempVertexBufferCounters2 = [];
        context.tempVertexBufferCounters1.length = context.tempVertexBufferCounters2.length = largestIndex+1;
        context.tempVertexBuffers1 = [];
        context.tempVertexBuffers2 = [];
        context.tempVertexBuffers1.length = context.tempVertexBuffers2.length = largestIndex+1;
        context.tempIndexBuffers = [];
        context.tempIndexBuffers.length = largestIndex+1;
        for (var i = 0; i <= largestIndex; ++i) {
          context.tempIndexBuffers[i] = null; // Created on-demand
          context.tempVertexBufferCounters1[i] = context.tempVertexBufferCounters2[i] = 0;
          var ringbufferLength = GL.numTempVertexBuffersPerSize;
          context.tempVertexBuffers1[i] = [];
          context.tempVertexBuffers2[i] = [];
          var ringbuffer1 = context.tempVertexBuffers1[i];
          var ringbuffer2 = context.tempVertexBuffers2[i];
          ringbuffer1.length = ringbuffer2.length = ringbufferLength;
          for (var j = 0; j < ringbufferLength; ++j) {
            ringbuffer1[j] = ringbuffer2[j] = null; // Created on-demand
          }
        }
  
        if (quads) {
          // GL_QUAD indexes can be precalculated
          context.tempQuadIndexBuffer = GLctx.createBuffer();
          context.GLctx.bindBuffer(0x8893 /*GL_ELEMENT_ARRAY_BUFFER*/, context.tempQuadIndexBuffer);
          var numIndexes = GL.MAX_TEMP_BUFFER_SIZE >> 1;
          var quadIndexes = new Uint16Array(numIndexes);
          var i = 0, v = 0;
          while (1) {
            quadIndexes[i++] = v;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v+1;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v+2;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v+2;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v+3;
            if (i >= numIndexes) break;
            v += 4;
          }
          context.GLctx.bufferData(0x8893 /*GL_ELEMENT_ARRAY_BUFFER*/, quadIndexes, 0x88E4 /*GL_STATIC_DRAW*/);
          context.GLctx.bindBuffer(0x8893 /*GL_ELEMENT_ARRAY_BUFFER*/, null);
        }
      },getTempVertexBuffer:function getTempVertexBuffer(sizeBytes) {
        var idx = GL.log2ceilLookup(sizeBytes);
        var ringbuffer = GL.currentContext.tempVertexBuffers1[idx];
        var nextFreeBufferIndex = GL.currentContext.tempVertexBufferCounters1[idx];
        GL.currentContext.tempVertexBufferCounters1[idx] = (GL.currentContext.tempVertexBufferCounters1[idx]+1) & (GL.numTempVertexBuffersPerSize-1);
        var vbo = ringbuffer[nextFreeBufferIndex];
        if (vbo) {
          return vbo;
        }
        var prevVBO = GLctx.getParameter(0x8894 /*GL_ARRAY_BUFFER_BINDING*/);
        ringbuffer[nextFreeBufferIndex] = GLctx.createBuffer();
        GLctx.bindBuffer(0x8892 /*GL_ARRAY_BUFFER*/, ringbuffer[nextFreeBufferIndex]);
        GLctx.bufferData(0x8892 /*GL_ARRAY_BUFFER*/, 1 << idx, 0x88E8 /*GL_DYNAMIC_DRAW*/);
        GLctx.bindBuffer(0x8892 /*GL_ARRAY_BUFFER*/, prevVBO);
        return ringbuffer[nextFreeBufferIndex];
      },getTempIndexBuffer:function getTempIndexBuffer(sizeBytes) {
        var idx = GL.log2ceilLookup(sizeBytes);
        var ibo = GL.currentContext.tempIndexBuffers[idx];
        if (ibo) {
          return ibo;
        }
        var prevIBO = GLctx.getParameter(0x8895 /*ELEMENT_ARRAY_BUFFER_BINDING*/);
        GL.currentContext.tempIndexBuffers[idx] = GLctx.createBuffer();
        GLctx.bindBuffer(0x8893 /*GL_ELEMENT_ARRAY_BUFFER*/, GL.currentContext.tempIndexBuffers[idx]);
        GLctx.bufferData(0x8893 /*GL_ELEMENT_ARRAY_BUFFER*/, 1 << idx, 0x88E8 /*GL_DYNAMIC_DRAW*/);
        GLctx.bindBuffer(0x8893 /*GL_ELEMENT_ARRAY_BUFFER*/, prevIBO);
        return GL.currentContext.tempIndexBuffers[idx];
      },newRenderingFrameStarted:function newRenderingFrameStarted() {
        if (!GL.currentContext) {
          return;
        }
        var vb = GL.currentContext.tempVertexBuffers1;
        GL.currentContext.tempVertexBuffers1 = GL.currentContext.tempVertexBuffers2;
        GL.currentContext.tempVertexBuffers2 = vb;
        vb = GL.currentContext.tempVertexBufferCounters1;
        GL.currentContext.tempVertexBufferCounters1 = GL.currentContext.tempVertexBufferCounters2;
        GL.currentContext.tempVertexBufferCounters2 = vb;
        var largestIndex = GL.log2ceilLookup(GL.MAX_TEMP_BUFFER_SIZE);
        for (var i = 0; i <= largestIndex; ++i) {
          GL.currentContext.tempVertexBufferCounters1[i] = 0;
        }
      },getSource:function(shader, count, string, length) {
        var source = '';
        for (var i = 0; i < count; ++i) {
          var len = length ? HEAP32[(((length)+(i*4))>>2)] : -1;
          source += UTF8ToString(HEAP32[(((string)+(i*4))>>2)], len < 0 ? undefined : len);
        }
        return source;
      },calcBufLength:function calcBufLength(size, type, stride, count) {
        if (stride > 0) {
          return count * stride;  // XXXvlad this is not exactly correct I don't think
        }
        var typeSize = GL.byteSizeByType[type - GL.byteSizeByTypeRoot];
        return size * typeSize * count;
      },usedTempBuffers:[],preDrawHandleClientVertexAttribBindings:function preDrawHandleClientVertexAttribBindings(count) {
        GL.resetBufferBinding = false;
  
        // TODO: initial pass to detect ranges we need to upload, might not need an upload per attrib
        for (var i = 0; i < GL.currentContext.maxVertexAttribs; ++i) {
          var cb = GL.currentContext.clientBuffers[i];
          if (!cb.clientside || !cb.enabled) continue;
  
          GL.resetBufferBinding = true;
  
          var size = GL.calcBufLength(cb.size, cb.type, cb.stride, count);
          var buf = GL.getTempVertexBuffer(size);
          GLctx.bindBuffer(0x8892 /*GL_ARRAY_BUFFER*/, buf);
          GLctx.bufferSubData(0x8892 /*GL_ARRAY_BUFFER*/,
                                   0,
                                   HEAPU8.subarray(cb.ptr, cb.ptr + size));
          cb.vertexAttribPointerAdaptor.call(GLctx, i, cb.size, cb.type, cb.normalized, cb.stride, 0);
        }
      },postDrawHandleClientVertexAttribBindings:function postDrawHandleClientVertexAttribBindings() {
        if (GL.resetBufferBinding) {
          GLctx.bindBuffer(0x8892 /*GL_ARRAY_BUFFER*/, GL.buffers[GLctx.currentArrayBufferBinding]);
        }
      },createContext:function(canvas, webGLContextAttributes) {
  
  
  
  
  
        var ctx = 
          (webGLContextAttributes.majorVersion > 1)
          ?
            canvas.getContext("webgl2", webGLContextAttributes)
          :
          (canvas.getContext("webgl", webGLContextAttributes)
            // https://caniuse.com/#feat=webgl
            );
  
  
        if (!ctx) return 0;
  
        var handle = GL.registerContext(ctx, webGLContextAttributes);
  
  
  
        return handle;
      },registerContext:function(ctx, webGLContextAttributes) {
        // without pthreads a context is just an integer ID
        var handle = GL.getNewId(GL.contexts);
  
        var context = {
          handle: handle,
          attributes: webGLContextAttributes,
          version: webGLContextAttributes.majorVersion,
          GLctx: ctx
        };
  
  
        // Store the created context object so that we can access the context given a canvas without having to pass the parameters again.
        if (ctx.canvas) ctx.canvas.GLctxObject = context;
        GL.contexts[handle] = context;
        if (typeof webGLContextAttributes.enableExtensionsByDefault === 'undefined' || webGLContextAttributes.enableExtensionsByDefault) {
          GL.initExtensions(context);
        }
  
        context.maxVertexAttribs = context.GLctx.getParameter(0x8869 /*GL_MAX_VERTEX_ATTRIBS*/);
        context.clientBuffers = [];
        for (var i = 0; i < context.maxVertexAttribs; i++) {
          context.clientBuffers[i] = { enabled: false, clientside: false, size: 0, type: 0, normalized: 0, stride: 0, ptr: 0, vertexAttribPointerAdaptor: null };
        }
  
        GL.generateTempBuffers(false, context);
  
  
  
        return handle;
      },makeContextCurrent:function(contextHandle) {
  
        GL.currentContext = GL.contexts[contextHandle]; // Active Emscripten GL layer context object.
        Module.ctx = GLctx = GL.currentContext && GL.currentContext.GLctx; // Active WebGL context object.
        return !(contextHandle && !GLctx);
      },getContext:function(contextHandle) {
        return GL.contexts[contextHandle];
      },deleteContext:function(contextHandle) {
        if (GL.currentContext === GL.contexts[contextHandle]) GL.currentContext = null;
        if (typeof JSEvents === 'object') JSEvents.removeAllHandlersOnTarget(GL.contexts[contextHandle].GLctx.canvas); // Release all JS event handlers on the DOM element that the GL context is associated with since the context is now deleted.
        if (GL.contexts[contextHandle] && GL.contexts[contextHandle].GLctx.canvas) GL.contexts[contextHandle].GLctx.canvas.GLctxObject = undefined; // Make sure the canvas object no longer refers to the context object so there are no GC surprises.
        GL.contexts[contextHandle] = null;
      },initExtensions:function(context) {
        // If this function is called without a specific context object, init the extensions of the currently active context.
        if (!context) context = GL.currentContext;
  
        if (context.initExtensionsDone) return;
        context.initExtensionsDone = true;
  
        var GLctx = context.GLctx;
  
        // Detect the presence of a few extensions manually, this GL interop layer itself will need to know if they exist.
  
        // Extensions that are only available in WebGL 1 (the calls will be no-ops if called on a WebGL 2 context active)
        __webgl_enable_ANGLE_instanced_arrays(GLctx);
        __webgl_enable_OES_vertex_array_object(GLctx);
        __webgl_enable_WEBGL_draw_buffers(GLctx);
        // Extensions that are available from WebGL >= 2 (no-op if called on a WebGL 1 context active)
        __webgl_enable_WEBGL_draw_instanced_base_vertex_base_instance(GLctx);
  
        GLctx.disjointTimerQueryExt = GLctx.getExtension("EXT_disjoint_timer_query");
        __webgl_enable_WEBGL_multi_draw(GLctx);
  
        // These are the 'safe' feature-enabling extensions that don't add any performance impact related to e.g. debugging, and
        // should be enabled by default so that client GLES2/GL code will not need to go through extra hoops to get its stuff working.
        // As new extensions are ratified at http://www.khronos.org/registry/webgl/extensions/ , feel free to add your new extensions
        // here, as long as they don't produce a performance impact for users that might not be using those extensions.
        // E.g. debugging-related extensions should probably be off by default.
        var automaticallyEnabledExtensions = [ // Khronos ratified WebGL extensions ordered by number (no debug extensions):
                                               "OES_texture_float", "OES_texture_half_float", "OES_standard_derivatives",
                                               "OES_vertex_array_object", "WEBGL_compressed_texture_s3tc", "WEBGL_depth_texture",
                                               "OES_element_index_uint", "EXT_texture_filter_anisotropic", "EXT_frag_depth",
                                               "WEBGL_draw_buffers", "ANGLE_instanced_arrays", "OES_texture_float_linear",
                                               "OES_texture_half_float_linear", "EXT_blend_minmax", "EXT_shader_texture_lod",
                                               "EXT_texture_norm16",
                                               // Community approved WebGL extensions ordered by number:
                                               "WEBGL_compressed_texture_pvrtc", "EXT_color_buffer_half_float", "WEBGL_color_buffer_float",
                                               "EXT_sRGB", "WEBGL_compressed_texture_etc1", "EXT_disjoint_timer_query",
                                               "WEBGL_compressed_texture_etc", "WEBGL_compressed_texture_astc", "EXT_color_buffer_float",
                                               "WEBGL_compressed_texture_s3tc_srgb", "EXT_disjoint_timer_query_webgl2",
                                               // Old style prefixed forms of extensions (but still currently used on e.g. iPhone Xs as
                                               // tested on iOS 12.4.1):
                                               "WEBKIT_WEBGL_compressed_texture_pvrtc"];
  
        function shouldEnableAutomatically(extension) {
          var ret = false;
          automaticallyEnabledExtensions.forEach(function(include) {
            if (extension.indexOf(include) != -1) {
              ret = true;
            }
          });
          return ret;
        }
  
        var exts = GLctx.getSupportedExtensions() || []; // .getSupportedExtensions() can return null if context is lost, so coerce to empty array.
        exts.forEach(function(ext) {
          if (automaticallyEnabledExtensions.indexOf(ext) != -1) {
            GLctx.getExtension(ext); // Calling .getExtension enables that extension permanently, no need to store the return value to be enabled.
          }
        });
      },populateUniformTable:function(program) {
        var p = GL.programs[program];
        var ptable = GL.programInfos[program] = {
          uniforms: {},
          maxUniformLength: 0, // This is eagerly computed below, since we already enumerate all uniforms anyway.
          maxAttributeLength: -1, // This is lazily computed and cached, computed when/if first asked, "-1" meaning not computed yet.
          maxUniformBlockNameLength: -1 // Lazily computed as well
        };
  
        var utable = ptable.uniforms;
        // A program's uniform table maps the string name of an uniform to an integer location of that uniform.
        // The global GL.uniforms map maps integer locations to WebGLUniformLocations.
        var numUniforms = GLctx.getProgramParameter(p, 0x8B86/*GL_ACTIVE_UNIFORMS*/);
        for (var i = 0; i < numUniforms; ++i) {
          var u = GLctx.getActiveUniform(p, i);
  
          var name = u.name;
          ptable.maxUniformLength = Math.max(ptable.maxUniformLength, name.length+1);
  
          // If we are dealing with an array, e.g. vec4 foo[3], strip off the array index part to canonicalize that "foo", "foo[]",
          // and "foo[0]" will mean the same. Loop below will populate foo[1] and foo[2].
          if (name.slice(-1) == ']') {
            name = name.slice(0, name.lastIndexOf('['));
          }
  
          // Optimize memory usage slightly: If we have an array of uniforms, e.g. 'vec3 colors[3];', then
          // only store the string 'colors' in utable, and 'colors[0]', 'colors[1]' and 'colors[2]' will be parsed as 'colors'+i.
          // Note that for the GL.uniforms table, we still need to fetch the all WebGLUniformLocations for all the indices.
          var loc = GLctx.getUniformLocation(p, name);
          if (loc) {
            var id = GL.getNewId(GL.uniforms);
            utable[name] = [u.size, id];
            GL.uniforms[id] = loc;
  
            for (var j = 1; j < u.size; ++j) {
              var n = name + '['+j+']';
              loc = GLctx.getUniformLocation(p, n);
              id = GL.getNewId(GL.uniforms);
  
              GL.uniforms[id] = loc;
            }
          }
        }
      }};
  
  var __emscripten_webgl_power_preferences=['default', 'low-power', 'high-performance'];function _emscripten_webgl_do_create_context(target, attributes) {
      assert(attributes);
      var contextAttributes = {};
      var a = attributes >> 2;
      contextAttributes['alpha'] = !!HEAP32[a + (0>>2)];
      contextAttributes['depth'] = !!HEAP32[a + (4>>2)];
      contextAttributes['stencil'] = !!HEAP32[a + (8>>2)];
      contextAttributes['antialias'] = !!HEAP32[a + (12>>2)];
      contextAttributes['premultipliedAlpha'] = !!HEAP32[a + (16>>2)];
      contextAttributes['preserveDrawingBuffer'] = !!HEAP32[a + (20>>2)];
      var powerPreference = HEAP32[a + (24>>2)];
      contextAttributes['powerPreference'] = __emscripten_webgl_power_preferences[powerPreference];
      contextAttributes['failIfMajorPerformanceCaveat'] = !!HEAP32[a + (28>>2)];
      contextAttributes.majorVersion = HEAP32[a + (32>>2)];
      contextAttributes.minorVersion = HEAP32[a + (36>>2)];
      contextAttributes.enableExtensionsByDefault = HEAP32[a + (40>>2)];
      contextAttributes.explicitSwapControl = HEAP32[a + (44>>2)];
      contextAttributes.proxyContextToMainThread = HEAP32[a + (48>>2)];
      contextAttributes.renderViaOffscreenBackBuffer = HEAP32[a + (52>>2)];
  
      var canvas = findCanvasEventTarget(target);
  
  
  
      if (!canvas) {
        return 0;
      }
  
      if (contextAttributes.explicitSwapControl) {
        return 0;
      }
  
  
      var contextHandle = GL.createContext(canvas, contextAttributes);
      return contextHandle;
    }function _emscripten_webgl_create_context(a0,a1
  ) {
  return _emscripten_webgl_do_create_context(a0,a1);
  }

  function _emscripten_webgl_init_context_attributes(attributes) {
      assert(attributes);
      var a = attributes >> 2;
      for(var i = 0; i < (56>>2); ++i) {
        HEAP32[a+i] = 0;
      }
  
      HEAP32[a + (0>>2)] =
      HEAP32[a + (4>>2)] = 
      HEAP32[a + (12>>2)] = 
      HEAP32[a + (16>>2)] = 
      HEAP32[a + (32>>2)] = 
      HEAP32[a + (40>>2)] = 1;
  
    }

  function _emscripten_webgl_make_context_current(contextHandle) {
      var success = GL.makeContextCurrent(contextHandle);
      return success ? 0 : -5;
    }

  
  
  var ENV={};
  
  function getExecutableName() {
      return thisProgram || './this.program';
    }function getEnvStrings() {
      if (!getEnvStrings.strings) {
        // Default values.
        // Browser language detection #8751
        var lang = ((typeof navigator === 'object' && navigator.languages && navigator.languages[0]) || 'C').replace('-', '_') + '.UTF-8';
        var env = {
          'USER': 'web_user',
          'LOGNAME': 'web_user',
          'PATH': '/',
          'PWD': '/',
          'HOME': '/home/web_user',
          'LANG': lang,
          '_': getExecutableName()
        };
        // Apply the user-provided values, if any.
        for (var x in ENV) {
          env[x] = ENV[x];
        }
        var strings = [];
        for (var x in env) {
          strings.push(x + '=' + env[x]);
        }
        getEnvStrings.strings = strings;
      }
      return getEnvStrings.strings;
    }function _environ_get(__environ, environ_buf) {
      var bufSize = 0;
      getEnvStrings().forEach(function(string, i) {
        var ptr = environ_buf + bufSize;
        HEAP32[(((__environ)+(i * 4))>>2)]=ptr;
        writeAsciiToMemory(string, ptr);
        bufSize += string.length + 1;
      });
      return 0;
    }

  function _environ_sizes_get(penviron_count, penviron_buf_size) {
      var strings = getEnvStrings();
      HEAP32[((penviron_count)>>2)]=strings.length;
      var bufSize = 0;
      strings.forEach(function(string) {
        bufSize += string.length + 1;
      });
      HEAP32[((penviron_buf_size)>>2)]=bufSize;
      return 0;
    }

  function _fd_close(fd) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _fd_read(fd, iov, iovcnt, pnum) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = SYSCALLS.doReadv(stream, iov, iovcnt);
      HEAP32[((pnum)>>2)]=num
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {try {
  
      
      var stream = SYSCALLS.getStreamFromFD(fd);
      var HIGH_OFFSET = 0x100000000; // 2^32
      // use an unsigned operator on low and shift high by 32-bits
      var offset = offset_high * HIGH_OFFSET + (offset_low >>> 0);
  
      var DOUBLE_LIMIT = 0x20000000000000; // 2^53
      // we also check for equality since DOUBLE_LIMIT + 1 == DOUBLE_LIMIT
      if (offset <= -DOUBLE_LIMIT || offset >= DOUBLE_LIMIT) {
        return -61;
      }
  
      FS.llseek(stream, offset, whence);
      (tempI64 = [stream.position>>>0,(tempDouble=stream.position,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((newOffset)>>2)]=tempI64[0],HEAP32[(((newOffset)+(4))>>2)]=tempI64[1]);
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _fd_write(fd, iov, iovcnt, pnum) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = SYSCALLS.doWritev(stream, iov, iovcnt);
      HEAP32[((pnum)>>2)]=num
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _glActiveTexture(x0) { GLctx['activeTexture'](x0) }

  function _glAttachShader(program, shader) {
      GLctx.attachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  function _glBindBuffer(target, buffer) {
      if (target == 0x8892 /*GL_ARRAY_BUFFER*/) {
        GLctx.currentArrayBufferBinding = buffer;
      } else if (target == 0x8893 /*GL_ELEMENT_ARRAY_BUFFER*/) {
        GLctx.currentElementArrayBufferBinding = buffer;
      }
  
      if (target == 0x88EB /*GL_PIXEL_PACK_BUFFER*/) {
        // In WebGL 2 glReadPixels entry point, we need to use a different WebGL 2 API function call when a buffer is bound to
        // GL_PIXEL_PACK_BUFFER_BINDING point, so must keep track whether that binding point is non-null to know what is
        // the proper API function to call.
        GLctx.currentPixelPackBufferBinding = buffer;
      } else if (target == 0x88EC /*GL_PIXEL_UNPACK_BUFFER*/) {
        // In WebGL 2 gl(Compressed)Tex(Sub)Image[23]D entry points, we need to
        // use a different WebGL 2 API function call when a buffer is bound to
        // GL_PIXEL_UNPACK_BUFFER_BINDING point, so must keep track whether that
        // binding point is non-null to know what is the proper API function to
        // call.
        GLctx.currentPixelUnpackBufferBinding = buffer;
      }
      GLctx.bindBuffer(target, GL.buffers[buffer]);
    }

  function _glBindBufferBase(target, index, buffer) {
      GLctx['bindBufferBase'](target, index, GL.buffers[buffer]);
    }

  function _glBindFramebuffer(target, framebuffer) {
  
      GLctx.bindFramebuffer(target, GL.framebuffers[framebuffer]);
  
    }

  function _glBindRenderbuffer(target, renderbuffer) {
      GLctx.bindRenderbuffer(target, GL.renderbuffers[renderbuffer]);
    }

  function _glBindTexture(target, texture) {
      GLctx.bindTexture(target, GL.textures[texture]);
    }

  function _glBindVertexArray(vao) {
      GLctx['bindVertexArray'](GL.vaos[vao]);
      var ibo = GLctx.getParameter(0x8895 /*ELEMENT_ARRAY_BUFFER_BINDING*/);
      GLctx.currentElementArrayBufferBinding = ibo ? (ibo.name | 0) : 0;
    }

  function _glBlendEquation(x0) { GLctx['blendEquation'](x0) }

  function _glBlendFunc(x0, x1) { GLctx['blendFunc'](x0, x1) }

  function _glBlitFramebuffer(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9) { GLctx['blitFramebuffer'](x0, x1, x2, x3, x4, x5, x6, x7, x8, x9) }

  function _glBufferData(target, size, data, usage) {
  
      if (GL.currentContext.version >= 2) { // WebGL 2 provides new garbage-free entry points to call to WebGL. Use those always when possible.
        if (data) {
          GLctx.bufferData(target, HEAPU8, usage, data, size);
        } else {
          GLctx.bufferData(target, size, usage);
        }
      } else {
        // N.b. here first form specifies a heap subarray, second form an integer size, so the ?: code here is polymorphic. It is advised to avoid
        // randomly mixing both uses in calling code, to avoid any potential JS engine JIT issues.
        GLctx.bufferData(target, data ? HEAPU8.subarray(data, data+size) : size, usage);
      }
    }

  function _glClear(x0) { GLctx['clear'](x0) }

  function _glClearColor(x0, x1, x2, x3) { GLctx['clearColor'](x0, x1, x2, x3) }

  function _glColorMask(red, green, blue, alpha) {
      GLctx.colorMask(!!red, !!green, !!blue, !!alpha);
    }

  function _glCompileShader(shader) {
      GLctx.compileShader(GL.shaders[shader]);
    }

  function _glCreateProgram() {
      var id = GL.getNewId(GL.programs);
      var program = GLctx.createProgram();
      program.name = id;
      GL.programs[id] = program;
      return id;
    }

  function _glCreateShader(shaderType) {
      var id = GL.getNewId(GL.shaders);
      GL.shaders[id] = GLctx.createShader(shaderType);
      return id;
    }

  function _glCullFace(x0) { GLctx['cullFace'](x0) }

  function _glDeleteBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((buffers)+(i*4))>>2)];
        var buffer = GL.buffers[id];
  
        // From spec: "glDeleteBuffers silently ignores 0's and names that do not
        // correspond to existing buffer objects."
        if (!buffer) continue;
  
        GLctx.deleteBuffer(buffer);
        buffer.name = 0;
        GL.buffers[id] = null;
  
        if (id == GLctx.currentArrayBufferBinding) GLctx.currentArrayBufferBinding = 0;
        if (id == GLctx.currentElementArrayBufferBinding) GLctx.currentElementArrayBufferBinding = 0;
        if (id == GLctx.currentPixelPackBufferBinding) GLctx.currentPixelPackBufferBinding = 0;
        if (id == GLctx.currentPixelUnpackBufferBinding) GLctx.currentPixelUnpackBufferBinding = 0;
      }
    }

  function _glDeleteFramebuffers(n, framebuffers) {
      for (var i = 0; i < n; ++i) {
        var id = HEAP32[(((framebuffers)+(i*4))>>2)];
        var framebuffer = GL.framebuffers[id];
        if (!framebuffer) continue; // GL spec: "glDeleteFramebuffers silently ignores 0s and names that do not correspond to existing framebuffer objects".
        GLctx.deleteFramebuffer(framebuffer);
        framebuffer.name = 0;
        GL.framebuffers[id] = null;
      }
    }

  function _glDeleteProgram(id) {
      if (!id) return;
      var program = GL.programs[id];
      if (!program) { // glDeleteProgram actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteProgram(program);
      program.name = 0;
      GL.programs[id] = null;
      GL.programInfos[id] = null;
    }

  function _glDeleteRenderbuffers(n, renderbuffers) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((renderbuffers)+(i*4))>>2)];
        var renderbuffer = GL.renderbuffers[id];
        if (!renderbuffer) continue; // GL spec: "glDeleteRenderbuffers silently ignores 0s and names that do not correspond to existing renderbuffer objects".
        GLctx.deleteRenderbuffer(renderbuffer);
        renderbuffer.name = 0;
        GL.renderbuffers[id] = null;
      }
    }

  function _glDeleteShader(id) {
      if (!id) return;
      var shader = GL.shaders[id];
      if (!shader) { // glDeleteShader actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteShader(shader);
      GL.shaders[id] = null;
    }

  function _glDeleteTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((textures)+(i*4))>>2)];
        var texture = GL.textures[id];
        if (!texture) continue; // GL spec: "glDeleteTextures silently ignores 0s and names that do not correspond to existing textures".
        GLctx.deleteTexture(texture);
        texture.name = 0;
        GL.textures[id] = null;
      }
    }

  function _glDeleteVertexArrays(n, vaos) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((vaos)+(i*4))>>2)];
        GLctx['deleteVertexArray'](GL.vaos[id]);
        GL.vaos[id] = null;
      }
    }

  function _glDepthFunc(x0) { GLctx['depthFunc'](x0) }

  function _glDepthMask(flag) {
      GLctx.depthMask(!!flag);
    }

  function _glDisable(x0) { GLctx['disable'](x0) }

  
  var tempFixedLengthArray=[];function _glDrawBuffers(n, bufs) {
  
      var bufArray = tempFixedLengthArray[n];
      for (var i = 0; i < n; i++) {
        bufArray[i] = HEAP32[(((bufs)+(i*4))>>2)];
      }
  
      GLctx['drawBuffers'](bufArray);
    }

  function _glDrawElements(mode, count, type, indices) {
      var buf;
      if (!GLctx.currentElementArrayBufferBinding) {
        var size = GL.calcBufLength(1, type, 0, count);
        buf = GL.getTempIndexBuffer(size);
        GLctx.bindBuffer(0x8893 /*GL_ELEMENT_ARRAY_BUFFER*/, buf);
        GLctx.bufferSubData(0x8893 /*GL_ELEMENT_ARRAY_BUFFER*/,
                                 0,
                                 HEAPU8.subarray(indices, indices + size));
        // the index is now 0
        indices = 0;
      }
  
      // bind any client-side buffers
      GL.preDrawHandleClientVertexAttribBindings(count);
  
      GLctx.drawElements(mode, count, type, indices);
  
      GL.postDrawHandleClientVertexAttribBindings(count);
  
      if (!GLctx.currentElementArrayBufferBinding) {
        GLctx.bindBuffer(0x8893 /*GL_ELEMENT_ARRAY_BUFFER*/, null);
      }
    }

  function _glEnable(x0) { GLctx['enable'](x0) }

  function _glEnableVertexAttribArray(index) {
      var cb = GL.currentContext.clientBuffers[index];
      cb.enabled = true;
      GLctx.enableVertexAttribArray(index);
    }

  function _glFlush() { GLctx['flush']() }

  function _glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer) {
      GLctx.framebufferRenderbuffer(target, attachment, renderbuffertarget,
                                         GL.renderbuffers[renderbuffer]);
    }

  function _glFramebufferTexture2D(target, attachment, textarget, texture, level) {
      GLctx.framebufferTexture2D(target, attachment, textarget,
                                      GL.textures[texture], level);
    }

  function _glFrontFace(x0) { GLctx['frontFace'](x0) }

  
  function __glGenObject(n, buffers, createFunction, objectTable
      ) {
      for (var i = 0; i < n; i++) {
        var buffer = GLctx[createFunction]();
        var id = buffer && GL.getNewId(objectTable);
        if (buffer) {
          buffer.name = id;
          objectTable[id] = buffer;
        } else {
          GL.recordError(0x502 /* GL_INVALID_OPERATION */);
        }
        HEAP32[(((buffers)+(i*4))>>2)]=id;
      }
    }function _glGenBuffers(n, buffers) {
      __glGenObject(n, buffers, 'createBuffer', GL.buffers
        );
    }

  function _glGenFramebuffers(n, ids) {
      __glGenObject(n, ids, 'createFramebuffer', GL.framebuffers
        );
    }

  function _glGenRenderbuffers(n, renderbuffers) {
      __glGenObject(n, renderbuffers, 'createRenderbuffer', GL.renderbuffers
        );
    }

  function _glGenTextures(n, textures) {
      __glGenObject(n, textures, 'createTexture', GL.textures
        );
    }

  function _glGenVertexArrays(n, arrays) {
      __glGenObject(n, arrays, 'createVertexArray', GL.vaos
        );
    }

  function _glGenerateMipmap(x0) { GLctx['generateMipmap'](x0) }

  function _glGetError() {
      var error = GLctx.getError() || GL.lastError;
      GL.lastError = 0/*GL_NO_ERROR*/;
      return error;
    }

  
  
  
  function readI53FromI64(ptr) {
      return HEAPU32[ptr>>2] + HEAP32[ptr+4>>2] * 4294967296;
    }
  
  function readI53FromU64(ptr) {
      return HEAPU32[ptr>>2] + HEAPU32[ptr+4>>2] * 4294967296;
    }function writeI53ToI64(ptr, num) {
      HEAPU32[ptr>>2] = num;
      HEAPU32[ptr+4>>2] = (num - HEAPU32[ptr>>2])/4294967296;
      var deserialized = (num >= 0) ? readI53FromU64(ptr) : readI53FromI64(ptr);
      if (deserialized != num) warnOnce('writeI53ToI64() out of range: serialized JS Number ' + num + ' to Wasm heap as bytes lo=0x' + HEAPU32[ptr>>2].toString(16) + ', hi=0x' + HEAPU32[ptr+4>>2].toString(16) + ', which deserializes back to ' + deserialized + ' instead!');
    }function emscriptenWebGLGet(name_, p, type) {
      // Guard against user passing a null pointer.
      // Note that GLES2 spec does not say anything about how passing a null pointer should be treated.
      // Testing on desktop core GL 3, the application crashes on glGetIntegerv to a null pointer, but
      // better to report an error instead of doing anything random.
      if (!p) {
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      var ret = undefined;
      switch(name_) { // Handle a few trivial GLES values
        case 0x8DFA: // GL_SHADER_COMPILER
          ret = 1;
          break;
        case 0x8DF8: // GL_SHADER_BINARY_FORMATS
          if (type != 0 && type != 1) {
            GL.recordError(0x500); // GL_INVALID_ENUM
          }
          return; // Do not write anything to the out pointer, since no binary formats are supported.
        case 0x87FE: // GL_NUM_PROGRAM_BINARY_FORMATS
        case 0x8DF9: // GL_NUM_SHADER_BINARY_FORMATS
          ret = 0;
          break;
        case 0x86A2: // GL_NUM_COMPRESSED_TEXTURE_FORMATS
          // WebGL doesn't have GL_NUM_COMPRESSED_TEXTURE_FORMATS (it's obsolete since GL_COMPRESSED_TEXTURE_FORMATS returns a JS array that can be queried for length),
          // so implement it ourselves to allow C++ GLES2 code get the length.
          var formats = GLctx.getParameter(0x86A3 /*GL_COMPRESSED_TEXTURE_FORMATS*/);
          ret = formats ? formats.length : 0;
          break;
        case 0x821D: // GL_NUM_EXTENSIONS
          if (GL.currentContext.version < 2) {
            GL.recordError(0x502 /* GL_INVALID_OPERATION */); // Calling GLES3/WebGL2 function with a GLES2/WebGL1 context
            return;
          }
          // .getSupportedExtensions() can return null if context is lost, so coerce to empty array.
          var exts = GLctx.getSupportedExtensions() || [];
          ret = 2 * exts.length; // each extension is duplicated, first in unprefixed WebGL form, and then a second time with "GL_" prefix.
          break;
        case 0x821B: // GL_MAJOR_VERSION
        case 0x821C: // GL_MINOR_VERSION
          if (GL.currentContext.version < 2) {
            GL.recordError(0x500); // GL_INVALID_ENUM
            return;
          }
          ret = name_ == 0x821B ? 3 : 0; // return version 3.0
          break;
      }
  
      if (ret === undefined) {
        var result = GLctx.getParameter(name_);
        switch (typeof(result)) {
          case "number":
            ret = result;
            break;
          case "boolean":
            ret = result ? 1 : 0;
            break;
          case "string":
            GL.recordError(0x500); // GL_INVALID_ENUM
            return;
          case "object":
            if (result === null) {
              // null is a valid result for some (e.g., which buffer is bound - perhaps nothing is bound), but otherwise
              // can mean an invalid name_, which we need to report as an error
              switch(name_) {
                case 0x8894: // ARRAY_BUFFER_BINDING
                case 0x8B8D: // CURRENT_PROGRAM
                case 0x8895: // ELEMENT_ARRAY_BUFFER_BINDING
                case 0x8CA6: // FRAMEBUFFER_BINDING or DRAW_FRAMEBUFFER_BINDING
                case 0x8CA7: // RENDERBUFFER_BINDING
                case 0x8069: // TEXTURE_BINDING_2D
                case 0x85B5: // WebGL 2 GL_VERTEX_ARRAY_BINDING, or WebGL 1 extension OES_vertex_array_object GL_VERTEX_ARRAY_BINDING_OES
                case 0x8F36: // COPY_READ_BUFFER_BINDING or COPY_READ_BUFFER
                case 0x8F37: // COPY_WRITE_BUFFER_BINDING or COPY_WRITE_BUFFER
                case 0x88ED: // PIXEL_PACK_BUFFER_BINDING
                case 0x88EF: // PIXEL_UNPACK_BUFFER_BINDING
                case 0x8CAA: // READ_FRAMEBUFFER_BINDING
                case 0x8919: // SAMPLER_BINDING
                case 0x8C1D: // TEXTURE_BINDING_2D_ARRAY
                case 0x806A: // TEXTURE_BINDING_3D
                case 0x8E25: // TRANSFORM_FEEDBACK_BINDING
                case 0x8C8F: // TRANSFORM_FEEDBACK_BUFFER_BINDING
                case 0x8A28: // UNIFORM_BUFFER_BINDING
                case 0x8514: { // TEXTURE_BINDING_CUBE_MAP
                  ret = 0;
                  break;
                }
                default: {
                  GL.recordError(0x500); // GL_INVALID_ENUM
                  return;
                }
              }
            } else if (result instanceof Float32Array ||
                       result instanceof Uint32Array ||
                       result instanceof Int32Array ||
                       result instanceof Array) {
              for (var i = 0; i < result.length; ++i) {
                switch (type) {
                  case 0: HEAP32[(((p)+(i*4))>>2)]=result[i]; break;
                  case 2: HEAPF32[(((p)+(i*4))>>2)]=result[i]; break;
                  case 4: HEAP8[(((p)+(i))>>0)]=result[i] ? 1 : 0; break;
                }
              }
              return;
            } else {
              try {
                ret = result.name | 0;
              } catch(e) {
                GL.recordError(0x500); // GL_INVALID_ENUM
                err('GL_INVALID_ENUM in glGet' + type + 'v: Unknown object returned from WebGL getParameter(' + name_ + ')! (error: ' + e + ')');
                return;
              }
            }
            break;
          default:
            GL.recordError(0x500); // GL_INVALID_ENUM
            err('GL_INVALID_ENUM in glGet' + type + 'v: Native code calling glGet' + type + 'v(' + name_ + ') and it returns ' + result + ' of type ' + typeof(result) + '!');
            return;
        }
      }
  
      switch (type) {
        case 1: writeI53ToI64(p, ret); break;
        case 0: HEAP32[((p)>>2)]=ret; break;
        case 2:   HEAPF32[((p)>>2)]=ret; break;
        case 4: HEAP8[((p)>>0)]=ret ? 1 : 0; break;
      }
    }function _glGetFloatv(name_, p) {
      emscriptenWebGLGet(name_, p, 2);
    }

  function _glGetIntegerv(name_, p) {
      emscriptenWebGLGet(name_, p, 0);
    }

  function _glGetProgramInfoLog(program, maxLength, length, infoLog) {
      var log = GLctx.getProgramInfoLog(GL.programs[program]);
      if (log === null) log = '(unknown error)';
      var numBytesWrittenExclNull = (maxLength > 0 && infoLog) ? stringToUTF8(log, infoLog, maxLength) : 0;
      if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
    }

  function _glGetProgramiv(program, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
  
      if (program >= GL.counter) {
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
  
      var ptable = GL.programInfos[program];
      if (!ptable) {
        GL.recordError(0x502 /* GL_INVALID_OPERATION */);
        return;
      }
  
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getProgramInfoLog(GL.programs[program]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else if (pname == 0x8B87 /* GL_ACTIVE_UNIFORM_MAX_LENGTH */) {
        HEAP32[((p)>>2)]=ptable.maxUniformLength;
      } else if (pname == 0x8B8A /* GL_ACTIVE_ATTRIBUTE_MAX_LENGTH */) {
        if (ptable.maxAttributeLength == -1) {
          program = GL.programs[program];
          var numAttribs = GLctx.getProgramParameter(program, 0x8B89/*GL_ACTIVE_ATTRIBUTES*/);
          ptable.maxAttributeLength = 0; // Spec says if there are no active attribs, 0 must be returned.
          for (var i = 0; i < numAttribs; ++i) {
            var activeAttrib = GLctx.getActiveAttrib(program, i);
            ptable.maxAttributeLength = Math.max(ptable.maxAttributeLength, activeAttrib.name.length+1);
          }
        }
        HEAP32[((p)>>2)]=ptable.maxAttributeLength;
      } else if (pname == 0x8A35 /* GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH */) {
        if (ptable.maxUniformBlockNameLength == -1) {
          program = GL.programs[program];
          var numBlocks = GLctx.getProgramParameter(program, 0x8A36/*GL_ACTIVE_UNIFORM_BLOCKS*/);
          ptable.maxUniformBlockNameLength = 0;
          for (var i = 0; i < numBlocks; ++i) {
            var activeBlockName = GLctx.getActiveUniformBlockName(program, i);
            ptable.maxUniformBlockNameLength = Math.max(ptable.maxUniformBlockNameLength, activeBlockName.length+1);
          }
        }
        HEAP32[((p)>>2)]=ptable.maxUniformBlockNameLength;
      } else {
        HEAP32[((p)>>2)]=GLctx.getProgramParameter(GL.programs[program], pname);
      }
    }

  function _glGetShaderInfoLog(shader, maxLength, length, infoLog) {
      var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
      if (log === null) log = '(unknown error)';
      var numBytesWrittenExclNull = (maxLength > 0 && infoLog) ? stringToUTF8(log, infoLog, maxLength) : 0;
      if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
    }

  function _glGetShaderiv(shader, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
        if (log === null) log = '(unknown error)';
        // The GLES2 specification says that if the shader has an empty info log,
        // a value of 0 is returned. Otherwise the log has a null char appended.
        // (An empty string is falsey, so we can just check that instead of
        // looking at log.length.)
        var logLength = log ? log.length + 1 : 0;
        HEAP32[((p)>>2)]=logLength;
      } else if (pname == 0x8B88) { // GL_SHADER_SOURCE_LENGTH
        var source = GLctx.getShaderSource(GL.shaders[shader]);
        // source may be a null, or the empty string, both of which are falsey
        // values that we report a 0 length for.
        var sourceLength = source ? source.length + 1 : 0;
        HEAP32[((p)>>2)]=sourceLength;
      } else {
        HEAP32[((p)>>2)]=GLctx.getShaderParameter(GL.shaders[shader], pname);
      }
    }

  
  function stringToNewUTF8(jsString) {
      var length = lengthBytesUTF8(jsString)+1;
      var cString = _malloc(length);
      stringToUTF8(jsString, cString, length);
      return cString;
    }function _glGetString(name_) {
      if (GL.stringCache[name_]) return GL.stringCache[name_];
      var ret;
      switch(name_) {
        case 0x1F03 /* GL_EXTENSIONS */:
          var exts = GLctx.getSupportedExtensions() || []; // .getSupportedExtensions() can return null if context is lost, so coerce to empty array.
          exts = exts.concat(exts.map(function(e) { return "GL_" + e; }));
          ret = stringToNewUTF8(exts.join(' '));
          break;
        case 0x1F00 /* GL_VENDOR */:
        case 0x1F01 /* GL_RENDERER */:
        case 0x9245 /* UNMASKED_VENDOR_WEBGL */:
        case 0x9246 /* UNMASKED_RENDERER_WEBGL */:
          var s = GLctx.getParameter(name_);
          if (!s) {
            GL.recordError(0x500/*GL_INVALID_ENUM*/);
          }
          ret = stringToNewUTF8(s);
          break;
  
        case 0x1F02 /* GL_VERSION */:
          var glVersion = GLctx.getParameter(0x1F02 /*GL_VERSION*/);
          // return GLES version string corresponding to the version of the WebGL context
          if (GL.currentContext.version >= 2) glVersion = 'OpenGL ES 3.0 (' + glVersion + ')';
          else
          {
            glVersion = 'OpenGL ES 2.0 (' + glVersion + ')';
          }
          ret = stringToNewUTF8(glVersion);
          break;
        case 0x8B8C /* GL_SHADING_LANGUAGE_VERSION */:
          var glslVersion = GLctx.getParameter(0x8B8C /*GL_SHADING_LANGUAGE_VERSION*/);
          // extract the version number 'N.M' from the string 'WebGL GLSL ES N.M ...'
          var ver_re = /^WebGL GLSL ES ([0-9]\.[0-9][0-9]?)(?:$| .*)/;
          var ver_num = glslVersion.match(ver_re);
          if (ver_num !== null) {
            if (ver_num[1].length == 3) ver_num[1] = ver_num[1] + '0'; // ensure minor version has 2 digits
            glslVersion = 'OpenGL ES GLSL ES ' + ver_num[1] + ' (' + glslVersion + ')';
          }
          ret = stringToNewUTF8(glslVersion);
          break;
        default:
          GL.recordError(0x500/*GL_INVALID_ENUM*/);
          return 0;
      }
      GL.stringCache[name_] = ret;
      return ret;
    }

  function _glGetUniformBlockIndex(program, uniformBlockName) {
      return GLctx['getUniformBlockIndex'](GL.programs[program], UTF8ToString(uniformBlockName));
    }

  
  /** @suppress {checkTypes} */
  function jstoi_q(str) {
      return parseInt(str);
    }function _glGetUniformLocation(program, name) {
      name = UTF8ToString(name);
  
      var arrayIndex = 0;
      // If user passed an array accessor "[index]", parse the array index off the accessor.
      if (name[name.length - 1] == ']') {
        var leftBrace = name.lastIndexOf('[');
        arrayIndex = name[leftBrace+1] != ']' ? jstoi_q(name.slice(leftBrace + 1)) : 0; // "index]", parseInt will ignore the ']' at the end; but treat "foo[]" as "foo[0]"
        name = name.slice(0, leftBrace);
      }
  
      var uniformInfo = GL.programInfos[program] && GL.programInfos[program].uniforms[name]; // returns pair [ dimension_of_uniform_array, uniform_location ]
      if (uniformInfo && arrayIndex >= 0 && arrayIndex < uniformInfo[0]) { // Check if user asked for an out-of-bounds element, i.e. for 'vec4 colors[3];' user could ask for 'colors[10]' which should return -1.
        return uniformInfo[1] + arrayIndex;
      } else {
        return -1;
      }
    }

  function _glLinkProgram(program) {
      GLctx.linkProgram(GL.programs[program]);
      GL.populateUniformTable(program);
    }

  
  function emscriptenWebGLGetBufferBinding(target) {
      switch(target) {
        case 0x8892 /*GL_ARRAY_BUFFER*/: target = 0x8894 /*GL_ARRAY_BUFFER_BINDING*/; break;
        case 0x8893 /*GL_ELEMENT_ARRAY_BUFFER*/: target = 0x8895 /*GL_ELEMENT_ARRAY_BUFFER_BINDING*/; break;
        case 0x88EB /*GL_PIXEL_PACK_BUFFER*/: target = 0x88ED /*GL_PIXEL_PACK_BUFFER_BINDING*/; break;
        case 0x88EC /*GL_PIXEL_UNPACK_BUFFER*/: target = 0x88EF /*GL_PIXEL_UNPACK_BUFFER_BINDING*/; break;
        case 0x8C8E /*GL_TRANSFORM_FEEDBACK_BUFFER*/: target = 0x8C8F /*GL_TRANSFORM_FEEDBACK_BUFFER_BINDING*/; break;
        case 0x8F36 /*GL_COPY_READ_BUFFER*/: target = 0x8F36 /*GL_COPY_READ_BUFFER_BINDING*/; break;
        case 0x8F37 /*GL_COPY_WRITE_BUFFER*/: target = 0x8F37 /*GL_COPY_WRITE_BUFFER_BINDING*/; break;
        case 0x8A11 /*GL_UNIFORM_BUFFER*/: target = 0x8A28 /*GL_UNIFORM_BUFFER_BINDING*/; break;
        // In default case, fall through and assume passed one of the _BINDING enums directly.
      }
      var buffer = GLctx.getParameter(target);
      if (buffer) return buffer.name|0;
      else return 0;
    }
  
  function emscriptenWebGLValidateMapBufferTarget(target) {
      switch (target) {
        case 0x8892: // GL_ARRAY_BUFFER
        case 0x8893: // GL_ELEMENT_ARRAY_BUFFER
        case 0x8F36: // GL_COPY_READ_BUFFER
        case 0x8F37: // GL_COPY_WRITE_BUFFER
        case 0x88EB: // GL_PIXEL_PACK_BUFFER
        case 0x88EC: // GL_PIXEL_UNPACK_BUFFER
        case 0x8C2A: // GL_TEXTURE_BUFFER
        case 0x8C8E: // GL_TRANSFORM_FEEDBACK_BUFFER
        case 0x8A11: // GL_UNIFORM_BUFFER
          return true;
        default:
          return false;
      }
    }function _glMapBufferRange(target, offset, length, access) {
      if (access != 0x1A && access != 0xA) {
        err("glMapBufferRange is only supported when access is MAP_WRITE|INVALIDATE_BUFFER");
        return 0;
      }
  
      if (!emscriptenWebGLValidateMapBufferTarget(target)) {
        GL.recordError(0x500/*GL_INVALID_ENUM*/);
        err('GL_INVALID_ENUM in glMapBufferRange');
        return 0;
      }
  
      var mem = _malloc(length);
      if (!mem) return 0;
  
      GL.mappedBuffers[emscriptenWebGLGetBufferBinding(target)] = {
        offset: offset,
        length: length,
        mem: mem,
        access: access,
      };
      return mem;
    }

  function _glPolygonOffset(x0, x1) { GLctx['polygonOffset'](x0, x1) }

  function _glReadBuffer(x0) { GLctx['readBuffer'](x0) }

  
  
  function computeUnpackAlignedImageSize(width, height, sizePerPixel, alignment) {
      function roundedToNextMultipleOf(x, y) {
        return (x + y - 1) & -y;
      }
      var plainRowSize = width * sizePerPixel;
      var alignedRowSize = roundedToNextMultipleOf(plainRowSize, alignment);
      return height * alignedRowSize;
    }
  
  function __colorChannelsInGlTextureFormat(format) {
      // Micro-optimizations for size: map format to size by subtracting smallest enum value (0x1902) from all values first.
      // Also omit the most common size value (1) from the list, which is assumed by formats not on the list.
      var colorChannels = {
        // 0x1902 /* GL_DEPTH_COMPONENT */ - 0x1902: 1,
        // 0x1906 /* GL_ALPHA */ - 0x1902: 1,
        5: 3,
        6: 4,
        // 0x1909 /* GL_LUMINANCE */ - 0x1902: 1,
        8: 2,
        29502: 3,
        29504: 4,
        // 0x1903 /* GL_RED */ - 0x1902: 1,
        26917: 2,
        26918: 2,
        // 0x8D94 /* GL_RED_INTEGER */ - 0x1902: 1,
        29846: 3,
        29847: 4
      };
      return colorChannels[format - 0x1902]||1;
    }
  
  function heapObjectForWebGLType(type) {
      // Micro-optimization for size: Subtract lowest GL enum number (0x1400/* GL_BYTE */) from type to compare
      // smaller values for the heap, for shorter generated code size.
      // Also the type HEAPU16 is not tested for explicitly, but any unrecognized type will return out HEAPU16.
      // (since most types are HEAPU16)
      type -= 0x1400;
      if (type == 0) return HEAP8;
  
      if (type == 1) return HEAPU8;
  
      if (type == 2) return HEAP16;
  
      if (type == 4) return HEAP32;
  
      if (type == 6) return HEAPF32;
  
      if (type == 5
        || type == 28922
        || type == 28520
        || type == 30779
        || type == 30782
        )
        return HEAPU32;
  
      return HEAPU16;
    }
  
  function heapAccessShiftForWebGLHeap(heap) {
      return 31 - Math.clz32(heap.BYTES_PER_ELEMENT);
    }function emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat) {
      var heap = heapObjectForWebGLType(type);
      var shift = heapAccessShiftForWebGLHeap(heap);
      var byteSize = 1<<shift;
      var sizePerPixel = __colorChannelsInGlTextureFormat(format) * byteSize;
      var bytes = computeUnpackAlignedImageSize(width, height, sizePerPixel, GL.unpackAlignment);
      return heap.subarray(pixels >> shift, pixels + bytes >> shift);
    }function _glReadPixels(x, y, width, height, format, type, pixels) {
      if (GL.currentContext.version >= 2) { // WebGL 2 provides new garbage-free entry points to call to WebGL. Use those always when possible.
        if (GLctx.currentPixelPackBufferBinding) {
          GLctx.readPixels(x, y, width, height, format, type, pixels);
        } else {
          var heap = heapObjectForWebGLType(type);
          GLctx.readPixels(x, y, width, height, format, type, heap, pixels >> heapAccessShiftForWebGLHeap(heap));
        }
        return;
      }
      var pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, format);
      if (!pixelData) {
        GL.recordError(0x500/*GL_INVALID_ENUM*/);
        return;
      }
      GLctx.readPixels(x, y, width, height, format, type, pixelData);
    }

  function _glRenderbufferStorage(x0, x1, x2, x3) { GLctx['renderbufferStorage'](x0, x1, x2, x3) }

  function _glShaderSource(shader, count, string, length) {
      var source = GL.getSource(shader, count, string, length);
  
  
      GLctx.shaderSource(GL.shaders[shader], source);
    }

  function _glStencilFunc(x0, x1, x2) { GLctx['stencilFunc'](x0, x1, x2) }

  function _glStencilMask(x0) { GLctx['stencilMask'](x0) }

  function _glStencilOp(x0, x1, x2) { GLctx['stencilOp'](x0, x1, x2) }

  function _glStencilOpSeparate(x0, x1, x2, x3) { GLctx['stencilOpSeparate'](x0, x1, x2, x3) }

  function _glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) {
      if (GL.currentContext.version >= 2) {
        // WebGL 2 provides new garbage-free entry points to call to WebGL. Use those always when possible.
        if (GLctx.currentPixelUnpackBufferBinding) {
          GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixels);
        } else if (pixels) {
          var heap = heapObjectForWebGLType(type);
          GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, heap, pixels >> heapAccessShiftForWebGLHeap(heap));
        } else {
          GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, null);
        }
        return;
      }
      GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixels ? emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat) : null);
    }

  function _glTexParameterf(x0, x1, x2) { GLctx['texParameterf'](x0, x1, x2) }

  function _glTexParameterfv(target, pname, params) {
      var param = HEAPF32[((params)>>2)];
      GLctx.texParameterf(target, pname, param);
    }

  function _glTexParameteri(x0, x1, x2) { GLctx['texParameteri'](x0, x1, x2) }

  function _glUniform1f(location, v0) {
      GLctx.uniform1f(GL.uniforms[location], v0);
    }

  function _glUniform1i(location, v0) {
      GLctx.uniform1i(GL.uniforms[location], v0);
    }

  function _glUniform2f(location, v0, v1) {
      GLctx.uniform2f(GL.uniforms[location], v0, v1);
    }

  
  var miniTempWebGLFloatBuffers=[];function _glUniform2fv(location, count, value) {
  
  
      if (GL.currentContext.version >= 2) { // WebGL 2 provides new garbage-free entry points to call to WebGL. Use those always when possible.
        GLctx.uniform2fv(GL.uniforms[location], HEAPF32, value>>2, count*2);
        return;
      }
  
      if (count <= 144) {
        // avoid allocation when uploading few enough uniforms
        var view = miniTempWebGLFloatBuffers[2*count-1];
        for (var i = 0; i < 2*count; i += 2) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2,(value+count*8)>>2);
      }
      GLctx.uniform2fv(GL.uniforms[location], view);
    }

  function _glUniform3fv(location, count, value) {
  
  
      if (GL.currentContext.version >= 2) { // WebGL 2 provides new garbage-free entry points to call to WebGL. Use those always when possible.
        GLctx.uniform3fv(GL.uniforms[location], HEAPF32, value>>2, count*3);
        return;
      }
  
      if (count <= 96) {
        // avoid allocation when uploading few enough uniforms
        var view = miniTempWebGLFloatBuffers[3*count-1];
        for (var i = 0; i < 3*count; i += 3) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2,(value+count*12)>>2);
      }
      GLctx.uniform3fv(GL.uniforms[location], view);
    }

  function _glUniform4fv(location, count, value) {
  
  
      if (GL.currentContext.version >= 2) { // WebGL 2 provides new garbage-free entry points to call to WebGL. Use those always when possible.
        GLctx.uniform4fv(GL.uniforms[location], HEAPF32, value>>2, count*4);
        return;
      }
  
      if (count <= 72) {
        // avoid allocation when uploading few enough uniforms
        var view = miniTempWebGLFloatBuffers[4*count-1];
        // hoist the heap out of the loop for size and for pthreads+growth.
        var heap = HEAPF32;
        value >>= 2;
        for (var i = 0; i < 4 * count; i += 4) {
          var dst = value + i;
          view[i] = heap[dst];
          view[i + 1] = heap[dst + 1];
          view[i + 2] = heap[dst + 2];
          view[i + 3] = heap[dst + 3];
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2,(value+count*16)>>2);
      }
      GLctx.uniform4fv(GL.uniforms[location], view);
    }

  function _glUniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding) {
      program = GL.programs[program];
  
      GLctx['uniformBlockBinding'](program, uniformBlockIndex, uniformBlockBinding);
    }

  function _glUniformMatrix4fv(location, count, transpose, value) {
  
  
      if (GL.currentContext.version >= 2) { // WebGL 2 provides new garbage-free entry points to call to WebGL. Use those always when possible.
        GLctx.uniformMatrix4fv(GL.uniforms[location], !!transpose, HEAPF32, value>>2, count*16);
        return;
      }
  
      if (count <= 18) {
        // avoid allocation when uploading few enough uniforms
        var view = miniTempWebGLFloatBuffers[16*count-1];
        // hoist the heap out of the loop for size and for pthreads+growth.
        var heap = HEAPF32;
        value >>= 2;
        for (var i = 0; i < 16 * count; i += 16) {
          var dst = value + i;
          view[i] = heap[dst];
          view[i + 1] = heap[dst + 1];
          view[i + 2] = heap[dst + 2];
          view[i + 3] = heap[dst + 3];
          view[i + 4] = heap[dst + 4];
          view[i + 5] = heap[dst + 5];
          view[i + 6] = heap[dst + 6];
          view[i + 7] = heap[dst + 7];
          view[i + 8] = heap[dst + 8];
          view[i + 9] = heap[dst + 9];
          view[i + 10] = heap[dst + 10];
          view[i + 11] = heap[dst + 11];
          view[i + 12] = heap[dst + 12];
          view[i + 13] = heap[dst + 13];
          view[i + 14] = heap[dst + 14];
          view[i + 15] = heap[dst + 15];
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2,(value+count*64)>>2);
      }
      GLctx.uniformMatrix4fv(GL.uniforms[location], !!transpose, view);
    }

  function _glUnmapBuffer(target) {
      if (!emscriptenWebGLValidateMapBufferTarget(target)) {
        GL.recordError(0x500/*GL_INVALID_ENUM*/);
        err('GL_INVALID_ENUM in glUnmapBuffer');
        return 0;
      }
  
      var buffer = emscriptenWebGLGetBufferBinding(target);
      var mapping = GL.mappedBuffers[buffer];
      if (!mapping) {
        GL.recordError(0x502 /* GL_INVALID_OPERATION */);
        Module.printError('buffer was never mapped in glUnmapBuffer');
        return 0;
      }
      GL.mappedBuffers[buffer] = null;
  
      if (!(mapping.access & 0x10)) /* GL_MAP_FLUSH_EXPLICIT_BIT */
        if (GL.currentContext.version >= 2) { // WebGL 2 provides new garbage-free entry points to call to WebGL. Use those always when possible.
          GLctx.bufferSubData(target, mapping.offset, HEAPU8, mapping.mem, mapping.length);
        } else {
          GLctx.bufferSubData(target, mapping.offset, HEAPU8.subarray(mapping.mem, mapping.mem+mapping.length));
        }
      _free(mapping.mem);
      return 1;
    }

  function _glUseProgram(program) {
      GLctx.useProgram(GL.programs[program]);
    }

  function _glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
      var cb = GL.currentContext.clientBuffers[index];
      if (!GLctx.currentArrayBufferBinding) {
        cb.size = size;
        cb.type = type;
        cb.normalized = normalized;
        cb.stride = stride;
        cb.ptr = ptr;
        cb.clientside = true;
        cb.vertexAttribPointerAdaptor = function(index, size, type, normalized, stride, ptr) {
          this.vertexAttribPointer(index, size, type, normalized, stride, ptr);
        };
        return;
      }
      cb.clientside = false;
      GLctx.vertexAttribPointer(index, size, type, !!normalized, stride, ptr);
    }

  function _glViewport(x0, x1, x2, x3) { GLctx['viewport'](x0, x1, x2, x3) }

  function _setTempRet0($i) {
      setTempRet0(($i) | 0);
    }

  
  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]) {
        // no-op
      }
      return sum;
    }
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
  
      var tm_zone = HEAP32[(((tm)+(40))>>2)];
  
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)],
        tm_gmtoff: HEAP32[(((tm)+(36))>>2)],
        tm_zone: tm_zone ? UTF8ToString(tm_zone) : ''
      };
  
      var pattern = UTF8ToString(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S',                 // Replaced by the locale's appropriate time representation
        // Modified Conversion Specifiers
        '%Ec': '%c',                      // Replaced by the locale's alternative appropriate date and time representation.
        '%EC': '%C',                      // Replaced by the name of the base year (period) in the locale's alternative representation.
        '%Ex': '%m/%d/%y',                // Replaced by the locale's alternative date representation.
        '%EX': '%H:%M:%S',                // Replaced by the locale's alternative time representation.
        '%Ey': '%y',                      // Replaced by the offset from %EC (year only) in the locale's alternative representation.
        '%EY': '%Y',                      // Replaced by the full alternative year representation.
        '%Od': '%d',                      // Replaced by the day of the month, using the locale's alternative numeric symbols, filled as needed with leading zeros if there is any alternative symbol for zero; otherwise, with leading <space> characters.
        '%Oe': '%e',                      // Replaced by the day of the month, using the locale's alternative numeric symbols, filled as needed with leading <space> characters.
        '%OH': '%H',                      // Replaced by the hour (24-hour clock) using the locale's alternative numeric symbols.
        '%OI': '%I',                      // Replaced by the hour (12-hour clock) using the locale's alternative numeric symbols.
        '%Om': '%m',                      // Replaced by the month using the locale's alternative numeric symbols.
        '%OM': '%M',                      // Replaced by the minutes using the locale's alternative numeric symbols.
        '%OS': '%S',                      // Replaced by the seconds using the locale's alternative numeric symbols.
        '%Ou': '%u',                      // Replaced by the weekday as a number in the locale's alternative representation (Monday=1).
        '%OU': '%U',                      // Replaced by the week number of the year (Sunday as the first day of the week, rules corresponding to %U ) using the locale's alternative numeric symbols.
        '%OV': '%V',                      // Replaced by the week number of the year (Monday as the first day of the week, rules corresponding to %V ) using the locale's alternative numeric symbols.
        '%Ow': '%w',                      // Replaced by the number of the weekday (Sunday=0) using the locale's alternative numeric symbols.
        '%OW': '%W',                      // Replaced by the week number of the year (Monday as the first day of the week) using the locale's alternative numeric symbols.
        '%Oy': '%y',                      // Replaced by the year (offset from %C ) using the locale's alternative numeric symbols.
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      }
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      }
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        }
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      }
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      }
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else {
            return thisDate.getFullYear()-1;
          }
      }
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls((year/100)|0,2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year.
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes
          // January 4th, which is also the week that includes the first Thursday of the year, and
          // is also the first week that contains at least four days in the year.
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of
          // the last week of the preceding year; thus, for Saturday 2nd January 1999,
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th,
          // or 31st is a Monday, it and any following days are part of week 1 of the following year.
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
  
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          var twelveHour = date.tm_hour;
          if (twelveHour == 0) twelveHour = 12;
          else if (twelveHour > 12) twelveHour -= 12;
          return leadingNulls(twelveHour, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour >= 0 && date.tm_hour < 12) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          return date.tm_wday || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53].
          // The first Sunday of January is the first day of week 1;
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week)
          // as a decimal number [01,53]. If the week containing 1 January has four
          // or more days in the new year, then it is considered week 1.
          // Otherwise, it is the last week of the previous year, and the next week is week 1.
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          }
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          return date.tm_wday;
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53].
          // The first Monday of January is the first day of week 1;
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ).
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich).
          var off = date.tm_gmtoff;
          var ahead = off >= 0;
          off = Math.abs(off) / 60;
          // convert from minutes into hhmm format (which means 60 minutes = 100 units)
          off = (off / 60)*100 + (off % 60);
          return (ahead ? '+' : '-') + String("0000" + off).slice(-4);
        },
        '%Z': function(date) {
          return date.tm_zone;
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      }
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }function _strftime_l(s, maxsize, format, tm) {
      return _strftime(s, maxsize, format, tm); // no locale support yet
    }

var FSNode = /** @constructor */ function(parent, name, mode, rdev) {
    if (!parent) {
      parent = this;  // root node sets parent to itself
    }
    this.parent = parent;
    this.mount = parent.mount;
    this.mounted = null;
    this.id = FS.nextInode++;
    this.name = name;
    this.mode = mode;
    this.node_ops = {};
    this.stream_ops = {};
    this.rdev = rdev;
  };
  var readMode = 292/*292*/ | 73/*73*/;
  var writeMode = 146/*146*/;
  Object.defineProperties(FSNode.prototype, {
   read: {
    get: /** @this{FSNode} */function() {
     return (this.mode & readMode) === readMode;
    },
    set: /** @this{FSNode} */function(val) {
     val ? this.mode |= readMode : this.mode &= ~readMode;
    }
   },
   write: {
    get: /** @this{FSNode} */function() {
     return (this.mode & writeMode) === writeMode;
    },
    set: /** @this{FSNode} */function(val) {
     val ? this.mode |= writeMode : this.mode &= ~writeMode;
    }
   },
   isFolder: {
    get: /** @this{FSNode} */function() {
     return FS.isDir(this.mode);
    }
   },
   isDevice: {
    get: /** @this{FSNode} */function() {
     return FS.isChrdev(this.mode);
    }
   }
  });
  FS.FSNode = FSNode;
  FS.staticInit();Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
var GLctx;;
for (var i = 0; i < 32; ++i) tempFixedLengthArray.push(new Array(i));;
var miniTempWebGLFloatBuffersStorage = new Float32Array(288);
  for (/**@suppress{duplicate}*/var i = 0; i < 288; ++i) {
  miniTempWebGLFloatBuffers[i] = miniTempWebGLFloatBuffersStorage.subarray(0, i+1);
  }
  ;
var ASSERTIONS = true;



/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {string} input The string to decode.
 */
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE === 'boolean' && ENVIRONMENT_IS_NODE) {
    var buf;
    try {
      // TODO: Update Node.js externs, Closure does not recognize the following Buffer.from()
      /**@suppress{checkTypes}*/
      buf = Buffer.from(s, 'base64');
    } catch (_) {
      buf = new Buffer(s, 'base64');
    }
    return new Uint8Array(buf['buffer'], buf['byteOffset'], buf['byteLength']);
  }

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}


var asmLibraryArg = { "__cxa_allocate_exception": ___cxa_allocate_exception, "__cxa_atexit": ___cxa_atexit, "__cxa_throw": ___cxa_throw, "__indirect_function_table": wasmTable, "__map_file": ___map_file, "__sys_fcntl64": ___sys_fcntl64, "__sys_ioctl": ___sys_ioctl, "__sys_munmap": ___sys_munmap, "__sys_open": ___sys_open, "abort": _abort, "emscripten_memcpy_big": _emscripten_memcpy_big, "emscripten_resize_heap": _emscripten_resize_heap, "emscripten_set_canvas_element_size": _emscripten_set_canvas_element_size, "emscripten_webgl_create_context": _emscripten_webgl_create_context, "emscripten_webgl_init_context_attributes": _emscripten_webgl_init_context_attributes, "emscripten_webgl_make_context_current": _emscripten_webgl_make_context_current, "environ_get": _environ_get, "environ_sizes_get": _environ_sizes_get, "fd_close": _fd_close, "fd_read": _fd_read, "fd_seek": _fd_seek, "fd_write": _fd_write, "getTempRet0": getTempRet0, "glActiveTexture": _glActiveTexture, "glAttachShader": _glAttachShader, "glBindBuffer": _glBindBuffer, "glBindBufferBase": _glBindBufferBase, "glBindFramebuffer": _glBindFramebuffer, "glBindRenderbuffer": _glBindRenderbuffer, "glBindTexture": _glBindTexture, "glBindVertexArray": _glBindVertexArray, "glBlendEquation": _glBlendEquation, "glBlendFunc": _glBlendFunc, "glBlitFramebuffer": _glBlitFramebuffer, "glBufferData": _glBufferData, "glClear": _glClear, "glClearColor": _glClearColor, "glColorMask": _glColorMask, "glCompileShader": _glCompileShader, "glCreateProgram": _glCreateProgram, "glCreateShader": _glCreateShader, "glCullFace": _glCullFace, "glDeleteBuffers": _glDeleteBuffers, "glDeleteFramebuffers": _glDeleteFramebuffers, "glDeleteProgram": _glDeleteProgram, "glDeleteRenderbuffers": _glDeleteRenderbuffers, "glDeleteShader": _glDeleteShader, "glDeleteTextures": _glDeleteTextures, "glDeleteVertexArrays": _glDeleteVertexArrays, "glDepthFunc": _glDepthFunc, "glDepthMask": _glDepthMask, "glDisable": _glDisable, "glDrawBuffers": _glDrawBuffers, "glDrawElements": _glDrawElements, "glEnable": _glEnable, "glEnableVertexAttribArray": _glEnableVertexAttribArray, "glFlush": _glFlush, "glFramebufferRenderbuffer": _glFramebufferRenderbuffer, "glFramebufferTexture2D": _glFramebufferTexture2D, "glFrontFace": _glFrontFace, "glGenBuffers": _glGenBuffers, "glGenFramebuffers": _glGenFramebuffers, "glGenRenderbuffers": _glGenRenderbuffers, "glGenTextures": _glGenTextures, "glGenVertexArrays": _glGenVertexArrays, "glGenerateMipmap": _glGenerateMipmap, "glGetError": _glGetError, "glGetFloatv": _glGetFloatv, "glGetIntegerv": _glGetIntegerv, "glGetProgramInfoLog": _glGetProgramInfoLog, "glGetProgramiv": _glGetProgramiv, "glGetShaderInfoLog": _glGetShaderInfoLog, "glGetShaderiv": _glGetShaderiv, "glGetString": _glGetString, "glGetUniformBlockIndex": _glGetUniformBlockIndex, "glGetUniformLocation": _glGetUniformLocation, "glLinkProgram": _glLinkProgram, "glMapBufferRange": _glMapBufferRange, "glPolygonOffset": _glPolygonOffset, "glReadBuffer": _glReadBuffer, "glReadPixels": _glReadPixels, "glRenderbufferStorage": _glRenderbufferStorage, "glShaderSource": _glShaderSource, "glStencilFunc": _glStencilFunc, "glStencilMask": _glStencilMask, "glStencilOp": _glStencilOp, "glStencilOpSeparate": _glStencilOpSeparate, "glTexImage2D": _glTexImage2D, "glTexParameterf": _glTexParameterf, "glTexParameterfv": _glTexParameterfv, "glTexParameteri": _glTexParameteri, "glUniform1f": _glUniform1f, "glUniform1i": _glUniform1i, "glUniform2f": _glUniform2f, "glUniform2fv": _glUniform2fv, "glUniform3fv": _glUniform3fv, "glUniform4fv": _glUniform4fv, "glUniformBlockBinding": _glUniformBlockBinding, "glUniformMatrix4fv": _glUniformMatrix4fv, "glUnmapBuffer": _glUnmapBuffer, "glUseProgram": _glUseProgram, "glVertexAttribPointer": _glVertexAttribPointer, "glViewport": _glViewport, "memory": wasmMemory, "setTempRet0": setTempRet0, "strftime_l": _strftime_l };
var asm = createWasm();
/** @type {function(...*):?} */
var ___wasm_call_ctors = Module["___wasm_call_ctors"] = createExportWrapper("__wasm_call_ctors");

/** @type {function(...*):?} */
var _fflush = Module["_fflush"] = createExportWrapper("fflush");

/** @type {function(...*):?} */
var _wr_texture_2d_new = Module["_wr_texture_2d_new"] = createExportWrapper("wr_texture_2d_new");

/** @type {function(...*):?} */
var _wr_texture_2d_set_data = Module["_wr_texture_2d_set_data"] = createExportWrapper("wr_texture_2d_set_data");

/** @type {function(...*):?} */
var _wr_texture_2d_set_file_path = Module["_wr_texture_2d_set_file_path"] = createExportWrapper("wr_texture_2d_set_file_path");

/** @type {function(...*):?} */
var _wr_static_mesh_unit_box_new = Module["_wr_static_mesh_unit_box_new"] = createExportWrapper("wr_static_mesh_unit_box_new");

/** @type {function(...*):?} */
var _wr_static_mesh_unit_sphere_new = Module["_wr_static_mesh_unit_sphere_new"] = createExportWrapper("wr_static_mesh_unit_sphere_new");

/** @type {function(...*):?} */
var _wr_frame_buffer_new = Module["_wr_frame_buffer_new"] = createExportWrapper("wr_frame_buffer_new");

/** @type {function(...*):?} */
var _wr_frame_buffer_append_output_texture = Module["_wr_frame_buffer_append_output_texture"] = createExportWrapper("wr_frame_buffer_append_output_texture");

/** @type {function(...*):?} */
var _wr_frame_buffer_set_depth_texture = Module["_wr_frame_buffer_set_depth_texture"] = createExportWrapper("wr_frame_buffer_set_depth_texture");

/** @type {function(...*):?} */
var _wr_frame_buffer_enable_depth_buffer = Module["_wr_frame_buffer_enable_depth_buffer"] = createExportWrapper("wr_frame_buffer_enable_depth_buffer");

/** @type {function(...*):?} */
var _wr_frame_buffer_set_size = Module["_wr_frame_buffer_set_size"] = createExportWrapper("wr_frame_buffer_set_size");

/** @type {function(...*):?} */
var _wr_frame_buffer_setup = Module["_wr_frame_buffer_setup"] = createExportWrapper("wr_frame_buffer_setup");

/** @type {function(...*):?} */
var _wr_texture_rtt_new = Module["_wr_texture_rtt_new"] = createExportWrapper("wr_texture_rtt_new");

/** @type {function(...*):?} */
var _wr_texture_rtt_enable_initialize_data = Module["_wr_texture_rtt_enable_initialize_data"] = createExportWrapper("wr_texture_rtt_enable_initialize_data");

/** @type {function(...*):?} */
var _wr_shader_program_new = Module["_wr_shader_program_new"] = createExportWrapper("wr_shader_program_new");

/** @type {function(...*):?} */
var _wr_shader_program_set_vertex_shader_path = Module["_wr_shader_program_set_vertex_shader_path"] = createExportWrapper("wr_shader_program_set_vertex_shader_path");

/** @type {function(...*):?} */
var _wr_shader_program_set_fragment_shader_path = Module["_wr_shader_program_set_fragment_shader_path"] = createExportWrapper("wr_shader_program_set_fragment_shader_path");

/** @type {function(...*):?} */
var _wr_shader_program_use_uniform = Module["_wr_shader_program_use_uniform"] = createExportWrapper("wr_shader_program_use_uniform");

/** @type {function(...*):?} */
var _wr_shader_program_use_uniform_buffer = Module["_wr_shader_program_use_uniform_buffer"] = createExportWrapper("wr_shader_program_use_uniform_buffer");

/** @type {function(...*):?} */
var _wr_shader_program_create_custom_uniform = Module["_wr_shader_program_create_custom_uniform"] = createExportWrapper("wr_shader_program_create_custom_uniform");

/** @type {function(...*):?} */
var _wr_shader_program_get_gl_name = Module["_wr_shader_program_get_gl_name"] = createExportWrapper("wr_shader_program_get_gl_name");

/** @type {function(...*):?} */
var _wr_shader_program_has_vertex_shader_compilation_failed = Module["_wr_shader_program_has_vertex_shader_compilation_failed"] = createExportWrapper("wr_shader_program_has_vertex_shader_compilation_failed");

/** @type {function(...*):?} */
var _wr_shader_program_has_fragment_shader_compilation_failed = Module["_wr_shader_program_has_fragment_shader_compilation_failed"] = createExportWrapper("wr_shader_program_has_fragment_shader_compilation_failed");

/** @type {function(...*):?} */
var _wr_shader_program_get_compilation_log = Module["_wr_shader_program_get_compilation_log"] = createExportWrapper("wr_shader_program_get_compilation_log");

/** @type {function(...*):?} */
var _wr_shader_program_setup = Module["_wr_shader_program_setup"] = createExportWrapper("wr_shader_program_setup");

/** @type {function(...*):?} */
var _wr_transform_new = Module["_wr_transform_new"] = createExportWrapper("wr_transform_new");

/** @type {function(...*):?} */
var _wr_transform_get_matrix = Module["_wr_transform_get_matrix"] = createExportWrapper("wr_transform_get_matrix");

/** @type {function(...*):?} */
var _wr_transform_attach_child = Module["_wr_transform_attach_child"] = createExportWrapper("wr_transform_attach_child");

/** @type {function(...*):?} */
var _wr_transform_set_scale = Module["_wr_transform_set_scale"] = createExportWrapper("wr_transform_set_scale");

/** @type {function(...*):?} */
var _wr_renderable_new = Module["_wr_renderable_new"] = createExportWrapper("wr_renderable_new");

/** @type {function(...*):?} */
var _wr_renderable_set_mesh = Module["_wr_renderable_set_mesh"] = createExportWrapper("wr_renderable_set_mesh");

/** @type {function(...*):?} */
var _wr_renderable_set_material = Module["_wr_renderable_set_material"] = createExportWrapper("wr_renderable_set_material");

/** @type {function(...*):?} */
var _wr_renderable_set_visibility_flags = Module["_wr_renderable_set_visibility_flags"] = createExportWrapper("wr_renderable_set_visibility_flags");

/** @type {function(...*):?} */
var _wr_renderable_set_cast_shadows = Module["_wr_renderable_set_cast_shadows"] = createExportWrapper("wr_renderable_set_cast_shadows");

/** @type {function(...*):?} */
var _wr_texture_set_internal_format = Module["_wr_texture_set_internal_format"] = createExportWrapper("wr_texture_set_internal_format");

/** @type {function(...*):?} */
var _wr_texture_set_size = Module["_wr_texture_set_size"] = createExportWrapper("wr_texture_set_size");

/** @type {function(...*):?} */
var _wr_texture_setup = Module["_wr_texture_setup"] = createExportWrapper("wr_texture_setup");

/** @type {function(...*):?} */
var _wr_camera_set_near = Module["_wr_camera_set_near"] = createExportWrapper("wr_camera_set_near");

/** @type {function(...*):?} */
var _wr_camera_set_far = Module["_wr_camera_set_far"] = createExportWrapper("wr_camera_set_far");

/** @type {function(...*):?} */
var _wr_camera_set_fovy = Module["_wr_camera_set_fovy"] = createExportWrapper("wr_camera_set_fovy");

/** @type {function(...*):?} */
var _wr_camera_set_position = Module["_wr_camera_set_position"] = createExportWrapper("wr_camera_set_position");

/** @type {function(...*):?} */
var _wr_camera_set_orientation = Module["_wr_camera_set_orientation"] = createExportWrapper("wr_camera_set_orientation");

/** @type {function(...*):?} */
var _wr_material_delete = Module["_wr_material_delete"] = createExportWrapper("wr_material_delete");

/** @type {function(...*):?} */
var _wr_material_set_texture = Module["_wr_material_set_texture"] = createExportWrapper("wr_material_set_texture");

/** @type {function(...*):?} */
var _wr_material_set_default_program = Module["_wr_material_set_default_program"] = createExportWrapper("wr_material_set_default_program");

/** @type {function(...*):?} */
var _wr_scene_get_instance = Module["_wr_scene_get_instance"] = createExportWrapper("wr_scene_get_instance");

/** @type {function(...*):?} */
var _wr_scene_init = Module["_wr_scene_init"] = createExportWrapper("wr_scene_init");

/** @type {function(...*):?} */
var _wr_scene_render = Module["_wr_scene_render"] = createExportWrapper("wr_scene_render");

/** @type {function(...*):?} */
var _wr_scene_get_root = Module["_wr_scene_get_root"] = createExportWrapper("wr_scene_get_root");

/** @type {function(...*):?} */
var _wr_scene_get_viewport = Module["_wr_scene_get_viewport"] = createExportWrapper("wr_scene_get_viewport");

/** @type {function(...*):?} */
var _wr_gl_state_set_context_active = Module["_wr_gl_state_set_context_active"] = createExportWrapper("wr_gl_state_set_context_active");

/** @type {function(...*):?} */
var _wr_phong_material_new = Module["_wr_phong_material_new"] = createExportWrapper("wr_phong_material_new");

/** @type {function(...*):?} */
var _wr_phong_material_set_color = Module["_wr_phong_material_set_color"] = createExportWrapper("wr_phong_material_set_color");

/** @type {function(...*):?} */
var _wr_viewport_set_clear_color_rgb = Module["_wr_viewport_set_clear_color_rgb"] = createExportWrapper("wr_viewport_set_clear_color_rgb");

/** @type {function(...*):?} */
var _wr_viewport_set_size = Module["_wr_viewport_set_size"] = createExportWrapper("wr_viewport_set_size");

/** @type {function(...*):?} */
var _wr_viewport_set_frame_buffer = Module["_wr_viewport_set_frame_buffer"] = createExportWrapper("wr_viewport_set_frame_buffer");

/** @type {function(...*):?} */
var _wr_viewport_get_camera = Module["_wr_viewport_get_camera"] = createExportWrapper("wr_viewport_get_camera");

/** @type {function(...*):?} */
var _wr_node_set_visible = Module["_wr_node_set_visible"] = createExportWrapper("wr_node_set_visible");

/** @type {function(...*):?} */
var _wrjs_color_array = Module["_wrjs_color_array"] = createExportWrapper("wrjs_color_array");

/** @type {function(...*):?} */
var _wrjs_array4 = Module["_wrjs_array4"] = createExportWrapper("wrjs_array4");

/** @type {function(...*):?} */
var _wrjs_pointerOnFloat = Module["_wrjs_pointerOnFloat"] = createExportWrapper("wrjs_pointerOnFloat");

/** @type {function(...*):?} */
var _wrjs_dummy_texture = Module["_wrjs_dummy_texture"] = createExportWrapper("wrjs_dummy_texture");

/** @type {function(...*):?} */
var _wrjs_init_context = Module["_wrjs_init_context"] = createExportWrapper("wrjs_init_context");

/** @type {function(...*):?} */
var ___errno_location = Module["___errno_location"] = createExportWrapper("__errno_location");

/** @type {function(...*):?} */
var _free = Module["_free"] = createExportWrapper("free");

/** @type {function(...*):?} */
var _malloc = Module["_malloc"] = createExportWrapper("malloc");

/** @type {function(...*):?} */
var _setThrew = Module["_setThrew"] = createExportWrapper("setThrew");

/** @type {function(...*):?} */
var stackSave = Module["stackSave"] = createExportWrapper("stackSave");

/** @type {function(...*):?} */
var stackRestore = Module["stackRestore"] = createExportWrapper("stackRestore");

/** @type {function(...*):?} */
var stackAlloc = Module["stackAlloc"] = createExportWrapper("stackAlloc");

/** @type {function(...*):?} */
var dynCall_viijii = Module["dynCall_viijii"] = createExportWrapper("dynCall_viijii");

/** @type {function(...*):?} */
var dynCall_jiji = Module["dynCall_jiji"] = createExportWrapper("dynCall_jiji");

/** @type {function(...*):?} */
var dynCall_iiiiij = Module["dynCall_iiiiij"] = createExportWrapper("dynCall_iiiiij");

/** @type {function(...*):?} */
var dynCall_iiiiijj = Module["dynCall_iiiiijj"] = createExportWrapper("dynCall_iiiiijj");

/** @type {function(...*):?} */
var dynCall_iiiiiijj = Module["dynCall_iiiiiijj"] = createExportWrapper("dynCall_iiiiiijj");

/** @type {function(...*):?} */
var __growWasmMemory = Module["__growWasmMemory"] = createExportWrapper("__growWasmMemory");





// === Auto-generated postamble setup entry stuff ===

if (!Object.getOwnPropertyDescriptor(Module, "intArrayFromString")) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "intArrayToString")) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["ccall"] = ccall;
if (!Object.getOwnPropertyDescriptor(Module, "cwrap")) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setValue")) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getValue")) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocate")) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getMemory")) Module["getMemory"] = function() { abort("'getMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF8ArrayToString")) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF8ToString")) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8Array")) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8")) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF8")) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackTrace")) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreRun")) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnInit")) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreMain")) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnExit")) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPostRun")) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeStringToMemory")) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeArrayToMemory")) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeAsciiToMemory")) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["addRunDependency"] = addRunDependency;
Module["removeRunDependency"] = removeRunDependency;
Module["FS_createFolder"] = FS.createFolder;
Module["FS_createPath"] = FS.createPath;
Module["FS_createDataFile"] = FS.createDataFile;
Module["FS_createPreloadedFile"] = FS.createPreloadedFile;
Module["FS_createLazyFile"] = FS.createLazyFile;
Module["FS_createLink"] = FS.createLink;
Module["FS_createDevice"] = FS.createDevice;
Module["FS_unlink"] = FS.unlink;
if (!Object.getOwnPropertyDescriptor(Module, "dynamicAlloc")) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getLEB")) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFunctionTables")) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "alignFunctionTables")) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerFunctions")) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addFunction")) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "removeFunction")) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFuncWrapper")) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "prettyPrint")) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "makeBigInt")) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynCall")) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getCompilerSetting")) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "print")) Module["print"] = function() { abort("'print' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "printErr")) Module["printErr"] = function() { abort("'printErr' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getTempRet0")) Module["getTempRet0"] = function() { abort("'getTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setTempRet0")) Module["setTempRet0"] = function() { abort("'setTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "callMain")) Module["callMain"] = function() { abort("'callMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "abort")) Module["abort"] = function() { abort("'abort' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToNewUTF8")) Module["stringToNewUTF8"] = function() { abort("'stringToNewUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "abortOnCannotGrowMemory")) Module["abortOnCannotGrowMemory"] = function() { abort("'abortOnCannotGrowMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscripten_realloc_buffer")) Module["emscripten_realloc_buffer"] = function() { abort("'emscripten_realloc_buffer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ENV")) Module["ENV"] = function() { abort("'ENV' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ERRNO_CODES")) Module["ERRNO_CODES"] = function() { abort("'ERRNO_CODES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ERRNO_MESSAGES")) Module["ERRNO_MESSAGES"] = function() { abort("'ERRNO_MESSAGES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setErrNo")) Module["setErrNo"] = function() { abort("'setErrNo' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "DNS")) Module["DNS"] = function() { abort("'DNS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GAI_ERRNO_MESSAGES")) Module["GAI_ERRNO_MESSAGES"] = function() { abort("'GAI_ERRNO_MESSAGES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Protocols")) Module["Protocols"] = function() { abort("'Protocols' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Sockets")) Module["Sockets"] = function() { abort("'Sockets' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "traverseStack")) Module["traverseStack"] = function() { abort("'traverseStack' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UNWIND_CACHE")) Module["UNWIND_CACHE"] = function() { abort("'UNWIND_CACHE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "withBuiltinMalloc")) Module["withBuiltinMalloc"] = function() { abort("'withBuiltinMalloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readAsmConstArgsArray")) Module["readAsmConstArgsArray"] = function() { abort("'readAsmConstArgsArray' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readAsmConstArgs")) Module["readAsmConstArgs"] = function() { abort("'readAsmConstArgs' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "mainThreadEM_ASM")) Module["mainThreadEM_ASM"] = function() { abort("'mainThreadEM_ASM' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jstoi_q")) Module["jstoi_q"] = function() { abort("'jstoi_q' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jstoi_s")) Module["jstoi_s"] = function() { abort("'jstoi_s' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getExecutableName")) Module["getExecutableName"] = function() { abort("'getExecutableName' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "listenOnce")) Module["listenOnce"] = function() { abort("'listenOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "autoResumeAudioContext")) Module["autoResumeAudioContext"] = function() { abort("'autoResumeAudioContext' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynCallLegacy")) Module["dynCallLegacy"] = function() { abort("'dynCallLegacy' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getDynCaller")) Module["getDynCaller"] = function() { abort("'getDynCaller' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynCall")) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "callRuntimeCallbacks")) Module["callRuntimeCallbacks"] = function() { abort("'callRuntimeCallbacks' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "abortStackOverflow")) Module["abortStackOverflow"] = function() { abort("'abortStackOverflow' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "reallyNegative")) Module["reallyNegative"] = function() { abort("'reallyNegative' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "unSign")) Module["unSign"] = function() { abort("'unSign' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "reSign")) Module["reSign"] = function() { abort("'reSign' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "formatString")) Module["formatString"] = function() { abort("'formatString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PATH")) Module["PATH"] = function() { abort("'PATH' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PATH_FS")) Module["PATH_FS"] = function() { abort("'PATH_FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SYSCALLS")) Module["SYSCALLS"] = function() { abort("'SYSCALLS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "syscallMmap2")) Module["syscallMmap2"] = function() { abort("'syscallMmap2' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "syscallMunmap")) Module["syscallMunmap"] = function() { abort("'syscallMunmap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "JSEvents")) Module["JSEvents"] = function() { abort("'JSEvents' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "specialHTMLTargets")) Module["specialHTMLTargets"] = function() { abort("'specialHTMLTargets' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "maybeCStringToJsString")) Module["maybeCStringToJsString"] = function() { abort("'maybeCStringToJsString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "findEventTarget")) Module["findEventTarget"] = function() { abort("'findEventTarget' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "findCanvasEventTarget")) Module["findCanvasEventTarget"] = function() { abort("'findCanvasEventTarget' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "polyfillSetImmediate")) Module["polyfillSetImmediate"] = function() { abort("'polyfillSetImmediate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "demangle")) Module["demangle"] = function() { abort("'demangle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "demangleAll")) Module["demangleAll"] = function() { abort("'demangleAll' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jsStackTrace")) Module["jsStackTrace"] = function() { abort("'jsStackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackTrace")) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getEnvStrings")) Module["getEnvStrings"] = function() { abort("'getEnvStrings' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "checkWasiClock")) Module["checkWasiClock"] = function() { abort("'checkWasiClock' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64")) Module["writeI53ToI64"] = function() { abort("'writeI53ToI64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64Clamped")) Module["writeI53ToI64Clamped"] = function() { abort("'writeI53ToI64Clamped' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64Signaling")) Module["writeI53ToI64Signaling"] = function() { abort("'writeI53ToI64Signaling' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToU64Clamped")) Module["writeI53ToU64Clamped"] = function() { abort("'writeI53ToU64Clamped' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToU64Signaling")) Module["writeI53ToU64Signaling"] = function() { abort("'writeI53ToU64Signaling' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readI53FromI64")) Module["readI53FromI64"] = function() { abort("'readI53FromI64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readI53FromU64")) Module["readI53FromU64"] = function() { abort("'readI53FromU64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "convertI32PairToI53")) Module["convertI32PairToI53"] = function() { abort("'convertI32PairToI53' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "convertU32PairToI53")) Module["convertU32PairToI53"] = function() { abort("'convertU32PairToI53' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exceptionLast")) Module["exceptionLast"] = function() { abort("'exceptionLast' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exceptionCaught")) Module["exceptionCaught"] = function() { abort("'exceptionCaught' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exceptionThrowBuf")) Module["exceptionThrowBuf"] = function() { abort("'exceptionThrowBuf' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ExceptionInfoAttrs")) Module["ExceptionInfoAttrs"] = function() { abort("'ExceptionInfoAttrs' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ExceptionInfo")) Module["ExceptionInfo"] = function() { abort("'ExceptionInfo' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "CatchInfo")) Module["CatchInfo"] = function() { abort("'CatchInfo' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exception_addRef")) Module["exception_addRef"] = function() { abort("'exception_addRef' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exception_decRef")) Module["exception_decRef"] = function() { abort("'exception_decRef' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Browser")) Module["Browser"] = function() { abort("'Browser' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "funcWrappers")) Module["funcWrappers"] = function() { abort("'funcWrappers' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFuncWrapper")) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setMainLoop")) Module["setMainLoop"] = function() { abort("'setMainLoop' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "FS")) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "MEMFS")) Module["MEMFS"] = function() { abort("'MEMFS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "TTY")) Module["TTY"] = function() { abort("'TTY' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PIPEFS")) Module["PIPEFS"] = function() { abort("'PIPEFS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SOCKFS")) Module["SOCKFS"] = function() { abort("'SOCKFS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "tempFixedLengthArray")) Module["tempFixedLengthArray"] = function() { abort("'tempFixedLengthArray' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "miniTempWebGLFloatBuffers")) Module["miniTempWebGLFloatBuffers"] = function() { abort("'miniTempWebGLFloatBuffers' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "heapObjectForWebGLType")) Module["heapObjectForWebGLType"] = function() { abort("'heapObjectForWebGLType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "heapAccessShiftForWebGLHeap")) Module["heapAccessShiftForWebGLHeap"] = function() { abort("'heapAccessShiftForWebGLHeap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GL")) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGet")) Module["emscriptenWebGLGet"] = function() { abort("'emscriptenWebGLGet' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "computeUnpackAlignedImageSize")) Module["computeUnpackAlignedImageSize"] = function() { abort("'computeUnpackAlignedImageSize' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetTexPixelData")) Module["emscriptenWebGLGetTexPixelData"] = function() { abort("'emscriptenWebGLGetTexPixelData' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetUniform")) Module["emscriptenWebGLGetUniform"] = function() { abort("'emscriptenWebGLGetUniform' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetVertexAttrib")) Module["emscriptenWebGLGetVertexAttrib"] = function() { abort("'emscriptenWebGLGetVertexAttrib' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetBufferBinding")) Module["emscriptenWebGLGetBufferBinding"] = function() { abort("'emscriptenWebGLGetBufferBinding' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLValidateMapBufferTarget")) Module["emscriptenWebGLValidateMapBufferTarget"] = function() { abort("'emscriptenWebGLValidateMapBufferTarget' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeGLArray")) Module["writeGLArray"] = function() { abort("'writeGLArray' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "AL")) Module["AL"] = function() { abort("'AL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_unicode")) Module["SDL_unicode"] = function() { abort("'SDL_unicode' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_ttfContext")) Module["SDL_ttfContext"] = function() { abort("'SDL_ttfContext' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_audio")) Module["SDL_audio"] = function() { abort("'SDL_audio' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL")) Module["SDL"] = function() { abort("'SDL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_gfx")) Module["SDL_gfx"] = function() { abort("'SDL_gfx' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLUT")) Module["GLUT"] = function() { abort("'GLUT' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "EGL")) Module["EGL"] = function() { abort("'EGL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLFW_Window")) Module["GLFW_Window"] = function() { abort("'GLFW_Window' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLFW")) Module["GLFW"] = function() { abort("'GLFW' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLEW")) Module["GLEW"] = function() { abort("'GLEW' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "IDBStore")) Module["IDBStore"] = function() { abort("'IDBStore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "runAndAbortIfError")) Module["runAndAbortIfError"] = function() { abort("'runAndAbortIfError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetIndexed")) Module["emscriptenWebGLGetIndexed"] = function() { abort("'emscriptenWebGLGetIndexed' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "warnOnce")) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackSave")) Module["stackSave"] = function() { abort("'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackRestore")) Module["stackRestore"] = function() { abort("'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackAlloc")) Module["stackAlloc"] = function() { abort("'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "AsciiToString")) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToAscii")) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF16ToString")) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF16")) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF16")) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF32ToString")) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF32")) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF32")) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocateUTF8")) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocateUTF8OnStack")) Module["allocateUTF8OnStack"] = function() { abort("'allocateUTF8OnStack' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["writeStackCookie"] = writeStackCookie;
Module["checkStackCookie"] = checkStackCookie;
if (!Object.getOwnPropertyDescriptor(Module, "intArrayFromBase64")) Module["intArrayFromBase64"] = function() { abort("'intArrayFromBase64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "tryParseAsDataURI")) Module["tryParseAsDataURI"] = function() { abort("'tryParseAsDataURI' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_NORMAL")) Object.defineProperty(Module, "ALLOC_NORMAL", { configurable: true, get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_STACK")) Object.defineProperty(Module, "ALLOC_STACK", { configurable: true, get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_NONE")) Object.defineProperty(Module, "ALLOC_NONE", { configurable: true, get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });


var calledRun;

/**
 * @constructor
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
}

var calledMain = false;


dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!calledRun) run();
  if (!calledRun) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
};





/** @type {function(Array=)} */
function run(args) {
  args = args || arguments_;

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later

  function doRun() {
    // run may have just been called through dependencies being fulfilled just in this very frame,
    // or while the async setStatus time below was happening
    if (calledRun) return;
    calledRun = true;
    Module['calledRun'] = true;

    if (ABORT) return;

    initRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    assert(!Module['_main'], 'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]');

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else
  {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in SYSCALLS_REQUIRE_FILESYSTEM=0
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = out;
  var printErr = err;
  var has = false;
  out = err = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = Module['_fflush'];
    if (flush) flush(0);
    // also flush in the JS FS layer
    ['stdout', 'stderr'].forEach(function(name) {
      var info = FS.analyzePath('/dev/' + name);
      if (!info) return;
      var stream = info.object;
      var rdev = stream.rdev;
      var tty = TTY.ttys[rdev];
      if (tty && tty.output && tty.output.length) {
        has = true;
      }
    });
  } catch(e) {}
  out = print;
  err = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

/** @param {boolean|number=} implicit */
function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && noExitRuntime && status === 0) {
    return;
  }

  if (noExitRuntime) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      var msg = 'program exited (with status: ' + status + '), but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)';
      err(msg);
    }
  } else {

    EXITSTATUS = status;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);

    ABORT = true;
  }

  quit_(status, new ExitStatus(status));
}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}


  noExitRuntime = true;

run();






// {{MODULE_ADDITIONS}}



